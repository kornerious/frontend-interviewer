[
  {
    "id": "07eb964b-c4fc-4aca-b401-86f57f7715d6",
    "startLine": 12000,
    "endLine": 12099,
    "processedDate": "2025-06-17T12:42:53.083Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_css_grid",
          "title": "CSS Grid Layout",
          "content": "CSS Grid Layout is a powerful two-dimensional layout system for the web. It allows you to design complex responsive layouts more easily and consistently across different screen sizes. Unlike Flexbox, which is primarily a one-dimensional layout system (either row or column), CSS Grid can manage both rows and columns simultaneously, making it ideal for overall page layout or any component requiring precise alignment in both dimensions.\n\n## Key Concepts\n\n### Grid Container\nThe element on which `display: grid` is applied becomes a grid container. This container directly affects its immediate children, turning them into grid items.\n\n### Grid Items\nDirect children of the grid container become grid items. These items can then be positioned and sized within the grid structure.\n\n### Grid Tracks\nThese are the rows and columns that make up the grid. They are defined using properties like `grid-template-columns` and `grid-template-rows`.\n\n### `grid-template-columns` and `grid-template-rows`\nThese properties define the number and size of columns and rows in the grid. Values can be explicit lengths (px, em, rem), percentages, or flexible units like `fr` (fractional unit). `repeat()` function is very useful for creating multiple tracks of the same size.\n\n### `gap` (or `grid-gap`)\nThis property defines the space between grid tracks (rows and columns). It's a shorthand for `grid-row-gap` and `grid-column-gap`.\n\n### Positioning Grid Items (`grid-column`, `grid-row`)\nGrid items can be explicitly placed within the grid using these properties. They accept `line-start / line-end` values or `line-start / span N` values. `grid-column: 1 / 3` means the item starts at column line 1 and ends before column line 3 (spanning two columns). `grid-row: 2 / span 2` means it starts at row line 2 and spans 2 rows.",
          "examples": [
            {
              "id": "example_css_grid_1",
              "title": "Basic Grid Layout with Gaps",
              "code": "/* HTML Structure */\n<!-- <div class=\"container\">\n  <div class=\"item\">1</div>\n  <div class=\"item\">2</div>\n  <div class=\"item\">3</div>\n  <div class=\"item\">4</div>\n  <div class=\"item\">5</div>\n  <div class=\"item\">6</div>\n</div> -->\n\n/* CSS */\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* Creates 3 equal-width columns */\n  gap: 20px; /* Adds 20px space between grid cells */\n  border: 1px solid blue;\n  padding: 10px;\n}\n\n.item {\n  background-color: lightblue;\n  border: 1px solid #ccc;\n  padding: 15px;\n  text-align: center;\n}",
              "explanation": "This example sets up a basic grid container with three equal-width columns using `repeat(3, 1fr)`. The `gap: 20px` property adds 20 pixels of space both horizontally and vertically between the grid items. The result is a flexible 3-column layout where items automatically flow into available cells.",
              "language": "css"
            },
            {
              "id": "example_css_grid_2",
              "title": "Positioning Grid Items and Spanning",
              "code": "/* HTML Structure */\n<!-- <div class=\"container-span\">\n  <div class=\"item\">1</div>\n  <div class=\"item special-item\">2 (Spans)</div>\n  <div class=\"item\">3</div>\n  <div class=\"item\">4</div>\n  <div class=\"item\">5</div>\n  <div class=\"item\">6</div>\n</div> -->\n\n/* CSS */\n.container-span {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 columns */\n  grid-template-rows: repeat(3, 100px); /* 3 rows, 100px height each */\n  gap: 10px;\n  border: 1px solid green;\n  padding: 10px;\n}\n\n.item {\n  background-color: lightcoral;\n  border: 1px solid #ccc;\n  padding: 15px;\n  text-align: center;\n}\n\n.special-item {\n  grid-column: 1 / 3; /* Starts at column line 1, ends before column line 3 (spans 2 columns) */\n  grid-row: 2 / span 2; /* Starts at row line 2, spans 2 rows */\n  background-color: lightgreen;\n}",
              "explanation": "This example demonstrates how to explicitly place and size a grid item. The `.special-item` uses `grid-column: 1 / 3` to occupy the first two columns (from line 1 to line 3). It also uses `grid-row: 2 / span 2` to start at row line 2 and stretch across two rows. This precise control over item placement is a key strength of CSS Grid.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Layout",
            "Grid",
            "Responsive Design"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "HTML_structure",
            "CSS_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "advanced_layout_techniques",
            "responsive_web_design"
          ]
        },
        {
          "id": "theory_css_variables",
          "title": "CSS Custom Properties (CSS Variables)",
          "content": "CSS Custom Properties, often referred to as CSS Variables, are entities defined by CSS authors that contain specific values to be reused throughout a document. They are cascading variables, meaning they inherit values from their parent elements and can be overridden at lower levels in the DOM tree. They are prefixed with `--` (e.g., `--primary-color`).\n\n## Key Benefits\n\n*   **Maintainability:** Centralize frequently used values (colors, font sizes, spacing) in one place. Changing a single variable updates all its occurrences, reducing repetitive code.\n*   **Theming:** Easily switch between themes (light/dark mode) by changing a few variable values.\n*   **Responsiveness:** Media queries can update variable values to adjust styles based on screen size.\n*   **Readability:** Semantic variable names improve the clarity of your CSS.\n*   **Dynamic Styling:** Unlike preprocessor variables (like Sass), CSS variables are live in the browser's runtime. This means they can be manipulated directly with JavaScript, enabling dynamic style changes without needing to rewrite entire style rules.\n\n## Usage\n\nCustom properties are declared within a selector, typically `:root` for global scope, but can also be declared on specific elements to create local scope. They are accessed using the `var()` function.\n\n```css\n/* Declaration */\n:root {\n  --main-bg-color: #f0f0f0;\n  --text-color: #333;\n}\n\n.my-component {\n  --component-bg: var(--main-bg-color);\n}\n\n/* Usage */\nbody {\n  background-color: var(--main-bg-color);\n  color: var(--text-color);\n}\n\n.header {\n  background-color: var(--component-bg);\n}\n\n/* Fallback values */\np {\n  color: var(--undefined-variable, red); /* If --undefined-variable is not set, use red */\n}\n```",
          "examples": [
            {
              "id": "example_css_variables_1",
              "title": "Basic CSS Variable Usage",
              "code": "/* HTML Structure */\n<!-- <div class=\"container\">\n  <button class=\"button\">Click Me</button>\n  <div class=\"alert\">Alert Message</div>\n</div> -->\n\n/* CSS */\n:root {\n  --primary-color: #007bff; /* Blue */\n  --secondary-color: #6c757d; /* Grey */\n  --font-size-base: 16px;\n}\n\n.button {\n  background-color: var(--primary-color);\n  color: white;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 5px;\n  font-size: var(--font-size-base);\n}\n\n.alert {\n  color: var(--secondary-color);\n  border: 1px solid var(--secondary-color);\n  padding: 10px;\n  margin-top: 10px;\n  background-color: #e2e3e5;\n  font-size: var(--font-size-base);\n}",
              "explanation": "This example defines global CSS variables within the `:root` selector for primary color, secondary color, and base font size. These variables are then reused across `.button` and `.alert` classes. This approach centralizes common styles, making it easier to manage and update the design system.",
              "language": "css"
            },
            {
              "id": "example_css_variables_2",
              "title": "Dynamic Theming with JavaScript",
              "code": "/* HTML Structure */\n<!-- <button id=\"themeToggle\">Toggle Theme</button>\n<div class=\"themed-box\">This box will change theme</div> -->\n\n/* CSS */\n:root {\n  --bg-color: #f0f0f0;\n  --text-color: #333;\n  --border-color: #ccc;\n}\n\n:root.dark-theme {\n  --bg-color: #333;\n  --text-color: #f0f0f0;\n  --border-color: #666;\n}\n\n.themed-box {\n  background-color: var(--bg-color);\n  color: var(--text-color);\n  border: 1px solid var(--border-color);\n  padding: 20px;\n  margin-top: 20px;\n  width: 200px;\n  text-align: center;\n}\n\n/* JavaScript */\ndocument.getElementById('themeToggle').addEventListener('click', () => {\n  document.documentElement.classList.toggle('dark-theme');\n});",
              "explanation": "This example demonstrates how CSS variables facilitate dynamic theming. We define default colors in `:root`. When the `dark-theme` class is added to the `<html>` element (via `document.documentElement`), it overrides the variables, instantly changing the background, text, and border colors of elements that use these variables. JavaScript toggles this class, showcasing runtime manipulation of styles.",
              "language": "css, javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Variables",
            "Custom Properties",
            "Theming",
            "Maintainability",
            "Responsive Design"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "CSS_basics",
            "HTML_DOM"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "design_system_implementation",
            "dynamic_theming",
            "performance_optimization"
          ]
        },
        {
          "id": "theory_media_queries",
          "title": "Media Queries for Responsive Design",
          "content": "Media queries are a CSS technique that allows you to apply different styles based on device characteristics, most commonly screen width. They are a cornerstone of Responsive Web Design (RWD), enabling layouts and styles to adapt seamlessly to various screen sizes, from mobile phones to large desktop monitors.\n\n## Syntax\n\nMedia queries start with an `@media` rule, followed by a media type (e.g., `screen`, `print`) and one or more media features (e.g., `min-width`, `max-width`, `orientation`).\n\n```css\n@media <media-type> and (<media-feature>) {\n  /* CSS rules to apply */\n}\n```\n\n## Common Media Features\n\n*   `width`, `min-width`, `max-width`: Based on viewport width.\n*   `height`, `min-height`, `max-height`: Based on viewport height.\n*   `orientation`: `portrait` or `landscape`.\n*   `resolution`: Screen pixel density.\n*   `prefers-color-scheme`: User's preferred color scheme (e.g., `light`, `dark`).\n\n## Mobile-First Approach\n\nThe 'mobile-first' strategy is a best practice in responsive design. It involves writing base styles for the smallest screens (mobile devices) first, and then progressively enhancing the layout for larger screens using `min-width` media queries. This approach ensures that the fundamental content is always accessible and performant on mobile, and more complex styles are layered on for devices that can handle them.\n\n## Benefits of Mobile-First\n\n*   **Performance:** Mobile devices often have limited bandwidth and processing power. Starting with minimal styles for mobile and adding more for larger screens means faster load times and better performance on mobile.\n*   **User Experience:** Prioritizing mobile ensures a robust user experience for a large segment of users.\n*   **Simplicity:** It forces developers to focus on core content and functionality first, leading to cleaner code and design.\n*   **Scalability:** Easier to scale up from a simple mobile layout than to scale down a complex desktop layout.",
          "examples": [
            {
              "id": "example_media_queries_1",
              "title": "Mobile-First Responsive Typography",
              "code": "/* HTML Structure */\n<!-- <body>\n  <p>This text will change size based on screen width.</p>\n</body> -->\n\n/* CSS */\n/* Mobile first approach: Base styles for mobile (default for all screens) */\nbody {\n  font-family: Arial, sans-serif;\n  font-size: 16px; /* Base font size for mobile */\n  margin: 20px;\n}\n\n/* For tablets and up (min-width: 768px) */\n@media (min-width: 768px) {\n  body {\n    font-size: 18px; /* Larger font size for tablets */\n  }\n}\n\n/* For desktops and up (min-width: 1024px) */\n@media (min-width: 1024px) {\n  body {\n    font-size: 20px; /* Even larger font size for desktops */\n    line-height: 1.6;\n  }\n}",
              "explanation": "This example demonstrates the mobile-first approach. The base `font-size` of `16px` is applied to `body` globally, targeting mobile devices. Then, using `min-width` media queries, the font size is increased to `18px` for viewports 768px and wider (tablets), and further to `20px` for viewports 1024px and wider (desktops). This ensures a good reading experience across various screen sizes, starting from the smallest.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Responsive Design",
            "Media Queries",
            "Mobile-First",
            "Web Development"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "CSS_basics",
            "HTML_structure"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "frontend_development",
            "web_design",
            "accessibility"
          ]
        },
        {
          "id": "theory_css_preprocessors_sass",
          "title": "CSS Preprocessors: Sass/SCSS",
          "content": "CSS Preprocessors are scripting languages that extend the default capabilities of CSS. They allow you to use programming features like variables, nested rules, mixins, functions, and logical operations within your stylesheets. The code written in a preprocessor language (like Sass, Less, Stylus) is then compiled into standard CSS, which browsers can understand.\n\nSass (Syntactically Awesome Style Sheets) is one of the most popular CSS preprocessors. It has two syntaxes:\n*   **Sass (Indented Syntax):** Older syntax, uses indentation instead of semicolons and curly braces.\n*   **SCSS (Sassy CSS):** Newer, more widely adopted syntax that is a superset of CSS, meaning valid CSS is also valid SCSS. This makes it easier for developers to transition from pure CSS.\n\n## Key Sass/SCSS Features\n\n### 1. Variables\nSass variables are defined with a `$` prefix (e.g., `$primary-color`). They are used to store values that can be reused throughout the stylesheet, improving consistency and making global changes easier. Unlike CSS variables, Sass variables are processed at compile time, meaning they cannot be manipulated by JavaScript in the browser.\n\n### 2. Nesting\nNesting allows you to write CSS selectors inside other selectors, mimicking the HTML structure. This reduces repetition and makes the stylesheet more organized and readable, especially for complex component structures. However, excessive nesting can lead to over-qualified selectors and increased specificity, so it should be used judiciously.\n\n### 3. Mixins\nMixins are reusable blocks of CSS declarations. They allow you to group common styles, often including vendor prefixes or complex property sets, and then 'include' them in multiple places using the `@include` directive. Mixins can also accept arguments, making them highly flexible for generating dynamic CSS.\n\n## Benefits of Using CSS Preprocessors\n\n*   **Efficiency:** Write less code for more styles due to features like nesting and variables.\n*   **Maintainability:** Easier to manage and update large stylesheets.\n*   **Modularity:** Break down CSS into smaller, more manageable files and reuse code.\n*   **Readability:** Structured code improves understanding.\n*   **Functionality:** Access to programming logic (loops, conditionals, functions) not available in native CSS (though native CSS is catching up with features like `@property`).",
          "examples": [
            {
              "id": "example_sass_1",
              "title": "Sass Variables, Nesting, and Mixins",
              "code": "// Variables\n$primary-color: #007bff; // A vibrant blue\n$font-stack: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n$base-spacing: 20px;\n\n// Mixins\n@mixin border-radius($radius) {\n  -webkit-border-radius: $radius;\n  -moz-border-radius: $radius;\n  border-radius: $radius;\n}\n\n@mixin flex-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n// Nesting and Usage\nbody {\n  font-family: $font-stack;\n  margin: 0;\n  padding: 0;\n}\n\nnav {\n  background-color: $primary-color;\n  padding: $base-spacing / 2; // Using arithmetic with variables\n\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    @include flex-center;\n\n    li {\n      display: inline-block;\n      margin: 0 $base-spacing / 4;\n\n      a {\n        color: white;\n        text-decoration: none;\n        padding: 5px 10px;\n        &:hover {\n          text-decoration: underline;\n        }\n      }\n    }\n  }\n}\n\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: lighten($primary-color, 20%); // Sass color function\n  @include border-radius(10px); // Include the mixin\n  margin-top: $base-spacing;\n  @include flex-center;\n  color: white;\n  font-weight: bold;\n}\n",
              "explanation": "This comprehensive Sass example showcases all three core features: \n1.  **Variables:** `$primary-color`, `$font-stack`, `$base-spacing` are defined and reused, promoting consistency.\n2.  **Nesting:** The `nav` and `ul`, `li`, `a` selectors are nested, reflecting the HTML structure and making the CSS more organized.\n3.  **Mixins:** `border-radius` and `flex-center` mixins are defined to encapsulate reusable CSS. `border-radius` takes an argument `$radius` for flexibility, and both are included using `@include`. \nIt also briefly demonstrates Sass arithmetic and built-in color functions (`lighten`). This code needs to be compiled to standard CSS for browser consumption.",
              "language": "scss"
            },
            {
              "id": "example_sass_compiled_css",
              "title": "Compiled CSS from Sass Example",
              "code": "body {\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n}\n\nnav {\n  background-color: #007bff;\n  padding: 10px;\n}\nnav ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\nnav ul li {\n  display: inline-block;\n  margin: 0 5px;\n}\nnav ul li a {\n  color: white;\n  text-decoration: none;\n  padding: 5px 10px;\n}\nnav ul li a:hover {\n  text-decoration: underline;\n}\n\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: #66b0ff;\n  -webkit-border-radius: 10px;\n  -moz-border-radius: 10px;\n  border-radius: 10px;\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-weight: bold;\n}",
              "explanation": "This is the resulting CSS code after the previous Sass/SCSS example is compiled. Notice how:\n*   Sass variables (`$primary-color`, etc.) are replaced with their actual values.\n*   Nesting has been flattened, with parent selectors prepended to child selectors (e.g., `nav ul li a`).\n*   Mixins (`@include border-radius(10px)`) have been expanded into their full CSS declarations, including vendor prefixes. This is the code that web browsers actually interpret.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS Preprocessors",
            "Sass",
            "SCSS",
            "Variables",
            "Nesting",
            "Mixins",
            "Build Tools",
            "Frontend Architecture"
          ],
          "technology": "Sass/SCSS",
          "prerequisites": [
            "CSS_basics",
            "command_line_basics"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "large_scale_css",
            "design_system_development",
            "frontend_tooling"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_css_grid_1",
          "topic": "CSS Grid Layout Fundamentals",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary difference between CSS Grid and Flexbox in terms of layout dimensions?",
          "answer": "CSS Grid is a two-dimensional layout system (rows and columns simultaneously), whereas Flexbox is primarily a one-dimensional layout system (either rows OR columns).",
          "analysisPoints": [],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "2D layout",
            "1D layout"
          ],
          "evaluationCriteria": [
            "Understanding of fundamental layout concepts",
            "Ability to differentiate core features"
          ],
          "example": "",
          "tags": [
            "CSS",
            "Layout",
            "Grid",
            "Flexbox"
          ],
          "prerequisites": [
            "CSS_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_grid_2",
          "topic": "CSS Grid Properties",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following CSS, what will be the layout of the grid items?\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  gap: 10px;\n}\n.item-a {\n  grid-column: 1 / span 2;\n}\n.item-b {\n  grid-row: 2 / span 1;\n}\n```\n\nA. Three columns of equal width with 10px gaps.\nB. The first column will be 1/4 width, second 2/4 width, third 1/4 width. `item-a` will span the first two columns. `item-b` will be in the second row, spanning one row.\nC. `item-a` will span from the start of the first column to the end of the second column line. `item-b` will occupy the second row.\nD. The grid will have three columns, where the second column is twice as wide as the first and third. `item-a` will span the first two columns. `item-b` will start at row line 2 and occupy a single row.",
          "answer": "D. The grid will have three columns, where the second column is twice as wide as the first and third. `item-a` will span the first two columns. `item-b` will start at row line 2 and occupy a single row.",
          "options": [
            "A. Three columns of equal width with 10px gaps.",
            "B. The first column will be 1/4 width, second 2/4 width, third 1/4 width. `item-a` will span the first two columns. `item-b` will be in the second row, spanning one row.",
            "C. `item-a` will span from the start of the first column to the end of the second column line. `item-b` will occupy the second row.",
            "D. The grid will have three columns, where the second column is twice as wide as the first and third. `item-a` will span the first two columns. `item-b` will start at row line 2 and occupy a single row."
          ],
          "analysisPoints": [
            "Understanding of `fr` unit: `1fr 2fr 1fr` means widths are proportional (1:2:1 ratio).",
            "Understanding of `grid-column: start / span N`: The item starts at `start` line and occupies `N` tracks.",
            "Understanding of `grid-row: start / span N`: The item starts at `start` line and occupies `N` tracks.",
            "Identifying correct grid line numbers vs. track numbers."
          ],
          "keyConcepts": [
            "CSS Grid",
            "grid-template-columns",
            "fr unit",
            "grid-column",
            "grid-row",
            "span keyword",
            "gap"
          ],
          "evaluationCriteria": [
            "Ability to interpret grid track sizing",
            "Correctly apply `span` keyword for item placement",
            "Understanding of implicit grid rows for `item-b`"
          ],
          "example": "Explanation for D:\n- `grid-template-columns: 1fr 2fr 1fr;` creates three columns. The total fractions are 1+2+1=4. So, the first and third columns get 1/4 of the available space each, and the second column gets 2/4 (or 1/2) of the available space.\n- `grid-column: 1 / span 2;` on `.item-a` means it starts at column line 1 and spans 2 column tracks. This covers the first two columns.\n- `grid-row: 2 / span 1;` on `.item-b` means it starts at row line 2 and spans 1 row track. If there's no `grid-template-rows` defined, the grid implicitly creates rows as needed, so `item-b` would be placed in the second implicitly created row.",
          "tags": [
            "CSS",
            "Grid",
            "Layout",
            "MCQ"
          ],
          "prerequisites": [
            "CSS_grid_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_3",
          "topic": "CSS Grid vs. Flexbox Use Cases",
          "level": "hard",
          "type": "open",
          "question": "Describe a scenario where CSS Grid would be a more suitable layout tool than Flexbox, and explain why. Conversely, describe a scenario where Flexbox would be preferred over CSS Grid.",
          "answer": "",
          "analysisPoints": [
            "Ability to articulate the core differences (1D vs 2D).",
            "Providing concrete examples for each.",
            "Justifying the choice of layout method based on complexity and dimension.",
            "Mentioning limitations of one when attempting the other.",
            "Understanding when they can be combined effectively (e.g., Grid for macro-layout, Flexbox for micro-layout)."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "1D layout",
            "2D layout",
            "Main Axis",
            "Cross Axis",
            "Page Layout",
            "Component Layout"
          ],
          "evaluationCriteria": [
            "Clarity and accuracy of definitions.",
            "Relevance and specificity of examples.",
            "Depth of understanding of their respective strengths and weaknesses.",
            "Demonstration of practical application knowledge."
          ],
          "example": "CSS Grid is more suitable for **overall page layouts** or complex sections where you need to manage content in both rows and columns simultaneously. For example, a dashboard layout with a fixed header, sidebar, main content area, and a footer, where the main content itself might be divided into multiple sections arranged in a grid. Grid excels here because it provides explicit control over the entire 2D space, allowing items to span multiple rows/columns effortlessly, and handles alignment across both axes intrinsically. Trying to achieve this with Flexbox would involve deeply nested flex containers, making the CSS complex, harder to maintain, and less readable.\n\nFlexbox is preferred for **arranging items within a single dimension**, either in a row or a column. For instance, a navigation bar where items need to be spaced out, aligned vertically, or wrapped; or a list of form inputs that should stack vertically and align their labels. Flexbox provides powerful alignment and distribution properties (e.g., `justify-content`, `align-items`, `flex-grow`, `flex-shrink`) that are specifically designed for efficient one-dimensional content flow. While Grid could also be used for simple row/column layouts, Flexbox's simpler syntax and dedicated properties make it more concise and intuitive for these specific 1D arrangements.",
          "tags": [
            "CSS",
            "Layout",
            "Grid",
            "Flexbox",
            "Comparison",
            "Architecture"
          ],
          "prerequisites": [
            "CSS_grid",
            "Flexbox_basics"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_css_grid_4",
          "topic": "CSS Grid Terminology",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the CSS property used to define the space between grid cells?",
          "answer": "`gap` (or the older `grid-gap`)",
          "analysisPoints": [],
          "keyConcepts": [
            "CSS Grid",
            "gap property"
          ],
          "evaluationCriteria": [
            "Recall of basic CSS Grid properties"
          ],
          "example": "",
          "tags": [
            "CSS",
            "Grid",
            "Terminology"
          ],
          "prerequisites": [
            "CSS_grid_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_variables_1",
          "topic": "CSS Custom Properties Benefits",
          "level": "medium",
          "type": "open",
          "question": "Explain at least three significant advantages of using CSS Custom Properties (CSS Variables) over hardcoded values in your stylesheets.",
          "answer": "",
          "analysisPoints": [
            "Ability to list and elaborate on benefits.",
            "Distinguishing between compile-time (Sass) and runtime (CSS) variables.",
            "Practical scenarios (theming, maintainability, dynamic manipulation)."
          ],
          "keyConcepts": [
            "CSS Variables",
            "Custom Properties",
            "Maintainability",
            "Theming",
            "Dynamic Styling",
            "JavaScript interaction"
          ],
          "evaluationCriteria": [
            "Thorough explanation of advantages",
            "Demonstration of practical understanding",
            "Clarity and organization of points"
          ],
          "example": "1.  **Maintainability and Consistency:** CSS variables allow you to centralize common values (like colors, font sizes, spacing) in one place, typically in the `:root` selector. If a design needs to change a specific color, you only need to update the variable's value once, and the change propagates everywhere the variable is used. This vastly improves maintainability compared to finding and replacing every hardcoded instance.\n2.  **Dynamic Theming and Runtime Manipulation:** Unlike preprocessor variables (e.g., Sass), CSS variables are part of the DOM and are live at runtime in the browser. This means their values can be changed dynamically using JavaScript. This capability is fundamental for features like dark mode toggles, user-customizable themes, or dynamic adjustments based on user interaction or external data, without requiring a CSS recompile or complex class-swapping logic for every element.\n3.  **Readability and Semantics:** Using meaningful variable names (e.g., `--primary-color`, `--spacing-md`) makes your CSS code more self-documenting and readable. Developers can quickly understand the purpose of a value rather than deciphering an arbitrary hex code or pixel value.",
          "tags": [
            "CSS",
            "Variables",
            "Custom Properties",
            "Maintainability",
            "Theming",
            "Dynamic Styling"
          ],
          "prerequisites": [
            "CSS_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_variables_2",
          "topic": "CSS Custom Properties Syntax and Scope",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following CSS snippets correctly declares a global CSS Custom Property and uses it with a fallback value?\n\nA.\n```css\n$main-bg: #fff;\nbody { background-color: $main-bg; }\n```\nB.\n```css\n:root {\n  --main-bg-color: #fff;\n}\np {\n  background-color: var(--main-bg-color, lightgray);\n}\n```\nC.\n```css\nvar(--main-bg-color: #fff);\nbody { background-color: var(--main-bg-color); }\n```\nD.\n```css\nhtml {\n  main-bg-color: #fff;\n}\ndiv {\n  background-color: var(main-bg-color);\n}\n```",
          "answer": "B. \n```css\n:root {\n  --main-bg-color: #fff;\n}\np {\n  background-color: var(--main-bg-color, lightgray);\n}\n```",
          "options": [
            "A.\n```css\n$main-bg: #fff;\nbody { background-color: $main-bg; }\n```",
            "B.\n```css\n:root {\n  --main-bg-color: #fff;\n}\np {\n  background-color: var(--main-bg-color, lightgray);\n}\n```",
            "C.\n```css\nvar(--main-bg-color: #fff);\nbody { background-color: var(--main-bg-color); }\n```",
            "D.\n```css\nhtml {\n  main-bg-color: #fff;\n}\ndiv {\n  background-color: var(main-bg-color);\n}\n```"
          ],
          "analysisPoints": [
            "Correct prefix for CSS variables (`--`).",
            "Correct use of `:root` for global scope.",
            "Correct `var()` function syntax for usage.",
            "Correct fallback value syntax within `var()`."
          ],
          "keyConcepts": [
            "CSS Variables",
            "Custom Properties",
            ":root selector",
            "var() function",
            "fallback values",
            "syntax"
          ],
          "evaluationCriteria": [
            "Understanding of CSS variable declaration",
            "Correct usage of `var()` function",
            "Knowledge of fallback mechanism",
            "Distinction from preprocessor variables"
          ],
          "example": "Option A uses Sass variable syntax, not native CSS. Option C has incorrect declaration syntax. Option D uses incorrect declaration and usage syntax for CSS variables. Option B correctly declares `--main-bg-color` on `:root` for global scope and uses it with a fallback value `lightgray` inside the `var()` function.",
          "tags": [
            "CSS",
            "Variables",
            "Syntax",
            "MCQ"
          ],
          "prerequisites": [
            "CSS_variables_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_variables_3",
          "topic": "CSS Custom Properties vs. Sass Variables",
          "level": "hard",
          "type": "open",
          "question": "Compare and contrast CSS Custom Properties with Sass variables. When would you choose one over the other, or use both?",
          "answer": "",
          "analysisPoints": [
            "Clearly define each.",
            "Highlight key differences: runtime vs. compile-time, scope, JavaScript access, browser support.",
            "Provide use cases for each.",
            "Discuss scenarios where they complement each other (e.g., Sass for complex calculations/mixins, CSS variables for theming/runtime adjustments)."
          ],
          "keyConcepts": [
            "CSS Variables",
            "Sass Variables",
            "Compile-time",
            "Runtime",
            "JavaScript Interactivity",
            "Theming",
            "Modularity",
            "Build Process"
          ],
          "evaluationCriteria": [
            "Comprehensive comparison of features and limitations.",
            "Strategic decision-making ability for tool selection.",
            "Understanding of frontend build processes.",
            "Nuanced understanding of advanced CSS techniques."
          ],
          "example": "CSS Custom Properties (CSS Variables) are native to CSS and operate at **runtime** in the browser. They are declared with `--` prefix and accessed with `var()`. Their key strengths include cascading inheritance, dynamic manipulation via JavaScript (enabling real-time theme switching or UI adjustments), and debugging directly in browser developer tools. They are ideal for theming, component-level customizability, and values that might change dynamically based on user interaction or system preferences (`prefers-color-scheme`).\n\nSass variables are part of a **CSS preprocessor** and are processed at **compile-time**. They are declared with a `$` prefix. Their values are interpolated into the final CSS output *before* the browser sees it. Sass variables are excellent for storing values that are static once compiled (e.g., breakpoint values, consistent spacing units), for performing complex calculations, or for generating repetitive CSS with loops and functions. They are invaluable for modularizing large stylesheets and improving developer efficiency during the development phase.\n\n**When to choose:**\n*   Choose **CSS Custom Properties** when you need dynamic changes at runtime (e.g., dark mode toggle, user-defined color themes), when you want values to cascade and be overridden by descendant elements, or when you want direct JavaScript access to modify styles.\n*   Choose **Sass variables** when you need compile-time features like mathematical operations, functions, or when defining values that are part of a build-time design system (like grid column counts, base font sizes that don't need runtime modification).\n\n**Using both:** It's common and beneficial to use both. Sass variables can define the core static values for your design system (e.g., `$base-color: #007bff;`). Then, CSS Custom Properties can be initialized with these Sass variables, and exposed for runtime modification (e.g., `:root { --primary-color: #{$base-color}; }`). This leverages Sass's powerful processing capabilities for development while gaining CSS Custom Properties' runtime flexibility.",
          "tags": [
            "CSS",
            "Sass",
            "Variables",
            "Comparison",
            "Architecture",
            "Best Practices"
          ],
          "prerequisites": [
            "CSS_variables",
            "Sass_basics"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_media_queries_1",
          "topic": "Media Queries Basics",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of media queries in web development?",
          "answer": "To apply different CSS styles based on device characteristics, most commonly screen width, enabling responsive web design.",
          "analysisPoints": [],
          "keyConcepts": [
            "Media Queries",
            "Responsive Web Design",
            "Device Characteristics"
          ],
          "evaluationCriteria": [
            "Understanding of core functionality"
          ],
          "example": "",
          "tags": [
            "CSS",
            "Responsive Design",
            "Media Queries"
          ],
          "prerequisites": [
            "CSS_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_media_queries_2",
          "topic": "Mobile-First Approach",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following CSS:\n\n```css\n/* Snippet A */\nbody {\n  font-size: 14px;\n}\n@media (min-width: 768px) {\n  body {\n    font-size: 16px;\n  }\n}\n\n/* Snippet B */\nbody {\n  font-size: 16px;\n}\n@media (max-width: 767px) {\n  body {\n    font-size: 14px;\n  }\n}\n```\n\nWhich snippet exemplifies the 'mobile-first' approach and why?",
          "answer": "Snippet A exemplifies the 'mobile-first' approach because it sets the smallest font size as the base style first, and then *progressively enhances* for larger screens using `min-width` media queries.",
          "options": [
            "Snippet A, because it uses `min-width` queries to apply styles for larger screens after defining base styles.",
            "Snippet B, because it defines a default for larger screens and then uses `max-width` to override for smaller screens.",
            "Both snippets represent a mobile-first approach equally well, as they both adjust font sizes based on screen width.",
            "Neither snippet represents a mobile-first approach as they only modify font-size and not layout."
          ],
          "analysisPoints": [
            "Understanding of `min-width` vs `max-width` in the context of mobile-first.",
            "Definition of 'mobile-first': base styles for smallest, then enhance.",
            "Benefits of mobile-first (performance, UX)."
          ],
          "keyConcepts": [
            "Media Queries",
            "Mobile-First",
            "Responsive Web Design",
            "min-width",
            "max-width",
            "Progressive Enhancement"
          ],
          "evaluationCriteria": [
            "Correctly identifying mobile-first implementation",
            "Understanding the rationale behind `min-width` for mobile-first",
            "Knowledge of responsive design strategies"
          ],
          "example": "Snippet A establishes a default `font-size` of `14px` for `body`. This style applies to all devices, inherently targeting the smallest screens first. Then, the `@media (min-width: 768px)` rule adds an enhancement for screens 768px and wider, increasing the `font-size` to `16px`. This is the core principle of mobile-first: start simple and add complexity as screen real estate allows. Snippet B, conversely, defines a default for larger screens and then *overrides* it for smaller screens, which is a desktop-first approach.",
          "tags": [
            "CSS",
            "Responsive Design",
            "Media Queries",
            "Mobile-First",
            "MCQ"
          ],
          "prerequisites": [
            "Media_queries_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_media_queries_3",
          "topic": "Media Query Capabilities",
          "level": "medium",
          "type": "open",
          "question": "Beyond `min-width` and `max-width`, list and briefly explain two other media features you can use in a media query to provide a more tailored user experience.",
          "answer": "",
          "analysisPoints": [
            "Ability to recall various media features.",
            "Brief and accurate explanation of their purpose.",
            "Connecting features to user experience improvements."
          ],
          "keyConcepts": [
            "Media Features",
            "Orientation",
            "Resolution",
            "prefers-color-scheme",
            "User Preferences"
          ],
          "evaluationCriteria": [
            "Breadth of knowledge on media queries",
            "Accuracy of explanations",
            "Understanding of practical applications"
          ],
          "example": "1.  **`orientation`**: This media feature allows you to apply styles based on whether the device is in `portrait` (height is greater than or equal to width) or `landscape` (width is greater than height) mode. For example:\n    ```css\n    @media (orientation: landscape) {\n      .gallery-container {\n        grid-template-columns: repeat(4, 1fr);\n      }\n    }\n    ```\n    This can be useful for adjusting image galleries, video layouts, or overall content flow to better fit the available screen shape, enhancing readability and visual appeal.\n\n2.  **`prefers-color-scheme`**: This feature allows you to detect if the user has requested the system to use a light or dark color theme. It can take values `light` or `dark`. For example:\n    ```css\n    @media (prefers-color-scheme: dark) {\n      body {\n        background-color: #333;\n        color: #f0f0f0;\n      }\n    }\n    ```\n    This is crucial for providing an accessible and personalized user experience, respecting system-wide user preferences for dark mode, which can reduce eye strain in low-light conditions.",
          "tags": [
            "CSS",
            "Media Queries",
            "User Experience",
            "Accessibility"
          ],
          "prerequisites": [
            "Media_queries_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_sass_1",
          "topic": "Sass Variables",
          "level": "easy",
          "type": "flashcard",
          "question": "How are variables declared in Sass/SCSS, and what is their primary benefit?",
          "answer": "Sass/SCSS variables are declared using a `$` prefix (e.g., `$primary-color: #336699;`). Their primary benefit is to store reusable values, improving consistency and maintainability by centralizing changes.",
          "analysisPoints": [],
          "keyConcepts": [
            "Sass",
            "SCSS",
            "Variables",
            "Syntax",
            "Maintainability"
          ],
          "evaluationCriteria": [
            "Recall of basic Sass variable syntax and purpose"
          ],
          "example": "",
          "tags": [
            "Sass",
            "SCSS",
            "Variables"
          ],
          "prerequisites": [
            "Sass_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_sass_2",
          "topic": "Sass Nesting",
          "level": "medium",
          "type": "open",
          "question": "What is CSS nesting in Sass/SCSS, and what are its advantages and potential drawbacks?",
          "answer": "",
          "analysisPoints": [
            "Define nesting and its syntax.",
            "List advantages (readability, organization, reduced repetition).",
            "Discuss drawbacks (over-qualification, specificity issues, larger file sizes, readability if overused)."
          ],
          "keyConcepts": [
            "Sass",
            "SCSS",
            "Nesting",
            "Specificity",
            "CSS Architecture",
            "Maintainability"
          ],
          "evaluationCriteria": [
            "Comprehensive explanation of concept",
            "Balanced view of pros and cons",
            "Practical advice on usage"
          ],
          "example": "CSS nesting in Sass/SCSS allows you to write CSS selectors inside other selectors, mirroring the structure of your HTML. For example:\n```scss\nnav {\n  ul {\n    margin: 0;\n    li {\n      display: inline-block;\n      a {\n        color: blue;\n      }\n    }\n  }\n}\n```\n\n**Advantages:**\n1.  **Improved Readability and Organization:** It makes the stylesheet structure more intuitive by visually representing the parent-child relationships in the DOM. Related styles are grouped together.\n2.  **Reduced Repetition:** You don't have to repeatedly type parent selectors, leading to more concise code.\n3.  **Encourages Modularity:** It can help group styles for specific components, making it easier to manage and move sections of CSS.\n\n**Potential Drawbacks:**\n1.  **Over-Qualified Selectors:** Excessive nesting can lead to very long and highly specific CSS selectors (e.g., `nav ul li a`). This can make it difficult to override styles later in the cascade and increases specificity conflicts.\n2.  **Increased File Size:** While reducing repetition in SCSS, over-nesting might generate larger CSS files with redundant selector paths, though compilers often optimize this.\n3.  **Readability Issues (if overused):** Deep nesting can make the code harder to read and navigate than a flatter structure, ironically defeating one of its primary advantages.\n\nBest practice is to keep nesting to a minimum (typically 3-4 levels deep at most) and use it judiciously to improve organization without creating overly specific or unreadable selectors.",
          "tags": [
            "Sass",
            "SCSS",
            "Nesting",
            "CSS Architecture",
            "Best Practices"
          ],
          "prerequisites": [
            "Sass_basics",
            "CSS_specificity"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_sass_3",
          "topic": "Sass Mixins",
          "level": "medium",
          "type": "mcq",
          "question": "You want to create a reusable block of CSS that includes vendor prefixes for `border-radius` and can accept a custom radius value. Which Sass feature is most appropriate for this?\n\nA. Sass Variable\nB. Sass Nesting\nC. Sass Mixin\nD. Sass Function",
          "answer": "C. Sass Mixin",
          "options": [
            "A. Sass Variable",
            "B. Sass Nesting",
            "C. Sass Mixin",
            "D. Sass Function"
          ],
          "analysisPoints": [
            "Understanding of mixin's purpose: reusable code blocks, especially with arguments.",
            "Distinguishing mixins from variables (for values), nesting (for structure), and functions (for returning single values)."
          ],
          "keyConcepts": [
            "Sass",
            "SCSS",
            "Mixins",
            "Vendor Prefixes",
            "Reusability",
            "Arguments"
          ],
          "evaluationCriteria": [
            "Correctly identifying the appropriate Sass feature for a given problem",
            "Understanding of mixin functionality and advantages"
          ],
          "example": "A Sass Mixin is perfect for this scenario. It allows you to define a block of CSS (like `border-radius` with vendor prefixes) and pass arguments (like `$radius`) to it, making it highly flexible and reusable. You would define it with `@mixin` and include it with `@include`:\n\n```scss\n@mixin border-radius($radius) {\n  -webkit-border-radius: $radius;\n  -moz-border-radius: $radius;\n  border-radius: $radius;\n}\n\n.my-element {\n  @include border-radius(5px);\n}\n```\n\nSass Variables are for storing single values. Nesting is for organizing selectors. Sass Functions return a single value and are generally used for calculations, not for injecting multiple CSS declarations.",
          "tags": [
            "Sass",
            "SCSS",
            "Mixins",
            "MCQ"
          ],
          "prerequisites": [
            "Sass_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_sass_4",
          "topic": "Sass Features Application",
          "level": "hard",
          "type": "code",
          "question": "Write SCSS code that defines a base font size, a primary color, and a mixin for creating a 'button' style that accepts `background-color` and `text-color` arguments. Then, use nesting to style a `header` element containing a `nav` with a `ul` and `li` items, and apply the button mixin to a `.cta-button` class within the `header`.",
          "answer": "",
          "options": [],
          "analysisPoints": [
            "Correct declaration and usage of Sass variables.",
            "Proper definition and inclusion of a mixin with arguments.",
            "Effective use of nesting for complex selector structures.",
            "Understanding of SCSS syntax."
          ],
          "keyConcepts": [
            "Sass",
            "SCSS",
            "Variables",
            "Nesting",
            "Mixins",
            "CSS Architecture"
          ],
          "evaluationCriteria": [
            "Syntactic correctness of SCSS.",
            "Logical application of all requested Sass features.",
            "Readability and organization of the SCSS code.",
            "Demonstration of practical SCSS usage."
          ],
          "example": "```scss\n// SCSS Code\n\n// Variables\n$base-font-size: 16px;\n$primary-brand-color: #007bff;\n$text-light: #fff;\n$text-dark: #333;\n\n// Mixin for a button style\n@mixin button-style($bg-color: $primary-brand-color, $text-color: $text-light) {\n  display: inline-block;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  background-color: $bg-color;\n  color: $text-color;\n  font-size: $base-font-size;\n  cursor: pointer;\n  text-decoration: none;\n  text-align: center;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    opacity: 0.9;\n  }\n}\n\n// Nesting for header, nav, ul, li\nheader {\n  background-color: #f8f9fa;\n  padding: 15px 0;\n  border-bottom: 1px solid #e9ecef;\n  text-align: center;\n\n  nav {\n    max-width: 960px;\n    margin: 0 auto;\n\n    ul {\n      list-style: none;\n      margin: 0;\n      padding: 0;\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n\n      li {\n        a {\n          color: $text-dark;\n          text-decoration: none;\n          font-weight: bold;\n          font-size: $base-font-size;\n\n          &:hover {\n            color: $primary-brand-color;\n          }\n        }\n      }\n    }\n  }\n\n  .cta-button {\n    margin-top: 20px;\n    @include button-style($primary-brand-color, $text-light); // Applying the mixin\n  }\n}\n\n// Example of another button type using the mixin with different arguments\n.secondary-button {\n  @include button-style(#6c757d, $text-light);\n}\n\n```",
          "tags": [
            "Sass",
            "SCSS",
            "Coding Challenge",
            "Variables",
            "Nesting",
            "Mixins"
          ],
          "prerequisites": [
            "Sass_basics"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_css_grid_1",
          "title": "Build a Responsive Product Grid",
          "description": "\nImplement a responsive product listing page using CSS Grid. The layout should adapt based on screen size:\n\n1.  **Mobile (default):** Products should display in a single column.\n2.  **Tablet (min-width: 768px):** Products should display in 2 columns with a 15px gap.\n3.  **Desktop (min-width: 1024px):** Products should display in 4 columns with a 20px gap.\n\nEach product card should be a flex container to vertically align content (image, title, price, button) and have a minimum height. Ensure the product images are responsive and fill their container.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Product Grid</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"product-grid\">\n        <!-- Repeat this product-card for at least 8 items -->\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 1\">\n            <div class=\"card-content\">\n                <h3>Product Title 1</h3>\n                <p class=\"price\">$29.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 2\">\n            <div class=\"card-content\">\n                <h3>Product Title 2 (Longer)</h3>\n                <p class=\"price\">$49.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 3\">\n            <div class=\"card-content\">\n                <h3>Product Title 3</h3>\n                <p class=\"price\">$19.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n         <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 4\">\n            <div class=\"card-content\">\n                <h3>Product Title 4</h3>\n                <p class=\"price\">$59.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 5\">\n            <div class=\"card-content\">\n                <h3>Product Title 5</h3>\n                <p class=\"price\">$9.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 6\">\n            <div class=\"card-content\">\n                <h3>Product Title 6</h3>\n                <p class=\"price\">$79.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 7\">\n            <div class=\"card-content\">\n                <h3>Product Title 7</h3>\n                <p class=\"price\">$34.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 8\">\n            <div class=\"card-content\">\n                <h3>Product Title 8</h3>\n                <p class=\"price\">$12.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n    </div>\n</body>\n</html>\n\n/* style.css */\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n    background-color: #f4f4f4;\n}\n\n.product-grid {\n    /* Your CSS Grid styles here */\n    border: 1px solid #ccc;\n    padding: 10px;\n    background-color: #fff;\n}\n\n.product-card {\n    border: 1px solid #eee;\n    padding: 15px;\n    background-color: #fff;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    min-height: 300px; /* Example min-height */\n    /* Your Flexbox styles for card content here */\n}\n\n.product-card img {\n    max-width: 100%;\n    height: auto;\n    display: block;\n    margin-bottom: 10px;\n}\n\n.product-card h3 {\n    margin-top: 0;\n    font-size: 1.2em;\n}\n\n.product-card .price {\n    font-weight: bold;\n    color: #e67e22;\n    margin-bottom: 10px;\n}\n\n.product-card button {\n    background-color: #007bff;\n    color: white;\n    border: none;\n    padding: 10px 15px;\n    cursor: pointer;\n    border-radius: 5px;\n    width: 100%;\n}\n",
          "solutionCode": "/* style.css */\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n    background-color: #f4f4f4;\n}\n\n.product-grid {\n    display: grid; /* Establish grid container */\n    grid-template-columns: 1fr; /* Mobile: Single column */\n    gap: 15px; /* Default gap */\n    border: 1px solid #ccc;\n    padding: 10px;\n    background-color: #fff;\n}\n\n/* Tablet layout */\n@media (min-width: 768px) {\n    .product-grid {\n        grid-template-columns: repeat(2, 1fr); /* 2 columns */\n        gap: 15px;\n    }\n}\n\n/* Desktop layout */\n@media (min-width: 1024px) {\n    .product-grid {\n        grid-template-columns: repeat(4, 1fr); /* 4 columns */\n        gap: 20px;\n    }\n}\n\n.product-card {\n    border: 1px solid #eee;\n    padding: 15px;\n    background-color: #fff;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    min-height: 300px; \n    display: flex; /* Make card content a flex container */\n    flex-direction: column; /* Stack items vertically */\n    justify-content: space-between; /* Push button to bottom */\n}\n\n.product-card img {\n    max-width: 100%;\n    height: auto;\n    display: block;\n    margin-bottom: 10px;\n}\n\n.product-card .card-content {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1; /* Allows content area to take available space */\n}\n\n.product-card h3 {\n    margin-top: 0;\n    font-size: 1.2em;\n    flex-grow: 1; /* Title takes available space to push price/button down */\n}\n\n.product-card .price {\n    font-weight: bold;\n    color: #e67e22;\n    margin-top: auto; /* Push price to bottom of content area, above button */\n    margin-bottom: 10px; \n}\n\n.product-card button {\n    background-color: #007bff;\n    color: white;\n    border: none;\n    padding: 10px 15px;\n    cursor: pointer;\n    border-radius: 5px;\n    width: 100%;\n    margin-top: 10px; /* Space above button */\n}\n",
          "testCases": [
            "**Mobile View (e.g., < 768px):** Verify that product cards stack vertically, one per row, with appropriate spacing.",
            "**Tablet View (e.g., 768px - 1023px):** Check that product cards arrange into two columns with 15px gaps. Ensure vertical alignment of content within cards.",
            "**Desktop View (e.g., >= 1024px):** Confirm that product cards arrange into four columns with 20px gaps. Verify all content within cards (image, title, price, button) is correctly positioned and aligned.",
            "**Content Overflow:** Add a product with a very long title or description. Ensure the card's minimum height and flexbox properties correctly handle the content without breaking the layout or overflowing.",
            "**Responsiveness on Resize:** Dynamically resize the browser window to smoothly transition between the different grid layouts and observe gap changes."
          ],
          "hints": [
            "Start by setting `display: grid;` on `.product-grid` and define its `grid-template-columns` for the mobile-first approach. This will be your single column default.",
            "Use `repeat()` and `fr` units for defining column tracks within media queries.",
            "Remember to apply media queries with `min-width` breakpoints for tablet and desktop layouts.",
            "For vertical alignment and pushing the button to the bottom of the card, apply `display: flex; flex-direction: column;` to the `.product-card` itself. Then, use `margin-top: auto;` on the last element you want pushed to the bottom (e.g., the button or price element) within the flex container.",
            "Consider making the `card-content` or `h3` flex items that `flex-grow: 1` to distribute space and push elements down effectively."
          ],
          "tags": [
            "CSS Grid",
            "Responsive Design",
            "Media Queries",
            "Flexbox",
            "Layout",
            "Frontend"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "CSS_grid",
            "Media_queries",
            "Flexbox_basics"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Mobile-First Design",
            "Web Accessibility"
          ]
        },
        {
          "id": "task_css_variables_1",
          "title": "Create a Theming System with CSS Variables",
          "description": "\nImplement a simple light/dark theming system for a webpage using CSS Custom Properties and JavaScript. Your task is to:\n\n1.  Define a set of CSS variables for colors (background, text, primary accent) in a `:root` selector for the default (light) theme.\n2.  Create a `.dark-theme` class that, when applied to the `html` element, overrides these variables with dark mode values.\n3.  Ensure at least a `body`, a `header`, and a `button` element use these CSS variables for their styling.\n4.  Add a JavaScript button that toggles the `dark-theme` class on the `html` element, switching the theme dynamically.\n\nYour solution should demonstrate effective use of CSS variables for theming and their dynamic manipulation with JavaScript.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dynamic Theming with CSS Variables</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <header>\n        <h1>My Themed Website</h1>\n        <button id=\"theme-toggle\">Toggle Theme</button>\n    </header>\n\n    <main>\n        <p>This is some content that will adapt to the theme.</p>\n        <button class=\"action-button\">Call to Action</button>\n    </main>\n\n    <footer>\n        <p>&copy; 2023 Themed Site</p>\n    </footer>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n/* style.css */\nbody {\n    font-family: Arial, sans-serif;\n    transition: background-color 0.3s, color 0.3s;\n}\n\nheader {\n    padding: 20px;\n    margin-bottom: 20px;\n    border-bottom: 1px solid;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    transition: background-color 0.3s, color 0.3s, border-color 0.3s;\n}\n\nmain {\n    padding: 20px;\n    max-width: 800px;\n    margin: 0 auto 20px;\n}\n\n.action-button, #theme-toggle {\n    padding: 10px 20px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: background-color 0.3s, color 0.3s;\n}\n\nfooter {\n    padding: 20px;\n    text-align: center;\n    border-top: 1px solid;\n    transition: background-color 0.3s, color 0.3s, border-color 0.3s;\n}\n\n/* Add your CSS variable declarations and theme class here */\n\n/* script.js */\ndocument.getElementById('theme-toggle').addEventListener('click', () => {\n    // Implement theme toggling logic here\n});\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dynamic Theming with CSS Variables</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <header>\n        <h1>My Themed Website</h1>\n        <button id=\"theme-toggle\">Toggle Theme</button>\n    </header>\n\n    <main>\n        <p>This is some content that will adapt to the theme.</p>\n        <button class=\"action-button\">Call to Action</button>\n    </main>\n\n    <footer>\n        <p>&copy; 2023 Themed Site</p>\n    </footer>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n/* style.css */\n:root {\n    /* Light Theme Variables */\n    --bg-color: #ffffff;\n    --text-color: #333333;\n    --primary-button-bg: #007bff;\n    --primary-button-text: #ffffff;\n    --border-color: #cccccc;\n}\n\n:root.dark-theme {\n    /* Dark Theme Variable Overrides */\n    --bg-color: #222222;\n    --text-color: #f0f0f0;\n    --primary-button-bg: #66ccff;\n    --primary-button-text: #222222;\n    --border-color: #555555;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n    background-color: var(--bg-color);\n    color: var(--text-color);\n    transition: background-color 0.3s, color 0.3s;\n}\n\nheader {\n    padding: 20px;\n    margin-bottom: 20px;\n    background-color: var(--bg-color);\n    color: var(--text-color);\n    border-bottom: 1px solid var(--border-color);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    transition: background-color 0.3s, color 0.3s, border-color 0.3s;\n}\n\nmain {\n    padding: 20px;\n    max-width: 800px;\n    margin: 0 auto 20px;\n}\n\n.action-button, #theme-toggle {\n    padding: 10px 20px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: var(--primary-button-bg);\n    color: var(--primary-button-text);\n    transition: background-color 0.3s, color 0.3s;\n}\n\n.action-button:hover, #theme-toggle:hover {\n    opacity: 0.9;\n}\n\nfooter {\n    padding: 20px;\n    text-align: center;\n    background-color: var(--bg-color);\n    color: var(--text-color);\n    border-top: 1px solid var(--border-color);\n    transition: background-color 0.3s, color 0.3s, border-color 0.3s;\n}\n\n/* script.js */\ndocument.getElementById('theme-toggle').addEventListener('click', () => {\n    document.documentElement.classList.toggle('dark-theme');\n    // Optional: Save preference to localStorage\n    if (document.documentElement.classList.contains('dark-theme')) {\n        localStorage.setItem('theme', 'dark');\n    } else {\n        localStorage.setItem('theme', 'light');\n    }\n});\n\n// Optional: Apply saved theme on load\nwindow.addEventListener('load', () => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark') {\n        document.documentElement.classList.add('dark-theme');\n    } else {\n        document.documentElement.classList.remove('dark-theme');\n    }\n});\n",
          "testCases": [
            "**Initial Load:** Verify the page loads with the default (light) theme.",
            "**Toggle to Dark:** Click the 'Toggle Theme' button and verify that all specified elements (body, header, buttons, footer) switch to their dark theme colors.",
            "**Toggle back to Light:** Click the button again and verify that elements revert to their light theme colors.",
            "**Persistent Theme (Optional):** If implementing `localStorage`, close and reopen the page. Verify that the last selected theme is applied.",
            "**Dynamic Changes:** Inspect elements in developer tools and observe how the computed values of the CSS variables change when the `dark-theme` class is toggled on `<html>`."
          ],
          "hints": [
            "Declare your base variables inside `:root`.",
            "Create a new CSS rule `html.dark-theme { ... }` to redefine the variables for the dark theme. Because of CSS cascade, these will override the `:root` values when `dark-theme` is present.",
            "Use `var(--variable-name)` throughout your CSS to apply the theme-controlled values.",
            "In JavaScript, you can use `document.documentElement.classList.toggle('your-class-name')` to switch the theme.",
            "Consider adding `transition` properties to color and background properties for a smoother theme change effect."
          ],
          "tags": [
            "CSS Variables",
            "Theming",
            "JavaScript",
            "DOM Manipulation",
            "Frontend",
            "Dynamic Styling"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "CSS_variables",
            "JavaScript_DOM_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "CSS Cascade",
            "User Interface",
            "State Management"
          ]
        },
        {
          "id": "task_media_queries_1",
          "title": "Implement a Responsive Navigation Bar",
          "description": "\nCreate a responsive navigation bar that adapts to different screen sizes using a mobile-first approach and media queries.\n\n1.  **Mobile (default):** The navigation links should stack vertically, taking full width, and be hidden by default. A 'hamburger' icon (represented by a button) should toggle their visibility.\n2.  **Tablet/Desktop (min-width: 768px):** The navigation links should display horizontally, aligned to the right, and always be visible. The 'hamburger' icon should be hidden.\n3.  Ensure smooth transitions for visibility changes (e.g., fading or sliding) for the mobile menu.\n\nYour solution should showcase understanding of mobile-first, media queries, and basic JavaScript for interactivity.\n",
          "difficulty": "hard",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Nav Bar</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <nav class=\"navbar\">\n        <div class=\"nav-header\">\n            <a href=\"#\" class=\"brand-logo\">MySite</a>\n            <button class=\"nav-toggle\" aria-label=\"toggle navigation\">\n                <span class=\"hamburger-icon\"></span>\n            </button>\n        </div>\n        <ul class=\"nav-links\">\n            <li><a href=\"#home\">Home</a></li>\n            <li><a href=\"#about\">About</a></li>\n            <li><a href=\"#services\">Services</a></li>\n            <li><a href=\"#contact\">Contact</a></li>\n        </ul>\n    </nav>\n\n    <div style=\"height: 1000px; background-color: #f0f0f0; padding: 20px;\">Scrollable content to test fixed nav if applicable</div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n/* style.css */\nbody {\n    margin: 0;\n    font-family: Arial, sans-serif;\n}\n\n.navbar {\n    background-color: #333;\n    color: white;\n    padding: 10px 20px;\n    display: flex;\n    flex-direction: column; /* Mobile: stack header and links */\n    align-items: flex-start;\n}\n\n.nav-header {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.brand-logo {\n    color: white;\n    text-decoration: none;\n    font-size: 1.5em;\n    font-weight: bold;\n}\n\n.nav-toggle {\n    background: none;\n    border: none;\n    color: white;\n    font-size: 1.5em;\n    cursor: pointer;\n    padding: 5px;\n}\n\n.hamburger-icon {\n    display: block; /* Hamburger lines placeholder */\n    width: 25px;\n    height: 3px;\n    background-color: white;\n    position: relative;\n}\n\n.hamburger-icon::before, .hamburger-icon::after {\n    content: '';\n    display: block;\n    width: 25px;\n    height: 3px;\n    background-color: white;\n    position: absolute;\n    left: 0;\n}\n\n.hamburger-icon::before {\n    top: -8px;\n}\n\n.hamburger-icon::after {\n    top: 8px;\n}\n\n.nav-links {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    /* Mobile: hidden by default */\n    max-height: 0; /* for animation */\n    overflow: hidden;\n    transition: max-height 0.3s ease-out;\n}\n\n.nav-links.open {\n    max-height: 200px; /* Adjust as needed for content */\n}\n\n.nav-links li {\n    text-align: center;\n    padding: 10px 0;\n    border-top: 1px solid #555;\n}\n\n.nav-links li:first-child {\n    border-top: none;\n}\n\n.nav-links a {\n    color: white;\n    text-decoration: none;\n    display: block;\n    padding: 5px;\n}\n\n/* Desktop styles via media query go here */\n\n/* script.js */\ndocument.querySelector('.nav-toggle').addEventListener('click', () => {\n    const navLinks = document.querySelector('.nav-links');\n    // Implement toggle functionality\n});\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Nav Bar</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <nav class=\"navbar\">\n        <div class=\"nav-header\">\n            <a href=\"#\" class=\"brand-logo\">MySite</a>\n            <button class=\"nav-toggle\" aria-label=\"toggle navigation\">\n                <span class=\"hamburger-icon\"></span>\n            </button>\n        </div>\n        <ul class=\"nav-links\">\n            <li><a href=\"#home\">Home</a></li>\n            <li><a href=\"#about\">About</a></li>\n            <li><a href=\"#services\">Services</a></li>\n            <li><a href=\"#contact\">Contact</a></li>\n        </ul>\n    </nav>\n\n    <div style=\"height: 1000px; background-color: #f0f0f0; padding: 20px;\">Scrollable content to test fixed nav if applicable</div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n/* style.css */\nbody {\n    margin: 0;\n    font-family: Arial, sans-serif;\n}\n\n.navbar {\n    background-color: #333;\n    color: white;\n    padding: 10px 20px;\n    display: flex;\n    flex-direction: column; /* Mobile: stack header and links */\n    align-items: flex-start;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n}\n\n.nav-header {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.brand-logo {\n    color: white;\n    text-decoration: none;\n    font-size: 1.5em;\n    font-weight: bold;\n}\n\n.nav-toggle {\n    background: none;\n    border: none;\n    color: white;\n    font-size: 1.5em;\n    cursor: pointer;\n    padding: 5px;\n}\n\n/* Hamburger icon styling */\n.hamburger-icon {\n    display: block;\n    width: 25px;\n    height: 3px;\n    background-color: white;\n    position: relative;\n    transition: background-color 0.3s ease-in-out;\n}\n\n.hamburger-icon::before, .hamburger-icon::after {\n    content: '';\n    display: block;\n    width: 25px;\n    height: 3px;\n    background-color: white;\n    position: absolute;\n    left: 0;\n    transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;\n}\n\n.hamburger-icon::before {\n    top: -8px;\n}\n\n.hamburger-icon::after {\n    top: 8px;\n}\n\n/* Animation for 'X' when menu is open */\n.nav-toggle.open .hamburger-icon {\n    background-color: transparent;\n}\n\n.nav-toggle.open .hamburger-icon::before {\n    transform: translateY(8px) rotate(45deg);\n}\n\n.nav-toggle.open .hamburger-icon::after {\n    transform: translateY(-8px) rotate(-45deg);\n}\n\n.nav-links {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    /* Mobile: hidden by default */\n    max-height: 0; /* for animation */\n    overflow: hidden;\n    transition: max-height 0.3s ease-out;\n}\n\n.nav-links.open {\n    max-height: 200px; /* Adjust based on content height */\n}\n\n.nav-links li {\n    text-align: center;\n    padding: 10px 0;\n    border-top: 1px solid #555;\n}\n\n.nav-links li:first-child {\n    border-top: none;\n}\n\n.nav-links a {\n    color: white;\n    text-decoration: none;\n    display: block;\n    padding: 5px;\n}\n\n.nav-links a:hover {\n    color: #007bff;\n}\n\n/* Tablet/Desktop layout */\n@media (min-width: 768px) {\n    .navbar {\n        flex-direction: row; /* Desktop: items in a row */\n        justify-content: space-between; /* Space out logo and links */\n        align-items: center;\n    }\n\n    .nav-toggle {\n        display: none; /* Hide hamburger on larger screens */\n    }\n\n    .nav-links {\n        max-height: none; /* Always visible */\n        overflow: visible;\n        display: flex; /* Display links horizontally */\n        width: auto;\n    }\n\n    .nav-links li {\n        border-top: none;\n        padding: 0 10px;\n    }\n\n    .nav-links li:last-child {\n      padding-right: 0;\n    }\n\n    .nav-links a {\n        padding: 0;\n    }\n}\n\n/* script.js */\ndocument.querySelector('.nav-toggle').addEventListener('click', () => {\n    const navLinks = document.querySelector('.nav-links');\n    const navToggle = document.querySelector('.nav-toggle');\n    navLinks.classList.toggle('open');\n    navToggle.classList.toggle('open'); // For hamburger animation\n});\n",
          "testCases": [
            "**Mobile View (e.g., < 768px):** Verify the hamburger icon is visible and clickable. Ensure the navigation links are hidden initially. Clicking the hamburger icon should toggle the visibility of the vertical navigation links with a smooth transition. Clicking again should hide them.",
            "**Tablet/Desktop View (e.g., >= 768px):** Verify the hamburger icon is hidden. Ensure the navigation links are always visible, arranged horizontally, and aligned to the right. Resizing from mobile to desktop should seamlessly transition the navigation appearance.",
            "**Responsiveness on Resize:** Start in mobile view, open the menu, then resize to desktop. The menu should automatically become horizontal and the hamburger hidden. Resize back to mobile; the menu should revert to its hidden, togglable state.",
            "**Accessibility:** Check if the toggle button has appropriate ARIA attributes (e.g., `aria-expanded`) and a label. (Self-correction: The starting code includes `aria-label`, so ensure it's still good).",
            "**Link Functionality:** Ensure clicking on navigation links works (e.g., scrolls to section, even if no actual sections are defined yet)."
          ],
          "hints": [
            "Use `display: none;` or `visibility: hidden;` for the mobile menu elements that should be hidden by default. For animation, `max-height: 0; overflow: hidden;` is often better than `display: none;` as it allows for CSS transitions.",
            "The JavaScript should toggle a class (e.g., `open`) on the `ul.nav-links` to control its visibility/max-height.",
            "Inside the `min-width: 768px` media query, override the mobile-specific styles: set the navigation links to `display: flex;` for horizontal layout and ensure `max-height` is `none` or a sufficiently large value so they are always visible. Hide the hamburger toggle.",
            "For the hamburger icon transition to an 'X', you can use CSS transforms on its `::before` and `::after` pseudo-elements when the `open` class is applied to the toggle button itself."
          ],
          "tags": [
            "CSS",
            "Responsive Design",
            "Media Queries",
            "JavaScript",
            "Navigation",
            "Mobile-First",
            "Flexbox"
          ],
          "timeEstimate": 75,
          "prerequisites": [
            "Media_queries",
            "Flexbox_basics",
            "JavaScript_DOM_basics"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Hamburger Menu",
            "Accessibility",
            "UX Design"
          ]
        },
        {
          "id": "task_sass_1",
          "title": "Refactor CSS to SCSS with Variables, Nesting, and Mixins",
          "description": "\nRefactor the provided plain CSS snippet into well-structured SCSS code, demonstrating the use of Sass variables, nesting, and mixins.\n\n**Original CSS:**\n```css\n.container {\n  background-color: #f0f0f0;\n  padding: 20px;\n  border: 1px solid #ccc;\n  font-family: 'Open Sans', sans-serif;\n  color: #333;\n}\n\n.container .card {\n  background-color: #ffffff;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  margin-bottom: 15px;\n  padding: 15px;\n}\n\n.container .card h2 {\n  font-size: 1.5em;\n  color: #007bff;\n  margin-top: 0;\n}\n\n.container .card p {\n  line-height: 1.6;\n}\n\n.container .card .button {\n  display: inline-block;\n  background-color: #007bff;\n  color: #ffffff;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.container .card .button:hover {\n  background-color: #0056b3;\n}\n\n.container .card.featured .button {\n  background-color: #28a745;\n}\n\n.container .card.featured .button:hover {\n  background-color: #218838;\n}\n```\n\n**Your Task:**\n1.  **Variables:** Identify common values (colors, spacing, border-radius, font stack) and define them as Sass variables.\n2.  **Nesting:** Restructure the selectors using proper SCSS nesting to reflect the HTML hierarchy.\n3.  **Mixins:** Create a mixin for the common button styles, allowing for configurable background and text colors (and potentially hover colors if desired). Use this mixin for both `.button` and `.featured .button`.\n4.  Ensure the compiled CSS from your SCSS is functionally identical to the original CSS.\n",
          "difficulty": "medium",
          "startingCode": "/* Start with this plain CSS and refactor it into SCSS */\n/* style.css (to be refactored to style.scss) */\n.container {\n  background-color: #f0f0f0;\n  padding: 20px;\n  border: 1px solid #ccc;\n  font-family: 'Open Sans', sans-serif;\n  color: #333;\n}\n\n.container .card {\n  background-color: #ffffff;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  margin-bottom: 15px;\n  padding: 15px;\n}\n\n.container .card h2 {\n  font-size: 1.5em;\n  color: #007bff;\n  margin-top: 0;\n}\n\n.container .card p {\n  line-height: 1.6;\n}\n\n.container .card .button {\n  display: inline-block;\n  background-color: #007bff;\n  color: #ffffff;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.container .card .button:hover {\n  background-color: #0056b3;\n}\n\n.container .card.featured .button {\n  background-color: #28a745;\n}\n\n.container .card.featured .button:hover {\n  background-color: #218838;\n}\n",
          "solutionCode": "// style.scss\n\n// 1. Variables\n$base-bg: #f0f0f0;\n$text-color: #333;\n$border-light: #ccc;\n$border-darker: #ddd;\n$card-bg: #ffffff;\n$shadow-color: rgba(0, 0, 0, 0.1);\n$primary-color: #007bff;\n$primary-color-dark: #0056b3; // Darker shade for hover\n$success-color: #28a745;\n$success-color-dark: #218838; // Darker shade for hover\n$button-text-color: #ffffff;\n$spacing-sm: 10px;\n$spacing-md: 15px;\n$spacing-lg: 20px;\n$radius-sm: 5px;\n$radius-md: 8px;\n$font-stack: 'Open Sans', sans-serif;\n\n// 3. Mixins\n@mixin button-styles($bg-color, $hover-bg-color, $text-color) {\n  display: inline-block;\n  background-color: $bg-color;\n  color: $text-color;\n  padding: $spacing-sm $spacing-md;\n  border: none;\n  border-radius: $radius-sm;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background-color: $hover-bg-color;\n  }\n}\n\n// 2. Nesting\n.container {\n  background-color: $base-bg;\n  padding: $spacing-lg;\n  border: 1px solid $border-light;\n  font-family: $font-stack;\n  color: $text-color;\n\n  .card {\n    background-color: $card-bg;\n    border: 1px solid $border-darker;\n    border-radius: $radius-md;\n    box-shadow: 0 4px 8px $shadow-color;\n    margin-bottom: $spacing-md;\n    padding: $spacing-md;\n\n    h2 {\n      font-size: 1.5em;\n      color: $primary-color;\n      margin-top: 0;\n    }\n\n    p {\n      line-height: 1.6;\n    }\n\n    .button {\n      @include button-styles($primary-color, $primary-color-dark, $button-text-color);\n    }\n\n    &.featured {\n      .button {\n        @include button-styles($success-color, $success-color-dark, $button-text-color);\n      }\n    }\n  }\n}\n",
          "testCases": [
            "**Compilation Check:** Compile the SCSS to CSS. The resulting CSS file should be functionally identical to the original provided CSS.",
            "**Variable Usage:** Verify that all common values are replaced by Sass variables in the compiled output.",
            "**Nesting Structure:** Check that the selectors in the compiled CSS reflect the flattened structure of nested selectors (e.g., `.container .card h2`).",
            "**Mixin Expansion:** Confirm that the `button-styles` mixin correctly expands its properties into the `.button` and `.featured .button` selectors, including the dynamic background colors based on arguments.",
            "**Browser Rendering:** Apply the original CSS to an HTML page, then replace it with the compiled SCSS. Visually confirm that there is no change in the rendered output, ensuring the refactoring maintained fidelity."
          ],
          "hints": [
            "Start by creating a few core variables for colors (e.g., `$primary-color`, `$text-color`) and common spacing values (e.g., `$base-padding`, `$gap`).",
            "For nesting, simply indent the child selectors within their parent. Remember that `&` refers to the parent selector, useful for pseudo-classes like `&:hover` or combining classes like `&.featured`.",
            "Define your mixin using `@mixin my-mixin-name($arg1, $arg2) { ... }`. For the button, you'll want arguments for the background color, hover background color, and text color.",
            "Include the mixin using `@include my-mixin-name(value1, value2);`."
          ],
          "tags": [
            "Sass",
            "SCSS",
            "Refactoring",
            "Variables",
            "Nesting",
            "Mixins",
            "CSS Architecture"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "Sass_basics",
            "CSS_basics"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "CSS Maintainability",
            "Design Systems",
            "Code Organization"
          ]
        }
      ]
    }
  },
  {
    "id": "1111efac-9fec-4735-81b0-1e73c145a4fd",
    "startLine": 12100,
    "endLine": 12199,
    "processedDate": "2025-06-17T12:46:25.221Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_sass_extend_inheritance",
          "title": "SASS Extend and Inheritance",
          "content": "SASS's `@extend` directive allows a selector to inherit the styles of another selector, promoting code reuse and maintaining the DRY (Don't Repeat Yourself) principle. This is particularly useful for creating variations of components that share a common base style.\n\n## Key Concepts\n\n-   **`@extend` Directive**: Used to share a set of CSS properties from one selector to another. When `@extend` is used, SASS generates a combined selector in the compiled CSS, ensuring that the extending selector (e.g., `.primary-button`) shares the rules of the extended selector (e.g., `%button-base`).\n\n-   **Placeholder Selectors (`%`)**: These are special types of selectors in SASS that will not output any CSS on their own. They are designed exclusively to be `@extend`ed by other selectors. This prevents unnecessary CSS output for base styles that are only intended for inheritance.\n\n-   **Benefits**: \n    -   **DRY Code**: Reduces repetition by allowing shared styles to be defined once.\n    -   **Semantic Markup**: You can use meaningful class names in your HTML (e.g., `.primary-button`) while abstracting common styles into SASS extendable definitions.\n    -   **Maintainability**: Changes to the base style propagate automatically to all extending selectors.\n\n-   **Potential Drawbacks**: \n    -   **Output Bloat**: Overuse or improper use of `@extend` can sometimes lead to very long, comma-separated selectors in the compiled CSS, increasing file size and potentially making the CSS harder to read.\n    -   **Specificity Issues**: If not carefully managed, extending selectors with different specificities can lead to unexpected cascade behavior.\n    -   **Source Order Issues**: The order of `@extend` directives can sometimes affect the compiled output if rules are overridden.\n\nWhen `primary-button` extends `button-base`, SASS includes the styles from `button-base` directly into the `primary-button`'s ruleset in the compiled CSS, usually by grouping selectors.",
          "examples": [
            {
              "id": "example_sass_extend_1",
              "title": "Basic SASS Extend with Placeholder",
              "code": "```scss\n// Define a base button style using a placeholder selector\n%button-base {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-family: sans-serif;\n  border-radius: 4px;\n}\n\n// Extend the base style for a primary button\n.primary-button {\n  @extend %button-base;\n  background-color: #007bff;\n  color: white;\n}\n\n// Extend the base style for a secondary button\n.secondary-button {\n  @extend %button-base;\n  background-color: #6c757d;\n  color: white;\n}\n```\n\n**Compiled CSS Output:**\n\n```css\n.primary-button, .secondary-button {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-family: sans-serif;\n  border-radius: 4px;\n}\n\n.primary-button {\n  background-color: #007bff;\n  color: white;\n}\n\n.secondary-button {\n  background-color: #6c757d;\n  color: white;\n}\n```",
              "explanation": "This example demonstrates how `%button-base` defines a set of common styles. Both `.primary-button` and `.secondary-button` use `@extend %button-base` to inherit these styles. In the compiled CSS, SASS groups the selectors that extend the same placeholder, reducing redundant code. This approach ensures that changes to `%button-base` automatically apply to all buttons extending it, promoting consistency and easier maintenance.",
              "language": "scss"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "SASS",
            "CSS Preprocessors",
            "Extend",
            "Inheritance",
            "Styling",
            "DRY"
          ],
          "technology": "SASS",
          "prerequisites": [
            "CSS Fundamentals",
            "Basic SASS Syntax"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Maintainable CSS",
            "Scalable Styling Architectures"
          ]
        },
        {
          "id": "theory_react_production_deployment",
          "title": "Optimizing React for Production Deployment",
          "content": "Deploying a React application to production involves several key optimizations to ensure the best performance, smallest bundle size, and removal of development-specific overhead. A crucial step is setting the application to 'production mode'.\n\n## Setting Production Mode\n\nReact's production mode is a build-time optimization that:\n\n1.  **Removes Development Warnings**: All `console.warn` statements and other development-specific checks (e.g., prop type warnings, key warnings) are stripped out, reducing JavaScript bundle size and improving runtime performance.\n2.  **Enables Optimizations**: React's internal mechanisms (like Virtual DOM diffing) can take shortcuts and perform more aggressively when they know they don't need to account for development utilities.\n\nThis mode is primarily controlled via the `process.env.NODE_ENV` environment variable. When `process.env.NODE_ENV` is set to `'production'`, bundlers like Webpack or Rollup, along with React itself, perform these optimizations.\n\n### Using Webpack's DefinePlugin\n\nFor projects using Webpack, the `DefinePlugin` is commonly used to inject global variables at compile time. By defining `process.env.NODE_ENV` as a string literal `'production'`, Webpack can then leverage dead code elimination (tree-shaking) to remove the development-only code paths.\n\nWhen you use `create-react-app` (CRA) or similar modern build tools, these optimizations are typically handled automatically. Running `npm run build` or `yarn build` with CRA will by default compile your application in production mode, without requiring manual Webpack configuration for `DefinePlugin`.\n\nSimilarly, tools like Vite, Next.js, and Gatsby also handle production builds automatically, abstracting away the underlying Webpack or Rollup configurations for `process.env.NODE_ENV`.\n\n## Other Production Optimizations\n\nBeyond setting production mode, other vital optimizations include:\n\n-   **Code Splitting**: Breaking down the large JavaScript bundle into smaller chunks that can be loaded on demand.\n-   **Minification & Uglification**: Reducing file size by removing whitespace, comments, and shortening variable names.\n-   **Tree Shaking**: Eliminating unused code (dead code) from the final bundle.\n-   **Lazy Loading**: Loading components or routes only when they are needed.\n-   **Image Optimization**: Compressing and optimizing image assets.\n-   **Caching**: Leveraging browser and server-side caching mechanisms.\n-   **CDN Usage**: Delivering static assets via Content Delivery Networks for faster global access.",
          "examples": [
            {
              "id": "example_react_production_webpack",
              "title": "Webpack Configuration for Production Mode",
              "code": "```javascript\nconst webpack = require('webpack');\n\nmodule.exports = {\n  mode: 'production', // Setting mode to 'production' in Webpack 4+ automatically applies DefinePlugin and other optimizations\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: __dirname + '/dist'\n  },\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('production')\n    })\n    // Other plugins like HtmlWebpackPlugin, MiniCssExtractPlugin etc.\n  ],\n  // ... other config (loaders, resolve, etc.)\n};\n```",
              "explanation": "This Webpack configuration snippet explicitly sets `process.env.NODE_ENV` to `'production'` using `webpack.DefinePlugin`. This ensures that any code paths dependent on this environment variable (like React's development warnings) are removed during the build process. For Webpack 4+, simply setting `mode: 'production'` handles many of these optimizations automatically, including the `DefinePlugin` setup internally.",
              "language": "javascript"
            },
            {
              "id": "example_react_conditional_code",
              "title": "React Code with Environment Variable Check",
              "code": "```javascript\nimport React from 'react';\n\nfunction MyComponent() {\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn('This is a development-only warning for MyComponent!');\n  }\n\n  return (\n    <div>\n      <p>Hello from MyComponent</p>\n    </div>\n  );\n}\n\nexport default MyComponent;\n```",
              "explanation": "This React component demonstrates how `process.env.NODE_ENV` is used within application code. In development mode, the warning will be logged. When bundled for production with `process.env.NODE_ENV` set to `'production'`, the `if` block will be evaluated to `if (false)` and typically removed by bundlers via dead code elimination, preventing the warning from appearing in the final production bundle.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "React",
            "Production",
            "Optimization",
            "Webpack",
            "Performance",
            "Deployment",
            "Environment Variables"
          ],
          "technology": "React",
          "prerequisites": [
            "Basic React Development",
            "Module Bundlers (Webpack concepts)"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "Professional React Development",
            "Web Performance Optimization"
          ]
        },
        {
          "id": "theory_javascript_framework_comparison",
          "title": "JavaScript Framework Comparison: React vs Angular vs Vue.js",
          "content": "Choosing the right JavaScript framework is a critical decision for any frontend project. React, Angular, and Vue.js are the three most popular choices, each with distinct philosophies, strengths, and ideal use cases. Understanding their core differences helps in making an informed decision tailored to project needs, team expertise, and scalability goals.\n\n## Core Feature Comparison\n\n| Feature            | React                                     | Angular                                   | Vue.js                                   |\n| :----------------- | :---------------------------------------- | :---------------------------------------- | :--------------------------------------- |\n| **Type**           | Library                                   | Full Framework                            | Progressive Framework                    |\n| **Learning Curve** | Moderate                                  | Steep                                     | Gentle                                   |\n| **Data Binding**   | One-way                                   | Two-way                                   | Two-way (Optional)                       |\n| **DOM**            | Virtual DOM                               | Real DOM with incremental DOM             | Virtual DOM                              |\n| **Architecture**   | Component-based                           | Component-based with MVC                  | Component-based                          |\n| **Language**       | JavaScript/JSX                            | TypeScript                                | JavaScript/HTML                          |\n| **Mobile Solutions**| React Native                             | Ionic, NativeScript                       | Vue Native, Quasar                       |\n| **Size**           | ~40KB                                     | ~143KB                                    | ~33KB                                    |\n| **Performance**    | High                                      | High                                      | High                                     |\n| **Flexibility**    | Very flexible                             | Less flexible, more opinionated           | Very flexible                            |\n| **Community/Ecosystem**| Very large                                | Large                                     | Growing rapidly                          |\n\n## Detailed Feature Overview\n\n-   **Type**: React is a UI library, providing tools for building user interfaces. Angular is a comprehensive, opinionated framework providing a full suite of features (routing, state management, HTTP client, etc.). Vue.js is a progressive framework, meaning it can be adopted incrementally and scaled from a small library to a full-fledged framework.\n-   **Learning Curve**: React has a moderate learning curve, especially with JSX and its ecosystem. Angular is considered steep due to its strong conventions, TypeScript requirement, and reliance on concepts like Dependency Injection and RxJS. Vue.js is widely praised for its gentle learning curve, making it approachable for developers from various backgrounds.\n-   **Data Binding**: React uses one-way data binding (unidirectional data flow), making state changes predictable. Angular features two-way data binding, where changes in the UI automatically update the model and vice-versa. Vue.js supports both one-way and two-way binding with `v-model`.\n-   **DOM**: Both React and Vue.js utilize a Virtual DOM, which is an in-memory representation of the real DOM, allowing for efficient updates by minimizing direct DOM manipulations. Angular works directly with the Real DOM, but employs a sophisticated change detection mechanism and incremental DOM techniques for high performance.\n-   **Architecture**: All three are component-based. Angular strongly encourages an MVC (Model-View-Controller) or MVVM (Model-View-ViewModel) architecture. React and Vue are more flexible, allowing developers to choose their preferred architectural patterns.\n-   **Language**: React predominantly uses JavaScript and JSX (a syntax extension for JavaScript). Angular is built with and heavily relies on TypeScript. Vue.js uses JavaScript and standard HTML for templates, with optional TypeScript support.\n-   **Mobile Solutions**: React Native allows building native mobile apps from a single JavaScript codebase. Angular has Ionic (hybrid) and NativeScript (native). Vue.js offers Vue Native (native) and Quasar (hybrid).\n-   **Size & Performance**: Vue.js is typically the smallest, followed by React. Angular is the largest. All three offer high performance, largely due to their efficient DOM update strategies and build optimizations.\n-   **Flexibility & Opinionation**: React and Vue.js offer high flexibility, allowing developers to choose libraries for routing, state management, etc. Angular is highly opinionated, providing many built-in solutions, which can lead to faster development in large teams but less freedom.\n\n## When to Choose Each Framework\n\n### React is ideal when:\n-   You need a highly flexible and modular solution, allowing you to pick and choose libraries for routing, state management, etc.\n-   You're building a single-page application with frequent state updates and complex UIs.\n-   You have a team familiar with JavaScript (not necessarily TypeScript) and are comfortable with a larger ecosystem of third-party libraries.\n-   You want to potentially reuse code between web and mobile applications using React Native.\n-   You prioritize community support and a vast array of available packages.\n\n### Angular is ideal when:\n-   You're building large, enterprise-level applications that require a structured, opinionated, and full-featured framework.\n-   You need a framework with built-in solutions for common tasks (routing, forms, HTTP, dependency injection).\n-   Your team is familiar with TypeScript or prefers a strongly typed language.\n-   You value strict conventions and a clear architectural pattern for maintainability across large teams.\n-   You need comprehensive CLI tools for scaffolding and managing projects.\n\n### Vue.js is ideal when:\n-   You want the easiest learning curve for your team, making it quick to get started.\n-   You need a progressive framework that can be adopted incrementally, from enhancing small parts of an existing application to building full SPAs.\n-   You're building applications that need to be lightweight and fast, without the overhead of a full framework.\n-   You want a balance between the flexibility of React and some of the conventions of Angular.\n-   You need good documentation, clear APIs, and straightforward solutions, often leading to quicker development cycles for small to medium projects.\n\nUltimately, the 'best' framework depends on the specific project requirements, team skillset, and long-term maintenance considerations.",
          "examples": [
            {
              "id": "example_react_component_concept",
              "title": "Conceptual React Component (JSX)",
              "code": "```jsx\n// React Component using JSX\nimport React from 'react';\n\nfunction Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}\n\n// Usage:\n// <Greeting name=\"World\" />\n```",
              "explanation": "This example illustrates a basic React functional component using JSX, React's preferred syntax for describing UI. It highlights React's component-based nature and the direct embedding of JavaScript expressions within markup.",
              "language": "jsx"
            },
            {
              "id": "example_angular_component_concept",
              "title": "Conceptual Angular Component (TypeScript/HTML)",
              "code": "```typescript\n// Angular Component (TypeScript)\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-greeting',\n  template: `<h1>Hello, {{ name }}!</h1>`,\n  styles: []\n})\nexport class GreetingComponent {\n  @Input() name: string = 'Guest';\n}\n\n// Usage in another template:\n// <app-greeting name=\"Angular World\"></app-greeting>\n```",
              "explanation": "This conceptual Angular component demonstrates its use of decorators (`@Component`, `@Input`), TypeScript for strong typing, and separate template/style definitions. Angular's opinionated structure and use of specific module imports are evident.",
              "language": "typescript"
            },
            {
              "id": "example_vue_component_concept",
              "title": "Conceptual Vue Component (JavaScript/HTML)",
              "code": "```html\n<!-- Vue Component (HTML Template/JavaScript) -->\n<template>\n  <h1>Hello, {{ name }}!</h1>\n</template>\n\n<script>\nexport default {\n  props: {\n    name: {\n      type: String,\n      default: 'Vue World'\n    }\n  }\n};\n</script>\n\n<!-- Usage in another template: -->\n<!-- <Greeting name=\"Vue World\" /> -->\n```",
              "explanation": "This Vue.js component shows its typical Single File Component (SFC) structure with `<template>`, `<script>`, and optional `<style>` blocks. It emphasizes the use of standard HTML for templating and a straightforward `props` option for data passing, contributing to its gentle learning curve.",
              "language": "html"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "JavaScript",
            "Frameworks",
            "React",
            "Angular",
            "Vue.js",
            "Frontend Architecture",
            "Comparison",
            "Decision Making"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "HTML",
            "CSS",
            "JavaScript Fundamentals"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "Frontend Architect Roles",
            "Project Lead"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_sass_extend_1",
          "topic": "SASS Extend",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the `@extend` directive in SASS?",
          "answer": "The `@extend` directive allows a selector to inherit the styles of another selector, promoting code reuse and reducing repetition in CSS.",
          "options": [],
          "analysisPoints": [
            "Checks understanding of SASS `@extend`'s core function.",
            "Differentiates `@extend` from mixins (though not explicitly covered in theory, good to keep distinct)."
          ],
          "keyConcepts": [
            "SASS",
            "Extend",
            "Code Reuse"
          ],
          "evaluationCriteria": [
            "Ability to recall SASS directive purpose.",
            "Conciseness of explanation."
          ],
          "example": "",
          "tags": [
            "SASS",
            "CSS Preprocessors"
          ],
          "prerequisites": [
            "Basic SASS syntax"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_sass_extend_2",
          "topic": "SASS Placeholder Selectors",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following SASS code, what will be the correct compiled CSS output for `.my-button`?\n\n```scss\n%base-styles {\n  font-size: 16px;\n  color: #333;\n}\n\n.my-button {\n  @extend %base-styles;\n  background-color: blue;\n}\n\n.another-element {\n  padding: 5px;\n}\n```",
          "answer": ".my-button {\n  font-size: 16px;\n  color: #333;\n  background-color: blue;\n}",
          "options": [
            ".my-button {\n  font-size: 16px;\n  color: #333;\n  background-color: blue;\n}",
            "%base-styles {\n  font-size: 16px;\n  color: #333;\n}\n.my-button {\n  background-color: blue;\n}",
            ".my-button, %base-styles {\n  font-size: 16px;\n  color: #333;\n}\n.my-button {\n  background-color: blue;\n}",
            ".my-button {\n  background-color: blue;\n}"
          ],
          "analysisPoints": [
            "Tests understanding of placeholder selectors not being output on their own.",
            "Confirms that `@extend` copies the styles into the extending selector.",
            "Distinguishes between SASS syntax and compiled CSS output."
          ],
          "keyConcepts": [
            "SASS Extend",
            "Placeholder Selectors",
            "CSS Compilation"
          ],
          "evaluationCriteria": [
            "Accuracy of CSS output prediction.",
            "Understanding of placeholder selector behavior."
          ],
          "example": "The `%base-styles` placeholder itself will not be output to CSS because it's only meant for `@extend`ing. When `.my-button` extends it, the styles defined in `%base-styles` are directly included within the `.my-button` rule set.",
          "tags": [
            "SASS",
            "CSS Compilation"
          ],
          "prerequisites": [
            "SASS Extend",
            "Placeholder Selectors"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_sass_extend_3",
          "topic": "SASS Extend Benefits and Drawbacks",
          "level": "hard",
          "type": "open",
          "question": "Discuss the primary benefits and potential drawbacks of using SASS `@extend` with placeholder selectors, particularly in the context of large-scale frontend projects. Provide an example of a scenario where `@extend` might lead to an undesirable outcome.",
          "answer": "Benefits: \n1.  **DRY (Don't Repeat Yourself)**: Promotes significant code reuse by allowing styles to be defined once and inherited by multiple selectors, leading to cleaner and more maintainable stylesheets.\n2.  **Semantic HTML**: Enables developers to write semantic class names in HTML (e.g., `.primary-button`, `.danger-button`) while keeping common visual styles abstracted in SASS.\n3.  **Reduced CSS Size (in some cases)**: By grouping selectors that share styles, `@extend` can sometimes produce smaller CSS output compared to using mixins without `@include`ing content, as it avoids duplicating property declarations.\n\nDrawbacks:\n1.  **Output Bloat (Over-extending)**: If an `@extend` is used without careful planning (e.g., extending a very generic selector from many specific selectors), it can lead to deeply nested, comma-separated selector lists in the compiled CSS. This increases file size and can make debugging difficult.\n2.  **Specificity Issues**: When extending a selector, the extended styles inherit the specificity of the *extending* selector. This can lead to unexpected style overrides if not properly managed, especially when dealing with complex style hierarchies.\n3.  **Source Order Issues**: The order in which `@extend` directives are processed by SASS can sometimes influence the final compiled CSS if rules are overridden, which might not always be intuitive.\n4.  **`@extend`-only Selectors**: While placeholder selectors (`%`) help, extending regular classes can still lead to the base class being included in the compiled CSS even if it's not directly used in HTML, unless a tool like PurgeCSS is used.\n\nExample of Undesirable Outcome:\nImagine you have a base style for 'boxes' and you extend it for every single component. If the base box has a `border-radius: 4px;` and then you later have a `special-box` that extends `box` but needs `border-radius: 0;`, you might end up with very long combined selectors for `box`, `special-box`, etc., for just a single property. If you then extend `box` from many unrelated elements, the resulting CSS `selector1, selector2, ..., selectorN { border-radius: 4px; }` can become excessively long and difficult to manage. It also might pull in styles into unexpected contexts if the extended styles are too broad for the extending elements.",
          "options": [],
          "analysisPoints": [
            "Evaluates a deep understanding of `@extend`'s impact on large projects.",
            "Requires critical thinking about both positive and negative consequences.",
            "Tests ability to articulate complex technical concepts.",
            "Challenges with a practical example of a drawback."
          ],
          "keyConcepts": [
            "SASS Extend",
            "CSS Architecture",
            "Maintainability",
            "Performance",
            "Specificity"
          ],
          "evaluationCriteria": [
            "Completeness of benefits and drawbacks.",
            "Clarity of explanation.",
            "Relevance and accuracy of the example scenario.",
            "Demonstrates critical thinking."
          ],
          "example": "The key is to understand that `@extend` is a compile-time feature that merges selectors. This is different from a mixin, which copies declarations. The drawbacks often stem from this merging behavior causing unintended side effects or bloat.",
          "tags": [
            "SASS",
            "Frontend Architecture",
            "Best Practices",
            "Performance"
          ],
          "prerequisites": [
            "SASS Extend",
            "CSS Specificity"
          ],
          "complexity": 8,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_prod_1",
          "topic": "React Production Mode",
          "level": "medium",
          "type": "mcq",
          "question": "What is the primary benefit of setting `process.env.NODE_ENV` to `'production'` when building a React application?\n\n```javascript\n// Using Webpack's DefinePlugin\nconst webpack = require('webpack');\n\nmodule.exports = {\n  // ... other config\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('production')\n    })\n  ]\n};\n```",
          "answer": "It removes development-only warnings and enables performance optimizations.",
          "options": [
            "It enables Hot Module Replacement (HMR) for faster development.",
            "It allows for dynamic code splitting at runtime in the browser.",
            "It automatically deploys the application to a cloud server.",
            "It removes development-only warnings and enables performance optimizations."
          ],
          "analysisPoints": [
            "Tests knowledge of `NODE_ENV`'s impact on React builds.",
            "Distinguishes between development and production concerns.",
            "Identifies the core reasons for using production mode."
          ],
          "keyConcepts": [
            "React",
            "Production Mode",
            "Optimization",
            "Webpack DefinePlugin"
          ],
          "evaluationCriteria": [
            "Correctly identifies the main benefit.",
            "Avoids common misconceptions (HMR, runtime splitting)."
          ],
          "example": "Setting `process.env.NODE_ENV` to `'production'` signals to React and other libraries that the application is in a production environment. This triggers optimizations such as stripping out development warnings (e.g., `PropType` warnings, `key` warnings) and enabling more aggressive performance optimizations within React's reconciliation process, leading to a smaller, faster, and more efficient production bundle.",
          "tags": [
            "React",
            "Production",
            "Optimization",
            "Webpack"
          ],
          "prerequisites": [
            "Basic React Development",
            "Webpack concepts"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_prod_2",
          "topic": "Environment Variables in React Builds",
          "level": "easy",
          "type": "flashcard",
          "question": "Which Webpack plugin is commonly used to inject `process.env.NODE_ENV` into the bundled JavaScript?",
          "answer": "Webpack's `DefinePlugin`.",
          "options": [],
          "analysisPoints": [
            "Recalls the specific Webpack tool for environment variable injection.",
            "Reinforces the connection between `NODE_ENV` and build tools."
          ],
          "keyConcepts": [
            "Webpack",
            "DefinePlugin",
            "Environment Variables"
          ],
          "evaluationCriteria": [
            "Correctly identifies the plugin."
          ],
          "example": "",
          "tags": [
            "Webpack",
            "React",
            "Build Tools"
          ],
          "prerequisites": [
            "Webpack basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_prod_3",
          "topic": "Production Build Tools",
          "level": "medium",
          "type": "open",
          "question": "If you're using Create React App (CRA), how do you typically ensure your application is built in production mode? Do you need to manually configure Webpack's `DefinePlugin`?",
          "answer": "When using Create React App (CRA), you typically build your application for production by running the command `npm run build` or `yarn build`.\n\nNo, you do not need to manually configure Webpack's `DefinePlugin` when using CRA. CRA abstracts away the Webpack configuration, and its `build` script is pre-configured to automatically set `process.env.NODE_ENV` to `'production'` and apply all necessary optimizations (like minification, tree-shaking, code splitting, and development warning removal) during the build process.",
          "options": [],
          "analysisPoints": [
            "Tests practical knowledge of CRA build processes.",
            "Confirms understanding of how modern tools simplify configuration.",
            "Emphasizes the 'convention over configuration' aspect of CRA."
          ],
          "keyConcepts": [
            "Create React App",
            "Production Build",
            "Webpack Configuration"
          ],
          "evaluationCriteria": [
            "Correctly identifies the build command.",
            "Explains the role of CRA in abstracting configuration.",
            "Demonstrates understanding of automated optimizations."
          ],
          "example": "",
          "tags": [
            "React",
            "CRA",
            "Build Tools",
            "Deployment"
          ],
          "prerequisites": [
            "Familiarity with CRA"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_framework_comp_1",
          "topic": "Framework Types",
          "level": "easy",
          "type": "flashcard",
          "question": "Is React considered a full framework or a library?",
          "answer": "React is primarily considered a UI library.",
          "options": [],
          "analysisPoints": [
            "Tests basic classification of React.",
            "Highlights a fundamental difference between React and Angular."
          ],
          "keyConcepts": [
            "React",
            "Library",
            "Framework"
          ],
          "evaluationCriteria": [
            "Accurate classification."
          ],
          "example": "",
          "tags": [
            "React",
            "Frameworks"
          ],
          "prerequisites": [
            "Basic understanding of React"
          ],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_framework_comp_2",
          "topic": "Data Binding",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following JavaScript frameworks primarily uses two-way data binding by default for forms, making changes in the UI automatically reflect in the model and vice-versa?",
          "answer": "Angular",
          "options": [
            "React",
            "Angular",
            "Vue.js (only with `v-model` which is optional)",
            "Ember.js"
          ],
          "analysisPoints": [
            "Compares data binding philosophies across frameworks.",
            "Focuses on default behavior and common use cases.",
            "Distinguishes between one-way and two-way binding."
          ],
          "keyConcepts": [
            "Data Binding",
            "Two-way Data Binding",
            "React",
            "Angular",
            "Vue.js"
          ],
          "evaluationCriteria": [
            "Correctly identifies Angular's default data binding.",
            "Shows understanding of the concept."
          ],
          "example": "Angular's `[(ngModel)]` syntax exemplifies two-way data binding, simplifying form handling by automatically synchronizing data between the component's model and the input element's value. While Vue.js also supports two-way binding with `v-model`, it's an opt-in feature, and React is fundamentally based on one-way data flow.",
          "tags": [
            "Angular",
            "Data Binding",
            "Frameworks"
          ],
          "prerequisites": [
            "Familiarity with data binding concepts"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_framework_comp_3",
          "topic": "DOM Interaction",
          "level": "medium",
          "type": "open",
          "question": "Explain the difference in how React and Angular interact with the Document Object Model (DOM) to update the user interface. What are the implications of these different approaches on performance and development?",
          "answer": "React uses a **Virtual DOM**. When the state of a component changes, React first updates its in-memory representation of the DOM (the Virtual DOM). It then performs a 'diffing' algorithm to compare the new Virtual DOM with the previous one. Only the minimum necessary changes are then 'batched' and applied to the real DOM. This minimizes direct manipulation of the real DOM, which is generally considered a slow operation.\n\nAngular, on the other hand, works directly with the **Real DOM**. It uses a sophisticated change detection mechanism. When data bound to the UI changes (e.g., through user events, HTTP responses, or timers), Angular's change detection cycle runs. It traverses the component tree, checking for changes in bound data and, if detected, directly updates the specific parts of the real DOM. Angular also leverages techniques like incremental DOM and Zone.js (in older versions) or modern browser APIs to optimize these updates.\n\n**Implications:**\n\n*   **Performance**: Both approaches are highly optimized and perform well for most applications. React's Virtual DOM can lead to very efficient updates by minimizing real DOM operations. Angular's direct DOM manipulation, combined with its optimized change detection (and techniques like `OnPush` change detection strategy), also yields high performance. The actual performance bottleneck usually lies in application-specific logic, not the DOM update strategy itself.\n*   **Development Experience**: \n    *   **React**: The Virtual DOM abstraction can simplify development by allowing developers to think about UI as a function of state, without directly manipulating the DOM. However, it requires manually optimizing component re-renders (e.g., using `React.memo` or `useMemo`/`useCallback`).\n    *   **Angular**: Direct DOM interaction means that developers are closer to how the browser works, but Angular's change detection handles many optimizations automatically. Understanding Angular's change detection strategies is key for advanced performance tuning.",
          "options": [],
          "analysisPoints": [
            "Requires detailed explanation of Virtual DOM vs. Real DOM with Angular's specifics.",
            "Compares performance implications, acknowledging both are optimized.",
            "Discusses impact on developer workflow and potential optimization strategies."
          ],
          "keyConcepts": [
            "Virtual DOM",
            "Real DOM",
            "Change Detection",
            "React",
            "Angular",
            "Performance"
          ],
          "evaluationCriteria": [
            "Accuracy and depth of explanation for both frameworks.",
            "Coherent comparison of implications.",
            "Demonstrates understanding of underlying mechanisms."
          ],
          "example": "",
          "tags": [
            "React",
            "Angular",
            "DOM",
            "Performance",
            "Frontend Architecture"
          ],
          "prerequisites": [
            "Understanding of DOM",
            "Basic knowledge of React/Angular"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_framework_comp_4",
          "topic": "Framework Use Cases",
          "level": "hard",
          "type": "open",
          "question": "You are leading a new frontend project for a large enterprise. The project needs to be scalable, maintainable by a large team (some of whom are new to frontend development), and will heavily use TypeScript. There's a strong preference for a clear, opinionated structure. Based on these requirements, which JavaScript framework (React, Angular, or Vue.js) would you recommend and why?",
          "answer": "Based on the given requirements, I would recommend **Angular**.\n\nHere's the justification:\n\n1.  **Scalability and Large Enterprise Applications**: Angular is explicitly designed as a full-featured framework for large enterprise applications. Its comprehensive toolset (routing, state management, HTTP client, forms) and modular structure (NgModules, services, components) make it highly suitable for large-scale projects with many features and modules.\n2.  **Maintainability by a Large Team**: Angular's highly opinionated nature and strong conventions enforce a consistent project structure and coding style across the entire application. This is invaluable for large teams, especially when onboarding new developers, as it reduces cognitive load and ensures code readability and predictability. Everyone follows the same patterns, which streamlines collaboration and maintenance.\n3.  **Heavy TypeScript Usage**: Angular is built with TypeScript from the ground up and strongly encourages its use. This aligns perfectly with the requirement for heavy TypeScript usage, providing static typing benefits, improved tooling, and fewer runtime errors, which are critical for large, complex codebases.\n4.  **Clear, Opinionated Structure**: Angular's structured approach, including its Dependency Injection system, module system, and specific ways of doing things, provides a clear architectural blueprint. This reduces decision fatigue for developers and ensures a consistent approach to application development, which is exactly what a team that values opinionated structure needs.\n\nWhile React is flexible and Vue.js has a gentle learning curve, neither matches Angular's inherent strengths in providing a full, opinionated framework ideal for large enterprise applications with a strong TypeScript focus and a need for highly consistent development practices across a large team.",
          "options": [],
          "analysisPoints": [
            "Tests ability to apply framework knowledge to real-world scenarios.",
            "Requires justification based on multiple criteria.",
            "Evaluates understanding of 'When to Choose' sections.",
            "Promotes critical thinking and decision-making."
          ],
          "keyConcepts": [
            "Framework Selection",
            "Enterprise Applications",
            "TypeScript",
            "Scalability",
            "Team Collaboration"
          ],
          "evaluationCriteria": [
            "Correct framework recommendation.",
            "Comprehensive and logical justification based on all criteria.",
            "Demonstrates strong understanding of framework strengths."
          ],
          "example": "",
          "tags": [
            "Framework Selection",
            "Frontend Architecture",
            "Project Management",
            "TypeScript"
          ],
          "prerequisites": [
            "Deep understanding of React, Angular, Vue.js characteristics"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "expert"
        },
        {
          "id": "question_framework_comp_5",
          "topic": "Learning Curve Comparison",
          "level": "easy",
          "type": "flashcard",
          "question": "Which of the three major JavaScript frameworks (React, Angular, Vue.js) is generally considered to have the gentlest learning curve?",
          "answer": "Vue.js.",
          "options": [],
          "analysisPoints": [
            "Recalls framework learning curve characteristics.",
            "Good for quick recall tests."
          ],
          "keyConcepts": [
            "Vue.js",
            "Learning Curve",
            "Frameworks"
          ],
          "evaluationCriteria": [
            "Correctly identifies Vue.js."
          ],
          "example": "",
          "tags": [
            "Vue.js",
            "Learning",
            "Frameworks"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_framework_comp_6",
          "topic": "Mobile Solutions",
          "level": "medium",
          "type": "mcq",
          "question": "If a development team aims to build native mobile applications using a shared JavaScript codebase from their web application, which of the following framework/library and its associated mobile solution would be most suitable?\n\n| Feature | React | Angular | Vue.js |\n| --- | --- | --- | --- |\n| **Mobile Solutions** | React Native | Ionic, NativeScript | Vue Native, Quasar |\n",
          "answer": "React with React Native",
          "options": [
            "Angular with Ionic",
            "React with React Native",
            "Vue.js with Quasar",
            "Angular with NativeScript"
          ],
          "analysisPoints": [
            "Tests understanding of 'native mobile applications' vs. hybrid.",
            "Checks association of framework with its primary native mobile solution.",
            "Evaluates the ability to choose based on specific requirements."
          ],
          "keyConcepts": [
            "React Native",
            "Native Mobile Development",
            "Framework Ecosystems"
          ],
          "evaluationCriteria": [
            "Identifies the best fit for native mobile from web codebase.",
            "Understands the distinction between native and hybrid."
          ],
          "example": "React Native allows developers to build truly native iOS and Android applications using React, leveraging JavaScript and the existing React knowledge base to write mobile-specific UI components that compile to native views. While Ionic and Quasar primarily focus on hybrid apps (web views), NativeScript and Vue Native also target native, but React Native is arguably the most dominant and recognized solution for shared codebase native development among the given options.",
          "tags": [
            "React Native",
            "Mobile Development",
            "Cross-Platform",
            "React"
          ],
          "prerequisites": [
            "Understanding of mobile development paradigms"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_sass_refactor_buttons",
          "title": "Refactor Button Styles with SASS @extend",
          "description": "\nRefactor the provided CSS button styles using SASS `@extend` and a placeholder selector to minimize code repetition and improve maintainability. \n\n**Requirements:**\n\n1.  Create a SASS placeholder selector (e.g., `%btn-base`) that contains the common styles shared by all buttons.\n2.  Update the `.primary-button` and `.secondary-button` classes to `@extend` this placeholder.\n3.  Ensure the compiled CSS output is concise and correctly reflects the inheritance.\n\nYour solution should demonstrate how `@extend` reduces redundancy while maintaining distinct button styles.\n",
          "difficulty": "medium",
          "startingCode": "```scss\n/* Original SCSS/CSS to refactor */\n.primary-button {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  border-radius: 5px;\n  background-color: #007bff;\n  color: white;\n}\n\n.secondary-button {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  border-radius: 5px;\n  background-color: #6c757d;\n  color: white;\n}\n\n.danger-button {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  border-radius: 5px;\n  background-color: #dc3545;\n  color: white;\n}\n```",
          "solutionCode": "```scss\n%btn-base {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  border-radius: 5px;\n  font-family: sans-serif; /* Added for completeness */\n}\n\n.primary-button {\n  @extend %btn-base;\n  background-color: #007bff;\n  color: white;\n}\n\n.secondary-button {\n  @extend %btn-base;\n  background-color: #6c757d;\n  color: white;\n}\n\n.danger-button {\n  @extend %btn-base;\n  background-color: #dc3545;\n  color: white;\n}\n\n/* Expected Compiled CSS Output:\n.primary-button,\n.secondary-button,\n.danger-button {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  border-radius: 5px;\n  font-family: sans-serif;\n}\n\n.primary-button {\n  background-color: #007bff;\n  color: white;\n}\n\n.secondary-button {\n  background-color: #6c757d;\n  color: white;\n}\n\n.danger-button {\n  background-color: #dc3545;\n  color: white;\n}\n*/\n```",
          "testCases": [
            "Verify that `padding`, `border`, `cursor`, `font-size`, `border-radius` are correctly inherited by all button classes.",
            "Ensure that each button class retains its unique `background-color` and `color`.",
            "Confirm that the compiled CSS output groups the common styles under a single selector list for efficiency.",
            "Validate that the placeholder selector (`%btn-base`) itself does not appear in the compiled CSS."
          ],
          "hints": [
            "Identify the common properties first across all button classes.",
            "Remember that placeholder selectors start with `%` and are not compiled unless extended.",
            "Think about how SASS groups selectors that `@extend` the same placeholder in the final CSS."
          ],
          "tags": [
            "SASS",
            "CSS Preprocessors",
            "Refactoring",
            "Maintainability",
            "DRY"
          ],
          "timeEstimate": 20,
          "prerequisites": [
            "Basic SASS Syntax",
            "Understanding of CSS properties"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "SASS Extend",
            "Placeholder Selectors"
          ]
        },
        {
          "id": "task_react_webpack_prod_config",
          "title": "Configure Webpack for React Production Build",
          "description": "\nSet up a basic Webpack configuration file (`webpack.config.js`) to build a simple React application for production. The configuration should ensure that React is aware it's running in production mode, leading to optimizations.\n\n**Requirements:**\n\n1.  Define the `mode` as 'production' in the Webpack configuration.\n2.  Use `webpack.DefinePlugin` to explicitly set `process.env.NODE_ENV` to `'production'` (even if `mode: 'production'` handles it, this explicitly shows understanding).\n3.  Include a basic entry point and output path.\n4.  Add a rule for processing `.js` or `.jsx` files with Babel (assume `@babel/preset-react` and `@babel/preset-env` are configured).\n\nYour solution should demonstrate how to manually configure a production build with Webpack for a React app.\n",
          "difficulty": "medium",
          "startingCode": "```javascript\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  // TODO: Configure for production mode\n  // TODO: Use DefinePlugin\n  // TODO: Add entry and output\n  // TODO: Add Babel loader for React\n\n  // Example of a simple React component (not part of webpack.config.js, just for context)\n  // src/index.js:\n  // import React from 'react';\n  // import ReactDOM from 'react-dom/client';\n  // function App() {\n  //   if (process.env.NODE_ENV !== 'production') {\n  //     console.log('App running in development mode!');\n  //   }\n  //   return <div>Hello Production React!</div>;\n  // }\n  // const root = ReactDOM.createRoot(document.getElementById('root'));\n  // root.render(<App />);\n};\n```",
          "solutionCode": "```javascript\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  mode: 'production', // Webpack 4+ automatically applies many optimizations when mode is 'production'\n  entry: './src/index.js', // Assuming your main React app entry point is src/index.js\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'), // Output bundle to a 'dist' directory\n    clean: true, // Clean the output directory before rebuild\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-react', '@babel/preset-env'], // Assumes these presets are installed\n          },\n        },\n      },\n    ],\n  },\n  plugins: [\n    // This ensures process.env.NODE_ENV is set to 'production' during compilation\n    // React and other libraries use this variable to enable/disable dev features\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('production')\n    }),\n    // You might also add HtmlWebpackPlugin, MiniCssExtractPlugin etc. for a full setup\n  ],\n  resolve: {\n    extensions: ['.js', '.jsx'], // Allows importing .js and .jsx files without extension\n  },\n};\n```",
          "testCases": [
            "Verify `webpack.config.js` is syntactically correct and can be run by Webpack.",
            "Confirm that `mode: 'production'` is set in the configuration.",
            "Check for the presence and correct configuration of `webpack.DefinePlugin` for `process.env.NODE_ENV`.",
            "Ensure the Babel loader is correctly configured for `.js` and `.jsx` files, excluding `node_modules`.",
            "Conceptual test: If the `src/index.js` contains a `console.log` guarded by `process.env.NODE_ENV !== 'production'`, running the build should produce a bundle where that specific `console.log` statement is removed."
          ],
          "hints": [
            "Remember that `path.resolve(__dirname, 'dist')` is a common way to define an absolute output path.",
            "The `module.rules` array is where you define loaders for different file types.",
            "`DefinePlugin` needs the value to be stringified JSON.",
            "Webpack `mode: 'production'` handles a lot automatically, but explicitly using `DefinePlugin` shows granular control."
          ],
          "tags": [
            "Webpack",
            "React",
            "Production",
            "Build Tools",
            "JavaScript",
            "Babel"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "Basic Webpack knowledge",
            "Basic React app structure"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Webpack Configuration",
            "DefinePlugin",
            "Babel",
            "Environment Variables"
          ]
        },
        {
          "id": "task_choose_framework_scenario",
          "title": "Frontend Framework Selection for a New Project",
          "description": "\nYou are a lead frontend architect tasked with choosing the primary JavaScript framework for a new, large-scale web application. The application will be a complex dashboard for data visualization and management, requiring frequent UI updates and a high degree of interactivity. The development team is relatively small (5 developers), has mixed experience levels (some strong JavaScript, some newer to modern frameworks), and values rapid prototyping and the flexibility to integrate various third-party libraries for specific functionalities (e.g., charting, complex forms).\n\n**Requirements:**\n\n1.  Recommend **one** of the three frameworks (React, Angular, or Vue.js).\n2.  Provide a detailed **justification** for your choice, explicitly linking it to the project's requirements and team characteristics.\n3.  Briefly explain why the **other two frameworks would be less ideal** for this specific scenario, referencing their characteristics.\n",
          "difficulty": "hard",
          "startingCode": "// No coding required for this task. Focus on written justification.\n// Think about:\n// - Team size & experience\n// - Project complexity & type (dashboard, data viz, frequent updates)\n// - Need for flexibility vs. opinionation\n// - Integration with third-party libraries\n",
          "solutionCode": "Based on the requirements, I would recommend **React** for this new, large-scale web application.\n\n**Justification for Choosing React:**\n\n1.  **Complexity & Interactivity (Data Visualization & Frequent Updates)**: React excels at building complex, interactive UIs that require frequent updates. Its component-based architecture and efficient Virtual DOM make it highly performant for scenarios like dynamic dashboards and data visualization, where granular UI updates are common.\n2.  **Flexibility and Third-Party Integration**: The project needs flexibility to integrate various third-party libraries (charting, complex forms). React, being a library, is highly unopinionated about solutions for routing, state management, or forms. This allows the team to pick best-of-breed libraries for each specific need (e.g., D3.js or Chart.js for data visualization, React Hook Form for complex forms, Zustand or Redux for state management), which is a significant advantage for a dashboard application.\n3.  **Rapid Prototyping**: With a strong JavaScript background, developers can quickly start building with React due to its component reusability and declarative nature. While the learning curve is moderate, the flexibility allows for quick iteration once core concepts are grasped.\n4.  **Mixed Experience Team (JavaScript Focus)**: While some developers are newer, the strong JavaScript background within the team is a good fit for React. While it uses JSX, it's still fundamentally JavaScript-centric, which minimizes the overhead of learning a new language like TypeScript (as required by Angular) for everyone.\n\n**Why Other Frameworks are Less Ideal for This Scenario:**\n\n*   **Angular**: While excellent for large-scale enterprise applications, Angular's highly opinionated nature and steep learning curve (especially with TypeScript and RxJS) might be a challenge for a smaller team with mixed experience that values rapid prototyping and flexibility. Its built-in solutions, while comprehensive, might also be overkill or too restrictive if the team prefers to choose specific libraries for granular control over features like data visualization, where external libraries are often superior to framework-native ones.\n*   **Vue.js**: Vue.js is a strong contender due to its gentle learning curve and progressive nature, making it appealing for teams with mixed experience. However, for a truly 'large-scale' and 'complex dashboard' application with highly specific third-party integration needs, React's larger and more mature ecosystem, especially in areas like data visualization and advanced UI libraries, might offer more robust and specialized solutions that can be easily plugged in due to React's flexibility. While Vue is flexible, its ecosystem, while growing rapidly, might not yet match React's breadth for every niche requirement in complex dashboarding.",
          "testCases": [
            "Ensure a single framework recommendation is made.",
            "Validate that the justification clearly links to *all* provided requirements (scale, team experience, interactivity, flexibility, third-party libraries).",
            "Verify that the reasons for not choosing the other two frameworks are logical and consistent with their known characteristics.",
            "Check for clarity, conciseness, and logical flow of argumentation."
          ],
          "hints": [
            "Consider the trade-offs between 'full framework' vs. 'library' vs. 'progressive framework' in relation to flexibility and opinionation.",
            "Think about how team size and experience influence the learning curve and ramp-up time for a new project.",
            "Relate the 'complex dashboard, data visualization, frequent UI updates' need to how each framework handles DOM manipulation and reactivity.",
            "Focus on the ecosystem and third-party library availability for specialized needs."
          ],
          "tags": [
            "Framework Selection",
            "Frontend Architecture",
            "Project Management",
            "Decision Making",
            "React",
            "Angular",
            "Vue.js"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "Comprehensive understanding of React, Angular, and Vue.js features and use cases"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "expert",
          "relatedConcepts": [
            "Frontend Architecture",
            "Scalability",
            "Team Dynamics",
            "Ecosystem"
          ]
        }
      ]
    }
  }
]