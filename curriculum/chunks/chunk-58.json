[
  {
    "id": "2c0770ec-5e50-4cb5-9d1b-d3465360c6a2",
    "startLine": 11800,
    "endLine": 11899,
    "processedDate": "2025-06-17T12:37:52.615Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_css_centering",
          "title": "Centering Elements in CSS: Multiple Approaches",
          "content": "Centering elements both horizontally and vertically is a common task in CSS layout. Historically, this has been challenging, but modern CSS provides several robust and flexible methods. Understanding these different approaches is crucial for building responsive and maintainable user interfaces.\n\n## Method 1: Using CSS Flexbox\nFlexbox is a one-dimensional layout module that excels at distributing space between items and aligning them within a container. It's highly recommended for centering due to its flexibility and control.\n\nTo center an item within a flex container, you apply `display: flex`, `justify-content: center` (for horizontal centering), and `align-items: center` (for vertical centering) to the parent container. A crucial aspect often overlooked is ensuring the parent container has a defined height (e.g., `height: 100%` or `min-height: 100vh`) for vertical centering to work effectively.\n\n## Method 2: Using CSS Grid\nCSS Grid Layout is a two-dimensional layout system that allows for powerful control over rows and columns. For simple centering, it offers a concise shorthand `place-items`.\n\nTo center an item within a grid container, you apply `display: grid` and `place-items: center` to the parent container. `place-items` is a shorthand property that sets both `align-items` (vertical alignment) and `justify-items` (horizontal alignment) to `center` simultaneously. Similar to Flexbox, the parent container needs a defined height for `place-items` to center vertically within that space.\n\n## Method 3: Using Absolute Positioning and Transform\nThis method is a classic technique, often used when an element needs to be precisely positioned relative to its parent, regardless of other sibling elements. It involves setting the parent to `position: relative` to establish a positioning context, and the child to `position: absolute`.\n\nThe child element is then moved `top: 50%` and `left: 50%`. This positions its top-left corner at the exact center of the parent. To truly center it, a `transform: translate(-50%, -50%)` is applied. This `translate()` function shifts the element back by half of its *own* width and half of its *own* height, regardless of its actual dimensions, ensuring perfect centering. This method is good for overlays or when exact positioning is required.\n\n## Method 4: Using Display Table\nThis older method leverages the behavior of HTML tables for layout, specifically `vertical-align` and `text-align`. While less common with the advent of Flexbox and Grid, it's still a valid technique to be aware of, particularly for legacy systems or simple text/inline element centering within a block.\n\nTo center content using this method, the parent element is set to `display: table` and its child to `display: table-cell`. `vertical-align: middle` handles vertical centering of the content within the 'cell', and `text-align: center` handles horizontal centering of inline content (like text or inline-block elements) inside the 'cell'. The parent also needs a defined `height` and `width` for this method to be effective.",
          "examples": [
            {
              "id": "example_css_centering_flexbox",
              "title": "Centering with Flexbox",
              "code": ".flex-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%; /* Important for vertical centering */\n  border: 1px dashed #ccc;\n}\n\n.flex-center .child {\n  width: 100px;\n  height: 100px;\n  background-color: lightblue;\n  display: flex; /* Can center content inside child if needed */\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-weight: bold;\n}\n\n/* HTML Structure:\n<div class=\"flex-center\">\n  <div class=\"child\">Flex Item</div>\n</div> */",
              "explanation": "This example demonstrates how to use Flexbox to center a child element within a parent container. `display: flex` makes the container a flex container, `justify-content: center` centers items along the main axis (horizontally by default), and `align-items: center` centers items along the cross axis (vertically by default). A `height: 100%` on the parent is crucial for vertical centering to work, as it gives the container a defined height to align items within.",
              "language": "css"
            },
            {
              "id": "example_css_centering_grid",
              "title": "Centering with CSS Grid",
              "code": ".grid-center {\n  display: grid;\n  place-items: center; /* shorthand for align-items and justify-items */\n  height: 100%;\n  border: 1px dashed #ccc;\n}\n\n.grid-center .child {\n  width: 100px;\n  height: 100px;\n  background-color: lightcoral;\n  display: grid; /* Can center content inside child if needed */\n  place-items: center;\n  color: white;\n  font-weight: bold;\n}\n\n/* HTML Structure:\n<div class=\"grid-center\">\n  <div class=\"child\">Grid Item</div>\n</div> */",
              "explanation": "This example uses CSS Grid for centering. `display: grid` makes the container a grid container. The `place-items: center` property is a concise shorthand that sets both `align-items` and `justify-items` to `center`, effectively centering any direct children within their grid cells. Similar to Flexbox, the parent needs a defined `height` for vertical centering to be effective.",
              "language": "css"
            },
            {
              "id": "example_css_centering_absolute_transform",
              "title": "Centering with Absolute Positioning & Transform",
              "code": ".abs-center {\n  position: relative;\n  height: 200px; /* Example fixed height for parent */\n  width: 300px;\n  border: 1px dashed #ccc;\n}\n\n.abs-center > .child {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%); /* Shifts element back by half its width/height */\n  width: 100px;\n  height: 100px;\n  background-color: lightgreen;\n  display: flex; /* To center text inside child */\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-weight: bold;\n}\n\n/* HTML Structure:\n<div class=\"abs-center\">\n  <div class=\"child\">Absolute Item</div>\n</div> */",
              "explanation": "This classic method involves setting the parent container to `position: relative` to establish a positioning context. The child is then set to `position: absolute`, and `top: 50%` and `left: 50%` move its top-left corner to the center of the parent. The crucial `transform: translate(-50%, -50%)` then shifts the element by half its own width and height in the negative direction, precisely centering it. This method works well for elements with known or fluid dimensions and when they need to be overlaid.",
              "language": "css"
            },
            {
              "id": "example_css_centering_table",
              "title": "Centering with Display Table",
              "code": ".table-center {\n  display: table;\n  height: 200px;\n  width: 100%;\n  border: 1px dashed #ccc;\n}\n\n.table-center > .cell {\n  display: table-cell;\n  vertical-align: middle; /* vertical centering */\n  text-align: center; /* horizontal centering */\n  background-color: lightsalmon;\n  color: white;\n  font-weight: bold;\n}\n\n/* HTML Structure:\n<div class=\"table-center\">\n  <div class=\"cell\">Table Cell Item</div>\n</div> */",
              "explanation": "This method mimics HTML table behavior. The parent is set to `display: table` and the child (the element to be centered) is set to `display: table-cell`. `vertical-align: middle` then vertically aligns the content within the 'cell', and `text-align: center` horizontally aligns any inline content (like text or inline-block elements) inside the 'cell'. This approach is primarily effective for centering inline content or a single block-level element acting as a table cell.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_centering_mcq_1",
            "question_centering_mcq_2",
            "question_centering_open_1",
            "question_centering_flashcard_1"
          ],
          "relatedTasks": [
            "task_responsive_centered_hero"
          ],
          "tags": [
            "CSS",
            "Layout",
            "Centering",
            "Flexbox",
            "Grid",
            "Position",
            "Table Layout",
            "UI/UX"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "HTML Structure",
            "CSS Box Model",
            "Basic CSS Properties"
          ],
          "complexity": 6,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "Responsive Design",
            "Component Development"
          ]
        },
        {
          "id": "theory_css3_transforms",
          "title": "CSS3 Transforms: Rotate and Scale",
          "content": "CSS3 Transforms allow you to modify the coordinate space of a visual formatting model. This means you can move, rotate, scale, and skew elements without affecting the normal document flow. They are particularly useful for creating dynamic visual effects, micro-interactions, and animations. Transforms are highly performant as they are often processed by the GPU.\n\n## The `transform` Property\nThe `transform` property applies 2D or 3D transformations to an element. It takes one or more transform functions as its value. Multiple transform functions can be chained together in a single `transform` property value, applied sequentially from left to right.\n\n## `rotate()` Function\nThe `rotate()` function rotates an element around its origin (by default, the center of the element, `transform-origin: center`). The rotation angle is specified in degrees (`deg`), grads (`grad`), radians (`rad`), or turns (`turn`).\n*   Positive values (e.g., `rotate(90deg)`) rotate clockwise.\n*   Negative values (e.g., `rotate(-90deg)`) rotate counter-clockwise.\n\n## `scale()` Function\nThe `scale()` function increases or decreases the size of an element. It takes one or two values:\n*   `scale(s)`: Scales the element uniformly (both X and Y axes) by a factor of `s`. For example, `scale(0.5)` makes it half size, `scale(2)` makes it double size.\n*   `scale(sx, sy)`: Scales the element by `sx` along the X-axis and `sy` along the Y-axis independently. Values greater than 1 increase size, values between 0 and 1 decrease size.",
          "examples": [
            {
              "id": "example_transform_rotate",
              "title": "Rotating an Element",
              "code": ".rotate-clockwise {\n  transform: rotate(180deg); /* Rotates 180 degrees clockwise */\n  transition: transform 0.5s ease-in-out;\n}\n\n.rotate-counter-clockwise {\n  transform: rotate(-90deg); /* Rotates 90 degrees counter-clockwise */\n  transition: transform 0.5s ease-in-out;\n}\n\n/* Example of hover effect */\n.rotate-on-hover {\n  background-color: lightblue;\n  width: 100px;\n  height: 100px;\n  transition: transform 0.5s ease-in-out;\n}\n.rotate-on-hover:hover {\n  transform: rotate(360deg);\n}\n\n/* HTML Structure:\n<div class=\"rotate-on-hover\">Rotate Me</div> */",
              "explanation": "This example demonstrates the `rotate()` transform function. `.rotate-clockwise` rotates the element 180 degrees clockwise, while `.rotate-counter-clockwise` rotates it 90 degrees counter-clockwise. The `transition` property is added to make the rotation smooth when applied dynamically (e.g., on hover or via JavaScript). The `rotate-on-hover` class shows a practical application.",
              "language": "css"
            },
            {
              "id": "example_transform_scale",
              "title": "Scaling an Element",
              "code": ".scale-down {\n  transform: scale(0.3); /* Scales down to 30% of original size */\n  transition: transform 0.5s ease-in-out;\n}\n\n.scale-up {\n  transform: scale(1.3); /* Scales up by 30% (130% of original size) */\n  transition: transform 0.5s ease-in-out;\n}\n\n.scale-xy {\n  transform: scale(2, 0.5); /* Scales X by 200%, Y by 50% */\n  transition: transform 0.5s ease-in-out;\n}\n\n/* Example of hover effect */\n.scale-on-hover {\n  background-color: lightgreen;\n  width: 100px;\n  height: 100px;\n  transition: transform 0.3s ease;\n}\n.scale-on-hover:hover {\n  transform: scale(1.1);\n}\n\n/* HTML Structure:\n<div class=\"scale-on-hover\">Scale Me</div> */",
              "explanation": "This example illustrates the `scale()` transform function. `.scale-down` reduces the element to 30% of its original size, and `.scale-up` increases it to 130%. The `scale-xy` class demonstrates scaling independently along the X and Y axes. Transitions are included for smooth visual changes. The `scale-on-hover` class shows a common use case.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_transforms_mcq_1",
            "question_transforms_code_1",
            "question_transforms_flashcard_1"
          ],
          "relatedTasks": [
            "task_interactive_image_gallery"
          ],
          "tags": [
            "CSS3",
            "Transforms",
            "Animation",
            "UI/UX",
            "Visual Effects",
            "2D Transforms"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "Basic CSS Properties",
            "Box Model"
          ],
          "complexity": 4,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Interactive UI",
            "Micro-interactions"
          ]
        },
        {
          "id": "theory_css_transitions",
          "title": "CSS Transitions for Smooth Animations",
          "content": "CSS Transitions provide a way to control animation speed when changing CSS properties from one value to another. Instead of an immediate change, the change happens over a specified duration, creating a smooth, animated effect. This is fundamental for modern web interfaces to enhance user experience by making interactions feel more fluid and less jarring.\n\n## The `transition` Shorthand Property\nThe `transition` shorthand property is the most common way to define a transition. It combines up to four individual transition properties in a single declaration, in a specific order:\n\n1.  **`transition-property`**: The name of the CSS property to which the transition effect should be applied (e.g., `background-color`, `opacity`, `transform`). You can specify `all` to transition all animatable properties, but it's generally better for performance and control to list specific properties.\n2.  **`transition-duration`**: The length of time a transition takes to complete. It's specified in seconds (`s`) or milliseconds (`ms`). For example, `0.5s` or `500ms`.\n3.  **`transition-timing-function`**: Describes how intermediate values are calculated, giving the transition an acceleration curve. This dictates the speed of the animation over its duration. Common values include:\n    *   `ease` (default): Slow start, then fast, then slow end.\n    *   `linear`: Constant speed.\n    *   `ease-in`: Slow start, then accelerates.\n    *   `ease-out`: Fast start, then decelerates.\n    *   `ease-in-out`: Slow start and end, fast in the middle.\n    *   `cubic-bezier(n,n,n,n)`: For custom timing curves.\n4.  **`transition-delay`**: Specifies an optional delay before the transition starts. Also specified in seconds (`s`) or milliseconds (`ms`).\n\n## Vendor Prefixes for Cross-Browser Compatibility\nIn the past, and sometimes still for older or niche browsers, it was necessary to include vendor prefixes for experimental or non-standardized CSS properties. These prefixes ensure that a property works across different browser engines before it becomes fully standardized. While most modern browsers support `transition` without prefixes, it's good practice to be aware of them, especially in enterprise or legacy projects. Common prefixes include:\n*   `-webkit-` (Chrome, Safari, newer Opera, Android Browser)\n*   `-moz-` (Firefox)\n*   `-o-` (older Opera)\n*   `-ms-` (Internet Explorer)",
          "examples": [
            {
              "id": "example_transition_shorthand",
              "title": "Basic Transition with Shorthand",
              "code": ".smooth-change {\n  background-color: blue;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  transition: all 0.5s ease-in-out; /* property, duration, timing-function, (delay is optional) */\n}\n\n.smooth-change:hover {\n  background-color: red;\n  color: black;\n  transform: scale(1.1);\n}\n\n/* HTML Structure:\n<button class=\"smooth-change\">Hover Me</button> */",
              "explanation": "This example shows the `transition` shorthand property. When the `.smooth-change` element is hovered, its `background-color`, `color`, and `transform` properties will change smoothly over 0.5 seconds, using an `ease-in-out` timing function. `all` as the `transition-property` means all animatable properties will transition.",
              "language": "css"
            },
            {
              "id": "example_transition_vendor_prefixes",
              "title": "Transition with Vendor Prefixes",
              "code": ".cross-browser-transition {\n  background-color: initial;\n  width: 100px;\n  height: 100px;\n  -webkit-transition: background-color 2s ease-in 1s; /* Safari 3.1+, Chrome 1+ */\n  -o-transition: background-color 2s ease-in 1s; /* Opera 10.5+ */\n  -moz-transition: background-color 2s ease-in 1s; /* Firefox 4.0+ */\n  transition: background-color 2s ease-in 1s; /* Standard syntax */\n}\n\n.cross-browser-transition:hover {\n  background-color: purple;\n}\n\n/* HTML Structure:\n<div class=\"cross-browser-transition\">Hover to Animate</div> */",
              "explanation": "This example demonstrates the use of vendor prefixes for the `transition` property. Although modern browsers often support the standard `transition` property directly, including prefixes can ensure broader compatibility, especially with older browser versions. The transition will apply to `background-color` over 2 seconds, with an `ease-in` timing function, after a 1-second delay.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_transitions_mcq_1",
            "question_transitions_open_1",
            "question_transitions_flashcard_1"
          ],
          "relatedTasks": [
            "task_interactive_image_gallery",
            "task_custom_tooltip_with_triangle"
          ],
          "tags": [
            "CSS3",
            "Transitions",
            "Animation",
            "Performance",
            "UI/UX",
            "Browser Compatibility",
            "Vendor Prefixes"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "Basic CSS Properties",
            "Pseudo-classes (:hover)"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "Interactive UI",
            "Smooth User Experience"
          ]
        },
        {
          "id": "theory_css_triangle_technique",
          "title": "CSS Triangle Technique using Borders",
          "content": "The CSS triangle technique is a clever trick to create triangular shapes using only CSS, without images or SVG. It leverages the behavior of borders on an element with zero width and height. When an element has no content area, its borders meet at a single point, and by making some borders transparent, you can isolate a single colored triangle.\n\n## How it Works\n1.  **Zero Dimensions**: Set `width: 0` and `height: 0` for the element. This is fundamental as it collapses the content area of the element, forcing the borders to meet at a central point rather than running along edges.\n2.  **Borders Meeting**: When an element has zero dimensions and four borders with thickness, these borders converge at the center, effectively forming four triangular segments (like slices of a pie).\n3.  **Transparent Borders**: To create a single triangle pointing in a specific direction, you make the borders *perpendicular* to the desired direction transparent, and the border *in* the desired direction solid. The solid border will form the base of your triangle.\n    *   **Down Arrow**: `border-top` is colored, `border-left` and `border-right` are transparent.\n    *   **Up Arrow**: `border-bottom` is colored, `border-left` and `border-right` are transparent.\n    *   **Right Arrow**: `border-left` is colored, `border-top` and `border-bottom` are transparent.\n    *   **Left Arrow**: `border-right` is colored, `border-top` and `border-bottom` are transparent.\n\nThe `border-width` of the transparent borders and the colored border determines the size and shape (e.g., isosceles, equilateral) of the resulting triangle. By varying these widths, you can control the aspect ratio of the triangle.",
          "examples": [
            {
              "id": "example_triangle_down",
              "title": "Triangle Pointing Down",
              "code": ".triangle-down {\n  width: 0;\n  height: 0;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n  border-top: 20px solid #333; /* This border forms the triangle base */\n}",
              "explanation": "This example creates a triangle pointing downwards. The `width` and `height` are set to `0`. `border-left` and `border-right` are transparent, effectively making them invisible, but they still occupy space. `border-top` has a solid color, which forms the horizontal base of the triangle. The transparent left and right borders, meeting at a point below the base, form the two slanting sides.",
              "language": "css"
            },
            {
              "id": "example_triangle_up",
              "title": "Triangle Pointing Up",
              "code": ".triangle-up {\n  width: 0;\n  height: 0;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n  border-bottom: 20px solid #333; /* This border forms the triangle base */\n}",
              "explanation": "Similar to the 'down' triangle, this one uses `border-bottom` for the visible base and transparent `border-left` and `border-right` to create the upward-pointing shape.",
              "language": "css"
            },
            {
              "id": "example_triangle_right",
              "title": "Triangle Pointing Right",
              "code": ".triangle-right {\n  width: 0;\n  height: 0;\n  border-top: 20px solid transparent;\n  border-bottom: 20px solid transparent;\n  border-left: 20px solid #333; /* This border forms the triangle base */\n}",
              "explanation": "For a right-pointing triangle, the `border-left` is colored, acting as the vertical base. The `border-top` and `border-bottom` are transparent, forming the slanted sides that meet on the right.",
              "language": "css"
            },
            {
              "id": "example_triangle_left",
              "title": "Triangle Pointing Left",
              "code": ".triangle-left {\n  width: 0;\n  height: 0;\n  border-top: 20px solid transparent;\n  border-bottom: 20px solid transparent;\n  border-right: 20px solid #333; /* This border forms the triangle base */\n}",
              "explanation": "This example, completing the pattern, uses `border-right` as the colored vertical base and transparent `border-top` and `border-bottom` to create a left-pointing triangle.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_triangle_mcq_1",
            "question_triangle_open_1",
            "question_triangle_flashcard_1"
          ],
          "relatedTasks": [
            "task_custom_tooltip_with_triangle"
          ],
          "tags": [
            "CSS",
            "Advanced CSS",
            "UI Components",
            "Styling",
            "Borders",
            "Shapes"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "CSS Box Model",
            "Border Property"
          ],
          "complexity": 6,
          "interviewRelevance": 6,
          "learningPath": "intermediate",
          "requiredFor": [
            "Custom UI Elements",
            "Tooltip Design"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_centering_mcq_1",
          "topic": "Centering Elements in CSS",
          "level": "easy",
          "type": "mcq",
          "question": "Which CSS property combination is a concise shorthand for centering an item horizontally and vertically within a CSS Grid container?",
          "answer": "`place-items: center;`",
          "options": [
            "`align-items: center; justify-content: center;`",
            "`place-content: center;`",
            "`place-items: center;`",
            "`display: grid; center-items: true;`"
          ],
          "analysisPoints": [
            "Tests knowledge of CSS Grid's centering properties.",
            "Distinguishes between `place-items` (for items) and `place-content` (for grid tracks/lines)."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Centering",
            "place-items",
            "align-items",
            "justify-items"
          ],
          "evaluationCriteria": [
            "Correct identification of Grid centering shorthand.",
            "Understanding of specific CSS properties for centering."
          ],
          "example": "The `place-items` property is a shorthand for both `align-items` and `justify-items`. When set to `center`, it centers grid items along both the block (vertical) and inline (horizontal) axes simultaneously. `align-items: center; justify-content: center;` would work but is not a shorthand specific to Grid's combined centering of *items*. `place-content` is used for aligning the grid tracks themselves, not individual items.",
          "tags": [
            "CSS",
            "Grid",
            "Centering",
            "Shorthand"
          ],
          "prerequisites": [
            "CSS Grid Basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_centering_mcq_2",
          "topic": "Centering Elements in CSS",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following CSS for centering a `.child` element within its `.parent`:\n\n```css\n.parent {\n  position: relative;\n  width: 300px;\n  height: 200px;\n}\n.child {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  /* MISSING CSS HERE */\n  width: 100px;\n  height: 50px;\n}\n```\n\nWhich CSS property should replace `/* MISSING CSS HERE */` to perfectly center the `.child` element, regardless of its `width` and `height`?",
          "answer": "`transform: translate(-50%, -50%);`",
          "options": [
            "`margin-left: -50px; margin-top: -25px;`",
            "`transform: translateX(-50%) translateY(-50%);`",
            "`transform: translate(-50%, -50%);`",
            "`align-self: center; justify-self: center;`"
          ],
          "analysisPoints": [
            "Tests understanding of the absolute positioning + transform centering method.",
            "Evaluates knowledge of the `translate()` function and its use for precise centering relative to the element's own size.",
            "Distinguishes between flexible and fixed offset calculations."
          ],
          "keyConcepts": [
            "Absolute Positioning",
            "CSS Transforms",
            "Centering",
            "translate()",
            "Box Model"
          ],
          "evaluationCriteria": [
            "Ability to apply complex CSS centering techniques.",
            "Knowledge of `transform` property syntax and behavior.",
            "Understanding of coordinate systems in CSS."
          ],
          "example": "The `top: 50%;` and `left: 50%;` position the top-left corner of the child element at the parent's center. To shift the element so its own center aligns with this point, you need to move it back by half its own width and half its own height. `transform: translate(-50%, -50%);` does exactly this, where the percentages refer to the element's *own* dimensions, making it robust for varying child sizes. `transform: translateX(-50%) translateY(-50%);` is functionally equivalent but less concise. `margin-left: -50px; margin-top: -25px;` would only work if the child's dimensions are fixed and known (100px width, 50px height), making it inflexible.",
          "tags": [
            "CSS",
            "Positioning",
            "Transforms",
            "Centering",
            "Absolute"
          ],
          "prerequisites": [
            "CSS Box Model",
            "Absolute Positioning"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_centering_open_1",
          "topic": "Centering Elements in CSS",
          "level": "hard",
          "type": "open",
          "question": "Compare and contrast the CSS Flexbox and CSS Grid methods for centering an arbitrary block-level element. Discuss their respective strengths, weaknesses, and ideal use cases for centering. When would you choose one over the other for a complex layout requiring centering?",
          "answer": "CSS Flexbox and CSS Grid are both powerful layout modules that provide excellent solutions for centering elements, but they operate on different principles and are suited for different scenarios.\n\n**Flexbox (`display: flex`) for Centering:**\n*   **How it works**: For a single item, apply `display: flex`, `justify-content: center` (main axis), and `align-items: center` (cross axis) to the parent. The child itself remains a block-level element within the flex flow.\n*   **Strengths**: Extremely simple and effective for one-dimensional alignment (either row or column). Great for individual components or distributing space along a single axis. Very flexible with content that might grow or shrink.\n*   **Weaknesses**: Can become cumbersome for complex two-dimensional layouts where items need to align across both rows and columns simultaneously. Nesting flex containers might be necessary for such cases, which can add complexity.\n*   **Ideal Use Cases**: Centering a modal dialog, aligning navigation items, creating simple button groups, or any scenario where you need to distribute or align items along a single axis.\n\n**CSS Grid (`display: grid`) for Centering:**\n*   **How it works**: For a single item, apply `display: grid` and `place-items: center` to the parent. The child element occupies a single grid cell and is centered within it. `place-items` is a shorthand for `align-items` and `justify-items`.\n*   **Strengths**: Provides native two-dimensional alignment. The `place-items` shorthand is incredibly concise. It's built for comprehensive layout design and can handle complex grid structures where items span multiple rows/columns.\n*   **Weaknesses**: For simple, single-axis alignment, it might be overkill compared to Flexbox. Its full power is realized in grid-based layouts, and for just centering one item, it might involve concepts (like grid tracks) not strictly necessary.\n*   **Ideal Use Cases**: Centering content within a specific grid cell in a larger layout, overall page layout where different sections need precise alignment, or when components naturally fit into a grid structure.\n\n**When to choose one over the other for complex layouts:**\n*   **Choose Flexbox** when your primary need is **one-dimensional alignment** (either row or column) and distribution of space. If you're building a component (like a header, footer, or card) where items flow primarily along one axis, Flexbox is often the more intuitive and performant choice. It's excellent for dynamic content where items might wrap or resize.\n*   **Choose CSS Grid** when you're defining a **two-dimensional page layout** or a complex component with explicit row and column structures. If you need items to align precisely across both horizontal and vertical axes simultaneously, or if you have overlapping elements within a grid, Grid is the more powerful and semantically appropriate tool. For instance, centering a 'hero' content block that lives within a larger, fixed grid structure on a page.",
          "analysisPoints": [
            "Comprehensively compares two modern layout methods.",
            "Discusses technical implementation details for each.",
            "Identifies practical strengths and weaknesses.",
            "Provides clear use-case distinctions.",
            "Demonstrates understanding of when to apply each technology."
          ],
          "keyConcepts": [
            "CSS Flexbox",
            "CSS Grid",
            "Centering",
            "1D vs 2D Layout",
            "justify-content",
            "align-items",
            "place-items",
            "Layout Strategy"
          ],
          "evaluationCriteria": [
            "Depth of knowledge regarding Flexbox and Grid.",
            "Ability to articulate comparative advantages.",
            "Practical application understanding.",
            "Clarity and structure of explanation."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Flexbox",
            "Grid",
            "Centering",
            "Layout",
            "Comparison",
            "Advanced CSS"
          ],
          "prerequisites": [
            "CSS Flexbox",
            "CSS Grid"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_centering_flashcard_1",
          "topic": "Centering Elements in CSS",
          "level": "easy",
          "type": "flashcard",
          "question": "What CSS properties are typically applied to a parent container to center a child element both horizontally and vertically using Flexbox?",
          "answer": "`display: flex; justify-content: center; align-items: center;` (and the parent container needs a defined height for vertical centering to be visible).",
          "analysisPoints": [
            "Tests recall of basic Flexbox centering properties.",
            "Highlights the importance of parent height for vertical centering."
          ],
          "keyConcepts": [
            "Flexbox",
            "justify-content",
            "align-items",
            "vertical centering",
            "horizontal centering"
          ],
          "evaluationCriteria": [
            "Direct recall of key Flexbox properties."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Flexbox",
            "Centering",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Flexbox Basics"
          ],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_transforms_mcq_1",
          "topic": "CSS3 Transforms",
          "level": "easy",
          "type": "mcq",
          "question": "What does `transform: scale(0.5);` do to an element?",
          "answer": "It shrinks the element to 50% of its original size, both horizontally and vertically.",
          "options": [
            "It moves the element 0.5 pixels to the right.",
            "It rotates the element by 0.5 degrees.",
            "It makes the element 50% transparent.",
            "It shrinks the element to 50% of its original size, both horizontally and vertically."
          ],
          "analysisPoints": [
            "Tests basic understanding of the `scale()` transform function.",
            "Distinguishes `scale` from other transform functions or properties like `opacity`."
          ],
          "keyConcepts": [
            "CSS Transforms",
            "scale()",
            "Element Size"
          ],
          "evaluationCriteria": [
            "Correct interpretation of `scale()` function value."
          ],
          "example": "The `scale()` transform function modifies the size of an element. A value less than 1 (like 0.5) reduces the size, while a value greater than 1 increases it. If only one value is provided, it applies to both the X and Y axes (uniform scaling).",
          "tags": [
            "CSS3",
            "Transforms",
            "Scale",
            "Animation"
          ],
          "prerequisites": [
            "Basic CSS Properties"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_transforms_code_1",
          "topic": "CSS3 Transforms",
          "level": "medium",
          "type": "code",
          "question": "Write the CSS to make a `.box` element rotate 90 degrees clockwise and simultaneously scale up by 20% when hovered over. The transformation should be smooth and take 0.3 seconds.",
          "answer": "```css\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: steelblue;\n  transition: transform 0.3s ease-in-out;\n}\n\n.box:hover {\n  transform: rotate(90deg) scale(1.2);\n}\n```",
          "analysisPoints": [
            "Tests ability to combine multiple transform functions.",
            "Evaluates understanding of `transition` property for smooth effects.",
            "Checks use of `:hover` pseudo-class."
          ],
          "keyConcepts": [
            "CSS Transforms",
            "rotate()",
            "scale()",
            "CSS Transitions",
            ":hover"
          ],
          "evaluationCriteria": [
            "Correct syntax for `transform` with multiple functions.",
            "Proper application of `transition` for animation.",
            "Effective use of pseudo-classes."
          ],
          "example": "The `.box` element is given a `transition` property to ensure smooth animation for its `transform` property. On `:hover`, `transform: rotate(90deg) scale(1.2)` is applied. Multiple transform functions can be chained in a single `transform` property value, separated by spaces. The `transition: transform 0.3s ease-in-out;` ensures the effect takes 0.3 seconds and has a smooth acceleration/deceleration.",
          "tags": [
            "CSS3",
            "Transforms",
            "Transitions",
            "Animation",
            "Code Challenge"
          ],
          "prerequisites": [
            "CSS Transitions",
            "CSS Transforms"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_transforms_flashcard_1",
          "topic": "CSS3 Transforms",
          "level": "easy",
          "type": "flashcard",
          "question": "What CSS property is used to apply 2D or 3D transformations like rotating or scaling an element?",
          "answer": "`transform`",
          "analysisPoints": [
            "Tests direct recall of the core CSS transform property."
          ],
          "keyConcepts": [
            "CSS Transforms",
            "rotate",
            "scale"
          ],
          "evaluationCriteria": [
            "Correct identification of the transform property."
          ],
          "example": null,
          "tags": [
            "CSS3",
            "Transforms",
            "Flashcard"
          ],
          "prerequisites": [
            "Basic CSS"
          ],
          "complexity": 2,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_transitions_mcq_1",
          "topic": "CSS Transitions",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following `transition` property declarations will cause a background color change to animate over 1 second, starting after a 0.5 second delay, with a slow start and end?",
          "answer": "`transition: background-color 1s ease-in-out 0.5s;`",
          "options": [
            "`transition: background-color 0.5s 1s ease-in-out;`",
            "`transition: background-color 1s ease-in-out 0.5s;`",
            "`transition-property: background-color; transition-duration: 1s; transition-delay: 0.5s; transition-timing-function: ease;`",
            "`transition: all 1s ease-in-out 0.5s;`"
          ],
          "analysisPoints": [
            "Tests knowledge of the `transition` shorthand order of values (property, duration, timing-function, delay).",
            "Distinguishes correct timing function for slow start/end.",
            "Identifies correct syntax for delay."
          ],
          "keyConcepts": [
            "CSS Transitions",
            "transition-property",
            "transition-duration",
            "transition-timing-function",
            "transition-delay",
            "shorthand"
          ],
          "evaluationCriteria": [
            "Correct understanding of transition shorthand syntax.",
            "Ability to match desired animation behavior to timing function."
          ],
          "example": "The correct order for the `transition` shorthand property is `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`. `ease-in-out` provides a slow start and slow end. Option A has the duration and delay swapped. Option C uses individual properties, which is syntactically correct but does not use the shorthand form as implied by the question. Option D transitions `all` properties, not specifically `background-color`.",
          "tags": [
            "CSS3",
            "Transitions",
            "Animation",
            "Shorthand"
          ],
          "prerequisites": [
            "Basic CSS Properties"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_transitions_open_1",
          "topic": "CSS Transitions",
          "level": "hard",
          "type": "open",
          "question": "Explain the purpose of `transition-timing-function` in CSS transitions. Name at least three common values and describe the animation curve they produce. How does choosing the right timing function impact user experience?",
          "answer": "The `transition-timing-function` property defines how the intermediate values of a CSS property are calculated during a transition. In simpler terms, it controls the acceleration curve of the animation, determining its speed at different points between its start and end states.\n\n**Purpose:**\nWithout a timing function, transitions would typically run at a constant speed (`linear`), which often feels unnatural or abrupt to users. The `transition-timing-function` allows designers and developers to create more fluid, dynamic, and realistic animations by varying the speed of the transition over its duration.\n\n**Common Values and their Curves:**\n1.  **`ease` (Default):** This function specifies a transition with a slow start, then a fast middle, and a slow end. It's often the default because it generally provides a natural and pleasant feel, mimicking real-world physics where objects accelerate and decelerate.\n    *   *Curve*: Starts flat, gets steeper, then flattens out again.\n2.  **`linear`:** This function specifies a transition with the same speed from start to end. The animation progresses at a constant rate.\n    *   *Curve*: A straight line.\n3.  **`ease-in`:** This function specifies a transition with a slow start, accelerating towards the end. It's like an object slowly getting up to speed.\n    *   *Curve*: Starts flat and gets progressively steeper.\n4.  **`ease-out`:** This function specifies a transition with a fast start, decelerating towards the end. It's like an object quickly reaching its destination and then gently coming to a stop.\n    *   *Curve*: Starts steep and progressively flattens out.\n5.  **`ease-in-out`:** This function is similar to `ease`, but often more pronounced. It specifies a transition with a slow start, speeds up, and then ends slowly. It's symmetrical.\n    *   *Curve*: S-shaped curve, flat at both ends and steep in the middle.\n\n**Impact on User Experience:**\nChoosing the right timing function significantly impacts user experience:\n*   **Perceived Performance:** Even if two animations have the same duration, one with a well-chosen timing function (e.g., `ease-out` for an element appearing) can feel faster and more responsive than a `linear` one, as the user immediately sees progress.\n*   **Naturalness and Realism:** Timing functions can mimic physical properties (like gravity or friction), making interactions feel more intuitive and natural, rather than robotic.\n*   **Guiding Attention:** By controlling the speed, you can draw a user's eye to specific elements or transitions. A quick start can grab attention, while a slow end can allow users to process the final state.\n*   **Brand Personality:** The overall 'feel' of an application's animations can contribute to its brand identity. Snappy `ease-out` animations might convey efficiency, while gentler `ease` curves might convey elegance.\n*   **Avoidance of Disorientation:** Poorly chosen timing functions (e.g., very long `linear` animations for small changes) can feel jarring or make the UI feel sluggish, leading to frustration and disorientation for the user.",
          "analysisPoints": [
            "Detailed explanation of `transition-timing-function`'s role.",
            "Accurate description of common values and their visual effects.",
            "Thorough discussion of user experience impact.",
            "Demonstrates advanced understanding of CSS animation principles."
          ],
          "keyConcepts": [
            "CSS Transitions",
            "transition-timing-function",
            "Animation Curves",
            "User Experience (UX)",
            "Ease",
            "Linear",
            "Ease-in",
            "Ease-out",
            "Ease-in-out"
          ],
          "evaluationCriteria": [
            "Comprehensive and accurate definition.",
            "Illustrative examples of timing functions.",
            "Insightful analysis of UX implications.",
            "Structured and clear explanation."
          ],
          "example": null,
          "tags": [
            "CSS3",
            "Transitions",
            "Animation",
            "UX",
            "Performance",
            "Theory"
          ],
          "prerequisites": [
            "CSS Transitions"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_transitions_flashcard_1",
          "topic": "CSS Transitions",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of vendor prefixes (e.g., `-webkit-`, `-moz-`) in CSS, especially for properties like `transition`?",
          "answer": "Vendor prefixes ensure compatibility with experimental or non-standardized CSS features across different browser engines, allowing browsers to implement new features before they are fully standardized by the W3C. This helps in early adoption of new features while maintaining cross-browser support.",
          "analysisPoints": [
            "Tests recall of vendor prefix purpose.",
            "Emphasizes cross-browser compatibility and standardization process."
          ],
          "keyConcepts": [
            "Vendor Prefixes",
            "Cross-Browser Compatibility",
            "CSS Standards",
            "Experimental Features"
          ],
          "evaluationCriteria": [
            "Accurate definition of vendor prefix utility."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Transitions",
            "Browser Compatibility",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_triangle_mcq_1",
          "topic": "CSS Triangle Technique",
          "level": "medium",
          "type": "mcq",
          "question": "To create a CSS triangle pointing to the right, which borders should be transparent and which one should have a color, assuming the element has `width: 0; height: 0;`?",
          "answer": "`border-top` and `border-bottom` should be transparent; `border-left` should have a color.",
          "options": [
            "`border-left` and `border-right` transparent; `border-top` colored.",
            "`border-top` and `border-bottom` transparent; `border-left` colored.",
            "`border-left` and `border-bottom` transparent; `border-right` colored.",
            "`border-right` and `border-top` transparent; `border-bottom` colored."
          ],
          "analysisPoints": [
            "Tests understanding of the CSS triangle principle.",
            "Evaluates the ability to apply the technique for a specific directional shape."
          ],
          "keyConcepts": [
            "CSS Triangle Technique",
            "Borders",
            "Transparent Borders",
            "Directional Triangles"
          ],
          "evaluationCriteria": [
            "Correct identification of border roles for specific triangle direction."
          ],
          "example": "To make a triangle point right, the 'base' of the triangle must be on the left side. This is achieved by giving `border-left` a color and width. The `border-top` and `border-bottom` then need to be transparent. These transparent borders extend from the top-left and bottom-left corners respectively, meeting at a point on the right, thus forming the slanted sides of the right-pointing triangle.",
          "tags": [
            "CSS",
            "Triangle",
            "Styling",
            "Shapes"
          ],
          "prerequisites": [
            "CSS Borders",
            "CSS Box Model"
          ],
          "complexity": 5,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_triangle_open_1",
          "topic": "CSS Triangle Technique",
          "level": "hard",
          "type": "open",
          "question": "Explain the fundamental principle behind creating CSS triangles using borders. Why is it necessary to set `width: 0` and `height: 0` for the element, and how do transparent borders contribute to forming the triangle shape?",
          "answer": "The fundamental principle behind creating CSS triangles using borders lies in how an element's borders interact when the element's content box has zero dimensions. When an element has `width: 0` and `height: 0`, its content area collapses. The borders, however, still maintain their specified widths and meet at the center of the element.\n\nImagine an element with `width: 0` and `height: 0` and all four borders (top, right, bottom, left) having a solid color and a certain width. At the element's center, where the four borders converge, they effectively divide the space into four triangular sections. Each border segment visually forms the base of one of these triangles, and the transparent borders form the slanting sides that meet at the central point.\n\n**Why `width: 0` and `height: 0` are necessary:**\nThese properties are crucial because they collapse the content box of the element. If the element had `width` or `height` greater than zero, the borders would run along the edges of the content box, forming rectangular bands rather than meeting at a sharp point. By collapsing the content box, the internal corners of the borders meet precisely at the element's central point, allowing the triangular shapes to form a crisp point.\n\n**How transparent borders contribute:**\nWhen all four borders are colored, they form a diamond shape composed of four triangles. To isolate a single triangle pointing in a specific direction, you make the borders *perpendicular* to the desired direction `transparent`. The `border-color` property can be set to `transparent` for these borders. The border that you want to form the 'base' of your triangle is given a solid color and a width.\n\nFor example, to create a down-pointing triangle:\n*   `width: 0; height: 0;` (collapses the content area)\n*   `border-left: 20px solid transparent;`\n*   `border-right: 20px solid transparent;`\n*   `border-top: 20px solid #333;` (the visible base of the triangle)\n\nIn this scenario, `border-top` provides the horizontal base. The `border-left` and `border-right`, though transparent, still occupy space. Their transparent sections extend from the corners of the (zero-dimension) content box down to the central meeting point, forming the two slanted sides of the visible triangle. The transparent color simply makes these sides invisible, leaving only the colored `border-top` and the implied triangular shape formed by the meeting transparent borders.",
          "analysisPoints": [
            "Provides a comprehensive explanation of the underlying mechanism.",
            "Clearly articulates the role of `width: 0` and `height: 0`.",
            "Explains how transparent borders facilitate the shape.",
            "Uses a concrete example to illustrate the concept."
          ],
          "keyConcepts": [
            "CSS Triangle Technique",
            "Box Model",
            "Borders",
            "Transparent Colors",
            "Geometric Shapes in CSS"
          ],
          "evaluationCriteria": [
            "Depth of theoretical understanding.",
            "Ability to explain complex CSS behavior clearly.",
            "Logical flow and accuracy of explanation."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Advanced CSS",
            "Shapes",
            "Borders",
            "Theory"
          ],
          "prerequisites": [
            "CSS Box Model",
            "Border Property"
          ],
          "complexity": 8,
          "interviewFrequency": 6,
          "learningPath": "advanced"
        },
        {
          "id": "question_triangle_flashcard_1",
          "topic": "CSS Triangle Technique",
          "level": "easy",
          "type": "flashcard",
          "question": "What are the essential `width` and `height` values for an element when using the CSS border technique to create a triangle?",
          "answer": "`width: 0; height: 0;`",
          "analysisPoints": [
            "Tests recall of fundamental CSS triangle requirements."
          ],
          "keyConcepts": [
            "CSS Triangle Technique",
            "Dimensions",
            "Box Model"
          ],
          "evaluationCriteria": [
            "Direct recall of key property values."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Triangle",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Box Model"
          ],
          "complexity": 2,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        }
      ],
      "tasks": [
        {
          "id": "task_responsive_centered_hero",
          "title": "Build a Responsive Centered Hero Section",
          "description": "\nImplement a hero section that features a main heading and a call-to-action button, both centered vertically and horizontally within the section. The hero section should span the full viewport height and adapt responsively to different screen sizes. Use either Flexbox or CSS Grid for centering, demonstrating best practices.\n\n**Requirements:**\n1.  The hero section should take up 100% of the viewport height (`vh`).\n2.  The content (heading + button) inside the hero section must be perfectly centered both horizontally and vertically.\n3.  Ensure the layout remains centered and functional across various screen widths (responsive).\n4.  Add some basic styling (background color, text color) for visual appeal.\n5.  The content should stack vertically (heading above button) and be centered relative to each other.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Centered Hero Section</title>\n    <style>\n        body, html {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        .hero-section {\n            /* Your CSS for centering and full height */\n            background-color: #282c34;\n            color: white;\n            text-align: center; /* For content inside flex/grid item */\n        }\n\n        .hero-content h1 {\n            font-size: 3em;\n            margin-bottom: 20px;\n        }\n\n        .hero-content button {\n            padding: 15px 30px;\n            font-size: 1.2em;\n            background-color: #61dafb;\n            color: #282c34;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <section class=\"hero-section\">\n        <div class=\"hero-content\">\n            <h1>Welcome to Our Awesome Site</h1>\n            <button>Learn More</button>\n        </div>\n    </section>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Centered Hero Section</title>\n    <style>\n        body, html {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        .hero-section {\n            display: flex; /* Using Flexbox for centering */\n            justify-content: center;\n            align-items: center;\n            height: 100vh; /* 100% of viewport height */\n            background-color: #282c34;\n            color: white;\n        }\n\n        .hero-content {\n            text-align: center; /* Ensures h1 and button are horizontally centered relative to each other within this div */\n            display: flex; /* Make hero-content a flex container itself */\n            flex-direction: column; /* Stack h1 and button vertically */\n            align-items: center; /* Center items within hero-content */\n            padding: 20px;\n            max-width: 90%; /* Prevent content from stretching too wide on large screens */\n            box-sizing: border-box;\n        }\n\n        .hero-content h1 {\n            font-size: 3em;\n            margin-bottom: 20px;\n            /* For smaller screens, use a fluid font size */\n            font-size: clamp(2em, 5vw, 3em);\n        }\n\n        .hero-content button {\n            padding: 15px 30px;\n            font-size: 1.2em;\n            background-color: #61dafb;\n            color: #282c34;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            transition: background-color 0.3s ease, transform 0.2s ease;\n        }\n\n        .hero-content button:hover {\n            background-color: #a0eaff;\n            transform: translateY(-2px);\n        }\n\n        /* Optional: Media queries for finer control */\n        @media (max-width: 768px) {\n            .hero-content h1 {\n                font-size: 2.5em;\n            }\n            .hero-content button {\n                font-size: 1em;\n                padding: 12px 25px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <section class=\"hero-section\">\n        <div class=\"hero-content\">\n            <h1>Welcome to Our Awesome Site</h1>\n            <button>Learn More</button>\n        </div>\n    </section>\n</body>\n</html>\n",
          "testCases": [
            "Verify `hero-section` occupies 100% viewport height by checking its dimensions in developer tools.",
            "Check if `hero-content` is perfectly centered horizontally and vertically within the `hero-section` using browser developer tools (e.g., by checking its computed position).",
            "Resize the browser window to small mobile sizes (e.g., 320px width), medium tablet sizes (e.g., 768px width), and large desktop sizes to ensure responsiveness and continued centering.",
            "Inspect the CSS to confirm usage of Flexbox or Grid properties for centering (e.g., `display: flex`, `justify-content`, `align-items`).",
            "Confirm the heading and button are stacked vertically within `hero-content` and centered relative to each other (e.g., `flex-direction: column`, `align-items: center` on `hero-content`)."
          ],
          "hints": [
            "Remember that `height: 100vh;` is crucial for vertical centering within the viewport when using Flexbox or Grid.",
            "Consider making `.hero-section` a flex container. What `justify-content` and `align-items` values would center its direct child (`.hero-content`)?",
            "If you choose CSS Grid, the `place-items` shorthand is a very efficient way to center its direct children.",
            "For content within `.hero-content` (heading and button) to stack vertically and be centered relative to each other, you might need to make `.hero-content` itself a flex container with `flex-direction: column`."
          ],
          "tags": [
            "CSS",
            "Flexbox",
            "Grid",
            "Centering",
            "Responsive Design",
            "Layout",
            "UI/UX"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "CSS Flexbox",
            "CSS Grid",
            "Viewport Units",
            "Media Queries"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "CSS Layout",
            "Viewport Units",
            "Responsive Web Design"
          ]
        },
        {
          "id": "task_interactive_image_gallery",
          "title": "Interactive Image Gallery with Transforms & Transitions",
          "description": "\nCreate a small image gallery (e.g., 3-4 images) where each image or its container scales up slightly and rotates a few degrees on hover. The transformation should occur smoothly with a transition effect.\n\n**Requirements:**\n1.  Set up an HTML structure for an image gallery, e.g., a container (`.gallery-container`) with multiple image wrappers (`.gallery-item`) containing `<img>` tags.\n2.  Apply CSS to each `.gallery-item` such that:\n    *   On hover, the item scales up (e.g., to 1.1 or 1.2 times its size).\n    *   On hover, the item rotates slightly (e.g., 5-10 degrees).\n    *   Both scaling and rotation should happen simultaneously and smoothly over a duration of your choice (e.g., 0.3s - 0.5s) using CSS Transitions.\n3.  Ensure the items return to their original state smoothly when the hover effect ends.\n4.  Maintain a clean and readable code structure.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Gallery</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f0f0f0;\n            margin: 0;\n        }\n        .gallery-container {\n            display: flex;\n            gap: 20px;\n            flex-wrap: wrap;\n            justify-content: center;\n            padding: 20px;\n        }\n        .gallery-item {\n            width: 200px;\n            height: 150px;\n            overflow: hidden;\n            border: 5px solid #fff;\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n            border-radius: 8px;\n            /* Add your transform and transition here */\n        }\n        .gallery-item img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            display: block;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"gallery-container\">\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/200x150/FF5733/FFFFFF?text=Image+1\" alt=\"Image 1\">\n        </div>\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/200x150/33FF57/FFFFFF?text=Image+2\" alt=\"Image 2\">\n        </div>\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/200x150/3357FF/FFFFFF?text=Image+3\" alt=\"Image 3\">\n        </div>\n    </div>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Gallery</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f0f0f0;\n            margin: 0;\n        }\n        .gallery-container {\n            display: flex;\n            gap: 20px;\n            flex-wrap: wrap;\n            justify-content: center;\n            padding: 20px;\n        }\n        .gallery-item {\n            width: 200px;\n            height: 150px;\n            overflow: hidden;\n            border: 5px solid #fff;\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n            border-radius: 8px;\n            /* Important: Apply transition to the element that changes transform */\n            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease;\n        }\n        .gallery-item:hover {\n            transform: scale(1.1) rotate(5deg); /* Combined transforms */\n            box-shadow: 0 8px 16px rgba(0,0,0,0.2);\n        }\n        .gallery-item img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            display: block;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"gallery-container\">\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/200x150/FF5733/FFFFFF?text=Image+1\" alt=\"Image 1\">\n        </div>\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/200x150/33FF57/FFFFFF?text=Image+2\" alt=\"Image 2\">\n        </div>\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/200x150/3357FF/FFFFFF?text=Image+3\" alt=\"Image 3\">\n        </div>\n    </div>\n</body>\n</html>\n",
          "testCases": [
            "Hover over each image item: Does it smoothly scale up and rotate?",
            "Check if the animation is smooth (not instantaneous) both when hovering on and off.",
            "Verify images return to their original state smoothly when the hover effect ends.",
            "Inspect CSS to confirm correct use of `transform` for `scale()` and `rotate()` functions combined.",
            "Inspect CSS to confirm `transition` property is applied correctly (e.g., `transition: transform 0.3s ease-in-out;` or `transition: all 0.3s ease-in-out;`)."
          ],
          "hints": [
            "The `transform` property allows combining multiple transform functions by listing them separated by spaces (e.g., `transform: rotate(Xdeg) scale(Y);`).",
            "Apply the `transition` property to the initial state of the element (`.gallery-item`) to ensure a smooth transition both on hover and when returning from hover.",
            "The `:hover` pseudo-class is essential for triggering the effect.",
            "Consider the `transform-origin` property if you want to change the point around which rotation and scaling occur (though default `center` is usually fine for this task).",
            "Ensure the `transition-property` includes `transform`."
          ],
          "tags": [
            "CSS",
            "Transforms",
            "Transitions",
            "Animation",
            "UI/UX",
            "Interactive",
            "Hover Effects"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "CSS Transforms",
            "CSS Transitions",
            "Pseudo-classes"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "User Interface Design",
            "Micro-interactions"
          ]
        },
        {
          "id": "task_custom_tooltip_with_triangle",
          "title": "Create a Custom Tooltip with Directional Pointer",
          "description": "\nImplement a custom tooltip component that appears on hover over a target element. The tooltip should include a small triangular 'pointer' that visually connects it to the hovered element, indicating its origin. The tooltip should also have a subtle fade-in transition when it appears.\n\n**Requirements:**\n1.  Create a `div` element that acts as the tooltip target (e.g., a button or an icon).\n2.  Create a tooltip `div` that is initially hidden.\n3.  On hover over the target, the tooltip should become visible.\n4.  The tooltip should contain a background, text, and padding.\n5.  Implement a CSS triangle (using the border technique) positioned at the bottom center of the tooltip, pointing downwards to the target element.\n6.  The tooltip should smoothly fade in (`opacity`) when it appears (on hover) and fade out when the hover ends.\n7.  Ensure the tooltip appears directly above the target element, with its triangle pointing to the center of the target.\n",
          "difficulty": "hard",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Custom Tooltip</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f8f8f8;\n            margin: 0;\n        }\n\n        .tooltip-container {\n            position: relative; /* Establish positioning context for tooltip */\n            display: inline-block; /* Allow the container to wrap its content */\n        }\n\n        .tooltip-target {\n            padding: 10px 20px;\n            background-color: #007bff;\n            color: white;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 1em;\n            font-weight: bold;\n            border: none;\n        }\n\n        .tooltip-content {\n            position: absolute;\n            bottom: calc(100% + 10px); /* Position above the target + some space */\n            left: 50%;\n            transform: translateX(-50%); /* Center horizontally */\n            background-color: #333;\n            color: white;\n            padding: 10px 15px;\n            border-radius: 5px;\n            white-space: nowrap;\n            z-index: 100;\n            opacity: 0;\n            visibility: hidden;\n            /* Add your transition here */\n            /* Add your triangle here */\n        }\n\n        .tooltip-container:hover .tooltip-content {\n            opacity: 1;\n            visibility: visible;\n            /* Adjust position if necessary based on triangle */\n        }\n    </style>\n</head>\n<body>\n    <div class=\"tooltip-container\">\n        <button class=\"tooltip-target\">Hover Me</button>\n        <div class=\"tooltip-content\">\n            This is a custom tooltip!\n            <!-- Add triangle element here -->\n        </div>\n    </div>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Custom Tooltip</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f8f8f8;\n            margin: 0;\n        }\n\n        .tooltip-container {\n            position: relative; /* Establish positioning context for tooltip */\n            display: inline-block; /* Allow the container to wrap its content */\n        }\n\n        .tooltip-target {\n            padding: 10px 20px;\n            background-color: #007bff;\n            color: white;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 1em;\n            font-weight: bold;\n            border: none;\n        }\n\n        .tooltip-content {\n            position: absolute;\n            /* bottom: 100% positions its bottom edge at the top edge of the parent. */\n            /* Add padding-bottom equal to the triangle's height to prevent overlap. */\n            bottom: calc(100% + 8px); /* Position above the target + triangle height */\n            left: 50%;\n            transform: translateX(-50%); /* Center horizontally */\n            background-color: #333;\n            color: white;\n            padding: 10px 15px;\n            border-radius: 5px;\n            white-space: nowrap;\n            z-index: 100;\n            opacity: 0;\n            visibility: hidden; /* Hide initially, allows transitions */\n            transition: opacity 0.3s ease, visibility 0.3s ease;\n        }\n\n        .tooltip-container:hover .tooltip-content {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        /* CSS Triangle for the tooltip pointer */\n        .tooltip-content::after {\n            content: '';\n            position: absolute;\n            top: 100%; /* Position at the bottom of the tooltip content */\n            left: 50%;\n            transform: translateX(-50%); /* Center the triangle */\n            width: 0;\n            height: 0;\n            border-left: 8px solid transparent;\n            border-right: 8px solid transparent;\n            border-top: 8px solid #333; /* Color should match tooltip background */\n        }\n    </style>\n</head>\n<body>\n    <div class=\"tooltip-container\">\n        <button class=\"tooltip-target\">Hover Me</button>\n        <div class=\"tooltip-content\">\n            This is a custom tooltip!\n        </div>\n    </div>\n</body>\n</html>\n",
          "testCases": [
            "Hover over the button: Does the tooltip appear?",
            "Check if the tooltip has a smooth fade-in and fade-out transition (0.3s ease).",
            "Verify the tooltip appears centered horizontally above the button.",
            "Confirm the triangular pointer is present, points downwards, and is perfectly centered at the bottom of the tooltip, aligning with the target element's center.",
            "Check if the triangle's color matches the tooltip's background color.",
            "Test responsiveness: Ensure tooltip remains correctly positioned on smaller screens (if text wraps, `white-space: nowrap` might need adjustment or removal for long content)."
          ],
          "hints": [
            "Use `position: relative` on the `.tooltip-container` (the common parent of target and tooltip) and `position: absolute` on `.tooltip-content` for positioning.",
            "The CSS triangle can be created using a pseudo-element (e.g., `::after`) on the `.tooltip-content` to position it relative to the tooltip itself.",
            "Remember to set `width: 0`, `height: 0`, and specific `border` properties for the pseudo-element to form the triangle.",
            "Positioning the triangle requires `top: 100%` (to place it at the bottom of the `tooltip-content`) and `left: 50%` with `transform: translateX(-50%)` on the pseudo-element to center it.",
            "For the fade effect, transition `opacity`. Also, transitioning `visibility` (`visibility: hidden` to `visibility: visible`) alongside `opacity` is good practice as `visibility: hidden` prevents the element from receiving pointer events when hidden.",
            "Ensure the triangle's `border-top` color matches the tooltip's `background-color` to create a seamless pointer."
          ],
          "tags": [
            "CSS",
            "Positioning",
            "Transitions",
            "Pseudo-elements",
            "UI Components",
            "Tooltip",
            "Advanced CSS",
            "Triangle Technique"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "CSS Positioning",
            "CSS Transitions",
            "CSS Triangle Technique",
            "Pseudo-elements"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Component Design",
            "Accessibility (basic)",
            "UX Micro-interactions"
          ]
        }
      ]
    }
  },
  {
    "id": "e6c0a01e-3ea4-4ccd-992d-a1624e048389",
    "startLine": 11900,
    "endLine": 11999,
    "processedDate": "2025-06-17T12:40:47.884Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_css_grid_fundamentals",
          "title": "CSS Grid Fundamentals: Defining Rows, Columns, and Gaps",
          "content": "CSS Grid is a powerful two-dimensional layout system that allows precise control over both rows and columns simultaneously. Unlike Flexbox, which is primarily one-dimensional, Grid excels at overall page layouts and complex, asymmetrical designs.\n\n## Key Concepts\n*   **Grid Container**: An element with `display: grid` or `display: inline-grid`. This element becomes the parent for grid items and establishes a new grid formatting context.\n*   **Grid Items**: The direct children of a grid container. These elements are laid out according to the grid rules.\n*   **Grid Lines**: Horizontal and vertical lines that divide the grid into cells. Numbered starting from 1.\n*   **Grid Tracks**: The space between two adjacent grid lines, forming columns or rows.\n*   **Grid Cells**: The intersection of a grid row and a grid column, the smallest unit of a grid.\n*   **`display: grid`**: Turns an element into a grid container.\n*   **`grid-template-columns`**: Defines the columns of the grid. You can specify fixed sizes (e.g., `100px`), flexible sizes (e.g., `1fr` for a fraction of available space), or repeat patterns (`repeat(3, 1fr)`).\n*   **`grid-template-rows`**: Defines the rows of the grid, similar to `grid-template-columns`.\n*   **`gap`**: (formerly `grid-gap`) A shorthand property for `row-gap` and `column-gap`. It defines the spacing between grid cells, not around the container.\n\n## Units in Grid\n*   **`fr` (fractional unit)**: Represents a fraction of the available space in the grid container. `1fr` means one part of the free space. If you have `1fr 2fr`, the second column will be twice as wide as the first.\n*   **Fixed units**: `px`, `em`, `rem`, `vw`, `vh`, etc.\n*   **`auto`**: Allows the browser to determine the size of the track based on its content.",
          "examples": [
            {
              "id": "example_css_grid_basic_1",
              "title": "Basic Grid Definition",
              "code": "```css\n.basic-grid {\n  display: grid;\n  grid-template-columns: 100px 1fr 200px; /* Column 1: 100px, Column 2: fills remaining space, Column 3: 200px */\n  grid-template-rows: 50px auto;\n  gap: 15px;\n  background-color: #eee;\n  padding: 10px;\n}\n\n.grid-item {\n  background-color: lightblue;\n  border: 1px solid #333;\n  padding: 10px;\n}\n\n/* HTML Structure */\n/*\n<div class=\"basic-grid\">\n  <div class=\"grid-item\">Item 1</div>\n  <div class=\"grid-item\">Item 2</div>\n  <div class=\"grid-item\">Item 3</div>\n  <div class=\"grid-item\">Item 4</div>\n  <div class=\"grid-item\">Item 5</div>\n  <div class=\"grid-item\">Item 6</div>\n</div>\n*/\n```",
              "explanation": "This example sets up a grid with three columns (fixed, fractional, fixed) and two rows (fixed, auto). A `gap` of 15px is applied between grid cells. The fractional unit `1fr` ensures that the middle column expands to fill the available space.",
              "language": "css"
            },
            {
              "id": "example_css_grid_repeat_1",
              "title": "Using `repeat()` for Columns and Rows",
              "code": "```css\n.grid-repeat {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr); /* Creates 4 equal columns */\n  grid-template-rows: repeat(2, 80px);   /* Creates 2 rows, each 80px high */\n  gap: 10px 20px; /* Row gap: 10px, Column gap: 20px */\n  background-color: #f0f0f0;\n  padding: 10px;\n}\n\n.grid-item {\n  background-color: lightcoral;\n  border: 1px solid #333;\n  padding: 10px;\n}\n\n/* HTML Structure */\n/*\n<div class=\"grid-repeat\">\n  <div class=\"grid-item\">A</div>\n  <div class=\"grid-item\">B</div>\n  <div class=\"grid-item\">C</div>\n  <div class=\"grid-item\">D</div>\n  <div class=\"grid-item\">E</div>\n  <div class=\"grid-item\">F</div>\n  <div class=\"grid-item\">G</div>\n  <div class=\"grid-item\">H</div>\n</div>\n*/\n```",
              "explanation": "The `repeat()` function is a concise way to define multiple columns or rows with the same size. Here, `repeat(4, 1fr)` creates four equally sized columns, and `repeat(2, 80px)` creates two rows of 80px height. `gap` can also take two values for distinct row and column gaps.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_css_grid_fundamental_1",
            "question_css_grid_fundamental_2",
            "question_css_grid_fundamental_3",
            "question_css_grid_fundamental_4",
            "question_css_grid_fundamental_5",
            "question_css_grid_fundamental_6"
          ],
          "relatedTasks": [
            "task_grid_basic_layout"
          ],
          "tags": [
            "CSS Grid",
            "Layout",
            "Frontend",
            "Responsive Design",
            "Grid-template-columns",
            "Grid-template-rows",
            "Gap"
          ],
          "technology": "CSS",
          "prerequisites": [
            "HTML Structure",
            "Basic CSS Properties"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Advanced CSS Grid",
            "Responsive Web Design"
          ]
        },
        {
          "id": "theory_css_grid_advanced_layouts",
          "title": "Advanced CSS Grid Layouts: Named Areas and Auto-Placement",
          "content": "Beyond basic row and column definitions, CSS Grid offers powerful features for creating more intuitive and responsive layouts, such as named grid areas and automatic item placement.\n\n## Key Concepts\n*   **`grid-template-areas`**: A property used on the grid container to define the layout of the grid by referencing named grid areas. This provides a very visual way to design the grid structure in your CSS. Each string represents a row, and the words within the string represent cells that the named area will span.\n*   **`grid-area`**: A property used on a grid item to assign it to a named grid area defined by `grid-template-areas`. If an item is not explicitly assigned to a named area, it will be auto-placed.\n*   **`auto-placement`**: When grid items are not explicitly placed (e.g., using `grid-row`/`grid-column` or `grid-area`), they are automatically placed into available grid cells.\n*   **`grid-auto-flow`**: Controls how auto-placed items flow into the grid (e.g., `row` or `column`). Defaults to `row`.\n*   **`grid-template-columns` / `grid-template-rows` with `auto-fill` and `auto-fit`**: These keywords are used within the `repeat()` function to create dynamic and responsive grids:\n    *   **`auto-fill`**: Creates as many columns/rows as possible without overflowing the container, even if the container is larger than the sum of the maximum sizes of all tracks. Empty tracks will remain.\n    *   **`auto-fit`**: Similar to `auto-fill`, but it collapses any empty tracks, making the contained items expand to fill the available space when there are fewer items than the maximum possible tracks.\n*   **`minmax(min, max)`**: A function used within `grid-template-columns` or `grid-template-rows` to define a size range for a track. The track will be at least `min` and at most `max`. This is crucial for responsive designs, ensuring items are never smaller than a certain size but can grow to fill space.",
          "examples": [
            {
              "id": "example_grid_named_areas_1",
              "title": "Layout with Named Grid Areas",
              "code": "```css\n.layout-areas {\n  display: grid;\n  grid-template-columns: 1fr 3fr 1fr;\n  grid-template-rows: auto 1fr auto;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar content aside\"\n    \"footer footer footer\";\n  min-height: 100vh;\n  gap: 10px;\n  background-color: #f8f8f8;\n}\n\n.header { grid-area: header; background-color: #aaddff; padding: 20px; text-align: center; }\n.sidebar { grid-area: sidebar; background-color: #cceeff; padding: 20px; }\n.content { grid-area: content; background-color: #ddeeff; padding: 20px; }\n.aside { grid-area: aside; background-color: #eef8ff; padding: 20px; }\n.footer { grid-area: footer; background-color: #bbddff; padding: 20px; text-align: center; }\n\n/* HTML Structure */\n/*\n<div class=\"layout-areas\">\n  <header class=\"header\">Header</header>\n  <nav class=\"sidebar\">Sidebar</nav>\n  <main class=\"content\">Main Content</main>\n  <aside class=\"aside\">Aside</aside>\n  <footer class=\"footer\">Footer</footer>\n</div>\n*/\n```",
              "explanation": "This example demonstrates creating a common website layout using `grid-template-areas`. Each string in `grid-template-areas` defines a row. Identical names span cells for that area. `grid-area` on child elements assigns them to these named regions, resulting in a clear and readable layout definition.",
              "language": "css"
            },
            {
              "id": "example_grid_auto_placement_1",
              "title": "Responsive Grid with `auto-fill` and `minmax`",
              "code": "```css\n.responsive-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  /* Creates as many columns as possible, each at least 200px wide, \n     and growing to fill available space evenly */\n  gap: 20px;\n  padding: 20px;\n  background-color: #e0e0e0;\n}\n\n.grid-item {\n  background-color: #ffd700;\n  border: 1px solid #ccaa00;\n  padding: 20px;\n  text-align: center;\n}\n\n/* HTML Structure */\n/*\n<div class=\"responsive-grid\">\n  <div class=\"grid-item\">Card 1</div>\n  <div class=\"grid-item\">Card 2</div>\n  <div class=\"grid-item\">Card 3</div>\n  <div class=\"grid-item\">Card 4</div>\n  <div class=\"grid-item\">Card 5</div>\n  <div class=\"grid-item\">Card 6</div>\n</div>\n*/\n```",
              "explanation": "This demonstrates a highly flexible and responsive grid. `repeat(auto-fill, minmax(200px, 1fr))` ensures that the grid always tries to fit as many columns as possible, each at least 200px wide. If there's more space, columns expand equally due to `1fr`. If there's less space, columns shrink down to `200px` before wrapping. `auto-fill` will create empty tracks if items don't fill all potential slots.",
              "language": "css"
            },
            {
              "id": "example_grid_auto_fit_1",
              "title": "Responsive Grid with `auto-fit` and `minmax`",
              "code": "```css\n.responsive-grid-autofit {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  /* Creates as many columns as possible, collapses empty ones, \n     and items fill available space */\n  gap: 20px;\n  padding: 20px;\n  background-color: #d0d0d0;\n}\n\n.grid-item {\n  background-color: #90ee90;\n  border: 1px solid #66bb66;\n  padding: 20px;\n  text-align: center;\n}\n\n/* HTML Structure */\n/*\n<div class=\"responsive-grid-autofit\">\n  <div class=\"grid-item\">Item A</div>\n  <div class=\"grid-item\">Item B</div>\n  <div class=\"grid-item\">Item C</div>\n</div>\n*/\n```",
              "explanation": "Similar to `auto-fill`, but `auto-fit` will collapse any empty implicit tracks. In this example, if there are only 3 items but space for 5 columns, `auto-fit` will make the 3 items expand to fill the entire width, effectively collapsing the two empty tracks. This is often preferred when you want your items to always fill the available row space.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_css_grid_advanced_1",
            "question_css_grid_advanced_2",
            "question_css_grid_advanced_3",
            "question_css_grid_advanced_4",
            "question_css_grid_advanced_5",
            "question_css_grid_advanced_6"
          ],
          "relatedTasks": [
            "task_grid_named_area_layout",
            "task_grid_responsive_gallery"
          ],
          "tags": [
            "CSS Grid",
            "Layout",
            "Named Areas",
            "Responsive Design",
            "Auto-placement",
            "Minmax",
            "Auto-fill",
            "Auto-fit"
          ],
          "technology": "CSS",
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "requiredFor": [
            "Complex UI Layouts",
            "Component Design"
          ]
        },
        {
          "id": "theory_css_grid_alignment",
          "title": "CSS Grid Alignment: Positioning Items and Content",
          "content": "CSS Grid provides powerful alignment properties for both grid items (children) and the grid tracks themselves (the grid content within the container). These properties are typically applied to the grid container, affecting its direct children.\n\n## Key Concepts\n*   **Grid Item Positioning (`grid-column`, `grid-row`)**:\n    *   `grid-column`: Specifies an item's start and end column lines. Can be a line number (`1 / 3`), a span (`span 2`), or a named line.\n    *   `grid-row`: Specifies an item's start and end row lines. Similar usage to `grid-column`.\n    *   Shorthands: `grid-column-start`, `grid-column-end`, `grid-row-start`, `grid-row-end`.\n*   **Grid Item Alignment (applied to grid container, affecting items within their cells)**:\n    *   `justify-items`: Aligns grid items along the *inline (row)* axis within their grid cells. Values include `start`, `end`, `center`, `stretch` (default).\n    *   `align-items`: Aligns grid items along the *block (column)* axis within their grid cells. Values include `start`, `end`, `center`, `stretch` (default).\n    *   `place-items`: Shorthand for `align-items` and `justify-items` (e.g., `place-items: center` is `align-items: center; justify-items: center;`).\n    *   **Note**: Individual grid items can override these container-level alignments using `justify-self` and `align-self`.\n*   **Grid Container Alignment (applied to grid container, affecting the grid tracks within the container)**:\n    *   These properties align the *entire grid* within its container, similar to how Flexbox aligns items when there's extra space.\n    *   `justify-content`: Aligns grid tracks along the *inline (row)* axis within the grid container. Requires free space in the container's inline dimension. Values include `start`, `end`, `center`, `space-between`, `space-around`, `space-evenly`.\n    *   `align-content`: Aligns grid tracks along the *block (column)* axis within the grid container. Requires free space in the container's block dimension. Values include `start`, `end`, `center`, `space-between`, `space-around`, `space-evenly`.\n    *   `place-content`: Shorthand for `align-content` and `justify-content` (e.g., `place-content: center` is `align-content: center; justify-content: center;`).",
          "examples": [
            {
              "id": "example_grid_item_positioning_1",
              "title": "Positioning Grid Items",
              "code": "```css\n.grid-positioning {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 100px);\n  gap: 10px;\n  border: 2px solid grey;\n  padding: 10px;\n}\n\n.item-a {\n  grid-column: 1 / 3; /* Spans from column line 1 to 3 (2 columns) */\n  grid-row: 1;\n  background-color: lightgreen;\n}\n\n.item-b {\n  grid-column: 2 / span 2; /* Starts at line 2, spans 2 columns */\n  grid-row: 2;\n  background-color: lightsalmon;\n}\n\n.item-c {\n  grid-area: 3 / 1 / 4 / 4; /* Shorthand: row-start / col-start / row-end / col-end */\n  background-color: lightblue;\n}\n\n/* HTML Structure */\n/*\n<div class=\"grid-positioning\">\n  <div class=\"item-a\">Item A</div>\n  <div class=\"item-b\">Item B</div>\n  <div class=\"item-c\">Item C</div>\n  <div>Other Item</div>\n  <div>Other Item</div>\n  <div>Other Item</div>\n</div>\n*/\n```",
              "explanation": "This example shows how `grid-column` and `grid-row` are used to explicitly place and size grid items. `item-a` spans the first two columns. `item-b` starts at the second column line and spans two columns. `item-c` uses the `grid-area` shorthand to define its position and span across multiple lines.",
              "language": "css"
            },
            {
              "id": "example_grid_item_alignment_1",
              "title": "Aligning Items within Cells (`place-items`)",
              "code": "```css\n.grid-item-alignment {\n  display: grid;\n  grid-template-columns: repeat(3, 150px);\n  grid-template-rows: repeat(2, 100px);\n  gap: 10px;\n  border: 2px solid #555;\n  height: 300px; /* Container height to show vertical alignment */\n  place-items: center; /* Centers items both horizontally and vertically within their cells */\n  background-color: #eee;\n}\n\n.grid-item {\n  width: 80px;\n  height: 60px;\n  background-color: #f08080;\n  border: 1px solid #a00;\n  font-size: 0.8em;\n  display: flex; /* To center text inside item */\n  justify-content: center;\n  align-items: center;\n}\n\n/* HTML Structure */\n/*\n<div class=\"grid-item-alignment\">\n  <div class=\"grid-item\">1</div>\n  <div class=\"grid-item\">2</div>\n  <div class=\"grid-item\">3</div>\n  <div class=\"grid-item\">4</div>\n  <div class=\"grid-item\">5</div>\n  <div class=\"grid-item\">6</div>\n</div>\n*/\n```",
              "explanation": "Here, `place-items: center` on the grid container centrally aligns all grid items within their respective grid cells. This is a shorthand for `justify-items: center` (horizontal) and `align-items: center` (vertical). Note that the grid items themselves have fixed `width` and `height` to make the alignment visible.",
              "language": "css"
            },
            {
              "id": "example_grid_content_alignment_1",
              "title": "Aligning Grid Content (`place-content`)",
              "code": "```css\n.grid-content-alignment {\n  display: grid;\n  grid-template-columns: 100px 100px;\n  grid-template-rows: 80px 80px;\n  gap: 10px;\n  width: 500px; /* Container wider than grid tracks */\n  height: 400px; /* Container taller than grid tracks */\n  border: 2px dashed #007bff;\n  background-color: #e6f7ff;\n  place-content: center; /* Centers the entire grid within its container */\n  /* Equivalently: justify-content: center; align-content: center; */\n}\n\n.grid-item {\n  background-color: #66b2ff;\n  border: 1px solid #0056b3;\n  padding: 10px;\n  text-align: center;\n}\n\n/* HTML Structure */\n/*\n<div class=\"grid-content-alignment\">\n  <div class=\"grid-item\">A</div>\n  <div class=\"grid-item\">B</div>\n  <div class=\"grid-item\">C</div>\n  <div class=\"grid-item\">D</div>\n</div>\n*/\n```",
              "explanation": "In this example, the grid container is larger than the total size of its grid tracks. `place-content: center` centers the *entire grid* horizontally and vertically within the `grid-content-alignment` container. This is useful for positioning the whole grid when there is extra space in the container.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_css_grid_alignment_1",
            "question_css_grid_alignment_2",
            "question_css_grid_alignment_3",
            "question_css_grid_alignment_4",
            "question_css_grid_alignment_5",
            "question_css_grid_alignment_6"
          ],
          "relatedTasks": [
            "task_grid_aligned_gallery",
            "task_grid_complex_layout_alignment"
          ],
          "tags": [
            "CSS Grid",
            "Alignment",
            "Grid Items",
            "Grid Container",
            "Justify-items",
            "Align-items",
            "Place-items",
            "Justify-content",
            "Align-content",
            "Place-content",
            "Grid-column",
            "Grid-row"
          ],
          "technology": "CSS",
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Precise Layout Control",
            "UI Component Development"
          ]
        },
        {
          "id": "theory_grid_vs_flexbox",
          "title": "CSS Grid vs. Flexbox: Choosing the Right Layout System",
          "content": "CSS Grid and Flexbox are both powerful layout modules, but they are designed for different purposes. Understanding their strengths allows for efficient and effective layout strategies, often by combining them.\n\n## CSS Grid: Best for:\n*   **Two-dimensional layouts**: Controls both rows and columns simultaneously. Ideal for laying out sections of a page or the entire page structure.\n*   **Overall page layouts**: Structures the main regions (header, sidebar, content, footer) of a website.\n*   **Complex, asymmetrical layouts**: When elements need to span multiple rows/columns or form non-uniform patterns.\n*   **Precise control over both dimensions**: Explicitly defines the size and position of tracks and items in both axes.\n*   **When you need to overlap elements**: Grid allows items to occupy the same grid cell, making overlapping straightforward.\n\n## Flexbox: Best for:\n*   **One-dimensional layouts**: Controls items either along a single row OR a single column.\n*   **Components and smaller-scale layouts**: Ideal for distributing space and aligning items within a navigation bar, a card component, or a list of items.\n*   **Distributing space and aligning items in a single dimension**: Excellent for centering, spacing out, or reordering items along one axis.\n*   **When content size should dictate layout**: Flex items naturally adapt their size based on their content and available space, making it good for 'fluid' lists.\n*   **When you need to reorder elements easily**: `order` property in Flexbox makes reordering visual order simple, regardless of DOM order.\n\n## Using Grid and Flexbox Together\nIt's common and often necessary to use both Grid and Flexbox within a single design. A common pattern is to use Grid for the macro-layout (overall page structure) and Flexbox for the micro-layout (arrangement of items within a grid cell or component). For example, a grid cell might contain a Flexbox container to arrange its internal elements.\n\n**Example Scenario:**\n*   **Grid**: Laying out the main `header`, `main`, `footer`, and `sidebar` areas of a webpage.\n*   **Flexbox**: Arranging navigation links within the `header`, buttons within a `footer` section, or items inside individual `card` components that reside within a grid cell.",
          "examples": [
            {
              "id": "example_grid_flexbox_combination_1",
              "title": "Grid for Page Layout, Flexbox for Component Layout",
              "code": "```css\n/* Grid for overall page layout */\n.page-wrapper {\n  display: grid;\n  grid-template-columns: 1fr 3fr;\n  grid-template-rows: auto 1fr auto;\n  grid-template-areas:\n    \"header header\"\n    \"sidebar content\"\n    \"footer footer\";\n  min-height: 100vh;\n  gap: 20px;\n  background-color: #f2f2f2;\n}\n\n.page-header { grid-area: header; background-color: #4CAF50; color: white; padding: 20px; }\n.page-sidebar { grid-area: sidebar; background-color: #f4f4f4; padding: 20px; border-right: 1px solid #ddd; }\n.page-content { grid-area: content; background-color: white; padding: 20px; }\n.page-footer { grid-area: footer; background-color: #333; color: white; padding: 20px; text-align: center; }\n\n/* Flexbox for navigation within the header */\n.nav-links {\n  display: flex;\n  justify-content: space-around; /* Distribute space evenly */\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.nav-links li a {\n  color: white;\n  text-decoration: none;\n  padding: 10px 15px;\n  background-color: #5cb85c;\n  border-radius: 5px;\n}\n\n/* HTML Structure */\n/*\n<div class=\"page-wrapper\">\n  <header class=\"page-header\">\n    <h1>My Website</h1>\n    <ul class=\"nav-links\">\n      <li><a href=\"#\">Home</a></li>\n      <li><a href=\"#\">About</a></li>\n      <li><a href=\"#\">Services</a></li>\n      <li><a href=\"#\">Contact</a></li>\n    </ul>\n  </header>\n  <aside class=\"page-sidebar\">\n    <p>Sidebar content here.</p>\n  </aside>\n  <main class=\"page-content\">\n    <h2>Welcome to the Main Content Area</h2>\n    <p>This is where the primary information of your page resides.</p>\n  </main>\n  <footer class=\"page-footer\">\n    <p>&copy; 2023 My Website</p>\n  </footer>\n</div>\n*/\n```",
              "explanation": "This example illustrates the common practice of combining Grid and Flexbox. The `.page-wrapper` uses CSS Grid to define the main structural areas of the page (header, sidebar, content, footer). Inside the `.page-header`, Flexbox is used on `.nav-links` to distribute and align the navigation items horizontally, demonstrating one-dimensional layout within a grid cell.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_grid_flexbox_comparison_1",
            "question_grid_flexbox_comparison_2",
            "question_grid_flexbox_comparison_3",
            "question_grid_flexbox_comparison_4",
            "question_grid_flexbox_comparison_5",
            "question_grid_flexbox_comparison_6",
            "question_grid_flexbox_comparison_7"
          ],
          "relatedTasks": [
            "task_grid_flexbox_dashboard_layout"
          ],
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Layout Comparison",
            "Responsive Design",
            "Frontend",
            "Best Practices",
            "Two-dimensional Layout",
            "One-dimensional Layout"
          ],
          "technology": "CSS",
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Flexbox Fundamentals"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "Professional Web Development",
            "Optimal Layout Strategy"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_css_grid_fundamental_1",
          "topic": "CSS Grid Fundamentals",
          "level": "easy",
          "type": "mcq",
          "question": "Which CSS property is used to define a container as a Grid container?",
          "answer": "display: grid;",
          "options": [
            "display: flex;",
            "display: block;",
            "display: grid;",
            "display: table;"
          ],
          "analysisPoints": [
            "Tests basic knowledge of CSS Grid activation.",
            "Differentiates Grid from other display properties like Flexbox."
          ],
          "keyConcepts": [
            "display: grid",
            "Grid Container"
          ],
          "evaluationCriteria": [
            "Direct recall of CSS property names.",
            "Understanding the initial step of Grid layout."
          ],
          "example": "To enable CSS Grid for an element, you apply `display: grid;` to it. This makes the element a grid container, and its direct children become grid items.",
          "tags": [
            "CSS Grid",
            "Fundamentals",
            "MCQ"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_grid_fundamental_2",
          "topic": "CSS Grid Columns and Rows",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following CSS snippet:\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 100px 2fr 1fr;\n  grid-template-rows: 50px auto;\n}\n```\n\nIf the grid container has a total width of 600px, what will be the calculated width of the second column?",
          "answer": "333.33px",
          "options": [
            "100px",
            "200px",
            "333.33px",
            "500px"
          ],
          "analysisPoints": [
            "Tests understanding of `fr` unit calculation.",
            "Requires calculating available space after fixed-size columns.",
            "Evaluates division of fractional units."
          ],
          "keyConcepts": [
            "grid-template-columns",
            "fr unit",
            "width calculation"
          ],
          "evaluationCriteria": [
            "Ability to perform calculations with `fr` units.",
            "Understanding of how fixed and fractional units interact."
          ],
          "example": "The total width is 600px. The first column takes 100px. Remaining space is 600px - 100px = 500px. The fractional units are 2fr and 1fr, totaling 3fr. Each `fr` is 500px / 3 = 166.66px. The second column is `2fr`, so its width is 2 * 166.66px = 333.33px.",
          "tags": [
            "CSS Grid",
            "Calculations",
            "fr unit",
            "MCQ"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_fundamental_3",
          "topic": "CSS Grid Gap Property",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the `gap` property in CSS Grid?",
          "answer": "To define the spacing between grid cells (rows and columns).",
          "analysisPoints": [
            "Distinguishes `gap` from padding or margin on items.",
            "Highlights its role in grid spacing."
          ],
          "keyConcepts": [
            "gap",
            "Grid Cells",
            "Spacing"
          ],
          "evaluationCriteria": [
            "Quick recall of property function.",
            "Understanding its scope within a grid."
          ],
          "example": "The `gap` property (which is a shorthand for `row-gap` and `column-gap`) creates space between the tracks themselves, not around the outer edges of the grid or individual items.",
          "tags": [
            "CSS Grid",
            "Gap",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_grid_fundamental_4",
          "topic": "CSS Grid `repeat()` Function",
          "level": "medium",
          "type": "open",
          "question": "Explain how the `repeat()` function is used in `grid-template-columns` or `grid-template-rows` and provide an example. What advantage does it offer over explicitly listing track sizes?",
          "answer": "The `repeat()` function is a CSS Grid value that allows you to specify a pattern of columns or rows to be repeated a certain number of times. It takes two arguments: the number of times to repeat the pattern, and the track list to repeat.\n\n**Example:**\n`grid-template-columns: repeat(3, 1fr 20px);` This creates a pattern of `1fr` column followed by a `20px` gap, repeated three times, resulting in `1fr 20px 1fr 20px 1fr 20px` effectively.\n\n**Advantage:**\nIt offers conciseness and reduces redundancy in CSS code, especially when dealing with a large number of identically sized or patterned tracks. It makes the code more readable and easier to maintain. Without `repeat()`, you would have to manually list each `1fr` and `20px` value.",
          "analysisPoints": [
            "Defines `repeat()` function and its arguments.",
            "Provides a clear, practical example.",
            "Articulates the benefit (conciseness, readability, maintainability)."
          ],
          "keyConcepts": [
            "repeat() function",
            "grid-template-columns",
            "grid-template-rows",
            "Code conciseness"
          ],
          "evaluationCriteria": [
            "Clarity of explanation.",
            "Accuracy of example.",
            "Ability to identify practical benefits."
          ],
          "example": "The `repeat()` function is essential for creating grids with many uniform tracks without writing out each track definition.",
          "tags": [
            "CSS Grid",
            "repeat()",
            "Open-ended",
            "Code Optimization"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_fundamental_5",
          "topic": "CSS Grid: Defining a basic grid",
          "level": "easy",
          "type": "code",
          "question": "Write the CSS for a grid container named `.simple-grid` that has 3 equal-width columns and 2 rows, where the first row is 100px tall and the second row automatically adjusts its height. There should be a 15px gap between grid items.",
          "answer": "```css\n.simple-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: 100px auto;\n  gap: 15px;\n}\n```",
          "analysisPoints": [
            "Tests ability to combine `display: grid`, `grid-template-columns`, `grid-template-rows`, and `gap`.",
            "Checks understanding of `repeat()` and `auto` keyword.",
            "Ensures correct syntax for defining columns and rows."
          ],
          "keyConcepts": [
            "display: grid",
            "grid-template-columns",
            "grid-template-rows",
            "gap",
            "repeat()",
            "fr unit",
            "auto"
          ],
          "evaluationCriteria": [
            "Correct application of core grid properties.",
            "Syntactic accuracy.",
            "Meeting all specified requirements."
          ],
          "example": "This solution demonstrates the fundamental properties for setting up a grid layout. `repeat(3, 1fr)` ensures three equally sized columns, `100px auto` defines the row heights, and `gap: 15px` sets the spacing.",
          "tags": [
            "CSS Grid",
            "Code Challenge",
            "Fundamentals"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_fundamental_6",
          "topic": "CSS Grid Units",
          "level": "medium",
          "type": "flashcard",
          "question": "What does the `fr` unit represent in CSS Grid, and why is it useful?",
          "answer": "The `fr` (fractional) unit represents a fraction of the available space in the grid container. It's useful because it allows grid items to scale proportionally to the remaining space, making it easy to create flexible and responsive layouts without complex calculations.",
          "analysisPoints": [
            "Defines `fr` unit.",
            "Explains its practical advantage in responsive design.",
            "Compares its dynamic nature to fixed units."
          ],
          "keyConcepts": [
            "fr unit",
            "Responsive Design",
            "Flexible Layouts"
          ],
          "evaluationCriteria": [
            "Accurate definition.",
            "Clear explanation of utility."
          ],
          "example": "If `grid-template-columns: 1fr 2fr;`, the second column will be twice the width of the first, filling the remaining space after any fixed-size tracks.",
          "tags": [
            "CSS Grid",
            "fr unit",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_advanced_1",
          "topic": "CSS Grid Named Areas",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following CSS Grid definition:\n\n```css\n.grid-layout {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  grid-template-rows: auto 1fr auto;\n  grid-template-areas:\n    \"header header\"\n    \"sidebar main\"\n    \"footer footer\";\n}\n\n.item-a { grid-area: sidebar; }\n.item-b { grid-area: header; }\n.item-c { grid-area: main; }\n```\n\nWhich grid area will `item-b` occupy?",
          "answer": "The entire top row, spanning both columns.",
          "options": [
            "The first column of the second row.",
            "The entire top row, spanning both columns.",
            "The second column of the second row.",
            "The entire bottom row, spanning both columns."
          ],
          "analysisPoints": [
            "Tests understanding of `grid-template-areas` syntax.",
            "Checks how `grid-area` on items maps to named areas.",
            "Evaluates the concept of areas spanning multiple cells."
          ],
          "keyConcepts": [
            "grid-template-areas",
            "grid-area",
            "Named Grid Areas"
          ],
          "evaluationCriteria": [
            "Correct interpretation of grid area definitions.",
            "Ability to trace item placement based on named areas."
          ],
          "example": "The `\"header header\"` string in `grid-template-areas` defines the top row, with the 'header' area spanning both columns. Since `.item-b` is assigned `grid-area: header;`, it will occupy this entire top row.",
          "tags": [
            "CSS Grid",
            "Named Areas",
            "MCQ"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_advanced_2",
          "topic": "CSS Grid `auto-fill` vs. `auto-fit`",
          "level": "hard",
          "type": "open",
          "question": "Compare and contrast `auto-fill` and `auto-fit` in the context of `grid-template-columns` with `minmax()`. Provide a scenario where each would be more appropriate.",
          "answer": "Both `auto-fill` and `auto-fit` are used with `repeat()` and `minmax()` to create responsive grids that automatically adjust the number of columns. They aim to fill the available space while respecting the `minmax` constraints.\n\n**`auto-fill`:**\n*   **Behavior:** Creates as many columns as possible that fit into the container, even if there are not enough grid items to fill all the created columns. It will keep empty tracks (implicit grid tracks) in the layout.\n*   **Effect:** When there's extra space, it will create empty 'slots' or tracks. If grid items don't fill all slots, the items will maintain their `minmax` size, and the empty tracks will exist.\n*   **Scenario:** Useful when you want to maintain a consistent column count, or you are adding items dynamically and want new items to simply 'fill' an available slot without disturbing the existing items' sizing. E.g., a photo gallery where you want consistent gaps and fixed-size thumbnails, and don't mind empty space if there aren't enough images to fill the last row perfectly.\n\n**`auto-fit`:**\n*   **Behavior:** Behaves identically to `auto-fill` initially, creating as many columns as possible. However, if there are empty tracks, `auto-fit` will *collapse* them to 0px, causing the actual grid items to expand and take up the available space within the container.\n*   **Effect:** When items don't fill all possible columns, `auto-fit` makes the existing items grow to fill the remaining space, effectively 'fitting' them to the available width by collapsing implicit empty tracks.\n*   **Scenario:** Ideal for dynamic content lists or card layouts where you want the items to always fill the available row space, even if there are fewer items than could theoretically fit. E.g., a product listing where you always want the product cards to stretch and fill the entire width of the container, regardless of how many items are currently displayed in a row.\n\n**Key Difference:** `auto-fill` maintains empty implicit tracks, `auto-fit` collapses them, allowing actual items to expand.",
          "analysisPoints": [
            "Clearly defines `auto-fill` and `auto-fit` behaviors.",
            "Explains the impact on empty tracks/items.",
            "Provides realistic, distinct use-case scenarios for each.",
            "Highlights the core difference concisely."
          ],
          "keyConcepts": [
            "auto-fill",
            "auto-fit",
            "minmax()",
            "Responsive Design",
            "Grid Tracks"
          ],
          "evaluationCriteria": [
            "Comprehensive and accurate comparison.",
            "Relevant and practical examples.",
            "Clarity of explanation."
          ],
          "example": "```css\n/* auto-fill: always leaves empty slots if items don't fill */\n.grid-autofill {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n}\n\n/* auto-fit: collapses empty slots, items expand */\n.grid-autofit {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n}\n```",
          "tags": [
            "CSS Grid",
            "Responsive Design",
            "auto-fill",
            "auto-fit",
            "minmax()",
            "Open-ended",
            "Advanced"
          ],
          "prerequisites": [
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_css_grid_advanced_3",
          "topic": "CSS Grid Item Placement",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the `grid-area` shorthand property for, and how is its four-value syntax interpreted?",
          "answer": "`grid-area` is a shorthand property used on a grid item to specify its size and location in the grid by contributing to all four `grid-*` line properties (row-start, column-start, row-end, column-end) or by referencing a named grid area.\n\nWhen using the four-value syntax (`row-start / column-start / row-end / column-end`), it defines the item's position:\n1.  `grid-row-start`\n2.  `grid-column-start`\n3.  `grid-row-end`\n4.  `grid-column-end`",
          "analysisPoints": [
            "Defines `grid-area`'s purpose.",
            "Explains the four-value shorthand interpretation.",
            "Highlights its dual use (named areas or line numbers)."
          ],
          "keyConcepts": [
            "grid-area",
            "Shorthand properties",
            "Grid lines",
            "Named Grid Areas"
          ],
          "evaluationCriteria": [
            "Accuracy of definition.",
            "Correct interpretation of shorthand values."
          ],
          "example": "An item placed with `grid-area: 2 / 3 / 4 / 5;` would start at row line 2, column line 3, and span until row line 4, column line 5.",
          "tags": [
            "CSS Grid",
            "Grid-area",
            "Shorthand",
            "Flashcard"
          ],
          "prerequisites": [
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_advanced_4",
          "topic": "CSS Grid Auto-Placement",
          "level": "easy",
          "type": "mcq",
          "question": "If a grid item is a direct child of a grid container but does not have `grid-row`, `grid-column`, or `grid-area` explicitly defined, how is it placed in the grid?",
          "answer": "It is automatically placed by the grid's auto-placement algorithm.",
          "options": [
            "It is ignored and not displayed.",
            "It behaves as a block-level element outside the grid.",
            "It is automatically placed by the grid's auto-placement algorithm.",
            "It takes up the entire first grid cell."
          ],
          "analysisPoints": [
            "Tests understanding of default grid behavior.",
            "Reinforces the concept of auto-placement.",
            "Differentiates auto-placement from manual placement."
          ],
          "keyConcepts": [
            "Auto-placement",
            "Grid Items",
            "Default behavior"
          ],
          "evaluationCriteria": [
            "Correct recall of default grid item behavior.",
            "Understanding of grid's implicit functionality."
          ],
          "example": "Grid items that are not explicitly positioned will be placed according to the `grid-auto-flow` property (defaulting to `row`), filling available cells sequentially.",
          "tags": [
            "CSS Grid",
            "Auto-placement",
            "MCQ"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 3,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_grid_advanced_5",
          "topic": "CSS Grid Template Areas",
          "level": "medium",
          "type": "code",
          "question": "Create the CSS for a `grid-template-areas` property that defines a layout with a full-width header, a sidebar on the left spanning two rows, main content, and a full-width footer. The main content should be next to the sidebar and occupy the second row. Use appropriate named areas.",
          "answer": "```css\n.page-layout {\n  display: grid;\n  grid-template-columns: 1fr 3fr; /* Example column definition */\n  grid-template-rows: auto 1fr auto; /* Example row definition */\n  grid-template-areas:\n    \"header header\"\n    \"sidebar main\"\n    \"sidebar footer\";\n}\n\n/* Example item assignments */\n.header-item { grid-area: header; }\n.sidebar-item { grid-area: sidebar; }\n.main-item { grid-area: main; }\n.footer-item { grid-area: footer; }\n```",
          "analysisPoints": [
            "Tests ability to translate layout requirements into `grid-template-areas` syntax.",
            "Checks understanding of how named areas span rows/columns.",
            "Ensures correct use of identical names for spanning."
          ],
          "keyConcepts": [
            "grid-template-areas",
            "Named Grid Areas",
            "Layout definition"
          ],
          "evaluationCriteria": [
            "Correct syntax for `grid-template-areas`.",
            "Accurate representation of the requested layout.",
            "Demonstrates understanding of area spanning."
          ],
          "example": "The solution defines a 2-column, 3-row grid. 'header' spans both columns in the first row. 'sidebar' spans the first column of the second and third rows. 'main' takes the second column of the second row, and 'footer' takes the second column of the third row.",
          "tags": [
            "CSS Grid",
            "Code Challenge",
            "Named Areas"
          ],
          "prerequisites": [
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_advanced_6",
          "topic": "CSS Grid `minmax()` Function",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the purpose of the `minmax()` function in CSS Grid, and what are its two arguments?",
          "answer": "The `minmax()` function defines a size range for a grid track (row or column). It ensures that the track will be no smaller than its `min` value and no larger than its `max` value.\n\nIts two arguments are:\n1.  **`min`**: The minimum size for the track.\n2.  **`max`**: The maximum size for the track.",
          "analysisPoints": [
            "Defines the function's purpose.",
            "Correctly identifies and explains its arguments.",
            "Highlights its role in responsive sizing."
          ],
          "keyConcepts": [
            "minmax()",
            "Grid Track Sizing",
            "Responsive Design"
          ],
          "evaluationCriteria": [
            "Accuracy of definition.",
            "Correct explanation of arguments.",
            "Understanding of utility."
          ],
          "example": "`grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));` means columns will be at least 250px, but can grow to fill available space.",
          "tags": [
            "CSS Grid",
            "minmax()",
            "Flashcard"
          ],
          "prerequisites": [
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_alignment_1",
          "topic": "CSS Grid Item Alignment",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following CSS properties would you apply to a **grid container** to vertically center all of its direct grid items within their respective grid cells?",
          "answer": "align-items: center;",
          "options": [
            "justify-items: center;",
            "align-content: center;",
            "align-items: center;",
            "justify-content: center;"
          ],
          "analysisPoints": [
            "Distinguishes `items` properties from `content` properties.",
            "Differentiates `align` (block/vertical) from `justify` (inline/horizontal).",
            "Focuses on property application to the container, affecting items."
          ],
          "keyConcepts": [
            "align-items",
            "justify-items",
            "Grid Item Alignment",
            "Grid Container"
          ],
          "evaluationCriteria": [
            "Correct identification of alignment property.",
            "Understanding of vertical vs. horizontal alignment.",
            "Knowledge of where properties are applied."
          ],
          "example": "Applying `align-items: center;` to the grid container ensures that each child item is centered vertically within its own grid cell.",
          "tags": [
            "CSS Grid",
            "Alignment",
            "MCQ"
          ],
          "prerequisites": [
            "CSS Grid Alignment"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_alignment_2",
          "topic": "CSS Grid Content Alignment",
          "level": "medium",
          "type": "open",
          "question": "Explain the difference between `justify-items: center;` and `justify-content: center;` when used on a CSS Grid container.",
          "answer": "**`justify-items: center;`**\n*   **Purpose:** Aligns individual *grid items* along the inline (horizontal) axis *within their respective grid cells*.\n*   **Effect:** If a grid item is smaller than its grid cell, `justify-items: center;` will center that item horizontally within that cell.\n*   **Analogy:** Think of centering the content *inside* each individual box.\n\n**`justify-content: center;`**\n*   **Purpose:** Aligns the *entire grid track structure* (the set of defined columns) along the inline (horizontal) axis *within the grid container*.\n*   **Effect:** This property only has an effect if there is extra space in the grid container after all columns have taken their defined size. It will then center the whole block of columns horizontally within the container.\n*   **Analogy:** Think of centering the entire layout of boxes within a larger canvas.\n\nIn summary, `justify-items` affects how individual items are positioned *inside their cells*, while `justify-content` affects how the *entire grid* is positioned *inside its container*.",
          "analysisPoints": [
            "Clearly distinguishes `items` vs. `content`.",
            "Explains the axis of alignment (horizontal/inline).",
            "Describes the conditions under which `justify-content` takes effect.",
            "Provides clear analogies for better understanding."
          ],
          "keyConcepts": [
            "justify-items",
            "justify-content",
            "Grid Item Alignment",
            "Grid Container Alignment",
            "Inline Axis"
          ],
          "evaluationCriteria": [
            "Accuracy of distinction.",
            "Depth of explanation.",
            "Clarity of examples/analogies."
          ],
          "example": "```css\n/* Centers items within their cells */\n.grid-items {\n  display: grid;\n  grid-template-columns: repeat(3, 100px);\n  justify-items: center;\n}\n\n/* Centers the whole grid track block within its container */\n.grid-content {\n  display: grid;\n  grid-template-columns: repeat(3, 100px); /* Total 300px */\n  width: 500px; /* Container wider than content */\n  justify-content: center;\n}\n```",
          "tags": [
            "CSS Grid",
            "Alignment",
            "Open-ended",
            "Advanced"
          ],
          "prerequisites": [
            "CSS Grid Alignment"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_css_grid_alignment_3",
          "topic": "CSS Grid Shorthand Alignment",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the shorthand property for `align-items` and `justify-items` in CSS Grid?",
          "answer": "`place-items`",
          "analysisPoints": [
            "Recalls the specific shorthand property.",
            "Connects it to item-level alignment."
          ],
          "keyConcepts": [
            "place-items",
            "align-items",
            "justify-items",
            "Shorthand properties"
          ],
          "evaluationCriteria": [
            "Direct recall of shorthand name.",
            "Understanding its scope."
          ],
          "example": "`place-items: center;` is equivalent to `align-items: center; justify-items: center;`.",
          "tags": [
            "CSS Grid",
            "Alignment",
            "Shorthand",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Grid Alignment"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_grid_alignment_4",
          "topic": "CSS Grid Item Spanning",
          "level": "medium",
          "type": "mcq",
          "question": "You want a grid item to start at column line 2 and span across 3 columns. Which of the following CSS properties would achieve this?",
          "answer": "grid-column: 2 / span 3;",
          "options": [
            "grid-column: 2 / 5;",
            "grid-column: span 3 / 2;",
            "grid-column: 2 / span 3;",
            "grid-column: start 2 end 5;"
          ],
          "analysisPoints": [
            "Tests understanding of `grid-column` syntax.",
            "Checks knowledge of `span` keyword for relative placement.",
            "Distinguishes `span` from explicit line numbers."
          ],
          "keyConcepts": [
            "grid-column",
            "span keyword",
            "Grid lines"
          ],
          "evaluationCriteria": [
            "Correct application of `grid-column` syntax.",
            "Understanding of `span` keyword."
          ],
          "example": "`grid-column: 2 / span 3;` means the item starts at grid line 2 and extends for 3 column tracks. This is equivalent to `grid-column: 2 / 5;` (starting at line 2 and ending at line 5).",
          "tags": [
            "CSS Grid",
            "Item Placement",
            "MCQ"
          ],
          "prerequisites": [
            "CSS Grid Alignment"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_alignment_5",
          "topic": "CSS Grid Item Overriding Alignment",
          "level": "medium",
          "type": "flashcard",
          "question": "If a grid container has `place-items: center;`, but you want a specific grid item to align to its start vertically and end horizontally within its cell, what properties would you apply to that individual item?",
          "answer": "`align-self: start;` and `justify-self: end;`",
          "analysisPoints": [
            "Tests knowledge of `self` properties for individual item overrides.",
            "Correctly identifies vertical (`align`) and horizontal (`justify`) axes for `self` properties."
          ],
          "keyConcepts": [
            "align-self",
            "justify-self",
            "place-items",
            "Item-level override"
          ],
          "evaluationCriteria": [
            "Correct identification of item-specific alignment properties.",
            "Understanding of axis directions for `self` properties."
          ],
          "example": "While `place-items` on the container sets a default, `align-self` and `justify-self` on a child item provide fine-grained control for specific items.",
          "tags": [
            "CSS Grid",
            "Alignment",
            "Flashcard",
            "Advanced"
          ],
          "prerequisites": [
            "CSS Grid Alignment"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_css_grid_alignment_6",
          "topic": "CSS Grid `place-content` vs `place-items`",
          "level": "hard",
          "type": "open",
          "question": "In a CSS Grid layout, differentiate the use cases and effects of `place-content` and `place-items`.",
          "answer": "**`place-content`:**\n*   **Scope:** Applied to the **grid container**.\n*   **Effect:** Aligns the *entire grid tracks* (the grid itself) within the grid container. It takes effect when the grid container has more space than the total size of its grid tracks.\n*   **Shorthand for:** `align-content` (vertical alignment of grid tracks) and `justify-content` (horizontal alignment of grid tracks).\n*   **Use Case:** Centering a small grid in a large parent container, or distributing extra space around the grid when its overall size is less than the container's.\n\n**`place-items`:**\n*   **Scope:** Applied to the **grid container**.\n*   **Effect:** Aligns *individual grid items* within their respective grid cells. It takes effect when a grid item is smaller than the cell it occupies.\n*   **Shorthand for:** `align-items` (vertical alignment of items in cells) and `justify-items` (horizontal alignment of items in cells).\n*   **Use Case:** Centering text or an icon inside a single grid cell, or uniformly aligning all items in a grid to their start, end, or center within their cells.\n\n**Analogy:**\nImagine a framed picture (`grid container`) with several smaller photos (`grid items`) arranged in rows and columns (`grid tracks`) inside it. \n*   `place-content` moves the *entire arrangement of photos* within the frame.\n*   `place-items` moves each *individual photo* within its designated spot on the arrangement.",
          "analysisPoints": [
            "Clearly defines scope (container for both).",
            "Explains what each property aligns (`grid tracks` vs. `individual items`).",
            "Describes when each property has an effect (extra space in container vs. item smaller than cell).",
            "Identifies shorthanded properties for each.",
            "Provides clear use cases and an effective analogy."
          ],
          "keyConcepts": [
            "place-content",
            "place-items",
            "Grid Container Alignment",
            "Grid Item Alignment",
            "Shorthand properties"
          ],
          "evaluationCriteria": [
            "Comprehensive and accurate differentiation.",
            "Clear explanation of effects and use cases.",
            "Helpful analogy."
          ],
          "example": "```css\n.container-content-aligned {\n  display: grid; place-content: center; /* Centers the whole grid */\n}\n\n.container-items-aligned {\n  display: grid; place-items: center;   /* Centers items within cells */\n}\n```",
          "tags": [
            "CSS Grid",
            "Alignment",
            "Open-ended",
            "Advanced"
          ],
          "prerequisites": [
            "CSS Grid Alignment"
          ],
          "complexity": 8,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_grid_flexbox_comparison_1",
          "topic": "Grid vs. Flexbox Fundamental Difference",
          "level": "easy",
          "type": "mcq",
          "question": "What is the primary conceptual difference between CSS Grid and Flexbox regarding layout dimensions?",
          "answer": "CSS Grid is for two-dimensional layouts (rows and columns), while Flexbox is for one-dimensional layouts (either rows or columns).",
          "options": [
            "CSS Grid is for responsive design, while Flexbox is for fixed design.",
            "CSS Grid is for two-dimensional layouts (rows and columns), while Flexbox is for one-dimensional layouts (either rows or columns).",
            "CSS Grid is for complex animations, while Flexbox is for simple alignments.",
            "CSS Grid is for server-side rendering, while Flexbox is for client-side rendering."
          ],
          "analysisPoints": [
            "Tests fundamental understanding of their design purposes.",
            "Highlights the key difference in dimensionality.",
            "Distinguishes core functionality from secondary features or unrelated concepts."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "Dimensionality",
            "Layout"
          ],
          "evaluationCriteria": [
            "Correct identification of primary distinction.",
            "Avoidance of misleading options."
          ],
          "example": "This is a foundational concept. Grid's strength lies in defining a grid across both axes, while Flexbox arranges items along a single axis.",
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Comparison",
            "Fundamentals",
            "MCQ"
          ],
          "prerequisites": [],
          "complexity": 4,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_grid_flexbox_comparison_2",
          "topic": "Grid vs. Flexbox Use Cases",
          "level": "medium",
          "type": "open",
          "question": "You are designing a webpage. For which part of the layout would you typically choose CSS Grid, and for which part would you choose Flexbox? Provide examples for both.",
          "answer": "**CSS Grid Use Case (Macro-Layout):**\nCSS Grid is ideal for defining the overall page structure and complex, asymmetrical layouts because it operates in two dimensions (rows AND columns). It allows you to precisely place major regions of your page.\n*   **Example:** Laying out the main `header`, `sidebar`, `content` area, and `footer` of a website. You can define specific column widths and row heights for these sections and place them visually using `grid-template-areas`.\n\n**Flexbox Use Case (Micro-Layout):**\nFlexbox is best suited for arranging items within a single dimension (either a row OR a column) and for distributing space and aligning items within components. It's great for smaller-scale layouts.\n*   **Example:** Arranging navigation links within a `header` (e.g., `display: flex; justify-content: space-between;` for links). Another example is aligning items within a product card, such as an image, title, and price, where you might want them stacked vertically (`flex-direction: column;`) or aligned horizontally (`align-items: center;`).\n\n**Summary:** Use Grid for the big picture (page layout) and Flexbox for the details (component layout within grid areas).",
          "analysisPoints": [
            "Identifies Grid for macro-layouts and Flexbox for micro-layouts.",
            "Provides clear, relevant examples for each.",
            "Reinforces the 2D vs. 1D distinction in practical terms.",
            "Highlights the common pattern of combining them."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "Layout Strategy",
            "Macro-layout",
            "Micro-layout"
          ],
          "evaluationCriteria": [
            "Clarity of explanation.",
            "Appropriateness of examples.",
            "Demonstrates understanding of best practices."
          ],
          "example": "```html\n<div class=\"grid-page-layout\">\n  <header class=\"flex-nav\"></header>\n  <aside class=\"grid-sidebar\"></aside>\n  <main class=\"grid-content\">\n    <div class=\"flex-cards\"></div>\n  </main>\n  <footer class=\"grid-footer\"></footer>\n</div>\n```\nHere, `grid-page-layout` uses Grid, while `flex-nav` and `flex-cards` use Flexbox within grid areas.",
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Comparison",
            "Use Cases",
            "Open-ended"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Flexbox Fundamentals"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_grid_flexbox_comparison_3",
          "topic": "Grid vs. Flexbox Overlapping Elements",
          "level": "medium",
          "type": "flashcard",
          "question": "Which CSS layout system, Grid or Flexbox, is natively designed to handle overlapping elements easily, and why?",
          "answer": "CSS Grid is natively designed to handle overlapping elements easily because it allows multiple grid items to occupy the same grid cell. This is not possible with Flexbox, where items are arranged in a strict sequence along a single axis.",
          "analysisPoints": [
            "Identifies Grid as the system for overlapping.",
            "Explains the underlying reason (multiple items per cell in Grid, sequential in Flexbox).",
            "Highlights a limitation of Flexbox in this regard."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "Overlapping Elements",
            "Grid Cells"
          ],
          "evaluationCriteria": [
            "Correct identification and reasoning.",
            "Understanding of intrinsic capabilities."
          ],
          "example": "In CSS Grid, you can explicitly place two items in `grid-area: 1 / 1 / 2 / 2;` and they will overlap. In Flexbox, items occupy distinct spaces.",
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Comparison",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Flexbox Fundamentals"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_grid_flexbox_comparison_4",
          "topic": "Grid vs. Flexbox Reordering",
          "level": "medium",
          "type": "mcq",
          "question": "Which property allows you to easily reorder grid/flex items visually, independent of their source order in the HTML, and which layout system is it primarily associated with?",
          "answer": "`order` property, primarily associated with Flexbox.",
          "options": [
            "`z-index` property, primarily associated with CSS Grid.",
            "`grid-auto-flow` property, primarily associated with CSS Grid.",
            "`order` property, primarily associated with Flexbox.",
            "`flex-wrap` property, primarily associated with Flexbox."
          ],
          "analysisPoints": [
            "Tests knowledge of the `order` property.",
            "Correctly associates `order` with Flexbox.",
            "Differentiates from other layout/visual properties."
          ],
          "keyConcepts": [
            "order property",
            "Flexbox",
            "Reordering",
            "Accessibility"
          ],
          "evaluationCriteria": [
            "Correct identification of property and associated technology.",
            "Understanding of visual reordering concept."
          ],
          "example": "While Grid allows reordering via `grid-area` or explicit line placement, Flexbox's `order` property is specifically designed for simple linear reordering along a single axis, which is often crucial for responsive layouts.",
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Comparison",
            "Order Property",
            "MCQ"
          ],
          "prerequisites": [
            "Flexbox Fundamentals"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_grid_flexbox_comparison_5",
          "topic": "Combining Grid and Flexbox",
          "level": "easy",
          "type": "flashcard",
          "question": "Is it possible and recommended to use CSS Grid and Flexbox together in a single web page layout? If so, why?",
          "answer": "Yes, it is highly possible and recommended. The reason is that they complement each other: Grid is for macro-level, two-dimensional page layouts, while Flexbox is for micro-level, one-dimensional component layouts. Combining them allows for robust and flexible designs.",
          "analysisPoints": [
            "Confirms possibility and recommendation.",
            "Explains the synergy based on their respective strengths (macro/micro, 2D/1D)."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "Combination",
            "Best Practices",
            "Layout Strategy"
          ],
          "evaluationCriteria": [
            "Direct recall of best practice.",
            "Understanding of complementary roles."
          ],
          "example": "A common pattern is to use Grid for the main `header`, `sidebar`, `main`, `footer` layout, and then use Flexbox inside the `header` for navigation items, or inside `main` for aligning a set of cards.",
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Combination",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Flexbox Fundamentals"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_grid_flexbox_comparison_6",
          "topic": "Grid vs. Flexbox: Content Sizing",
          "level": "medium",
          "type": "mcq",
          "question": "Which layout system is generally more suitable when the size of the content within the items should primarily dictate the layout, especially for flexible distribution along a single axis?",
          "answer": "Flexbox",
          "options": [
            "CSS Grid",
            "Flexbox",
            "CSS Tables",
            "CSS Floats"
          ],
          "analysisPoints": [
            "Tests understanding of Flexbox's content-driven sizing model.",
            "Highlights its strength in single-axis distribution based on content.",
            "Differentiates from Grid's more explicit track-based sizing."
          ],
          "keyConcepts": [
            "Flexbox",
            "Content Sizing",
            "Single-dimensional Layout",
            "Flex-grow",
            "Flex-shrink"
          ],
          "evaluationCriteria": [
            "Correct selection based on core design principle.",
            "Understanding of 'content dictates layout' concept."
          ],
          "example": "Flexbox's `flex-grow`, `flex-shrink`, and `flex-basis` properties are designed to manage space distribution based on the content's intrinsic size along the main axis.",
          "tags": [
            "Flexbox",
            "Comparison",
            "Content Sizing",
            "MCQ"
          ],
          "prerequisites": [
            "Flexbox Fundamentals"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_grid_flexbox_comparison_7",
          "topic": "CSS Grid vs. Flexbox Decision Making",
          "level": "hard",
          "type": "open",
          "question": "You are building a complex component that needs to dynamically adapt to different screen sizes and display items in a structured manner. The items themselves need to be aligned and spaced. Discuss how you would decide whether to use CSS Grid, Flexbox, or a combination, providing specific considerations.",
          "answer": "When building a complex component, the choice between CSS Grid, Flexbox, or a combination largely depends on the component's internal structure and how its items need to relate to each other and to the overall component boundaries.\n\n**Considerations:**\n1.  **Dimensionality of the Primary Layout:**\n    *   If the component arranges items in a strict **two-dimensional pattern** (e.g., a calendar grid, a dashboard with distinct widgets in rows and columns), **CSS Grid** is the prime candidate. It allows defining both rows and columns explicitly.\n    *   If the component primarily arranges items along a **single axis** (e.g., a navigation bar, a list of tags, buttons in a toolbar, items within a single product card), **Flexbox** is more appropriate. It excels at distributing space and aligning items along one direction.\n\n2.  **Content-driven vs. Layout-driven Sizing:**\n    *   If the **content's intrinsic size** should primarily influence how space is distributed (e.g., a flexible navigation where link width varies, a series of text boxes that grow/shrink), **Flexbox** is excellent due to `flex-grow`, `flex-shrink`, `flex-basis`.\n    *   If you need **precise control over track sizes** (e.g., fixed-width sidebar, specific column for an image, responsive columns with `minmax()`), **CSS Grid** offers more granular control.\n\n3.  **Item Independence vs. Relation:**\n    *   **CSS Grid** creates a grid that its children fit into, making them relate to the overall grid structure. It's powerful for 'layout first' thinking where the container dictates the slots.\n    *   **Flexbox** treats children as a group, distributing space among them and aligning them relative to each other within the single axis. It's good for 'content first' thinking where items influence each other's positioning.\n\n4.  **Overlapping Elements:**\n    *   If items need to **overlap** (e.g., a background image with text overlay, layered UI elements), **CSS Grid** is the only one that naturally supports this by allowing multiple items in the same cell.\n\n5.  **Reordering:**\n    *   For simple **linear reordering** of items for different screen sizes, **Flexbox's `order` property** is very convenient.\n    *   While Grid allows reordering via explicit placement, `order` in Flexbox is often simpler for single-axis changes.\n\n**Combination Strategy (Most Common):**\nOften, the best approach is to use a combination:\n*   Use **CSS Grid** for the **macro-layout** of the component itself (e.g., if the component has distinct header, body, footer sections, or a multi-column internal structure).\n*   Use **Flexbox** for the **micro-layout** *within* the grid cells (e.g., aligning buttons within a component's header, distributing items in a list inside a grid-defined section).\n\nThis allows leveraging Grid's powerful 2D structural capabilities while benefiting from Flexbox's fine-grained 1D alignment and distribution within those structures, leading to highly robust and maintainable responsive components.",
          "analysisPoints": [
            "Covers key decision factors: dimensionality, sizing influence, item relations, overlapping, reordering.",
            "Provides specific scenarios/examples for each consideration.",
            "Emphasizes the common and effective combination strategy.",
            "Articulates the strengths of each technology in a decision-making context."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "Layout Strategy",
            "Decision Making",
            "Responsive Design",
            "Combination",
            "Macro-layout",
            "Micro-layout"
          ],
          "evaluationCriteria": [
            "Comprehensive and structured argument.",
            "Demonstrates deep understanding of both technologies.",
            "Offers practical decision-making guidance.",
            "Clear and concise language."
          ],
          "example": "A product card component might use Flexbox internally to arrange an image, title, and price vertically, but then be placed within a larger Grid layout for a responsive product gallery.",
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Comparison",
            "Strategy",
            "Open-ended",
            "Expert"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Advanced CSS Grid Layouts",
            "Flexbox Fundamentals"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "expert"
        }
      ],
      "tasks": [
        {
          "id": "task_grid_basic_layout",
          "title": "Create a Basic Responsive Card Grid",
          "description": "\nImplement a responsive grid layout using CSS Grid. The grid should display a series of cards. Your goal is to:\n\n1.  Create a container with `display: grid`.\n2.  Define columns that are `repeat(auto-fill, minmax(250px, 1fr))`. This should ensure that cards are at least 250px wide and grow to fill the available space, with as many columns as fit.\n3.  Add a `gap` of 20px between the cards.\n4.  Style the individual `.card` items with a background color, padding, and a border for visibility.\n5.  Ensure the layout adapts gracefully when the browser window is resized.\n",
          "difficulty": "medium",
          "startingCode": "```html\n<div class=\"card-grid-container\">\n  <div class=\"card\">Card 1</div>\n  <div class=\"card\">Card 2</div>\n  <div class=\"card\">Card 3</div>\n  <div class=\"card\">Card 4</div>\n  <div class=\"card\">Card 5</div>\n  <div class=\"card\">Card 6</div>\n</div>\n```\n```css\n.card-grid-container {\n  /* Your CSS here */\n  padding: 20px;\n  background-color: #f5f5f5;\n}\n\n.card {\n  background-color: #ffffff;\n  border: 1px solid #e0e0e0;\n  padding: 20px;\n  text-align: center;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  border-radius: 8px;\n  font-family: sans-serif;\n}\n```",
          "solutionCode": "```html\n<div class=\"card-grid-container\">\n  <div class=\"card\">Card 1</div>\n  <div class=\"card\">Card 2</div>\n  <div class=\"card\">Card 3</div>\n  <div class=\"card\">Card 4</div>\n  <div class=\"card\">Card 5</div>\n  <div class=\"card\">Card 6</div>\n  <div class=\"card\">Card 7</div>\n  <div class=\"card\">Card 8</div>\n  <div class=\"card\">Card 9</div>\n</div>\n```\n```css\n.card-grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n  padding: 20px;\n  background-color: #f5f5f5;\n}\n\n.card {\n  background-color: #ffffff;\n  border: 1px solid #e0e0e0;\n  padding: 20px;\n  text-align: center;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  border-radius: 8px;\n  font-family: sans-serif;\n}\n```",
          "testCases": [
            "**Test Case 1: Wide Viewport**\nExpected: Multiple columns of cards (e.g., 4 or more), with cards spanning evenly to fill the width. All cards should be at least 250px wide.\n",
            "**Test Case 2: Narrow Viewport**\nExpected: Fewer columns (e.g., 1 or 2 columns), with cards growing to fill the available width (up to 1fr) while maintaining minimum 250px width. Cards should wrap to new rows as needed.\n",
            "**Test Case 3: Edge Case (Small Width)**\nExpected: If viewport is less than 250px, cards should still be 250px wide and cause horizontal scrolling (as `minmax` ensures minimum width).\n",
            "**Test Case 4: Gap Verification**\nExpected: A consistent 20px space between all cards, both horizontally and vertically, but no gap around the outer edge of the container itself (only padding if added).\n"
          ],
          "hints": [
            "Remember to use `repeat()` and `minmax()` together for the responsive column definition.",
            "The `auto-fill` keyword is crucial for fitting as many columns as possible.",
            "The `gap` property is a shorthand for both `row-gap` and `column-gap`."
          ],
          "tags": [
            "CSS Grid",
            "Responsive Design",
            "Layout",
            "minmax",
            "auto-fill"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "fr unit",
            "gap property",
            "grid-template-columns"
          ]
        },
        {
          "id": "task_grid_named_area_layout",
          "title": "Build a Blog Post Layout with Named Grid Areas",
          "description": "\nCreate a typical blog post layout using CSS Grid's named areas. The layout should have:\n\n1.  A main container (`.blog-post-layout`).\n2.  A `header` section spanning all columns.\n3.  A `sidebar` on the left, an `article` (main content) in the middle, and an `aside` on the right, all in the same row.\n4.  A `footer` section spanning all columns.\n5.  Define appropriate grid-template-columns (e.g., `1fr 4fr 1fr`) and grid-template-rows (e.g., `auto 1fr auto`).\n6.  Assign named areas to each section and apply them to the corresponding HTML elements.\n7.  Add basic styling (background, padding) to make sections visible.\n",
          "difficulty": "medium",
          "startingCode": "```html\n<div class=\"blog-post-layout\">\n  <header class=\"blog-header\"><h1>Post Title</h1></header>\n  <nav class=\"blog-sidebar\"><h3>Categories</h3><ul><li>CSS</li><li>HTML</li></ul></nav>\n  <main class=\"blog-article\"><p>This is the main content of the blog post.</p></main>\n  <aside class=\"blog-aside\"><h3>Related Posts</h3><p>Link 1</p></aside>\n  <footer class=\"blog-footer\"><p>&copy; 2023 Blog</p></footer>\n</div>\n```\n```css\n.blog-post-layout {\n  /* Your Grid CSS here */\n  min-height: 100vh;\n  gap: 15px;\n  background-color: #f8f8f8;\n  padding: 15px;\n}\n\n.blog-header { background-color: #e0f2f7; padding: 20px; text-align: center; }\n.blog-sidebar { background-color: #e6f7ff; padding: 20px; }\n.blog-article { background-color: #ffffff; padding: 20px; line-height: 1.6; }\n.blog-aside { background-color: #f0faff; padding: 20px; }\n.blog-footer { background-color: #cceeff; padding: 20px; text-align: center; }\n```",
          "solutionCode": "```html\n<div class=\"blog-post-layout\">\n  <header class=\"blog-header\"><h1>Post Title</h1></header>\n  <nav class=\"blog-sidebar\"><h3>Categories</h3><ul><li>CSS</li><li>HTML</li><li>JavaScript</li><li>React</li></ul></nav>\n  <main class=\"blog-article\"><h2>Understanding CSS Grid Layouts</h2><p>CSS Grid is a two-dimensional layout system for the web. It lets you lay out content in rows and columns. It's ideal for overall page layouts or complex, asymmetrical designs.</p><p>Compared to Flexbox, which is one-dimensional, Grid provides more control over both dimensions simultaneously, allowing for the creation of intricate web page structures with ease. Named areas simplify the visual organization of the layout.</p></main>\n  <aside class=\"blog-aside\"><h3>Related Posts</h3><ul><li><a href=\"#\">Flexbox vs. Grid</a></li><li><a href=\"#\">Responsive Images</a></li></ul></aside>\n  <footer class=\"blog-footer\"><p>&copy; 2023 My Blog</p></footer>\n</div>\n```\n```css\n.blog-post-layout {\n  display: grid;\n  grid-template-columns: 1fr 4fr 1fr; /* Example: sidebar, main, aside */\n  grid-template-rows: auto 1fr auto;   /* Example: header, content, footer */\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar article aside\"\n    \"footer footer footer\";\n  min-height: 100vh;\n  gap: 15px;\n  background-color: #f8f8f8;\n  padding: 15px;\n}\n\n.blog-header { grid-area: header; background-color: #e0f2f7; padding: 20px; text-align: center; }\n.blog-sidebar { grid-area: sidebar; background-color: #e6f7ff; padding: 20px; }\n.blog-article { grid-area: article; background-color: #ffffff; padding: 20px; line-height: 1.6; }\n.blog-aside { grid-area: aside; background-color: #f0faff; padding: 20px; }\n.blog-footer { grid-area: footer; background-color: #cceeff; padding: 20px; text-align: center; }\n```",
          "testCases": [
            "**Test Case 1: Structural Integrity**\nExpected: The header and footer should span the full width. The sidebar, article, and aside should align horizontally in the middle row, with the article being wider than the sidebar and aside.\n",
            "**Test Case 2: Content Responsiveness**\nExpected: The `article` area should expand vertically to accommodate its content. The `sidebar` and `aside` should match the height of the `article` due to `1fr` in `grid-template-rows` for the content area.\n",
            "**Test Case 3: Gap Verification**\nExpected: A consistent 15px gap between all grid tracks (rows and columns).\n",
            "**Test Case 4: Named Area Mapping**\nExpected: Confirm that each HTML element (e.g., `.blog-header`) is correctly placed in its designated grid area (`header`)."
          ],
          "hints": [
            "Start by defining your `grid-template-columns` and `grid-template-rows` for the three main rows and three main columns.",
            "The `grid-template-areas` property expects a string for each row. Use repeated names (e.g., `\"header header header\"`) to make an area span multiple columns.",
            "Remember to apply `grid-area: [area-name];` to each child element to assign it to its defined region."
          ],
          "tags": [
            "CSS Grid",
            "Layout",
            "Named Areas",
            "Frontend",
            "Blog Layout"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "relatedConcepts": [
            "grid-template-areas",
            "grid-area",
            "fr unit",
            "auto keyword"
          ]
        },
        {
          "id": "task_grid_aligned_gallery",
          "title": "Build a Centered Image Gallery with Grid Alignment",
          "description": "\nCreate a simple image gallery using CSS Grid that demonstrates item and content alignment.\n\n1.  Create a `.gallery-container` that is a grid.\n2.  Define columns that create a responsive layout using `repeat(auto-fit, minmax(180px, 1fr))`.\n3.  Ensure a `gap` of 15px between images.\n4.  Inside each grid cell, center its content (an image or a `div` representing an image) both horizontally and vertically. The images should have a fixed size (e.g., 150px x 150px) smaller than the `minmax` allows, so alignment is visible.\n5.  If the `.gallery-container` itself has more space than the total width of the grid tracks, center the *entire grid* horizontally within the container.\n",
          "difficulty": "medium",
          "startingCode": "```html\n<div class=\"gallery-wrapper\">\n  <div class=\"gallery-container\">\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 1\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 2\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 3\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 4\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 5\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 6\"></div>\n  </div>\n</div>\n```\n```css\n.gallery-wrapper {\n  width: 90%; /* Make wrapper wider to demonstrate content alignment */\n  max-width: 1200px;\n  margin: 50px auto; /* Center the wrapper */\n  border: 2px dashed #ccc;\n  padding: 20px;\n  background-color: #f9f9f9;\n}\n\n.gallery-container {\n  /* Your Grid CSS here */\n  background-color: #e0f0ff;\n  min-height: 400px; /* Give it some height to show vertical content alignment */\n}\n\n.gallery-item {\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 10px;\n  display: flex; /* To center the image within the item if it's smaller */\n  justify-content: center;\n  align-items: center;\n}\n\n.gallery-item img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n  border-radius: 4px;\n}\n```",
          "solutionCode": "```html\n<div class=\"gallery-wrapper\">\n  <div class=\"gallery-container\">\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 1\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 2\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 3\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 4\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 5\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 6\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 7\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 8\"></div>\n  </div>\n</div>\n```\n```css\n.gallery-wrapper {\n  width: 90%; /* Make wrapper wider to demonstrate content alignment */\n  max-width: 1200px;\n  margin: 50px auto; /* Center the wrapper */\n  border: 2px dashed #ccc;\n  padding: 20px;\n  background-color: #f9f9f9;\n}\n\n.gallery-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n  gap: 15px;\n  background-color: #e0f0ff;\n  min-height: 400px; /* Give it some height to show vertical content alignment */\n\n  /* Align individual items within their cells */\n  place-items: center; /* Shorthand for align-items: center; justify-items: center; */\n\n  /* Align the entire grid content within the container */\n  justify-content: center; /* Center horizontally */\n  align-content: center;   /* Center vertically, if there's extra vertical space */\n}\n\n.gallery-item {\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 10px;\n  /* The img inside is already centered using flex on the item itself */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.gallery-item img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n  border-radius: 4px;\n}\n```",
          "testCases": [
            "**Test Case 1: Item Centering**\nExpected: Each `.gallery-item` (and thus the `img` inside it) should be perfectly centered within its individual grid cell, both horizontally and vertically. This should be visible because the cell is larger than the 150px image.\n",
            "**Test Case 2: Grid Content Centering (Horizontal)**\nExpected: When the browser window is wide enough that the total width of the grid columns is less than the `.gallery-container`'s width, the *entire block of grid items* should be horizontally centered within `.gallery-container`.\n",
            "**Test Case 3: Grid Content Centering (Vertical)**\nExpected: If the `.gallery-container` has a `min-height` that makes it taller than the total height of its grid rows, the *entire block of grid items* should be vertically centered within `.gallery-container`.\n",
            "**Test Case 4: Responsiveness**\nExpected: As the browser window resizes, the number of columns should adjust (`auto-fit, minmax`), and the centering rules should remain applied correctly."
          ],
          "hints": [
            "To center items within their cells, consider `place-items` on the container.",
            "To center the entire grid within its container, consider `place-content` on the container.",
            "`auto-fit` will help ensure your items expand to fill the row when there aren't enough items for a full row."
          ],
          "tags": [
            "CSS Grid",
            "Alignment",
            "Responsive Design",
            "Gallery",
            "place-items",
            "place-content"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Advanced CSS Grid Layouts",
            "CSS Grid Alignment"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "relatedConcepts": [
            "justify-items",
            "align-items",
            "justify-content",
            "align-content",
            "minmax",
            "auto-fit"
          ]
        },
        {
          "id": "task_grid_flexbox_dashboard_layout",
          "title": "Build a Responsive Dashboard Layout Combining Grid and Flexbox",
          "description": "\nCreate a responsive dashboard layout that demonstrates the combined power of CSS Grid for macro-layout and Flexbox for micro-layout within components.\n\n1.  **Overall Layout (Grid):**\n    *   Create a main `.dashboard-layout` container using CSS Grid.\n    *   Define a layout with a header, a main content area, and a sidebar. The main content should be in the center, and the sidebar on the left.\n    *   Use `grid-template-areas` for a clear, readable structure (e.g., `header`, `sidebar`, `main`). Ensure the header spans all columns.\n    *   Columns could be `1fr 4fr` (sidebar, main). Rows could be `auto 1fr` (header, content).\n\n2.  **Dashboard Cards (Flexbox within Grid):**\n    *   Inside the `main` content area, create a container for `.dashboard-cards`.\n    *   Use **Flexbox** for `.dashboard-cards` to display multiple `.card` components. These cards should wrap to new lines, be evenly spaced, and grow/shrink flexibly.\n    *   Each `.card` should contain a title and some text, aligned vertically using Flexbox internally.\n\n3.  **Navigation (Flexbox within Header):**\n    *   Inside the `header`, create a `.nav-links` container.\n    *   Use **Flexbox** for `.nav-links` to display a horizontal list of navigation items, spaced appropriately (e.g., `space-around`).\n\n4.  Add basic styling to make all sections and components visible.\n",
          "difficulty": "hard",
          "startingCode": "```html\n<div class=\"dashboard-layout\">\n  <header class=\"dashboard-header\">\n    <h1>Dashboard</h1>\n    <nav class=\"nav-links\">\n      <a href=\"#\">Home</a>\n      <a href=\"#\">Analytics</a>\n      <a href=\"#\">Settings</a>\n    </nav>\n  </header>\n  <aside class=\"dashboard-sidebar\">\n    <h3>Navigation</h3>\n    <ul>\n      <li>Link 1</li>\n      <li>Link 2</li>\n      <li>Link 3</li>\n    </ul>\n  </aside>\n  <main class=\"dashboard-main-content\">\n    <h2>Overview</h2>\n    <div class=\"dashboard-cards\">\n      <div class=\"card\"><h4>Users</h4><p>1,234</p></div>\n      <div class=\"card\"><h4>Revenue</h4><p>$5,678</p></div>\n      <div class=\"card\"><h4>Orders</h4><p>901</p></div>\n      <div class=\"card\"><h4>Products</h4><p>256</p></div>\n    </div>\n  </main>\n</div>\n```\n```css\nbody {\n  margin: 0;\n  font-family: sans-serif;\n  background-color: #f0f2f5;\n}\n\n.dashboard-layout {\n  /* Grid properties here */\n  min-height: 100vh;\n  gap: 20px;\n}\n\n.dashboard-header {\n  background-color: #3f51b5;\n  color: white;\n  padding: 20px;\n  /* Flexbox for nav-links here */\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.nav-links {\n  /* Flexbox properties here */\n}\n\n.nav-links a {\n  color: white;\n  text-decoration: none;\n  padding: 8px 15px;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n}\n.nav-links a:hover { background-color: rgba(255,255,255,0.2); }\n\n.dashboard-sidebar {\n  background-color: #fff;\n  padding: 20px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n.dashboard-sidebar ul { list-style: none; padding: 0; }\n.dashboard-sidebar li { padding: 8px 0; border-bottom: 1px solid #eee; }\n\n.dashboard-main-content {\n  background-color: #fff;\n  padding: 20px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n.dashboard-cards {\n  /* Flexbox properties for cards here */\n  margin-top: 20px;\n  gap: 20px;\n}\n\n.card {\n  background-color: #e8f5e9;\n  border: 1px solid #c8e6c9;\n  padding: 15px;\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n  text-align: center;\n  /* Flexbox properties for card content */\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.card h4 { margin: 0 0 10px 0; color: #4caf50; }\n.card p { margin: 0; font-size: 1.5em; font-weight: bold; color: #333; }\n```",
          "solutionCode": "```html\n<div class=\"dashboard-layout\">\n  <header class=\"dashboard-header\">\n    <h1>Dashboard</h1>\n    <nav class=\"nav-links\">\n      <a href=\"#\">Home</a>\n      <a href=\"#\">Analytics</a>\n      <a href=\"#\">Reports</a>\n      <a href=\"#\">Settings</a>\n      <a href=\"#\">Profile</a>\n    </nav>\n  </header>\n  <aside class=\"dashboard-sidebar\">\n    <h3>Navigation</h3>\n    <ul>\n      <li>Link 1</li>\n      <li>Link 2</li>\n      <li>Link 3</li>\n      <li>Link 4</li>\n    </ul>\n  </aside>\n  <main class=\"dashboard-main-content\">\n    <h2>Overview</h2>\n    <div class=\"dashboard-cards\">\n      <div class=\"card\"><h4>Users</h4><p>1,234</p></div>\n      <div class=\"card\"><h4>Revenue</h4><p>$5,678</p></div>\n      <div class=\"card\"><h4>Orders</h4><p>901</p></div>\n      <div class=\"card\"><h4>Products</h4><p>256</p></div>\n      <div class=\"card\"><h4>Support Tickets</h4><p>42</p></div>\n      <div class=\"card\"><h4>Conversions</h4><p>12.5%</p></div>\n    </div>\n  </main>\n</div>\n```\n```css\nbody {\n  margin: 0;\n  font-family: sans-serif;\n  background-color: #f0f2f5;\n}\n\n.dashboard-layout {\n  display: grid;\n  grid-template-columns: 200px 1fr; /* Fixed sidebar, flexible main content */\n  grid-template-rows: auto 1fr; /* Header auto, content fills remaining */\n  grid-template-areas:\n    \"header header\"\n    \"sidebar main\";\n  min-height: 100vh;\n  gap: 20px;\n}\n\n.dashboard-header {\n  grid-area: header;\n  background-color: #3f51b5;\n  color: white;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.nav-links {\n  display: flex;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  gap: 15px; /* Spacing between nav items */\n}\n\n.nav-links a {\n  color: white;\n  text-decoration: none;\n  padding: 8px 15px;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n}\n.nav-links a:hover { background-color: rgba(255,255,255,0.2); }\n\n.dashboard-sidebar {\n  grid-area: sidebar;\n  background-color: #fff;\n  padding: 20px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n.dashboard-sidebar ul { list-style: none; padding: 0; }\n.dashboard-sidebar li { padding: 8px 0; border-bottom: 1px solid #eee; }\n\n.dashboard-main-content {\n  grid-area: main;\n  background-color: #fff;\n  padding: 20px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n.dashboard-cards {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around; /* Distribute cards in main content area */\n  margin-top: 20px;\n  gap: 20px;\n}\n\n.card {\n  background-color: #e8f5e9;\n  border: 1px solid #c8e6c9;\n  padding: 15px;\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n  text-align: center;\n  flex: 1 1 calc(33% - 40px); /* Flex grow/shrink, basis for ~3 cards per row with gap */\n  min-width: 200px; /* Ensure cards don't get too small */\n  max-width: 300px; /* Optional: limit card growth */\n  \n  /* Flexbox properties for card content */\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.card h4 { margin: 0 0 10px 0; color: #4caf50; }\n.card p { margin: 0; font-size: 1.5em; font-weight: bold; color: #333; }\n```",
          "testCases": [
            "**Test Case 1: Overall Grid Structure**\nExpected: Header spans the top. Sidebar is on the left, 200px wide. Main content fills the remaining space to the right of the sidebar. The main content area should take up the remaining vertical space after the header.\n",
            "**Test Case 2: Header Navigation Responsiveness (Flexbox)**\nExpected: Navigation links in the header should be horizontally distributed (e.g., `space-between` or `space-around`). As the viewport shrinks, they should maintain their spacing and potentially wrap or become crowded (depending on specific `justify-content` and `flex-wrap`).\n",
            "**Test Case 3: Dashboard Cards Responsiveness (Flexbox)**\nExpected: The cards within the main content area should wrap onto new lines as the viewport width changes. They should distribute space evenly and potentially grow/shrink (within `flex` property constraints) to fill their row. When narrow, they should stack vertically.\n",
            "**Test Case 4: Combination Integrity**\nExpected: Verify that changes to the grid layout (e.g., resizing columns) correctly affect the overall structure, and changes to Flexbox properties (e.g., `flex-direction` on cards) only affect the internal layout of the respective Flexbox container, demonstrating proper layering of Grid and Flexbox."
          ],
          "hints": [
            "For the main grid layout, define `grid-template-columns`, `grid-template-rows`, and `grid-template-areas` on `.dashboard-layout`.",
            "Assign `grid-area` to `dashboard-header`, `dashboard-sidebar`, and `dashboard-main-content`.",
            "For the navigation links within the header, use `display: flex` on `.nav-links` and consider `justify-content` for horizontal distribution.",
            "For the `.dashboard-cards` container, use `display: flex` and `flex-wrap: wrap`. For individual `.card` items, `flex: 1 1 auto;` or `flex: 1 1 calc(width - gap);` can help with flexible sizing and wrapping."
          ],
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Responsive Design",
            "Dashboard",
            "Layout Combination",
            "Advanced"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Advanced CSS Grid Layouts",
            "Flexbox Fundamentals",
            "CSS Grid Alignment"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "expert",
          "relatedConcepts": [
            "grid-template-areas",
            "flex-wrap",
            "justify-content",
            "align-items",
            "flex property",
            "responsive design principles"
          ]
        }
      ]
    }
  }
]