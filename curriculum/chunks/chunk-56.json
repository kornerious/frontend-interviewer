[
  {
    "id": "ae283dab-4a07-41f5-9615-89f841951e4f",
    "startLine": 11300,
    "endLine": 11399,
    "processedDate": "2025-06-17T12:17:58.636Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_indexeddb",
          "title": "IndexedDB: Client-Side NoSQL Database",
          "content": "IndexedDB is a low-level API for client-side storage of significant amounts of structured data, including files/blobs. It's a NoSQL database system built into browsers, providing a powerful alternative to `localStorage` or `sessionStorage` for more complex data storage needs.\n\n## Key Characteristics\n- **Persistence between sessions**: Data stored in IndexedDB remains available even after the user closes the browser or restarts their computer.\n- **Storage limit**: Significantly larger than `localStorage` (typically several hundred MBs, potentially more depending on browser and available disk space), making it suitable for large datasets.\n- **Supports complex data structures**: Can store JavaScript objects directly, including nested objects, arrays, Blobs, and Files, without needing explicit serialization/deserialization.\n- **Transactions and indexes**: Offers robust transaction support (ensuring data integrity and atomicity) and the ability to create indexes for efficient querying and searching, similar to traditional relational databases.\n- **Asynchronous API**: All operations are asynchronous, returning `IDBRequest` objects, which emit `success` or `error` events. This prevents blocking the main thread and keeps the UI responsive.\n- **Advanced Search Capabilities**: Allows searching data using cursors and indexes, providing more flexible and efficient query options compared to simple key-value stores.\n\n## Core Concepts\n- **Database (IDBDatabase)**: The top-level container for all data, identified by a name and version. Changes to the database structure (e.g., creating object stores, indexes) require incrementing the version.\n- **Object Store (IDBObjectStore)**: Similar to tables in a relational database. An object store holds records, where each record is a JavaScript object. Each object store must have a `keyPath` or `autoIncrement` property to uniquely identify records.\n- **Index (IDBIndex)**: A mechanism to efficiently look up records in an object store based on a specific property, similar to an index in a database table. Indexes can be unique or non-unique.\n- **Transaction (IDBTransaction)**: A crucial concept for ensuring data integrity. All read and write operations must occur within a transaction. Transactions are atomic: either all operations within them succeed, or none do. They can be `readonly` or `readwrite`.\n- **Request (IDBRequest)**: Most IndexedDB operations (e.g., `open`, `add`, `get`, `put`) return an `IDBRequest` object. The result of the operation is available in the `event.target.result` property of the `success` event handler.\n- **Cursor (IDBCursor)**: Used to iterate over records in an object store or index, allowing for efficient traversal and retrieval of multiple records.\n\n## IndexedDB Workflow Overview\n1.  **Open a Database**: Use `indexedDB.open()` to connect to an existing database or create a new one. This operation returns an `IDBOpenDBRequest`.\n2.  **Handle `onupgradeneeded`**: If the database version changes or it's created for the first time, this event fires. It's the *only* place where you can create or delete object stores and indexes.\n3.  **Handle `onsuccess`**: Once the database is successfully opened (or upgraded), this event fires. You can then start transactions to perform data operations.\n4.  **Perform Transactions**: Create a `readwrite` or `readonly` transaction on specific object stores. Get a reference to the `IDBObjectStore`.\n5.  **Data Operations (CRUD)**: Use methods like `add()`, `get()`, `put()`, `delete()`, `clear()` on the object store.\n6.  **Querying with Indexes**: Use `objectStore.index()` to get an `IDBIndex` object, then use methods like `get()` or `getAll()` on the index.\n7.  **Error Handling**: Always include `onerror` handlers for requests and transactions to gracefully manage failures.\n",
          "examples": [
            {
              "id": "example_indexeddb_open_setup",
              "title": "Opening Database and Creating Object Store/Indexes",
              "code": "const request = indexedDB.open('MyDatabase', 1);\n\nrequest.onupgradeneeded = function(event) {\n  const db = event.target.result;\n  // Create an object store named 'customers' with 'id' as the key path\n  const objectStore = db.createObjectStore('customers', { keyPath: 'id' });\n  \n  // Create indexes for faster searching\n  // 'name' index, based on 'name' property, not unique\n  objectStore.createIndex('name', 'name', { unique: false });\n  // 'email' index, based on 'email' property, must be unique\n  objectStore.createIndex('email', 'email', { unique: true });\n};\n\nrequest.onerror = function(event) {\n  console.error('Database error:', event.target.errorCode);\n};\n\nrequest.onsuccess = function(event) {\n  console.log('Database opened successfully.');\n  // Database is ready for transactions here\n  const db = event.target.result;\n  db.close(); // Close db after setup if no immediate operations\n};\n",
              "explanation": "This example demonstrates the initial setup for an IndexedDB database. It shows how to open a database, specify its version, and crucially, how to use the `onupgradeneeded` event to define object stores and create indexes. The `keyPath` defines the unique identifier for records, while `createIndex` allows for efficient retrieval of data based on other properties. Error handling is also included.",
              "language": "javascript"
            },
            {
              "id": "example_indexeddb_crud",
              "title": "Performing CRUD Operations",
              "code": "const request = indexedDB.open('MyDatabase', 1);\n\nrequest.onsuccess = function(event) {\n  const db = event.target.result;\n  \n  // Start a readwrite transaction for the 'customers' object store\n  const transaction = db.transaction(['customers'], 'readwrite');\n  const objectStore = transaction.objectStore('customers');\n  \n  // --- Add Data ---\n  const customerData = { id: 1, name: 'John Doe', email: 'john@example.com', age: 30 };\n  const addRequest = objectStore.add(customerData);\n  addRequest.onsuccess = () => console.log('Customer added:', customerData);\n  addRequest.onerror = (e) => console.error('Add error:', e.target.error);\n\n  // --- Read Data ---\n  const getRequest = objectStore.get(1);\n  getRequest.onsuccess = function(event) {\n    const customer = event.target.result;\n    console.log('Customer retrieved:', customer);\n  };\n  getRequest.onerror = (e) => console.error('Get error:', e.target.error);\n\n  // --- Update Data ---\n  // Note: 'put' can add if key doesn't exist, or update if it does.\n  const updatedCustomerData = { ...customerData, age: 31 };\n  const updateRequest = objectStore.put(updatedCustomerData);\n  updateRequest.onsuccess = () => console.log('Customer updated:', updatedCustomerData);\n  updateRequest.onerror = (e) => console.error('Update error:', e.target.error);\n  \n  // --- Delete Data ---\n  const deleteRequest = objectStore.delete(1);\n  deleteRequest.onsuccess = () => console.log('Customer deleted with ID 1.');\n  deleteRequest.onerror = (e) => console.error('Delete error:', e.target.error);\n\n  // --- Use an index to search ---\n  const nameIndex = objectStore.index('name');\n  const nameSearchRequest = nameIndex.getAll('John Doe'); // Get all records where 'name' is 'John Doe'\n  nameSearchRequest.onsuccess = function(event) {\n    const matches = event.target.result;\n    console.log('Customers with name \"John Doe\":', matches);\n  };\n  nameSearchRequest.onerror = (e) => console.error('Index search error:', e.target.error);\n\n  // A transaction completes when all its requests complete and there are no new requests.\n  transaction.oncomplete = () => console.log('Transaction completed.');\n  transaction.onerror = (e) => console.error('Transaction error:', e.target.error);\n};\n",
              "explanation": "This example illustrates performing common CRUD (Create, Read, Update, Delete) operations using IndexedDB within a `readwrite` transaction. It demonstrates `add()` for inserting new records, `get()` for retrieving by `keyPath`, `put()` for updating existing records (or adding if not present), and `delete()` for removing records. Crucially, it also shows how to leverage a previously defined index (`nameIndex`) to search for records based on a non-key property using `getAll()`. Each operation is asynchronous and uses `onsuccess`/`onerror` callbacks.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_indexeddb_mcq_1",
            "question_indexeddb_open_1",
            "question_indexeddb_code_1",
            "question_indexeddb_flashcard_1",
            "question_indexeddb_mcq_2",
            "question_indexeddb_open_2",
            "question_indexeddb_flashcard_2"
          ],
          "relatedTasks": [
            "task_indexeddb_crud_manager",
            "task_indexeddb_search_filter"
          ],
          "tags": [
            "IndexedDB",
            "Client-Side Storage",
            "Offline",
            "Persistence",
            "Database",
            "NoSQL"
          ],
          "technology": "Web APIs",
          "prerequisites": [
            "Asynchronous JavaScript",
            "Event Handling",
            "Promises (basic understanding)"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "requiredFor": [
            "Progressive Web Apps",
            "Offline-first Applications",
            "Large-scale Client-side Data Management"
          ]
        },
        {
          "id": "theory_service_workers",
          "title": "Service Workers: Enhancing Offline Experiences and Performance",
          "content": "Service Workers are a type of Web Worker (though with distinct capabilities) that act as a programmable network proxy, sitting between your web application and the network. They enable powerful features like offline experiences, push notifications, and background synchronization by intercepting network requests and caching assets.\n\n## Key Characteristics and Benefits\n- **Offline Capabilities**: The most prominent feature. Service Workers can cache static assets (HTML, CSS, JS, images), API responses, and other resources. When a user is offline or has a poor network connection, the Service Worker can serve content directly from the cache, providing a seamless user experience.\n- **Network Interception**: They can intercept network requests made by the page and decide how to respond – either by serving cached content, fetching from the network, or a combination.\n- **Background Sync**: Allows deferring actions until the user has stable connectivity. For example, sending an email when online again.\n- **Push Notifications**: Enables web applications to receive messages pushed from a server even when the user is not actively using the application.\n- **Performance Improvement**: By caching assets, Service Workers can drastically reduce page load times for returning visitors.\n- **Lifecycle**: Service Workers have a distinct lifecycle (installing, installed/waiting, activating, activated). Updates involve a new Service Worker installing in the background and waiting to activate until all controlled pages are closed.\n- **HTTPS Only**: For security reasons, Service Workers can only be registered and used over HTTPS (or `localhost`).\n\n## Integration with Create React App\n`create-react-app` (CRA) projects include a default Service Worker setup that provides out-of-the-box offline capabilities. By default, it uses Workbox, a Google library for Service Workers, to pre-cache all static assets built by webpack.\n\n- **`serviceWorker.register()`**: This function, typically found in `src/index.js` in a CRA project, initiates the Service Worker registration process. When called, the browser attempts to download and install the `service-worker.js` file.\n- **`serviceWorker.unregister()`**: If you wish to disable the default Service Worker (e.g., if you don't need offline capabilities or want to implement your own), you can call this function. This unregisters the Service Worker and clears any caches it manages.\n\n## How it Works (Simplified)\n1.  **Registration**: Your main script calls `navigator.serviceWorker.register('./service-worker.js')`.\n2.  **Installation**: The browser downloads `service-worker.js`. In the `install` event, the Service Worker typically pre-caches essential assets.\n3.  **Activation**: After successful installation, the `activate` event fires. At this point, the Service Worker takes control of the page.\n4.  **Fetching**: For subsequent page loads and network requests, the Service Worker intercepts them via the `fetch` event. It can then decide whether to serve from cache (`CacheStorage` API), fetch from the network, or a combination (e.g., 'cache first, then network' strategy).\n",
          "examples": [
            {
              "id": "example_service_worker_cra_default",
              "title": "Default Service Worker in Create React App",
              "code": "// In src/index.js of a create-react-app project\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; // Imports the default service worker logic\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Register the service worker for offline capabilities\n// This function handles the registration and lifecycle events for you.\nserviceWorker.register();\n\n// If you want to opt-out of the default service worker, use:\n// serviceWorker.unregister();\n",
              "explanation": "This example shows the standard `index.js` file from a Create React App project. The `import * as serviceWorker from './serviceWorker';` line imports a utility module provided by CRA. Calling `serviceWorker.register()` enables the default offline caching behavior. Calling `serviceWorker.unregister()` disables it, which might be useful if you're not building a PWA or want to implement custom caching strategies.",
              "language": "javascript"
            },
            {
              "id": "example_service_worker_fetch_strategy",
              "title": "Service Worker Cache-First Fetch Strategy (Conceptual)",
              "code": "// Inside service-worker.js (conceptual, simplified)\n\nconst CACHE_NAME = 'my-app-cache-v1';\nconst urlsToCache = [\n  '/',\n  '/index.html',\n  '/styles/main.css',\n  '/scripts/app.js',\n  '/images/logo.png'\n];\n\nself.addEventListener('install', event => {\n  console.log('Service Worker: Installing...');\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('Service Worker: Caching app shell');\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        // Cache hit - return response\n        if (response) {\n          console.log('Service Worker: Serving from cache:', event.request.url);\n          return response;\n        }\n        // No cache hit - fetch from network\n        console.log('Service Worker: Fetching from network:', event.request.url);\n        return fetch(event.request);\n      })\n  );\n});\n\nself.addEventListener('activate', event => {\n  console.log('Service Worker: Activating...');\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Service Worker: Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n",
              "explanation": "This conceptual example illustrates a common 'cache-first' strategy within a `service-worker.js` file. During the `install` event, essential static assets (`urlsToCache`) are pre-cached. In the `fetch` event, the Service Worker first checks if the requested resource is in the cache (`caches.match`). If found, it serves from the cache immediately. Otherwise, it fetches the resource from the network. The `activate` event is used to clean up old caches, ensuring only the current version's assets are retained.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_service_worker_mcq_1",
            "question_service_worker_open_1",
            "question_service_worker_code_1",
            "question_service_worker_flashcard_1",
            "question_service_worker_mcq_2",
            "question_service_worker_open_2",
            "question_service_worker_flashcard_2"
          ],
          "relatedTasks": [
            "task_service_worker_offline_page",
            "task_service_worker_dynamic_caching"
          ],
          "tags": [
            "Service Workers",
            "PWA",
            "Offline",
            "Caching",
            "Web APIs",
            "Performance",
            "React",
            "Create React App"
          ],
          "technology": "Web APIs",
          "prerequisites": [
            "Asynchronous JavaScript",
            "HTTP/Network basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "Progressive Web Apps",
            "Offline-first Applications",
            "Frontend Performance Optimization"
          ]
        },
        {
          "id": "theory_web_workers",
          "title": "Web Workers: Running Scripts in Background Threads",
          "content": "Web Workers provide a way to run scripts in a background thread, separate from the main thread of execution (where the user interface and most JavaScript runs). This prevents long-running or computationally intensive tasks from blocking the UI, ensuring a smoother and more responsive user experience.\n\n## Key Characteristics and Benefits\n- **Non-blocking UI**: The primary benefit. By offloading heavy computations to a background thread, the main thread remains free to handle user interactions, animations, and rendering, preventing UI freezes.\n- **Concurrency**: Allows for parallel execution of JavaScript code.\n- **Message-based Communication**: Web Workers communicate with the main thread (and other workers) by sending messages using `postMessage()` and receiving messages via the `onmessage` event handler.\n- **Isolated Global Scope**: Each worker runs in its own global context, different from the `window` object of the main thread.\n- **Limitations**: Web Workers do *not* have direct access to the DOM (`document` object), the `window` object, or many global variables/functions available on the main thread. They also cannot access local storage or IndexedDB directly (though they can communicate with the main thread to request such operations).\n- **Types of Workers**: Besides Dedicated Workers (the most common type, one worker per script), there are also Shared Workers (multiple scripts can access the same worker instance) and Service Workers (a specific type for network proxying and offline capabilities, as discussed previously).\n\n## Basic Usage\n1.  **Create a Worker Instance**: In the main thread, instantiate a `Worker` object, providing the URL of the worker script.\n2.  **Send Messages**: Use `worker.postMessage(data)` to send data (which is copied, not shared) from the main thread to the worker, or vice-versa.\n3.  **Receive Messages**: Set up an `onmessage` event handler on the worker instance (in the main thread) or `self.onmessage` (in the worker script) to receive messages.\n4.  **Terminate Worker**: Use `worker.terminate()` to immediately stop the worker, freeing up resources.\n",
          "examples": [
            {
              "id": "example_web_worker_basic",
              "title": "Basic Web Worker Communication",
              "code": "// In main.js (or directly in your HTML script)\nconst worker = new Worker('worker.js'); // Create a new Web Worker instance\n\n// Listen for messages from the worker\nworker.onmessage = function(event) {\n  console.log('Main thread received from Worker:', event.data);\n};\n\n// Handle errors from the worker\nworker.onerror = function(error) {\n  console.error('Web Worker Error:', error);\n};\n\n// Send a message to the worker\nworker.postMessage('Hello Worker from Main Thread!');\n\n// You can also terminate the worker when no longer needed\n// setTimeout(() => {\n//   worker.terminate();\n//   console.log('Worker terminated.');\n// }, 5000);\n\n// In worker.js\nself.onmessage = function(event) {\n  const receivedData = event.data;\n  console.log('Worker received from Main Thread:', receivedData);\n  \n  // Perform some heavy computation (example)\n  let sum = 0;\n  for (let i = 0; i < 1000000000; i++) {\n    sum += i;\n  }\n  \n  // Send a message back to the main thread\n  self.postMessage(`Computation finished! Sum: ${sum}`);\n};\n\nself.onerror = function(error) {\n  console.error('Worker Script Error:', error);\n};\n",
              "explanation": "This example demonstrates the fundamental communication pattern between the main thread and a Web Worker. The `main.js` script creates a `Worker` instance and sends a message using `postMessage()`. It then listens for messages back from the worker using `onmessage`. The `worker.js` script receives the message via `self.onmessage`, performs a simulated heavy computation, and then sends the result back to the main thread using `self.postMessage()`. This allows the heavy task to run without freezing the UI.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_web_worker_mcq_1",
            "question_web_worker_open_1",
            "question_web_worker_code_1",
            "question_web_worker_flashcard_1",
            "question_web_worker_mcq_2",
            "question_web_worker_open_2",
            "question_web_worker_flashcard_2"
          ],
          "relatedTasks": [
            "task_web_worker_heavy_computation",
            "task_web_worker_progress_reporting"
          ],
          "tags": [
            "Web Workers",
            "Concurrency",
            "Background Threads",
            "Performance",
            "Asynchronous JavaScript",
            "Web APIs"
          ],
          "technology": "Web APIs",
          "prerequisites": [
            "Asynchronous JavaScript",
            "Event Handling"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "High-Performance Web Applications",
            "Complex Data Processing",
            "Real-time Applications"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_indexeddb_mcq_1",
          "topic": "IndexedDB Characteristics",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following is NOT a key characteristic of IndexedDB?",
          "answer": "Synchronous API that blocks the main thread",
          "options": [
            "Persistence between sessions",
            "Supports complex data structures (including blobs)",
            "Synchronous API that blocks the main thread",
            "Provides transactions and indexes for data integrity and search"
          ],
          "analysisPoints": [
            "IndexedDB is designed to be asynchronous to prevent blocking the main thread and ensure a responsive user interface.",
            "It stores data persistently across browser sessions.",
            "It can handle various complex data structures beyond simple key-value pairs.",
            "Transactions and indexes are fundamental features for data management and efficient querying."
          ],
          "keyConcepts": [
            "IndexedDB",
            "Asynchronous",
            "Persistence",
            "Transactions"
          ],
          "evaluationCriteria": [
            "Understanding of fundamental IndexedDB properties",
            "Ability to distinguish correct vs. incorrect characteristics"
          ],
          "example": "IndexedDB's asynchronous nature is crucial for smooth web application performance. Operations return `IDBRequest` objects, and results are handled via `onsuccess` or `onerror` callbacks, ensuring the main thread remains free.",
          "tags": [
            "IndexedDB",
            "Fundamentals",
            "Characteristics"
          ],
          "prerequisites": [
            "Asynchronous JavaScript"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_indexeddb_open_1",
          "topic": "IndexedDB `onupgradeneeded` Event",
          "level": "medium",
          "type": "open",
          "question": "Explain the purpose of the `onupgradeneeded` event in IndexedDB. When does it get triggered, and what operations are typically performed within its handler?",
          "answer": "The `onupgradeneeded` event in IndexedDB is a crucial lifecycle event that gets triggered under two main conditions: (1) when the database is being created for the first time, or (2) when a database is being opened with a version number higher than its current version. Its primary purpose is to allow for schema changes, such as creating, deleting, or modifying object stores and indexes. This is the *only* place where these structural changes can be made within an IndexedDB database. Operations typically performed within the `onupgradeneeded` handler include `db.createObjectStore()` to define new object stores, specifying `keyPath` or `autoIncrement` options, and `objectStore.createIndex()` to create indexes for efficient data retrieval. It's also used for migrating existing data when the schema changes.",
          "analysisPoints": [
            "Understanding of IndexedDB versioning and schema migration.",
            "Knowledge of when `onupgradeneeded` is triggered.",
            "Ability to list specific IndexedDB API calls that can only be made within this event.",
            "Importance of this event for database evolution and data integrity."
          ],
          "keyConcepts": [
            "IndexedDB",
            "Database Versioning",
            "onupgradeneeded",
            "ObjectStore",
            "Index"
          ],
          "evaluationCriteria": [
            "Detailed explanation of the event's purpose and trigger conditions",
            "Correct identification of allowed operations within the handler"
          ],
          "example": "```javascript\nconst request = indexedDB.open('MyDatabase', 2); // Version changed from 1 to 2\n\nrequest.onupgradeneeded = function(event) {\n  const db = event.target.result;\n  // This is where schema changes happen\n  if (!db.objectStoreNames.contains('products')) {\n    const productStore = db.createObjectStore('products', { keyPath: 'productId' });\n    productStore.createIndex('category', 'category', { unique: false });\n  }\n  // If version 1 existed, you might migrate data here\n  console.log('Database upgrade or creation in progress...');\n};\n\nrequest.onsuccess = function(event) {\n  console.log('Database opened/upgraded successfully.');\n};\n```",
          "tags": [
            "IndexedDB",
            "Database Schema",
            "Lifecycle",
            "API"
          ],
          "prerequisites": [
            "IndexedDB Basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_indexeddb_code_1",
          "topic": "IndexedDB Basic CRUD Operations",
          "level": "medium",
          "type": "code",
          "question": "Write JavaScript code to open an IndexedDB database named 'ProductsDB' (version 1), create an object store 'products' with 'id' as keyPath, add a product `{ id: 1, name: 'Laptop', price: 1200 }`, and then retrieve it by its ID. Ensure proper error handling.",
          "answer": "// See solutionCode in task_indexeddb_crud_manager for a more comprehensive example.",
          "options": [],
          "analysisPoints": [
            "Correct use of `indexedDB.open()`.",
            "Proper handling of `onupgradeneeded` for object store creation.",
            "Correct initiation of a `readwrite` transaction.",
            "Successful `add()` and `get()` operations on the object store.",
            "Appropriate error handling for all requests."
          ],
          "keyConcepts": [
            "IndexedDB",
            "CRUD",
            "Transactions",
            "Event Handlers"
          ],
          "evaluationCriteria": [
            "Functional IndexedDB setup",
            "Accurate data insertion and retrieval",
            "Robust error management"
          ],
          "example": "```javascript\nfunction performIndexedDBOperations() {\n  const request = indexedDB.open('ProductsDB', 1);\n\n  request.onupgradeneeded = function(event) {\n    const db = event.target.result;\n    if (!db.objectStoreNames.contains('products')) {\n      db.createObjectStore('products', { keyPath: 'id' });\n      console.log('Object store \"products\" created.');\n    }\n  };\n\n  request.onsuccess = function(event) {\n    const db = event.target.result;\n    const transaction = db.transaction(['products'], 'readwrite');\n    const objectStore = transaction.objectStore('products');\n\n    // Add data\n    const productToAdd = { id: 1, name: 'Laptop', price: 1200 };\n    const addRequest = objectStore.add(productToAdd);\n    addRequest.onsuccess = () => console.log('Product added:', productToAdd);\n    addRequest.onerror = (e) => console.error('Error adding product:', e.target.error);\n\n    // Get data\n    const getRequest = objectStore.get(1);\n    getRequest.onsuccess = function(event) {\n      const product = event.target.result;\n      console.log('Product retrieved:', product);\n    };\n    getRequest.onerror = (e) => console.error('Error retrieving product:', e.target.error);\n\n    transaction.oncomplete = () => db.close();\n    transaction.onerror = (e) => console.error('Transaction error:', e.target.error);\n  };\n\n  request.onerror = function(event) {\n    console.error('Database open error:', event.target.errorCode);\n  };\n}\n\n// Call the function to execute operations\nperformIndexedDBOperations();\n```",
          "tags": [
            "IndexedDB",
            "Code Challenge",
            "CRUD"
          ],
          "prerequisites": [
            "IndexedDB Basics",
            "JavaScript Event Listeners"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_indexeddb_flashcard_1",
          "topic": "IndexedDB KeyPath",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of `keyPath` when creating an IndexedDB object store?",
          "answer": "`keyPath` specifies the property of the JavaScript object that should be used as the unique identifier (primary key) for records in the object store. If a `keyPath` is not provided, you must explicitly provide a key when adding records. It ensures that each record can be uniquely identified and retrieved.",
          "options": [],
          "analysisPoints": [
            "Understanding of how records are identified in IndexedDB.",
            "Knowledge of `keyPath`'s role in uniqueness and retrieval."
          ],
          "keyConcepts": [
            "IndexedDB",
            "keyPath",
            "Object Store"
          ],
          "evaluationCriteria": [
            "Accurate definition of `keyPath`'s role"
          ],
          "example": "",
          "tags": [
            "IndexedDB",
            "Definition",
            "Key Concepts"
          ],
          "prerequisites": [
            "IndexedDB Basics"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_indexeddb_mcq_2",
          "topic": "IndexedDB Transactions",
          "level": "medium",
          "type": "mcq",
          "question": "When performing multiple operations (e.g., adding, updating, deleting) in IndexedDB, why is it crucial to group them within a single transaction?",
          "answer": "To ensure atomicity, meaning either all operations succeed or none of them do",
          "options": [
            "To make the operations run synchronously and block the UI",
            "To bypass the need for defining object stores and indexes",
            "To ensure atomicity, meaning either all operations succeed or none of them do",
            "To allow direct DOM manipulation from the database context"
          ],
          "analysisPoints": [
            "Transactions in IndexedDB provide atomicity, consistency, isolation, and durability (ACID properties) for database operations.",
            "Atomicity means a transaction is treated as a single, indivisible unit of work.",
            "If any operation within a transaction fails, the entire transaction is rolled back, preventing partial data updates.",
            "Transactions do not make operations synchronous; they are still asynchronous but atomic."
          ],
          "keyConcepts": [
            "IndexedDB",
            "Transactions",
            "Atomicity",
            "Data Integrity"
          ],
          "evaluationCriteria": [
            "Understanding of transaction properties",
            "Ability to identify the core benefit of transactions"
          ],
          "example": "```javascript\n// A single transaction for multiple updates\nconst transaction = db.transaction(['customers'], 'readwrite');\nconst objectStore = transaction.objectStore('customers');\n\nconst customer1 = { id: 1, name: 'Alice', email: 'alice@example.com' };\nconst customer2 = { id: 2, name: 'Bob', email: 'bob@example.com' };\n\nobjectStore.put(customer1); // Add/update Alice\nobjectStore.put(customer2); // Add/update Bob\n\n// If 'bob@example.com' was unique: true and an existing record already used this email,\n// the second put() might fail, causing the entire transaction to abort, \n// and Alice's record would not be added/updated either.\n\ntransaction.oncomplete = () => console.log('All operations in transaction completed.');\ntransaction.onerror = (e) => console.error('Transaction failed:', e.target.error); // Handles rollback\n```",
          "tags": [
            "IndexedDB",
            "Transactions",
            "Data Integrity"
          ],
          "prerequisites": [
            "IndexedDB Basics"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_indexeddb_open_2",
          "topic": "IndexedDB vs. LocalStorage",
          "level": "hard",
          "type": "open",
          "question": "Compare and contrast IndexedDB and LocalStorage, highlighting their suitable use cases and key technical differences.",
          "answer": "IndexedDB and LocalStorage are both client-side storage mechanisms, but they differ significantly in capabilities and use cases.\n\n**LocalStorage:**\n- **Type**: Simple key-value store.\n- **Data Structure**: Stores only strings. Complex objects must be manually serialized (e.g., `JSON.stringify()`) and deserialized (`JSON.parse()`).\n- **API**: Synchronous. Operations block the main thread, making it unsuitable for large data or frequent access.\n- **Storage Limit**: Small (typically 5-10 MB).\n- **Features**: No transactions, no indexing, no advanced querying.\n- **Use Cases**: Storing small amounts of simple data, user preferences, session information, or temporary data that doesn't require complex queries or high integrity.\n\n**IndexedDB:**\n- **Type**: Full-fledged NoSQL, transactional database system.\n- **Data Structure**: Stores structured data directly (JavaScript objects, Blobs, Files). No manual serialization needed.\n- **API**: Asynchronous. Operations are non-blocking, ensuring UI responsiveness, suitable for large datasets.\n- **Storage Limit**: Large (hundreds of MBs, potentially GBs).\n- **Features**: Supports transactions (ACID properties), object stores, and indexes for efficient searching and data integrity. Allows for cursor-based iteration.\n- **Use Cases**: Storing large volumes of structured data, offline applications (PWAs), caching large assets (e.g., images, video), complex data management, or applications requiring robust data integrity.\n\n**Key Technical Differences:**\n1.  **API Nature**: LocalStorage is synchronous; IndexedDB is asynchronous.\n2.  **Data Type**: LocalStorage stores strings; IndexedDB stores JavaScript objects/structured data.\n3.  **Storage Limit**: LocalStorage has a small limit; IndexedDB has a much larger limit.\n4.  **Complexity**: LocalStorage is simpler; IndexedDB is more complex with robust features.\n5.  **Transactions/Indexing**: IndexedDB supports these, LocalStorage does not.",
          "analysisPoints": [
            "Detailed comparison across multiple dimensions (data type, API, limit, features).",
            "Clear identification of suitable use cases for each.",
            "Demonstrates understanding of the underlying technical differences (synchronicity, data model)."
          ],
          "keyConcepts": [
            "IndexedDB",
            "LocalStorage",
            "Client-Side Storage",
            "Asynchronous vs. Synchronous",
            "Data Structure",
            "Use Cases"
          ],
          "evaluationCriteria": [
            "Comprehensive comparison",
            "Accuracy of technical details",
            "Relevance of use cases"
          ],
          "example": "A typical scenario for `localStorage` might be saving a user's theme preference (`localStorage.setItem('theme', 'dark')`), while `IndexedDB` would be used for storing all messages in an offline chat application or a large product catalog.",
          "tags": [
            "IndexedDB",
            "LocalStorage",
            "Comparison",
            "Client-Side Storage",
            "Architecture"
          ],
          "prerequisites": [
            "IndexedDB Basics",
            "LocalStorage Basics"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_indexeddb_flashcard_2",
          "topic": "IndexedDB Index Purpose",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the primary purpose of creating an index in IndexedDB?",
          "answer": "The primary purpose of creating an index in IndexedDB is to allow for efficient searching and retrieval of records based on properties other than the object store's primary key (`keyPath`). Indexes enable fast lookups and range queries on specific fields, improving query performance, similar to how indexes work in traditional relational databases.",
          "options": [],
          "analysisPoints": [
            "Understanding that indexes facilitate searching on non-key fields.",
            "Knowledge of performance implications for queries.",
            "Comparison to traditional database indexing concepts."
          ],
          "keyConcepts": [
            "IndexedDB",
            "Index",
            "Searching",
            "Performance"
          ],
          "evaluationCriteria": [
            "Accurate explanation of index utility"
          ],
          "example": "",
          "tags": [
            "IndexedDB",
            "Index",
            "Performance",
            "Concepts"
          ],
          "prerequisites": [
            "IndexedDB Basics"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_service_worker_mcq_1",
          "topic": "Service Worker Purpose",
          "level": "easy",
          "type": "mcq",
          "question": "What is the primary benefit of using a Service Worker in a web application?",
          "answer": "Enabling offline capabilities and improved performance through caching",
          "options": [
            "Blocking the main thread for heavy computations",
            "Directly manipulating the DOM from a background script",
            "Enabling offline capabilities and improved performance through caching",
            "Providing real-time communication with a backend server via WebSockets"
          ],
          "analysisPoints": [
            "Service Workers act as a programmable network proxy, intercepting requests to provide cached content for offline access.",
            "Caching assets leads to faster load times and better performance for repeat visits.",
            "They run in a separate thread and do not block the main thread.",
            "They do not have direct DOM access.",
            "While Service Workers can facilitate push notifications, their primary benefit for user experience is offline support and caching, which leads to performance gains."
          ],
          "keyConcepts": [
            "Service Workers",
            "Offline",
            "Caching",
            "Performance",
            "PWA"
          ],
          "evaluationCriteria": [
            "Understanding the core value proposition of Service Workers",
            "Distinguishing primary benefits from unrelated or incorrect features"
          ],
          "example": "When a user visits a website with a Service Worker enabled, even if their internet connection drops, the Service Worker can serve previously cached content, allowing them to continue browsing without seeing a 'No Internet Connection' page.",
          "tags": [
            "Service Workers",
            "Benefits",
            "PWA",
            "Caching"
          ],
          "prerequisites": [
            "Basic Web Concepts"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_service_worker_open_1",
          "topic": "Service Worker Lifecycle",
          "level": "medium",
          "type": "open",
          "question": "Describe the basic lifecycle of a Service Worker, including the key events (`install`, `activate`, `fetch`) and their typical uses.",
          "answer": "The Service Worker lifecycle involves several key phases:\n\n1.  **Registration**: The main thread script registers the Service Worker using `navigator.serviceWorker.register('service-worker.js')`.\n2.  **Installation (`install` event)**: This event fires when the Service Worker is first installed. It's typically used to pre-cache static assets (like HTML, CSS, JS files, images) that are essential for the application's basic functionality, using `event.waitUntil()` and `caches.addAll()`.\n3.  **Activation (`activate` event)**: This event fires after the installation is successful and when the Service Worker is ready to take control of pages. It's commonly used for cleanup, such as deleting old caches from previous Service Worker versions, using `caches.delete()`.\n4.  **Fetching (`fetch` event)**: Once activated, the Service Worker can intercept network requests from controlled pages. The `fetch` event listener is triggered for every HTTP request. Inside this listener, the Service Worker decides how to respond: serving from cache (`caches.match()`), fetching from the network (`fetch(event.request)`), or implementing caching strategies like 'cache-first' or 'network-first'.\n\nAn important aspect is that a new Service Worker will install in the background but will only activate once all existing pages controlled by the old Service Worker are closed.",
          "analysisPoints": [
            "Accurate description of each lifecycle phase.",
            "Correct identification of the event listeners (`install`, `activate`, `fetch`).",
            "Understanding of the typical operations performed within each event.",
            "Knowledge of how new Service Workers activate (waiting for old ones to unload)."
          ],
          "keyConcepts": [
            "Service Workers",
            "Lifecycle",
            "Install Event",
            "Activate Event",
            "Fetch Event",
            "Caching Strategies"
          ],
          "evaluationCriteria": [
            "Comprehensive and accurate explanation of the lifecycle",
            "Correct usage of event names and their purposes"
          ],
          "example": "```javascript\n// In service-worker.js\nself.addEventListener('install', (event) => {\n  console.log('Installing Service Worker...');\n  event.waitUntil(caches.open('app-shell-v1').then((cache) => {\n    return cache.addAll(['/', '/index.html', '/css/styles.css']);\n  }));\n});\n\nself.addEventListener('activate', (event) => {\n  console.log('Activating Service Worker...');\n  event.waitUntil(caches.keys().then((cacheNames) => {\n    return Promise.all(cacheNames.map((name) => {\n      if (name !== 'app-shell-v1') { return caches.delete(name); }\n    }));\n  }));\n});\n\nself.addEventListener('fetch', (event) => {\n  event.respondWith(caches.match(event.request).then((response) => {\n    return response || fetch(event.request);\n  }));\n});\n```",
          "tags": [
            "Service Workers",
            "Lifecycle",
            "Events",
            "PWA"
          ],
          "prerequisites": [
            "Asynchronous JavaScript",
            "Promises"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_service_worker_code_1",
          "topic": "Service Worker Fetch Event",
          "level": "medium",
          "type": "code",
          "question": "Write the conceptual JavaScript code for a Service Worker's `fetch` event handler that implements a 'Network-first, then cache' caching strategy. This means it should try to fetch from the network first. If the network request fails, it should then try to serve from the cache.",
          "answer": "// See solutionCode in task_service_worker_dynamic_caching for a more comprehensive example.",
          "options": [],
          "analysisPoints": [
            "Correctly using `self.addEventListener('fetch', ...)`.",
            "Understanding and implementing the 'network-first' logic with `fetch()` and `caches.match()`.",
            "Proper use of `event.respondWith()` and Promises (`.then()`, `.catch()`)."
          ],
          "keyConcepts": [
            "Service Workers",
            "Fetch Event",
            "Caching Strategies",
            "Promises",
            "Network"
          ],
          "evaluationCriteria": [
            "Correct implementation of the caching strategy",
            "Appropriate use of asynchronous patterns"
          ],
          "example": "```javascript\n// In service-worker.js\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    fetch(event.request)\n      .then(response => {\n        // If network request is successful, clone and put into cache, then return response\n        const responseToCache = response.clone();\n        caches.open('dynamic-cache').then(cache => {\n          cache.put(event.request, responseToCache);\n        });\n        return response;\n      })\n      .catch(() => {\n        // Network failed, try to get from cache\n        return caches.match(event.request);\n      })\n  );\n});\n```",
          "tags": [
            "Service Workers",
            "Code Challenge",
            "Caching"
          ],
          "prerequisites": [
            "Service Worker Basics",
            "Promises"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_service_worker_flashcard_1",
          "topic": "Service Worker HTTPS Requirement",
          "level": "easy",
          "type": "flashcard",
          "question": "Why are Service Workers restricted to running over HTTPS (or `localhost`)?",
          "answer": "Service Workers have significant power, as they can intercept network requests and potentially modify responses. This makes them a security risk if used over unencrypted HTTP, as a Man-in-the-Middle attacker could inject malicious content or intercept sensitive data. HTTPS ensures that the Service Worker script delivered to the browser is authentic and hasn't been tampered with, protecting user data and maintaining the integrity of the application.",
          "options": [],
          "analysisPoints": [
            "Understanding of Service Worker capabilities (network interception).",
            "Recognition of the security implications on HTTP.",
            "Importance of HTTPS for integrity and confidentiality."
          ],
          "keyConcepts": [
            "Service Workers",
            "HTTPS",
            "Security",
            "Man-in-the-Middle"
          ],
          "evaluationCriteria": [
            "Accurate explanation of the security rationale"
          ],
          "example": "",
          "tags": [
            "Service Workers",
            "Security",
            "HTTPS",
            "Concepts"
          ],
          "prerequisites": [
            "Basic Web Security"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_service_worker_mcq_2",
          "topic": "Create React App Service Worker",
          "level": "easy",
          "type": "mcq",
          "question": "In a `create-react-app` project, what is the purpose of the `serviceWorker.register()` call in `index.js`?",
          "answer": "To enable offline capabilities by installing a default Service Worker that caches static assets",
          "options": [
            "To explicitly disable any Service Worker functionality for the application",
            "To enable offline capabilities by installing a default Service Worker that caches static assets",
            "To allow direct access to the DOM from the background thread of the Service Worker",
            "To establish a WebSocket connection for real-time updates"
          ],
          "analysisPoints": [
            "`create-react-app` bundles a default Service Worker (Workbox-based) for offline functionality.",
            "Calling `serviceWorker.register()` initiates the installation and activation process for this default worker.",
            "The primary function is to pre-cache built static assets, making the application available offline or on slow networks.",
            "`unregister()` is used to disable, not `register()`."
          ],
          "keyConcepts": [
            "Service Workers",
            "Create React App",
            "Offline",
            "Caching",
            "PWA"
          ],
          "evaluationCriteria": [
            "Understanding of CRA's Service Worker integration",
            "Correct identification of the `register()` function's effect"
          ],
          "example": "```javascript\n// In index.js of a create-react-app project\nimport * as serviceWorker from './serviceWorker';\n// ... other imports and ReactDOM.render\nserviceWorker.register(); // This line activates the offline features.\n```",
          "tags": [
            "Service Workers",
            "React",
            "Create React App",
            "Offline"
          ],
          "prerequisites": [
            "React Basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_service_worker_open_2",
          "topic": "Service Worker Caching Strategies",
          "level": "hard",
          "type": "open",
          "question": "Beyond simple 'cache-first' or 'network-first', explain a more advanced Service Worker caching strategy like 'stale-while-revalidate' and describe a scenario where it would be beneficial.",
          "answer": "The 'stale-while-revalidate' caching strategy is a hybrid approach that provides a good balance between performance and freshness. Here's how it works:\n\n1.  **Serve from Cache (Stale)**: When a request is made, the Service Worker immediately checks its cache. If a cached response exists for that request, it returns that 'stale' cached response instantly to the client.\n2.  **Revalidate from Network (Fresh)**: In parallel to serving the stale response, the Service Worker also makes a network request for the same resource. Once the network response arrives, it updates the cache with the new, fresh version for future requests.\n\n**Scenario where it's beneficial:**\nConsider a news feed or social media application. Users want to see content quickly, but they also want it to be reasonably up-to-date. Using 'stale-while-revalidate' provides an excellent user experience:\n-   **Initial Load/Offline**: If the user is offline or has a slow connection, they immediately see the previously cached news articles (even if a few minutes old), preventing a blank screen or a long loading spinner.\n-   **Subsequent Loads (Online)**: While the user is viewing the slightly 'stale' articles, the Service Worker fetches the latest news in the background. The next time the user loads the page or navigates to that section, they will get the freshest version of the content. This ensures a fast initial load while keeping the content reasonably current. This strategy is ideal for content that doesn't need to be absolutely real-time but benefits from quick display and eventual freshness.",
          "analysisPoints": [
            "Clear definition of 'stale-while-revalidate' mechanism.",
            "Identification of the two parallel processes (serving stale, revalidating fresh).",
            "Detailed explanation of a relevant use case.",
            "Demonstrates understanding of balancing performance and data freshness."
          ],
          "keyConcepts": [
            "Service Workers",
            "Caching Strategies",
            "Stale-While-Revalidate",
            "Performance",
            "User Experience",
            "PWA"
          ],
          "evaluationCriteria": [
            "Accurate explanation of the strategy",
            "Compelling and well-explained use case",
            "Demonstrates advanced understanding of caching"
          ],
          "example": "```javascript\n// In service-worker.js\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request).then(cachedResponse => {\n      const networkFetch = fetch(event.request).then(response => {\n        // Put a copy of the response in the cache\n        const responseToCache = response.clone();\n        caches.open('dynamic-content-cache').then(cache => {\n          cache.put(event.request, responseToCache);\n        });\n        return response;\n      }).catch(() => {\n        // Network failed, if no cache, return fallback or error\n        return new Response('Offline and no cached data', { status: 503 });\n      });\n\n      // Return cached response immediately if available, otherwise wait for network\n      return cachedResponse || networkFetch;\n    })\n  );\n});\n```",
          "tags": [
            "Service Workers",
            "Caching Strategies",
            "Advanced",
            "Performance",
            "UX"
          ],
          "prerequisites": [
            "Service Worker Lifecycle",
            "Promises",
            "HTTP Caching"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "expert"
        },
        {
          "id": "question_service_worker_flashcard_2",
          "topic": "Service Worker Cache API",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the name of the API Service Workers use for storing and retrieving network responses?",
          "answer": "The Cache Storage API (accessible via `caches` global object in the Service Worker context).",
          "options": [],
          "analysisPoints": [
            "Knowledge of the specific API for Service Worker caching."
          ],
          "keyConcepts": [
            "Service Workers",
            "Cache API",
            "Caching"
          ],
          "evaluationCriteria": [
            "Correct identification of the API"
          ],
          "example": "",
          "tags": [
            "Service Workers",
            "API",
            "Caching"
          ],
          "prerequisites": [
            "Service Worker Basics"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_web_worker_mcq_1",
          "topic": "Web Worker Benefits",
          "level": "easy",
          "type": "mcq",
          "question": "What is the primary benefit of using a Web Worker?",
          "answer": "Performing computationally intensive tasks without blocking the main UI thread",
          "options": [
            "Directly manipulating the DOM from a background thread",
            "Performing computationally intensive tasks without blocking the main UI thread",
            "Enabling push notifications for web applications",
            "Synchronously storing large amounts of data in the browser"
          ],
          "analysisPoints": [
            "Web Workers are designed to run scripts in a separate background thread.",
            "This separation prevents heavy computations from freezing the user interface, improving responsiveness.",
            "Web Workers explicitly do NOT have direct DOM access.",
            "Push notifications are a Service Worker feature, not a general Web Worker feature.",
            "IndexedDB is for large data storage, and it's asynchronous, not synchronous, and not directly accessed by Web Workers."
          ],
          "keyConcepts": [
            "Web Workers",
            "Main Thread",
            "Concurrency",
            "Performance"
          ],
          "evaluationCriteria": [
            "Understanding the core purpose of Web Workers",
            "Distinguishing from other Web APIs or incorrect functionalities"
          ],
          "example": "If you have to calculate prime numbers up to a very large number, doing it directly on the main thread would freeze your webpage. Offloading this task to a Web Worker allows the user to continue interacting with the page.",
          "tags": [
            "Web Workers",
            "Benefits",
            "Performance"
          ],
          "prerequisites": [
            "Asynchronous JavaScript"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_web_worker_open_1",
          "topic": "Web Worker Limitations",
          "level": "medium",
          "type": "open",
          "question": "List and explain at least three significant limitations of Web Workers.",
          "answer": "Web Workers operate in an isolated environment, leading to several limitations:\n\n1.  **No Direct DOM Access**: Web Workers cannot directly access or manipulate the Document Object Model (DOM). This is because they run in a separate thread and do not have access to the `window` object, which is required for DOM manipulation. All UI updates or interactions must be handled by the main thread, with workers sending messages to the main thread to request such actions.\n2.  **Limited Global Scope**: Web Workers do not have access to many global objects and functions available on the main thread, such as `window`, `document`, `parent`, `localStorage`, `sessionStorage`, `IndexedDB` (directly), or `alert()`. They have their own global scope, `self`.\n3.  **Cross-Origin Restrictions**: A Web Worker script must be loaded from the same origin as the parent page. You cannot directly load a worker script from a different domain (unless specific CORS headers are configured, but even then, communication might be restricted for security reasons).\n4.  **No Shared Memory (Data Copying)**: Communication between the main thread and a worker (and between workers) happens via message passing (`postMessage()`). The data sent is copied, not shared, meaning a structured clone algorithm is used. For very large data, this copying can introduce overhead, though transferable objects can mitigate this.",
          "analysisPoints": [
            "Accurate identification of key limitations.",
            "Clear explanation for each limitation (e.g., why no DOM access).",
            "Demonstrates understanding of the worker's isolated environment."
          ],
          "keyConcepts": [
            "Web Workers",
            "Limitations",
            "DOM Access",
            "Global Scope",
            "Cross-Origin",
            "Message Passing"
          ],
          "evaluationCriteria": [
            "Comprehensive list of limitations",
            "Detailed and correct explanations"
          ],
          "example": "If a Web Worker computes a list of filtered items, it cannot directly inject them into a `<ul>` element. Instead, it must `postMessage()` the filtered list back to the main thread, which then receives it via `onmessage` and updates the DOM.",
          "tags": [
            "Web Workers",
            "Limitations",
            "Architecture"
          ],
          "prerequisites": [
            "Web Workers Basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_worker_code_1",
          "topic": "Web Worker Communication",
          "level": "medium",
          "type": "code",
          "question": "Create two files: `main.html` and `calculation.js`. In `main.html`, use a Web Worker to calculate the factorial of a given number (e.g., 1000). The main thread should send the number to the worker, and the worker should send the result back. Display the result on the console in the main thread.",
          "answer": "// See solutionCode in task_web_worker_heavy_computation for a more comprehensive example.",
          "options": [],
          "analysisPoints": [
            "Correct instantiation of `Worker` in the main thread.",
            "Proper use of `worker.postMessage()` and `worker.onmessage` for communication.",
            "Correct implementation of `self.onmessage` and `self.postMessage()` in the worker script.",
            "Ability to handle a basic computation within the worker."
          ],
          "keyConcepts": [
            "Web Workers",
            "Message Passing",
            "postMessage",
            "onmessage"
          ],
          "evaluationCriteria": [
            "Functional communication between main thread and worker",
            "Correct data transfer and handling"
          ],
          "example": "```html\n<!-- main.html -->\n<!DOCTYPE html>\n<html>\n<head><title>Factorial Worker</title></head>\n<body>\n  <script>\n    const worker = new Worker('calculation.js');\n    worker.onmessage = function(event) {\n      console.log('Result from worker:', event.data);\n    };\n    worker.postMessage(1000);\n  </script>\n</body>\n</html>\n```\n\n```javascript\n// calculation.js\nself.onmessage = function(event) {\n  const number = event.data;\n  let result = 1n; // Use BigInt for large numbers\n  for (let i = 2n; i <= BigInt(number); i++) {\n    result *= i;\n  }\n  self.postMessage(result.toString());\n};\n```",
          "tags": [
            "Web Workers",
            "Code Challenge",
            "Communication"
          ],
          "prerequisites": [
            "Web Workers Basics",
            "Asynchronous JavaScript"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_worker_flashcard_1",
          "topic": "Web Worker Communication Methods",
          "level": "easy",
          "type": "flashcard",
          "question": "How do the main thread and a Web Worker communicate with each other?",
          "answer": "They communicate through an asynchronous message-passing system. The `postMessage()` method is used to send data from one context to another, and the `onmessage` event handler (or `addEventListener('message', ...)` listener) is used to receive incoming messages.",
          "options": [],
          "analysisPoints": [
            "Knowledge of `postMessage` and `onmessage`."
          ],
          "keyConcepts": [
            "Web Workers",
            "Message Passing",
            "postMessage",
            "onmessage"
          ],
          "evaluationCriteria": [
            "Accurate description of communication mechanism"
          ],
          "example": "",
          "tags": [
            "Web Workers",
            "Communication",
            "Concepts"
          ],
          "prerequisites": [
            "Web Workers Basics"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_web_worker_mcq_2",
          "topic": "Web Worker Global Scope",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following objects or APIs is NOT directly accessible within a standard Web Worker's global scope?",
          "answer": "document",
          "options": [
            "self",
            "fetch",
            "console",
            "document"
          ],
          "analysisPoints": [
            "`self` refers to the worker's own global scope.",
            "The `fetch` API is available in workers for making network requests.",
            "`console` for logging is available.",
            "The `document` object, representing the DOM, is *not* available in Web Workers because they run in a separate thread without direct access to the UI."
          ],
          "keyConcepts": [
            "Web Workers",
            "Global Scope",
            "Limitations",
            "DOM Access"
          ],
          "evaluationCriteria": [
            "Understanding of Web Worker's isolated environment",
            "Ability to distinguish accessible from inaccessible APIs"
          ],
          "example": "Attempts to access `document.getElementById('someId')` or `window.localStorage` directly within `worker.js` will result in an error because these objects are tied to the main thread's `window` context.",
          "tags": [
            "Web Workers",
            "Scope",
            "Limitations"
          ],
          "prerequisites": [
            "Web Workers Basics"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_worker_open_2",
          "topic": "Web Worker Use Cases",
          "level": "hard",
          "type": "open",
          "question": "Identify and explain two distinct real-world scenarios where using Web Workers would significantly improve the user experience or application performance.",
          "answer": "Web Workers are ideal for offloading tasks that would otherwise freeze the main thread. Here are two scenarios:\n\n1.  **Complex Data Processing/Calculations**: Imagine a web application that processes large CSV or JSON files uploaded by the user (e.g., for analytics, data visualization, or transformations). Parsing and processing hundreds of megabytes of data on the main thread would cause the UI to become unresponsive for several seconds or even minutes. By offloading this task to a Web Worker, the parsing, validation, and initial aggregation of data can happen in the background. The worker can send progress updates back to the main thread, allowing the UI to display a progress bar, and then send the final processed data for rendering once complete. This keeps the application interactive.\n\n2.  **Image Manipulation/Video Processing**: Consider an online image editor that allows users to apply complex filters (e.g., blur, sharpen, sepia) or resize large images. Performing these pixel-level manipulations directly on the main thread would be very computationally intensive, leading to a frozen UI. A Web Worker can be used to perform these image operations. The main thread can send the image data (e.g., `ImageData` or `Blob`) to the worker. The worker processes the image and sends the modified `ImageData` back. This allows the user to continue adjusting other settings or navigating the application while the image processing occurs in the background.",
          "analysisPoints": [
            "Identification of computationally intensive tasks.",
            "Clear explanation of how Web Workers solve the UI blocking problem in each scenario.",
            "Focus on 'user experience' and 'application performance' as requested.",
            "Real-world relevance of the examples."
          ],
          "keyConcepts": [
            "Web Workers",
            "Performance",
            "User Experience",
            "Concurrency",
            "Data Processing",
            "Image Manipulation"
          ],
          "evaluationCriteria": [
            "Relevant and well-explained scenarios",
            "Demonstrates understanding of Web Worker's application"
          ],
          "example": "A crypto trading platform could use a Web Worker to continuously compute complex indicator values (like moving averages or Bollinger Bands) on live market data, preventing UI lag that would occur if these calculations were done on the main thread, while simultaneously displaying real-time price updates.",
          "tags": [
            "Web Workers",
            "Use Cases",
            "Performance",
            "UX",
            "Real World"
          ],
          "prerequisites": [
            "Web Workers Basics",
            "Performance Optimization"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_web_worker_flashcard_2",
          "topic": "Web Worker `self` keyword",
          "level": "easy",
          "type": "flashcard",
          "question": "What does the `self` keyword refer to within a Web Worker script?",
          "answer": "Within a Web Worker script, `self` refers to the worker's own global scope. It's analogous to `window` in the main thread's global scope and is used to access worker-specific methods like `self.postMessage()` and `self.onmessage` (or `self.addEventListener()`).",
          "options": [],
          "analysisPoints": [
            "Knowledge of the worker's execution context.",
            "Analogy to the `window` object."
          ],
          "keyConcepts": [
            "Web Workers",
            "Global Scope",
            "self"
          ],
          "evaluationCriteria": [
            "Accurate definition of `self` in worker context"
          ],
          "example": "",
          "tags": [
            "Web Workers",
            "Concepts",
            "Context"
          ],
          "prerequisites": [
            "JavaScript Scopes"
          ],
          "complexity": 2,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        }
      ],
      "tasks": [
        {
          "id": "task_indexeddb_crud_manager",
          "title": "Implement a Basic IndexedDB CRM",
          "description": "\nDevelop a simple web-based Customer Relationship Management (CRM) system using IndexedDB for data storage. Your system should allow users to:\n\n1.  **Initialize Database**: Open a database named 'MyCRM' (version 1) and create an object store named 'customers' with `id` as the `keyPath` and `autoIncrement: true`.\n2.  **Add Customer**: Implement a function to add new customer records, each with `name` (string), `email` (string, must be unique), and `phone` (string) properties. Handle potential errors like duplicate emails.\n3.  **List Customers**: Implement a function to retrieve and display all customers from the 'customers' object store.\n4.  **Update Customer**: Implement a function to update an existing customer's `name` and `phone` based on their `id`.\n5.  **Delete Customer**: Implement a function to delete a customer record by their `id`.\n6.  **Search Customers**: Implement a function to search customers by their `name` (case-insensitive, partial match). You will need to create an index for `name`.\n\nEnsure all database operations are handled asynchronously with appropriate success and error callbacks.\n",
          "difficulty": "medium",
          "startingCode": "<html>\n<head>\n  <title>IndexedDB CRM</title>\n</head>\n<body>\n  <h1>Customer Management</h1>\n  <form id=\"customerForm\">\n    <input type=\"hidden\" id=\"customerId\">\n    <label for=\"name\">Name:</label><input type=\"text\" id=\"name\" required><br>\n    <label for=\"email\">Email:</label><input type=\"email\" id=\"email\" required><br>\n    <label for=\"phone\">Phone:</label><input type=\"text\" id=\"phone\"><br>\n    <button type=\"submit\">Add/Update Customer</button>\n  </form>\n  <hr>\n  <input type=\"text\" id=\"searchName\" placeholder=\"Search by name\">\n  <button id=\"searchButton\">Search</button>\n  <button id=\"clearSearchButton\">Clear Search</button>\n  <ul id=\"customerList\"></ul>\n  <script>\n    // TODO: Implement IndexedDB functions here\n\n    const dbName = 'MyCRM';\n    const dbVersion = 1;\n    let db;\n\n    function openDatabase() {\n      const request = indexedDB.open(dbName, dbVersion);\n\n      request.onupgradeneeded = function(event) {\n        db = event.target.result;\n        // Create object store if it doesn't exist\n        if (!db.objectStoreNames.contains('customers')) {\n          const objectStore = db.createObjectStore('customers', { keyPath: 'id', autoIncrement: true });\n          objectStore.createIndex('email', 'email', { unique: true });\n          objectStore.createIndex('name', 'name', { unique: false });\n        }\n      };\n\n      request.onsuccess = function(event) {\n        db = event.target.result;\n        console.log('Database opened successfully');\n        displayCustomers(); // Initial display\n      };\n\n      request.onerror = function(event) {\n        console.error('Database error:', event.target.errorCode);\n      };\n    }\n\n    function addCustomer(customer) {\n      // Implement add customer logic\n    }\n\n    function getCustomers(searchName = '') {\n      // Implement get all/search customers logic\n    }\n\n    function updateCustomer(customer) {\n      // Implement update customer logic\n    }\n\n    function deleteCustomer(id) {\n      // Implement delete customer logic\n    }\n\n    function displayCustomers(customers = []) {\n      const customerList = document.getElementById('customerList');\n      customerList.innerHTML = '';\n      if (customers.length === 0) {\n        customerList.innerHTML = '<li>No customers found.</li>';\n        return;\n      }\n      customers.forEach(customer => {\n        const li = document.createElement('li');\n        li.innerHTML = `ID: ${customer.id}, Name: ${customer.name}, Email: ${customer.email}, Phone: ${customer.phone || 'N/A'}\n          <button onclick=\"editCustomer(${customer.id}, '${customer.name}', '${customer.email}', '${customer.phone || ''}')\">Edit</button>\n          <button onclick=\"deleteCustomer(${customer.id})\">Delete</button>`;\n        customerList.appendChild(li);\n      });\n    }\n\n    function editCustomer(id, name, email, phone) {\n      document.getElementById('customerId').value = id;\n      document.getElementById('name').value = name;\n      document.getElementById('email').value = email;\n      document.getElementById('phone').value = phone;\n    }\n\n    // Event listeners\n    document.getElementById('customerForm').addEventListener('submit', function(event) {\n      event.preventDefault();\n      const id = document.getElementById('customerId').value;\n      const name = document.getElementById('name').value;\n      const email = document.getElementById('email').value;\n      const phone = document.getElementById('phone').value;\n\n      const customer = { name, email, phone };\n      if (id) {\n        customer.id = parseInt(id);\n        updateCustomer(customer);\n      } else {\n        addCustomer(customer);\n      }\n      this.reset();\n      document.getElementById('customerId').value = '';\n    });\n\n    document.getElementById('searchButton').addEventListener('click', () => {\n      const searchName = document.getElementById('searchName').value;\n      getCustomers(searchName);\n    });\n\n    document.getElementById('clearSearchButton').addEventListener('click', () => {\n      document.getElementById('searchName').value = '';\n      getCustomers();\n    });\n\n    openDatabase();\n  </script>\n</body>\n</html>\n",
          "solutionCode": "<html>\n<head>\n  <title>IndexedDB CRM</title>\n</head>\n<body>\n  <h1>Customer Management</h1>\n  <form id=\"customerForm\">\n    <input type=\"hidden\" id=\"customerId\">\n    <label for=\"name\">Name:</label><input type=\"text\" id=\"name\" required><br>\n    <label for=\"email\">Email:</label><input type=\"email\" id=\"email\" required><br>\n    <label for=\"phone\">Phone:</label><input type=\"text\" id=\"phone\"><br>\n    <button type=\"submit\">Add/Update Customer</button>\n  </form>\n  <hr>\n  <input type=\"text\" id=\"searchName\" placeholder=\"Search by name\">\n  <button id=\"searchButton\">Search</button>\n  <button id=\"clearSearchButton\">Clear Search</button>\n  <ul id=\"customerList\"></ul>\n  <script>\n    const dbName = 'MyCRM';\n    const dbVersion = 1;\n    let db;\n\n    function openDatabase() {\n      const request = indexedDB.open(dbName, dbVersion);\n\n      request.onupgradeneeded = function(event) {\n        db = event.target.result;\n        if (!db.objectStoreNames.contains('customers')) {\n          const objectStore = db.createObjectStore('customers', { keyPath: 'id', autoIncrement: true });\n          objectStore.createIndex('email', 'email', { unique: true });\n          objectStore.createIndex('name', 'name', { unique: false });\n        }\n      };\n\n      request.onsuccess = function(event) {\n        db = event.target.result;\n        console.log('Database opened successfully');\n        displayCustomers();\n      };\n\n      request.onerror = function(event) {\n        console.error('Database error:', event.target.errorCode);\n      };\n    }\n\n    function addCustomer(customer) {\n      const transaction = db.transaction(['customers'], 'readwrite');\n      const objectStore = transaction.objectStore('customers');\n      const addRequest = objectStore.add(customer);\n\n      addRequest.onsuccess = () => {\n        console.log('Customer added:', customer);\n        displayCustomers();\n      };\n      addRequest.onerror = (e) => {\n        console.error('Error adding customer:', e.target.error);\n        alert('Error adding customer: ' + e.target.error.message);\n      };\n    }\n\n    function getCustomers(searchName = '') {\n      const transaction = db.transaction(['customers'], 'readonly');\n      const objectStore = transaction.objectStore('customers');\n      let request;\n\n      if (searchName) {\n        const nameIndex = objectStore.index('name');\n        // Use a cursor for partial, case-insensitive search\n        const lowerSearchName = searchName.toLowerCase();\n        const customersFound = [];\n\n        nameIndex.openCursor().onsuccess = function(event) {\n          const cursor = event.target.result;\n          if (cursor) {\n            // Case-insensitive partial match\n            if (cursor.value.name.toLowerCase().includes(lowerSearchName)) {\n              customersFound.push(cursor.value);\n            }\n            cursor.continue();\n          } else {\n            displayCustomers(customersFound);\n          }\n        };\n        nameIndex.openCursor().onerror = (e) => console.error('Cursor error:', e.target.error);\n\n      } else {\n        request = objectStore.getAll();\n        request.onsuccess = function(event) {\n          displayCustomers(event.target.result);\n        };\n        request.onerror = (e) => console.error('Error getting customers:', e.target.error);\n      }\n    }\n\n    function updateCustomer(customer) {\n      const transaction = db.transaction(['customers'], 'readwrite');\n      const objectStore = transaction.objectStore('customers');\n\n      const updateRequest = objectStore.put(customer);\n      updateRequest.onsuccess = () => {\n        console.log('Customer updated:', customer);\n        displayCustomers();\n      };\n      updateRequest.onerror = (e) => {\n        console.error('Error updating customer:', e.target.error);\n        alert('Error updating customer: ' + e.target.error.message);\n      };\n    }\n\n    function deleteCustomer(id) {\n      const transaction = db.transaction(['customers'], 'readwrite');\n      const objectStore = transaction.objectStore('customers');\n\n      const deleteRequest = objectStore.delete(id);\n      deleteRequest.onsuccess = () => {\n        console.log('Customer deleted with ID:', id);\n        displayCustomers();\n      };\n      deleteRequest.onerror = (e) => {\n        console.error('Error deleting customer:', e.target.error);\n        alert('Error deleting customer: ' + e.target.error.message);\n      };\n    }\n\n    function displayCustomers(customers = []) {\n      const customerList = document.getElementById('customerList');\n      customerList.innerHTML = '';\n      if (customers.length === 0) {\n        customerList.innerHTML = '<li>No customers found.</li>';\n        return;\n      }\n      customers.forEach(customer => {\n        const li = document.createElement('li');\n        li.innerHTML = `ID: ${customer.id}, Name: ${customer.name}, Email: ${customer.email}, Phone: ${customer.phone || 'N/A'}\n          <button onclick=\"editCustomer(${customer.id}, '${customer.name.replace(/'/g, \"&apos;\")}', '${customer.email.replace(/'/g, \"&apos;\")}', '${(customer.phone || '').replace(/'/g, \"&apos;\")}')\">Edit</button>\n          <button onclick=\"deleteCustomer(${customer.id})\">Delete</button>`;\n        customerList.appendChild(li);\n      });\n    }\n\n    function editCustomer(id, name, email, phone) {\n      document.getElementById('customerId').value = id;\n      document.getElementById('name').value = name;\n      document.getElementById('email').value = email;\n      document.getElementById('phone').value = phone;\n    }\n\n    document.getElementById('customerForm').addEventListener('submit', function(event) {\n      event.preventDefault();\n      const id = document.getElementById('customerId').value;\n      const name = document.getElementById('name').value;\n      const email = document.getElementById('email').value;\n      const phone = document.getElementById('phone').value;\n\n      const customer = { name, email, phone };\n      if (id) {\n        customer.id = parseInt(id);\n        updateCustomer(customer);\n      } else {\n        addCustomer(customer);\n      }\n      this.reset();\n      document.getElementById('customerId').value = '';\n    });\n\n    document.getElementById('searchButton').addEventListener('click', () => {\n      const searchName = document.getElementById('searchName').value;\n      getCustomers(searchName);\n    });\n\n    document.getElementById('clearSearchButton').addEventListener('click', () => {\n      document.getElementById('searchName').value = '';\n      getCustomers();\n    });\n\n    openDatabase();\n  </script>\n</body>\n</html>\n",
          "testCases": [
            "Add a new customer: Submit form with new name, email, phone. Verify it appears in the list.",
            "Add a customer with a duplicate email: Submit form with an email already in use. Verify an error message appears and the customer is not added.",
            "Update an existing customer: Click 'Edit' on a customer, change name/phone, submit. Verify changes in the list.",
            "Delete a customer: Click 'Delete' on a customer. Verify it's removed from the list.",
            "Search by full name: Enter a full customer name in search. Verify only matching customer(s) appear.",
            "Search by partial name (case-insensitive): Enter 'john' when 'John Doe' exists. Verify 'John Doe' appears.",
            "Clear search: After a search, click 'Clear Search'. Verify all customers are shown again.",
            "Empty database: Verify 'No customers found.' is displayed initially or after all deletions.",
            "Persistence: Add a few customers, close and reopen the browser tab. Verify customers are still there."
          ],
          "hints": [
            "Remember that `onupgradeneeded` is the *only* place to create or delete object stores and indexes.",
            "For the search functionality, consider using an `IDBCursor` on the 'name' index for partial and case-insensitive matching.",
            "Always handle `onsuccess` and `onerror` callbacks for each IndexedDB request.",
            "Use `db.transaction(['objectStoreNames'], 'mode')` where `mode` is `readonly` or `readwrite`."
          ],
          "tags": [
            "IndexedDB",
            "CRUD",
            "DOM",
            "Web APIs",
            "Client-Side Storage",
            "Full Stack (Frontend Focus)"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "IndexedDB Basics",
            "Asynchronous JavaScript",
            "HTML/CSS/JS DOM Manipulation"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "IndexedDB Transactions",
            "IndexedDB Indexes",
            "Error Handling",
            "Client-Side Database Design"
          ]
        },
        {
          "id": "task_service_worker_offline_page",
          "title": "Implement an Offline Fallback Page with Service Worker",
          "description": "\nCreate a basic web page and a Service Worker that implements an offline fallback. When the user tries to navigate to a page that isn't cached and they are offline, the Service Worker should serve a custom 'offline.html' page instead of the browser's default offline error.\n\n**Requirements:**\n1.  **HTML Structure**: Create `index.html`, `about.html`, and `offline.html`.\n2.  **Service Worker Registration**: Register `sw.js` in `index.html`.\n3.  **Installation**: In `sw.js`, pre-cache `index.html`, `offline.html`, and `style.css` during the `install` event.\n4.  **Fetch Interception**: Intercept all `fetch` requests.\n5.  **Offline Fallback**: If a network request fails (e.g., due to being offline) and the requested resource is not in the cache, serve `offline.html`.\n6.  **Caching Strategy**: For online requests, use a 'Cache, then Network fallback' strategy. (Try cache first, if not found, then network).\n7.  **Testing**: Verify by going offline (e.g., in browser DevTools) and trying to load `about.html` (which isn't pre-cached).\n",
          "difficulty": "medium",
          "startingCode": "```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Online/Offline App</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>Welcome</h1>\n  <nav>\n    <a href=\"index.html\">Home</a> |\n    <a href=\"about.html\">About Us</a>\n  </nav>\n  <p>This is the home page.</p>\n\n  <script>\n    if ('serviceWorker' in navigator) {\n      window.addEventListener('load', function() {\n        navigator.serviceWorker.register('/sw.js').then(function(registration) {\n          console.log('ServiceWorker registration successful with scope: ', registration.scope);\n        }).catch(function(err) {\n          console.log('ServiceWorker registration failed: ', err);\n        });\n      });\n    }\n  </script>\n</body>\n</html>\n\n<!-- about.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>About Us</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>About Us</h1>\n  <nav>\n    <a href=\"index.html\">Home</a> |\n    <a href=\"about.html\">About Us</a>\n  </nav>\n  <p>This is the about page.</p>\n</body>\n</html>\n\n<!-- offline.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>You are Offline!</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>You are Offline!</h1>\n  <p>It seems you are not connected to the internet.</p>\n  <p>Please check your network connection and try again.</p>\n  <p><a href=\"index.html\">Go to Home Page (Cached)</a></p>\n</body>\n</html>\n\n<!-- style.css -->\nbody { font-family: sans-serif; padding: 20px; text-align: center; }\nh1 { color: #333; }\nnav a { margin: 0 10px; text-decoration: none; color: #007bff; }\n\n<!-- sw.js (empty) -->\n// Service Worker logic goes here\n```",
          "solutionCode": "```html\n<!-- index.html (same as starting code) -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Online/Offline App</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>Welcome</h1>\n  <nav>\n    <a href=\"index.html\">Home</a> |\n    <a href=\"about.html\">About Us</a>\n  </nav>\n  <p>This is the home page.</p>\n\n  <script>\n    if ('serviceWorker' in navigator) {\n      window.addEventListener('load', function() {\n        navigator.serviceWorker.register('/sw.js').then(function(registration) {\n          console.log('ServiceWorker registration successful with scope: ', registration.scope);\n        }).catch(function(err) {\n          console.log('ServiceWorker registration failed: ', err);\n        });\n      });\n    }\n  </script>\n</body>\n</html>\n\n<!-- about.html (same as starting code) -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>About Us</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>About Us</h1>\n  <nav>\n    <a href=\"index.html\">Home</a> |\n    <a href=\"about.html\">About Us</a>\n  </nav>\n  <p>This is the about page.</p>\n</body>\n</html>\n\n<!-- offline.html (same as starting code) -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>You are Offline!</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>You are Offline!</h1>\n  <p>It seems you are not connected to the internet.</p>\n  <p>Please check your network connection and try again.</p>\n  <p><a href=\"index.html\">Go to Home Page (Cached)</a></p>\n</body>\n</html>\n\n<!-- style.css (same as starting code) -->\nbody { font-family: sans-serif; padding: 20px; text-align: center; }\nh1 { color: #333; }\nnav a { margin: 0 10px; text-decoration: none; color: #007bff; }\n```\n\n```javascript\n// sw.js\nconst CACHE_NAME = 'offline-fallback-cache-v1';\nconst OFFLINE_URL = '/offline.html';\nconst ASSETS_TO_CACHE = [\n  '/', // Catches root requests like example.com/\n  '/index.html',\n  OFFLINE_URL,\n  '/style.css'\n];\n\nself.addEventListener('install', (event) => {\n  console.log('[Service Worker] Installing...');\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('[Service Worker] Pre-caching essential assets:', ASSETS_TO_CACHE);\n        return cache.addAll(ASSETS_TO_CACHE);\n      })\n      .catch((error) => {\n        console.error('[Service Worker] Pre-caching failed:', error);\n      })\n  );\n});\n\nself.addEventListener('activate', (event) => {\n  console.log('[Service Worker] Activating...');\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('[Service Worker] Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n  // Take control of all clients as soon as activated\n  return self.clients.claim();\n});\n\nself.addEventListener('fetch', (event) => {\n  // Only handle GET requests and non-chrome-extension requests\n  if (event.request.method !== 'GET' || event.request.url.startsWith('chrome-extension')) {\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Cache hit - return response\n        if (response) {\n          console.log('[Service Worker] Serving from cache:', event.request.url);\n          return response;\n        }\n\n        // No cache hit - fetch from network\n        console.log('[Service Worker] Fetching from network:', event.request.url);\n        return fetch(event.request)\n          .then((networkResponse) => {\n            // Check if we received a valid response\n            if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic') {\n              // Clone the response to put in cache (response is a stream and can only be consumed once)\n              const responseToCache = networkResponse.clone();\n              caches.open(CACHE_NAME).then((cache) => {\n                cache.put(event.request, responseToCache);\n              });\n            }\n            return networkResponse;\n          })\n          .catch(() => {\n            // Network request failed, probably offline\n            console.log('[Service Worker] Network request failed, serving offline page.');\n            return caches.match(OFFLINE_URL); // Serve the offline fallback page\n          });\n      })\n  );\n});\n```",
          "testCases": [
            "Load index.html online: Verify page loads normally. Check DevTools Network tab for Service Worker interception.",
            "Go offline: In DevTools, go to 'Application' -> 'Service Workers', check 'Offline' box. Or set network throttling to 'Offline'.",
            "Reload index.html offline: Verify index.html still loads (from cache).",
            "Navigate to about.html offline: Verify about.html loads offline.html instead.",
            "Clear site data: Clear cache/Service Worker, then reload online. Verify everything re-caches.",
            "Update Service Worker: Change a cached asset (e.g., `style.css`), increment `CACHE_NAME` in `sw.js`. Reload `index.html` twice (once to activate new SW, once to load new asset). Verify updated asset is served."
          ],
          "hints": [
            "The `install` event is where you typically pre-cache your essential assets using `caches.open()` and `cache.addAll()`.",
            "The `fetch` event listener is where you intercept network requests. Use `event.respondWith()` to control the response.",
            "To implement the offline fallback, use a `.catch()` block on the `fetch(event.request)` promise, and inside it, return `caches.match(OFFLINE_URL)`.",
            "Remember that `Response` objects are streams and can only be consumed once. If you need to consume it (e.g., for `cache.put()`) and also return it, you'll need to `clone()` it."
          ],
          "tags": [
            "Service Workers",
            "PWA",
            "Offline",
            "Caching",
            "Web APIs",
            "Performance"
          ],
          "timeEstimate": 75,
          "prerequisites": [
            "Service Worker Basics",
            "Asynchronous JavaScript",
            "Promises",
            "HTML/CSS"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Service Worker Lifecycle",
            "Cache Storage API",
            "Fetch API",
            "Network Resilience"
          ]
        },
        {
          "id": "task_web_worker_heavy_computation",
          "title": "Perform Heavy Computation with Web Worker and Display Progress",
          "description": "\nCreate a web application that calculates prime numbers up to a large limit (e.g., 10 million) using a Web Worker. The main thread should initiate the calculation, but the computationally intensive part should happen in the worker. To provide a better user experience, the worker should send progress updates back to the main thread, and the main thread should display this progress.\n\n**Requirements:**\n1.  **HTML**: A simple page with an input field for the limit, a 'Start Calculation' button, a progress display (e.g., a `div` or `span`), and a result display.\n2.  **Main Thread Script**: \n    *   Create and manage the Web Worker instance.\n    *   Send the calculation limit to the worker via `postMessage()`.\n    *   Listen for `message` events from the worker to receive progress updates and the final result.\n    *   Update the UI (progress and result) based on messages from the worker.\n    *   Ensure the UI remains responsive during computation.\n3.  **Worker Script**: \n    *   Listen for `message` events from the main thread.\n    *   Implement the prime number calculation (e.g., Sieve of Eratosthenes) for the given limit.\n    *   Periodically send progress updates (e.g., every 1% or 10% completion) back to the main thread.\n    *   Send the final list of prime numbers or their count back to the main thread.\n4.  **Error Handling**: Basic error handling for worker creation or messages.\n",
          "difficulty": "hard",
          "startingCode": "```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Prime Number Calculator</title>\n  <style>\n    body { font-family: sans-serif; padding: 20px; }\n    #progress { margin-top: 10px; color: blue; }\n    #result { margin-top: 10px; color: green; }\n  </style>\n</head>\n<body>\n  <h1>Prime Number Calculator</h1>\n  <label for=\"limit\">Calculate primes up to:</label>\n  <input type=\"number\" id=\"limit\" value=\"1000000\" min=\"1000\" step=\"1000\">\n  <button id=\"startButton\">Start Calculation</button>\n  <hr>\n  <div id=\"progress\">Progress: 0%</div>\n  <div id=\"result\">Result: Not started</div>\n\n  <script>\n    let worker;\n\n    document.getElementById('startButton').addEventListener('click', () => {\n      const limit = parseInt(document.getElementById('limit').value);\n      if (isNaN(limit) || limit < 1) {\n        alert('Please enter a valid positive number for the limit.');\n        return;\n      }\n\n      document.getElementById('progress').textContent = 'Progress: 0%';\n      document.getElementById('result').textContent = 'Result: Calculating...';\n      document.getElementById('startButton').disabled = true;\n\n      // TODO: Create Web Worker and handle communication\n      if (worker) { worker.terminate(); } // Terminate previous worker if exists\n      worker = new Worker('prime_calculator.js');\n\n      worker.onmessage = function(event) {\n        const data = event.data;\n        if (data.type === 'progress') {\n          document.getElementById('progress').textContent = `Progress: ${data.value}%`;\n        } else if (data.type === 'result') {\n          document.getElementById('result').textContent = `Result: Found ${data.count} primes. Max: ${data.maxPrime}`; // Display only count for very large numbers\n          document.getElementById('startButton').disabled = false;\n        }\n      };\n\n      worker.onerror = function(error) {\n        console.error('Worker error:', error);\n        document.getElementById('result').textContent = 'Result: Error during calculation.';\n        document.getElementById('startButton').disabled = false;\n      };\n\n      worker.postMessage({ type: 'start', limit: limit });\n    });\n\n  </script>\n</body>\n</html>\n\n<!-- prime_calculator.js (empty) -->\n// Web Worker script for prime number calculation\n```",
          "solutionCode": "```html\n<!-- index.html (as above, only script content changes) -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Prime Number Calculator</title>\n  <style>\n    body { font-family: sans-serif; padding: 20px; }\n    #progress { margin-top: 10px; color: blue; }\n    #result { margin-top: 10px; color: green; }\n  </style>\n</head>\n<body>\n  <h1>Prime Number Calculator</h1>\n  <label for=\"limit\">Calculate primes up to:</label>\n  <input type=\"number\" id=\"limit\" value=\"1000000\" min=\"1000\" step=\"1000\">\n  <button id=\"startButton\">Start Calculation</button>\n  <hr>\n  <div id=\"progress\">Progress: 0%</div>\n  <div id=\"result\">Result: Not started</div>\n\n  <script>\n    let worker;\n\n    document.getElementById('startButton').addEventListener('click', () => {\n      const limit = parseInt(document.getElementById('limit').value);\n      if (isNaN(limit) || limit < 1) {\n        alert('Please enter a valid positive number for the limit.');\n        return;\n      }\n\n      document.getElementById('progress').textContent = 'Progress: 0%';\n      document.getElementById('result').textContent = 'Result: Calculating...';\n      document.getElementById('startButton').disabled = true;\n\n      if (worker) { worker.terminate(); } \n      worker = new Worker('prime_calculator.js');\n\n      worker.onmessage = function(event) {\n        const data = event.data;\n        if (data.type === 'progress') {\n          document.getElementById('progress').textContent = `Progress: ${data.value}%`;\n        } else if (data.type === 'result') {\n          document.getElementById('result').textContent = `Result: Found ${data.count} primes. Max: ${data.maxPrime}`; \n          document.getElementById('startButton').disabled = false;\n        } else if (data.type === 'error') {\n          console.error('Worker reported error:', data.message);\n          document.getElementById('result').textContent = `Result: Error - ${data.message}`;\n          document.getElementById('startButton').disabled = false;\n        }\n      };\n\n      worker.onerror = function(error) {\n        console.error('Worker error:', error);\n        document.getElementById('result').textContent = 'Result: Error during calculation.';\n        document.getElementById('startButton').disabled = false;\n      };\n\n      worker.postMessage({ type: 'start', limit: limit });\n    });\n\n  </script>\n</body>\n</html>\n```\n\n```javascript\n// prime_calculator.js\nself.onmessage = function(event) {\n  const { type, limit } = event.data;\n\n  if (type === 'start') {\n    try {\n      const primes = sieveOfEratosthenes(limit, (progress) => {\n        // Send progress updates back to the main thread\n        self.postMessage({ type: 'progress', value: progress });\n      });\n      const maxPrime = primes.length > 0 ? primes[primes.length - 1] : 0;\n      self.postMessage({ type: 'result', count: primes.length, maxPrime: maxPrime });\n    } catch (e) {\n      self.postMessage({ type: 'error', message: e.message });\n    }\n  }\n};\n\nfunction sieveOfEratosthenes(limit, onProgress) {\n  if (limit < 2) return [];\n  const isPrime = new Array(limit + 1).fill(true);\n  isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime\n\n  const sqrtLimit = Math.sqrt(limit);\n  for (let p = 2; p <= sqrtLimit; p++) {\n    if (isPrime[p]) {\n      for (let multiple = p * p; multiple <= limit; multiple += p) {\n        isPrime[multiple] = false;\n      }\n    }\n  }\n\n  const primes = [];\n  const totalSteps = limit;\n  let lastProgress = 0;\n\n  for (let i = 2; i <= limit; i++) {\n    if (isPrime[i]) {\n      primes.push(i);\n    }\n    // Send progress update periodically\n    const currentProgress = Math.floor((i / totalSteps) * 100);\n    if (currentProgress > lastProgress && currentProgress % 5 === 0) { // Update every 5%\n      onProgress(currentProgress);\n      lastProgress = currentProgress;\n    }\n  }\n  onProgress(100); // Ensure 100% is always sent at the end\n  return primes;\n}\n```",
          "testCases": [
            "Calculate for a small limit (e.g., 1000): Verify quick calculation and correct prime count.",
            "Calculate for a medium limit (e.g., 1,000,000): Verify progress updates are visible and UI remains responsive (try clicking around or typing in other inputs).",
            "Calculate for a large limit (e.g., 10,000,000): Verify sustained progress updates and UI responsiveness. Note: The browser might still show a temporary 'page unresponsive' warning due to message passing overhead for very frequent updates or rendering large numbers of primes if displayed, but the core calculation is off-main thread.",
            "Invalid input: Enter non-numeric or negative limit. Verify error handling in main thread.",
            "Start calculation multiple times: Verify the previous worker is terminated and a new one starts correctly."
          ],
          "hints": [
            "Use the Sieve of Eratosthenes algorithm for efficient prime number generation.",
            "Remember that data passed between the main thread and the worker is copied, not shared. For very large data sets, consider using `Transferable` objects if performance is critical.",
            "Implement `onmessage` on both sides (`worker.onmessage` in main, `self.onmessage` in worker) for two-way communication.",
            "To report progress, decide on a reasonable interval (e.g., every 1% or 5% of completion) and `postMessage` a progress object to the main thread.",
            "For very large numbers, ensure your prime calculation (especially if counting) handles potential JavaScript number limits or use `BigInt` if you need to work with numbers larger than `Number.MAX_SAFE_INTEGER`."
          ],
          "tags": [
            "Web Workers",
            "Performance",
            "Concurrency",
            "Algorithms",
            "User Experience",
            "Background Processing"
          ],
          "timeEstimate": 120,
          "prerequisites": [
            "Web Workers Basics",
            "Asynchronous JavaScript",
            "Algorithm Design (basic)"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "expert",
          "relatedConcepts": [
            "Main Thread Blocking",
            "Event Loop",
            "Sieve of Eratosthenes",
            "Progressive Enhancement"
          ]
        }
      ]
    }
  },
  {
    "id": "6c987e9c-e1c8-4cf9-a05c-752a9c9f3df6",
    "startLine": 11400,
    "endLine": 11499,
    "processedDate": "2025-06-17T12:25:27.974Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_web_workers_intro",
          "title": "Introduction to Web Workers",
          "content": "Web Workers provide a way to run scripts in background threads, separate from the main execution thread of a web page. This allows for long-running scripts to execute without blocking the user interface (UI), ensuring a smooth and responsive user experience. They are particularly useful for performing computationally intensive tasks such as complex calculations, data processing, or large network requests.\n\n## Key Concepts\n- **Background Execution:** Workers run on a separate thread, preventing UI freezing.\n- **No DOM Access:** Web Workers do not have direct access to the DOM (Document Object Model) of the main page. All interactions with the UI must be done by sending messages to the main thread.\n- **Communication:** Communication between the main thread and a worker thread is done via message passing using the `postMessage()` method and handling messages with the `onmessage` event handler.\n- **Dedicated Workers:** The most common type, dedicated to a single script. Each worker has its own global scope.\n- **Shared Workers:** Can be accessed by multiple scripts from different windows, iframes, or even other workers, provided they are from the same origin.\n- **Service Workers:** Used for intercepting network requests, caching assets, and enabling offline experiences. (Not covered in detail here but important for context).\n\n## Worker Life Cycle\n1.  **Creation:** A `Worker` object is created in the main thread, referencing the worker script.\n2.  **Communication:** Messages are sent using `postMessage()` and received via `onmessage`.\n3.  **Termination:** A worker can be terminated from the main thread using `worker.terminate()` or from within the worker itself using `self.close()`.\n\n## Limitations\n- Cannot directly manipulate the DOM.\n- Cannot access global variables or functions defined on the main page.\n- Restricted access to certain browser APIs (e.g., `alert()`, `confirm()`, `document`, `window`).\n\n## Performance Benefits\nBy offloading heavy computations to a worker thread, the main thread remains free to handle UI updates, user input, and other critical tasks, leading to a more fluid and responsive application.",
          "examples": [
            {
              "id": "example_web_workers_1",
              "title": "Main Thread Script (index.js)",
              "code": "// index.js (main thread)\n\n// Check if Web Workers are supported\nif (window.Worker) {\n  const myWorker = new Worker('worker.js');\n\n  // Send data to the worker\n  myWorker.postMessage('Start calculation');\n  console.log('Message sent to worker');\n\n  // Listen for messages from the worker\n  myWorker.onmessage = function(event) {\n    console.log('Received from worker:', event.data);\n    // Update UI based on worker's result (e.g., display result)\n    const resultElement = document.getElementById('result');\n    if (resultElement) {\n      resultElement.textContent = 'Worker says: ' + event.data;\n    }\n  };\n\n  // Handle errors from the worker\n  myWorker.onerror = function(error) {\n    console.error('Worker error:', error);\n  };\n\n  // Example of terminating the worker after some time\n  setTimeout(() => {\n    myWorker.terminate();\n    console.log('Worker terminated.');\n  }, 5000);\n} else {\n  console.log('Web Workers are not supported in this browser.');\n}",
              "explanation": "This JavaScript code runs in the main browser thread. It creates a new `Worker` instance, loads `worker.js`, sends an initial message, and sets up an `onmessage` handler to receive results back. It also demonstrates error handling and termination.",
              "language": "javascript"
            },
            {
              "id": "example_web_workers_2",
              "title": "Worker Script (worker.js)",
              "code": "// worker.js\n\nself.onmessage = function(event) {\n  console.log('Received from main thread in worker:', event.data);\n  // Perform a heavy calculation (e.g., Fibonacci)\n  const calculateFibonacci = (n) => {\n    if (n <= 1) return n;\n    return calculateFibonacci(n - 1) + calculateFibonacci(n - 2);\n  };\n\n  const result = calculateFibonacci(40); // A moderately heavy calculation\n\n  // Send data back to the main thread\n  self.postMessage('Calculation complete! Result: ' + result);\n};\n\n// Handle errors from the worker itself\nself.onerror = function(error) {\n  console.error('Error within worker:', error);\n};\n\n// Optional: respond to termination\nself.onclose = function() {\n  console.log('Worker is about to be terminated.');\n};",
              "explanation": "This script runs in the worker thread. It listens for messages from the main thread using `self.onmessage`, performs a long-running computation (like calculating a Fibonacci number), and then sends the result back to the main thread using `self.postMessage()`. `self` refers to the global scope of the worker.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_web_workers_1",
            "question_web_workers_2",
            "question_web_workers_3",
            "question_web_workers_4"
          ],
          "relatedTasks": [
            "task_web_worker_fibonacci"
          ],
          "tags": [
            "JavaScript",
            "Web Workers",
            "Concurrency",
            "Performance",
            "Frontend Architecture"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "javascript_basics",
            "event_loop"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "requiredFor": [
            "performance_optimization",
            "complex_ui_architecture"
          ]
        },
        {
          "id": "theory_html5_doctype",
          "title": "HTML5 DOCTYPE Declaration",
          "content": "The `<!DOCTYPE html>` declaration is an essential component of any modern HTML document. It's not an HTML tag itself, but rather an instruction to the web browser. Its primary purpose is to inform the browser about the version of HTML the document is written in, enabling the browser to render the page in the most appropriate mode.\n\n## Key Points about DOCTYPE\n- **Instruction to the Browser:** It tells the browser which document type definition (DTD) to use, which in turn dictates how the page should be parsed and rendered.\n- **HTML5 Simplification:** In HTML5, the DOCTYPE declaration is drastically simplified compared to older HTML versions (like HTML 4.01 Strict, Transitional, or XHTML 1.0). The single `<!DOCTYPE html>` declaration is all that's needed for HTML5.\n- **Standards Mode Activation:** The `<!DOCTYPE html>` declaration triggers 'standards mode' in all modern browsers. In standards mode, browsers attempt to render the page according to the W3C (World Wide Web Consortium) specifications, leading to consistent rendering across different browsers.\n- **Quirks Mode Prevention:** Without a proper DOCTYPE, or with an invalid one, browsers might switch to 'quirks mode' (also known as 'backward-compatible mode'). In quirks mode, browsers try to emulate the behavior of older, non-standard browsers (e.g., Netscape 4 or Internet Explorer 5). This can lead to inconsistent layout, styling, and JavaScript behavior across different browsers and even different versions of the same browser, making development and debugging challenging.\n- **Placement:** It *must* appear at the very beginning of the HTML document, before the `<html>` tag, any comments, or any other content.\n- **Case Insensitivity:** In HTML5, the DOCTYPE declaration is case-insensitive, meaning `<!DOCTYPE html>`, `<!doctype html>`, or `<!DoCtYpE hTmLa>` are all valid. However, `<!DOCTYPE html>` is the widely adopted and recommended convention.\n\n## Why it Matters\nUsing the correct DOCTYPE ensures that your web pages are rendered consistently and predictably across different browsers, adhering to modern web standards. This is crucial for cross-browser compatibility, maintaining layout integrity, and ensuring that CSS and JavaScript behave as expected.",
          "examples": [
            {
              "id": "example_html5_doctype_1",
              "title": "Correct HTML5 DOCTYPE Usage",
              "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My HTML5 Page</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>Welcome to HTML5!</h1>\n    <p>This page uses the correct HTML5 DOCTYPE.</p>\n</body>\n</html>",
              "explanation": "This example shows the correct placement and syntax for the HTML5 DOCTYPE declaration. It appears as the very first line of the document, ensuring the browser renders the page in standards mode.",
              "language": "html"
            },
            {
              "id": "example_html5_doctype_2",
              "title": "Impact of Missing DOCTYPE (Conceptual)",
              "code": "<!-- Example of a page that might trigger quirks mode -->\n<html>\n<head>\n    <title>Page without DOCTYPE</title>\n    <style>\n        body {\n            margin: 0; /* Might be ignored in quirks mode */\n            padding: 0;\n        }\n        div {\n            width: 100px; /* Box model differences */\n            height: 100px;\n            border: 1px solid black;\n            padding: 10px;\n            background-color: lightblue;\n        }\n    </style>\n</head>\n<body>\n    <div>Box content</div>\n</body>\n</html>",
              "explanation": "While not directly executable to show quirks mode, this conceptual example illustrates how a missing DOCTYPE could lead to browsers falling back to quirks mode. In quirks mode, CSS properties like `margin` or the box model (`width` and `height` calculations with padding/border) might behave differently than in standards mode, causing layout inconsistencies.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_html5_doctype_1",
            "question_html5_doctype_2",
            "question_html5_doctype_3"
          ],
          "relatedTasks": [
            "task_html5_doctype_validation"
          ],
          "tags": [
            "HTML",
            "HTML5",
            "DOCTYPE",
            "Standards Mode",
            "Quirks Mode",
            "Browser Compatibility"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_structure"
          ],
          "complexity": 3,
          "interviewRelevance": 6,
          "learningPath": "beginner",
          "requiredFor": [
            "web_standards",
            "cross_browser_compatibility"
          ]
        },
        {
          "id": "theory_html5_semantic_elements",
          "title": "HTML5 Semantic Elements",
          "content": "HTML5 introduced a rich set of new semantic elements that provide more meaning and structure to web content beyond just layout. Semantic HTML means using HTML elements for their intended purpose, conveying the meaning and role of the content they enclose, rather than just how they appear visually.\n\n## Benefits of Semantic HTML\n-   **Accessibility:** Improves the experience for users with disabilities, as screen readers and other assistive technologies can better interpret the page structure.\n-   **SEO (Search Engine Optimization):** Search engines can better understand the content and hierarchy of your page, potentially leading to improved rankings.\n-   **Readability and Maintainability:** Makes the code easier for developers to read, understand, and maintain, especially in large projects.\n-   **Better Code Organization:** Encourages a more logical and structured approach to markup.\n\n## Key Semantic Elements\n\nHere are some of the most commonly used HTML5 semantic elements:\n\n-   **`<header>`:** Defines introductory content or a set of navigational links for a document or a section. It often contains headings, logos, authorship information, and navigation.\n\n-   **`<nav>`:** Defines a section of navigation links, either within the main site navigation or a sub-navigation.\n\n-   **`<main>`:** Represents the dominant content of the `<body>` of a document. There should only be one `<main>` element per document.\n\n-   **`<section>`:** Defines a standalone section within a document, which doesn't have a more specific semantic element to represent it. It typically has a heading.\n\n-   **`<article>`:** Defines independent, self-contained content that could be distributed and reused independently. Examples include a blog post, a news story, a forum post, or a user-submitted comment.\n\n-   **`<aside>`:** Defines content 'aside' from the content it is placed in, meaning it's related but tangential. This is often used for sidebars, pull quotes, or advertisements.\n\n-   **`<footer>`:** Defines a footer for its nearest sectioning content or for the entire document. It typically contains information about the author, copyright data, related documents, or links to terms of use.\n\n-   **`<figure>` and `<figcaption>`:**\n    -   **`<figure>`:** Specifies self-contained content, frequently an image, diagram, code snippet, or video, that is referenced from the main flow of the document.\n    -   **`<figcaption>`:** Provides a caption or legend for the content of its parent `<figure>` element.\n\n-   **`<details>` and `<summary>`:** (Not explicitly in original, but good to add for modern HTML5)\n    -   **`<details>`:** Creates a disclosure widget in which information is only visible when the widget is toggled into an 'open' state.\n    -   **`<summary>`:** Provides a summary or caption for the content of its parent `<details>` element.\n\nUsing these elements appropriately helps build web pages that are more meaningful not only to humans but also to machines.",
          "examples": [
            {
              "id": "example_html5_semantic_1",
              "title": "Basic Document Structure with Semantic Elements",
              "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Semantic HTML Example</title>\n</head>\n<body>\n\n    <header>\n        <h1>My Awesome Blog</h1>\n        <nav>\n            <ul>\n                <li><a href=\"/\">Home</a></li>\n                <li><a href=\"/about\">About</a></li>\n                <li><a href=\"/contact\">Contact</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main>\n        <article>\n            <h2>Latest Blog Post</h2>\n            <p>Published on: <time datetime=\"2023-10-27\">October 27, 2023</time></p>\n            <section>\n                <h3>Introduction</h3>\n                <p>This is the introductory paragraph of the blog post...</p>\n            </section>\n            <section>\n                <h3>Main Content</h3>\n                <p>The main content of the article goes here. It can contain paragraphs, images, etc.</p>\n                <figure>\n                    <img src=\"/images/example.jpg\" alt=\"A beautiful landscape\">\n                    <figcaption>A scenic view from the mountains.</figcaption>\n                </figure>\n            </section>\n            <section>\n                <h3>Conclusion</h3>\n                <p>Concluding remarks for the blog post.</p>\n            </section>\n        </article>\n\n        <aside>\n            <h3>Related Articles</h3>\n            <ul>\n                <li><a href=\"#\">Article 1</a></li>\n                <li><a href=\"#\">Article 2</a></li>\n            </ul>\n        </aside>\n    </main>\n\n    <footer>\n        <p>&copy; 2023 My Awesome Blog</p>\n        <address>\n            Contact me at <a href=\"mailto:info@example.com\">info@example.com</a>\n        </address>\n    </footer>\n\n</body>\n</html>",
              "explanation": "This example demonstrates how semantic HTML5 elements are used to structure a typical blog page. `<header>`, `<nav>`, `<main>`, `<article>`, `<section>`, `<aside>`, `<footer>`, `<figure>`, and `<figcaption>` are all used according to their semantic meaning, providing clear context for the content.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_html5_semantic_1",
            "question_html5_semantic_2",
            "question_html5_semantic_3",
            "question_html5_semantic_4"
          ],
          "relatedTasks": [
            "task_html5_semantic_refactor"
          ],
          "tags": [
            "HTML",
            "HTML5",
            "Semantic HTML",
            "Accessibility",
            "SEO",
            "Web Standards"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_basics",
            "dom_structure"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "accessible_web_development",
            "seo_friendly_websites"
          ]
        },
        {
          "id": "theory_html5_form_elements",
          "title": "HTML5 New Form Elements and Input Types",
          "content": "HTML5 significantly enhanced web forms by introducing a variety of new input types and elements, simplifying common form interactions and providing built-in validation capabilities. These additions reduce the need for custom JavaScript and improve user experience.\n\n## New Input Types\n\n-   **`<input type=\"date\">`**: Allows users to select a date. The browser often provides a calendar interface.\n-   **`<input type=\"time\">`**: Allows users to select a time.\n-   **`<input type=\"datetime-local\">`**: Combines date and time selection, without timezone information.\n-   **`<input type=\"month\">`**: Allows users to select a month and year.\n-   **`<input type=\"week\">`**: Allows users to select a week and year.\n\n-   **`<input type=\"number\">`**: For numerical input. Can be constrained with `min`, `max`, and `step` attributes.\n    -   `min`: Specifies the minimum allowed value.\n    -   `max`: Specifies the maximum allowed value.\n    -   `step`: Specifies the legal number intervals.\n\n-   **`<input type=\"range\">`**: Creates a slider control. Commonly used for selecting a value from a specified range. Also uses `min`, `max`, and `step`.\n\n-   **`<input type=\"color\">`**: Provides a color picker interface to select a color.\n\n-   **`<input type=\"email\">`**: For entering email addresses. Provides basic client-side validation for email format. Can also use `multiple` attribute.\n-   **`<input type=\"url\">`**: For entering URLs. Provides basic client-side validation for URL format.\n-   **`<input type=\"tel\">`**: For entering telephone numbers. No special validation, but often triggers numerical keyboard on mobile devices.\n-   **`<input type=\"search\">`**: For search fields. Often styled differently by browsers (e.g., with an 'x' to clear).\n\n## New Form Elements\n\n-   **`<datalist>`**: Provides a list of pre-defined options for an `<input>` element. It's not a dropdown list, but rather an autocomplete feature, where the user can choose from the suggestions or type their own value.\n    -   Used in conjunction with the `list` attribute on an `<input>` element.\n\nThese new types and elements enhance user interaction, improve data quality through built-in validation, and simplify form development.",
          "examples": [
            {
              "id": "example_html5_form_elements_1",
              "title": "Date and Time Inputs",
              "code": "<form>\n  <label for=\"birthdate\">Birthdate:</label>\n  <input type=\"date\" id=\"birthdate\" name=\"birthdate\">\n\n  <label for=\"appointment-time\">Appointment Time:</label>\n  <input type=\"time\" id=\"appointment-time\" name=\"appointment-time\">\n\n  <label for=\"event-datetime\">Event Date & Time:</label>\n  <input type=\"datetime-local\" id=\"event-datetime\" name=\"event-datetime\">\n\n  <label for=\"vacation-month\">Vacation Month:</label>\n  <input type=\"month\" id=\"vacation-month\" name=\"vacation-month\">\n\n  <label for=\"enrollment-week\">Enrollment Week:</label>\n  <input type=\"week\" id=\"enrollment-week\" name=\"enrollment-week\">\n</form>",
              "explanation": "This example showcases various date and time input types introduced in HTML5, allowing browsers to provide native UI controls for selection, enhancing user experience and data consistency.",
              "language": "html"
            },
            {
              "id": "example_html5_form_elements_2",
              "title": "Number, Range, Color, and Datalist Inputs",
              "code": "<form>\n  <label for=\"quantity\">Quantity (1-5):</label>\n  <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\" value=\"1\">\n\n  <label for=\"volume\">Volume (0-100):</label>\n  <input type=\"range\" id=\"volume\" name=\"volume\" min=\"0\" max=\"100\" value=\"50\">\n\n  <label for=\"favcolor\">Favorite Color:</label>\n  <input type=\"color\" id=\"favcolor\" name=\"favcolor\" value=\"#ff0000\">\n\n  <label for=\"browser-choice\">Choose your browser:</label>\n  <input list=\"browsers\" id=\"browser-choice\" name=\"browser\">\n  <datalist id=\"browsers\">\n    <option value=\"Chrome\">\n    <option value=\"Firefox\">\n    <option value=\"Safari\">\n    <option value=\"Edge\">\n    <option value=\"Opera\">\n  </datalist>\n</form>",
              "explanation": "This example demonstrates `number` (with `min`/`max` constraints), `range` (a slider), `color` (a color picker), and the combination of `input type=\"list\"` with `<datalist>` for an autocomplete-like suggestion feature.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_html5_form_elements_1",
            "question_html5_form_elements_2",
            "question_html5_form_elements_3"
          ],
          "relatedTasks": [
            "task_html5_complex_form"
          ],
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Input Types",
            "User Experience",
            "Client-side Validation"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_forms_basics"
          ],
          "complexity": 4,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "web_form_development",
            "frontend_forms"
          ]
        },
        {
          "id": "theory_html5_form_attributes",
          "title": "HTML5 New Form Attributes",
          "content": "In addition to new input types, HTML5 introduced several new attributes for form elements, enhancing their functionality, improving user experience, and providing more control over client-side validation and behavior.\n\n## Key Form Attributes\n\n-   **`placeholder`**: Provides a hint to the user about what kind of input is expected in the field. This text appears inside the input field when it's empty and disappears when the user starts typing.\n    ```html\n    <input type=\"text\" placeholder=\"Enter your name\">\n    ```\n\n-   **`autofocus`**: A boolean attribute. When present, it specifies that the input field should automatically get focus when the page loads. Only one element in a document can have the `autofocus` attribute.\n    ```html\n    <input type=\"text\" autofocus>\n    ```\n\n-   **`autocomplete`**: Controls whether the browser should provide autocomplete suggestions based on previously entered values. It can be set to `on` (default for most inputs) or `off` (to prevent autofill for sensitive data).\n    ```html\n    <input type=\"email\" autocomplete=\"off\">\n    ```\n\n-   **`required`**: A boolean attribute. When present, it specifies that the input field must be filled out before the form can be submitted. The browser will prevent submission and display an error message if the field is empty.\n    ```html\n    <input type=\"text\" required>\n    ```\n\n-   **`pattern`**: Specifies a regular expression pattern that the input's value must match for the form to be valid. The `title` attribute can be used to provide a descriptive tooltip to help the user understand the required format.\n    ```html\n    <input type=\"text\" pattern=\"[A-Za-z]{3}\" title=\"Three letter country code\">\n    ```\n\n-   **`list`**: Used on `<input>` elements. It references the `id` of a `<datalist>` element, providing a list of pre-defined options for an autocomplete-like functionality.\n    ```html\n    <input list=\"browsers\" name=\"browser\">\n    <datalist id=\"browsers\">\n      <option value=\"Chrome\">\n    </datalist>\n    ```\n\n-   **`multiple`**: A boolean attribute. When present, it allows the user to select multiple values. It's applicable to `<input type=\"email\">` (for multiple email addresses separated by commas) and `<input type=\"file\">` (for selecting multiple files).\n    ```html\n    <input type=\"email\" multiple>\n    <input type=\"file\" multiple>\n    ```\n\n-   **`novalidate`**: A boolean attribute. Applied to the `<form>` tag, it disables the browser's built-in validation for the entire form when submitted.\n    ```html\n    <form novalidate>\n      <!-- form elements -->\n    </form>\n    ```\n\n-   **`formnovalidate`**: A boolean attribute. Applied to a `submit` button (`<input type=\"submit\">` or `<button type=\"submit\">`), it disables browser validation specifically for that submit button, even if the form itself has client-side validation.\n    ```html\n    <input type=\"submit\" value=\"Submit\" formnovalidate>\n    ```\n\n-   **`form`**: Specifies one or more forms the input element belongs to. This attribute is useful when an input element is placed outside of its `<form>` element (e.g., in a separate part of the page layout).\n    ```html\n    <form id=\"myForm\">\n      <!-- other form elements -->\n    </form>\n    <input type=\"text\" name=\"username\" form=\"myForm\">\n    ```\n\nThese attributes provide powerful tools for creating more robust, user-friendly, and accessible forms with less JavaScript, relying on the browser's native capabilities.",
          "examples": [
            {
              "id": "example_html5_form_attributes_1",
              "title": "Validation Attributes",
              "code": "<form action=\"/submit-form\" method=\"post\">\n  <label for=\"username\">Username (3-10 chars, letters only):</label>\n  <input \n    type=\"text\" \n    id=\"username\" \n    name=\"username\" \n    placeholder=\"e.g., JohnDoe\" \n    pattern=\"[A-Za-z]{3,10}\" \n    title=\"Username must be 3-10 letters only\"\n    required\n  >\n  \n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"your.email@example.com\" required multiple>\n\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" id=\"password\" name=\"password\" required>\n\n  <button type=\"submit\">Register</button>\n  <button type=\"submit\" formnovalidate>Submit without validation</button>\n</form>",
              "explanation": "This example demonstrates `placeholder`, `pattern`, `title` (for `pattern` help), `required`, and `multiple` (for email input). It also shows `formnovalidate` on a specific submit button.",
              "language": "html"
            },
            {
              "id": "example_html5_form_attributes_2",
              "title": "Autofocus and External Input",
              "code": "<form id=\"contactForm\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\" autofocus required>\n\n  <label for=\"message\">Message:</label>\n  <textarea id=\"message\" name=\"message\"></textarea>\n\n  <input type=\"submit\" value=\"Send Message\">\n</form>\n\n<div style=\"margin-top: 20px; border: 1px dashed gray; padding: 10px;\">\n  <h3>Outside Form Input:</h3>\n  <label for=\"feedback-email\">Your Email (associated with contact form):</label>\n  <input type=\"email\" id=\"feedback-email\" name=\"feedbackEmail\" form=\"contactForm\" autocomplete=\"off\">\n</div>",
              "explanation": "This example illustrates `autofocus` which automatically focuses the 'Name' input on page load. It also shows the `form` attribute being used to associate an `input` element (`feedback-email`) located outside the `<form>` tag with the `contactForm`.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_html5_form_attributes_1",
            "question_html5_form_attributes_2",
            "question_html5_form_attributes_3",
            "question_html5_form_attributes_4"
          ],
          "relatedTasks": [
            "task_html5_complex_form"
          ],
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Attributes",
            "Validation",
            "User Experience"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_forms_basics"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "web_form_development",
            "frontend_forms_validation"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_web_workers_1",
          "topic": "Web Workers Basics",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary benefit of using Web Workers?",
          "answer": "Web Workers allow JavaScript code to run in a background thread, separate from the main UI thread, preventing the web page from freezing during computationally intensive tasks.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Web Workers",
            "UI Thread",
            "Background Processing",
            "Performance"
          ],
          "evaluationCriteria": [
            "Understanding of core purpose",
            "Knowledge of performance implications"
          ],
          "example": "",
          "tags": [
            "JavaScript",
            "Web Workers",
            "Performance"
          ],
          "prerequisites": [
            "javascript_basics",
            "browser_execution_model"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_web_workers_2",
          "topic": "Web Workers Communication",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following methods is used to send data from the main thread to a Web Worker, and from the worker back to the main thread?",
          "answer": "postMessage()",
          "options": [
            "sendMessage()",
            "postMessage()",
            "transferMessage()",
            "dispatchMessage()"
          ],
          "analysisPoints": [
            "Recognizing the correct API for inter-thread communication in Web Workers.",
            "Understanding that `postMessage()` is bidirectional."
          ],
          "keyConcepts": [
            "Web Workers",
            "Message Passing",
            "postMessage"
          ],
          "evaluationCriteria": [
            "Correct identification of Web Worker communication method.",
            "Distinguishing from plausible but incorrect options."
          ],
          "example": "The `postMessage()` method sends a message to the worker. The worker then listens for this message using `self.onmessage`. Similarly, the worker uses `self.postMessage()` to send a message back to the main thread, which listens via `worker.onmessage`.",
          "tags": [
            "JavaScript",
            "Web Workers",
            "Communication"
          ],
          "prerequisites": [
            "web_workers_intro"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_workers_3",
          "topic": "Web Workers Limitations",
          "level": "medium",
          "type": "open",
          "question": "Can Web Workers directly access the DOM? If not, how do they interact with the web page's user interface?",
          "answer": "No, Web Workers cannot directly access the DOM (Document Object Model). They run in a separate thread and do not have access to the `document` or `window` objects of the main thread. To interact with the web page's user interface, Web Workers must communicate with the main thread using message passing. The worker sends data (e.g., results of a computation) to the main thread via `self.postMessage()`, and the main thread receives this data using an `onmessage` event handler. The main thread then updates the DOM based on the received data.",
          "analysisPoints": [
            "Correctly stating the limitation regarding DOM access.",
            "Explaining the mechanism of message passing (`postMessage` and `onmessage`) as the intermediary for UI interaction.",
            "Demonstrating understanding of the separation of concerns between worker and main threads."
          ],
          "keyConcepts": [
            "Web Workers",
            "DOM Access",
            "Message Passing",
            "Main Thread",
            "UI Updates"
          ],
          "evaluationCriteria": [
            "Accuracy of the limitation description.",
            "Clarity and completeness of the interaction mechanism explanation.",
            "Understanding of the architectural implications."
          ],
          "example": "",
          "tags": [
            "JavaScript",
            "Web Workers",
            "DOM",
            "Architecture",
            "Limitations"
          ],
          "prerequisites": [
            "web_workers_intro"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_workers_4",
          "topic": "Web Workers vs. Main Thread",
          "level": "hard",
          "type": "code",
          "question": "Consider a web application that needs to perform a very large calculation (e.g., processing a huge array of numbers) when a button is clicked. Describe the potential issues if this calculation is done directly on the main thread, and then write a conceptual code snippet demonstrating how to offload this task to a Web Worker, including communication.",
          "answer": "",
          "options": [],
          "analysisPoints": [
            "Identify UI freezing/unresponsiveness as the main issue on the main thread.",
            "Demonstrate correct Web Worker creation and lifecycle (`new Worker()`, `postMessage()`, `onmessage`, `terminate()`).",
            "Show message passing for input to the worker and results back to the main thread.",
            "Highlight separation of concerns between main and worker script contexts.",
            "Consider error handling and termination."
          ],
          "keyConcepts": [
            "Web Workers",
            "Main Thread Blocking",
            "Performance Optimization",
            "Message Passing",
            "UI Responsiveness"
          ],
          "evaluationCriteria": [
            "Ability to articulate performance bottlenecks.",
            "Correct implementation of Web Worker creation and communication.",
            "Demonstration of understanding worker thread context.",
            "Clarity of conceptual code."
          ],
          "example": "Potential issues on the main thread: If a large calculation is performed directly on the main thread, it will block the browser's UI thread. This means the page will become unresponsive: users won't be able to click buttons, scroll, or interact with any elements, and animations will freeze. The browser might even show a 'script unresponsive' warning.\n\n```javascript\n// index.html (excerpt)\n// <button id=\"calculateBtn\">Start Heavy Calculation</button>\n// <p id=\"status\">Status: Ready</p>\n\n// main.js (Main Thread Script)\nconst calculateBtn = document.getElementById('calculateBtn');\nconst statusParagraph = document.getElementById('status');\nlet worker = null;\n\ncalculateBtn.addEventListener('click', () => {\n  if (worker) {\n    worker.terminate(); // Terminate existing worker if any\n  }\n  worker = new Worker('heavy_calc_worker.js');\n  statusParagraph.textContent = 'Status: Calculation started...';\n  calculateBtn.disabled = true;\n\n  // Send data to the worker\n  const dataToSend = { iterations: 100000000 };\n  worker.postMessage(dataToSend);\n\n  worker.onmessage = (event) => {\n    console.log('Main thread received:', event.data);\n    statusParagraph.textContent = 'Status: ' + event.data.message + ' Result: ' + event.data.result;\n    calculateBtn.disabled = false;\n    worker.terminate(); // Terminate worker after receiving result\n    worker = null;\n  };\n\n  worker.onerror = (error) => {\n    console.error('Worker error in main thread:', error);\n    statusParagraph.textContent = 'Status: Error during calculation.';\n    calculateBtn.disabled = false;\n    if (worker) worker.terminate();\n    worker = null;\n  };\n});\n\n// heavy_calc_worker.js (Worker Thread Script)\nself.onmessage = function(event) {\n  const { iterations } = event.data;\n  console.log('Worker received task with iterations:', iterations);\n  \n  let sum = 0;\n  for (let i = 0; i < iterations; i++) {\n    sum += Math.sqrt(i);\n  }\n\n  self.postMessage({ message: 'Calculation finished!', result: sum });\n};\n\nself.onerror = function(error) {\n  console.error('Error within worker:', error);\n  self.postMessage({ message: 'Error in worker calculation.' });\n};\n```",
          "tags": [
            "JavaScript",
            "Web Workers",
            "Performance",
            "Concurrency",
            "Code Example"
          ],
          "prerequisites": [
            "web_workers_intro",
            "javascript_async"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_html5_doctype_1",
          "topic": "DOCTYPE Declaration",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the HTML5 DOCTYPE declaration?",
          "answer": "`<!DOCTYPE html>` is an instruction to the web browser that tells it the document is written in HTML5. It's not an HTML tag.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "DOCTYPE",
            "HTML5",
            "Browser Instruction"
          ],
          "evaluationCriteria": [
            "Recall of definition",
            "Distinguishing from HTML tags"
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "DOCTYPE"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_html5_doctype_2",
          "topic": "Standards vs. Quirks Mode",
          "level": "medium",
          "type": "mcq",
          "question": "What is the primary benefit of including `<!DOCTYPE html>` at the beginning of your HTML document?",
          "answer": "It ensures the browser renders the page in 'standards mode', leading to consistent rendering across browsers.",
          "options": [
            "It speeds up page loading by pre-parsing HTML.",
            "It ensures the browser renders the page in 'standards mode', leading to consistent rendering across browsers.",
            "It defines the character encoding for the document.",
            "It enables JavaScript execution in the browser."
          ],
          "analysisPoints": [
            "Identifying the correct mode triggered by DOCTYPE.",
            "Understanding the impact on cross-browser consistency.",
            "Distinguishing from unrelated HTML functions (e.g., `charset`, script execution)."
          ],
          "keyConcepts": [
            "DOCTYPE",
            "Standards Mode",
            "Quirks Mode",
            "Browser Rendering",
            "Cross-browser Compatibility"
          ],
          "evaluationCriteria": [
            "Correct identification of DOCTYPE's role.",
            "Understanding of standards mode benefits."
          ],
          "example": "Without `<!DOCTYPE html>`, browsers might fall into 'quirks mode', which can cause unpredictable rendering behavior due to attempts to emulate older, non-standard browser interpretations. Standards mode, triggered by the DOCTYPE, makes browsers follow modern W3C specifications for consistent display.",
          "tags": [
            "HTML",
            "HTML5",
            "DOCTYPE",
            "Browser Rendering"
          ],
          "prerequisites": [
            "html5_doctype"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_html5_doctype_3",
          "topic": "DOCTYPE Placement",
          "level": "easy",
          "type": "open",
          "question": "Where must the `<!DOCTYPE html>` declaration be placed in an HTML document, and what might happen if it's placed incorrectly or omitted?",
          "answer": "The `<!DOCTYPE html>` declaration must be the very first line of the HTML document, before any `<html>` tag, comments, or any other content. If it's placed incorrectly (e.g., after a comment or a blank line) or omitted entirely, the browser might render the page in 'quirks mode' instead of 'standards mode'. This can lead to inconsistent rendering, unexpected layout issues, and different behavior of CSS and JavaScript across various browsers or even browser versions.",
          "analysisPoints": [
            "Correctly specifying the exact placement.",
            "Explaining the consequence of incorrect placement or omission (quirks mode).",
            "Mentioning inconsistent rendering and behavior as effects of quirks mode."
          ],
          "keyConcepts": [
            "DOCTYPE",
            "Placement",
            "Quirks Mode",
            "Standards Mode",
            "Rendering"
          ],
          "evaluationCriteria": [
            "Accuracy of placement rule.",
            "Completeness of explanation of consequences."
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "DOCTYPE",
            "Best Practices"
          ],
          "prerequisites": [
            "html5_doctype"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_html5_semantic_1",
          "topic": "Semantic Elements Definition",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of HTML5 semantic elements?",
          "answer": "To give meaning to the structure and content of a web page, making it more understandable for browsers, search engines, and assistive technologies, and improving code readability for developers.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Semantic HTML",
            "Meaning",
            "Structure",
            "Accessibility",
            "SEO"
          ],
          "evaluationCriteria": [
            "Understanding core concept",
            "Identifying key benefits"
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Semantic HTML"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_html5_semantic_2",
          "topic": "Semantic Elements Usage",
          "level": "medium",
          "type": "mcq",
          "question": "Which HTML5 semantic element should be used to define an independent, self-contained piece of content, such as a blog post or a news article?",
          "answer": "`<article>`",
          "options": [
            "`<section>`",
            "`<div>`",
            "`<article>`",
            "`<main>`"
          ],
          "analysisPoints": [
            "Distinguishing between `<article>` and `<section>`.",
            "Understanding the 'independent, self-contained' characteristic of `<article>`.",
            "Avoiding common mistakes like using generic `<div>`."
          ],
          "keyConcepts": [
            "Semantic HTML",
            "Article",
            "Section",
            "HTML5 Tags"
          ],
          "evaluationCriteria": [
            "Correct identification of semantic element.",
            "Understanding the specific use case of `<article>`."
          ],
          "example": "While `<section>` defines a generic section of a document, `<article>` is specifically for content that makes sense on its own, like a news story, a comment, or a blog entry, even if syndicated elsewhere. `<main>` identifies the dominant content of the body, and `<div>` has no semantic meaning.",
          "tags": [
            "HTML",
            "HTML5",
            "Semantic HTML",
            "Accessibility"
          ],
          "prerequisites": [
            "html5_semantic_elements"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_html5_semantic_3",
          "topic": "Semantic Elements Benefits",
          "level": "medium",
          "type": "open",
          "question": "Explain at least two significant benefits of using semantic HTML5 elements over non-semantic `<div>` and `<span>` elements for structuring a web page.",
          "answer": "Two significant benefits of using semantic HTML5 elements are:\n\n1.  **Improved Accessibility:** Semantic elements provide clear structural meaning to the content. Screen readers and other assistive technologies can use this meaning to better navigate and interpret the page for users with disabilities. For example, a `<nav>` element explicitly tells a screen reader that its content is navigation links, allowing users to quickly jump to them. A generic `<div>` would not convey this information.\n2.  **Enhanced SEO (Search Engine Optimization):** Search engines (like Google) crawl and parse web pages to understand their content and structure. Semantic elements provide more context and clues about the importance and relationship of different parts of the page. For instance, content within an `<article>` is likely to be the main subject, and content within an `<aside>` is tangential. This semantic clarity can help search engines better index and rank your pages, potentially leading to higher visibility in search results.",
          "analysisPoints": [
            "Clearly articulate at least two distinct benefits.",
            "Provide specific examples of how semantic elements achieve these benefits (e.g., screen readers for accessibility, search engine indexing for SEO).",
            "Contrast with the lack of meaning in non-semantic tags."
          ],
          "keyConcepts": [
            "Semantic HTML",
            "Accessibility",
            "SEO",
            "Div vs Semantic",
            "Web Standards"
          ],
          "evaluationCriteria": [
            "Clarity and correctness of explanations.",
            "Relevance of examples.",
            "Demonstrated understanding of semantic purpose."
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Semantic HTML",
            "Accessibility",
            "SEO"
          ],
          "prerequisites": [
            "html5_semantic_elements"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_html5_semantic_4",
          "topic": "Figure and Figcaption",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of the `<figure>` and `<figcaption>` elements?",
          "answer": "`<figure>` is used to mark up self-contained content, often an image, diagram, code snippet, or video, that is referenced from the main flow. `<figcaption>` provides a caption for the content within its parent `<figure>` element.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Figure",
            "Figcaption",
            "Semantic HTML",
            "Content Grouping"
          ],
          "evaluationCriteria": [
            "Correct definition of both elements",
            "Understanding their relationship"
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Semantic HTML"
          ],
          "prerequisites": [
            "html5_semantic_elements"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_html5_form_elements_1",
          "topic": "New Input Types",
          "level": "medium",
          "type": "mcq",
          "question": "Which HTML5 input type provides a slider control for selecting a numerical value within a specified range?",
          "answer": "`range`",
          "options": [
            "`number`",
            "`slider`",
            "`range`",
            "`progress`"
          ],
          "analysisPoints": [
            "Identifying the correct HTML5 input type for a slider.",
            "Distinguishing it from `number` (which is a text field for numbers) and `progress` (which is a display element, not an input)."
          ],
          "keyConcepts": [
            "HTML5 Forms",
            "Input Types",
            "Range Input",
            "UI Controls"
          ],
          "evaluationCriteria": [
            "Correct identification of the input type.",
            "Understanding its specific visual and functional purpose."
          ],
          "example": "The `<input type=\"range\">` element creates a slider. It's typically used with `min`, `max`, and `step` attributes to define the range and granularity of the slider. For example: `<input type=\"range\" min=\"0\" max=\"100\" value=\"50\">`.",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Input Types"
          ],
          "prerequisites": [
            "html5_form_elements"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_html5_form_elements_2",
          "topic": "Datalist Usage",
          "level": "medium",
          "type": "open",
          "question": "Explain how the `<datalist>` element is used in conjunction with an `<input>` element to provide autocomplete suggestions. Provide a simple HTML example.",
          "answer": "The `<datalist>` element provides a list of `option` elements that serve as pre-defined suggestions for an `<input>` field. It's not a strict dropdown; users can still type their own value, but they are offered suggestions as they type.\n\nTo link a `<datalist>` to an `<input>` element, the `list` attribute of the `<input>` must be set to the `id` of the `<datalist>` element.\n\nExample:\n```html\n<label for=\"country-input\">Select or type your country:</label>\n<input list=\"countries\" id=\"country-input\" name=\"country\">\n\n<datalist id=\"countries\">\n  <option value=\"United States\">\n  <option value=\"Canada\">\n  <option value=\"Mexico\">\n  <option value=\"United Kingdom\">\n  <option value=\"Germany\">\n  <option value=\"France\">\n  <option value=\"Japan\">\n</datalist>\n```\n\nWhen a user starts typing in the `country-input` field, the browser will display suggestions from the `countries` datalist that match the typed characters. The user can select one of the suggestions or continue typing a custom value.",
          "analysisPoints": [
            "Clearly explain the purpose of `<datalist>` (suggestions, not strict dropdown).",
            "Explain the linkage via `list` attribute and `id` attribute.",
            "Provide a correct and concise HTML example demonstrating the usage.",
            "Mention the autocomplete behavior."
          ],
          "keyConcepts": [
            "HTML5 Forms",
            "Datalist",
            "Input Element",
            "Autocomplete",
            "User Experience"
          ],
          "evaluationCriteria": [
            "Accuracy of explanation.",
            "Correctness and clarity of the code example.",
            "Understanding of the user interaction."
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Datalist",
            "Autocomplete"
          ],
          "prerequisites": [
            "html5_form_elements"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_html5_form_elements_3",
          "topic": "Email Input Type",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary benefit of using `<input type=\"email\">`?",
          "answer": "It provides built-in client-side validation to ensure the entered text has the basic format of an email address (e.g., includes '@' and a domain), and on mobile devices, it often triggers an email-optimized keyboard.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Input Type Email",
            "Client-side Validation",
            "User Experience"
          ],
          "evaluationCriteria": [
            "Recall of benefit",
            "Understanding of validation and UX features"
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Input Types"
          ],
          "prerequisites": [
            "html5_form_elements"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_html5_form_attributes_1",
          "topic": "Required Attribute",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of the `required` attribute in an HTML5 form input?",
          "answer": "The `required` attribute specifies that an input field must be filled out before the form can be submitted. The browser will prevent submission and show a validation message if the field is empty.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Required Attribute",
            "Client-side Validation",
            "Form Submission"
          ],
          "evaluationCriteria": [
            "Recall of purpose",
            "Understanding of validation effect"
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Attributes"
          ],
          "prerequisites": [
            "html5_form_attributes"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_html5_form_attributes_2",
          "topic": "Pattern Attribute",
          "level": "medium",
          "type": "mcq",
          "question": "You want to create an input field that only accepts exactly 5 digits. Which HTML5 attribute and value combination would you use for client-side validation?",
          "answer": "`pattern=\"\\d{5}\"`",
          "options": [
            "`minlength=\"5\" maxlength=\"5\"`",
            "`type=\"number\" min=\"10000\" max=\"99999\"`",
            "`pattern=\"[0-9]{5}\"`",
            "`pattern=\"\\d{5}\"`"
          ],
          "analysisPoints": [
            "Identifying `pattern` as the correct attribute for regex validation.",
            "Knowing basic regex syntax for digits (`\\d` or `[0-9]`) and exact length (`{5}`).",
            "Understanding that `minlength/maxlength` apply to character count, not necessarily digits, and `type=\"number\"` with `min/max` validates value range, not pattern.",
            "Recognizing `[0-9]{5}` is equivalent to `\\d{5}` and both are valid, but `\\d` is more concise for digits."
          ],
          "keyConcepts": [
            "HTML5 Forms",
            "Pattern Attribute",
            "Regex",
            "Client-side Validation"
          ],
          "evaluationCriteria": [
            "Correct application of `pattern` attribute.",
            "Knowledge of basic regular expressions for form validation."
          ],
          "example": "The `pattern` attribute uses regular expressions. `\\d` (or `[0-9]`) matches any digit, and `{5}` specifies exactly five occurrences. While `[0-9]{5}` is also correct, `\\d{5}` is a common and concise way to represent five digits. `minlength`/`maxlength` check string length, and `type=\"number\"` with `min`/`max` check the numeric value range, not a specific digit pattern.",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Attributes",
            "Validation",
            "Regex"
          ],
          "prerequisites": [
            "html5_form_attributes",
            "regex_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_html5_form_attributes_3",
          "topic": "Formnovalidate vs Novalidate",
          "level": "hard",
          "type": "open",
          "question": "Differentiate between the `novalidate` attribute on a `<form>` element and the `formnovalidate` attribute on a submit button. When would you typically use `formnovalidate`?",
          "answer": "`novalidate` attribute on a `<form>`: When this boolean attribute is present on the `<form>` tag, it completely disables the browser's default client-side validation for *all* input fields within that form. The form will submit without any browser-imposed checks for `required`, `pattern`, `type=\"email\"`, etc.\n\n`formnovalidate` attribute on a `submit` button: This boolean attribute is placed on an `<input type=\"submit\">` or `<button type=\"submit\">`. When this specific submit button is clicked, it will bypass the browser's default client-side validation for the form, even if the form itself (or other submit buttons) *does not* have `novalidate` set. All other submit buttons on the same form would still trigger validation.\n\nYou would typically use `formnovalidate` when you want to provide alternative ways to submit a form, such as:\n*   **'Save Draft' functionality:** A user might want to save their progress without fulfilling all required fields for final submission.\n*   **'Skip Validation' for specific actions:** For instance, an 'Export' button on a form that simply takes current data and doesn't require all fields to be valid.",
          "analysisPoints": [
            "Clearly define `novalidate` and its scope (entire form).",
            "Clearly define `formnovalidate` and its scope (specific submit button).",
            "Provide concrete, realistic use cases for `formnovalidate` (e.g., save draft, skip validation for partial submission).",
            "Emphasize the difference in granularity of control."
          ],
          "keyConcepts": [
            "HTML5 Forms",
            "Validation",
            "Novalidate",
            "Formnovalidate",
            "Client-side Validation"
          ],
          "evaluationCriteria": [
            "Accuracy of definitions.",
            "Clear distinction between the two attributes.",
            "Quality and relevance of use case examples."
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Attributes",
            "Validation"
          ],
          "prerequisites": [
            "html5_form_attributes"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_html5_form_attributes_4",
          "topic": "Form Attribute (External Inputs)",
          "level": "medium",
          "type": "flashcard",
          "question": "How can an HTML form input element be associated with a form even if it's not a direct descendant of the `<form>` tag?",
          "answer": "By using the `form` attribute on the input element, setting its value to the `id` of the `<form>` element it should belong to.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Form Attribute",
            "HTML Forms",
            "External Inputs",
            "Form Association"
          ],
          "evaluationCriteria": [
            "Recall of attribute",
            "Understanding its purpose"
          ],
          "example": "```html\n<form id=\"myContactForm\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\">\n</form>\n\n<div>\n  <label for=\"external-email\">Email (associate with contact form):</label>\n  <input type=\"email\" id=\"external-email\" name=\"email\" form=\"myContactForm\">\n</div>\n```",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Attributes"
          ],
          "prerequisites": [
            "html5_form_attributes"
          ],
          "complexity": 5,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_web_worker_fibonacci",
          "title": "Implement a Fibonacci Calculator with Web Workers",
          "description": "\nCreate a simple web page with a button and a display area. When the button is clicked, initiate a computationally intensive Fibonacci sequence calculation (e.g., `fibonacci(40)` or `fibonacci(45)`) in a Web Worker. The main thread should remain responsive (e.g., by allowing a counter to update while the calculation runs). Once the worker finishes, display the result on the main page.\n\n**Requirements:**\n1.  **Main Page (index.html, app.js):**\n    *   An HTML button to start the calculation.\n    *   A display element (e.g., `<span>` or `<div>`) to show the Fibonacci result.\n    *   Another display element to show a constantly updating counter (e.g., every 100ms) to prove UI responsiveness.\n    *   Instantiate and communicate with the Web Worker.\n    *   Disable the button while calculation is in progress.\n2.  **Worker Script (fibonacci_worker.js):**\n    *   Implement a recursive or iterative function to calculate Fibonacci numbers.\n    *   Receive a message from the main thread to start the calculation.\n    *   Send the result back to the main thread.\n3.  **Communication:** Use `postMessage` and `onmessage` for communication.\n4.  **Error Handling:** Briefly consider how errors from the worker might be handled.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Web Worker Fibonacci</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; }\n        button { padding: 10px 20px; font-size: 1em; cursor: pointer; }\n        #result { margin-top: 15px; font-size: 1.2em; font-weight: bold; }\n        #counter { margin-top: 10px; font-size: 1em; color: gray; }\n    </style>\n</head>\n<body>\n    <h1>Fibonacci Calculator</h1>\n    <button id=\"startCalculation\">Calculate Fibonacci(40) in Worker</button>\n    <p id=\"result\">Result: Not calculated yet</p>\n    <p id=\"counter\">Counter: 0</p>\n\n    <script src=\"app.js\"></script>\n</body>\n</html>\n\n// app.js (Main Thread Script)\nconst startButton = document.getElementById('startCalculation');\nconst resultDisplay = document.getElementById('result');\nconst counterDisplay = document.getElementById('counter');\nlet counter = 0;\nlet worker = null;\n\n// Update counter to show UI responsiveness\nsetInterval(() => {\n    counter++;\n    counterDisplay.textContent = `Counter: ${counter}`;\n}, 100);\n\nstartButton.addEventListener('click', () => {\n    if (window.Worker) {\n        if (worker) {\n            worker.terminate(); // Terminate existing worker if any\n        }\n        \n        worker = new Worker('fibonacci_worker.js');\n        \n        // TODO: Send a message to the worker to start calculation\n        // TODO: Handle messages from the worker (update resultDisplay)\n        // TODO: Handle worker errors\n        // TODO: Disable/enable button\n        \n    } else {\n        resultDisplay.textContent = 'Web Workers are not supported in this browser.';\n    }\n});\n\n// fibonacci_worker.js (Worker Thread Script)\n// self.onmessage = function(event) {\n//   // TODO: Implement Fibonacci calculation\n//   // TODO: Send result back\n// };\n\n// self.onerror = function(error) {\n//   // TODO: Handle errors\n// };",
          "solutionCode": "<!-- index.html (same as starting code) -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Web Worker Fibonacci</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; }\n        button { padding: 10px 20px; font-size: 1em; cursor: pointer; }\n        button:disabled { background-color: #ccc; cursor: not-allowed; }\n        #result { margin-top: 15px; font-size: 1.2em; font-weight: bold; }\n        #counter { margin-top: 10px; font-size: 1em; color: gray; }\n    </style>\n</head>\n<body>\n    <h1>Fibonacci Calculator</h1>\n    <button id=\"startCalculation\">Calculate Fibonacci(40) in Worker</button>\n    <p id=\"result\">Result: Not calculated yet</p>\n    <p id=\"counter\">Counter: 0</p>\n\n    <script src=\"app.js\"></script>\n</body>\n</html>\n\n// app.js (Main Thread Script)\nconst startButton = document.getElementById('startCalculation');\nconst resultDisplay = document.getElementById('result');\nconst counterDisplay = document.getElementById('counter');\nlet counter = 0;\nlet worker = null;\n\n// Update counter to show UI responsiveness\nsetInterval(() => {\n    counter++;\n    counterDisplay.textContent = `Counter: ${counter}`;\n}, 100);\n\nstartButton.addEventListener('click', () => {\n    if (window.Worker) {\n        if (worker) {\n            worker.terminate(); // Terminate existing worker if any\n        }\n        \n        worker = new Worker('fibonacci_worker.js');\n        resultDisplay.textContent = 'Result: Calculating...';\n        startButton.disabled = true; // Disable button during calculation\n\n        // Send a message to the worker to start calculation\n        worker.postMessage({ number: 40 }); // Or 45 for a longer task\n        \n        // Handle messages from the worker (update resultDisplay)\n        worker.onmessage = function(event) {\n            console.log('Main thread received:', event.data);\n            if (event.data.status === 'done') {\n                resultDisplay.textContent = `Result: ${event.data.result}`;\n                startButton.disabled = false; // Re-enable button\n                worker.terminate(); // Terminate worker after use\n                worker = null;\n            } else if (event.data.status === 'error') {\n                resultDisplay.textContent = `Error: ${event.data.message}`;\n                startButton.disabled = false;\n                worker.terminate();\n                worker = null;\n            }\n        };\n        \n        // Handle worker errors\n        worker.onerror = function(error) {\n            console.error('Worker error:', error);\n            resultDisplay.textContent = 'Result: Error during calculation.';\n            startButton.disabled = false;\n            if (worker) worker.terminate();\n            worker = null;\n        };\n        \n    } else {\n        resultDisplay.textContent = 'Web Workers are not supported in this browser.';\n    }\n});\n\n// fibonacci_worker.js (Worker Thread Script)\nself.onmessage = function(event) {\n    const number = event.data.number;\n    console.log(`Worker: Calculating Fibonacci(${number})...`);\n\n    // Recursive Fibonacci (simple but inefficient for large numbers)\n    const fibonacci = (n) => {\n        if (n <= 1) return n;\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    };\n\n    try {\n        const result = fibonacci(number);\n        self.postMessage({ status: 'done', result: result });\n    } catch (e) {\n        console.error('Worker calculation error:', e);\n        self.postMessage({ status: 'error', message: e.message || 'Unknown error' });\n    }\n};\n\nself.onerror = function(error) {\n    console.error('Error within worker self:', error);\n    self.postMessage({ status: 'error', message: error.message || 'Worker-side error' });\n};\n\nself.onclose = function() {\n    console.log('Worker is being terminated.');\n};",
          "testCases": [
            "Click 'Calculate' button: Ensure the counter continues to update while result is 'Calculating...'.",
            "After calculation, result should be displayed and button re-enabled.",
            "Test with a very large number (e.g., 45 or higher if recursive, 100000 if iterative for sum) to observe blocking on main thread if worker is not used vs. smooth UI with worker.",
            "Verify browser console for worker messages and no main thread errors.",
            "Check for `worker.terminate()` preventing multiple worker instances on rapid clicks."
          ],
          "hints": [
            "Remember to create the `Worker` instance in the main thread and provide the path to the worker script.",
            "Use `postMessage()` to send data and `onmessage` event handlers to receive data in both directions.",
            "The `self` keyword in the worker script refers to the worker's global scope.",
            "Don't forget to disable the button while the calculation is running and re-enable it afterwards for better UX."
          ],
          "tags": [
            "JavaScript",
            "Web Workers",
            "Performance",
            "Concurrency",
            "Frontend Architecture",
            "Asynchronous"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "javascript_functions",
            "event_listeners",
            "basic_html"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "event_loop",
            "asynchronous_javascript",
            "browser_apis"
          ]
        },
        {
          "id": "task_html5_doctype_validation",
          "title": "Validate DOCTYPE Presence and Correctness",
          "description": "\nGiven an HTML string, write a JavaScript function that validates whether the HTML document correctly includes the `<!DOCTYPE html>` declaration at its very beginning.\n\n**Requirements:**\n1.  The function `validateDoctype(htmlString)` should return `true` if the DOCTYPE is correct and correctly placed, `false` otherwise.\n2.  Consider the DOCTYPE to be correctly placed if it's the first non-whitespace content in the string.\n3.  The DOCTYPE should be `<!DOCTYPE html>` (case-insensitive for the `DOCTYPE` and `html` parts, but spaces and `!` must be precise).\n4.  The function should handle strings with leading whitespace or comments before the DOCTYPE.\n",
          "difficulty": "medium",
          "startingCode": "function validateDoctype(htmlString) {\n  // TODO: Implement validation logic here\n  // Hint: Regular expressions or string manipulation can be useful.\n  // Remember to trim leading whitespace and handle comments.\n\n  return false; // Replace with actual logic\n}\n\n// Example Usage:\n// console.log(validateDoctype('<!DOCTYPE html>\\n<html>...')); // true\n// console.log(validateDoctype('  <!DOCTYPE html>\\n<html>...')); // true\n// console.log(validateDoctype('<!-- comment -->\\n<!DOCTYPE html>\\n<html>...')); // false (strict first non-whitespace)\n// console.log(validateDoctype('<html>\\n<!DOCTYPE html>...')); // false\n// console.log(validateDoctype('<!doctype html>\\n<html>...')); // true\n// console.log(validateDoctype('<!DOCTYPE HTML>\\n<html>...')); // false (for HTML5 specific)\n// console.log(validateDoctype('<html>...')); // false\n",
          "solutionCode": "function validateDoctype(htmlString) {\n  if (!htmlString || typeof htmlString !== 'string') {\n    return false;\n  }\n\n  // Regex to match the DOCTYPE declaration at the very beginning,\n  // ignoring leading whitespace. It captures the standard HTML5 DOCTYPE\n  // case-insensitively for 'DOCTYPE' and 'html'.\n  const regex = /^\\s*<!DOCTYPE\\s+html>/i;\n  \n  // The original problem statement implies it must be the *very first* non-whitespace.\n  // If we consider '<!-- comment -->\\n<!DOCTYPE html>' as invalid due to the comment,\n  // then simple regex for leading whitespace is enough, as comments are not whitespace.\n  // If comments before DOCTYPE were allowed, the regex would be more complex.\n  \n  // Trim leading whitespace and then check if it starts with the DOCTYPE.\n  // This handles cases like '   <!DOCTYPE html>' correctly.\n  const trimmedString = htmlString.trimLeft();\n\n  // Check if the trimmed string starts with the case-insensitive HTML5 DOCTYPE.\n  // This correctly accounts for the example '<!-- comment -->\\n<!DOCTYPE html>' being false.\n  return /^<!DOCTYPE html>/i.test(trimmedString);\n}\n",
          "testCases": [
            "validateDoctype('<!DOCTYPE html>\\n<html>...'): `true`",
            "validateDoctype('  <!DOCTYPE html>\\n<html>...'): `true`",
            "validateDoctype('<!-- comment -->\\n<!DOCTYPE html>\\n<html>...'): `false` (as per problem: 'first non-whitespace content')",
            "validateDoctype('<html>\\n<!DOCTYPE html>...'): `false`",
            "validateDoctype('<!doctype html>\\n<html>...'): `true`",
            "validateDoctype('<!DOCTYPE HTML>\\n<html>...'): `false` (strict HTML5 doctype)",
            "validateDoctype('<html>...'): `false`",
            "validateDoctype(''): `false`",
            "validateDoctype(null): `false`",
            "validateDoctype('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"><html>...'): `false` (not HTML5 DOCTYPE)",
            "validateDoctype('  \\n\\t <!DOCTYPE html>'): `true`"
          ],
          "hints": [
            "Focus on checking the very beginning of the string after any leading whitespace.",
            "Consider using a regular expression with a `^` anchor to match the start of the string.",
            "Remember that the HTML5 DOCTYPE is case-insensitive for `DOCTYPE` and `html` parts, but the `!` and spacing are specific.",
            "`String.prototype.trimLeft()` or `String.prototype.trimStart()` can be useful."
          ],
          "tags": [
            "JavaScript",
            "HTML",
            "String Manipulation",
            "Regex",
            "Validation"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "javascript_string_methods",
            "regex_basics"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "html_standards",
            "browser_parsing"
          ]
        },
        {
          "id": "task_html5_semantic_refactor",
          "title": "Refactor Non-Semantic HTML to Semantic HTML5",
          "description": "\nYou are given a non-semantic HTML structure that uses `<div>` elements for layout. Your task is to refactor this structure to use appropriate HTML5 semantic elements, improving its accessibility, SEO, and readability.\n\n**Requirements:**\n1.  Replace `div` elements with the most appropriate semantic HTML5 tags from the list provided in the theory (e.g., `header`, `nav`, `main`, `article`, `section`, `aside`, `footer`, `figure`, `figcaption`).\n2.  Maintain the visual structure and content hierarchy.\n3.  Ensure the refactored code clearly conveys the meaning of each section.\n4.  No CSS or JavaScript changes are required, focus solely on HTML structure.\n",
          "difficulty": "medium",
          "startingCode": "<!-- Original Non-Semantic HTML -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Non-Semantic Layout</title>\n    <style>\n        body { font-family: sans-serif; }\n        .header-div { background-color: #f0f0f0; padding: 10px; }\n        .nav-div ul { list-style: none; padding: 0; display: flex; gap: 15px; }\n        .container-div { display: flex; margin-top: 20px; }\n        .main-content-div { flex: 3; padding: 20px; }\n        .post-div { border: 1px solid #ddd; margin-bottom: 15px; padding: 15px; }\n        .post-image-div { text-align: center; margin-bottom: 10px; }\n        .image-caption-div { font-style: italic; font-size: 0.9em; color: #555; }\n        .sidebar-div { flex: 1; background-color: #e9e9e9; padding: 20px; }\n        .footer-div { background-color: #f0f0f0; padding: 10px; text-align: center; margin-top: 20px; }\n    </style>\n</head>\n<body>\n\n    <div class=\"header-div\">\n        <h1>My Website</h1>\n        <div class=\"nav-div\">\n            <ul>\n                <li><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">About</a></li>\n                <li><a href=\"#\">Services</a></li>\n                <li><a href=\"#\">Contact</a></li>\n            </ul>\n        </div>\n    </div>\n\n    <div class=\"container-div\">\n        <div class=\"main-content-div\">\n            <h2>Latest News</h2>\n            <div class=\"post-div\">\n                <h3>Headline: Important Announcement</h3>\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n                <div class=\"post-image-div\">\n                    <img src=\"https://via.placeholder.com/400x200\" alt=\"Placeholder image for announcement\">\n                    <div class=\"image-caption-div\">Caption for the announcement image.</div>\n                </div>\n                <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n            </div>\n            <div class=\"post-div\">\n                <h3>Headline: Tech Update</h3>\n                <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</p>\n            </div>\n        </div>\n\n        <div class=\"sidebar-div\">\n            <h3>Related Links</h3>\n            <ul>\n                <li><a href=\"#\">Old Posts</a></li>\n                <li><a href=\"#\">Partners</a></li>\n            </ul>\n            <h3>Advertisements</h3>\n            <p>Buy our amazing product!</p>\n        </div>\n    </div>\n\n    <div class=\"footer-div\">\n        <p>&copy; 2023 My Company</p>\n    </div>\n\n</body>\n</html>",
          "solutionCode": "<!-- Refactored Semantic HTML -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Semantic Layout</title>\n    <style>\n        /* Retain original styles but update selectors for semantic tags */\n        body { font-family: sans-serif; }\n        header { background-color: #f0f0f0; padding: 10px; }\n        nav ul { list-style: none; padding: 0; display: flex; gap: 15px; }\n        main { display: flex; margin-top: 20px; }\n        main > section { flex: 3; padding: 20px; }\n        article { border: 1px solid #ddd; margin-bottom: 15px; padding: 15px; }\n        figure { text-align: center; margin-bottom: 10px; }\n        figcaption { font-style: italic; font-size: 0.9em; color: #555; }\n        aside { flex: 1; background-color: #e9e9e9; padding: 20px; }\n        footer { background-color: #f0f0f0; padding: 10px; text-align: center; margin-top: 20px; }\n    </style>\n</head>\n<body>\n\n    <header>\n        <h1>My Website</h1>\n        <nav>\n            <ul>\n                <li><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">About</a></li>\n                <li><a href=\"#\">Services</a></li>\n                <li><a href=\"#\">Contact</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main>\n        <section>\n            <h2>Latest News</h2>\n            <article>\n                <h3>Headline: Important Announcement</h3>\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n                <figure>\n                    <img src=\"https://via.placeholder.com/400x200\" alt=\"Placeholder image for announcement\">\n                    <figcaption>Caption for the announcement image.</figcaption>\n                </figure>\n                <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n            </article>\n            <article>\n                <h3>Headline: Tech Update</h3>\n                <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</p>\n            </article>\n        </section>\n\n        <aside>\n            <h3>Related Links</h3>\n            <ul>\n                <li><a href=\"#\">Old Posts</a></li>\n                <li><a href=\"#\">Partners</a></li>\n            </ul>\n            <h3>Advertisements</h3>\n            <p>Buy our amazing product!</p>\n        </aside>\n    </main>\n\n    <footer>\n        <p>&copy; 2023 My Company</p>\n    </footer>\n\n</body>\n</html>",
          "testCases": [
            "Verify that `.header-div` is replaced by `<header>`.",
            "Verify that `.nav-div` is replaced by `<nav>`.",
            "Verify that `.container-div` is replaced by `<main>`.",
            "Verify that `.main-content-div` is replaced by `<section>` (as it contains related articles, making it a section of the main content).",
            "Verify that each `.post-div` is replaced by `<article>`.",
            "Verify that `.post-image-div` is replaced by `<figure>` and `.image-caption-div` by `<figcaption>`.",
            "Verify that `.sidebar-div` is replaced by `<aside>`.",
            "Verify that `.footer-div` is replaced by `<footer>`.",
            "Confirm that the document structure logically reflects the content's meaning.",
            "Visually inspect the rendered page (though no CSS changes are required, structural changes might break it if CSS is class-dependent)."
          ],
          "hints": [
            "Start from the outermost `div`s and work your way inward.",
            "Ask yourself: 'What is the *purpose* of this block of content?' Is it navigation, a self-contained item, a general section, a sidebar, etc.?",
            "Remember that `<main>` should encompass the dominant content unique to the document, and there should only be one.",
            "`<article>` is for self-contained, distributable content, while `<section>` is a generic grouping of related content, typically with a heading."
          ],
          "tags": [
            "HTML",
            "HTML5",
            "Semantic HTML",
            "Refactoring",
            "Best Practices",
            "Accessibility",
            "SEO"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "html_basics",
            "html5_semantic_elements"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "web_standards",
            "document_structure",
            "ui_layout"
          ]
        },
        {
          "id": "task_html5_complex_form",
          "title": "Build a Job Application Form with HTML5 Features",
          "description": "\nDesign and implement a job application form using various HTML5 input types and attributes for enhanced user experience and client-side validation. The form should demonstrate understanding of the new features discussed.\n\n**Requirements:**\n1.  **Personal Information Section:**\n    *   First Name, Last Name: Regular text inputs, both `required`.\n    *   Email: `<input type=\"email\">`, `required`, `placeholder` for format hint.\n    *   Phone Number: `<input type=\"tel\">`, `pattern` to accept common phone number formats (e.g., `\\d{3}-\\d{3}-\\d{4}` or `\\d{10}`). `title` for pattern explanation.\n    *   Date of Birth: `<input type=\"date\">`, `required`.\n    *   Preferred Contact Time: `<input type=\"time\">`.\n2.  **Application Details Section:**\n    *   Desired Salary: `<input type=\"number\">`, `min` and `max` constraints (e.g., 30000-150000), `step` (e.g., 1000).\n    *   Years of Experience: `<input type=\"range\">`, `min`, `max`, `value` (default).\n    *   Preferred Job Category: A text input with a `datalist` of suggestions (e.g., 'Frontend', 'Backend', 'Fullstack', 'DevOps').\n    *   Cover Letter: `<textarea>`, `placeholder`.\n    *   Resume Upload: `<input type=\"file\">`, `multiple` (optional, for multiple documents) and `accept` attribute to allow only PDF or DOCX files.\n3.  **Submission:**\n    *   A submit button for final application.\n    *   A 'Save Draft' button that submits the form *without* triggering client-side validation (`formnovalidate`).\n4.  **Overall Form:**\n    *   Use the `novalidate` attribute on the form for testing the 'Save Draft' button.\n    *   Utilize `autofocus` on the first name input.\n",
          "difficulty": "hard",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Job Application Form</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; background-color: #f4f4f4; }\n        form { background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); max-width: 600px; margin: 20px auto; }\n        h2 { color: #333; margin-bottom: 20px; }\n        .form-group { margin-bottom: 15px; }\n        label { display: block; margin-bottom: 5px; font-weight: bold; color: #555; }\n        input[type=\"text\"], input[type=\"email\"], input[type=\"tel\"], input[type=\"date\"], input[type=\"time\"], input[type=\"number\"], input[type=\"range\"], input[type=\"color\"], textarea {\n            width: calc(100% - 22px); padding: 10px; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box;\n        }\n        input[type=\"file\"] { padding: 5px 0; }\n        input[type=\"submit\"], button { background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 1em; margin-right: 10px; }\n        input[type=\"submit\"]:hover, button:hover { background-color: #0056b3; }\n        button[formnovalidate] { background-color: #6c757d; }\n        button[formnovalidate]:hover { background-color: #5a6268; }\n    </style>\n</head>\n<body>\n\n    <form action=\"/submit_application\" method=\"post\" novalidate>\n        <h2>Personal Information</h2>\n        <div class=\"form-group\">\n            <label for=\"firstName\">First Name:</label>\n            <input type=\"text\" id=\"firstName\" name=\"firstName\" autofocus>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"lastName\">Last Name:</label>\n            <input type=\"text\" id=\"lastName\" name=\"lastName\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"phone\">Phone Number:</label>\n            <input type=\"tel\" id=\"phone\" name=\"phone\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"dob\">Date of Birth:</label>\n            <input type=\"date\" id=\"dob\" name=\"dob\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"contactTime\">Preferred Contact Time:</label>\n            <input type=\"time\" id=\"contactTime\" name=\"contactTime\">\n        </div>\n\n        <h2>Application Details</h2>\n        <div class=\"form-group\">\n            <label for=\"salary\">Desired Salary ($):</label>\n            <input type=\"number\" id=\"salary\" name=\"salary\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"experience\">Years of Experience:</label>\n            <input type=\"range\" id=\"experience\" name=\"experience\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"jobCategory\">Preferred Job Category:</label>\n            <input list=\"jobCategories\" id=\"jobCategory\" name=\"jobCategory\">\n            <datalist id=\"jobCategories\">\n                <!-- TODO: Add options here -->\n            </datalist>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"coverLetter\">Cover Letter:</label>\n            <textarea id=\"coverLetter\" name=\"coverLetter\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"resume\">Upload Resume:</label>\n            <input type=\"file\" id=\"resume\" name=\"resume\">\n        </div>\n\n        <input type=\"submit\" value=\"Submit Application\">\n        <button type=\"submit\">Save Draft</button>\n    </form>\n\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html (Solution) -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Job Application Form</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; background-color: #f4f4f4; }\n        form { background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); max-width: 600px; margin: 20px auto; }\n        h2 { color: #333; margin-bottom: 20px; }\n        .form-group { margin-bottom: 15px; }\n        label { display: block; margin-bottom: 5px; font-weight: bold; color: #555; }\n        input[type=\"text\"], input[type=\"email\"], input[type=\"tel\"], input[type=\"date\"], input[type=\"time\"], input[type=\"number\"], input[type=\"range\"], input[type=\"color\"], textarea {\n            width: calc(100% - 22px); padding: 10px; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box;\n        }\n        input[type=\"file\"] { padding: 5px 0; }\n        input[type=\"submit\"], button { background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 1em; margin-right: 10px; }\n        input[type=\"submit\"]:hover, button:hover { background-color: #0056b3; }\n        button[formnovalidate] { background-color: #6c757d; }\n        button[formnovalidate]:hover { background-color: #5a6268; }\n    </style>\n</head>\n<body>\n\n    <form action=\"/submit_application\" method=\"post\">\n        <!-- Removed novalidate from form to demonstrate formnovalidate on specific button -->\n        <h2>Personal Information</h2>\n        <div class=\"form-group\">\n            <label for=\"firstName\">First Name:</label>\n            <input type=\"text\" id=\"firstName\" name=\"firstName\" autofocus required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"lastName\">Last Name:</label>\n            <input type=\"text\" id=\"lastName\" name=\"lastName\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required placeholder=\"your.name@example.com\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"phone\">Phone Number:</label>\n            <input type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"^(\\+\\d{1,3}[- ]?)?\\d{10}$\" title=\"Phone number must be 10 digits or start with + and country code (e.g., +1-555-123-4567 or 5551234567)\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"dob\">Date of Birth:</label>\n            <input type=\"date\" id=\"dob\" name=\"dob\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"contactTime\">Preferred Contact Time:</label>\n            <input type=\"time\" id=\"contactTime\" name=\"contactTime\">\n        </div>\n\n        <h2>Application Details</h2>\n        <div class=\"form-group\">\n            <label for=\"salary\">Desired Salary ($):</label>\n            <input type=\"number\" id=\"salary\" name=\"salary\" min=\"30000\" max=\"150000\" step=\"1000\" value=\"50000\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"experience\">Years of Experience:</label>\n            <input type=\"range\" id=\"experience\" name=\"experience\" min=\"0\" max=\"20\" value=\"5\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"jobCategory\">Preferred Job Category:</label>\n            <input list=\"jobCategories\" id=\"jobCategory\" name=\"jobCategory\">\n            <datalist id=\"jobCategories\">\n                <option value=\"Frontend\">\n                <option value=\"Backend\">\n                <option value=\"Fullstack\">\n                <option value=\"DevOps\">\n                <option value=\"UX/UI Designer\">\n                <option value=\"Project Manager\">\n            </datalist>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"coverLetter\">Cover Letter:</label>\n            <textarea id=\"coverLetter\" name=\"coverLetter\" rows=\"5\" placeholder=\"Tell us about yourself and why you're a good fit...\"></textarea>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"resume\">Upload Resume:</label>\n            <input type=\"file\" id=\"resume\" name=\"resume\" multiple accept=\".pdf,.docx\">\n        </div>\n\n        <input type=\"submit\" value=\"Submit Application\">\n        <button type=\"submit\" formnovalidate>Save Draft</button>\n    </form>\n\n</body>\n</html>",
          "testCases": [
            "**First Name / Last Name:** Try submitting with these fields empty. Browser validation messages should appear.",
            "**Email:** Enter an invalid email (e.g., 'test'). Try submitting. Browser validation should trigger. Enter a valid email.",
            "**Phone Number:** Enter '12345' (invalid format). Submit. Check title tooltip. Enter '123-456-7890' or '1234567890'. Submit. It should pass.",
            "**Date of Birth:** Try submitting with an empty date field. Should be required.",
            "**Desired Salary:** Enter a value below 30000 or above 150000. Submit. Validation should trigger. Test `step` by manually typing.",
            "**Years of Experience:** Move the slider. Observe value changes (if bound to JS, not required by task).",
            "**Job Category:** Type 'F'. Observe 'Frontend' and 'Fullstack' suggestions. Select one, or type 'Other'.",
            "**Cover Letter:** Ensure placeholder text is visible when empty.",
            "**Resume Upload:** Try selecting multiple files. Try selecting a `.txt` file (should be filtered or show error).",
            "**'Submit Application' button:** If any `required` fields are empty, this button should trigger validation and prevent submission.",
            "**'Save Draft' button:** With `required` fields empty, click 'Save Draft'. The form *should* attempt to submit without validation. (Requires a backend to truly see submission, but browser should not show validation popup)."
          ],
          "hints": [
            "For the phone number `pattern`, consider a regular expression that accommodates common formats, including optional country codes.",
            "Remember that `datalist` provides suggestions, not a strict selection, and needs `option` elements within it.",
            "The `accept` attribute for file inputs uses MIME types or file extensions (e.g., `.pdf`, `image/*`).",
            "To test `formnovalidate` effectively, ensure the main `<form>` tag *does not* have `novalidate`."
          ],
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Attributes",
            "Validation",
            "User Experience",
            "Frontend Development"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "html_forms_basics",
            "html5_form_elements",
            "html5_form_attributes"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "client_side_validation",
            "regex",
            "ux_design_patterns"
          ]
        }
      ]
    }
  }
]