[
  {
    "id": "681ba99a-be4b-44b6-ac61-e7ee1f8365bb",
    "startLine": 3600,
    "endLine": 3699,
    "processedDate": "2025-06-17T08:48:57.492Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_https_setup",
          "title": "Enabling HTTPS in React Development",
          "content": "Running a React application over HTTPS (Hypertext Transfer Protocol Secure) during development can be crucial for various reasons, including testing certain browser features that require a secure context (e.g., Service Workers, Geolocation API, WebAuthn), ensuring consistent behavior with production environments, or interacting with APIs that only allow requests from secure origins. Create React App (CRA) provides a simple way to enable HTTPS for your development server.\n\n### How to Enable HTTPS\nTo enable HTTPS for your Create React App development server, you can set the `HTTPS` environment variable to `true`. This can be done in two primary ways:\n\n1.  **In `package.json` scripts:** You can modify your `start` script in `package.json` to include the `HTTPS=true` environment variable before `react-scripts start`. This makes HTTPS the default when you run `npm start`.\n2.  **From the command line:** You can directly set the `HTTPS=true` environment variable in your terminal before running the `npm start` command. This is useful for one-off sessions or testing.\n\n**Note on Cross-Platform Compatibility:** The syntax `set HTTPS=true` is specific to Windows command prompt. For macOS/Linux (Bash/Zsh), you would use `HTTPS=true`. For cross-platform scripts, tools like `cross-env` can be used to set environment variables universally.\n\n### Benefits of Development HTTPS\n*   **Security Feature Testing:** Enables testing of features that require a secure context (e.g., Service Workers, Web Push Notifications, Geolocation).\n*   **API Interaction:** Allows local development to interact with APIs that might enforce secure origins.\n*   **Production Parity:** Helps catch potential issues early that might only arise when serving over HTTPS in a production environment.\n*   **Reduced Browser Warnings:** Prevents browsers from flagging `http://localhost` as insecure, which can be distracting during development.\n\nBy default, when `HTTPS=true` is set, `react-scripts` will generate and use a self-signed SSL certificate. Browsers will typically warn you about this certificate being untrusted, but you can usually proceed past the warning.",
          "examples": [
            {
              "id": "example_https_setup_1",
              "title": "Enabling HTTPS via package.json script (Windows)",
              "code": "{\n  \"name\": \"my-react-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"set HTTPS=true && react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}",
              "explanation": "This demonstrates how to modify the `start` script in your `package.json` file. When you run `npm start`, the `set HTTPS=true` command will execute first, setting the environment variable for the `react-scripts start` command. This approach is persistent.",
              "language": "json"
            },
            {
              "id": "example_https_setup_2",
              "title": "Enabling HTTPS from Command Line (Cross-Platform)",
              "code": "// For Windows Command Prompt:\nset HTTPS=true && npm start\n\n// For macOS/Linux (Bash/Zsh):\nHTTPS=true npm start",
              "explanation": "These commands show how to enable HTTPS temporarily from the command line. On Windows, `set` is used. On Unix-like systems, `HTTPS=true` directly before the command sets the variable only for that command's process. This is useful for quick tests without modifying `package.json`.",
              "language": "shell"
            }
          ],
          "relatedQuestions": [
            "question_https_setup_1",
            "question_https_setup_2",
            "question_https_setup_3",
            "question_https_setup_4"
          ],
          "relatedTasks": [
            "task_https_setup_1"
          ],
          "tags": [
            "React",
            "Development",
            "HTTPS",
            "Environment Variables",
            "CLI",
            "Web Security"
          ],
          "technology": "React",
          "prerequisites": [
            "Node.js",
            "npm",
            "Create React App"
          ],
          "complexity": 2,
          "interviewRelevance": 4,
          "learningPath": "beginner",
          "requiredFor": [
            "PWA development",
            "Service Workers",
            "Geolocation API testing"
          ]
        },
        {
          "id": "theory_use_reducer",
          "title": "Using useReducer for Complex State Logic in React",
          "content": "The `useReducer` Hook is an alternative to `useState` for managing state in React components, particularly useful for more complex state logic that involves multiple sub-values or when the next state depends on the previous one. It's conceptually similar to Redux, providing a predictable state container pattern within a single component or custom hook.\n\n### Core Concepts\n1.  **`reducer` function:** A pure function that takes the current `state` and an `action` object as arguments, and returns the `new state`. It should be pure, meaning it produces the same output for the same input and has no side effects.\n    *   `reducer(state, action) => newState`\n2.  **`initialState`:** The initial value of the state. This can be a simple value or a complex object.\n3.  **`dispatch` function:** A function returned by `useReducer` that you call to update the state. You pass an `action` object to `dispatch`, which then triggers the `reducer` function.\n    *   `dispatch(action)`\n4.  **`action` object:** A plain JavaScript object that describes 'what happened'. It typically has a `type` property (a string constant) and can have a `payload` property containing any data necessary for the state update.\n\n### `useReducer` Signature\n`const [state, dispatch] = useReducer(reducer, initialState, init?)`\n\n*   `reducer`: Your reducer function.\n*   `initialState`: The state that the reducer will start with.\n*   `init?` (optional): An optional function that can compute the initial state lazily. If provided, `initialState` will be passed to `init`, and `init`'s return value will be the actual initial state.\n\n### When to use `useReducer` over `useState`\n*   **Complex state logic:** When state updates involve multiple related pieces of state that change together, or when the next state depends heavily on the previous state.\n*   **State transitions:** When there are many different ways the state can transition (e.g., `loading`, `success`, `error` for a data fetch).\n*   **Performance optimization:** If state updates are batched by React, `dispatch` calls within event handlers are typically processed efficiently. For highly optimized scenarios, the `dispatch` function identity is stable and doesn't change on re-renders, so child components can be memoized effectively with `React.memo`.\n*   **Centralized state logic:** Keeps all state update logic in one place (the reducer function), making it easier to understand, test, and maintain.\n\n### Immutability in Reducers\nIt is crucial that reducer functions *do not directly mutate* the original `state` object. Instead, they should return a *new state object* with the necessary changes. This is fundamental to React's change detection mechanism and helps prevent unexpected side effects. The spread operator (`...`) is commonly used for creating new copies of state objects or arrays.",
          "examples": [
            {
              "id": "example_use_reducer_1",
              "title": "Counter with Basic useReducer Actions",
              "code": "// Initial state\nconst initialState = { count: 0 };\n\n// Reducer function\nfunction counterReducer(state, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    case 'DECREMENT':\n      return { ...state, count: state.count - 1 };\n    case 'RESET':\n      return { ...state, count: 0 };\n    default:\n      throw new Error(`Unsupported action type: ${action.type}`);\n  }\n}\n\nfunction CounterBasic() {\n  const [state, dispatch] = useReducer(counterReducer, initialState);\n  \n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>\n      <button onClick={() => dispatch({ type: 'DECREMENT' })}>Decrement</button>\n      <button onClick={() => dispatch({ type: 'RESET' })}>Reset</button>\n    </div>\n  );\n}",
              "explanation": "This example demonstrates a basic counter using `useReducer`. The `counterReducer` function handles `INCREMENT`, `DECREMENT`, and `RESET` actions, returning a new state object for each. The component dispatches actions via `dispatch({ type: 'ACTION_TYPE' })` to update the count.",
              "language": "typescript"
            },
            {
              "id": "example_use_reducer_2",
              "title": "Data Fetching with useReducer",
              "code": "// Initial state for data fetching\nconst initialState = {\n  count: 0,\n  loading: false,\n  error: null,\n  data: null\n};\n\n// Reducer function for combined state\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    case 'DECREMENT':\n      return { ...state, count: state.count - 1 };\n    case 'RESET':\n      return { ...state, count: 0 };\n    case 'FETCH_START':\n      return { ...state, loading: true, error: null };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false, data: action.payload };\n    case 'FETCH_ERROR':\n      return { ...state, loading: false, error: action.payload };\n    default:\n      throw new Error(`Unsupported action type: ${action.type}`);\n  }\n}\n\nfunction CounterAndDataFetcher() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  \n  const fetchData = async () => {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      // Simulate API call\n      const response = await new Promise(resolve => setTimeout(() => {\n        resolve({ json: () => ({ message: 'Data fetched successfully!', value: Math.random() }) });\n      }, 1000));\n      // const response = await fetch('/api/data'); // Original API call\n      const data = await response.json();\n      dispatch({ type: 'FETCH_SUCCESS', payload: data });\n    } catch (error) {\n      dispatch({ type: 'FETCH_ERROR', payload: error.message });\n    }\n  };\n  \n  return (\n    <div>\n      <h2>Counter Section</h2>\n      <p>Count: {state.count}</p>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>\n      <button onClick={() => dispatch({ type: 'DECREMENT' })}>Decrement</button>\n      <button onClick={() => dispatch({ type: 'RESET' })}>Reset</button>\n      \n      <h2>Data Fetching Section</h2>\n      <button onClick={fetchData}>Fetch Data</button>\n      {state.loading && <p>Loading...</p>}\n      {state.error && <p style={{ color: 'red' }}>Error: {state.error}</p>}\n      {state.data && (\n        <div>\n          <p>Fetched Data:</p>\n          <pre>{JSON.stringify(state.data, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n}",
              "explanation": "This enhanced example combines the counter logic with asynchronous data fetching. It showcases how `useReducer` can manage multiple related pieces of state (`count`, `loading`, `error`, `data`) effectively. Different actions (`FETCH_START`, `FETCH_SUCCESS`, `FETCH_ERROR`) are dispatched at various stages of the fetch operation to update the UI accordingly. The `payload` property is used to pass fetched data or error messages.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_use_reducer_1",
            "question_use_reducer_2",
            "question_use_reducer_3",
            "question_use_reducer_4",
            "question_use_reducer_5",
            "question_use_reducer_6",
            "question_use_reducer_7",
            "question_use_reducer_8",
            "question_use_reducer_9"
          ],
          "relatedTasks": [
            "task_use_reducer_1",
            "task_use_reducer_2"
          ],
          "tags": [
            "React Hooks",
            "State Management",
            "useReducer",
            "Reducer Pattern",
            "Immutability",
            "Functional Programming"
          ],
          "technology": "React",
          "prerequisites": [
            "React Basics",
            "useState Hook",
            "JavaScript ES6+ (Objects, Arrays)"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "Complex forms",
            "Data loading states",
            "Global state management alternatives"
          ]
        },
        {
          "id": "theory_default_props",
          "title": "Default Props in React Components",
          "content": "In React, `defaultProps` provide a way to define default values for the props of a component. These default values are used when a prop is not explicitly passed to the component, or when it's passed as `undefined`. This feature helps make components more robust and predictable by ensuring that certain props always have a value, even if the parent component doesn't supply one.\n\n### How to Define `defaultProps`\n`defaultProps` are defined as a static property on the component class (for class components) or directly on the function component (for functional components). They are typically declared after the component definition.\n\n```jsx\n// Functional Component\nfunction MyComponent(props) {\n  return (\n    <div>\n      <h1>Hello, {props.name}!</h1>\n      <p>You are {props.age} years old.</p>\n    </div>\n  );\n}\n\nMyComponent.defaultProps = {\n  name: 'Stranger',\n  age: 30\n};\n\n// Usage:\n// <MyComponent />                 // name: 'Stranger', age: 30\n// <MyComponent name=\"Alice\" />    // name: 'Alice', age: 30\n// <MyComponent age={25} />      // name: 'Stranger', age: 25\n// <MyComponent name={undefined} /> // name: 'Stranger', age: 30\n```\n\n### Key Considerations\n*   **When `defaultProps` are applied:** They are applied *before* the component's `render` method (for class components) or functional component body executes, ensuring that `this.props` or `props` always contain the default values if not explicitly provided.\n*   **`undefined` vs. `null`:** `defaultProps` apply when a prop is `undefined`, but not when it's explicitly `null`. If you pass `null` for a prop, it will override the default value.\n*   **Type Checking:** Often used in conjunction with `PropTypes` (or TypeScript interfaces) for better validation and clarity of component's expected props.\n*   **Alternatives for Functional Components (ES6 Default Parameters):** For functional components, ES6 default parameters are often a more concise and preferred way to handle default prop values directly within the function signature. This method doesn't require the `MyComponent.defaultProps` static property.\n\n```jsx\n// Using ES6 Default Parameters\nfunction MyComponentWithDefaults({ name = 'Stranger', age = 30 }) {\n  return (\n    <div>\n      <h1>Hello, {name}!</h1>\n      <p>You are {age} years old.</p>\n    </div>\n  );\n}\n\n// Usage is the same as with defaultProps\n// <MyComponentWithDefaults />\n// <MyComponentWithDefaults name=\"Bob\" />\n```\n\nWhile ES6 default parameters are often cleaner for functional components, `defaultProps` are still widely used, especially in existing codebases or when working with class components. It's also useful if you need to access the default values from outside the component definition.",
          "examples": [
            {
              "id": "example_default_props_1",
              "title": "Functional Component with defaultProps",
              "code": "import React from 'react';\n\nfunction GreetingCard({ name, message }) {\n  return (\n    <div style={{ border: '1px solid gray', padding: '10px', margin: '10px' }}>\n      <h2>{message}, {name}!</h2>\n      <p>Hope you have a great day!</p>\n    </div>\n  );\n}\n\nGreetingCard.defaultProps = {\n  name: 'Guest',\n  message: 'Hello'\n};\n\nfunction App() {\n  return (\n    <div>\n      <GreetingCard />\n      <GreetingCard name=\"Alice\" />\n      <GreetingCard message=\"Greetings\" />\n      <GreetingCard name=\"Bob\" message=\"Hi there\" />\n      <GreetingCard name={undefined} /> {/* Uses default name 'Guest' */}\n      <GreetingCard name={null} />      {/* Uses null, not default */}\n    </div>\n  );\n}",
              "explanation": "This example demonstrates how `defaultProps` work with a functional component. When `GreetingCard` is rendered without `name` or `message` props, or with `undefined` for `name`, the default values are applied. However, when `name={null}` is passed, the default is overridden, and `name` inside the component becomes `null`.",
              "language": "typescript"
            },
            {
              "id": "example_default_props_2",
              "title": "Functional Component with ES6 Default Parameters",
              "code": "import React from 'react';\n\nfunction UserProfile({ username = 'Anonymous', theme = 'light' }) {\n  return (\n    <div style={{ backgroundColor: theme === 'light' ? '#fff' : '#333', color: theme === 'light' ? '#333' : '#fff', padding: '15px' }}>\n      <h3>User: {username}</h3>\n      <p>Theme: {theme}</p>\n    </div>\n  );\n}\n\nfunction AppES6Defaults() {\n  return (\n    <div>\n      <UserProfile />\n      <UserProfile username=\"DevMaster\" />\n      <UserProfile theme=\"dark\" />\n      <UserProfile username=\"Admin\" theme=\"dark\" />\n      <UserProfile username={undefined} /> {/* Uses default username 'Anonymous' */}\n      <UserProfile username={null} />      {/* Uses null, not default */}\n    </div>\n  );\n}",
              "explanation": "This example shows the equivalent functionality using ES6 default parameters directly in the function component's destructuring assignment. This is often preferred for its conciseness. Similar to `defaultProps`, `undefined` triggers the default, but `null` overrides it.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_default_props_1",
            "question_default_props_2",
            "question_default_props_3",
            "question_default_props_4",
            "question_default_props_5"
          ],
          "relatedTasks": [
            "task_default_props_1"
          ],
          "tags": [
            "React Components",
            "Props",
            "Default Values",
            "ES6",
            "Functional Components",
            "Class Components"
          ],
          "technology": "React",
          "prerequisites": [
            "React Components",
            "Props"
          ],
          "complexity": 3,
          "interviewRelevance": 6,
          "learningPath": "beginner",
          "requiredFor": [
            "Robust component design",
            "Reusable components"
          ]
        },
        {
          "id": "theory_spread_operator",
          "title": "The JavaScript Spread Operator (`...`)",
          "content": "The spread operator (`...`) in JavaScript is a powerful and versatile syntax introduced in ES6 (ECMAScript 2015). It allows an iterable (like an array, string, or map) or an object to be expanded into individual elements or key-value pairs where multiple elements or pairs are expected. Its primary use cases include creating shallow copies of arrays and objects, merging arrays and objects, and passing function arguments.\n\n### Key Use Cases\n\n1.  **Copying Arrays and Objects (Shallow Copy):**\n    The spread operator creates a new array or object containing the elements/properties of the original. This is a *shallow copy*, meaning nested objects or arrays are still referenced by memory, not deeply cloned.\n    ```javascript\n    const originalArray = [1, 2, 3];\n    const copiedArray = [...originalArray]; // [1, 2, 3] - new array\n\n    const originalObject = { a: 1, b: 2 };\n    const copiedObject = { ...originalObject }; // { a: 1, b: 2 } - new object\n    ```\n\n2.  **Concatenating/Merging Arrays:**\n    It's an elegant way to combine multiple arrays or add elements to an existing array without using `concat()`.\n    ```javascript\n    const arr1 = [1, 2];\n    const arr2 = [3, 4];\n    const combinedArray = [...arr1, ...arr2, 5]; // [1, 2, 3, 4, 5]\n    ```\n\n3.  **Merging Objects:**\n    When used with objects, properties from the spread object are copied into the new object. If there are duplicate keys, the last key's value will override previous ones.\n    ```javascript\n    const obj1 = { a: 1, b: 2 };\n    const obj2 = { c: 3, d: 4 };\n    const mergedObject = { ...obj1, ...obj2 }; // { a: 1, b: 2, c: 3, d: 4 }\n\n    const overrides = { a: 10, e: 5 };\n    const updatedObject = { ...obj1, ...overrides }; // { a: 10, b: 2, e: 5 }\n    ```\n\n4.  **Passing Props in React (Common Pattern):**\n    In React, the spread operator is frequently used to pass all properties of an object (typically `this.props`) to a child component.\n    ```jsx\n    // ES5 equivalent:\n    <SomeComponent someData={this.props.someData} dispatch={this.props.dispatch} />\n\n    // ES6 using spread operator:\n    <SomeComponent {...this.props} />\n    ```\n    This effectively unpacks all key-value pairs from `this.props` and sets them as individual props on `SomeComponent`. While convenient, it can sometimes obscure which props a component is actually receiving, so explicit prop passing is often preferred for clarity.\n\n5.  **Function Arguments (Rest Parameters and Spreading):**\n    *   **Spread in Function Call:** Expands an array into separate arguments for a function.\n        ```javascript\n        function sum(a, b, c) { return a + b + c; }\n        const numbers = [1, 2, 3];\n        const result = sum(...numbers); // equivalent to sum(1, 2, 3)\n        ```\n    *   **Rest Parameters in Function Definition:** Collects an indefinite number of arguments into an array. (Note: This is the opposite of spread, but uses the same `...` syntax).\n        ```javascript\n        function logArguments(firstArg, ...remainingArgs) {\n          console.log(firstArg); // 'Hello'\n          console.log(remainingArgs); // ['world', '!']\n        }\n        logArguments('Hello', 'world', '!');\n        ```\n\n### Visual Example\n\n![Spread Operator Example](https://0d70d0e6-ab1f-4e8f-90e5-e65998e87b70--1747720800--d5ef9057.app.yourware.app/WEB%20files/aaaa.png)\n\n### Important Note: Shallow Copy\nAlways remember that the spread operator performs a *shallow copy*. If your object or array contains nested objects or arrays, those nested structures are *still referenced* by the new object/array. Modifying a nested structure in the copied version will also affect the original. For deep copies, you would need to use methods like `JSON.parse(JSON.stringify(obj))` (with caveats for functions, dates, etc.) or a dedicated deep-cloning library.",
          "examples": [
            {
              "id": "example_spread_operator_1",
              "title": "Shallow Copying and Merging",
              "code": "const user = { id: 1, name: 'Alice', settings: { theme: 'dark', notifications: true } };\nconst newSettings = { theme: 'light' };\n\n// Shallow copy of user, updating settings\nconst updatedUser = { ...user, settings: { ...user.settings, ...newSettings } };\n\nconsole.log(user);\n// { id: 1, name: 'Alice', settings: { theme: 'dark', notifications: true } }\n\nconsole.log(updatedUser);\n// { id: 1, name: 'Alice', settings: { theme: 'light', notifications: true } }\n\n// Demonstrate shallow copy issue if not careful with nested objects\nconst userCopy = { ...user };\nuserCopy.settings.theme = 'blue';\n\nconsole.log(user.settings.theme); // Output: 'blue' - original object was mutated because settings object was not deep copied\n\nconst items = ['apple', 'banana'];\nconst moreItems = ['cherry', 'date'];\nconst allItems = [...items, 'grape', ...moreItems];\n\nconsole.log(allItems); // ['apple', 'banana', 'grape', 'cherry', 'date']",
              "explanation": "This example illustrates how to use the spread operator for shallow copying and merging objects and arrays. It also highlights the 'shallow copy' limitation: when a nested object (like `settings`) is not explicitly spread and copied, changes to it in the copied object will reflect in the original object. To correctly update nested properties, the nested object itself must also be spread.",
              "language": "typescript"
            },
            {
              "id": "example_spread_operator_2",
              "title": "Spread Operator in React Props",
              "code": "import React from 'react';\n\nfunction Button({ text, type, onClick, disabled }) {\n  return (\n    <button type={type} onClick={onClick} disabled={disabled}>\n      {text}\n    </button>\n  );\n}\n\nfunction App() {\n  const commonButtonProps = {\n    type: 'submit',\n    onClick: () => alert('Button clicked!'),\n    disabled: false\n  };\n\n  return (\n    <div>\n      {/* Explicitly passing props */}\n      <Button text=\"Submit A\" type=\"button\" onClick={() => console.log('A clicked')} disabled={false} />\n\n      {/* Using spread operator for common props */}\n      <Button text=\"Submit B\" {...commonButtonProps} />\n\n      {/* Overriding a spread prop */}\n      <Button text=\"Disabled Button\" {...commonButtonProps} disabled={true} />\n    </div>\n  );\n}",
              "explanation": "This React example demonstrates the convenience of using the spread operator to pass a collection of props to a child component. `commonButtonProps` defines a set of default or frequently used props. When spread onto the `Button` component, these props are applied. It also shows how individual props can override values provided by the spread operator (e.g., `disabled={true}` overrides `disabled: false` from `commonButtonProps`).",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_spread_operator_1",
            "question_spread_operator_2",
            "question_spread_operator_3",
            "question_spread_operator_4",
            "question_spread_operator_5",
            "question_spread_operator_6",
            "question_spread_operator_7"
          ],
          "relatedTasks": [
            "task_spread_operator_1"
          ],
          "tags": [
            "JavaScript ES6",
            "Spread Syntax",
            "Object Copy",
            "Array Copy",
            "Immutability",
            "React Props",
            "Functional Programming"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "JavaScript Objects",
            "JavaScript Arrays",
            "React Props (for React context)"
          ],
          "complexity": 5,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "Immutable state updates",
            "Component flexibility",
            "Modern JavaScript development"
          ]
        },
        {
          "id": "theory_react_events",
          "title": "React's SyntheticEvent System",
          "content": "React implements its own event system, known as `SyntheticEvent`, which wraps the browser's native event system. This wrapper provides a consistent, cross-browser compatible interface to events, addressing inconsistencies that exist across different browsers' DOM implementations. When you define an event handler like `onClick` or `onChange` in React, you're interacting with a `SyntheticEvent` object, not the native browser event.\n\n### Key Characteristics and Differences from Native Events\n\n1.  **Cross-Browser Consistency:** `SyntheticEvent` normalizes event properties across different browsers, meaning you don't have to write browser-specific code for common event properties like `event.target`, `event.currentTarget`, `event.preventDefault()`, or `event.stopPropagation()`. This ensures your event handling logic behaves predictably everywhere.\n\n2.  **Event Pooling:** React used to pool `SyntheticEvent` objects for performance reasons. This meant that the event object was reused and its properties were nullified after the event callback was invoked. **As of React 17, event pooling has been removed.** You can now access event properties asynchronously without needing to call `event.persist()`. This simplifies asynchronous event handling.\n\n3.  **Event Delegation:** React automatically delegates events to the document root. When you attach an event handler to a React element, React actually attaches a single event listener to the document. When an event fires, React then dispatches it to the correct component based on the event's target. This improves performance by reducing the number of actual DOM event listeners, especially in large applications with many components.\n\n4.  **Naming Convention:** React event handlers are named using camelCase (e.g., `onClick`, `onChange`), unlike standard HTML attributes which are lowercase (e.g., `onclick`, `onchange`).\n\n5.  **Event Handler Binding (`this` context):** In class components, `this` context for event handlers needs to be explicitly bound, typically in the constructor or using arrow functions, because JavaScript functions lose their `this` context when passed as callbacks. In functional components with Hooks, `this` is not an issue.\n\n    ```jsx\n    // Class Component - Binding 'this'\n    class MyButton extends React.Component {\n      handleClick() { /* ... */ }\n      render() { return <button onClick={this.handleClick.bind(this)}>Click Me</button>; }\n    }\n    // Or using arrow function class property (preferred):\n    class MyButton extends React.Component {\n      handleClick = () => { /* ... */ };\n      render() { return <button onClick={this.handleClick}>Click Me</button>; }\n    }\n    ```\n\n6.  **`preventDefault()` and `stopPropagation()`:** These methods work similarly to their native counterparts on the `SyntheticEvent` object to prevent default browser behavior or stop event propagation through the DOM. It's important to call them on the `SyntheticEvent` object, not directly on the native event if you were to access it.\n\n### Accessing the Native Event\nIf for some rare reason you need to access the underlying native browser event object, you can do so via `event.nativeEvent` property of the `SyntheticEvent` object.\n\n```jsx\nfunction MyComponent() {\n  const handleButtonClick = (event) => {\n    console.log('Synthetic Event:', event);\n    console.log('Native Event:', event.nativeEvent);\n    event.preventDefault(); // Prevents default behavior (e.g., form submission)\n    event.stopPropagation(); // Stops event from bubbling up\n  };\n\n  return <button onClick={handleButtonClick}>Click Me</button>;\n}\n```\n\nUnderstanding `SyntheticEvent` is crucial for effective event handling and debugging in React applications.",
          "examples": [
            {
              "id": "example_react_events_1",
              "title": "Basic Event Handling with SyntheticEvent",
              "code": "import React, { useState } from 'react';\n\nfunction EventDemo() {\n  const [message, setMessage] = useState('');\n\n  const handleChange = (event) => {\n    // event is a SyntheticEvent object\n    setMessage(`Input value: ${event.target.value}`);\n    console.log('SyntheticEvent type:', event.type);\n    console.log('NativeEvent type:', event.nativeEvent.type);\n  };\n\n  const handleSubmit = (event) => {\n    // Prevent default form submission behavior (page reload)\n    event.preventDefault();\n    alert('Form submitted with message: ' + message);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={message} onChange={handleChange} placeholder=\"Type something...\" />\n      <button type=\"submit\">Submit</button>\n      <p>{message}</p>\n    </form>\n  );\n}",
              "explanation": "This example demonstrates how React event handlers receive `SyntheticEvent` objects. The `handleChange` function updates state based on `event.target.value`, showing how `SyntheticEvent` provides access to common DOM event properties. The `handleSubmit` function uses `event.preventDefault()` to stop the default form submission behavior, which would typically cause a page reload.",
              "language": "typescript"
            },
            {
              "id": "example_react_events_2",
              "title": "Event Propagation and `stopPropagation`",
              "code": "import React from 'react';\n\nfunction ParentComponent() {\n  const handleParentClick = () => {\n    console.log('Parent div clicked!');\n  };\n\n  const handleChildClick = (event) => {\n    event.stopPropagation(); // Stop the event from bubbling up to the parent div\n    console.log('Child button clicked!');\n  };\n\n  return (\n    <div onClick={handleParentClick} style={{ padding: '20px', border: '1px solid blue' }}>\n      Parent Div\n      <button onClick={handleChildClick} style={{ marginLeft: '10px' }}>\n        Child Button\n      </button>\n    </div>\n  );\n}",
              "explanation": "This example illustrates event propagation in React's SyntheticEvent system and the use of `event.stopPropagation()`. When the 'Child Button' is clicked, `handleChildClick` is invoked. Because `event.stopPropagation()` is called, the click event does not propagate up to the `ParentComponent`'s `div`, preventing `handleParentClick` from being triggered. If `stopPropagation()` were removed, clicking the button would trigger both handlers.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_react_events_1",
            "question_react_events_2",
            "question_react_events_3",
            "question_react_events_4",
            "question_react_events_5",
            "question_react_events_6"
          ],
          "relatedTasks": [
            "task_react_events_1"
          ],
          "tags": [
            "React Events",
            "SyntheticEvent",
            "DOM Events",
            "Event Delegation",
            "Cross-Browser Compatibility",
            "Performance Optimization"
          ],
          "technology": "React",
          "prerequisites": [
            "React Components",
            "JavaScript Events"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "Interactive UI development",
            "Form handling",
            "Performance understanding"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_https_setup_1",
          "topic": "Enabling HTTPS in React Development",
          "level": "easy",
          "type": "flashcard",
          "question": "What environment variable needs to be set to enable HTTPS for a Create React App development server?",
          "answer": "HTTPS",
          "analysisPoints": [
            "Recalling the specific environment variable name."
          ],
          "keyConcepts": [
            "HTTPS environment variable",
            "Create React App development"
          ],
          "evaluationCriteria": [
            "Memory recall of configuration settings."
          ],
          "example": null,
          "tags": [
            "React",
            "HTTPS",
            "Environment Variable"
          ],
          "prerequisites": [
            "Create React App"
          ],
          "complexity": 2,
          "interviewFrequency": 3,
          "learningPath": "beginner"
        },
        {
          "id": "question_https_setup_2",
          "topic": "Enabling HTTPS in React Development",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following commands would correctly start a React development server with HTTPS enabled on a Windows system?",
          "answer": "set HTTPS=true && npm start",
          "options": [
            "start HTTPS=true && npm start",
            "HTTPS=true npm start",
            "npm start --https",
            "set HTTPS=true && npm start"
          ],
          "analysisPoints": [
            "Knowledge of Windows command line syntax for setting environment variables.",
            "Understanding of how Create React App utilizes the `HTTPS` variable."
          ],
          "keyConcepts": [
            "HTTPS environment variable",
            "Windows CLI syntax",
            "Create React App scripts"
          ],
          "evaluationCriteria": [
            "Correct application of command-line syntax.",
            "Distinguishing between platform-specific commands."
          ],
          "example": "The `set` command is used on Windows to set environment variables. `&&` chains commands, ensuring `npm start` runs after the variable is set. `HTTPS=true npm start` is for Unix-like systems. `--https` is not the standard way CRA enables HTTPS from the CLI.",
          "tags": [
            "React",
            "HTTPS",
            "CLI",
            "Windows"
          ],
          "prerequisites": [
            "Node.js",
            "npm"
          ],
          "complexity": 4,
          "interviewFrequency": 4,
          "learningPath": "beginner"
        },
        {
          "id": "question_https_setup_3",
          "topic": "Enabling HTTPS in React Development",
          "level": "medium",
          "type": "open",
          "question": "Why might a frontend developer choose to enable HTTPS for their local React development server, even if the production environment uses a CDN or proxy that handles HTTPS?",
          "answer": "A frontend developer might enable HTTPS for their local React development server for several reasons:\n\n1.  **Testing Browser Features:** Many modern web features, such as Service Workers, Web Push Notifications, Geolocation API, WebRTC, and WebAuthn, require a 'secure context' (HTTPS) to function. Developing locally over HTTP would prevent these features from being tested effectively.\n2.  **API Interaction:** If the application interacts with external APIs that strictly enforce HTTPS for all requests, making local HTTP requests to them might result in CORS errors or blocked requests. Running locally over HTTPS avoids these issues.\n3.  **Production Parity:** Ensuring the development environment closely mirrors the production environment can help catch subtle bugs or misbehaviors that might only manifest when served over HTTPS. This includes issues related to mixed content warnings or insecure script loading.\n4.  **Security Best Practices:** Even for local development, adopting secure practices like HTTPS helps reinforce good habits and prepares the developer for security considerations in production.\n5.  **Reduced Browser Warnings:** Browsers increasingly flag HTTP connections as 'Not Secure'. While a minor nuisance in development, enabling HTTPS removes these constant warnings, leading to a cleaner development experience.",
          "analysisPoints": [
            "Understanding of browser security features that require HTTPS.",
            "Awareness of API security policies.",
            "Concept of development environment parity with production.",
            "General web security best practices."
          ],
          "keyConcepts": [
            "Secure Context",
            "Service Workers",
            "CORS",
            "Mixed Content",
            "Development vs. Production environment"
          ],
          "evaluationCriteria": [
            "Comprehensive explanation of technical reasons.",
            "Ability to connect different web concepts.",
            "Practical understanding of development workflows."
          ],
          "example": null,
          "tags": [
            "React",
            "HTTPS",
            "Web Security",
            "Development Practices",
            "Service Workers",
            "API"
          ],
          "prerequisites": [
            "Web security basics",
            "CORS",
            "API calls"
          ],
          "complexity": 6,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_https_setup_4",
          "topic": "Enabling HTTPS in React Development",
          "level": "easy",
          "type": "mcq",
          "question": "When running `npm start` in a Create React App project, where can you modify the script to ensure HTTPS is enabled by default without needing to type extra commands every time?",
          "answer": "In the `scripts` section of `package.json`",
          "options": [
            "In `index.js` or `App.js`",
            "In the `config` folder of your project",
            "In the `scripts` section of `package.json`",
            "By creating a `.env` file with `HTTPS=true`"
          ],
          "analysisPoints": [
            "Knowing the standard configuration files for `npm` scripts.",
            "Understanding how environment variables are typically set for build/start processes."
          ],
          "keyConcepts": [
            "package.json",
            "npm scripts",
            "Environment variables"
          ],
          "evaluationCriteria": [
            "Correct identification of the project configuration file.",
            "Understanding of common React project setup."
          ],
          "example": "The `package.json` file's `scripts` section is where `npm` commands are defined, allowing you to prepend environment variables like `HTTPS=true` directly to the `start` script. While a `.env` file can also be used for environment variables, the direct script modification is explicitly shown and common for this particular setup.",
          "tags": [
            "React",
            "HTTPS",
            "package.json",
            "npm scripts"
          ],
          "prerequisites": [
            "React project structure"
          ],
          "complexity": 3,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_use_reducer_1",
          "topic": "useReducer Hook",
          "level": "easy",
          "type": "flashcard",
          "question": "What are the two main values returned by the `useReducer` hook?",
          "answer": "The current state and the dispatch function.",
          "analysisPoints": [
            "Recalling the destructuring assignment of `useReducer`."
          ],
          "keyConcepts": [
            "useReducer hook signature",
            "state",
            "dispatch function"
          ],
          "evaluationCriteria": [
            "Memory recall of hook return values."
          ],
          "example": null,
          "tags": [
            "React Hooks",
            "useReducer"
          ],
          "prerequisites": [
            "React Hooks basics"
          ],
          "complexity": 2,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_use_reducer_2",
          "topic": "useReducer Hook",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following `reducer` function and initial state:\n\n```javascript\nconst initialState = { count: 10, isActive: false };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'TOGGLE_ACTIVE':\n      return { ...state, isActive: !state.isActive };\n    case 'ADD':\n      return { ...state, count: state.count + action.payload };\n    case 'RESET':\n      return initialState;\n    default:\n      throw new Error();\n  }\n}\n```\n\nIf the current state is `{ count: 5, isActive: true }` and `dispatch({ type: 'ADD', payload: 3 })` is called, what will be the next state?",
          "answer": "{ count: 8, isActive: true }",
          "options": [
            "{ count: 13, isActive: true }",
            "{ count: 8, isActive: true }",
            "{ count: 5, isActive: true, payload: 3 }",
            "{ count: 8, isActive: false }"
          ],
          "analysisPoints": [
            "Understanding how reducer functions process actions.",
            "Correctly applying the `payload` from the action.",
            "Recognizing that other state properties remain unchanged unless explicitly modified."
          ],
          "keyConcepts": [
            "Reducer function logic",
            "Action payload",
            "Immutability",
            "State updates"
          ],
          "evaluationCriteria": [
            "Ability to trace state changes in a reducer.",
            "Correctly interpret action types and payloads."
          ],
          "example": "The current state is `{ count: 5, isActive: true }`. The `ADD` action type is dispatched with a `payload` of `3`. The reducer creates a new state object, spreading the existing state and updating `count` to `state.count + action.payload`, which is `5 + 3 = 8`. The `isActive` property remains `true` as it's not affected by this action.",
          "tags": [
            "React Hooks",
            "useReducer",
            "State Management"
          ],
          "prerequisites": [
            "JavaScript objects",
            "Reducer pattern"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_use_reducer_3",
          "topic": "useReducer Hook",
          "level": "hard",
          "type": "code",
          "question": "Implement a `TaskReducer` that manages a list of tasks. Each task object should have an `id` (unique number), `text` (string), and `completed` (boolean). The reducer should support the following actions:\n\n*   `ADD_TASK`: Adds a new task. The action payload should be `{ text: string }`. The new task should automatically get a unique `id` and `completed: false`.\n*   `TOGGLE_TASK`: Toggles the `completed` status of a task. The action payload should be `{ id: number }`.\n*   `DELETE_TASK`: Removes a task from the list. The action payload should be `{ id: number }`.\n\nProvide the `initialState` and the `reducer` function.",
          "answer": "```typescript\nconst initialTasksState = [];\n\nfunction taskReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_TASK':\n      return [\n        ...state,\n        {\n          id: Date.now(), // Simple unique ID generation\n          text: action.payload.text,\n          completed: false,\n        },\n      ];\n    case 'TOGGLE_TASK':\n      return state.map((task) =>\n        task.id === action.payload.id\n          ? { ...task, completed: !task.completed }\n          : task\n      );\n    case 'DELETE_TASK':\n      return state.filter((task) => task.id !== action.payload.id);\n    default:\n      throw new Error(`Unsupported action type: ${action.type}`);\n  }\n}\n\n// Example Usage (for testing):\n// const [tasks, dispatch] = useReducer(taskReducer, initialTasksState);\n// dispatch({ type: 'ADD_TASK', payload: { text: 'Learn React' } });\n// dispatch({ type: 'ADD_TASK', payload: { text: 'Build a project' } });\n// dispatch({ type: 'TOGGLE_TASK', payload: { id: tasks[0]?.id } });\n// dispatch({ type: 'DELETE_TASK', payload: { id: tasks[1]?.id } });\n```",
          "analysisPoints": [
            "Ability to define initial state for a list.",
            "Correctly implementing `ADD_TASK` with new object creation and unique ID generation (e.g., `Date.now()`).",
            "Using `map` for `TOGGLE_TASK` to create a new array with updated element, demonstrating immutability.",
            "Using `filter` for `DELETE_TASK` to create a new array without the removed element, demonstrating immutability.",
            "Handling the `default` case for unknown action types."
          ],
          "keyConcepts": [
            "Reducer pattern",
            "Immutability (spread operator, map, filter)",
            "State shape design",
            "Action types and payloads"
          ],
          "evaluationCriteria": [
            "Correctness of reducer logic for all actions.",
            "Adherence to immutability principles.",
            "Effective use of array methods (`map`, `filter`).",
            "Appropriate handling of unique IDs."
          ],
          "example": null,
          "tags": [
            "React Hooks",
            "useReducer",
            "State Management",
            "Immutability",
            "Coding Challenge"
          ],
          "prerequisites": [
            "JavaScript array methods",
            "Object destructuring",
            "Reducer pattern"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_use_reducer_4",
          "topic": "useReducer Hook",
          "level": "medium",
          "type": "open",
          "question": "Explain the primary benefits of using `useReducer` over `useState` for state management in a React functional component. Provide a scenario where `useReducer` would be clearly preferred.",
          "answer": "The primary benefits of `useReducer` over `useState` are:\n\n1.  **Complex State Logic:** `useReducer` shines when state updates involve complex logic, multiple related sub-values, or when the next state depends heavily on the previous state. `useState` can lead to verbose and error-prone code with multiple `setState` calls and `prev => ...` patterns.\n2.  **Predictable State Transitions:** By centralizing state logic within a single `reducer` function, all possible state transitions are defined in one place. This makes the state predictable, easier to understand, test, and debug, similar to the Redux pattern.\n3.  **Separation of Concerns:** The state update logic (the reducer) is separated from the component's rendering logic. This improves readability and maintainability.\n4.  **Performance Optimization (Stable `dispatch`):** The `dispatch` function returned by `useReducer` has a stable identity and won't change on re-renders. This allows child components that receive `dispatch` as a prop to be effectively memoized using `React.memo` without unnecessary re-renders, unlike `setState` from `useState` which can be wrapped in `useCallback` for similar effect but is less straightforward for complex updates.\n5.  **Scalability:** For features with many possible interactions and derived states, `useReducer` scales better than a multitude of `useState` calls.\n\n**Scenario where `useReducer` is clearly preferred:**\nConsider a complex multi-step form with several interdependent fields, validation rules, and different submission states (e.g., `idle`, `submitting`, `success`, `error`). Using `useState` might involve many individual state variables (`formData`, `validationErrors`, `isSubmitting`, `submitStatus`, etc.) and complex conditional logic in the component to update them. With `useReducer`, you could have a single state object like `{ formData: {}, errors: {}, status: 'idle' }` and a `reducer` function that handles actions like `UPDATE_FIELD`, `VALIDATE_FORM`, `SUBMIT_START`, `SUBMIT_SUCCESS`, `SUBMIT_ERROR`. This centralizes all form logic, making it more manageable, testable, and ensuring consistent state transitions.",
          "analysisPoints": [
            "Ability to articulate the specific advantages of `useReducer`.",
            "Comparison of `useReducer` and `useState`.",
            "Providing a concrete and relevant use-case scenario.",
            "Discussing benefits like predictability, testability, and performance."
          ],
          "keyConcepts": [
            "useReducer vs. useState",
            "Complex state logic",
            "Predictable state management",
            "Separation of concerns",
            "Performance optimization (dispatch identity)",
            "State transitions"
          ],
          "evaluationCriteria": [
            "Clarity and depth of explanation.",
            "Relevance and aptness of the provided scenario.",
            "Demonstration of comprehensive understanding of state management in React."
          ],
          "example": null,
          "tags": [
            "React Hooks",
            "useReducer",
            "useState",
            "State Management",
            "Design Patterns"
          ],
          "prerequisites": [
            "React Hooks",
            "State management concepts"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_use_reducer_5",
          "topic": "useReducer Hook",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following statements about `useReducer`'s `reducer` function is TRUE?",
          "answer": "It must be a pure function that returns a new state object.",
          "options": [
            "It can perform side effects like fetching data or setting timers.",
            "It directly mutates the `state` object passed to it.",
            "It must be a pure function that returns a new state object.",
            "It automatically batches multiple `dispatch` calls within a single render cycle."
          ],
          "analysisPoints": [
            "Understanding the purity requirement of reducer functions.",
            "Knowledge of immutability in state updates.",
            "Distinguishing reducer responsibilities from component effects."
          ],
          "keyConcepts": [
            "Pure function",
            "Immutability",
            "Side effects",
            "Reducer pattern"
          ],
          "evaluationCriteria": [
            "Correct identification of reducer properties.",
            "Understanding of functional programming principles in React."
          ],
          "example": "Reducers must be pure functions: given the same inputs (state and action), they must always produce the same output (new state) without any side effects (like API calls or DOM manipulation). They must also return a *new* state object, never directly modify the existing one. While React *does* batch updates, this is a property of `dispatch` and React's scheduler, not the `reducer` function itself.",
          "tags": [
            "React Hooks",
            "useReducer",
            "Pure Functions",
            "Immutability"
          ],
          "prerequisites": [
            "Functional programming basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_use_reducer_6",
          "topic": "useReducer Hook",
          "level": "medium",
          "type": "flashcard",
          "question": "In the `useReducer` hook, what is the purpose of the `action.payload` property?",
          "answer": "To carry any additional data needed by the reducer to compute the new state.",
          "analysisPoints": [
            "Understanding the structure and role of action objects.",
            "Distinguishing between action type and data."
          ],
          "keyConcepts": [
            "Action object",
            "Payload",
            "Reducer input"
          ],
          "evaluationCriteria": [
            "Accurate definition of `payload`'s role."
          ],
          "example": null,
          "tags": [
            "React Hooks",
            "useReducer",
            "Action Object"
          ],
          "prerequisites": [
            "Reducer pattern basics"
          ],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_use_reducer_7",
          "topic": "useReducer Hook",
          "level": "easy",
          "type": "mcq",
          "question": "Given the following `initialState` and `reducer` from the provided content, what would be the result of calling `dispatch({ type: 'RESET' })` when the current `count` is 5 and `loading` is true?\n\n```javascript\n// Initial state\nconst initialState = {\n  count: 0,\n  loading: false,\n  error: null,\n  data: null\n};\n\n// Reducer function\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    case 'RESET':\n      return { ...state, count: 0 };\n    // ... other cases\n  }\n}\n```",
          "answer": "{ count: 0, loading: true, error: null, data: null }",
          "options": [
            "{ count: 0, loading: false, error: null, data: null }",
            "{ count: 0, loading: true, error: null, data: null }",
            "{ count: 5, loading: true, error: null, data: null }",
            "An error, as `loading` is not handled by `RESET`."
          ],
          "analysisPoints": [
            "Correctly interpreting the `RESET` action logic (`return { ...state, count: 0 }`).",
            "Understanding that `...state` preserves other properties of the current state.",
            "Differentiating between returning `initialState` directly vs. modifying current state."
          ],
          "keyConcepts": [
            "Reducer logic",
            "Spread operator",
            "Immutability",
            "State preservation"
          ],
          "evaluationCriteria": [
            "Accurate trace of state change.",
            "Understanding of how `...state` functions."
          ],
          "example": "The `RESET` action specifically sets `count: 0` while spreading the *current* `state`. This means `loading`, `error`, and `data` retain their values from the state *before* the dispatch. If the reducer had `return initialState;`, then `loading` would revert to `false`.",
          "tags": [
            "React Hooks",
            "useReducer",
            "State Logic"
          ],
          "prerequisites": [
            "JavaScript objects",
            "Spread operator"
          ],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_use_reducer_8",
          "topic": "useReducer Hook",
          "level": "medium",
          "type": "open",
          "question": "Can `useReducer` be used for global state management across multiple components without libraries like Redux or React Context? If so, how, and what are the limitations?",
          "answer": "Yes, `useReducer` can be effectively combined with React's `Context API` to manage global state across multiple components. This pattern is often referred to as the 'Context + Reducer' pattern.\n\n**How it works:**\n1.  **Create a Context:** Create a React Context (e.g., `StateContext` and `DispatchContext`).\n2.  **Define Reducer and Initial State:** Define your `reducer` function and `initialState` outside of any component.\n3.  **Provide Context:** In a common ancestor component (e.g., `App.js` or a dedicated `StoreProvider` component), call `useReducer` to get the `state` and `dispatch` function. Then, provide the `state` via `StateContext.Provider` and `dispatch` via `DispatchContext.Provider` to their children.\n4.  **Consume Context:** In any descendant component, use `useContext(StateContext)` to get the global state and `useContext(DispatchContext)` to get the dispatch function, allowing them to read state and dispatch actions.\n\n**Limitations:**\n1.  **Re-renders:** Any component consuming the `StateContext` will re-render whenever *any part* of the state managed by that context changes. This can lead to performance issues if the global state is very large and frequently updated, requiring careful use of memoization (`React.memo`, `useCallback`, `useMemo`).\n2.  **Single Global Store:** It's typically one large global state object. If you need distinct, isolated state domains, you might end up creating multiple contexts, which can add complexity.\n3.  **No Middleware or DevTools out-of-the-box:** Unlike Redux, the Context + Reducer pattern doesn't natively support middleware (for async actions, logging, etc.) or powerful developer tools (like Redux DevTools) without custom implementations.\n4.  **Boilerplate:** While less than full Redux, setting up the provider and consumer pattern can still involve some boilerplate, especially for larger applications with many different state slices.",
          "analysisPoints": [
            "Knowledge of `useReducer` and `Context API` integration.",
            "Ability to describe the implementation pattern.",
            "Identification of key limitations (performance, tooling, scalability for very large apps).",
            "Comparison to dedicated state management libraries."
          ],
          "keyConcepts": [
            "React Context API",
            "Global state management",
            "Context + Reducer pattern",
            "Performance considerations",
            "Middleware",
            "Developer tools"
          ],
          "evaluationCriteria": [
            "Accurate explanation of the pattern.",
            "Thorough discussion of advantages and disadvantages.",
            "Demonstration of practical architectural knowledge."
          ],
          "example": null,
          "tags": [
            "React Hooks",
            "useReducer",
            "React Context",
            "Global State",
            "Architecture",
            "Performance"
          ],
          "prerequisites": [
            "React Context API",
            "useReducer Hook"
          ],
          "complexity": 7,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_use_reducer_9",
          "topic": "useReducer Hook",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following is NOT a typical component of an `action` object dispatched to a `useReducer` hook?",
          "answer": "A function to compute the next state directly.",
          "options": [
            "A `type` property (string).",
            "A `payload` property (any data).",
            "A function to compute the next state directly.",
            "An `id` property for targeting specific items (if applicable)."
          ],
          "analysisPoints": [
            "Understanding the standard structure of a Redux-like action object.",
            "Distinguishing between an action (what happened) and a reducer (how to update state)."
          ],
          "keyConcepts": [
            "Action object structure",
            "Action type",
            "Action payload",
            "Reducer function"
          ],
          "evaluationCriteria": [
            "Correct identification of invalid action component.",
            "Clear understanding of action's role."
          ],
          "example": "An action object describes *what* happened, typically with a `type` and relevant `payload` data. The *how* to compute the next state is the responsibility of the `reducer` function, not part of the `action` itself. An `id` property might be part of the `payload` for actions that target specific items (like toggling a task).",
          "tags": [
            "React Hooks",
            "useReducer",
            "Action Object"
          ],
          "prerequisites": [
            "Reducer pattern"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_default_props_1",
          "topic": "Default Props",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of `defaultProps` in React components?",
          "answer": "To define default values for component props that are not explicitly provided by the parent or are `undefined`.",
          "analysisPoints": [
            "Understanding the core function of `defaultProps`."
          ],
          "keyConcepts": [
            "defaultProps",
            "Component props",
            "Default values"
          ],
          "evaluationCriteria": [
            "Accurate and concise definition."
          ],
          "example": null,
          "tags": [
            "React",
            "Props",
            "defaultProps"
          ],
          "prerequisites": [
            "React components",
            "Props"
          ],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_default_props_2",
          "topic": "Default Props",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following React functional component definition:\n\n```jsx\nfunction UserAvatar({ username, size }) {\n  return (\n    <div style={{ width: size, height: size, borderRadius: '50%', backgroundColor: 'lightgray' }}>\n      <span>{username ? username[0].toUpperCase() : '?' }</span>\n    </div>\n  );\n}\n\nUserAvatar.defaultProps = {\n  username: 'Guest User',\n  size: 50\n};\n```\n\nWhat will be the rendered output (specifically the `username` and `size` values) for the following usage:\n`<UserAvatar size={75} username={null} />`",
          "answer": "username: `null`, size: `75`",
          "options": [
            "username: `'Guest User'`, size: `50`",
            "username: `null`, size: `75`",
            "username: `'Guest User'`, size: `75`",
            "username: `null`, size: `50`"
          ],
          "analysisPoints": [
            "Understanding that `defaultProps` apply when a prop is `undefined`, but not `null`.",
            "Correctly identifying that explicitly passed props override defaults."
          ],
          "keyConcepts": [
            "defaultProps application",
            "`undefined` vs. `null`",
            "Prop overriding"
          ],
          "evaluationCriteria": [
            "Accurate application of `defaultProps` rules.",
            "Distinguishing between `null` and `undefined` behavior."
          ],
          "example": "The `size` prop is explicitly passed as `75`, so it overrides the default `50`. The `username` prop is explicitly passed as `null`. `defaultProps` only apply when a prop is `undefined` or not passed at all. Since `null` is a defined value, it overrides the default `'Guest User'`, meaning `username` inside the component will be `null`.",
          "tags": [
            "React",
            "Props",
            "defaultProps",
            "JavaScript"
          ],
          "prerequisites": [
            "React props",
            "JavaScript primitives"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_default_props_3",
          "topic": "Default Props",
          "level": "medium",
          "type": "open",
          "question": "Discuss the two main ways to provide default values for props in a React functional component. What are the advantages and disadvantages of each, and when might you prefer one over the other?",
          "answer": "The two main ways to provide default values for props in a React functional component are:\n\n1.  **Using `Component.defaultProps`:**\n    ```jsx\n    function MyComponent({ text, count }) {\n      return <p>{text}: {count}</p>;\n    }\n    MyComponent.defaultProps = {\n      text: 'Default Text',\n      count: 0\n    };\n    ```\n    *   **Advantages:**\n        *   Explicitly declares defaults outside the function body, which can be useful for tooling or quick reference.\n        *   Works identically for class components, providing consistency across component types in older codebases.\n        *   Defaults are applied even if the prop is passed as `undefined`.\n    *   **Disadvantages:**\n        *   Requires an extra line of code outside the component's main definition.\n        *   Less concise than ES6 default parameters for functional components.\n        *   Can be overlooked if not checked in documentation.\n\n2.  **Using ES6 Default Parameters in function destructuring:**\n    ```jsx\n    function MyComponent({ text = 'Default Text', count = 0 }) {\n      return <p>{text}: {count}</p>;\n    }\n    ```\n    *   **Advantages:**\n        *   More concise and readable, as defaults are defined directly in the function signature.\n        *   Leverages standard JavaScript syntax, making it familiar to developers.\n        *   Integrates naturally with destructuring.\n    *   **Disadvantages:**\n        *   Specific to functional components (not directly applicable to class components).\n        *   Only applies when the prop is `undefined` or not passed; it does **not** apply if the prop is explicitly `null`.\n\n**When to prefer one over the other:**\n*   **Prefer ES6 Default Parameters** for new functional components due to their conciseness and alignment with modern JavaScript best practices, especially when the prop being passed `null` is not a relevant use case for a default value. It's often considered cleaner.\n*   **Consider `Component.defaultProps`** when:\n    *   Working with older codebases that primarily use `defaultProps` or class components.\n    *   You need the default to apply even if the prop is explicitly `null` (though this is a rare use case).\n    *   You want external tools or `PropTypes` to easily inspect the default values (though ES6 defaults are generally well-supported now too).\n\nIn most modern functional React development, ES6 default parameters are the preferred approach for their brevity and clarity.",
          "analysisPoints": [
            "Identification of both methods.",
            "Accurate description of syntax for each.",
            "Balanced discussion of advantages and disadvantages.",
            "Clear guidance on when to choose each method."
          ],
          "keyConcepts": [
            "defaultProps",
            "ES6 Default Parameters",
            "Functional components",
            "Prop definition",
            "`undefined` vs. `null`"
          ],
          "evaluationCriteria": [
            "Comprehensive comparison.",
            "Practical advice on usage.",
            "Understanding of nuances like `null` handling."
          ],
          "example": null,
          "tags": [
            "React",
            "Props",
            "defaultProps",
            "ES6",
            "Functional Components",
            "Best Practices"
          ],
          "prerequisites": [
            "React components",
            "JavaScript ES6"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_default_props_4",
          "topic": "Default Props",
          "level": "easy",
          "type": "mcq",
          "question": "If a component has a `defaultProps` defined for a `theme` prop (`theme: 'light'`), and a parent component passes `theme={null}` to it, what will be the value of `theme` inside the component?",
          "answer": "`null`",
          "options": [
            "`'light'`",
            "`undefined`",
            "`null`",
            "An error will be thrown"
          ],
          "analysisPoints": [
            "Confirming the behavior of `defaultProps` when `null` is explicitly passed."
          ],
          "keyConcepts": [
            "defaultProps behavior",
            "`null` vs `undefined`",
            "Prop precedence"
          ],
          "evaluationCriteria": [
            "Correctly predicting prop resolution.",
            "Demonstrating knowledge of `defaultProps` edge cases."
          ],
          "example": "The `defaultProps` are only used if the prop is `undefined` or not provided. If a prop is explicitly passed as `null`, `null` is considered a valid value, and it will override the default. Therefore, `theme` will be `null`.",
          "tags": [
            "React",
            "Props",
            "defaultProps",
            "Edge Cases"
          ],
          "prerequisites": [
            "React props"
          ],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_default_props_5",
          "topic": "Default Props",
          "level": "medium",
          "type": "code",
          "question": "Refactor the following functional component to use ES6 default parameters for `color` and `size`, instead of `defaultProps`. The default `color` should be `'blue'` and default `size` should be `'medium'`.\n\n```jsx\nimport React from 'react';\n\nfunction StyledText({ content, color, size }) {\n  const style = {\n    color: color,\n    fontSize: size === 'small' ? '12px' : size === 'medium' ? '16px' : '20px'\n  };\n  return <p style={style}>{content}</p>;\n}\n\nStyledText.defaultProps = {\n  color: 'red',\n  size: 'large'\n};\n\n// Example usage:\n// <StyledText content=\"Hello\" />\n// <StyledText content=\"World\" color=\"green\" size=\"small\" />\n```",
          "answer": "```jsx\nimport React from 'react';\n\nfunction StyledText({ content, color = 'blue', size = 'medium' }) {\n  const style = {\n    color: color,\n    fontSize: size === 'small' ? '12px' : size === 'medium' ? '16px' : '20px'\n  };\n  return <p style={style}>{content}</p>;\n}\n\n// Example usage (remains the same):\n// <StyledText content=\"Hello\" /> // color: 'blue', size: 'medium'\n// <StyledText content=\"World\" color=\"green\" size=\"small\" />\n```",
          "analysisPoints": [
            "Ability to convert from `defaultProps` to ES6 default parameters.",
            "Correctly applying default values within destructuring.",
            "Maintaining existing component logic and functionality."
          ],
          "keyConcepts": [
            "ES6 Default Parameters",
            "Functional component props",
            "Destructuring assignment"
          ],
          "evaluationCriteria": [
            "Correct use of ES6 default parameters syntax.",
            "Functional equivalence to the original code."
          ],
          "example": null,
          "tags": [
            "React",
            "Props",
            "ES6",
            "Refactoring",
            "Coding Challenge"
          ],
          "prerequisites": [
            "React functional components",
            "ES6 destructuring"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_spread_operator_1",
          "topic": "Spread Operator",
          "level": "easy",
          "type": "flashcard",
          "question": "What symbol is used for the spread operator in JavaScript?",
          "answer": "`...` (three dots)",
          "analysisPoints": [
            "Recalling the syntax of the spread operator."
          ],
          "keyConcepts": [
            "Spread operator syntax"
          ],
          "evaluationCriteria": [
            "Basic syntax recall."
          ],
          "example": null,
          "tags": [
            "JavaScript",
            "ES6",
            "Spread Operator"
          ],
          "prerequisites": [
            "Basic JavaScript"
          ],
          "complexity": 1,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_spread_operator_2",
          "topic": "Spread Operator",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following JavaScript code:\n\n```javascript\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = { b: 3, c: 4 };\n\nconst mergedObj = { ...obj1, ...obj2 };\n```\n\nWhat will be the value of `mergedObj`?",
          "answer": "`{ a: 1, b: 3, c: 4 }`",
          "options": [
            "`{ a: 1, b: 2, c: 4 }`",
            "`{ a: 1, b: 3, c: 4 }`",
            "`{ a: 1, b: 2, b: 3, c: 4 }`",
            "`{ b: 3, c: 4, a: 1 }`"
          ],
          "analysisPoints": [
            "Understanding how object spread handles duplicate keys (last-in wins).",
            "Correctly merging properties from multiple objects."
          ],
          "keyConcepts": [
            "Object spread",
            "Duplicate keys",
            "Object merging"
          ],
          "evaluationCriteria": [
            "Accurate prediction of object merge result.",
            "Knowledge of spread operator precedence."
          ],
          "example": "When merging objects with the spread operator, if there are duplicate keys (like `b` in this case), the value from the *last* object spread will overwrite previous values. So, `b: 3` from `obj2` overwrites `b: 2` from `obj1`.",
          "tags": [
            "JavaScript",
            "ES6",
            "Spread Operator",
            "Object Manipulation"
          ],
          "prerequisites": [
            "JavaScript objects"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_spread_operator_3",
          "topic": "Spread Operator",
          "level": "medium",
          "type": "open",
          "question": "Explain what a 'shallow copy' means in the context of the spread operator when copying arrays or objects. Provide a short code example to illustrate its implication.",
          "answer": "A 'shallow copy' created by the spread operator means that a new top-level array or object is created, but if the original array/object contains nested objects or arrays, those nested structures are *not* copied. Instead, the new array/object will contain *references* to the same nested objects/arrays as the original. This implies that if you modify a nested object/array in the shallow copy, the original object/array will also be affected because they both point to the same memory location for that nested structure.\n\n**Code Example:**\n\n```javascript\nconst originalUser = {\n  id: 1,\n  name: 'Alice',\n  address: { street: '123 Main St', city: 'Anytown' },\n  hobbies: ['reading', 'hiking']\n};\n\n// Create a shallow copy\nconst shallowCopyUser = { ...originalUser };\n\n// Modify a top-level property - this works as expected\nshallowCopyUser.name = 'Bob';\nconsole.log(originalUser.name); // Output: 'Alice' (original is unchanged)\n\n// Modify a nested object property - this AFFECTS THE ORIGINAL\nshallowCopyUser.address.city = 'Newcity';\nconsole.log(originalUser.address.city); // Output: 'Newcity' (Original also changed!)\n\n// Modify a nested array property - this AFFECTS THE ORIGINAL\nshallowCopyUser.hobbies.push('coding');\nconsole.log(originalUser.hobbies); // Output: ['reading', 'hiking', 'coding'] (Original also changed!)\n\nconsole.log(originalUser === shallowCopyUser); // false (different top-level objects)\nconsole.log(originalUser.address === shallowCopyUser.address); // true (same nested object reference)\n```\n\nThe example shows that while `shallowCopyUser` is a new object at the top level, its `address` and `hobbies` properties still refer to the *exact same objects/arrays* as `originalUser`'s `address` and `hobbies`. Therefore, changes to these nested references in the shallow copy propagate to the original.",
          "analysisPoints": [
            "Clear definition of shallow copy.",
            "Explanation of how nested references behave.",
            "Demonstration with a practical code example.",
            "Ability to differentiate from deep copy implications."
          ],
          "keyConcepts": [
            "Shallow copy",
            "Deep copy",
            "Object references",
            "Immutability",
            "Nested objects/arrays"
          ],
          "evaluationCriteria": [
            "Accurate technical explanation.",
            "Effective and illustrative code example.",
            "Understanding of memory management implications."
          ],
          "example": null,
          "tags": [
            "JavaScript",
            "ES6",
            "Spread Operator",
            "Shallow Copy",
            "Immutability",
            "Memory Management"
          ],
          "prerequisites": [
            "JavaScript objects and arrays",
            "References vs. values"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_spread_operator_4",
          "topic": "Spread Operator",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following is a common use case for the spread operator (`...`) in React development?",
          "answer": "Passing all properties from `props` object to a child component.",
          "options": [
            "Directly mutating component state objects.",
            "Creating a deep clone of a complex state object.",
            "Performing asynchronous operations within a functional component.",
            "Passing all properties from `props` object to a child component."
          ],
          "analysisPoints": [
            "Identifying correct and incorrect applications of the spread operator in React context.",
            "Understanding immutability principles in React state updates."
          ],
          "keyConcepts": [
            "React props",
            "Object spread",
            "Immutability",
            "Deep vs. shallow copy"
          ],
          "evaluationCriteria": [
            "Correctly identifying a relevant React use case.",
            "Distinguishing valid from invalid uses related to React patterns."
          ],
          "example": "The spread operator is commonly used as `<ChildComponent {...this.props} />` (or `<ChildComponent {...props} />` in functional components) to pass all parent's props to a child. It is used for *immutable* updates, not direct mutation, and it performs a *shallow* copy, not a deep clone.",
          "tags": [
            "React",
            "Spread Operator",
            "Props",
            "Best Practices"
          ],
          "prerequisites": [
            "React props"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_spread_operator_5",
          "topic": "Spread Operator",
          "level": "medium",
          "type": "code",
          "question": "Write a JavaScript function `updateConfig` that takes an existing `config` object and an `updates` object. The function should return a *new* configuration object that is a shallow merge of the `config` and `updates`, with properties in `updates` overriding those in `config`.\n\nExample:\n`updateConfig({ theme: 'dark', font: 'Arial' }, { font: 'Roboto', notifications: true })` should return `{ theme: 'dark', font: 'Roboto', notifications: true }`",
          "answer": "```javascript\nfunction updateConfig(config, updates) {\n  return { ...config, ...updates };\n}\n\n// Test Cases:\nconsole.log(updateConfig({ theme: 'dark', font: 'Arial' }, { font: 'Roboto', notifications: true }));\n// Expected: { theme: 'dark', font: 'Roboto', notifications: true }\n\nconsole.log(updateConfig({ name: 'App', version: '1.0' }, { version: '2.0', author: 'Dev' }));\n// Expected: { name: 'App', version: '2.0', author: 'Dev' }\n\nconsole.log(updateConfig({ data: { a: 1 } }, { data: { b: 2 } }));\n// Expected: { data: { b: 2 } } (demonstrates shallow merge for nested objects)\n\nconsole.log(updateConfig({}, { initial: true }));\n// Expected: { initial: true }\n```",
          "analysisPoints": [
            "Correct application of object spread syntax for merging.",
            "Understanding the order of spread for property overriding.",
            "Returning a new object (immutability)."
          ],
          "keyConcepts": [
            "Object spread",
            "Object merging",
            "Immutability",
            "Function parameters"
          ],
          "evaluationCriteria": [
            "Correctness of the merging logic.",
            "Adherence to immutability.",
            "Conciseness and effectiveness of solution."
          ],
          "example": null,
          "tags": [
            "JavaScript",
            "ES6",
            "Spread Operator",
            "Object Manipulation",
            "Coding Challenge"
          ],
          "prerequisites": [
            "JavaScript objects"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_spread_operator_6",
          "topic": "Spread Operator",
          "level": "easy",
          "type": "mcq",
          "question": "What is the primary difference between the spread operator (`...`) when used in an array literal (e.g., `[...arr1, ...arr2]`) versus when used in function parameters (e.g., `function foo(...args)`)?",
          "answer": "In array literals, it 'spreads' elements; in function parameters, it 'collects' them (rest parameter).",
          "options": [
            "One creates a deep copy, the other a shallow copy.",
            "One is for arrays, the other is for objects.",
            "In array literals, it 'spreads' elements; in function parameters, it 'collects' them (rest parameter).",
            "There is no difference; they are interchangeable."
          ],
          "analysisPoints": [
            "Distinguishing between 'spread' (unpacking) and 'rest' (collecting) usage of the `...` syntax.",
            "Understanding context-dependent meaning of the same syntax."
          ],
          "keyConcepts": [
            "Spread syntax",
            "Rest parameters",
            "Array literals",
            "Function parameters"
          ],
          "evaluationCriteria": [
            "Accurate differentiation of spread vs. rest.",
            "Understanding of contextual usage."
          ],
          "example": "While both use `...`, their roles are opposite based on context. In `[...arr]`, it spreads `arr`'s elements into the new array. In `function foo(...args)`, it collects all remaining arguments into an array named `args`. This is a common point of confusion due to the identical syntax.",
          "tags": [
            "JavaScript",
            "ES6",
            "Spread Operator",
            "Rest Parameters",
            "Syntax"
          ],
          "prerequisites": [
            "ES6 functions",
            "Arrays"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_spread_operator_7",
          "topic": "Spread Operator",
          "level": "hard",
          "type": "code",
          "question": "Implement a JavaScript function `deepMerge` that performs a deep merge of two objects. Unlike the shallow merge of the spread operator, `deepMerge` should recursively merge nested objects. If a key exists in both objects and its value is an object, that nested object should also be merged. For non-object values, `obj2`'s value should override `obj1`'s.\n\nConsider simple objects without arrays or functions for this task.\n\nExample:\n`deepMerge({ a: 1, b: { c: 2 } }, { b: { d: 3 }, e: 4 })` should return `{ a: 1, b: { c: 2, d: 3 }, e: 4 }`",
          "answer": "```javascript\nfunction deepMerge(obj1, obj2) {\n  const result = { ...obj1 }; // Start with a shallow copy of obj1\n\n  for (const key in obj2) {\n    if (Object.prototype.hasOwnProperty.call(obj2, key)) {\n      if (typeof result[key] === 'object' && result[key] !== null &&\n          typeof obj2[key] === 'object' && obj2[key] !== null &&\n          !Array.isArray(result[key]) && !Array.isArray(obj2[key])) {\n        // If both values are non-null objects and not arrays, deep merge them\n        result[key] = deepMerge(result[key], obj2[key]);\n      } else {\n        // Otherwise, obj2's value overrides obj1's\n        result[key] = obj2[key];\n      }\n    }\n  }\n\n  return result;\n}\n\n// Test Cases:\nconsole.log(deepMerge({ a: 1, b: { c: 2 } }, { b: { d: 3 }, e: 4 }));\n// Expected: { a: 1, b: { c: 2, d: 3 }, e: 4 }\n\nconsole.log(deepMerge({ user: { name: 'Alice', age: 30 } }, { user: { age: 31, city: 'NY' }, status: 'active' }));\n// Expected: { user: { name: 'Alice', age: 31, city: 'NY' }, status: 'active' }\n\nconsole.log(deepMerge({ config: { level: 1 } }, { config: { level: 2, enabled: true }, data: 10 }));\n// Expected: { config: { level: 2, enabled: true }, data: 10 }\n\nconsole.log(deepMerge({ a: { b: { c: 1 } } }, { a: { b: { d: 2 } } }));\n// Expected: { a: { b: { c: 1, d: 2 } } }\n\nconsole.log(deepMerge({ a: 1 }, { a: { b: 2 } }));\n// Expected: { a: { b: 2 } } (obj2's object overrides obj1's primitive)\n\nconsole.log(deepMerge({ a: { b: 2 } }, { a: 1 }));\n// Expected: { a: 1 } (obj2's primitive overrides obj1's object)\n```",
          "analysisPoints": [
            "Ability to implement a recursive function for deep merging.",
            "Correctly handling different data types (objects vs. primitives).",
            "Ensuring immutability at each level of recursion by creating new objects.",
            "Proper use of `typeof` and `hasOwnProperty`.",
            "Edge case handling for `null` and arrays (as per prompt, not strictly required but good to exclude from recursion)."
          ],
          "keyConcepts": [
            "Deep merge",
            "Recursion",
            "Object iteration (`for...in`)",
            "Immutability",
            "Type checking",
            "Object property checking"
          ],
          "evaluationCriteria": [
            "Correct recursive logic.",
            "Adherence to immutability.",
            "Robustness in handling various property types.",
            "Efficiency and clarity of the code."
          ],
          "example": null,
          "tags": [
            "JavaScript",
            "Object Manipulation",
            "Recursion",
            "Deep Copy",
            "Algorithm",
            "Coding Challenge"
          ],
          "prerequisites": [
            "JavaScript objects",
            "Functions",
            "Recursion basics"
          ],
          "complexity": 9,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_events_1",
          "topic": "React Events (SyntheticEvent)",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the name of React's wrapper around native browser events?",
          "answer": "`SyntheticEvent`",
          "analysisPoints": [
            "Recalling the specific term for React's event system."
          ],
          "keyConcepts": [
            "SyntheticEvent",
            "React events"
          ],
          "evaluationCriteria": [
            "Memory recall of core React concepts."
          ],
          "example": null,
          "tags": [
            "React",
            "Events",
            "SyntheticEvent"
          ],
          "prerequisites": [
            "React basics"
          ],
          "complexity": 2,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_events_2",
          "topic": "React Events (SyntheticEvent)",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following is a primary benefit of React's `SyntheticEvent` system?",
          "answer": "It provides cross-browser consistency for event properties and behavior.",
          "options": [
            "It allows direct manipulation of the native DOM event object for better performance.",
            "It automatically prevents all default browser behaviors for every event.",
            "It provides cross-browser consistency for event properties and behavior.",
            "It completely replaces browser event delegation with its own custom system."
          ],
          "analysisPoints": [
            "Understanding the core problem `SyntheticEvent` solves (cross-browser compatibility).",
            "Distinguishing benefits from misconceptions about the system."
          ],
          "keyConcepts": [
            "SyntheticEvent",
            "Cross-browser compatibility",
            "Event normalization",
            "Event delegation"
          ],
          "evaluationCriteria": [
            "Correct identification of `SyntheticEvent`'s purpose.",
            "Ability to differentiate correct from incorrect statements."
          ],
          "example": "The primary benefit of `SyntheticEvent` is to normalize event behavior and properties across different browsers, so developers don't have to worry about browser-specific quirks. It doesn't prevent all default behaviors (you still need `preventDefault()`), and while it *uses* event delegation, it doesn't completely replace the browser's underlying system.",
          "tags": [
            "React",
            "Events",
            "SyntheticEvent",
            "Browser Compatibility"
          ],
          "prerequisites": [
            "DOM Events"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_events_3",
          "topic": "React Events (SyntheticEvent)",
          "level": "medium",
          "type": "open",
          "question": "Describe two key differences between handling events in plain HTML/JavaScript versus React's `SyntheticEvent` system. How do these differences impact a frontend developer's work?",
          "answer": "Here are two key differences between plain HTML/JavaScript event handling and React's `SyntheticEvent` system:\n\n1.  **Cross-Browser Consistency (Normalization):**\n    *   **Plain JS:** Native DOM events can have inconsistencies across different browsers (e.g., `event.keyCode` vs. `event.which`, different ways to access `target` or `srcElement`). Developers often need to write conditional code or use polyfills to ensure cross-browser compatibility.\n    *   **React:** `SyntheticEvent` normalizes event properties and behavior across all supported browsers. The `SyntheticEvent` object provides a consistent API, meaning `event.target`, `event.preventDefault()`, `event.stopPropagation()` behave the same regardless of the underlying browser. This greatly simplifies development and reduces debugging time related to browser quirks.\n    *   **Impact:** Developers can write event handling logic once, confident it will work uniformly. It abstracts away browser-specific event implementation details, allowing focus on application logic.\n\n2.  **Event Delegation and Attachment:**\n    *   **Plain JS:** When you attach an event listener (e.g., `element.addEventListener('click', handler)`), a new listener is typically attached directly to that specific DOM element. For a list of many items, this could mean hundreds or thousands of individual listeners, which can be inefficient.\n    *   **React:** React implements its own event delegation system. Instead of attaching a listener to every single DOM element, React attaches a single event listener to the document root (or the container where your React app is mounted). When an event occurs, it bubbles up to this root listener, and React then dispatches it to the appropriate React component's event handler based on its internal virtual DOM representation.\n    *   **Impact:** This delegation significantly improves performance, especially in applications with many interactive elements, by reducing memory consumption and improving startup time. It also means that event handlers are managed by React's efficient reconciliation process, reducing the need for manual DOM manipulation.",
          "analysisPoints": [
            "Clear articulation of normalization and consistency.",
            "Detailed explanation of event delegation and its performance implications.",
            "Comparison of developer experience with both approaches.",
            "Demonstration of understanding the underlying mechanisms."
          ],
          "keyConcepts": [
            "SyntheticEvent",
            "Cross-browser compatibility",
            "Event normalization",
            "Event delegation",
            "Performance optimization",
            "DOM events"
          ],
          "evaluationCriteria": [
            "Accuracy and depth of technical explanation.",
            "Clarity in contrasting the two approaches.",
            "Ability to explain practical impact on development.",
            "Comprehensive understanding of event systems."
          ],
          "example": null,
          "tags": [
            "React",
            "Events",
            "SyntheticEvent",
            "DOM Events",
            "Performance",
            "Architecture"
          ],
          "prerequisites": [
            "JavaScript events",
            "DOM manipulation"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_events_4",
          "topic": "React Events (SyntheticEvent)",
          "level": "easy",
          "type": "mcq",
          "question": "In React, what happens if you call `event.preventDefault()` on a `SyntheticEvent` object within an event handler?",
          "answer": "It prevents the default browser action associated with the event (e.g., a form submission).",
          "options": [
            "It stops the event from bubbling up the DOM tree.",
            "It prevents the default browser action associated with the event (e.g., a form submission).",
            "It persists the `SyntheticEvent` object so its properties can be accessed asynchronously.",
            "It reloads the page to clear the event state."
          ],
          "analysisPoints": [
            "Understanding the specific functionality of `preventDefault()`.",
            "Distinguishing `preventDefault()` from `stopPropagation()` and `persist()`."
          ],
          "keyConcepts": [
            "SyntheticEvent methods",
            "preventDefault()",
            "Default browser actions"
          ],
          "evaluationCriteria": [
            "Correct identification of method behavior.",
            "Clear understanding of event control."
          ],
          "example": "The `event.preventDefault()` method on a `SyntheticEvent` (just like its native counterpart) prevents the browser's default behavior for that event, such as preventing a form from submitting and reloading the page, or preventing a link from navigating. `stopPropagation()` stops bubbling, and `persist()` (now largely unnecessary in React 17+) was for asynchronous access.",
          "tags": [
            "React",
            "Events",
            "SyntheticEvent",
            "preventDefault"
          ],
          "prerequisites": [
            "DOM Events"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_events_5",
          "topic": "React Events (SyntheticEvent)",
          "level": "medium",
          "type": "code",
          "question": "Implement a React functional component `Tooltip` that shows a tooltip when a `div` element is hovered over and hides it when the mouse leaves. Use `onMouseEnter` and `onMouseLeave` event handlers.\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Tooltip({ text, children }) {\n  // Implement logic here\n  return (\n    <div /* Add event handlers here */ style={{ position: 'relative', display: 'inline-block' }}>\n      {children}\n      {/* Tooltip content to be rendered conditionally */}\n    </div>\n  );\n}\n\n// Example Usage:\n// <Tooltip text=\"This is a helpful tip!\">\n//   <span>Hover over me</span>\n// </Tooltip>\n```",
          "answer": "```jsx\nimport React, { useState } from 'react';\n\nfunction Tooltip({ text, children }) {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleMouseEnter = () => {\n    setShowTooltip(true);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <div\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      style={{ position: 'relative', display: 'inline-block', border: '1px solid #ccc', padding: '5px', margin: '10px' }}\n    >\n      {children}\n      {showTooltip && (\n        <div\n          style={{\n            position: 'absolute',\n            top: 'calc(100% + 5px)',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            backgroundColor: '#333',\n            color: 'white',\n            padding: '8px',\n            borderRadius: '4px',\n            whiteSpace: 'nowrap',\n            zIndex: 1000\n          }}\n        >\n          {text}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Example Usage:\nfunction App() {\n  return (\n    <div>\n      <Tooltip text=\"This is a helpful tip!\">\n        <span>Hover over me (simple)</span>\n      </Tooltip>\n      <br />\n      <Tooltip text=\"Another tip for this button.\">\n        <button>Hover Button</button>\n      </Tooltip>\n    </div>\n  );\n}\n```",
          "analysisPoints": [
            "Correct usage of `useState` to manage tooltip visibility.",
            "Implementing `onMouseEnter` and `onMouseLeave` event handlers.",
            "Conditional rendering of the tooltip based on state.",
            "Basic CSS for tooltip positioning and styling."
          ],
          "keyConcepts": [
            "React events",
            "onMouseEnter",
            "onMouseLeave",
            "useState",
            "Conditional rendering",
            "Functional components"
          ],
          "evaluationCriteria": [
            "Correct event handler implementation.",
            "Proper state management for UI visibility.",
            "Functional tooltip display and hide.",
            "Clean and readable code."
          ],
          "example": null,
          "tags": [
            "React",
            "Events",
            "useState",
            "UI Component",
            "Coding Challenge"
          ],
          "prerequisites": [
            "React functional components",
            "useState"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_events_6",
          "topic": "React Events (SyntheticEvent)",
          "level": "hard",
          "type": "open",
          "question": "React 17 removed event pooling for `SyntheticEvent` objects. Explain what event pooling was, why it was used, and why React decided to remove it. What implications does this have for developers when working with `SyntheticEvent` objects asynchronously (e.g., inside `setTimeout` or `async/await`)?",
          "answer": "**What was Event Pooling?**\nBefore React 17, `SyntheticEvent` objects were pooled. This meant that React would reuse event objects for performance. After an event callback was invoked, the properties of the `SyntheticEvent` object were nullified or reset to allow the object to be recycled for the next event. This was an optimization to reduce garbage collection overhead.\n\n**Why was it used?**\nIt was used to improve performance by reducing the number of new `SyntheticEvent` objects created and subsequently garbage collected. By reusing objects, memory allocation and deallocation overhead could be minimized, leading to smoother UI performance, especially in high-frequency event scenarios.\n\n**Why was it removed?**\nReact removed event pooling in React 17 primarily because it caused more confusion and bugs for developers than the performance benefits it provided. Developers often forgot that `SyntheticEvent` properties were nullified after the event handler completed. This meant that if you tried to access `event.target` or `event.currentTarget` asynchronously (e.g., inside a `setTimeout` callback, `async/await` blocks, or after a promise resolved), the properties would be `null`, leading to hard-to-debug errors. The performance gains were also becoming less significant with modern JavaScript engines and garbage collectors.\n\n**Implications for Developers:**\n1.  **No more `event.persist()`:** Developers no longer need to call `event.persist()` when they want to access `SyntheticEvent` properties asynchronously. The `SyntheticEvent` object and its properties will remain valid even after the event handler finishes executing.\n2.  **Simplified Asynchronous Event Handling:** Code involving `setTimeout`, `requestAnimationFrame`, `async/await`, or `Promise.then()` that needs to access event properties is now much simpler and less error-prone. You can just use the `event` object directly.\n    ```javascript\n    // Before React 17 (needed persist() for async access)\n    const handleClickOld = (event) => {\n      // event.persist(); // Necessary!\n      setTimeout(() => {\n        console.log(event.target.value); // Might be null without persist\n      }, 0);\n    };\n\n    // React 17+ (no persist() needed)\n    const handleClickNew = (event) => {\n      setTimeout(() => {\n        console.log(event.target.value); // Works directly\n      }, 0);\n    };\n    ```\n3.  **Slightly Increased Memory Usage (Potentially):** While the primary goal of pooling was performance, modern JavaScript engines are very good at garbage collection. The increased memory overhead from not pooling is generally negligible for most applications and is a worthy trade-off for improved developer experience and reduced bugs.",
          "analysisPoints": [
            "Definition of event pooling.",
            "Explanation of its original purpose (performance).",
            "Detailed reasons for its removal (developer confusion, nullified properties, modern JS engines).",
            "Clear explanation of implications for asynchronous event access.",
            "Demonstration with `event.persist()` context."
          ],
          "keyConcepts": [
            "SyntheticEvent",
            "Event pooling",
            "Performance optimization",
            "Asynchronous JavaScript",
            "event.persist()",
            "React 17 changes"
          ],
          "evaluationCriteria": [
            "Comprehensive and accurate historical context.",
            "Clear explanation of technical rationale.",
            "Precise description of practical implications for coding.",
            "Demonstration of deep understanding of React's event system evolution."
          ],
          "example": null,
          "tags": [
            "React",
            "Events",
            "SyntheticEvent",
            "React 17",
            "Performance",
            "Asynchronous JavaScript"
          ],
          "prerequisites": [
            "React Events",
            "JavaScript asynchronous concepts"
          ],
          "complexity": 8,
          "interviewFrequency": 6,
          "learningPath": "expert"
        }
      ],
      "tasks": [
        {
          "id": "task_https_setup_1",
          "title": "Configure React App for HTTPS and Verify",
          "description": "\nYour task is to configure a new or existing Create React App project to run its development server over HTTPS. After configuration, you must verify that the application is indeed serving on `https://localhost:3000` (or your configured port).\n\n**Requirements:**\n1.  Initialize a new Create React App project if you don't have one.\n2.  Modify the `package.json` file to enable HTTPS by default when running `npm start`.\n3.  Start the development server.\n4.  Confirm in your browser that the application is loaded via HTTPS. You might see a privacy warning due to the self-signed certificate; this is expected.\n5.  (Optional but recommended for cross-platform understanding): Demonstrate how to achieve the same result using a command-line argument for both Windows and macOS/Linux.\n",
          "difficulty": "easy",
          "startingCode": "{\n  \"name\": \"my-react-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n",
          "solutionCode": "{\n  \"name\": \"my-react-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"set HTTPS=true && react-scripts start\", // For Windows\n    // Or for cross-platform (using cross-env, which needs to be installed: npm install --save-dev cross-env)\n    // \"start\": \"cross-env HTTPS=true react-scripts start\", \n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n\n// Command Line Verification:\n// For Windows:\n// set HTTPS=true && npm start\n// Expected: Browser opens https://localhost:3000\n\n// For macOS/Linux:\n// HTTPS=true npm start\n// Expected: Browser opens https://localhost:3000\n",
          "testCases": [
            "Open `package.json` and verify `start` script contains `set HTTPS=true &&` or `cross-env HTTPS=true`.",
            "Run `npm start` in the terminal.",
            "Observe the terminal output for messages indicating HTTPS is enabled (e.g., 'Compiled successfully!', 'You can now view ... in the browser. Local: https://localhost:3000').",
            "Open a browser and navigate to `https://localhost:3000` (or the indicated port).",
            "Verify that the URL starts with `https://` and the browser displays a secure connection (even if with a certificate warning).",
            "If `cross-env` is used, verify it works on both Windows and Linux/macOS."
          ],
          "hints": [
            "Remember that `set` is for Windows Command Prompt. For Bash/Zsh (macOS/Linux), you'd use `HTTPS=true` directly before the command.",
            "If you want a truly cross-platform solution directly in `package.json` without conditional scripts, consider installing the `cross-env` package (`npm install --save-dev cross-env`).",
            "After modifying `package.json`, save the file and restart your `npm start` process."
          ],
          "tags": [
            "React",
            "HTTPS",
            "Development Setup",
            "CLI",
            "Environment Variables"
          ],
          "timeEstimate": 20,
          "prerequisites": [
            "Node.js",
            "npm",
            "Create React App"
          ],
          "complexity": 3,
          "interviewRelevance": 5,
          "learningPath": "beginner",
          "relatedConcepts": [
            "theory_https_setup"
          ]
        },
        {
          "id": "task_use_reducer_1",
          "title": "Build a Simple Shopping Cart with useReducer",
          "description": "\nYour task is to implement a basic shopping cart functionality using the `useReducer` hook in a React functional component. The cart should allow adding items, removing items, and updating item quantities.\n\n**Requirements:**\n1.  Define an `initialState` for the shopping cart. It should contain an array of `items`, where each `item` object has an `id` (unique number), `name` (string), `price` (number), and `quantity` (number).\n2.  Create a `cartReducer` function that handles the following actions:\n    *   `ADD_ITEM`: Payload: `{ id, name, price }`. If the item already exists in the cart, increment its quantity. Otherwise, add the new item with quantity `1`.\n    *   `REMOVE_ITEM`: Payload: `{ id }`. Removes the item completely from the cart.\n    *   `UPDATE_QUANTITY`: Payload: `{ id, quantity }`. Updates the quantity of an existing item. If `quantity` is 0 or less, remove the item.\n    *   `CLEAR_CART`: No payload. Empties the cart.\n3.  Create a React component (`ShoppingCart`) that uses this `cartReducer`.\n4.  Display the items in the cart, including their name, price, quantity, and subtotal per item. Also display the total price of all items in the cart.\n5.  Provide buttons/inputs to trigger `dispatch` calls for adding, removing, and updating quantities of example items, and clearing the cart.\n\nEnsure all state updates in the reducer are immutable.",
          "difficulty": "medium",
          "startingCode": "import React, { useReducer } from 'react';\n\n// 1. Define initialState\nconst initialCartState = {\n  items: [],\n  totalPrice: 0,\n};\n\n// 2. Define cartReducer function\nfunction cartReducer(state, action) {\n  switch (action.type) {\n    // TODO: Implement ADD_ITEM\n    // TODO: Implement REMOVE_ITEM\n    // TODO: Implement UPDATE_QUANTITY\n    // TODO: Implement CLEAR_CART\n    default:\n      throw new Error(`Unsupported action type: ${action.type}`);\n  }\n}\n\nfunction calculateTotalPrice(items) {\n  return items.reduce((acc, item) => acc + (item.price * item.quantity), 0);\n}\n\nfunction ShoppingCart() {\n  const [cartState, dispatch] = useReducer(cartReducer, initialCartState);\n\n  // Example products for adding\n  const products = [\n    { id: 1, name: 'Laptop', price: 1200 },\n    { id: 2, name: 'Mouse', price: 25 },\n    { id: 3, name: 'Keyboard', price: 75 }\n  ];\n\n  return (\n    <div>\n      <h1>Shopping Cart</h1>\n\n      <h2>Products to Add</h2>\n      {products.map(product => (\n        <div key={product.id} style={{ display: 'flex', gap: '10px', marginBottom: '5px' }}>\n          <span>{product.name} - ${product.price}</span>\n          <button onClick={() => dispatch({ type: 'ADD_ITEM', payload: product })}>Add to Cart</button>\n        </div>\n      ))}\n      <hr />\n\n      <h2>Your Cart</h2>\n      {cartState.items.length === 0 ? (\n        <p>Your cart is empty.</p>\n      ) : (\n        <>\n          <ul>\n            {cartState.items.map(item => (\n              <li key={item.id} style={{ marginBottom: '10px' }}>\n                {item.name} (${item.price}) x {item.quantity} = ${(item.price * item.quantity).toFixed(2)}\n                <button onClick={() => dispatch({ type: 'UPDATE_QUANTITY', payload: { id: item.id, quantity: item.quantity + 1 } })}> + </button>\n                <button onClick={() => dispatch({ type: 'UPDATE_QUANTITY', payload: { id: item.id, quantity: item.quantity - 1 } })}> - </button>\n                <button onClick={() => dispatch({ type: 'REMOVE_ITEM', payload: { id: item.id } })}>Remove</button>\n              </li>\n            ))}\n          </ul>\n          <h3>Total: ${cartState.totalPrice.toFixed(2)}</h3>\n          <button onClick={() => dispatch({ type: 'CLEAR_CART' })}>Clear Cart</button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default ShoppingCart;\n",
          "solutionCode": "import React, { useReducer } from 'react';\n\nconst initialCartState = {\n  items: [],\n  totalPrice: 0,\n};\n\nfunction calculateTotalPrice(items) {\n  return items.reduce((acc, item) => acc + (item.price * item.quantity), 0);\n}\n\nfunction cartReducer(state, action) {\n  let updatedItems;\n  switch (action.type) {\n    case 'ADD_ITEM':\n      const existingItemIndex = state.items.findIndex(item => item.id === action.payload.id);\n      if (existingItemIndex > -1) {\n        updatedItems = state.items.map((item, index) =>\n          index === existingItemIndex\n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        );\n      } else {\n        updatedItems = [...state.items, { ...action.payload, quantity: 1 }];\n      }\n      return { ...state, items: updatedItems, totalPrice: calculateTotalPrice(updatedItems) };\n\n    case 'REMOVE_ITEM':\n      updatedItems = state.items.filter(item => item.id !== action.payload.id);\n      return { ...state, items: updatedItems, totalPrice: calculateTotalPrice(updatedItems) };\n\n    case 'UPDATE_QUANTITY':\n      updatedItems = state.items.map(item =>\n        item.id === action.payload.id\n          ? { ...item, quantity: action.payload.quantity }\n          : item\n      ).filter(item => item.quantity > 0); // Remove if quantity becomes 0 or less\n      return { ...state, items: updatedItems, totalPrice: calculateTotalPrice(updatedItems) };\n\n    case 'CLEAR_CART':\n      return { ...initialCartState }; // Reset to initial empty state\n\n    default:\n      throw new Error(`Unsupported action type: ${action.type}`);\n  }\n}\n\nfunction ShoppingCart() {\n  const [cartState, dispatch] = useReducer(cartReducer, initialCartState);\n\n  const products = [\n    { id: 1, name: 'Laptop', price: 1200 },\n    { id: 2, name: 'Mouse', price: 25 },\n    { id: 3, name: 'Keyboard', price: 75 }\n  ];\n\n  return (\n    <div style={{ fontFamily: 'Arial, sans-serif', maxWidth: '800px', margin: '20px auto', padding: '20px', border: '1px solid #eee', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>\n      <h1 style={{ textAlign: 'center', color: '#333' }}>Shopping Cart</h1>\n\n      <h2 style={{ borderBottom: '1px solid #eee', paddingBottom: '10px', marginBottom: '15px', color: '#555' }}>Products to Add</h2>\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))', gap: '15px', marginBottom: '20px' }}>\n        {products.map(product => (\n          <div key={product.id} style={{ border: '1px solid #ddd', borderRadius: '4px', padding: '10px', display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '8px' }}>\n            <span style={{ fontWeight: 'bold' }}>{product.name}</span>\n            <span>${product.price.toFixed(2)}</span>\n            <button\n              onClick={() => dispatch({ type: 'ADD_ITEM', payload: product })}\n              style={{ padding: '8px 15px', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}\n            >\n              Add to Cart\n            </button>\n          </div>\n        ))}\n      </div>\n      \n      <h2 style={{ borderBottom: '1px solid #eee', paddingBottom: '10px', marginBottom: '15px', color: '#555' }}>Your Cart ({cartState.items.length} items)</h2>\n      {cartState.items.length === 0 ? (\n        <p style={{ textAlign: 'center', color: '#888' }}>Your cart is empty.</p>\n      ) : (\n        <>\n          <ul style={{ listStyle: 'none', padding: 0 }}>\n            {cartState.items.map(item => (\n              <li key={item.id} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', borderBottom: '1px dashed #eee', padding: '10px 0' }}>\n                <span style={{ flex: 2, fontWeight: 'bold' }}>{item.name}</span>\n                <span style={{ flex: 1 }}>${item.price.toFixed(2)}</span>\n                <span style={{ flex: 1, textAlign: 'center' }}>Qty: {item.quantity}</span>\n                <span style={{ flex: 1, textAlign: 'right', fontWeight: 'bold' }}>${(item.price * item.quantity).toFixed(2)}</span>\n                <div style={{ flex: 1, display: 'flex', justifyContent: 'flex-end', gap: '5px' }}>\n                  <button \n                    onClick={() => dispatch({ type: 'UPDATE_QUANTITY', payload: { id: item.id, quantity: item.quantity + 1 } })}\n                    style={{ padding: '5px 10px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}\n                  > + </button>\n                  <button \n                    onClick={() => dispatch({ type: 'UPDATE_QUANTITY', payload: { id: item.id, quantity: item.quantity - 1 } })}\n                    style={{ padding: '5px 10px', backgroundColor: '#ffc107', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}\n                  > - </button>\n                  <button \n                    onClick={() => dispatch({ type: 'REMOVE_ITEM', payload: { id: item.id } })}\n                    style={{ padding: '5px 10px', backgroundColor: '#dc3545', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}\n                  >Remove</button>\n                </div>\n              </li>\n            ))}\n          </ul>\n          <h3 style={{ textAlign: 'right', marginTop: '20px', color: '#333' }}>Cart Total: <span style={{ color: '#28a745' }}>${cartState.totalPrice.toFixed(2)}</span></h3>\n          <div style={{ textAlign: 'center', marginTop: '20px' }}>\n            <button \n              onClick={() => dispatch({ type: 'CLEAR_CART' })}\n              style={{ padding: '10px 20px', backgroundColor: '#6c757d', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}\n            >Clear Cart</button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default ShoppingCart;\n",
          "testCases": [
            "**Add Item:** Add 'Laptop'. Verify cart shows 1 Laptop, total 1200. Add 'Laptop' again. Verify quantity becomes 2, total 2400. Add 'Mouse'. Verify Laptop (2) and Mouse (1) are present, total updated.",
            "**Update Quantity:** Change 'Laptop' quantity from 2 to 1. Verify quantity changes, total updates. Change 'Mouse' quantity to 0. Verify 'Mouse' is removed.",
            "**Remove Item:** Remove 'Laptop'. Verify 'Laptop' is gone, total updated.",
            "**Clear Cart:** Click 'Clear Cart'. Verify cart is empty and total is 0.",
            "**Immutability:** After each action, ensure that the `state.items` array and individual `item` objects (if modified) are new references, not mutations of the previous state.",
            "**Edge Case: Negative Quantity:** Try to update quantity to a negative number. Ensure it gets removed (as per `quantity <= 0` rule)."
          ],
          "hints": [
            "Remember to use `map` for updating items and `filter` for removing items to ensure immutability.",
            "When an item's quantity is updated, if it reaches 0 or less, you should filter it out of the `items` array.",
            "The `calculateTotalPrice` helper function should be called after any item manipulation to keep `totalPrice` updated.",
            "The `ADD_ITEM` logic needs to check if the item already exists in the cart to either increment quantity or add a new item."
          ],
          "tags": [
            "React",
            "useReducer",
            "State Management",
            "Shopping Cart",
            "Immutability",
            "Functional Component",
            "Coding Challenge"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "React Hooks",
            "JavaScript Array methods (`map`, `filter`, `findIndex`)",
            "Object destructuring"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_use_reducer",
            "theory_spread_operator"
          ]
        },
        {
          "id": "task_use_reducer_2",
          "title": "Build a Stopwatch with useReducer and side effects (useEffect)",
          "description": "\nImplement a stopwatch component using `useReducer` to manage its state and `useEffect` to handle side effects like timers.\n\n**Requirements:**\n1.  Define an `initialState` for the stopwatch, including `isRunning` (boolean), `time` (number, in milliseconds), and `lapTimes` (array of numbers).\n2.  Create a `stopwatchReducer` function that handles the following actions:\n    *   `START`: Sets `isRunning` to `true`.\n    *   `STOP`: Sets `isRunning` to `false`.\n    *   `RESET`: Sets `isRunning` to `false`, `time` to `0`, and `lapTimes` to an empty array.\n    *   `TICK`: Increments `time` by a small interval (e.g., 10ms or 100ms).\n    *   `LAP`: Adds the current `time` to the `lapTimes` array.\n3.  Create a `Stopwatch` React component that uses `stopwatchReducer`.\n4.  Use `useEffect` to manage the timer. When `isRunning` is true, an interval should be set to dispatch `TICK` actions. The interval should be cleared when `isRunning` becomes false or the component unmounts.\n5.  Display the current time, and a list of recorded lap times. Format time nicely (e.g., MM:SS:ms).\n6.  Provide buttons for Start, Stop, Reset, and Lap.\n\nEnsure all state updates in the reducer are immutable.",
          "difficulty": "hard",
          "startingCode": "import React, { useReducer, useEffect, useRef } from 'react';\n\n// 1. Define initialState\nconst initialStopwatchState = {\n  // TODO: Add isRunning, time, lapTimes\n};\n\n// Helper to format time (optional, but good practice)\nfunction formatTime(milliseconds) {\n  const minutes = Math.floor(milliseconds / 60000);\n  const seconds = Math.floor((milliseconds % 60000) / 1000);\n  const ms = Math.floor((milliseconds % 1000) / 10);\n  return `${\n    minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}.${ms.toString().padStart(2, '0')}`;\n}\n\n// 2. Define stopwatchReducer function\nfunction stopwatchReducer(state, action) {\n  switch (action.type) {\n    // TODO: Implement START, STOP, RESET, TICK, LAP\n    default:\n      throw new Error(`Unsupported action type: ${action.type}`);\n  }\n}\n\nfunction Stopwatch() {\n  const [state, dispatch] = useReducer(stopwatchReducer, initialStopwatchState);\n  const timerIdRef = useRef(null);\n\n  // 4. Use useEffect to manage the timer\n  useEffect(() => {\n    // TODO: Implement timer logic\n    // Clean up function\n    return () => {\n      // TODO: Clear interval\n    };\n  }, [state.isRunning, dispatch]); // Dependencies for useEffect\n\n  return (\n    <div style={{ textAlign: 'center', fontFamily: 'monospace' }}>\n      <h1>Stopwatch</h1>\n      <p style={{ fontSize: '3em', margin: '20px 0' }}>{formatTime(state.time)}</p>\n      <div style={{ marginBottom: '20px' }}>\n        <button onClick={() => dispatch({ type: 'START' })} disabled={state.isRunning}>Start</button>\n        <button onClick={() => dispatch({ type: 'STOP' })} disabled={!state.isRunning}>Stop</button>\n        <button onClick={() => dispatch({ type: 'RESET' })}>Reset</button>\n        <button onClick={() => dispatch({ type: 'LAP' })} disabled={!state.isRunning}>Lap</button>\n      </div>\n      <h2>Lap Times</h2>\n      <ul style={{ listStyle: 'none', padding: 0 }}>\n        {state.lapTimes.length === 0 ? (\n          <li>No lap times recorded.</li>\n        ) : (\n          state.lapTimes.map((lap, index) => (\n            <li key={index}>Lap {index + 1}: {formatTime(lap)}</li>\n          ))\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default Stopwatch;\n",
          "solutionCode": "import React, { useReducer, useEffect, useRef } from 'react';\n\nconst initialStopwatchState = {\n  isRunning: false,\n  time: 0,\n  lapTimes: [],\n};\n\nfunction formatTime(milliseconds) {\n  const minutes = Math.floor(milliseconds / 60000);\n  const seconds = Math.floor((milliseconds % 60000) / 1000);\n  const ms = Math.floor((milliseconds % 1000) / 10); // Display centiseconds\n  return `${\n    minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}.${ms.toString().padStart(2, '0')}`;\n}\n\nfunction stopwatchReducer(state, action) {\n  switch (action.type) {\n    case 'START':\n      return { ...state, isRunning: true };\n    case 'STOP':\n      return { ...state, isRunning: false };\n    case 'RESET':\n      return { ...initialStopwatchState }; // Reset to full initial state\n    case 'TICK':\n      return { ...state, time: state.time + action.payload }; // Payload for interval time\n    case 'LAP':\n      return { ...state, lapTimes: [...state.lapTimes, state.time] };\n    default:\n      throw new Error(`Unsupported action type: ${action.type}`);\n  }\n}\n\nconst TICK_INTERVAL = 10; // milliseconds\n\nfunction Stopwatch() {\n  const [state, dispatch] = useReducer(stopwatchReducer, initialStopwatchState);\n  const timerIdRef = useRef(null);\n\n  useEffect(() => {\n    if (state.isRunning) {\n      timerIdRef.current = setInterval(() => {\n        dispatch({ type: 'TICK', payload: TICK_INTERVAL });\n      }, TICK_INTERVAL);\n    } else {\n      clearInterval(timerIdRef.current);\n      timerIdRef.current = null;\n    }\n\n    return () => {\n      clearInterval(timerIdRef.current);\n      timerIdRef.current = null;\n    };\n  }, [state.isRunning, dispatch]); // dispatch is stable, so it won't cause re-runs itself\n\n  return (\n    <div style={{ textAlign: 'center', fontFamily: 'monospace', padding: '20px', background: '#f8f8f8', borderRadius: '10px', boxShadow: '0 4px 8px rgba(0,0,0,0.1)', maxWidth: '400px', margin: '20px auto' }}>\n      <h1 style={{ color: '#333' }}>Stopwatch</h1>\n      <p style={{ fontSize: '3.5em', margin: '25px 0', color: '#007bff' }}>{formatTime(state.time)}</p>\n      <div style={{ marginBottom: '25px', display: 'flex', justifyContent: 'center', gap: '10px' }}>\n        <button \n          onClick={() => dispatch({ type: 'START' })}\n          disabled={state.isRunning}\n          style={{ padding: '10px 20px', fontSize: '1.1em', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}\n        >\n          Start\n        </button>\n        <button \n          onClick={() => dispatch({ type: 'STOP' })}\n          disabled={!state.isRunning}\n          style={{ padding: '10px 20px', fontSize: '1.1em', backgroundColor: '#dc3545', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}\n        >\n          Stop\n        </button>\n        <button \n          onClick={() => dispatch({ type: 'RESET' })}\n          style={{ padding: '10px 20px', fontSize: '1.1em', backgroundColor: '#6c757d', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}\n        >\n          Reset\n        </button>\n        <button \n          onClick={() => dispatch({ type: 'LAP' })}\n          disabled={!state.isRunning || state.time === 0}\n          style={{ padding: '10px 20px', fontSize: '1.1em', backgroundColor: '#ffc107', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}\n        >\n          Lap\n        </button>\n      </div>\n      <h2 style={{ color: '#555', borderTop: '1px solid #eee', paddingTop: '20px' }}>Lap Times</h2>\n      <ul style={{ listStyle: 'none', padding: 0, maxHeight: '150px', overflowY: 'auto', border: '1px solid #eee', borderRadius: '5px', background: 'white', paddingRight: '10px' }}>\n        {state.lapTimes.length === 0 ? (\n          <li style={{ padding: '8px 0', color: '#888' }}>No lap times recorded.</li>\n        ) : (\n          state.lapTimes.map((lap, index) => (\n            <li key={index} style={{ padding: '8px 0', borderBottom: index < state.lapTimes.length - 1 ? '1px dashed #eee' : 'none', display: 'flex', justifyContent: 'space-between' }}>\n              <span>Lap {index + 1}:</span>\n              <span style={{ fontWeight: 'bold' }}>{formatTime(lap)}</span>\n            </li>\n          ))\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default Stopwatch;\n",
          "testCases": [
            "**Initial State:** Verify `isRunning` is false, `time` is 0, `lapTimes` is empty.",
            "**Start/Stop:** Click Start. Verify time starts incrementing. Click Stop. Verify time pauses. Click Start again. Verify time resumes from where it left off.",
            "**Reset:** Start the timer, let it run, then click Reset. Verify time resets to 0, `isRunning` is false, and `lapTimes` are cleared.",
            "**Lap:** Start the timer. Click Lap multiple times. Verify current time is added to `lapTimes` list each time, and the main timer continues.",
            "**Time Format:** Verify time is displayed correctly in MM:SS.ms format (e.g., 00:05.23 for 5 seconds and 230 milliseconds).",
            "**Immutability:** Confirm that `state.time` and `state.lapTimes` are updated immutably in the reducer.",
            "**Cleanup:** Verify that `clearInterval` is called when `isRunning` becomes false or the component unmounts to prevent memory leaks."
          ],
          "hints": [
            "Use `setInterval` for the ticking mechanism within `useEffect`.",
            "Remember to return a cleanup function from `useEffect` to clear the interval when the component unmounts or `isRunning` changes.",
            "The `TICK` action can take a `payload` for the interval duration, making the reducer more flexible.",
            "Use `useRef` to store the `setInterval` ID so it can be cleared in the cleanup function without being caught in closures."
          ],
          "tags": [
            "React",
            "useReducer",
            "useEffect",
            "Timer",
            "State Management",
            "Side Effects",
            "Coding Challenge"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "React Hooks",
            "JavaScript Timers (`setInterval`, `clearInterval`)",
            "Immutability",
            "useRef"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "theory_use_reducer"
          ]
        },
        {
          "id": "task_default_props_1",
          "title": "Refactor User Profile Card with ES6 Default Parameters",
          "description": "\nRefactor the provided React `UserProfileCard` functional component. Currently, it uses `defaultProps` to set default values for `theme` and `isAdmin`. Your task is to update it to use ES6 default parameters directly within the component's function signature.\n\n**Requirements:**\n1.  Remove the `UserProfileCard.defaultProps` static property.\n2.  Implement default values for `theme` (default: `'light'`) and `isAdmin` (default: `false`) using ES6 default parameters in the component's destructuring assignment.\n3.  Ensure the component functions identically with and without the default props being explicitly passed.\n4.  Add a test case where `isAdmin` is explicitly passed as `null` to verify default parameters do *not* apply in that scenario.\n",
          "difficulty": "medium",
          "startingCode": "import React from 'react';\n\nfunction UserProfileCard({ name, email, theme, isAdmin }) {\n  const cardStyle = {\n    backgroundColor: theme === 'dark' ? '#333' : '#f0f0f0',\n    color: theme === 'dark' ? '#f0f0f0' : '#333',\n    padding: '20px',\n    borderRadius: '8px',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n    width: '300px',\n    margin: '20px',\n    textAlign: 'left'\n  };\n\n  return (\n    <div style={cardStyle}>\n      <h3>{name}</h3>\n      <p>Email: {email}</p>\n      <p>Theme: {theme}</p>\n      {isAdmin && <p style={{ color: 'gold', fontWeight: 'bold' }}>Admin User</p>}\n    </div>\n  );\n}\n\nUserProfileCard.defaultProps = {\n  theme: 'light',\n  isAdmin: false\n};\n\nfunction App() {\n  return (\n    <div>\n      <h2>User Profile Cards</h2>\n      <UserProfileCard name=\"Alice\" email=\"alice@example.com\" />\n      <UserProfileCard name=\"Bob\" email=\"bob@example.com\" theme=\"dark\" isAdmin={true} />\n      <UserProfileCard name=\"Charlie\" email=\"charlie@example.com\" theme=\"dark\" />\n      <UserProfileCard name=\"David\" email=\"david@example.com\" isAdmin={true} />\n      {/* Add a test case for isAdmin={null} here */}\n    </div>\n  );\n}\n\nexport default App;\n",
          "solutionCode": "import React from 'react';\n\nfunction UserProfileCard({ name, email, theme = 'light', isAdmin = false }) {\n  const cardStyle = {\n    backgroundColor: theme === 'dark' ? '#333' : '#f0f0f0',\n    color: theme === 'dark' ? '#f0f0f0' : '#333',\n    padding: '20px',\n    borderRadius: '8px',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n    width: '300px',\n    margin: '20px',\n    textAlign: 'left'\n  };\n\n  return (\n    <div style={cardStyle}>\n      <h3>{name}</h3>\n      <p>Email: {email}</p>\n      <p>Theme: {theme}</p>\n      {isAdmin && <p style={{ color: 'gold', fontWeight: 'bold' }}>Admin User</p>}\n      {isAdmin === null && <p style={{ color: 'red' }}>Admin Status: Explicitly Null</p>} {/* Added for test case */}\n    </div>\n  );\n}\n\n// Removed: UserProfileCard.defaultProps = { ... };\n\nfunction App() {\n  return (\n    <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center' }}>\n      <h2>User Profile Cards</h2>\n      <UserProfileCard name=\"Alice\" email=\"alice@example.com\" /> {/* theme: light, isAdmin: false */}\n      <UserProfileCard name=\"Bob\" email=\"bob@example.com\" theme=\"dark\" isAdmin={true} /> {/* theme: dark, isAdmin: true */}\n      <UserProfileCard name=\"Charlie\" email=\"charlie@example.com\" theme=\"dark\" /> {/* theme: dark, isAdmin: false */}\n      <UserProfileCard name=\"David\" email=\"david@example.com\" isAdmin={true} /> {/* theme: light, isAdmin: true */}\n      <UserProfileCard name=\"Eve\" email=\"eve@example.com\" isAdmin={null} /> {/* theme: light, isAdmin: null (default not applied) */}\n    </div>\n  );\n}\n\nexport default App;\n",
          "testCases": [
            "Render `<UserProfileCard name=\"Alice\" email=\"alice@example.com\" />`. Verify `theme` is `'light'` and `isAdmin` is `false`.",
            "Render `<UserProfileCard name=\"Bob\" email=\"bob@example.com\" theme=\"dark\" isAdmin={true} />`. Verify `theme` is `'dark'` and `isAdmin` is `true`.",
            "Render `<UserProfileCard name=\"Charlie\" email=\"charlie@example.com\" theme=\"dark\" />`. Verify `theme` is `'dark'` and `isAdmin` is `false`.",
            "Render `<UserProfileCard name=\"David\" email=\"david@example.com\" isAdmin={true} />`. Verify `theme` is `'light'` and `isAdmin` is `true`.",
            "Render `<UserProfileCard name=\"Eve\" email=\"eve@example.com\" isAdmin={null} />`. Verify `theme` is `'light'` and `isAdmin` is `null` (not `false`), and the `Admin User` paragraph is NOT rendered, but the `Explicitly Null` message IS rendered (if added for testing)."
          ],
          "hints": [
            "Focus on the function's parameter list for destructuring and applying default values.",
            "Remember that `defaultProps` is a static property, while ES6 default parameters are part of the function signature.",
            "Test carefully with `undefined`, `null`, and explicitly provided values to confirm correct behavior."
          ],
          "tags": [
            "React",
            "Props",
            "Default Values",
            "ES6",
            "Refactoring",
            "Functional Components"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "React functional components",
            "ES6 destructuring"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_default_props"
          ]
        },
        {
          "id": "task_spread_operator_1",
          "title": "Manage User Preferences with Immutable Updates using Spread Operator",
          "description": "\nYour task is to create a React component (`UserPreferences`) that manages a user's settings. The settings object can contain nested properties, and updates must be performed immutably using the spread operator.\n\n**Requirements:**\n1.  Define an initial state for user preferences using `useState`. The state should be an object with nested properties, e.g.:\n    ```javascript\n    {\n      notifications: {\n        email: true,\n        sms: false,\n        push: true\n      },\n      theme: 'dark',\n      privacy: {\n        dataSharing: true,\n        profileVisibility: 'public'\n      }\n    }\n    ```\n2.  Create a functional component `UserPreferences` that displays these preferences.\n3.  Implement functions or event handlers to update specific preferences. Each update should return a *new* state object, ensuring no direct mutations of the original state or nested objects.\n    *   A function to toggle `notifications.sms`.\n    *   A function to change `theme` (e.g., to 'light' or 'dark').\n    *   A function to change `privacy.profileVisibility` (e.g., to 'private').\n4.  Render UI elements (buttons/toggles) to trigger these updates.\n\nDemonstrate a clear understanding of immutable updates for nested objects using the spread operator.",
          "difficulty": "medium",
          "startingCode": "import React, { useState } from 'react';\n\nfunction UserPreferences() {\n  const [preferences, setPreferences] = useState({\n    notifications: {\n      email: true,\n      sms: false,\n      push: true\n    },\n    theme: 'dark',\n    privacy: {\n      dataSharing: true,\n      profileVisibility: 'public'\n    }\n  });\n\n  // TODO: Implement functions for immutable updates\n\n  const toggleSmsNotifications = () => {\n    // Implement immutable update for preferences.notifications.sms\n  };\n\n  const changeTheme = (newTheme) => () => {\n    // Implement immutable update for preferences.theme\n  };\n\n  const setProfileVisibility = (newVisibility) => () => {\n    // Implement immutable update for preferences.privacy.profileVisibility\n  };\n\n  return (\n    <div style={{ fontFamily: 'Arial, sans-serif', maxWidth: '600px', margin: '20px auto', padding: '20px', border: '1px solid #eee', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>\n      <h1>User Preferences</h1>\n\n      <h2>Notifications</h2>\n      <p>Email: {preferences.notifications.email ? 'On' : 'Off'}</p>\n      <p>SMS: {preferences.notifications.sms ? 'On' : 'Off'}</p>\n      <p>Push: {preferences.notifications.push ? 'On' : 'Off'}</p>\n      <button onClick={toggleSmsNotifications}>Toggle SMS Notifications</button>\n\n      <h2>Theme</h2>\n      <p>Current Theme: {preferences.theme}</p>\n      <button onClick={changeTheme('light')}>Set Light Theme</button>\n      <button onClick={changeTheme('dark')}>Set Dark Theme</button>\n\n      <h2>Privacy</h2>\n      <p>Data Sharing: {preferences.privacy.dataSharing ? 'Enabled' : 'Disabled'}</p>\n      <p>Profile Visibility: {preferences.privacy.profileVisibility}</p>\n      <button onClick={setProfileVisibility('private')}>Set Profile Private</button>\n      <button onClick={setProfileVisibility('public')}>Set Profile Public</button>\n\n      <hr />\n      <h3>Current State (for debugging)</h3>\n      <pre style={{ backgroundColor: '#f5f5f5', padding: '10px', borderRadius: '4px' }}>\n        {JSON.stringify(preferences, null, 2)}\n      </pre>\n    </div>\n  );\n}\n\nexport default UserPreferences;\n",
          "solutionCode": "import React, { useState } from 'react';\n\nfunction UserPreferences() {\n  const [preferences, setPreferences] = useState({\n    notifications: {\n      email: true,\n      sms: false,\n      push: true\n    },\n    theme: 'dark',\n    privacy: {\n      dataSharing: true,\n      profileVisibility: 'public'\n    }\n  });\n\n  const toggleSmsNotifications = () => {\n    setPreferences(prevPrefs => ({\n      ...prevPrefs, // Shallow copy of top-level preferences object\n      notifications: { // Create new notifications object\n        ...prevPrefs.notifications, // Shallow copy of existing notifications\n        sms: !prevPrefs.notifications.sms // Update the sms property\n      }\n    }));\n  };\n\n  const changeTheme = (newTheme) => () => {\n    setPreferences(prevPrefs => ({\n      ...prevPrefs, // Shallow copy of top-level preferences object\n      theme: newTheme // Update the theme property\n    }));\n  };\n\n  const setProfileVisibility = (newVisibility) => () => {\n    setPreferences(prevPrefs => ({\n      ...prevPrefs, // Shallow copy of top-level preferences object\n      privacy: { // Create new privacy object\n        ...prevPrefs.privacy, // Shallow copy of existing privacy\n        profileVisibility: newVisibility // Update the profileVisibility property\n      }\n    }));\n  };\n\n  return (\n    <div style={{ fontFamily: 'Arial, sans-serif', maxWidth: '600px', margin: '20px auto', padding: '20px', border: '1px solid #eee', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>\n      <h1 style={{ color: '#333', textAlign: 'center' }}>User Preferences</h1>\n\n      <h2 style={{ borderBottom: '1px solid #eee', paddingBottom: '10px', marginBottom: '15px' }}>Notifications</h2>\n      <p>Email: <span style={{ fontWeight: 'bold', color: preferences.notifications.email ? 'green' : 'red' }}>{preferences.notifications.email ? 'On' : 'Off'}</span></p>\n      <p>SMS: <span style={{ fontWeight: 'bold', color: preferences.notifications.sms ? 'green' : 'red' }}>{preferences.notifications.sms ? 'On' : 'Off'}</span></p>\n      <p>Push: <span style={{ fontWeight: 'bold', color: preferences.notifications.push ? 'green' : 'red' }}>{preferences.notifications.push ? 'On' : 'Off'}</span></p>\n      <button \n        onClick={toggleSmsNotifications}\n        style={{ padding: '8px 15px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', marginRight: '10px' }}\n      >Toggle SMS Notifications</button>\n\n      <h2 style={{ borderBottom: '1px solid #eee', paddingBottom: '10px', marginTop: '20px', marginBottom: '15px' }}>Theme</h2>\n      <p>Current Theme: <span style={{ fontWeight: 'bold', color: '#555' }}>{preferences.theme}</span></p>\n      <button \n        onClick={changeTheme('light')}\n        style={{ padding: '8px 15px', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', marginRight: '10px' }}\n      >Set Light Theme</button>\n      <button \n        onClick={changeTheme('dark')}\n        style={{ padding: '8px 15px', backgroundColor: '#6c757d', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}\n      >Set Dark Theme</button>\n\n      <h2 style={{ borderBottom: '1px solid #eee', paddingBottom: '10px', marginTop: '20px', marginBottom: '15px' }}>Privacy</h2>\n      <p>Data Sharing: <span style={{ fontWeight: 'bold', color: preferences.privacy.dataSharing ? 'green' : 'red' }}>{preferences.privacy.dataSharing ? 'Enabled' : 'Disabled'}</span></p>\n      <p>Profile Visibility: <span style={{ fontWeight: 'bold', color: '#555' }}>{preferences.privacy.profileVisibility}</span></p>\n      <button \n        onClick={setProfileVisibility('private')}\n        style={{ padding: '8px 15px', backgroundColor: '#ffc107', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', marginRight: '10px' }}\n      >Set Private</button>\n      <button \n        onClick={setProfileVisibility('public')}\n        style={{ padding: '8px 15px', backgroundColor: '#17a2b8', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}\n      >Set Public</button>\n\n      <hr style={{ marginTop: '30px' }}/>\n      <h3>Current State (for debugging)</h3>\n      <pre style={{ backgroundColor: '#f5f5f5', padding: '15px', borderRadius: '4px', overflowX: 'auto' }}>\n        <code>{JSON.stringify(preferences, null, 2)}</code>\n      </pre>\n    </div>\n  );\n}\n\nexport default UserPreferences;\n",
          "testCases": [
            "**Initial State:** Render the component. Verify initial preferences are displayed correctly.",
            "**Toggle SMS Notifications:** Click 'Toggle SMS Notifications'. Verify `preferences.notifications.sms` changes (`false` to `true`, then `true` to `false`). Verify `preferences.notifications` and the overall `preferences` object are new references (not mutated).",
            "**Change Theme:** Click 'Set Light Theme'. Verify `preferences.theme` changes to `'light'`. Click 'Set Dark Theme'. Verify `preferences.theme` changes to `'dark'`. Verify `preferences` object is a new reference.",
            "**Set Profile Visibility:** Click 'Set Profile Private'. Verify `preferences.privacy.profileVisibility` changes to `'private'`. Click 'Set Profile Public'. Verify it changes to `'public'`. Verify `preferences.privacy` and `preferences` objects are new references.",
            "**Combined Changes:** Perform a sequence of changes (e.g., toggle SMS, change theme, set privacy). Verify all changes are reflected correctly and immutably."
          ],
          "hints": [
            "To update a nested property immutably, you need to create new objects at each level of nesting using the spread operator.",
            "For example, to update `obj.nested.prop`: `setObj(prev => ({ ...prev, nested: { ...prev.nested, prop: newValue } }))`.",
            "Use the functional update form of `setPreferences` (`setPreferences(prevState => newState)`) to ensure you're working with the most up-to-date state."
          ],
          "tags": [
            "React",
            "useState",
            "Immutability",
            "Spread Operator",
            "Object Manipulation",
            "Coding Challenge"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "React Hooks",
            "JavaScript Objects",
            "Spread Operator"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_spread_operator"
          ]
        },
        {
          "id": "task_react_events_1",
          "title": "Implement a Draggable Box Component",
          "description": "\nYour task is to create a simple draggable `div` component in React using `SyntheticEvent` and `useState`.\n\n**Requirements:**\n1.  Create a functional component called `DraggableBox`.\n2.  This component should have its own internal state (`positionX`, `positionY`) to control its `left` and `top` CSS properties.\n3.  Implement `onMouseDown`, `onMouseMove`, and `onMouseUp` event handlers on the `DraggableBox` element to enable dragging.\n    *   `onMouseDown`: When the mouse button is pressed on the box, set a `isDragging` state to `true` and record the initial mouse position and box position to calculate the offset.\n    *   `onMouseMove`: When `isDragging` is `true`, update the `positionX` and `positionY` states based on the mouse movement. These events should ideally be listened for on the `document` to handle cases where the mouse moves off the box while dragging.\n    *   `onMouseUp`: When the mouse button is released, set `isDragging` to `false`.\n4.  Ensure `event.preventDefault()` is used on `onMouseDown` to prevent default browser drag behavior (e.g., image dragging).\n5.  Add cleanup logic in `useEffect` to remove `mousemove` and `mouseup` listeners from `document` when dragging stops or the component unmounts.\n\nYour solution should use React's `SyntheticEvent` system effectively.\n",
          "difficulty": "hard",
          "startingCode": "import React, { useState, useEffect, useRef } from 'react';\n\nfunction DraggableBox() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const offset = useRef({ x: 0, y: 0 }); // To store the initial mouse-to-box offset\n\n  const handleMouseDown = (event) => {\n    // TODO: Implement logic to start dragging\n    // Remember to use event.preventDefault()\n  };\n\n  useEffect(() => {\n    const handleMouseMove = (event) => {\n      if (!isDragging) return;\n      // TODO: Implement logic to update box position based on mouse movement\n    };\n\n    const handleMouseUp = () => {\n      // TODO: Implement logic to stop dragging\n    };\n\n    // TODO: Attach and detach event listeners on document\n\n    return () => {\n      // TODO: Cleanup event listeners\n    };\n  }, [isDragging]); // Dependencies for useEffect\n\n  return (\n    <div\n      onMouseDown={handleMouseDown}\n      style={{\n        position: 'absolute',\n        left: position.x,\n        top: position.y,\n        width: '100px',\n        height: '100px',\n        backgroundColor: 'lightblue',\n        border: '2px solid steelblue',\n        cursor: 'grab',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        userSelect: 'none'\n      }}\n    >\n      Drag Me\n    </div>\n  );\n}\n\nexport default DraggableBox;\n",
          "solutionCode": "import React, { useState, useEffect, useRef } from 'react';\n\nfunction DraggableBox() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const offset = useRef({ x: 0, y: 0 }); // Stores the initial click offset from box's top-left\n\n  const handleMouseDown = (event) => {\n    // Prevent default browser drag behavior (e.g., image drag, text selection)\n    event.preventDefault(); \n    event.stopPropagation(); // Stop bubbling if nested\n\n    setIsDragging(true);\n    // Calculate the offset from the top-left of the box to the mouse click point\n    // event.clientX/Y are relative to the viewport\n    // event.target.getBoundingClientRect() gives box's position relative to viewport\n    const boxRect = event.target.getBoundingClientRect();\n    offset.current = {\n      x: event.clientX - boxRect.left,\n      y: event.clientY - boxRect.top,\n    };\n  };\n\n  useEffect(() => {\n    const handleMouseMove = (event) => {\n      if (!isDragging) return;\n\n      // Calculate new position based on mouse move and initial offset\n      setPosition({\n        x: event.clientX - offset.current.x,\n        y: event.clientY - offset.current.y,\n      });\n    };\n\n    const handleMouseUp = () => {\n      setIsDragging(false);\n    };\n\n    // Attach listeners to the document to ensure dragging works even if mouse leaves the box\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    }\n\n    // Cleanup function\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging]); // Re-run effect when isDragging changes\n\n  return (\n    <div\n      onMouseDown={handleMouseDown}\n      style={{\n        position: 'absolute',\n        left: position.x,\n        top: position.y,\n        width: '120px',\n        height: '120px',\n        backgroundColor: isDragging ? '#ffebcd' : 'lightblue',\n        border: '2px solid steelblue',\n        borderRadius: '8px',\n        cursor: isDragging ? 'grabbing' : 'grab',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        userSelect: 'none',\n        boxShadow: '0 4px 8px rgba(0,0,0,0.2)'\n      }}\n    >\n      Drag Me\n      <br />\n      (x:{position.x}, y:{position.y})\n    </div>\n  );\n}\n\nexport default DraggableBox;\n",
          "testCases": [
            "**Initial Position:** Verify the box starts at `x: 0, y: 0` (top-left of its containing context or viewport).",
            "**Basic Dragging:** Click and drag the box. Verify it moves smoothly with the mouse cursor.",
            "**Off-Box Dragging:** Click on the box, drag the mouse rapidly outside the box's boundaries, then release. Verify the box stops dragging when the mouse is released, even if off the box.",
            "**`preventDefault()`:** Try dragging text or images on the page without the box. Then, click and drag the box itself. Verify that the browser's default drag-and-drop behavior (e.g., ghost image of the box) is prevented when dragging the box.",
            "**State Update:** Observe `position.x` and `position.y` values updating in the `JSON.stringify` or a debugger as you drag.",
            "**Cleanup:** Confirm no memory leaks by checking event listeners if using browser dev tools (advanced). Ensure that `mousemove` and `mouseup` listeners are removed when `isDragging` becomes `false` or the component unmounts."
          ],
          "hints": [
            "Use `event.clientX` and `event.clientY` (viewport coordinates) for mouse position.",
            "To ensure dragging works even if the mouse cursor leaves the box, attach `mousemove` and `mouseup` listeners to the `document` object inside `useEffect`.",
            "Remember to return a cleanup function from `useEffect` to remove the `document` event listeners when the component unmounts or `isDragging` changes back to `false`.",
            "Calculate the `offset` between the mouse pointer and the top-left corner of the box at `onMouseDown` to prevent the box from 'jumping' when clicked.",
            "The `useRef` hook is useful for storing mutable values (like the offset or `setInterval` IDs) that don't trigger re-renders when they change."
          ],
          "tags": [
            "React",
            "Events",
            "SyntheticEvent",
            "useState",
            "useEffect",
            "useRef",
            "DOM Manipulation",
            "UI Component",
            "Coding Challenge"
          ],
          "timeEstimate": 75,
          "prerequisites": [
            "React Hooks",
            "JavaScript Events",
            "DOM Events (`mousemove`, `mouseup`)"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "theory_react_events"
          ]
        }
      ]
    }
  }
]