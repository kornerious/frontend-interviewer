[
  {
    "id": "8c0b0b1b-085e-42da-9e44-457e26480dc0",
    "startLine": 11500,
    "endLine": 11599,
    "processedDate": "2025-06-17T12:27:30.717Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_html_form_overrides",
          "title": "HTML Form Overriding Attributes",
          "content": "HTML5 introduced a set of attributes that can be applied to `<input type=\"submit\">`, `<input type=\"image\">`, or `<button type=\"submit\">` elements to override the default behavior of their parent `<form>` element. These attributes provide granular control over how a specific submit action behaves, without altering the form's global attributes.\n\n### Key Attributes:\n\n*   `formaction`: This attribute specifies the URL to which the form data will be submitted when the specific submit button is clicked. It overrides the `action` attribute of the parent `<form>` element. This is useful when you want different submit buttons within the same form to submit data to different endpoints.\n*   `formenctype`: This attribute specifies how the form data should be encoded when submitted. It overrides the `enctype` attribute of the parent `<form>`. Common values include `application/x-www-form-urlencoded` (default for most forms), `multipart/form-data` (for file uploads), and `text/plain`.\n*   `formmethod`: This attribute specifies the HTTP method to use when submitting the form data (e.g., `GET`, `POST`). It overrides the `method` attribute of the parent `<form>`. This allows a single form to have buttons that submit data using different HTTP methods.\n*   `formtarget`: This attribute specifies where to display the response after submitting the form. It overrides the `target` attribute of the parent `<form>`. Common values include `_self` (default, in the same browsing context), `_blank` (in a new tab/window), `_parent` (in the parent frame), or `_top` (in the full body of the window). This is particularly useful for submitting data to an iframe or opening a new tab for a report.",
          "examples": [
            {
              "id": "example_form_overrides_1",
              "title": "Basic Formaction and Formmethod Override",
              "code": "<!-- index.html -->\n<form action=\"/default-submit\" method=\"get\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\">\n  <br><br>\n  <button type=\"submit\">Submit Default</button>\n  <button type=\"submit\" formaction=\"/api/create-user\" formmethod=\"post\">Create User</button>\n  <button type=\"submit\" formaction=\"/api/search-user\" formmethod=\"get\">Search User</button>\n</form>",
              "explanation": "In this example, the form's default submission is to `/default-submit` using `GET`. However, the 'Create User' button overrides this to submit to `/api/create-user` using `POST`, and the 'Search User' button submits to `/api/search-user` using `GET`, demonstrating how different buttons can trigger different submission behaviors.",
              "language": "html"
            },
            {
              "id": "example_form_overrides_2",
              "title": "Formtarget and Formenctype Override",
              "code": "<!-- index.html -->\n<form action=\"/upload\" method=\"post\" enctype=\"application/x-www-form-urlencoded\">\n  <label for=\"file\">Upload File:</label>\n  <input type=\"file\" id=\"file\" name=\"userFile\">\n  <br><br>\n  <button type=\"submit\">Submit Standard</button>\n  <button type=\"submit\" formaction=\"/upload-large\" formtarget=\"_blank\" formenctype=\"multipart/form-data\">Upload Large File in New Tab</button>\n</form>",
              "explanation": "Here, the form's default `enctype` is `application/x-www-form-urlencoded`. The 'Upload Large File in New Tab' button overrides the `enctype` to `multipart/form-data` (necessary for file uploads) and opens the submission response in a new tab (`_blank`), while also changing the submission URL.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_form_overrides_1",
            "question_form_overrides_2",
            "question_form_overrides_3",
            "question_form_overrides_4",
            "question_form_overrides_5"
          ],
          "relatedTasks": [
            "task_form_overrides_1"
          ],
          "tags": [
            "HTML",
            "Forms",
            "Web Development",
            "Frontend Basics",
            "Attributes"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_forms",
            "http_methods"
          ],
          "complexity": 4,
          "interviewRelevance": 6,
          "learningPath": "intermediate",
          "requiredFor": [
            "advanced_form_handling",
            "single_page_applications"
          ]
        },
        {
          "id": "theory_meta_viewport_responsive_design",
          "title": "Meta Viewport and Responsive Design Fundamentals",
          "content": "Responsive web design is an approach to web design that makes web pages render well on a variety of devices and window or screen sizes from minimum to maximum display size. The `meta viewport` tag is a crucial component in achieving responsiveness on mobile devices, as it instructs the browser on how to control the page's dimensions and scaling.\n\n### Meta Viewport Tag\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n**Viewport Attributes:**\n\n*   `width=device-width`: This sets the width of the viewport (the browser window's content area) to the width of the device's screen in device-independent pixels. This is fundamental for responsive design as it prevents mobile browsers from rendering pages at a desktop width (typically 980px) and then scaling them down, which often results in tiny text and elements.\n*   `initial-scale=1.0`: This sets the initial zoom level when the page is first loaded. A value of `1.0` means there is no zoom applied, ensuring that 1 CSS pixel equals 1 device-independent pixel (DIP) or roughly 1 physical pixel on a standard DPI screen. This is crucial for consistent sizing across devices.\n*   `maximum-scale=1.0`: This sets the maximum zoom level that a user is allowed to zoom into the page. When set to `1.0`, it prevents users from zooming in. While it might be used to maintain layout integrity, it is generally **not recommended for accessibility** as it can impair usability for users with visual impairments who rely on zoom.\n*   `user-scalable=no`: This prevents users from zooming in or out on the page entirely. Similar to `maximum-scale=1.0`, this is generally **not recommended for accessibility reasons**, as it severely restricts user control and can be a barrier for those who need to magnify content.",
          "examples": [
            {
              "id": "example_meta_viewport_1",
              "title": "Standard Responsive Meta Viewport",
              "code": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Responsive Page</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      margin: 20px;\n    }\n    h1 {\n      color: #333;\n    }\n  </style>\n</head>\n<body>\n  <h1>Welcome to my Responsive Site!</h1>\n  <p>This content will scale appropriately across devices.</p>\n</body>\n</html>",
              "explanation": "This example demonstrates the essential meta viewport tag `width=device-width, initial-scale=1.0` which is the foundation for creating responsive web pages, ensuring correct scaling on mobile devices.",
              "language": "html"
            },
            {
              "id": "example_meta_viewport_2",
              "title": "Meta Viewport with Zoom Restrictions (Not Recommended)",
              "code": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n  <title>Zoom Restricted Page</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      margin: 20px;\n      background-color: #f0f0f0;\n    }\n  </style>\n</head>\n<body>\n  <h1>Zooming is Disabled Here</h1>\n  <p>This page demonstrates viewport settings that prevent user zooming. While it might enforce a specific layout, it negatively impacts accessibility.</p>\n</body>\n</html>",
              "explanation": "This example shows the use of `maximum-scale=1.0` and `user-scalable=no`. While technically possible, these attributes are generally discouraged due to their negative impact on web accessibility, especially for users with visual impairments.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_viewport_1",
            "question_viewport_2",
            "question_viewport_3",
            "question_viewport_4",
            "question_viewport_5"
          ],
          "relatedTasks": [
            "task_meta_viewport_1"
          ],
          "tags": [
            "HTML",
            "Responsive Design",
            "Viewport",
            "Mobile Development",
            "Accessibility",
            "Web Standards"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_structure",
            "css_basics"
          ],
          "complexity": 5,
          "interviewRelevance": 9,
          "learningPath": "beginner",
          "requiredFor": [
            "responsive_layouts",
            "mobile_first_design"
          ]
        },
        {
          "id": "theory_css_media_queries",
          "title": "CSS Media Queries for Adaptive Layouts",
          "content": "CSS Media Queries are a CSS3 module that allow content rendering to adapt to various conditions (e.g., screen resolution, orientation, color scheme). They are a cornerstone of responsive web design, enabling developers to apply different styles based on the characteristics of the device or browsing environment.\n\n### Basic Syntax\n\nA media query consists of a media type (e.g., `screen`, `print`) and zero or more media feature expressions (e.g., `min-width`, `orientation`).\n\n```css\n@media <media-type> and (<media-feature>) {\n  /* CSS rules to apply */\n}\n```\n\n### Common Media Types\n\n*   `all`: Suitable for all devices.\n*   `print`: For paged material and documents viewed on a screen in print preview mode.\n*   `screen`: For color computer screens.\n*   `speech`: For speech synthesizers.\n\n### Media Feature Examples:\n\n*   **Width/Height Based Breakpoints:**\n    *   `min-width`: Applies styles when the viewport is at least a specified width.\n    *   `max-width`: Applies styles when the viewport is at most a specified width.\n    *   `width`: Applies styles when the viewport is exactly a specified width.\n\n    ```css\n    /* Base styles for mobile devices */\n    body {\n      font-size: 16px;\n    }\n\n    /* Tablet devices: viewport at least 768px wide */\n    @media (min-width: 768px) {\n      body {\n        font-size: 18px;\n      }\n    }\n\n    /* Desktop devices: viewport at least 1024px wide */\n    @media (min-width: 1024px) {\n      body {\n        font-size: 20px;\n      }\n    }\n    ```\n\n*   **Orientation:**\n    *   `orientation: landscape`: Applied when the viewport is wider than it is tall.\n    *   `orientation: portrait`: Applied when the viewport is taller than it is wide.\n\n    ```css\n    @media (orientation: landscape) {\n      /* Applied when viewport is in landscape orientation */\n      menu {\n        float: left;\n      }\n    }\n    ```\n\n*   **User Preferences:**\n    *   `prefers-color-scheme: dark`: Applied when the user has dark mode enabled in their operating system or browser settings.\n    *   `prefers-color-scheme: light`: Applied when the user has light mode enabled.\n\n    ```css\n    @media (prefers-color-scheme: dark) {\n      /* Applied when user has dark mode enabled */\n      body {\n        background-color: #333;\n        color: #eee;\n      }\n    }\n    ```\n\n*   **Device Aspect Ratio:**\n    *   `device-aspect-ratio`: Targets the ratio of the device's screen width to height.\n\n    ```css\n    /* For displays with 16:9 aspect ratio */\n    @media screen and (device-aspect-ratio: 16/9) {\n      /* CSS styles for 16:9 displays */\n      .video-container { max-width: 100%; }\n    }\n    ```\n\n*   **Resolution (DPI):**\n    *   `min-resolution`: Targets screens with a minimum pixel density (e.g., Retina displays).\n    *   `dppx` (dots per pixel unit): Represents physical pixels per CSS pixel.\n    *   `dpi` (dots per inch).\n\n    ```css\n    /* For high-resolution (Retina) displays */\n    @media screen and (min-resolution: 2dppx) {\n      /* CSS styles for high-DPI screens */\n      img.logo { content: url('logo@2x.png'); }\n    }\n    ```\n\n### Combining Multiple Conditions\n\nMedia queries can be combined using logical operators:\n\n*   `and`: Combines multiple media features. All conditions must be true.\n*   `or` (`,` comma): A comma-separated list of media queries. If any one of the media queries is true, the styles are applied.\n*   `not`: Negates the entire media query. Rarely used with `and`.\n*   `only`: Hides the style sheet from older browsers that do not support media queries.\n\n    ```css\n    /* Applied for landscape viewports at least 30em wide */\n    @media screen and (min-width: 30em) and (orientation: landscape) {\n      .sidebar { width: 25%; }\n    }\n\n    /* Device-specific breakpoints (ranges) */\n    @media (min-width: 768px) and (max-width: 991px) {\n      /* Styles for small tablets and large phones */\n      .container {\n        max-width: 750px;\n      }\n    }\n\n    @media (min-width: 992px) and (max-width: 1199px) {\n      /* Styles for medium devices (tablets, small laptops) */\n      .container {\n        max-width: 970px;\n      }\n    }\n\n    @media (min-width: 1200px) {\n      /* Styles for large devices (desktops, large laptops) */\n      .container {\n        max-width: 1170px;\n      }\n    }\n    ```\n\n**Best Practices for Breakpoints:**\n\nInstead of device-specific breakpoints, it's often more effective to use content-based breakpoints. This means adjusting your layout where the content starts to look bad, rather than targeting specific device widths. Common breakpoints often align with general device categories (e.g., mobile, tablet, desktop) as seen in frameworks like Bootstrap, but fluid layouts and flexible content can make a stricter `device-width` approach less necessary.\n\n`em` and `rem` units are generally preferred for breakpoints over `px` because they scale with the user's default font size settings, offering better accessibility.",
          "examples": [
            {
              "id": "example_media_queries_1",
              "title": "Basic Breakpoints and Orientation",
              "code": "/* styles.css */\nbody {\n  background-color: lightblue;\n  font-size: 16px;\n}\n\n/* Tablet styles */\n@media (min-width: 768px) {\n  body {\n    background-color: lightgreen;\n    font-size: 18px;\n  }\n}\n\n/* Desktop styles */\n@media (min-width: 1024px) {\n  body {\n    background-color: lightcoral;\n    font-size: 20px;\n  }\n}\n\n/* Landscape orientation specific style */\n@media (orientation: landscape) {\n  body {\n    border: 5px solid darkblue;\n  }\n}",
              "explanation": "This example demonstrates how to apply different background colors and font sizes based on viewport width (mobile, tablet, desktop) using `min-width` breakpoints. It also shows a style applied specifically when the device is in landscape orientation.",
              "language": "css"
            },
            {
              "id": "example_media_queries_2",
              "title": "Dark Mode Preference and High-Resolution Displays",
              "code": "/* styles.css */\nbody {\n  color: black;\n  background-color: white;\n}\n\n.logo {\n  width: 100px;\n  height: auto;\n}\n\n/* Dark mode preference */\n@media (prefers-color-scheme: dark) {\n  body {\n    color: white;\n    background-color: #333;\n  }\n}\n\n/* High-resolution displays */\n@media screen and (min-resolution: 2dppx), \n       screen and (-webkit-min-device-pixel-ratio: 2), \n       screen and (min-device-pixel-ratio: 2) {\n  .logo {\n    content: url('images/logo@2x.png'); /* Load higher resolution image */\n    width: 200px; /* Adjust if the 2x image is naturally larger */\n  }\n}",
              "explanation": "This example shows how to implement dark mode support using `prefers-color-scheme: dark` and how to serve higher-resolution images for Retina displays using `min-resolution: 2dppx` (and vendor prefixes for broader compatibility).",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_media_query_1",
            "question_media_query_2",
            "question_media_query_3",
            "question_media_query_4",
            "question_media_query_5",
            "question_media_query_6",
            "question_media_query_7"
          ],
          "relatedTasks": [
            "task_media_queries_1"
          ],
          "tags": [
            "CSS",
            "Responsive Design",
            "Media Queries",
            "Frontend Development",
            "Accessibility",
            "Breakpoints"
          ],
          "technology": "CSS",
          "prerequisites": [
            "css_selectors",
            "css_properties",
            "html_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "complex_responsive_layouts",
            "cross_browser_compatibility"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_form_overrides_1",
          "topic": "HTML Form Overriding Attributes",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of the `formaction` attribute on a submit button?",
          "answer": "It overrides the `action` attribute of the parent `<form>` element, directing the form submission to a different URL.",
          "options": [],
          "analysisPoints": [
            "Tests basic knowledge of `formaction`.",
            "Distinguishes `formaction` from the form's `action` attribute."
          ],
          "keyConcepts": [
            "formaction",
            "HTML forms",
            "Form submission"
          ],
          "evaluationCriteria": [
            "Correct identification of the attribute's function."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Forms",
            "Attributes",
            "Basic"
          ],
          "prerequisites": [
            "html_forms"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_form_overrides_2",
          "topic": "HTML Form Overriding Attributes",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following HTML form:\n\n```html\n<form action=\"/submit-default\" method=\"get\" enctype=\"application/x-www-form-urlencoded\">\n  <input type=\"text\" name=\"data\">\n  <button type=\"submit\" formmethod=\"post\" formaction=\"/submit-api\" formenctype=\"multipart/form-data\">Upload</button>\n  <button type=\"submit\">Send</button>\n</form>\n```\n\nIf the user clicks the 'Upload' button, what will be the HTTP method, submission URL, and encoding type for the form data?",
          "answer": "HTTP Method: POST, URL: /submit-api, Encoding: multipart/form-data",
          "options": [
            "HTTP Method: POST, URL: /submit-api, Encoding: multipart/form-data",
            "HTTP Method: GET, URL: /submit-default, Encoding: application/x-www-form-urlencoded",
            "HTTP Method: POST, URL: /submit-default, Encoding: multipart/form-data",
            "HTTP Method: GET, URL: /submit-api, Encoding: application/x-www-form-urlencoded"
          ],
          "analysisPoints": [
            "Checks understanding of how `formmethod`, `formaction`, and `formenctype` override parent form attributes.",
            "Ensures knowledge of default form behavior versus button-specific overrides."
          ],
          "keyConcepts": [
            "formaction",
            "formmethod",
            "formenctype",
            "HTML forms",
            "Attribute precedence"
          ],
          "evaluationCriteria": [
            "Ability to correctly identify overriding attributes.",
            "Understanding of HTTP methods and encoding types."
          ],
          "example": "The 'Upload' button explicitly sets `formmethod=\"post\"`, `formaction=\"/submit-api\"`, and `formenctype=\"multipart/form-data\"`. These attributes take precedence over the `<form>`'s default `method=\"get\"`, `action=\"/submit-default\"`, and `enctype=\"application/x-www-form-urlencoded\"` for that specific button's submission.",
          "tags": [
            "HTML",
            "Forms",
            "MCQ",
            "Medium",
            "Attributes"
          ],
          "prerequisites": [
            "html_forms",
            "http_methods"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_form_overrides_3",
          "topic": "HTML Form Overriding Attributes",
          "level": "medium",
          "type": "open",
          "question": "Describe a practical scenario where using `formtarget=\"_blank\"` on a specific submit button within a form would be beneficial, and explain why.",
          "answer": "A practical scenario for using `formtarget=\"_blank\"` would be in a web application where submitting a form (e.g., generating a report, downloading a file, or viewing a preview) should open the result in a new browser tab or window, without navigating away from the current page. For example, if you have a form to configure parameters for a report, clicking 'Generate Report' with `formtarget=\"_blank\"` would open the report in a new tab, allowing the user to continue interacting with the parameter configuration form in the original tab. This improves user experience by preventing loss of context or progress on the original page, especially when the submission process might take time or the result is meant for independent viewing.",
          "options": [],
          "analysisPoints": [
            "Tests understanding of `formtarget` beyond just its definition.",
            "Requires critical thinking about user experience and practical application."
          ],
          "keyConcepts": [
            "formtarget",
            "User experience",
            "Form submission",
            "Browser context"
          ],
          "evaluationCriteria": [
            "Ability to articulate a relevant use case.",
            "Clear explanation of the benefits (e.g., preventing navigation, maintaining context)."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Forms",
            "Open-ended",
            "UX",
            "Advanced"
          ],
          "prerequisites": [
            "html_forms",
            "browser_context"
          ],
          "complexity": 7,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_form_overrides_4",
          "topic": "HTML Form Overriding Attributes",
          "level": "hard",
          "type": "code",
          "question": "Implement an HTML form with two submit buttons. The form's default submission should go to `/search` using the `GET` method. The second button, labeled 'Save Profile', should submit data to `/profile` using the `POST` method and open the response in a new tab.",
          "answer": "```html\n<form action=\"/search\" method=\"get\">\n  <label for=\"query\">Search Query:</label>\n  <input type=\"text\" id=\"query\" name=\"q\">\n  <br><br>\n  <label for=\"username\">Profile Name:</label>\n  <input type=\"text\" id=\"username\" name=\"username\">\n  <br><br>\n  <button type=\"submit\">Perform Search</button>\n  <button type=\"submit\" formmethod=\"post\" formaction=\"/profile\" formtarget=\"_blank\">Save Profile</button>\n</form>\n```",
          "options": [],
          "analysisPoints": [
            "Tests practical application of `formaction`, `formmethod`, and `formtarget`.",
            "Requires correct HTML syntax for forms and buttons."
          ],
          "keyConcepts": [
            "formaction",
            "formmethod",
            "formtarget",
            "HTML forms",
            "HTTP methods"
          ],
          "evaluationCriteria": [
            "Correct usage of all specified overriding attributes.",
            "Proper HTML structure."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Forms",
            "Coding",
            "Hard"
          ],
          "prerequisites": [
            "html_forms",
            "http_methods"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_form_overrides_5",
          "topic": "HTML Form Overriding Attributes",
          "level": "easy",
          "type": "flashcard",
          "question": "Which form attribute is overridden by `formenctype` on a submit button?",
          "answer": "The `enctype` attribute of the parent `<form>` element.",
          "options": [],
          "analysisPoints": [
            "Tests direct recall of attribute relationships."
          ],
          "keyConcepts": [
            "formenctype",
            "enctype",
            "HTML forms"
          ],
          "evaluationCriteria": [
            "Accurate identification of the overridden attribute."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Forms",
            "Attributes",
            "Flashcard"
          ],
          "prerequisites": [
            "html_forms"
          ],
          "complexity": 3,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_viewport_1",
          "topic": "Meta Viewport Tag",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of `width=device-width` in the meta viewport tag?",
          "answer": "It sets the width of the viewport to the width of the device's screen, preventing mobile browsers from scaling pages down.",
          "options": [],
          "analysisPoints": [
            "Checks fundamental understanding of viewport scaling.",
            "Ensures recognition of `device-width`'s role in responsive design."
          ],
          "keyConcepts": [
            "Meta viewport",
            "Responsive design",
            "Device-width"
          ],
          "evaluationCriteria": [
            "Correctly identifies the function and benefit."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Responsive Design",
            "Viewport",
            "Flashcard"
          ],
          "prerequisites": [
            "html_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_viewport_2",
          "topic": "Meta Viewport Tag",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following `meta` viewport configurations is generally recommended for modern responsive web design, prioritizing accessibility?",
          "answer": "`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">`",
          "options": [
            "`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">`",
            "`<meta name=\"viewport\" content=\"initial-scale=1.0\">`",
            "`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">`",
            "`<meta name=\"viewport\" content=\"width=980px, user-scalable=yes\">`"
          ],
          "analysisPoints": [
            "Tests understanding of best practices for meta viewport.",
            "Highlights the importance of accessibility and avoiding zoom restrictions.",
            "Distinguishes correct attribute usage from common pitfalls."
          ],
          "keyConcepts": [
            "Meta viewport",
            "Accessibility",
            "Responsive design",
            "initial-scale",
            "user-scalable",
            "maximum-scale"
          ],
          "evaluationCriteria": [
            "Selection of the most accessible and effective viewport setting.",
            "Understanding why zoom restrictions are harmful."
          ],
          "example": "The option `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">` is the standard and recommended practice. It ensures the page scales correctly to the device width and allows users to zoom, which is crucial for accessibility. Options that restrict zooming (`maximum-scale=1.0`, `user-scalable=no`) are generally discouraged, and simply setting `initial-scale` without `width=device-width` might not prevent mobile browsers from rendering at a desktop width initially.",
          "tags": [
            "HTML",
            "Responsive Design",
            "Viewport",
            "MCQ",
            "Accessibility"
          ],
          "prerequisites": [
            "html_basics",
            "responsive_design_intro"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_viewport_3",
          "topic": "Meta Viewport Tag",
          "level": "medium",
          "type": "open",
          "question": "Explain the potential accessibility implications of using `user-scalable=no` or `maximum-scale=1.0` in the meta viewport tag.",
          "answer": "Using `user-scalable=no` or `maximum-scale=1.0` in the meta viewport tag significantly harms accessibility, particularly for users with visual impairments or certain motor disabilities. Many users rely on the ability to zoom into web content to read smaller text, view images more clearly, or interact with small touch targets. Disabling zooming prevents them from doing this, making the content unreadable or unusable. This violates WCAG (Web Content Accessibility Guidelines) principles, which advocate for flexible presentation and user control. It can lead to frustration and exclude a significant portion of users from accessing the information or functionality of the website.",
          "options": [],
          "analysisPoints": [
            "Tests understanding of accessibility best practices.",
            "Requires explanation of *why* certain viewport settings are problematic.",
            "Connects technical settings to user impact."
          ],
          "keyConcepts": [
            "Meta viewport",
            "Accessibility",
            "WCAG",
            "User experience",
            "Zooming"
          ],
          "evaluationCriteria": [
            "Clear explanation of negative accessibility impact.",
            "Mention of specific user groups affected (e.g., visually impaired).",
            "Reference to web accessibility guidelines (optional but good)."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Accessibility",
            "Responsive Design",
            "Open-ended"
          ],
          "prerequisites": [
            "html_basics",
            "accessibility_fundamentals"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_viewport_4",
          "topic": "Meta Viewport Tag",
          "level": "easy",
          "type": "code",
          "question": "Write the HTML `<meta>` tag that sets the viewport width to the device width and the initial zoom level to 1.0.",
          "answer": "```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```",
          "options": [],
          "analysisPoints": [
            "Tests direct recall of the standard meta viewport tag syntax.",
            "Ensures correct attribute values."
          ],
          "keyConcepts": [
            "Meta viewport",
            "width=device-width",
            "initial-scale=1.0"
          ],
          "evaluationCriteria": [
            "Correct HTML syntax.",
            "Accurate content attribute value."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Responsive Design",
            "Viewport",
            "Coding",
            "Easy"
          ],
          "prerequisites": [
            "html_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_viewport_5",
          "topic": "Meta Viewport Tag",
          "level": "easy",
          "type": "flashcard",
          "question": "What does `initial-scale=1.0` in the meta viewport tag mean?",
          "answer": "It sets the initial zoom level when the page is first loaded, ensuring no zoom is applied and 1 CSS pixel corresponds to 1 device-independent pixel.",
          "options": [],
          "analysisPoints": [
            "Tests recall of a key viewport attribute's function."
          ],
          "keyConcepts": [
            "initial-scale",
            "Viewport",
            "Zoom level"
          ],
          "evaluationCriteria": [
            "Correctly defines the attribute's effect."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Responsive Design",
            "Viewport",
            "Flashcard"
          ],
          "prerequisites": [
            "html_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_media_query_1",
          "topic": "CSS Media Queries",
          "level": "easy",
          "type": "flashcard",
          "question": "What CSS rule is used to define a media query?",
          "answer": "`@media` rule.",
          "options": [],
          "analysisPoints": [
            "Tests basic syntax knowledge."
          ],
          "keyConcepts": [
            "Media queries",
            "CSS syntax"
          ],
          "evaluationCriteria": [
            "Correct identification of the CSS rule."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Media Queries",
            "Basic",
            "Flashcard"
          ],
          "prerequisites": [
            "css_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_media_query_2",
          "topic": "CSS Media Queries",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following media queries would apply styles specifically when a user has dark mode enabled in their operating system preferences?",
          "answer": "`@media (prefers-color-scheme: dark)`",
          "options": [
            "`@media (color-scheme: dark)`",
            "`@media (display-mode: dark)`",
            "`@media (prefers-color-scheme: dark)`",
            "`@media (theme: dark)`"
          ],
          "analysisPoints": [
            "Tests knowledge of specific media features.",
            "Distinguishes correct syntax from plausible but incorrect options."
          ],
          "keyConcepts": [
            "Media queries",
            "prefers-color-scheme",
            "Dark mode"
          ],
          "evaluationCriteria": [
            "Accurate identification of the media feature for dark mode."
          ],
          "example": "The `prefers-color-scheme` media feature is specifically designed to detect whether the user has requested the system to use a light or dark color theme. Therefore, `@media (prefers-color-scheme: dark)` is the correct way to apply styles for dark mode.",
          "tags": [
            "CSS",
            "Media Queries",
            "MCQ",
            "Dark Mode"
          ],
          "prerequisites": [
            "css_media_queries_intro"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_media_query_3",
          "topic": "CSS Media Queries",
          "level": "medium",
          "type": "open",
          "question": "You are designing a responsive layout. Explain the difference between using `min-width` and `max-width` in media queries for defining breakpoints. When might you choose one over the other?",
          "answer": "The difference between `min-width` and `max-width` in media queries lies in the direction of the breakpoint. `min-width` applies styles when the viewport is *at least* the specified width or wider. This approach is often called 'mobile-first,' where you define base styles for small screens and then add styles for larger screens incrementally.\n\n`max-width` applies styles when the viewport is *at most* the specified width or narrower. This is often called 'desktop-first,' where you define base styles for large screens and then override or adjust them for smaller screens.\n\n**When to choose:**\n*   **`min-width` (Mobile-First):** Generally preferred. You start with a simple, baseline design for small screens (mobile) and then progressively enhance it for larger screens. This often leads to better performance on mobile devices (less CSS to load initially) and a more robust, scalable design process, as adding complexity is easier than removing it. It also aligns well with the modern emphasis on mobile browsing.\n*   **`max-width` (Desktop-First):** Can be used if an existing desktop design needs to be adapted for smaller screens, or if the design process naturally starts from a desktop view. However, it can sometimes lead to more complex CSS overrides for smaller screens and potentially larger initial CSS payloads for mobile users.",
          "options": [],
          "analysisPoints": [
            "Tests understanding of core media query concepts (`min-width` vs `max-width`).",
            "Requires explanation of 'mobile-first' vs 'desktop-first' approaches.",
            "Prompts discussion of practical implications and best practices."
          ],
          "keyConcepts": [
            "Media queries",
            "min-width",
            "max-width",
            "Mobile-first",
            "Desktop-first",
            "Responsive design"
          ],
          "evaluationCriteria": [
            "Clear definition of `min-width` and `max-width` behavior.",
            "Accurate explanation of mobile-first and desktop-first methodologies.",
            "Justification for choosing one over the other, including benefits/drawbacks."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Media Queries",
            "Responsive Design",
            "Open-ended",
            "Best Practices"
          ],
          "prerequisites": [
            "css_media_queries_intro"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_media_query_4",
          "topic": "CSS Media Queries",
          "level": "hard",
          "type": "code",
          "question": "Write CSS media queries to achieve the following:\n1.  For screens between 768px and 1023px wide (inclusive), set the body background to `lightblue`.\n2.  For screens wider than or equal to 1024px AND in landscape orientation, set the body background to `darkgreen` and text color to `white`.\n3.  For any screen where the `device-aspect-ratio` is `4/3`, set the body padding to `20px`.\n4.  On high-resolution displays (2dppx or more), make images with class `icon` display a higher-resolution version `icon@2x.png`.",
          "answer": "```css\n/* 1. For screens between 768px and 1023px wide */\n@media (min-width: 768px) and (max-width: 1023px) {\n  body {\n    background-color: lightblue;\n  }\n}\n\n/* 2. For screens wider than or equal to 1024px AND in landscape orientation */\n@media (min-width: 1024px) and (orientation: landscape) {\n  body {\n    background-color: darkgreen;\n    color: white;\n  }\n}\n\n/* 3. For any screen where the device-aspect-ratio is 4/3 */\n@media screen and (device-aspect-ratio: 4/3) {\n  body {\n    padding: 20px;\n  }\n}\n\n/* 4. On high-resolution displays (2dppx or more) */\n@media screen and (min-resolution: 2dppx) {\n  .icon {\n    content: url('icon@2x.png'); /* Assumes the image is naturally scaled */\n    /* You might also need: width: 50px; height: 50px; if the 2x image is twice the size and you want to display it at original size */\n  }\n}\n\n/* For broader compatibility with high-res displays, you might add vendor prefixes for -webkit-min-device-pixel-ratio */\n/* @media screen and (-webkit-min-device-pixel-ratio: 2), screen and (min-resolution: 2dppx) { ... } */\n```",
          "options": [],
          "analysisPoints": [
            "Tests ability to combine multiple media features (`and`).",
            "Checks understanding of range-based breakpoints.",
            "Evaluates knowledge of less common but important media features (`orientation`, `device-aspect-ratio`, `min-resolution`).",
            "Assesses practical application for serving high-res images."
          ],
          "keyConcepts": [
            "Media queries",
            "min-width",
            "max-width",
            "orientation",
            "device-aspect-ratio",
            "min-resolution",
            "Responsive images"
          ],
          "evaluationCriteria": [
            "Correct syntax for all media queries.",
            "Accurate use of logical operators (`and`).",
            "Appropriate application of `content` property for responsive images."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Media Queries",
            "Coding",
            "Hard",
            "Responsive Design"
          ],
          "prerequisites": [
            "css_media_queries_intro",
            "css_properties"
          ],
          "complexity": 9,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_media_query_5",
          "topic": "CSS Media Queries",
          "level": "medium",
          "type": "mcq",
          "question": "Which CSS snippet would style a `div` element to be 50% width on tablet devices (viewport width between 768px and 1024px, exclusive of 1024px) and 80% width on mobile devices (viewport width less than 768px)? Assume base styles for mobile are defined outside any media query.",
          "answer": "```css\ndiv {\n  width: 80%; /* Mobile devices */\n}\n\n@media (min-width: 768px) and (max-width: 1023px) {\n  div {\n    width: 50%; /* Tablet devices */\n  }\n}\n```",
          "options": [
            "```css\ndiv {\n  width: 80%; /* Mobile devices */\n}\n\n@media (min-width: 768px) and (max-width: 1023px) {\n  div {\n    width: 50%; /* Tablet devices */\n  }\n}\n```",
            "```css\ndiv {\n  width: 50%;\n}\n\n@media (max-width: 767px) {\n  div {\n    width: 80%;\n  }\n}\n\n@media (min-width: 768px) and (max-width: 1024px) {\n  div {\n    width: 50%;\n  }\n}\n```",
            "```css\ndiv {\n  width: 80%;\n}\n\n@media (min-width: 768px) {\n  div {\n    width: 50%;\n  }\n}\n```",
            "```css\ndiv {\n  width: 50%;\n}\n\n@media (min-width: 768px) and (max-width: 1024px) {\n  div {\n    width: 80%;\n  }\n}\n```"
          ],
          "analysisPoints": [
            "Tests the ability to correctly define breakpoint ranges using `min-width` and `max-width`.",
            "Evaluates understanding of CSS cascade and mobile-first approach implication.",
            "Checks for correct logical combination of media features."
          ],
          "keyConcepts": [
            "Media queries",
            "min-width",
            "max-width",
            "Breakpoint ranges",
            "CSS cascade",
            "Mobile-first"
          ],
          "evaluationCriteria": [
            "Correctly applied `min-width` and `max-width` for the specified ranges.",
            "Adherence to mobile-first principle where base styles are for mobile."
          ],
          "example": "The correct answer demonstrates a mobile-first approach. The `div` has a base width of `80%` (for mobile, i.e., less than 768px). The media query `@media (min-width: 768px) and (max-width: 1023px)` specifically targets the tablet range (768px to 1023px, as 1024px is exclusive) and overrides the width to `50%` for that range. Other options either use incorrect ranges, don't adhere to mobile-first implicitly, or use incorrect logical operators.",
          "tags": [
            "CSS",
            "Media Queries",
            "MCQ",
            "Responsive Design",
            "Intermediate"
          ],
          "prerequisites": [
            "css_media_queries_intro",
            "css_cascade"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_media_query_6",
          "topic": "CSS Media Queries",
          "level": "easy",
          "type": "flashcard",
          "question": "What does `2dppx` refer to in `min-resolution: 2dppx`?",
          "answer": "`2dppx` means 2 dots per pixel unit (device-independent pixel). It is a unit for resolution, often used to target high-resolution (Retina) displays, indicating that there are 2 physical device pixels for every 1 CSS pixel.",
          "options": [],
          "analysisPoints": [
            "Tests recall of resolution units in media queries."
          ],
          "keyConcepts": [
            "Media queries",
            "resolution",
            "dppx",
            "Retina display"
          ],
          "evaluationCriteria": [
            "Correctly defines `dppx` and its purpose."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Media Queries",
            "Flashcard",
            "Resolution"
          ],
          "prerequisites": [
            "css_media_queries_intro"
          ],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_media_query_7",
          "topic": "CSS Media Queries",
          "level": "medium",
          "type": "open",
          "question": "Discuss the advantages of using `em` or `rem` units for media query breakpoints compared to `px` units.",
          "answer": "Using `em` or `rem` units for media query breakpoints offers significant advantages in terms of accessibility and flexibility compared to `px` units:\n\n1.  **Accessibility (User Preference):** `em` and `rem` units are relative to font sizes. `em` is relative to the font-size of its parent element (or the element itself for `font-size` property), while `rem` is relative to the root `html` element's `font-size`. If a user has changed their browser's default font size setting (e.g., for visual impairment), breakpoints defined in `em` or `rem` will adjust accordingly. This means the layout will break and adapt at points that are meaningful *to the user's preferred text size*, rather than rigidly at fixed pixel widths. This provides a more adaptive and accessible experience.\n2.  **Maintainability and Scalability:** When using `rem` for breakpoints (and often for other sizing), changing the base font size on the `html` element can proportionally scale the entire layout and its breakpoints. This makes it easier to manage and scale the design across different contexts or for future redesigns without having to individually adjust numerous pixel values.",
          "options": [],
          "analysisPoints": [
            "Tests understanding of CSS units in the context of responsive design.",
            "Requires discussion of accessibility implications.",
            "Highlights practical benefits for development and maintenance."
          ],
          "keyConcepts": [
            "Media queries",
            "em",
            "rem",
            "px",
            "Accessibility",
            "Responsive design",
            "CSS units"
          ],
          "evaluationCriteria": [
            "Clear explanation of `em`/`rem` relativity.",
            "Emphasis on accessibility as a primary advantage.",
            "Discussion of maintainability benefits."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Media Queries",
            "Responsive Design",
            "Open-ended",
            "Best Practices"
          ],
          "prerequisites": [
            "css_units",
            "css_media_queries_intro"
          ],
          "complexity": 7,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_form_overrides_1",
          "title": "Dynamic Form Submission with Overrides",
          "description": "\nCreate an HTML page with a form that demonstrates the use of form overriding attributes. The form should:\n\n1.  Have a default `action` to `/default-action` and `method` as `GET`.\n2.  Include an `input` field for user input (e.g., 'item name').\n3.  Include two submit buttons:\n    *   The first button, labeled 'Search Item', should use the form's default `action` and `method`.\n    *   The second button, labeled 'Add New Item', must submit the form data to a different URL (`/api/add-item`) using the `POST` method and open the response in a new blank tab/window.\n\nVerify that clicking each button triggers the specified behavior by inspecting network requests or observing browser tab behavior (you can use dummy URLs for demonstration).\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Form Overrides Demo</title>\n  <style>\n    body { font-family: Arial, sans-serif; margin: 20px; }\n    form { border: 1px solid #ccc; padding: 20px; border-radius: 5px; max-width: 400px; }\n    label, input, button { display: block; margin-bottom: 10px; }\n    button { padding: 8px 15px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }\n    button:hover { background-color: #0056b3; }\n  </style>\n</head>\n<body>\n  <h2>Dynamic Form Submission</h2>\n  <form action=\"/default-action\" method=\"get\">\n    <label for=\"item-name\">Item Name:</label>\n    <input type=\"text\" id=\"item-name\" name=\"item\" placeholder=\"e.g., Laptop\">\n\n    <!-- TODO: Add the two submit buttons as per requirements -->\n\n  </form>\n</body>\n</html>",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Form Overrides Demo</title>\n  <style>\n    body { font-family: Arial, sans-serif; margin: 20px; }\n    form { border: 1px solid #ccc; padding: 20px; border-radius: 5px; max-width: 400px; }\n    label, input, button { display: block; margin-bottom: 10px; }\n    button { padding: 8px 15px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }\n    button:hover { background-color: #0056b3; }\n    button + button { margin-top: 15px; }\n  </style>\n</head>\n<body>\n  <h2>Dynamic Form Submission</h2>\n  <form action=\"/default-action\" method=\"get\">\n    <label for=\"item-name\">Item Name:</label>\n    <input type=\"text\" id=\"item-name\" name=\"item\" placeholder=\"e.g., Laptop\">\n\n    <button type=\"submit\">Search Item</button>\n    <button type=\"submit\" formaction=\"/api/add-item\" formmethod=\"post\" formtarget=\"_blank\">Add New Item</button>\n\n  </form>\n  <p><em>(Note: URLs are dummy for demonstration. Check network tab for method/action or new tab for target.)</em></p>\n</body>\n</html>",
          "testCases": [
            "Clicking 'Search Item' button: The browser should navigate to `/default-action?item=<input_value>` using the GET method (check browser URL or network tab).",
            "Clicking 'Add New Item' button: The browser should attempt to submit to `/api/add-item` using the POST method, and a new blank tab/window should open. (Check network tab for method/URL, and browser for new tab)."
          ],
          "hints": [
            "Remember that `type=\"submit\"` is crucial for buttons to trigger form submission.",
            "The overriding attributes (`formaction`, `formmethod`, `formtarget`) are applied directly to the `button` or `input[type=\"submit\"]` element.",
            "You can inspect the network requests in your browser's developer tools (usually F12 -> Network tab) to verify the HTTP method and URL."
          ],
          "tags": [
            "HTML",
            "Forms",
            "Attributes",
            "Frontend Interview",
            "Web Development"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "html_forms",
            "http_methods"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "formaction",
            "formmethod",
            "formtarget",
            "form_element"
          ]
        },
        {
          "id": "task_meta_viewport_1",
          "title": "Configure Responsive Page with Meta Viewport",
          "description": "\nCreate a basic HTML document that is correctly configured for responsive display on various devices.\n\nYour task is to:\n\n1.  Set up a standard HTML5 document structure.\n2.  Include the essential `<meta name=\"viewport\">` tag to ensure proper scaling and initial zoom level.\n3.  Add some basic content (e.g., a heading, a paragraph).\n4.  Optionally, include a simple CSS rule to demonstrate responsiveness (e.g., `body { font-size: 16px; }` and later adjusted by a media query for larger screens, but the core of this task is the meta tag).\n\nVerify the responsiveness by resizing your browser window or using browser developer tools to simulate mobile devices.\n",
          "difficulty": "easy",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <!-- TODO: Add the meta viewport tag here -->\n  <title>Responsive Page</title>\n  <style>\n    body {\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n      margin: 20px;\n      line-height: 1.6;\n      color: #333;\n    }\n    h1 { color: #0056b3; }\n    p { max-width: 600px; }\n  </style>\n</head>\n<body>\n  <h1>My Awesome Responsive Page</h1>\n  <p>This page is designed to adapt to various screen sizes. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n</body>\n</html>",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Responsive Page</title>\n  <style>\n    body {\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n      margin: 20px;\n      line-height: 1.6;\n      color: #333;\n    }\n    h1 { color: #0056b3; }\n    p { max-width: 600px; }\n\n    /* Optional: Add a simple media query to observe changes */\n    @media (max-width: 600px) {\n      body {\n        margin: 10px;\n        font-size: 0.9em;\n      }\n    }\n  </style>\n</head>\n<body>\n  <h1>My Awesome Responsive Page</h1>\n  <p>This page is designed to adapt to various screen sizes. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n</body>\n</html>",
          "testCases": [
            "Open the HTML file in a web browser.",
            "Resize the browser window from a very wide desktop view to a very narrow mobile view.",
            "Use your browser's developer tools (e.g., Chrome DevTools device toolbar) to simulate various mobile devices (e.g., iPhone SE, Pixel 5).",
            "Observe that the content scales appropriately and text remains readable without needing to pinch-zoom (if zoom is allowed)."
          ],
          "hints": [
            "The `meta` tag should be placed within the `<head>` section of your HTML document.",
            "The two most important `content` attributes for basic responsiveness are `width=device-width` and `initial-scale=1.0`.",
            "Avoid `user-scalable=no` or `maximum-scale=1.0` unless there's an extremely specific, accessibility-reviewed reason."
          ],
          "tags": [
            "HTML",
            "Responsive Design",
            "Viewport",
            "Frontend Interview",
            "Web Basics"
          ],
          "timeEstimate": 15,
          "prerequisites": [
            "html_structure"
          ],
          "complexity": 3,
          "interviewRelevance": 9,
          "learningPath": "beginner",
          "relatedConcepts": [
            "meta_viewport",
            "width_device-width",
            "initial-scale"
          ]
        },
        {
          "id": "task_media_queries_1",
          "title": "Responsive Container with Dynamic Styling",
          "description": "\nImplement a responsive design for a simple container `div` using CSS media queries. The container should visually change based on screen width and user color scheme preference.\n\n**Requirements:**\n\n1.  **Base Styles (Mobile-First):** For viewports less than `768px`:\n    *   The `div` should have a `background-color` of `lightcoral`.\n    *   `font-size` of `16px`.\n    *   `width` of `90%`.\n2.  **Tablet Styles:** For viewports from `768px` up to `1023px` (inclusive):\n    *   `background-color` of `lightgreen`.\n    *   `font-size` of `18px`.\n    *   `width` of `70%`.\n3.  **Desktop Styles:** For viewports `1024px` and wider:\n    *   `background-color` of `lightblue`.\n    *   `font-size` of `20px`.\n    *   `width` of `50%`.\n4.  **Dark Mode Preference:** When the user's system `prefers-color-scheme` is `dark`, the `body` background should be `#333` and its text `color` should be `white`, regardless of viewport size. This rule should override base body styles.\n5.  **High-Resolution Display:** For screens with `min-resolution: 2dppx`, change the `border` of the container `div` to `5px solid purple`.\n\nYour solution should be robust enough to test by resizing the browser and toggling your system's dark/light mode.\n",
          "difficulty": "hard",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Responsive Container</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Responsive Demo</h1>\n    <p>Watch me change based on your screen size and system theme!</p>\n  </div>\n</body>\n</html>\n\n/* styles.css */\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n  background-color: #f0f0f0; /* Default light background */\n  color: #333;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 90vh;\n}\n\n.container {\n  padding: 20px;\n  border-radius: 8px;\n  text-align: center;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n  transition: all 0.3s ease-in-out;\n\n  /* TODO: Add base (mobile) styles here */\n\n}\n\n/* TODO: Add tablet, desktop, dark mode, and high-res media queries */\n\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Responsive Container</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Responsive Demo</h1>\n    <p>Watch me change based on your screen size and system theme!</p>\n  </div>\n</body>\n</html>\n\n/* styles.css */\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n  background-color: #f0f0f0; /* Default light background */\n  color: #333;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 90vh;\n}\n\n.container {\n  padding: 20px;\n  border-radius: 8px;\n  text-align: center;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n  transition: all 0.3s ease-in-out;\n\n  /* Base (Mobile-First) Styles */\n  background-color: lightcoral;\n  font-size: 16px;\n  width: 90%;\n}\n\n/* Tablet Styles */\n@media (min-width: 768px) and (max-width: 1023px) {\n  .container {\n    background-color: lightgreen;\n    font-size: 18px;\n    width: 70%;\n  }\n}\n\n/* Desktop Styles */\n@media (min-width: 1024px) {\n  .container {\n    background-color: lightblue;\n    font-size: 20px;\n    width: 50%;\n  }\n}\n\n/* Dark Mode Preference */\n@media (prefers-color-scheme: dark) {\n  body {\n    background-color: #333;\n    color: white;\n  }\n  .container {\n    box-shadow: 0 4px 8px rgba(255,255,255,0.1); /* Adjust shadow for dark mode */\n  }\n}\n\n/* High-Resolution Display */\n@media screen and (min-resolution: 2dppx) {\n  .container {\n    border: 5px solid purple;\n  }\n}",
          "testCases": [
            "**Mobile Viewport (< 768px):** Resize browser window to be small. The container should be `lightcoral`, `16px` font, and `90%` width.",
            "**Tablet Viewport (768px - 1023px):** Resize browser window to be in this range. The container should be `lightgreen`, `18px` font, and `70%` width.",
            "**Desktop Viewport (>= 1024px):** Resize browser window to be large. The container should be `lightblue`, `20px` font, and `50%` width.",
            "**Dark Mode:** Toggle your operating system's dark mode setting. The `body` background should become `#333` and text `white` (overriding the other background colors).",
            "**High-Resolution Display:** If you have a Retina/high-DPI display, or simulate one in dev tools, the container should get a `5px solid purple` border (this will apply in addition to other styles)."
          ],
          "hints": [
            "Remember the mobile-first approach: define default styles for the smallest screens first, then use `min-width` for larger breakpoints.",
            "To target a range (e.g., tablet), combine `min-width` and `max-width` using the `and` keyword.",
            "The `prefers-color-scheme` media feature is independent of screen width; it can be combined with other queries or used standalone.",
            "Use your browser's developer tools (e.g., Chrome DevTools -> Toggle device toolbar) to easily test different screen sizes and enable/disable dark mode simulation (often under 'Rendering' or 'More tools')."
          ],
          "tags": [
            "CSS",
            "Media Queries",
            "Responsive Design",
            "Frontend Interview",
            "Advanced CSS",
            "User Preferences"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "css_basics",
            "css_box_model",
            "css_units"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "min-width",
            "max-width",
            "prefers-color-scheme",
            "min-resolution",
            "mobile_first",
            "breakpoints"
          ]
        }
      ]
    }
  },
  {
    "id": "9488c877-bddd-4269-a80a-c6a63cd764c9",
    "startLine": 11600,
    "endLine": 11699,
    "processedDate": "2025-06-17T12:29:00.159Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_canvas_fundamentals",
          "title": "HTML Canvas API Fundamentals",
          "content": "The HTML Canvas API provides a powerful means for drawing graphics dynamically using JavaScript and the `<canvas>` element. It's a pixel-based drawing surface, ideal for creating a wide variety of visual content such as graphs, game graphics, custom art, and interactive visualizations.\n\n## Basic Setup and Context\nTo start drawing, you first need an HTML `<canvas>` element on your page. You then obtain its 2D rendering context using `getContext('2d')` in JavaScript.\n\n```html\n<!-- Basic canvas element -->\n<canvas id=\"myCanvas\" width=\"500\" height=\"300\"></canvas>\n```\n\nThe `width` and `height` attributes define the size of the drawing surface in pixels. If not specified, they default to 300px width and 150px height.\n\n## Core Drawing Operations\nOnce you have the 2D rendering context (commonly named `ctx`), you can use various methods to draw shapes, lines, text, and images.\n\n### Rectangles\n- `fillRect(x, y, width, height)`: Draws a filled rectangle.\n- `strokeRect(x, y, width, height)`: Draws a rectangular outline.\n- `clearRect(x, y, width, height)`: Clears the specified rectangular area, making it fully transparent. This is crucial for animations.\n\n### Paths\nPaths are sequences of lines and curves. You define a path and then `stroke` it (draw the outline) or `fill` it (fill the enclosed area).\n- `beginPath()`: Starts a new path by emptying the list of sub-paths. Call this before defining a new shape.\n- `moveTo(x, y)`: Moves the pen to the specified coordinates without drawing a line.\n- `lineTo(x, y)`: Draws a line from the current point to the specified coordinates.\n- `arc(x, y, radius, startAngle, endAngle, anticlockwise)`: Adds an arc to the path. `startAngle` and `endAngle` are in radians. `anticlockwise` is an optional boolean (default `false`).\n- `closePath()`: Connects the last point to the start point of the current sub-path, closing the shape.\n- `stroke()`: Draws the defined path outline.\n- `fill()`: Fills the defined path.\n\n### Text\n- `font = value`: Sets the font properties (e.g., '24px Arial').\n- `fillText(text, x, y, maxWidth)`: Draws filled text at the specified coordinates.\n- `strokeText(text, x, y, maxWidth)`: Draws outlined text.\n\n### Images\n- `drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)`: Draws an image onto the canvas. It has several overloads to allow drawing entire images, or just portions of an image, and scaling them. The simplest form is `drawImage(image, x, y, width, height)`.\n\n## Animation\nCanvas animations typically involve clearing the canvas, updating the state of objects, redrawing objects in their new positions, and then requesting the next frame using `requestAnimationFrame`.\n\n- `requestAnimationFrame(callback)`: Tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. This method provides an optimized way to animate, ensuring smooth animations by syncing with the browser's repaint cycle.\n\n### Styling Properties\n- `fillStyle`: Sets the color, gradient, or pattern to use inside shapes. Can be a CSS color string, a `CanvasGradient` object, or a `CanvasPattern` object.\n- `strokeStyle`: Sets the color, gradient, or pattern to use for strokes (outlines).\n- `lineWidth`: Sets the thickness of lines.\n- `lineCap`: Sets the style of the ends of lines (`butt`, `round`, `square`).\n- `lineJoin`: Sets the style of the corners where lines meet (`round`, `bevel`, `miter`).\n- `shadowColor`, `shadowBlur`, `shadowOffsetX`, `shadowOffsetY`: Properties for adding shadows to shapes.",
          "examples": [
            {
              "id": "example_canvas_basic_drawing_1",
              "title": "Basic Canvas Drawing Operations",
              "code": "const canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\n// Drawing a filled blue rectangle\nctx.fillStyle = 'blue';\nctx.fillRect(10, 10, 150, 100); // x, y, width, height\n\n// Drawing a path (triangle outline with fill)\nctx.beginPath();\nctx.moveTo(50, 50); // Starting point\nctx.lineTo(200, 100); // Line to this point\nctx.lineTo(150, 200);\nctx.closePath(); // Connect back to start\nctx.strokeStyle = 'red';\nctx.lineWidth = 3;\nctx.stroke(); // Draw the outline\nctx.fillStyle = 'lightgreen';\nctx.fill(); // Fill the shape\n\n// Drawing a filled black circle\nctx.beginPath();\nctx.arc(250, 150, 50, 0, Math.PI * 2); // x, y, radius, start angle, end angle\nctx.fillStyle = 'black';\nctx.fill();\n\n// Drawing text\nctx.font = '24px Arial';\nctx.fillStyle = 'purple';\nctx.fillText('Hello Canvas', 150, 50); // Text, x, y",
              "explanation": "This example demonstrates how to initialize a canvas context and use fundamental drawing methods. It covers drawing rectangles, custom paths (like a triangle), circles, and text, along with setting fill and stroke styles. The `beginPath()` and `closePath()` methods are essential for defining independent shapes.",
              "language": "javascript"
            },
            {
              "id": "example_canvas_image_animation_2",
              "title": "Drawing Images and Basic Animation",
              "code": "const canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\nlet xPos = 0;\nconst img = new Image();\nimg.onload = function() {\n  function animate() {\n    // Clear canvas for next frame\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Update position\n    xPos = (xPos + 1) % canvas.width; \n    \n    // Draw image at new position\n    ctx.drawImage(img, xPos, 50, 100, 100); // img, x, y, width, height\n    \n    // Request next frame\n    requestAnimationFrame(animate);\n  }\n\n  // Start animation after image loads\n  animate();\n};\nimg.src = 'https://via.placeholder.com/100'; // Placeholder image",
              "explanation": "This example shows how to load and draw an image onto the canvas. It also introduces a basic animation loop using `requestAnimationFrame`. The `clearRect` method is vital here to erase previous frames before redrawing the image in its new position, creating the illusion of movement. The image `src` uses a placeholder for demonstration purposes.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Canvas API",
            "HTML",
            "JavaScript",
            "Graphics",
            "Drawing",
            "Animation"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "HTML_DOM",
            "JavaScript_Functions",
            "JavaScript_Events"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Web_Games",
            "Data_Visualization",
            "Interactive_Graphics"
          ]
        },
        {
          "id": "theory_canvas_advanced_features",
          "title": "Advanced Canvas Features: Pixels, Transformations, Gradients, and Compositing",
          "content": "Beyond basic shapes, the Canvas API offers advanced functionalities for fine-grained control over pixels, applying transformations, creating complex fills, and controlling how new drawings blend with existing content.\n\n## Pixel Manipulation\nThe Canvas API allows direct manipulation of individual pixels, which is powerful for image processing effects, custom filters, or creating pixel-perfect drawings.\n- `getImageData(sx, sy, sw, sh)`: Returns an `ImageData` object representing the underlying pixel data for a specified rectangle of the canvas.\n- `putImageData(imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight)`: Puts the `ImageData` object's data back onto the canvas.\n- `ImageData` Object: Contains `width`, `height`, and `data` (a `Uint8ClampedArray` where each pixel is represented by four values: R, G, B, A, in that order).\n\n## Transformations\nTransformations allow you to move, rotate, scale, and skew the canvas coordinate system itself, affecting all subsequent drawing operations.\n- `translate(x, y)`: Moves the canvas origin (0,0) by `x` and `y` units.\n- `rotate(angle)`: Rotates the canvas clockwise around its current origin by `angle` (in radians).\n- `scale(x, y)`: Scales the canvas horizontally by `x` and vertically by `y`. Values less than 1 shrink, values greater than 1 enlarge.\n- `save()`: Saves the current drawing state (including transformations, styles, and clip paths) to a stack.\n- `restore()`: Restores the most recently saved drawing state from the stack. This is crucial for applying temporary transformations.\n\n## Gradients and Patterns\nYou can use gradients for smooth color transitions and patterns for repeating images as fills.\n- `createLinearGradient(x0, y0, x1, y1)`: Creates a linear gradient object. You then add color stops using `gradient.addColorStop(offset, color)`.\n- `createRadialGradient(x0, y0, r0, x1, y1, r1)`: Creates a radial (circular) gradient object, defined by two circles. Also uses `addColorStop`.\n- `createPattern(image, repetition)`: Creates a pattern object from an image (or another canvas or video element). `repetition` can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.\n\n## Compositing\nCompositing (or blend modes) defines how new shapes or images drawn onto the canvas interact with existing content.\n- `globalCompositeOperation = type`: Sets the type of compositing operation to apply. Common values include:\n    - `'source-over'` (default): New shapes are drawn on top of existing content.\n    - `'destination-over'`: New shapes are drawn behind existing content.\n    - `'source-atop'`: New shapes are drawn only where they overlap with existing content (existing content is used as a mask).\n    - `'xor'`: Areas where new and existing content overlap are made transparent.\n    - `'multiply'`, `'screen'`, `'overlay'`, etc. (similar to Photoshop blend modes).\n\nThese advanced features enable the creation of highly dynamic and visually rich canvas applications.",
          "examples": [
            {
              "id": "example_canvas_transformations_1",
              "title": "Canvas Transformations: Translate, Rotate, Scale",
              "code": "const canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\nctx.fillStyle = 'red';\nctx.fillRect(10, 10, 50, 50);\n\nctx.save(); // Save the current state\n\nctx.translate(100, 100); // Move origin to (100, 100)\nctx.rotate(Math.PI / 4); // Rotate 45 degrees (clockwise)\nctx.scale(1.5, 0.5); // Scale by 1.5x horizontally, 0.5x vertically\n\nctx.fillStyle = 'green';\nctx.fillRect(0, 0, 50, 50); // Draw rectangle at new origin (relative to translated/rotated/scaled system)\n\nctx.restore(); // Restore to the state before save()\n\nctx.fillStyle = 'blue';\nctx.fillRect(200, 10, 50, 50); // This rectangle is drawn in the original coordinate system",
              "explanation": "This example demonstrates how `translate`, `rotate`, and `scale` transform the canvas coordinate system. The `save()` and `restore()` methods are critical for applying temporary transformations to specific drawing operations without affecting subsequent independent drawings. The green rectangle is drawn relative to the transformed origin, while the red and blue rectangles are drawn in the original coordinate system.",
              "language": "javascript"
            },
            {
              "id": "example_canvas_gradients_compositing_2",
              "title": "Gradients and Compositing",
              "code": "const canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\n// Create a linear gradient\nconst linearGradient = ctx.createLinearGradient(0, 0, 200, 0);\nlinearGradient.addColorStop(0, 'purple');\nlinearGradient.addColorStop(1, 'orange');\n\nctx.fillStyle = linearGradient;\nctx.fillRect(50, 50, 200, 100);\n\n// Demonstrate compositing\nctx.fillStyle = 'rgba(0, 0, 255, 0.7)'; // Semi-transparent blue\nctx.fillRect(100, 100, 200, 100); // This overlaps the gradient\n\n// Now apply a different composite operation\nctx.globalCompositeOperation = 'multiply'; // For example, 'multiply' or 'xor'\nctx.fillStyle = 'rgba(255, 0, 0, 0.7)'; // Semi-transparent red\nctx.fillRect(150, 150, 200, 100); // This will interact differently",
              "explanation": "This example showcases how to create and apply a linear gradient as a fill style. It also demonstrates the effect of `globalCompositeOperation`. The first blue rectangle overlaps the gradient with the default 'source-over' mode. The second red rectangle, drawn after setting `globalCompositeOperation` to 'multiply', interacts with the existing content (gradient and blue rectangle) using the specified blend mode, resulting in a different visual outcome.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Canvas API",
            "Image Processing",
            "Transformations",
            "Gradients",
            "Patterns",
            "Compositing",
            "Pixel Manipulation"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "theory_canvas_fundamentals"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "requiredFor": [
            "Custom_Image_Filters",
            "Advanced_Animations",
            "Data_Visualization"
          ]
        },
        {
          "id": "theory_canvas_vs_svg",
          "title": "Canvas vs. SVG: A Comparison",
          "content": "Both Canvas and SVG (Scalable Vector Graphics) are powerful technologies for drawing graphics in the browser, but they operate on fundamentally different principles and are suited for different use cases.\n\n## Canvas\n- **Pixel-based (Raster Graphics)**: Canvas draws directly onto a bitmap. Once drawn, individual shapes are not 'remembered' by the canvas; only the pixels remain. To modify a shape, you typically clear the canvas and redraw the entire scene.\n- **Resolution-Dependent**: The graphics on a canvas can appear pixelated if scaled up beyond their original resolution. The size of the canvas element (CSS pixels) can be different from its internal drawing surface (device pixels), which can affect clarity, especially on high-DPI screens.\n- **Performance**: Generally better for complex scenes with many objects or pixel-level manipulation (e.g., games, image filters) because rendering is done directly to a bitmap, leveraging GPU acceleration.\n- **Interaction**: Interaction with individual shapes requires manual hit-testing (calculating if a mouse click falls within a shape's drawn pixels).\n- **Accessibility**: Less accessible by default, as the content is a single bitmap. Requires explicit ARIA attributes or off-screen DOM elements for accessibility.\n- **Server-Side Rendering**: Can be used server-side (e.g., with Node.js and `node-canvas`) to generate image files.\n\n## SVG\n- **Vector-based**: SVG uses XML to describe graphics as mathematical shapes (paths, circles, rectangles, text). Each shape is an independent DOM element.\n- **Resolution-Independent**: SVG graphics scale perfectly to any size or resolution without losing quality, as they are defined by vectors, not pixels.\n- **Performance**: Can become slower than Canvas for very complex scenes with an extremely large number of independent objects, as each object corresponds to a DOM element.\n- **Interaction**: Excellent for interactivity. Each SVG element is a DOM node, meaning you can attach event listeners directly to individual shapes and manipulate them easily with CSS or JavaScript.\n- **Accessibility**: Highly accessible by nature, as its content is structured XML. Text is selectable, and elements can have titles, descriptions, and be navigated by assistive technologies.\n- **CSS/JavaScript Manipulation**: Elements can be styled with CSS and manipulated with JavaScript just like regular HTML elements.\n\n## When to choose which?\n- **Choose Canvas for:**\n    - Games and animations with many moving parts.\n    - Real-time video processing or effects.\n    - Data visualizations with frequent updates or complex custom rendering (e.g., heatmaps).\n    - Drawing static images that are pixel-perfect.\n- **Choose SVG for:**\n    - Icons, logos, and illustrations that need to scale without quality loss.\n    - Interactive dashboards or charts where individual elements need to be selectable and styled dynamically.\n    - Infographics and static diagrams.\n    - Graphics that need to be easily printed at high resolution.",
          "examples": [],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Canvas API",
            "SVG",
            "Graphics",
            "Web Development",
            "Comparison",
            "Performance"
          ],
          "technology": "HTML, SVG, JavaScript",
          "prerequisites": [
            "theory_canvas_fundamentals"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Frontend_Architecture",
            "Graphics_Choosing"
          ]
        },
        {
          "id": "theory_css_selectors",
          "title": "CSS Core Concepts: CSS Selectors",
          "content": "CSS selectors are patterns used to select the HTML elements you want to style. They are the fundamental building blocks for applying styles effectively and precisely.\n\n## Basic Selectors\nThese selectors target elements based on their type, class, or ID.\n\n- `*` (Universal Selector): Selects all elements on the page.\n    ```css\n    * {\n      box-sizing: border-box;\n    }\n    ```\n- `elementName` (Type Selector): Selects all elements of a given HTML tag name.\n    ```css\n    div {\n      border: 1px solid black;\n    }\n    ```\n- `.className` (Class Selector): Selects all elements with a specific class attribute. Classes can be applied to multiple elements.\n    ```css\n    .class-name {\n      color: blue;\n    }\n    ```\n- `#idName` (ID Selector): Selects a single element with a specific ID attribute. IDs must be unique within an HTML document.\n    ```css\n    #id-name {\n      font-size: 20px;\n    }\n    ```\n\n## Attribute Selectors\nAttribute selectors target elements based on the presence or value of an HTML attribute.\n\n- `[attr]` (Presence): Selects elements that have the specified attribute, regardless of its value.\n    ```css\n    [aria-hidden] {\n      opacity: 0;\n    }\n    ```\n- `[attr=\"value\"]` (Exact Value): Selects elements where the attribute has exactly the specified value.\n    ```css\n    [type=\"submit\"] {\n      background-color: green;\n    }\n    ```\n- `[attr*=\"value\"]` (Contains Substring): Selects elements where the attribute's value contains the specified substring anywhere.\n    ```css\n    [class*=\"icon-\"] {\n      display: inline-block;\n    }\n    ```\n- `[attr^=\"value\"]` (Starts With): Selects elements where the attribute's value begins with the specified substring.\n    ```css\n    [href^=\"https://\"] {\n      color: green;\n    }\n    ```\n- `[attr$=\"value\"]` (Ends With): Selects elements where the attribute's value ends with the specified substring.\n    ```css\n    [src$=\".png\"] {\n      border: 2px solid purple;\n    }\n    ```\n- `[attr~=\"value\"]` (Contains Word): Selects elements where the attribute's value contains the specified word, separated by spaces (like a class list).\n    ```css\n    [data-tags~=\"featured\"] {\n      font-weight: bold;\n    }\n    ```\n- `[attr|=\"value\"]` (Begins With Word or Hyphen): Selects elements where the attribute's value is exactly the specified value, or starts with the value followed by a hyphen (e.g., `lang=\"en\"` or `lang=\"en-us\"`).\n    ```css\n    [lang|=\"en\"] {\n      font-family: 'Segoe UI';\n    }\n    ```\n- `[data-attribute=\"value\"]` (Custom Data Attributes): A common use case for attribute selectors is targeting custom `data-*` attributes, which are used to store custom data private to the page or application.\n    ```css\n    [data-filetype=\"image\"] {\n      border: 1px dashed grey;\n    }\n    ```\n\n## Combinators\nCombinators explain the relationship between selectors.\n\n- ` ` (Descendant Selector - space): Selects all `<span>` elements that are descendants of a `<div>` element, regardless of how deep they are nested.\n    ```css\n    div span {\n      font-style: italic;\n    }\n    ```\n- `>` (Child Selector): Selects all `<span>` elements that are direct children of a `<div>` element. It does not select grand-children or further descendants.\n    ```css\n    div > span {\n      text-decoration: underline;\n    }\n    ```",
          "examples": [
            {
              "id": "example_css_selector_types_1",
              "title": "Demonstrating Basic CSS Selectors",
              "code": "/* Universal selector - applies to all elements */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n/* Type selector - targets all paragraphs */\np {\n  color: #333;\n  line-height: 1.5;\n}\n\n/* Class selector - targets elements with class 'highlight' */\n.highlight {\n  background-color: yellow;\n}\n\n/* ID selector - targets the element with ID 'main-heading' */\n#main-heading {\n  text-align: center;\n  font-family: sans-serif;\n}",
              "explanation": "This example illustrates the four most common CSS selectors: universal, type (element), class, and ID. Each selector type is used to target elements in a specific way, from all elements on the page to a single unique element. Understanding their differences is crucial for effective CSS styling.",
              "language": "css"
            },
            {
              "id": "example_css_attribute_combinator_2",
              "title": "Attribute Selectors and Combinators",
              "code": "/* Attribute selector: targets all input elements with a 'type' attribute */\ninput[type] {\n  border: 1px solid grey;\n}\n\n/* Attribute selector: targets links whose href attribute starts with 'mailto:' */\na[href^=\"mailto:\"] {\n  color: green;\n  font-weight: bold;\n}\n\n/* Descendant combinator: targets any span inside a div */\ndiv span {\n  display: block;\n  margin-bottom: 5px;\n}\n\n/* Child combinator: targets only direct span children of a section */\nsection > span {\n  border-bottom: 1px dotted blue;\n}",
              "explanation": "This example demonstrates more advanced selectors. Attribute selectors provide fine-grained control based on element attributes, enabling styling of elements like input fields or specific types of links. Combinators (` ` for descendant and `>` for child) define relationships between selected elements, allowing for precise targeting based on nesting hierarchy. The descendant selector targets elements at any nested level, while the child selector only targets direct children.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Selectors",
            "Styling",
            "Frontend",
            "Web Development",
            "Specificity"
          ],
          "technology": "CSS",
          "prerequisites": [
            "HTML_Elements"
          ],
          "complexity": 4,
          "interviewRelevance": 8,
          "learningPath": "beginner",
          "requiredFor": [
            "Responsive_Design",
            "CSS_Frameworks",
            "Component_Styling"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_canvas_fundamentals_mcq_1",
          "topic": "Canvas Initialization and Basic Shapes",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following JavaScript code snippets correctly obtains the 2D rendering context of an HTML `<canvas>` element with the ID `myCanvas`?",
          "answer": "const canvas = document.getElementById('myCanvas'); const ctx = canvas.getContext('2d');",
          "options": [
            "const canvas = document.querySelector('canvas'); const ctx = canvas.getContext('2d');",
            "const ctx = document.getElementById('myCanvas').get2DContext();",
            "const canvas = document.getElementById('myCanvas'); const ctx = canvas.getContext('2d');",
            "const ctx = document.canvas.getContext('2d');"
          ],
          "analysisPoints": [
            "Identifies the correct method to retrieve a canvas element (getElementById).",
            "Identifies the correct method to get the 2D drawing context (`getContext('2d')`).",
            "Distinguishes between valid DOM element selection and incorrect method calls or object access."
          ],
          "keyConcepts": [
            "Canvas API initialization",
            "DOM manipulation",
            "getContext method"
          ],
          "evaluationCriteria": [
            "Understanding of fundamental Canvas setup.",
            "Knowledge of basic DOM API."
          ],
          "example": "The correct option demonstrates the standard way to get a canvas element by its ID and then call its `getContext('2d')` method to retrieve the drawing context. Other options either use incorrect methods (like `get2DContext()`) or try to access `document.canvas` which is not valid.",
          "tags": [
            "Canvas",
            "JavaScript",
            "DOM",
            "Basic"
          ],
          "prerequisites": [
            "HTML_Canvas_Element",
            "JavaScript_DOM_Access"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_canvas_fundamentals_flashcard_1",
          "topic": "Canvas Drawing Primitives",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary method used to clear a rectangular area on a canvas, making it transparent?",
          "answer": "`ctx.clearRect(x, y, width, height)`",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Canvas API",
            "clearRect",
            "Drawing Operations"
          ],
          "evaluationCriteria": [
            "Recall of Canvas API methods"
          ],
          "example": "",
          "tags": [
            "Canvas",
            "Flashcard",
            "Drawing"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_canvas_fundamentals_open_1",
          "topic": "Canvas Path Drawing",
          "level": "medium",
          "type": "open",
          "question": "Explain the purpose of `beginPath()`, `moveTo()`, `lineTo()`, `closePath()`, `stroke()`, and `fill()` when drawing a custom shape (path) on an HTML Canvas. Provide a brief sequence of how these methods are typically used together.",
          "answer": "When drawing a custom shape (a 'path') on the HTML Canvas, these methods are used in sequence:\n\n-   `beginPath()`: This method starts a new path. It empties the list of sub-paths, ensuring that subsequent drawing commands do not inadvertently connect to previously drawn shapes. It's like lifting your pen off the paper before starting a new drawing.\n-   `moveTo(x, y)`: This moves the 'pen' to the specified coordinates `(x, y)` without drawing a line. It sets the starting point for the new sub-path.\n-   `lineTo(x, y)`: This draws a straight line from the current 'pen' position to the specified coordinates `(x, y)`. The pen's position then moves to `(x, y)`.\n-   `closePath()`: This draws a straight line from the current 'pen' position back to the start point of the current sub-path. This is useful for automatically closing a shape, forming a polygon.\n-   `stroke()`: This method draws the actual outline of the defined path using the current `strokeStyle` and `lineWidth`. It renders what you've described with `moveTo`, `lineTo`, etc.\n-   `fill()`: This method fills the enclosed area of the defined path using the current `fillStyle`. It solidifies the shape.\n\n**Typical Sequence:**\n1.  `ctx.beginPath();` (Start a new independent drawing)\n2.  `ctx.moveTo(x1, y1);` (Define the starting point)\n3.  `ctx.lineTo(x2, y2);` (Draw lines to form the shape)\n4.  `ctx.lineTo(x3, y3);`\n5.  `ctx.closePath();` (Optional: Close the shape back to the start)\n6.  `ctx.stroke();` (Draw the outline)\n7.  `ctx.fill();` (Fill the inside)",
          "options": [],
          "analysisPoints": [
            "Correctly identifies the role of each path method.",
            "Explains the flow of path creation from `beginPath` to `stroke`/`fill`.",
            "Demonstrates understanding of how these methods interact to form a complete shape."
          ],
          "keyConcepts": [
            "Canvas Paths",
            "beginPath",
            "moveTo",
            "lineTo",
            "closePath",
            "stroke",
            "fill"
          ],
          "evaluationCriteria": [
            "Clarity and accuracy of explanations.",
            "Logical sequencing of operations."
          ],
          "example": "",
          "tags": [
            "Canvas",
            "JavaScript",
            "Drawing",
            "Paths",
            "Open-Ended"
          ],
          "prerequisites": [
            "theory_canvas_fundamentals"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "medium"
        },
        {
          "id": "question_canvas_advanced_mcq_1",
          "topic": "Canvas Transformations",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following Canvas code:\n\n```javascript\nconst canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\nctx.fillStyle = 'red';\nctx.fillRect(10, 10, 50, 50); // Square A\n\nctx.save();\nctx.translate(100, 0);\nctx.rotate(Math.PI / 2); // 90 degrees clockwise\nctx.fillStyle = 'blue';\nctx.fillRect(0, 0, 50, 50); // Square B\nctx.restore();\n\nctx.fillStyle = 'green';\nctx.fillRect(10, 70, 50, 50); // Square C\n```\n\nWhich of the following statements about the position and orientation of 'Square B' is true relative to 'Square A' and 'Square C'?",
          "answer": "Square B is drawn after the context is translated by (100,0) and then rotated 90 degrees clockwise around its new origin. Square A and C are unaffected by these transformations.",
          "options": [
            "Square B will be drawn at (110, 10) and rotated 90 degrees.",
            "Square B will be drawn at (100,0) and rotated 90 degrees clockwise relative to the canvas origin.",
            "Square B is drawn after the context is translated by (100,0) and then rotated 90 degrees clockwise around its new origin. Square A and C are unaffected by these transformations.",
            "Square B is rotated 90 degrees and then translated by (100,0) from the original context, affecting Square C."
          ],
          "analysisPoints": [
            "Understanding the order of transformations (translate then rotate).",
            "Understanding that `fillRect(0,0,...)` after transformations refers to the *new* origin.",
            "Understanding the purpose of `save()` and `restore()` in isolating transformations.",
            "Distinguishing between how transformations affect subsequent drawings versus already drawn content."
          ],
          "keyConcepts": [
            "Canvas Transformations",
            "translate",
            "rotate",
            "save",
            "restore",
            "Coordinate System"
          ],
          "evaluationCriteria": [
            "Ability to trace transformation effects.",
            "Understanding of transformation stack (`save`/`restore`)."
          ],
          "example": "The key here is that transformations apply to the coordinate system itself, affecting all *subsequent* drawing operations. `fillRect(0,0,50,50)` within the transformed state draws relative to the new origin. `save()` and `restore()` ensure that the transformations applied for Square B are local to that block of code, thus Square A (drawn before `save()`) and Square C (drawn after `restore()`) remain in the original, untransformed coordinate system. The order of transformations matters: `translate` shifts the origin, then `rotate` rotates around that *new* origin. So Square B's `(0,0)` point is the canvas's original `(100,0)` point, and then it's rotated.",
          "tags": [
            "Canvas",
            "JavaScript",
            "Transformations",
            "Medium"
          ],
          "prerequisites": [
            "theory_canvas_advanced_features"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_canvas_advanced_code_1",
          "topic": "Canvas Pixel Manipulation",
          "level": "hard",
          "type": "code",
          "question": "Write JavaScript code using the Canvas API to load an image, convert it to grayscale, and display the grayscale image back on the canvas. You must use `getImageData` and `putImageData`.\n\n**Requirements:**\n1.  Load an image (you can use a placeholder URL like `https://via.placeholder.com/200`).\n2.  Wait for the image to load.\n3.  Draw the image onto the canvas.\n4.  Get the image's pixel data.\n5.  Iterate through the pixel data and convert each pixel to grayscale using the formula: `gray = (R + G + B) / 3`.\n6.  Put the modified pixel data back onto the canvas.",
          "answer": "```javascript\nconst canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\nconst img = new Image();\nimg.crossOrigin = 'Anonymous'; // Required for images from different origins\nimg.src = 'https://via.placeholder.com/200/FF0000/FFFFFF?text=Original'; // Example: Red square\n\nimg.onload = () => {\n  // 3. Draw the original image onto the canvas\n  ctx.drawImage(img, 0, 0);\n\n  // 4. Get the image's pixel data\n  const imageData = ctx.getImageData(0, 0, img.width, img.height);\n  const data = imageData.data; // This is a Uint8ClampedArray\n\n  // 5. Iterate and convert to grayscale\n  for (let i = 0; i < data.length; i += 4) {\n    const r = data[i];     // Red component\n    const g = data[i + 1]; // Green component\n    const b = data[i + 2]; // Blue component\n\n    // Calculate grayscale value\n    const gray = (r + g + b) / 3;\n\n    // Set R, G, B to the grayscale value\n    data[i] = gray;     // Red\n    data[i + 1] = gray; // Green\n    data[i + 2] = gray; // Blue\n    // Alpha (data[i+3]) remains unchanged\n  }\n\n  // 6. Put the modified pixel data back onto the canvas\n  ctx.putImageData(imageData, 0, 0);\n};\n\n// Error handling for image loading\nimg.onerror = () => {\n  console.error('Failed to load image.');\n};\n```",
          "options": [],
          "analysisPoints": [
            "Correctly loads and draws an image.",
            "Properly uses `getImageData` to retrieve pixel data.",
            "Demonstrates understanding of `ImageData.data` array structure (R, G, B, A order).",
            "Applies the grayscale conversion formula correctly to each pixel's RGB components.",
            "Uses `putImageData` to display the modified data.",
            "Handles `crossOrigin` for external images."
          ],
          "keyConcepts": [
            "Canvas Image Loading",
            "Pixel Manipulation",
            "getImageData",
            "putImageData",
            "ImageData Object",
            "Grayscale Conversion"
          ],
          "evaluationCriteria": [
            "Correct implementation of pixel-level image processing.",
            "Adherence to Canvas API best practices for image loading.",
            "Algorithm correctness."
          ],
          "example": "The provided solution demonstrates the complete process. It loads an image, draws it, then extracts its pixel data. It iterates through the `data` array (which represents R, G, B, A components for each pixel sequentially) and applies the grayscale formula. Finally, it puts the modified `imageData` back onto the canvas. The `img.crossOrigin = 'Anonymous'` line is important if the image is loaded from a different domain to prevent tainted canvas errors, which would block `getImageData`.",
          "tags": [
            "Canvas",
            "JavaScript",
            "Image Processing",
            "Pixel Manipulation",
            "Hard",
            "Coding Challenge"
          ],
          "prerequisites": [
            "theory_canvas_advanced_features"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_canvas_vs_svg_mcq_1",
          "topic": "Canvas vs. SVG Comparison",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following scenarios would typically favor the use of **SVG** over HTML Canvas?",
          "answer": "Displaying a scalable corporate logo that needs to retain crispness at any zoom level.",
          "options": [
            "Creating a real-time game with hundreds of moving sprites.",
            "Implementing a custom image filter that modifies pixel data directly.",
            "Displaying a scalable corporate logo that needs to retain crispness at any zoom level.",
            "Rendering a complex particle system simulation."
          ],
          "analysisPoints": [
            "Understands the resolution-independence of SVG.",
            "Recognizes that SVG elements are distinct and scalable.",
            "Differentiates between use cases for pixel-based (Canvas) and vector-based (SVG) graphics."
          ],
          "keyConcepts": [
            "Canvas vs SVG",
            "Resolution Dependence/Independence",
            "Vector Graphics",
            "Raster Graphics"
          ],
          "evaluationCriteria": [
            "Ability to choose appropriate technology for specific use cases.",
            "Understanding of core differences between Canvas and SVG."
          ],
          "example": "SVG is vector-based, meaning it defines graphics using mathematical descriptions of shapes. This makes it inherently resolution-independent, so it scales perfectly without pixelation, making it ideal for logos and illustrations. The other options (games, image filters, particle systems) involve frequent pixel manipulation or very numerous, rapidly changing elements, which are generally better suited for Canvas's pixel-based, high-performance rendering capabilities.",
          "tags": [
            "Canvas",
            "SVG",
            "Comparison",
            "Graphics",
            "Medium"
          ],
          "prerequisites": [
            "theory_canvas_vs_svg"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_canvas_vs_svg_flashcard_1",
          "topic": "Canvas vs. SVG - Key Differences",
          "level": "easy",
          "type": "flashcard",
          "question": "Is HTML Canvas resolution-dependent or resolution-independent?",
          "answer": "Resolution-dependent (pixel-based)",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Canvas",
            "Resolution",
            "Pixel-based"
          ],
          "evaluationCriteria": [
            "Recall of Canvas characteristics"
          ],
          "example": "",
          "tags": [
            "Canvas",
            "SVG",
            "Flashcard",
            "Comparison"
          ],
          "prerequisites": [
            "theory_canvas_vs_svg"
          ],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_selectors_mcq_1",
          "topic": "CSS Basic Selectors",
          "level": "easy",
          "type": "mcq",
          "question": "Given the following HTML structure:\n\n```html\n<div class=\"container\">\n  <p id=\"first-para\" class=\"text-block\">\n    This is the first paragraph.\n  </p>\n  <span class=\"text-block\">\n    A span element.\n  </span>\n</div>\n```\n\nWhich CSS selector would correctly target *only* the `<p>` element?",
          "answer": "#first-para",
          "options": [
            ".text-block",
            "div p",
            "#first-para",
            "span"
          ],
          "analysisPoints": [
            "Understands the uniqueness of ID selectors.",
            "Differentiates between ID, class, and type selectors.",
            "Recognizes that descendant selectors might match more than intended if not specific enough."
          ],
          "keyConcepts": [
            "CSS Selectors",
            "ID Selector",
            "Class Selector",
            "Type Selector",
            "Specificity"
          ],
          "evaluationCriteria": [
            "Ability to choose the most specific selector for a single element.",
            "Understanding of selector specificity hierarchy."
          ],
          "example": "The `#first-para` selector specifically targets the element with the ID `first-para`. While `.text-block` would also select the `span`, and `div p` would select the paragraph, `#first-para` is the most direct and unique way to select *only* that specific paragraph given its ID. The `span` selector would target the `span` element, not the `p`.",
          "tags": [
            "CSS",
            "Selectors",
            "Easy"
          ],
          "prerequisites": [
            "HTML_Elements",
            "theory_css_selectors"
          ],
          "complexity": 3,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_selectors_mcq_2",
          "topic": "CSS Attribute Selectors",
          "level": "medium",
          "type": "mcq",
          "question": "Which CSS selector would you use to style all `<a>` (anchor) tags whose `href` attribute value contains the string 'example.com' anywhere within it?",
          "answer": "a[href*=\"example.com\"]",
          "options": [
            "a[href=\"example.com\"]",
            "a[href^=\"example.com\"]",
            "a[href~=\"example.com\"]",
            "a[href*=\"example.com\"]"
          ],
          "analysisPoints": [
            "Understands the different types of attribute selectors.",
            "Specifically identifies the 'contains substring' attribute selector.",
            "Distinguishes `*=` from `=`, `^=`, and `~=`."
          ],
          "keyConcepts": [
            "CSS Attribute Selectors",
            "Substring Matching",
            "Selector Syntax"
          ],
          "evaluationCriteria": [
            "Precise knowledge of attribute selector syntax.",
            "Ability to apply the correct selector for a given matching condition."
          ],
          "example": "The `*=` operator in attribute selectors (`[attr*=\"value\"]`) is used to match elements where the attribute's value contains the specified substring anywhere within it. `a[href=\"example.com\"]` would only match an exact value. `a[href^=\"example.com\"]` would only match if it starts with 'example.com'. `a[href~=\"example.com\"]` would match if 'example.com' is a whole word in a space-separated list within the attribute, which is not applicable for a URL.",
          "tags": [
            "CSS",
            "Selectors",
            "Attribute Selectors",
            "Medium"
          ],
          "prerequisites": [
            "theory_css_selectors"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_selectors_open_1",
          "topic": "CSS Combinators",
          "level": "medium",
          "type": "open",
          "question": "Explain the difference between the CSS descendant selector (`div span`) and the child selector (`div > span`). Provide a simple HTML example and demonstrate how each selector would apply styles.",
          "answer": "The CSS descendant selector (space) and child selector (>) both define relationships between elements, but with different levels of strictness regarding nesting.\n\n**1. Descendant Selector (space): `div span`**\n*   **Meaning:** Selects all `<span>` elements that are descendants of a `<div>` element, regardless of how many levels deep the `<span>` is nested within the `<div>`.\n*   **Flexibility:** It's more flexible and will match elements at any level of nesting within the parent.\n\n**2. Child Selector (>): `div > span`**\n*   **Meaning:** Selects all `<span>` elements that are *direct children* of a `<div>` element. It will only match if the `<span>` is immediately nested one level inside the `<div>`.\n*   **Strictness:** It's stricter and only matches immediate children.\n\n**HTML Example:**\n```html\n<div class=\"parent\">\n  <span>Direct Child Span 1</span>\n  <p>\n    <span>Nested Grandchild Span</span>\n  </p>\n  <span>Direct Child Span 2</span>\n</div>\n<span>Outside Div Span</span>\n```\n\n**CSS Application:**\n```css\n/* Descendant Selector */\n.parent span {\n  color: blue; /* Applies to: 'Direct Child Span 1', 'Nested Grandchild Span', 'Direct Child Span 2' */\n}\n\n/* Child Selector */\n.parent > span {\n  font-weight: bold; /* Applies only to: 'Direct Child Span 1', 'Direct Child Span 2' */\n}\n```\n\n**Explanation of Application:**\n*   The `.parent span` selector would make \"Direct Child Span 1\", \"Nested Grandchild Span\", and \"Direct Child Span 2\" all blue, because all three are descendants of the element with class `parent`.\n*   The `.parent > span` selector would make only \"Direct Child Span 1\" and \"Direct Child Span 2\" bold, because they are direct children of the element with class `parent`. The \"Nested Grandchild Span\" is a descendant but not a direct child (it's a child of `<p>`, which is a child of `div.parent`), so it would not be affected by the child selector.",
          "options": [],
          "analysisPoints": [
            "Clearly defines both descendant and child selectors.",
            "Provides an accurate HTML example to illustrate the difference.",
            "Correctly predicts which elements would be selected by each CSS rule.",
            "Emphasizes the concept of 'direct child' vs 'any descendant'."
          ],
          "keyConcepts": [
            "CSS Combinators",
            "Descendant Selector",
            "Child Selector",
            "Nesting",
            "Specificity"
          ],
          "evaluationCriteria": [
            "Accuracy of definitions.",
            "Effectiveness of example in demonstrating the concepts.",
            "Completeness of explanation."
          ],
          "example": "",
          "tags": [
            "CSS",
            "Selectors",
            "Combinators",
            "Open-Ended"
          ],
          "prerequisites": [
            "theory_css_selectors"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_selectors_flashcard_1",
          "topic": "CSS Selector Types",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary difference in selection behavior between a class selector (`.myClass`) and an ID selector (`#myID`)?",
          "answer": "A class selector can target multiple elements, while an ID selector should uniquely target only one element on a page.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "CSS Selectors",
            "Class Selector",
            "ID Selector",
            "Uniqueness"
          ],
          "evaluationCriteria": [
            "Recall of basic selector properties"
          ],
          "example": "",
          "tags": [
            "CSS",
            "Flashcard",
            "Selectors"
          ],
          "prerequisites": [
            "theory_css_selectors"
          ],
          "complexity": 3,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        }
      ],
      "tasks": [
        {
          "id": "task_canvas_simple_animation",
          "title": "Create a Bouncing Ball Animation on Canvas",
          "description": "\nImplement a simple bouncing ball animation within an HTML Canvas. The ball should move diagonally across the canvas and bounce off the edges.\n\n**Requirements:**\n1.  Initialize an HTML Canvas element with a visible size (e.g., 600x400 pixels).\n2.  Draw a circular ball on the canvas.\n3.  Implement animation logic using `requestAnimationFrame`.\n4.  The ball should move at a constant speed (e.g., 5 pixels per frame in both X and Y directions).\n5.  When the ball hits any of the four canvas edges, its corresponding velocity component (dx or dy) should reverse direction, making it 'bounce'.\n6.  Clear the canvas in each animation frame before redrawing.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bouncing Ball</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f0f0f0;\n            margin: 0;\n        }\n        canvas {\n            border: 2px solid #333;\n            background-color: #fff;\n        }\n    </style>\n</head>\n<body>\n    <canvas id=\"bouncingBallCanvas\" width=\"600\" height=\"400\"></canvas>\n\n    <script>\n        const canvas = document.getElementById('bouncingBallCanvas');\n        const ctx = canvas.getContext('2d');\n\n        // Ball properties\n        let ballX = 50;\n        let ballY = 50;\n        let ballRadius = 20;\n        let ballColor = 'red';\n\n        // Ball velocity\n        let dx = 5; // X velocity\n        let dy = 5; // Y velocity\n\n        function drawBall() {\n            ctx.beginPath();\n            ctx.arc(ballX, ballY, ballRadius, 0, Math.PI * 2);\n            ctx.fillStyle = ballColor;\n            ctx.fill();\n            ctx.closePath();\n        }\n\n        function update() {\n            // TODO: Clear the canvas\n            // TODO: Update ball position (ballX, ballY) based on dx, dy\n            // TODO: Implement bouncing logic for X-axis (left/right walls)\n            // TODO: Implement bouncing logic for Y-axis (top/bottom walls)\n\n            // TODO: Redraw the ball\n\n            // TODO: Request next animation frame\n        }\n\n        // Start the animation\n        // TODO: Call update() to begin the animation loop\n\n    </script>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bouncing Ball</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f0f0f0;\n            margin: 0;\n        }\n        canvas {\n            border: 2px solid #333;\n            background-color: #fff;\n        }\n    </style>\n</head>\n<body>\n    <canvas id=\"bouncingBallCanvas\" width=\"600\" height=\"400\"></canvas>\n\n    <script>\n        const canvas = document.getElementById('bouncingBallCanvas');\n        const ctx = canvas.getContext('2d');\n\n        // Ball properties\n        let ballX = 50;\n        let ballY = 50;\n        const ballRadius = 20;\n        const ballColor = 'red';\n\n        // Ball velocity\n        let dx = 5; // X velocity\n        let dy = 5; // Y velocity\n\n        function drawBall() {\n            ctx.beginPath();\n            ctx.arc(ballX, ballY, ballRadius, 0, Math.PI * 2);\n            ctx.fillStyle = ballColor;\n            ctx.fill();\n            ctx.closePath();\n        }\n\n        function update() {\n            // 1. Clear the canvas\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            // 2. Update ball position\n            ballX += dx;\n            ballY += dy;\n\n            // 3. Implement bouncing logic for X-axis\n            // If ball hits left or right wall\n            if (ballX + ballRadius > canvas.width || ballX - ballRadius < 0) {\n                dx = -dx; // Reverse X direction\n            }\n\n            // 4. Implement bouncing logic for Y-axis\n            // If ball hits top or bottom wall\n            if (ballY + ballRadius > canvas.height || ballY - ballRadius < 0) {\n                dy = -dy; // Reverse Y direction\n            }\n\n            // 5. Redraw the ball at its new position\n            drawBall();\n\n            // 6. Request next animation frame\n            requestAnimationFrame(update);\n        }\n\n        // Start the animation\n        update();\n    </script>\n</body>\n</html>\n",
          "testCases": [
            "Ball should move across the canvas.",
            "Ball should correctly reverse X-direction when hitting left/right edges (consider ball radius).",
            "Ball should correctly reverse Y-direction when hitting top/bottom edges (consider ball radius).",
            "Animation should be smooth and continuous using `requestAnimationFrame`.",
            "Canvas should be cleared in each frame, preventing trails."
          ],
          "hints": [
            "Remember to account for the `ballRadius` when checking for collisions with the canvas edges.",
            "`ctx.clearRect(0, 0, canvas.width, canvas.height);` is the most common way to clear the entire canvas.",
            "Use `requestAnimationFrame(update);` as the last line in your `update` function to create the loop."
          ],
          "tags": [
            "Canvas",
            "Animation",
            "Physics",
            "JavaScript",
            "Front-end"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "theory_canvas_fundamentals"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Game_Development_Basics",
            "Event_Loop",
            "Performance_Optimization"
          ]
        },
        {
          "id": "task_css_selector_targeting",
          "title": "Apply Styles Using Specific CSS Selectors",
          "description": "\nGiven a complex HTML structure, write CSS rules using various selectors (including attribute selectors and combinators) to achieve specific styling goals. You need to demonstrate precision in your selector choices.\n\n**Requirements:**\n1.  Make all direct `<li>` children of an `<ul>` with the class `main-menu` have a blue text color.\n2.  Apply a `border: 1px solid green;` to any `<div>` element that has a `data-status` attribute with the exact value 'active'.\n3.  Change the `font-style` to `italic` for any `<em>` element that is a descendant of a `<section>` element.\n4.  Add a red background to any `<a>` element whose `href` attribute value ends with `.pdf`.\n5.  Give `padding: 5px;` to all elements, except those with the class `no-padding`.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Selectors Task</title>\n    <style>\n        /* Your CSS Rules Here */\n\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Welcome</h1>\n        <ul class=\"main-menu\">\n            <li><a href=\"#home\">Home</a></li>\n            <li>\n                <a href=\"#products\">Products</a>\n                <ul>\n                    <li>Sub-item 1</li>\n                    <li>Sub-item 2</li>\n                </ul>\n            </li>\n            <li><a href=\"#contact\">Contact</a></li>\n        </ul>\n        <ul class=\"secondary-menu\">\n            <li>Help</li>\n        </ul>\n    </header>\n\n    <main>\n        <section>\n            <p>This is a paragraph with <em>important</em> text.</p>\n            <div>\n                Another div with <em>more emphasis</em>.\n            </div>\n        </section>\n\n        <div data-status=\"active\">\n            Active Status Div\n        </div>\n        <div data-status=\"inactive\">\n            Inactive Status Div\n        </div>\n        <div data-mode=\"dark\">\n            Dark Mode Div\n        </div>\n\n        <a href=\"/docs/report.pdf\">Download Report</a>\n        <a href=\"/pages/about.html\">About Us</a>\n\n        <p class=\"no-padding\">This paragraph should not have padding.</p>\n        <span class=\"no-padding\">This span should also not have padding.</span>\n\n    </main>\n\n    <footer>\n        &copy; 2023\n    </footer>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-F\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Selectors Task</title>\n    <style>\n        /* 1. Make all direct `<li>` children of an `<ul>` with the class `main-menu` have a blue text color. */\n        .main-menu > li {\n            color: blue;\n        }\n\n        /* 2. Apply a `border: 1px solid green;` to any `<div>` element that has a `data-status` attribute with the exact value 'active'. */\n        div[data-status=\"active\"] {\n            border: 1px solid green;\n        }\n\n        /* 3. Change the `font-style` to `italic` for any `<em>` element that is a descendant of a `<section>` element. */\n        section em {\n            font-style: italic;\n        }\n\n        /* 4. Add a red background to any `<a>` element whose `href` attribute value ends with `.pdf`. */\n        a[href$=\".pdf\"] {\n            background-color: red;\n            color: white; /* For readability */\n            padding: 2px 5px;\n            display: inline-block;\n        }\n\n        /* 5. Give `padding: 5px;` to all elements, except those with the class `no-padding`. */\n        * {\n            padding: 5px;\n        }\n\n        .no-padding {\n            padding: 0; /* Override the universal padding */\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Welcome</h1>\n        <ul class=\"main-menu\">\n            <li><a href=\"#home\">Home</a></li>\n            <li>\n                <a href=\"#products\">Products</a>\n                <ul>\n                    <li>Sub-item 1</li>\n                    <li>Sub-item 2</li>\n                </ul>\n            </li>\n            <li><a href=\"#contact\">Contact</a></li>\n        </ul>\n        <ul class=\"secondary-menu\">\n            <li>Help</li>\n        </ul>\n    </header>\n\n    <main>\n        <section>\n            <p>This is a paragraph with <em>important</em> text.</p>\n            <div>\n                Another div with <em>more emphasis</em>.\n            </div>\n        </section>\n\n        <div data-status=\"active\">\n            Active Status Div\n        </div>\n        <div data-status=\"inactive\">\n            Inactive Status Div\n        </div>\n        <div data-mode=\"dark\">\n            Dark Mode Div\n        </div>\n\n        <a href=\"/docs/report.pdf\">Download Report</a>\n        <a href=\"/pages/about.html\">About Us</a>\n\n        <p class=\"no-padding\">This paragraph should not have padding.</p>\n        <span class=\"no-padding\">This span should also not have padding.</span>\n\n    </main>\n\n    <footer>\n        &copy; 2023\n    </footer>\n</body>\n</html>\n",
          "testCases": [
            "Direct `<li>` children of `.main-menu` should be blue, but `<li>` elements within the nested `<ul>` (Sub-item 1, Sub-item 2) should NOT be blue.",
            "The `div[data-status=\"active\"]` should have a green border, but `div[data-status=\"inactive\"]` and `div[data-mode=\"dark\"]` should not.",
            "Both `<em>` tags within the `<section>` (one in `<p>`, one in `<div>`) should be italic.",
            "The 'Download Report' link should have a red background, but 'About Us' should not.",
            "All elements should have 5px padding, EXCEPT the paragraph and span with `class=\"no-padding\"` should have 0 padding."
          ],
          "hints": [
            "For direct children, use the child combinator (`>`).",
            "For attribute exact value matching, use `[attr=\"value\"]`.",
            "For descendant elements, use the descendant combinator (space).",
            "For attribute values ending with a specific string, use `[attr$=\"value\"]`.",
            "To apply a style to almost all elements but exclude a few, you can use the universal selector (`*`) for the general rule and then a more specific selector with `padding: 0;` (or whatever style) to override it for the excluded elements, leveraging CSS specificity."
          ],
          "tags": [
            "CSS",
            "Selectors",
            "Specificity",
            "HTML",
            "Frontend"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "theory_css_selectors"
          ],
          "complexity": 5,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "CSS_Specificity",
            "DOM_Structure",
            "Maintainable_CSS"
          ]
        }
      ]
    }
  },
  {
    "id": "3eac5140-5d9e-44ed-a769-0fd09c50ab37",
    "startLine": 11700,
    "endLine": 11799,
    "processedDate": "2025-06-17T12:35:42.618Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_css_selectors",
          "title": "CSS Selectors and Combinators",
          "content": "CSS selectors are patterns used to select and style HTML elements. They allow developers to target specific elements, groups of elements, or elements based on their state or position within the document.\n\n## Type Selectors\nThese select elements by their HTML tag name, e.g., `div` selects all `<div>` elements.\n\n## Combinators\nCombinators explain the relationship between the selectors. The markdown provided specifically mentions the Adjacent Sibling Selector.\n\n- **Adjacent Sibling Selector (`+`):** Selects an element that is immediately preceded by another specified element. It only selects the *next* sibling.\n\n## Pseudo-classes\nPseudo-classes are used to define a special state of an element. They are denoted by a single colon (`:`).\n\n- `:hover`: Selects an element when the user's mouse pointer is over it.\n- `:focus`: Selects an element that has received focus (e.g., an input field when clicked).\n- `:first-child`: Selects an element that is the first child of its parent.\n- `:last-child`: Selects an element that is the last child of its parent.\n- `:nth-child(n)`: Selects elements based on their position among a group of siblings. `n` can be a number, a keyword (like `odd`, `even`), or a formula (like `2n` for even, `2n+1` for odd, `3n` for every third). `2n` selects every even-numbered element.\n\n## Pseudo-elements\nPseudo-elements are used to style a specific part of an element. They are denoted by a double colon (`::`).\n\n- `::first-line`: Selects the first line of a block-level element.\n- `::first-letter`: Selects the first letter of a block-level element.\n- `::before`: Inserts content before the actual content of an element. This content is inline by default and requires the `content` property.\n- `::after`: Inserts content after the actual content of an element. Similar to `::before`, it requires the `content` property.\n\n## Combining Selectors\nSelectors can be combined to create more specific rules.\n\n- **Multiple Classes (`.class1.class2`):** Selects an element that has *all* the specified classes.\n- **Element with Class (`element.class`):** Selects a specific type of element that also has a particular class.",
          "examples": [
            {
              "id": "example_css_selectors_1",
              "title": "Adjacent Sibling Selector",
              "code": "/* HTML */\n<a href=\"#\">Link</a>\n<p>This paragraph will be styled because it immediately follows an 'a' tag.</p>\n<p>This paragraph will not be styled.</p>\n\n/* CSS */\na + p {\n  color: blue;\n  font-weight: bold;\n}",
              "explanation": "This example demonstrates the adjacent sibling selector. Only the first paragraph element that directly follows an `<a>` element will have its text color changed to blue and made bold.",
              "language": "css"
            },
            {
              "id": "example_css_selectors_2",
              "title": "Pseudo-classes and Pseudo-elements",
              "code": "/* HTML */\n<input type=\"text\" placeholder=\"Focus me\">\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</ul>\n<p>This is a paragraph with multiple lines. The first line and first letter will be styled.</p>\n<div class=\"important\">Important Content</div>\n\n/* CSS */\ninput:focus {\n  border: 2px solid green;\n}\nli:nth-child(2n) {\n  background-color: #f0f0f0;\n}\np::first-line {\n  text-transform: uppercase;\n}\np::first-letter {\n  font-size: 2em;\n  color: red;\n}\ndiv.important::before {\n  content: \"Note: \";\n  font-weight: bold;\n  color: purple;\n}",
              "explanation": "This example shows various pseudo-classes and pseudo-elements. The input field gets a green border on focus. Even-numbered list items get a light gray background. The first line of the paragraph becomes uppercase, and its first letter is larger and red. Finally, the `::before` pseudo-element adds 'Note: ' in bold purple before the content of `div.important`.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Selectors",
            "Pseudo-classes",
            "Pseudo-elements",
            "Combinators"
          ],
          "technology": "CSS",
          "prerequisites": [
            "HTML_structure"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "advanced_css_layouts",
            "responsive_design"
          ]
        },
        {
          "id": "theory_css_specificity",
          "title": "CSS Selector Specificity",
          "content": "CSS specificity is the algorithm browsers use to determine which CSS declaration applies to an element when multiple rules could apply. It's essentially a scoring system, and the rule with the highest score wins.\n\nWhen competing rules target the same element, specificity calculates which rule's declaration is most relevant and should be applied. A more specific selector will override a less specific one.\n\n## Specificity Hierarchy (from lowest to highest):\n\n1.  **Type selectors** (`div`, `h1`) and **Pseudo-elements** (`::before`, `::after`): These have the lowest specificity score.\n    *Example: `p { color: red; }`*\n\n2.  **Class selectors** (`.example`), **Attribute selectors** (`[type=\"radio\"]`), and **Pseudo-classes** (`:hover`, `:nth-child`): These have a higher specificity than type selectors.\n    *Example: `.my-class { color: blue; }`*\n\n3.  **ID selectors** (`#example`): These are very specific and have a higher score than classes and attributes.\n    *Example: `#my-id { color: green; }`*\n\n4.  **Inline styles** (`style=\"\"` attribute): Styles applied directly to an HTML element using the `style` attribute have the highest specificity score (unless `!important` is used).\n    *Example: `<p style=\"color: purple;\">Content</p>`*\n\n5.  **`!important` declaration**: This is not part of the standard specificity calculation but acts as an override. When `!important` is used on a property, it overrides *all* other declarations, regardless of specificity, unless another declaration also uses `!important` (in which case, standard specificity rules apply among the `!important` declarations, or the last one declared wins if specificity is equal). Its use is generally discouraged as it makes debugging and maintaining CSS difficult.\n\n## Specificity Calculation Rules:\nSpecificity is often represented as four comma-separated numbers (a, b, c, d):\n- **a**: 1 if the declaration is an inline style, 0 otherwise.\n- **b**: Number of ID selectors.\n- **c**: Number of class selectors, attribute selectors, and pseudo-classes.\n- **d**: Number of type selectors and pseudo-elements.\n\nExample: `a + p` would have a specificity of (0, 0, 0, 2) because it involves two type selectors. `.container.dark` would have (0, 0, 2, 0) as it uses two class selectors.",
          "examples": [
            {
              "id": "example_css_specificity_1",
              "title": "Specificity in Action",
              "code": "/* HTML */\n<style>\n  #myId { color: red; }\n  .myClass { color: blue; }\n  p { color: green; }\n</style>\n<p id=\"myId\" class=\"myClass\">What color will I be?</p>\n\n/* CSS (implicit order) */\n/* The color will be red because #myId (0,1,0,0) > .myClass (0,0,1,0) > p (0,0,0,1) */",
              "explanation": "In this example, the paragraph has an ID, a class, and is a type selector. The `#myId` rule will apply because ID selectors have higher specificity than class or type selectors, resulting in red text.",
              "language": "css"
            },
            {
              "id": "example_css_specificity_2",
              "title": "Specificity with !important",
              "code": "/* HTML */\n<style>\n  p { color: red !important; }\n  .highlight { color: blue; }\n</style>\n<p class=\"highlight\">What color will I be?</p>\n\n/* CSS (implicit order) */\n/* The color will be red because !important overrides the .highlight class */",
              "explanation": "Here, even though `.highlight` has a higher specificity than `p` (class vs. type selector), the `!important` declaration on `color: red;` overrides the `blue` color, making the text red. This demonstrates the powerful override nature of `!important`.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Specificity",
            "Selectors",
            "Styling",
            "Cascading"
          ],
          "technology": "CSS",
          "prerequisites": [
            "css_selectors"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "debugging_css",
            "maintainable_css"
          ]
        },
        {
          "id": "theory_emmet",
          "title": "Emmet for Rapid HTML/CSS Development",
          "content": "Emmet (formerly Zen Coding) is a set of plugins for text editors that significantly improves HTML and CSS workflow. It allows developers to write code much faster using a shorthand syntax that expands into full HTML tags or CSS properties. It's particularly useful for creating boilerplate structures and repetitive elements quickly.\n\n## Key Features:\n\n- **Shorthand Syntax:** A concise way to describe the structure of HTML or CSS.\n- **Expansion:** The shorthand expands into full, well-formed code.\n- **Tab Triggers:** Typically activated by pressing `Tab` or `Ctrl+E` after typing the shorthand.\n\n## HTML Shorthand Examples:\n\n- `div` -> `<div></div>`\n- `p.text` -> `<p class=\"text\"></p>`\n- `ul#list>li.item*3` ->\n  ```html\n  <ul id=\"list\">\n    <li class=\"item\"></li>\n    <li class=\"item\"></li>\n    <li class=\"item\"></li>\n  </ul>\n  ```\n- `a[href=\"/home\"]{Home}` -> `<a href=\"/home\">Home</a>`\n\n## Common Emmet Operators:\n\n- `>`: Child (nested element)\n- `+`: Sibling (element at the same level)\n- `^`: Climb up (moves up one level in the hierarchy)\n- `*N`: Multiplication (repeats an element N times)\n- `#id`: ID attribute\n- `.class`: Class attribute\n- `[attr=value]`: Attribute with value\n- `{text}`: Text content\n- `$`: Numbering (for repeated items, e.g., `li.item$*3` -> `li.item1`, `li.item2`, `li.item3`)\n\nEmmet significantly reduces repetitive typing, making frontend development more efficient.",
          "examples": [
            {
              "id": "example_emmet_1",
              "title": "Emmet Navbar Example",
              "code": "/* Emmet shorthand: */\n.navbar>ul.nav.navbar-nav>li*5>a[href=\"/\"]\n\n/* Expands to: */\n<div class=\"navbar\">\n  <ul class=\"nav navbar-nav\">\n    <li><a href=\"/\"></a></li>\n    <li><a href=\"/\"></a></li>\n    <li><a href=\"/\"></a></li>\n    <li><a href=\"/\"></a></li>\n    <li><a href=\"/\"></a></li>\n  </ul>\n</div>",
              "explanation": "This is the example provided in the markdown, demonstrating how a concise Emmet shorthand can generate a complex nested HTML structure for a navigation bar, including multiple list items and anchor tags with an attribute.",
              "language": "html"
            },
            {
              "id": "example_emmet_2",
              "title": "More Emmet HTML Shorthands",
              "code": "/* Emmet shorthand: */\nheader+main.content>h1{Page Title}+p{Welcome to the page.}^footer>p{Copyright 2023}\n\n/* Expands to: */\n<header></header>\n<main class=\"content\">\n  <h1>Page Title</h1>\n  <p>Welcome to the page.</p>\n</main>\n<footer>\n  <p>Copyright 2023</p>\n</footer>",
              "explanation": "This example shows the use of sibling (`+`), child (`>`), text content (`{}`), and climb up (`^`) operators to generate a common page structure with header, main content, and footer. The `^` operator is crucial for moving back up the DOM tree to add `footer` as a sibling of `main`, rather than a child of `main`.",
              "language": "html"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Emmet",
            "Productivity",
            "HTML",
            "CSS",
            "Developer Tools"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_basics",
            "css_basics"
          ],
          "complexity": 4,
          "interviewRelevance": 7,
          "learningPath": "beginner",
          "requiredFor": [
            "rapid_prototyping",
            "code_efficiency"
          ]
        },
        {
          "id": "theory_box_model",
          "title": "The CSS Box Model",
          "content": "The CSS Box Model is a fundamental concept in web design. It describes how HTML elements are rendered as rectangular boxes, with each box comprising four layers: content, padding, border, and margin.\n\n## Components of the Box Model:\n\n1.  **Content Box:** This is where the actual content of the element (text, images, video, etc.) resides. Its dimensions are determined by the `width` and `height` properties.\n\n2.  **Padding Box:** This is the transparent area surrounding the content. It provides space between the content and the border. Padding can be set using `padding`, `padding-top`, `padding-right`, `padding-bottom`, `padding-left`.\n\n3.  **Border Box:** The border encloses the padding and content. It's the visible line around the element. Border properties include `border`, `border-width`, `border-style`, `border-color`, and individual sides (`border-top`, etc.).\n\n4.  **Margin Box:** This is the transparent area outside the border. It creates space between the element's border and other adjacent elements. Margins can be set using `margin`, `margin-top`, `margin-right`, `margin-bottom`, `margin-left`.\n\n## `box-sizing` Property:\n\nBy default, the `box-sizing` property is set to `content-box`. This means:\n\n- `width` and `height` properties only apply to the **content box**.\n- Any `padding` and `border` you add will *increase* the total width and height of the element.\n\nFor example, if `width: 300px`, `padding: 20px`, and `border: 5px`, the total width will be `300px (content) + 2*20px (padding) + 2*5px (border) = 350px`.\n\nTo make sizing more intuitive, the `box-sizing: border-box` value is widely used. With `border-box`:\n\n- `width` and `height` properties include the **padding** and **border**.\n- The content area shrinks to accommodate the padding and border, but the total width/height remains what you specified.\n\nUsing `box-sizing: border-box` makes it easier to design layouts because you don't have to constantly calculate the total dimensions of elements that have padding and borders.",
          "examples": [
            {
              "id": "example_box_model_1",
              "title": "Box Model with content-box (Default)",
              "code": "/* HTML */\n<div class=\"box content-box-example\">Content</div>\n\n/* CSS */\n.content-box-example {\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  border: 5px solid black;\n  margin: 10px;\n  background-color: lightblue;\n  /* box-sizing: content-box; (This is the default, so not strictly needed) */\n}\n\n/* Calculated total width: 100px (content) + 2*10px (padding) + 2*5px (border) = 130px */\n/* Calculated total height: 100px (content) + 2*10px (padding) + 2*5px (border) = 130px */",
              "explanation": "This example shows the default `content-box` behavior. The `width` and `height` apply only to the content area. The total space occupied by the element will be larger than the specified `width` and `height` due to added padding and border.",
              "language": "css"
            },
            {
              "id": "example_box_model_2",
              "title": "Box Model with border-box",
              "code": "/* HTML */\n<div class=\"box border-box-example\">Content</div>\n\n/* CSS */\n.border-box-example {\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  border: 5px solid black;\n  margin: 10px;\n  background-color: lightgreen;\n  box-sizing: border-box;\n}\n\n/* Calculated total width: 100px (includes padding and border) */\n/* Calculated total height: 100px (includes padding and border) */",
              "explanation": "With `box-sizing: border-box`, the specified `width` and `height` now include the padding and border. The content area will shrink to accommodate them, but the overall dimensions of the element (up to the border) will be exactly 100px by 100px. This makes layout calculations much simpler.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Box Model",
            "Layout",
            "Dimensions",
            "box-sizing"
          ],
          "technology": "CSS",
          "prerequisites": [
            "html_elements",
            "css_properties"
          ],
          "complexity": 6,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "responsive_design",
            "css_grid",
            "flexbox"
          ]
        },
        {
          "id": "theory_flexbox",
          "title": "Flexbox (Flexible Box Layout)",
          "content": "Flexbox is a one-dimensional layout system that helps distribute space among items in a container and align them, making it easier to design complex layouts. It's 'one-dimensional' because it arranges items either in a row OR in a column, but not both simultaneously (unlike CSS Grid, which is two-dimensional).\n\nFlexbox consists of a **flex container** (the parent element with `display: flex` or `display: inline-flex`) and **flex items** (its direct children).\n\n## Flex Container Properties:\n\n-   `display: flex | inline-flex;`: Defines a flex container. `inline-flex` makes the container itself behave like an inline element.\n-   `flex-direction: row | row-reverse | column | column-reverse;`: Establishes the main-axis, defining the direction flex items are placed in the flex container. `row` is the default.\n-   `flex-wrap: nowrap | wrap | wrap-reverse;`: Controls whether flex items are forced onto a single line or can wrap onto multiple lines. `nowrap` is the default.\n-   `justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;`: Aligns flex items along the **main-axis** (horizontal by default for `flex-direction: row`).\n-   `align-items: flex-start | flex-end | center | baseline | stretch;`: Aligns flex items along the **cross-axis** (vertical by default for `flex-direction: row`) *within each line*.\n-   `align-content: flex-start | flex-end | center | space-between | space-around | stretch;`: Aligns the **flex lines themselves** when there is extra space in the cross-axis, similar to `justify-content` but for lines. Only applies when `flex-wrap` is set to `wrap` or `wrap-reverse`.\n-   `gap: <length> | <percentage>;` (or `row-gap`, `column-gap`): Specifies the size of the gap between rows and columns (items) in a flex container. A more modern property for spacing items.\n\n## Flex Item Properties:\n\n-   `flex-grow: <number>;`: Specifies how much a flex item will grow relative to the rest of the flex items in the container when there is extra space. Default is 0 (won't grow).\n-   `flex-shrink: <number>;`: Specifies how much a flex item will shrink relative to the rest of the flex items in the container when there is not enough space. Default is 1 (can shrink).\n-   `flex-basis: <length> | auto;`: Defines the default size of an element before the remaining space is distributed. `auto` is the default, which means the item's content size or explicit width/height.\n-   `flex: <flex-grow> <flex-shrink> <flex-basis>;`: Shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`. Common values: `flex: 1 0 auto;` (can grow, won't shrink, default size), `flex: 1;` (shorthand for `1 1 0%`), `flex: auto;` (shorthand for `1 1 auto`).\n-   `align-self: auto | flex-start | flex-end | center | baseline | stretch;`: Overrides the `align-items` property for a single flex item, allowing individual alignment along the cross-axis.\n-   `order: <number>;`: Specifies the order of a flex item relative to the rest. Items are laid out in ascending order. Default is 0.",
          "examples": [
            {
              "id": "example_flexbox_1",
              "title": "Basic Flex Container and Items",
              "code": "/* HTML */\n<div class=\"flex-container\">\n  <div class=\"flex-item\">1</div>\n  <div class=\"flex-item\">2</div>\n  <div class=\"flex-item\">3</div>\n</div>\n\n/* CSS */\n.flex-container {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  height: 150px; /* For vertical alignment to be visible */\n  border: 1px solid #ccc;\n}\n.flex-item {\n  width: 50px;\n  height: 50px;\n  background-color: lightcoral;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  border: 1px solid #999;\n}",
              "explanation": "This example demonstrates a basic flex container. Items are horizontally spaced around the container using `justify-content: space-around` and vertically centered using `align-items: center`. Each item is also a flex container to center its number.",
              "language": "css"
            },
            {
              "id": "example_flexbox_2",
              "title": "Flex Item Properties (Grow, Shrink, Basis, Order)",
              "code": "/* HTML */\n<div class=\"flex-container-2\">\n  <div class=\"flex-item-2 item-a\">A</div>\n  <div class=\"flex-item-2 item-b\">B</div>\n  <div class=\"flex-item-2 item-c\">C</div>\n</div>\n\n/* CSS */\n.flex-container-2 {\n  display: flex;\n  width: 300px;\n  border: 1px solid blue;\n}\n.flex-item-2 {\n  background-color: lightgreen;\n  padding: 10px;\n  border: 1px solid green;\n}\n.item-a {\n  flex-basis: 50px; /* Initial size 50px */\n  flex-grow: 1;    /* Grows by 1 unit */\n  order: 2;        /* Second in order */\n}\n.item-b {\n  flex-basis: 100px; /* Initial size 100px */\n  flex-grow: 2;    /* Grows by 2 units (twice as much as A) */\n  order: 1;        /* First in order */\n}\n.item-c {\n  flex-basis: 50px; /* Initial size 50px */\n  flex-shrink: 0;  /* Will not shrink */\n  order: 3;        /* Third in order */\n  background-color: lightpink;\n}",
              "explanation": "This example illustrates `flex-grow`, `flex-shrink`, `flex-basis`, and `order`. Item 'B' appears first due to `order: 1`. Item 'B' also grows twice as much as 'A' because its `flex-grow` is 2 compared to 'A''s 1. Item 'C' maintains its size even if the container shrinks due to `flex-shrink: 0` (though shrinking isn't explicitly shown with a small container width here, it's a key concept).",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Flexbox",
            "Layout",
            "Responsive Design",
            "Alignment"
          ],
          "technology": "CSS",
          "prerequisites": [
            "css_basics",
            "box_model"
          ],
          "complexity": 7,
          "interviewRelevance": 10,
          "learningPath": "intermediate",
          "requiredFor": [
            "responsive_layouts",
            "component_design"
          ]
        },
        {
          "id": "theory_vertical_alignment",
          "title": "Common Vertical Alignment Techniques in CSS",
          "content": "Vertically aligning elements in CSS can be challenging, but modern CSS provides several robust solutions. The markdown specifically mentions using Flexbox, which is one of the most powerful and commonly used methods.\n\n## Vertical Alignment with Flexbox:\n\nFlexbox simplifies vertical alignment significantly using properties on the flex container and flex items.\n\n### For a single line of flex items:\n-   `align-items`: Used on the **flex container** to align items along the cross-axis (vertically when `flex-direction` is `row`).\n    -   `center`: Centers items vertically.\n    -   `flex-start`: Aligns items to the top.\n    -   `flex-end`: Aligns items to the bottom.\n    -   `stretch`: Stretches items to fill the container (default, if `height` or `max-height` is not set on items).\n\n### For multiple lines of flex items (when `flex-wrap: wrap` is used):\n-   `align-content`: Used on the **flex container** to align the entire block of wrapped lines within the container's cross-axis, similar to `justify-content` but for multiple lines.\n    -   `center`: Centers all flex lines vertically.\n    -   `space-between`: Distributes space evenly between lines.\n\n### For individual flex items:\n-   `align-self`: Used on an **individual flex item** to override the `align-items` setting from the container. It takes the same values as `align-items`.\n\n## Horizontal and Vertical Centering with Flexbox:\n\nTo perfectly center an item (or group of items) both horizontally and vertically within its container, you can combine `justify-content: center` and `align-items: center` on the flex container.\n\n```css\n.flex-center {\n  display: flex;\n  justify-content: center; /* horizontal centering */\n  align-items: center;   /* vertical centering */\n  /* Add height to container for vertical centering to be visible */\n  height: 100vh;\n}\n```\n\n## Other Common Vertical Alignment Techniques (brief overview for context):\n\nWhile Flexbox is preferred, other methods exist for specific scenarios:\n\n-   **Vertical Align Property (for inline/table-cell elements):** `vertical-align` works on `inline`, `inline-block`, `inline-table`, and `table-cell` elements to align them vertically with respect to their line box or cell.\n-   **Positioning (Absolute/Relative):** Using `position: absolute;` with `top: 50%; transform: translateY(-50%);` is a common technique for single elements when their height is unknown.\n-   **CSS Grid:** CSS Grid offers even more powerful two-dimensional alignment capabilities using `align-items`, `justify-items`, `align-content`, and `justify-content` for aligning items within cells and entire tracks.",
          "examples": [
            {
              "id": "example_vertical_alignment_1",
              "title": "Centering with Flexbox",
              "code": "/* HTML */\n<div class=\"flex-center-container\">\n  <div class=\"centered-item\">I am centered!</div>\n</div>\n\n/* CSS */\n.flex-center-container {\n  display: flex;\n  justify-content: center; /* Aligns horizontally */\n  align-items: center;   /* Aligns vertically */\n  width: 100%;\n  height: 200px; /* Essential for vertical alignment to be visible */\n  border: 2px dashed #007bff;\n}\n.centered-item {\n  background-color: #e0f7fa;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}",
              "explanation": "This example shows the most straightforward way to center an item both horizontally and vertically using Flexbox. By setting `display: flex`, `justify-content: center`, and `align-items: center` on the parent container, the child item is perfectly centered.",
              "language": "css"
            },
            {
              "id": "example_vertical_alignment_2",
              "title": "Individual Item Alignment with align-self",
              "code": "/* HTML */\n<div class=\"flex-container-align-self\">\n  <div class=\"flex-item-align-self\">Top</div>\n  <div class=\"flex-item-align-self align-self-center\">Middle</div>\n  <div class=\"flex-item-align-self align-self-end\">Bottom</div>\n</div>\n\n/* CSS */\n.flex-container-align-self {\n  display: flex;\n  align-items: flex-start; /* Default alignment for all items */\n  height: 150px;\n  border: 1px solid #ccc;\n}\n.flex-item-align-self {\n  width: 60px;\n  background-color: lightyellow;\n  margin: 5px;\n  padding: 10px;\n  border: 1px solid orange;\n}\n.align-self-center {\n  align-self: center;\n}\n.align-self-end {\n  align-self: flex-end;\n}",
              "explanation": "This example demonstrates `align-self`. The container has `align-items: flex-start`, so the first item aligns to the top. However, the second and third items override this using `align-self: center` and `align-self: flex-end` respectively, positioning them in the middle and bottom of the container.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Flexbox",
            "Alignment",
            "Vertical Alignment",
            "Layout"
          ],
          "technology": "CSS",
          "prerequisites": [
            "flexbox"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "responsive_design",
            "component_layout"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_css_selectors_1",
          "topic": "CSS Adjacent Sibling Selector",
          "level": "easy",
          "type": "mcq",
          "question": "Which CSS selector targets a `<p>` element that is immediately preceded by an `<a>` element?",
          "answer": "a + p {}",
          "options": [
            "a ~ p {}",
            "a > p {}",
            "a p {}",
            "a + p {}"
          ],
          "analysisPoints": [
            "Understanding of the `+` combinator for adjacent siblings.",
            "Distinguishing between different combinators (sibling, child, descendant)."
          ],
          "keyConcepts": [
            "Adjacent Sibling Selector",
            "CSS Combinators"
          ],
          "evaluationCriteria": [
            "Correct identification of the adjacent sibling selector syntax.",
            "Knowledge of CSS combinators."
          ],
          "example": "The `a + p {}` selector will style only the `<p>` element directly following an `<a>` element. For example:\n```html\n<a href=\"#\">Link</a>\n<p>This paragraph is styled.</p>\n<p>This paragraph is NOT styled.</p>\n```",
          "tags": [
            "CSS",
            "Selectors",
            "Combinators"
          ],
          "prerequisites": [
            "css_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_selectors_2",
          "topic": "CSS Pseudo-classes",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following HTML, which CSS rule will correctly apply a red background to the second list item?\n\n```html\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>\n```",
          "answer": "li:nth-child(2) { background-color: red; }",
          "options": [
            "li:first-child + li { background-color: red; }",
            "li:nth-child(2) { background-color: red; }",
            "ul > li:last-child { background-color: red; }",
            "li:even { background-color: red; }"
          ],
          "analysisPoints": [
            "Understanding of `:nth-child()` pseudo-class with numerical arguments.",
            "Distinguishing `:first-child + li` which selects the second `li` but requires specific preceding element.",
            "Knowledge that `:even` is typically `nth-child(2n)`.",
            "Understanding `:last-child` selects the last element."
          ],
          "keyConcepts": [
            "Pseudo-classes",
            ":nth-child()",
            "CSS Selectors"
          ],
          "evaluationCriteria": [
            "Ability to select specific elements using pseudo-classes.",
            "Correct application of `:nth-child()`."
          ],
          "example": "The `:nth-child(2)` pseudo-class specifically targets the second child element. While `li:first-child + li` would also work in this specific case, `li:nth-child(2)` is more direct and explicit for selecting the Nth item.\n\n```css\nli:nth-child(2) {\n  background-color: red;\n}\n```",
          "tags": [
            "CSS",
            "Pseudo-classes",
            "Selectors"
          ],
          "prerequisites": [
            "css_selectors"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_selectors_3",
          "topic": "CSS Pseudo-elements",
          "level": "medium",
          "type": "open",
          "question": "Explain the difference between `::before` and `:first-child` in CSS, providing a scenario where each would be appropriately used.",
          "answer": "The key difference is that `::before` is a pseudo-element used to insert generated content *before* the actual content of an element, while `:first-child` is a pseudo-class used to select an element that is the *first child* of its parent.\n\n-   **`::before` (Pseudo-element):**\n    -   **Purpose:** Inserts content, which can be text, an image, or an icon, before the element's existing content. It requires the `content` property.\n    -   **Usage:** Often used for decorative purposes, adding icons, quotes, or clearfixes without modifying the HTML structure.\n    -   **Scenario:** Adding a decorative bullet point or an icon before each list item in an unordered list:\n        ```css\n        li::before {\n          content: \"\\2022 \"; /* Unicode for a bullet point */\n          color: blue;\n          font-weight: bold;\n          margin-right: 5px;\n        }\n        ```\n\n-   **`:first-child` (Pseudo-class):**\n    -   **Purpose:** Selects an element that happens to be the first child in its parent's list of children.\n    -   **Usage:** Used for styling the first item in a group of siblings, e.g., styling the first paragraph, list item, or table row differently.\n    -   **Scenario:** Giving a special style to the first paragraph in a container:\n        ```css\n        div p:first-child {\n          font-weight: bold;\n          margin-top: 0;\n        }\n        ```\nIn summary, `::before` *adds* content, while `:first-child` *selects* an existing element based on its position.",
          "analysisPoints": [
            "Clear distinction between pseudo-elements (content generation) and pseudo-classes (state/position selection).",
            "Correct syntax for both (`::` vs `:`).",
            "Practical and distinct use-case scenarios for each.",
            "Mention of the `content` property for pseudo-elements."
          ],
          "keyConcepts": [
            "Pseudo-elements",
            "Pseudo-classes",
            "::before",
            ":first-child",
            "CSS Selectors"
          ],
          "evaluationCriteria": [
            "Accuracy of definitions.",
            "Clarity of examples.",
            "Demonstrated understanding of when to use each.",
            "Distinction of `::` vs `:`."
          ],
          "tags": [
            "CSS",
            "Selectors",
            "Pseudo-elements",
            "Pseudo-classes"
          ],
          "prerequisites": [
            "css_selectors"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_specificity_1",
          "topic": "CSS Selector Specificity",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following CSS rules and HTML, what color will the text 'Hello' be?\n\n```css\n#myDiv p {\n  color: blue;\n}\n\ndiv p {\n  color: red;\n}\n\n.myClass {\n  color: green;\n}\n```\n\n```html\n<div id=\"myDiv\">\n  <p class=\"myClass\">Hello</p>\n</div>\n```",
          "answer": "blue",
          "options": [
            "red",
            "green",
            "blue",
            "The color will not be applied due to conflict."
          ],
          "analysisPoints": [
            "Correctly calculating specificity scores for different selector types.",
            "Understanding that higher specificity wins.",
            "Specificity of ID selector combined with type selector is higher than class or just type selector."
          ],
          "keyConcepts": [
            "CSS Specificity",
            "ID selectors",
            "Class selectors",
            "Type selectors",
            "Combinators"
          ],
          "evaluationCriteria": [
            "Ability to calculate and compare specificity.",
            "Understanding of CSS cascade rules."
          ],
          "example": "Let's calculate specificity for each rule (a, b, c, d):\n1.  `#myDiv p`: 1 ID, 1 Type. Score: (0, 1, 0, 1)\n2.  `div p`: 2 Types. Score: (0, 0, 0, 2)\n3.  `.myClass`: 1 Class. Score: (0, 0, 1, 0)\n\nComparing the scores:\n(0, 1, 0, 1) > (0, 0, 1, 0) > (0, 0, 0, 2)\n\nTherefore, the rule `#myDiv p { color: blue; }` has the highest specificity and its color will apply.",
          "tags": [
            "CSS",
            "Specificity",
            "Selectors"
          ],
          "prerequisites": [
            "css_selectors"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_specificity_2",
          "topic": "CSS `!important`",
          "level": "hard",
          "type": "open",
          "question": "Explain the role of `!important` in CSS specificity. When might its use be justified, and what are the primary reasons to avoid it in general development?",
          "answer": "`!important` is a keyword used in CSS to override the normal cascading and specificity rules. When `!important` is declared on a CSS property, that declaration takes precedence over *all* other declarations, regardless of their specificity, unless another declaration also has `!important` (in which case, the one with higher specificity or the one declared last still wins among them).\n\n**When its use might be justified:**\n1.  **Overriding inline styles (rare):** When you have no control over the HTML (e.g., third-party widgets or legacy systems) and elements have inline styles that need to be overridden by external CSS.\n2.  **Utility classes for specific overrides:** For very specific, non-reusable utility classes like `.hidden !important` or `.error-text !important` that *must* always apply, though even here, better patterns (like CSS variables or more specific selectors) are often preferred.\n3.  **Theming/User Preferences in specific cases:** In some very specific scenarios, like a user overriding a theme through a custom stylesheet, `!important` might be used in the user's stylesheet to ensure their preferences apply.\n\n**Primary reasons to avoid it in general development:**\n1.  **Breaks the cascade:** It disrupts the natural flow and predictability of CSS, making it difficult to understand which styles are applied and why.\n2.  **Debugging headaches:** It makes debugging much harder. When a style isn't applying, `!important` declarations are the first culprits to check, and finding which one is overriding others can be a nightmare.\n3.  **Hard to override:** Once `!important` is used, the only way to override it is with another `!important` declaration, leading to an '`!important` war' where styles become increasingly difficult to manage and modify.\n4.  **Poor maintainability:** It often leads to bloated and unmanageable stylesheets over time. It's a quick fix that creates long-term problems.\n5.  **Redundancy:** Often, increased specificity (e.g., using an ID selector or combining multiple classes) can achieve the same result as `!important` without its downsides.\n\nIn essence, `!important` should be considered a last resort, used only in very specific, constrained scenarios where no other specificity-based solution is feasible or practical.",
          "analysisPoints": [
            "Correctly defines `!important`'s override behavior.",
            "Identifies legitimate, albeit rare, use cases.",
            "Articulates core negative consequences (debugging, maintainability, cascade disruption).",
            "Suggests alternatives (specificity)."
          ],
          "keyConcepts": [
            "CSS Specificity",
            "!important",
            "CSS Cascade",
            "Maintainability",
            "Debugging"
          ],
          "evaluationCriteria": [
            "Comprehensive understanding of `!important`.",
            "Ability to articulate both pros (limited) and cons (extensive).",
            "Practical implications for development."
          ],
          "tags": [
            "CSS",
            "Specificity",
            "!important",
            "Best Practices"
          ],
          "prerequisites": [
            "css_specificity"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_emmet_1",
          "topic": "Emmet Syntax",
          "level": "easy",
          "type": "flashcard",
          "question": "What Emmet shorthand would you use to generate an unordered list with three list items, each having the class 'list-item'?",
          "answer": "ul>li.list-item*3",
          "analysisPoints": [
            "Recall of Emmet's child operator (`>`).",
            "Recall of Emmet's class operator (`.`).",
            "Recall of Emmet's multiplication operator (`*`)."
          ],
          "keyConcepts": [
            "Emmet",
            "Emmet Operators",
            "HTML Shorthand"
          ],
          "evaluationCriteria": [
            "Ability to quickly recall basic Emmet syntax.",
            "Correct combination of operators."
          ],
          "example": "Typing `ul>li.list-item*3` and pressing Tab (or equivalent) would expand to:\n```html\n<ul>\n  <li class=\"list-item\"></li>\n  <li class=\"list-item\"></li>\n  <li class=\"list-item\"></li>\n</ul>\n```",
          "tags": [
            "Emmet",
            "Productivity"
          ],
          "prerequisites": [
            "html_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_emmet_2",
          "topic": "Emmet Advanced Shorthand",
          "level": "medium",
          "type": "code",
          "question": "Write the Emmet shorthand to create the following HTML structure:\n\n```html\n<div class=\"header-wrapper\">\n  <header>\n    <h1>Welcome</h1>\n  </header>\n</div>\n<div class=\"main-content\">\n  <p>Some text here.</p>\n  <a href=\"#contact\">Contact Us</a>\n</div>\n```",
          "answer": "div.header-wrapper>header>h1{Welcome}+div.main-content>(p{Some text here.}+a[href=\"#contact\"]{Contact Us})",
          "options": [],
          "analysisPoints": [
            "Correct use of the child (`>`) and sibling (`+`) operators.",
            "Correct application of classes (`.`) and attributes (`[]`).",
            "Proper grouping with parentheses `()` for complex sibling structures.",
            "Including text content `{}`."
          ],
          "keyConcepts": [
            "Emmet",
            "Emmet Operators",
            "Nested Structures",
            "Sibling Structures"
          ],
          "evaluationCriteria": [
            "Accuracy of Emmet syntax.",
            "Ability to represent complex HTML structures.",
            "Efficient use of Emmet features."
          ],
          "example": "One possible Emmet shorthand: `div.header-wrapper>header>h1{Welcome}+div.main-content>(p{Some text here.}+a[href=\"#contact\"]{Contact Us})`\n\nAnother valid option: `div.header-wrapper>header>h1{Welcome}^div.main-content>p{Some text here.}+a[href=\"#contact\"]{Contact Us}` (using `^` to climb up before `div.main-content`)\n\nBoth demonstrate a good grasp of Emmet's capabilities for complex nesting and sibling creation.",
          "tags": [
            "Emmet",
            "Productivity",
            "HTML"
          ],
          "prerequisites": [
            "emmet"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_box_model_1",
          "topic": "CSS Box Model Fundamentals",
          "level": "easy",
          "type": "flashcard",
          "question": "List the four main components of the CSS Box Model, starting from the innermost layer to the outermost.",
          "answer": "Content, Padding, Border, Margin",
          "analysisPoints": [
            "Recall of the four layers of the box model.",
            "Understanding of their order."
          ],
          "keyConcepts": [
            "CSS Box Model",
            "Content",
            "Padding",
            "Border",
            "Margin"
          ],
          "evaluationCriteria": [
            "Basic knowledge of the box model components."
          ],
          "example": "The box model visualizes an element as a box composed of these layers, from inside out.",
          "tags": [
            "CSS",
            "Box Model"
          ],
          "prerequisites": [
            "css_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_box_model_2",
          "topic": "CSS Box Model with `box-sizing`",
          "level": "medium",
          "type": "mcq",
          "question": "Consider a `div` element styled with the following CSS:\n\n```css\n.my-box {\n  width: 200px;\n  height: 100px;\n  padding: 15px;\n  border: 5px solid black;\n  box-sizing: border-box;\n}\n```\n\nWhat will be the actual total width and height of this element (including content, padding, and border)?",
          "answer": "Total Width: 200px, Total Height: 100px",
          "options": [
            "Total Width: 240px, Total Height: 140px",
            "Total Width: 200px, Total Height: 100px",
            "Total Width: 230px, Total Height: 130px",
            "Total Width: 210px, Total Height: 110px"
          ],
          "analysisPoints": [
            "Understanding of `box-sizing: border-box`.",
            "Ability to differentiate between `content-box` and `border-box` calculation.",
            "Correctly calculating dimensions when padding and border are included in width/height."
          ],
          "keyConcepts": [
            "CSS Box Model",
            "box-sizing: border-box",
            "Content-box",
            "Dimensions"
          ],
          "evaluationCriteria": [
            "Accurate application of `box-sizing` concept.",
            "Correct calculation of element dimensions."
          ],
          "example": "With `box-sizing: border-box`, the `width` and `height` properties *include* the padding and border. Therefore, the total width of the element from border-edge to border-edge will be exactly 200px, and the total height will be 100px. The content area will shrink to accommodate the 15px padding on each side (30px total horizontal) and 5px border on each side (10px total horizontal), making the content width `200 - 30 - 10 = 160px`.",
          "tags": [
            "CSS",
            "Box Model",
            "box-sizing"
          ],
          "prerequisites": [
            "box_model"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_box_model_3",
          "topic": "Practical Box Model Implications",
          "level": "hard",
          "type": "open",
          "question": "Discuss the practical implications of using `box-sizing: border-box` compared to the default `content-box` in a responsive web design context. Why is `border-box` generally preferred for modern layouts?",
          "answer": "The choice between `box-sizing: content-box` (default) and `box-sizing: border-box` has significant practical implications, especially in responsive web design.\n\n**`content-box` (Default behavior):**\n-   `width` and `height` apply *only* to the content area.\n-   `padding` and `border` are *added* to the specified `width` and `height`, increasing the element's total size.\n-   **Implication:** If you set an element to `width: 50%` and then add `padding: 10px`, its total width will be `50% + 20px`, which can cause overflow or break precise column layouts, especially in fluid, percentage-based designs. You constantly have to subtract padding/border from your width calculations.\n\n**`border-box` (Preferred behavior):**\n-   `width` and `height` apply to the **content + padding + border**.\n-   The content area shrinks to accommodate padding and border, but the overall size (up to the border edge) remains precisely what you specified.\n-   **Implication:** If you set an element to `width: 50%` and add `padding: 10px`, its total width will *remain* exactly `50%`. The padding and border will be *included* within that `50%` width, making layouts much more predictable and robust. This is extremely beneficial for responsive designs that rely on percentages or fractions.\n\n**Why `border-box` is generally preferred for modern layouts:**\n1.  **Intuitive Sizing:** It aligns with how designers and developers naturally think about element dimensions. A `width: 200px` element is truly 200px wide, regardless of padding/border.\n2.  **Simplified Layouts:** It eliminates the need for complex width calculations (e.g., `calc(50% - 20px)`) to account for padding and borders. This simplifies grid systems (Flexbox, CSS Grid) and column layouts.\n3.  **Predictable Responsive Behavior:** When using percentage-based widths, `border-box` ensures elements accurately fit within their parent containers without unexpectedly overflowing due to padding/border additions. This is crucial for maintaining layout integrity across different screen sizes.\n4.  **Consistency:** Applying `box-sizing: border-box` globally (e.g., `*, *::before, *::after { box-sizing: border-box; }`) creates a consistent and predictable sizing model for all elements, reducing surprises and bugs.\n5.  **Easier Component Building:** When creating reusable UI components, `border-box` ensures that a component's specified dimensions will hold true, regardless of how much internal padding or border is added, making them more modular and easier to integrate.\n\nIn essence, `border-box` makes layout design more straightforward, less error-prone, and inherently more compatible with responsive design principles, leading to cleaner and more maintainable CSS.",
          "analysisPoints": [
            "Detailed comparison of `content-box` and `border-box` behavior.",
            "Clear explanation of how each affects total element dimensions.",
            "Specific examples of implications in responsive design (e.g., `width: 50%` with padding).",
            "Comprehensive list of reasons for `border-box` preference (intuition, simplification, predictability, consistency, component building).",
            "Mention of global `box-sizing` reset."
          ],
          "keyConcepts": [
            "CSS Box Model",
            "box-sizing",
            "Responsive Web Design",
            "Layout",
            "Maintainability",
            "CSS Grid",
            "Flexbox"
          ],
          "evaluationCriteria": [
            "Depth of understanding of `box-sizing` implications.",
            "Ability to articulate benefits in a real-world context (responsive design).",
            "Clarity and structure of explanation.",
            "Demonstrated knowledge of best practices."
          ],
          "tags": [
            "CSS",
            "Box Model",
            "Responsive Design",
            "Best Practices"
          ],
          "prerequisites": [
            "box_model"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_flexbox_1",
          "topic": "Flexbox Container Properties",
          "level": "medium",
          "type": "mcq",
          "question": "Which Flexbox container property is used to align flex items along the **main-axis**?",
          "answer": "justify-content",
          "options": [
            "align-items",
            "align-content",
            "flex-direction",
            "justify-content"
          ],
          "analysisPoints": [
            "Distinguishing between main-axis and cross-axis alignment.",
            "Correctly identifying the property for main-axis alignment (`justify-content`).",
            "Understanding the roles of other `align-*` properties."
          ],
          "keyConcepts": [
            "Flexbox",
            "Flex Container",
            "Main-axis",
            "Cross-axis",
            "justify-content",
            "align-items"
          ],
          "evaluationCriteria": [
            "Core understanding of Flexbox axis alignment.",
            "Correct identification of `justify-content`."
          ],
          "example": "If `flex-direction` is `row` (default), the main-axis is horizontal. `justify-content: center;` would horizontally center items. If `flex-direction` is `column`, the main-axis is vertical, and `justify-content: center;` would vertically center items.",
          "tags": [
            "CSS",
            "Flexbox",
            "Layout"
          ],
          "prerequisites": [
            "flexbox"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_flexbox_2",
          "topic": "Flexbox Item Properties",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the purpose of the `flex` shorthand property on a flex item, and what are the three individual properties it sets?",
          "answer": "The `flex` shorthand property defines the ability of a flex item to grow or shrink, and its initial size. It sets `flex-grow`, `flex-shrink`, and `flex-basis`.",
          "analysisPoints": [
            "Understanding `flex` as a shorthand.",
            "Recalling the three constituent properties.",
            "Explaining the general purpose of each (grow, shrink, initial size)."
          ],
          "keyConcepts": [
            "Flexbox",
            "Flex Item",
            "flex-grow",
            "flex-shrink",
            "flex-basis",
            "flex shorthand"
          ],
          "evaluationCriteria": [
            "Knowledge of Flexbox item properties.",
            "Ability to recall shorthand components."
          ],
          "example": "`flex: 1 0 auto;` means `flex-grow: 1` (can grow), `flex-shrink: 0` (won't shrink), and `flex-basis: auto` (initial size based on content or explicit width).",
          "tags": [
            "CSS",
            "Flexbox",
            "Properties"
          ],
          "prerequisites": [
            "flexbox"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_flexbox_3",
          "topic": "Flexbox Layout Scenarios",
          "level": "hard",
          "type": "code",
          "question": "Implement a Flexbox layout where:\n1.  The container arranges items in a column.\n2.  Items are vertically centered within the container.\n3.  Items are horizontally stretched to fill the container's width.\n4.  The third item in the column is positioned at the very bottom of the container, overriding the general alignment.\n\nProvide the HTML and CSS for this setup.",
          "answer": "```html\n<div class=\"flex-container-challenge\">\n  <div class=\"flex-item-challenge\">Item 1</div>\n  <div class=\"flex-item-challenge\">Item 2</div>\n  <div class=\"flex-item-challenge item-bottom\">Item 3</div>\n</div>\n```\n\n```css\n.flex-container-challenge {\n  display: flex;\n  flex-direction: column;\n  height: 300px; /* Essential for vertical alignment to have effect */\n  border: 2px dashed gray;\n  \n  /* 2. Vertically center items along the main-axis (now column) */\n  justify-content: center;\n  \n  /* 3. Horizontally stretch items along the cross-axis (now row) */\n  align-items: stretch; /* Default for align-items, but explicit for clarity */\n}\n\n.flex-item-challenge {\n  padding: 10px;\n  margin: 5px;\n  background-color: lightblue;\n  border: 1px solid blue;\n  text-align: center;\n}\n\n/* 4. Position the third item at the bottom */\n.item-bottom {\n  align-self: flex-end; /* Overrides align-items for this specific item */\n  margin-top: auto; /* Pushes item to the end of the container */\n}\n```",
          "options": [],
          "analysisPoints": [
            "Correctly setting `flex-direction` to `column`.",
            "Applying `justify-content` for vertical centering when `flex-direction` is column.",
            "Applying `align-items` for horizontal stretching when `flex-direction` is column.",
            "Using `align-self` to override container alignment for a single item.",
            "Utilizing `margin-top: auto;` (or `margin-bottom: auto;` if items were at the end) to push an item to the opposite end in a flex container."
          ],
          "keyConcepts": [
            "Flexbox",
            "flex-direction",
            "justify-content",
            "align-items",
            "align-self",
            "margin: auto",
            "Cross-axis alignment",
            "Main-axis alignment"
          ],
          "evaluationCriteria": [
            "Ability to apply multiple Flexbox properties simultaneously.",
            "Understanding of how `flex-direction` changes axis interpretation.",
            "Correct use of `align-self` for specific item overrides.",
            "Creative use of `margin: auto` in Flexbox contexts."
          ],
          "tags": [
            "CSS",
            "Flexbox",
            "Layout",
            "Coding Challenge"
          ],
          "prerequisites": [
            "flexbox"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_vertical_alignment_1",
          "topic": "Vertical Alignment with Flexbox",
          "level": "medium",
          "type": "mcq",
          "question": "To perfectly center a single `div` element both horizontally and vertically within its parent container using Flexbox, which CSS properties are necessary on the parent container (assuming `height` is set on the parent)?",
          "answer": "display: flex; justify-content: center; align-items: center;",
          "options": [
            "display: block; margin: auto;",
            "display: flex; align-content: center; align-items: center;",
            "display: flex; justify-content: center; align-items: center;",
            "display: grid; place-items: center;"
          ],
          "analysisPoints": [
            "Identifying the core Flexbox properties for centering.",
            "Distinguishing `justify-content` (main-axis) and `align-items` (cross-axis).",
            "Recognizing `align-content` is for multi-line flex containers, not single-item centering.",
            "Excluding non-Flexbox solutions (margin:auto, grid) if the question specifies Flexbox."
          ],
          "keyConcepts": [
            "Flexbox",
            "Vertical Alignment",
            "Horizontal Alignment",
            "justify-content",
            "align-items",
            "Centering"
          ],
          "evaluationCriteria": [
            "Accurate application of Flexbox for centering.",
            "Understanding of Flexbox container properties."
          ],
          "example": "The most common and effective way to perfectly center content with Flexbox is to make the parent a flex container and use `justify-content: center;` for horizontal alignment and `align-items: center;` for vertical alignment.\n```css\n.parent {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px; /* Important for vertical centering to be visible */\n}\n```",
          "tags": [
            "CSS",
            "Flexbox",
            "Alignment"
          ],
          "prerequisites": [
            "flexbox"
          ],
          "complexity": 5,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_vertical_alignment_2",
          "topic": "Advanced Vertical Alignment",
          "level": "hard",
          "type": "open",
          "question": "Beyond Flexbox, describe one alternative method for vertically centering an element in CSS when its height is unknown. Explain how it works and mention any limitations.",
          "answer": "One alternative method for vertically centering an element of unknown height is using **Absolute Positioning with `transform`**.\n\n**How it works:**\n1.  **Parent:** The parent element needs `position: relative;` (or `absolute`, `fixed`) to establish a positioning context for the child.\n2.  **Child:** The child element is set to `position: absolute;`.\n3.  **Positioning:** `top: 50%;` moves the *top edge* of the child element down by half the height of its parent.\n4.  **Correction:** Since we want the *center* of the child to align with the center of the parent, we use `transform: translateY(-50%);`. This moves the element *up* by 50% of its *own height*, effectively centering it vertically.\n\n**Example:**\n```html\n<div class=\"parent-absolute\">\n  <div class=\"child-absolute\">Unknown Height Content</div>\n</div>\n```\n```css\n.parent-absolute {\n  position: relative;\n  height: 300px; /* Or min-height, important for context */\n  border: 2px dashed blue;\n}\n.child-absolute {\n  position: absolute;\n  top: 50%;\n  left: 50%; /* For horizontal centering */\n  transform: translate(-50%, -50%); /* -50% of its own width & height */\n  background-color: lightyellow;\n  padding: 20px;\n}\n```\n\n**Limitations:**\n-   **Requires positioning context:** The parent must be relatively or absolutely positioned, which might affect other layout elements if not carefully planned.\n-   **Overlapping potential:** Because the element is taken out of the normal document flow (`position: absolute`), it can overlap other content if not managed with `z-index` or proper spacing.\n-   **Layout flow disruption:** Not suitable for centering multiple items in a natural flow, as each absolutely positioned item would need individual management.\n-   **Performance (minor):** `transform` operations are typically GPU-accelerated, but complex transformations on many elements can have minor performance implications compared to pure layout solutions like Flexbox/Grid.\n-   **Fixed dimensions for sibling layouts:** If there are siblings not absolutely positioned, the absolutely positioned element won't contribute to the parent's height or the flow of other elements around it, making complex layouts difficult.",
          "analysisPoints": [
            "Identifies absolute positioning with transform as a method.",
            "Clearly explains the `top: 50%` and `transform: translateY(-50%)` mechanism.",
            "Provides a clear code example.",
            "Articulates relevant limitations (out of flow, overlap, parent context, not for multiple items, performance).",
            "Compares implicitly to Flexbox's advantages."
          ],
          "keyConcepts": [
            "Vertical Alignment",
            "Absolute Positioning",
            "CSS Transforms",
            "Centering",
            "CSS Layout",
            "Document Flow"
          ],
          "evaluationCriteria": [
            "Demonstrated knowledge of advanced CSS techniques.",
            "Ability to explain mechanism and trade-offs.",
            "Clarity and completeness of explanation."
          ],
          "tags": [
            "CSS",
            "Layout",
            "Vertical Alignment",
            "Advanced CSS"
          ],
          "prerequisites": [
            "css_positioning",
            "css_transforms"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_css_selectors_1",
          "title": "Styling a Navigation Menu with Advanced Selectors",
          "description": "\nYour task is to create a simple navigation menu using HTML and then apply styling using various CSS selectors and pseudo-elements/classes based on the provided requirements.\n\n**Requirements:**\n1.  Create an unordered list (`ul`) with at least 5 list items (`li`). Each list item should contain an anchor tag (`a`) with `href=\"#\"`.\n2.  Apply a basic background color and padding to the `ul` to make it visible.\n3.  Style all `a` elements within the `ul` to remove text decoration and set a default text color.\n4.  Change the text color of `a` elements to `hotpink` when hovered over.\n5.  Add a decorative arrow (`→`) *after* every `a` element, but only for the first line of text within the anchor.\n6.  Give a distinct background color (e.g., `lightblue`) to every odd-numbered list item (`li`).\n7.  Make the first letter of the first list item's anchor text bold and `2em` in size.\n8.  Apply a top margin of `10px` to any paragraph (`p`) element that immediately follows a `div` element.\n",
          "difficulty": "medium",
          "startingCode": "<!-- HTML -->\n<div class=\"nav-container\">\n  <ul>\n    <li><a href=\"#\">Home</a></li>\n    <li><a href=\"#\">About Us</a></li>\n    <li><a href=\"#\">Services</a></li>\n    <li><a href=\"#\">Portfolio</a></li>\n    <li><a href=\"#\">Contact</a></li>\n  </ul>\n</div>\n\n<div>This is a div.</div>\n<p>This paragraph should have a top margin.</p>\n<p>This paragraph should NOT have a top margin.</p>\n\n\n/* CSS */\n.nav-container ul {\n  background-color: #f0f0f0;\n  padding: 15px;\n  list-style: none;\n  margin: 0;\n}\n",
          "solutionCode": "<!-- HTML -->\n<div class=\"nav-container\">\n  <ul>\n    <li><a href=\"#\">Home</a></li>\n    <li><a href=\"#\">About Us</a></li>\n    <li><a href=\"#\">Services</a></li>\n    <li><a href=\"#\">Portfolio</a></li>\n    <li><a href=\"#\">Contact</a></li>\n  </ul>\n</div>\n\n<div>This is a div.</div>\n<p>This paragraph should have a top margin.</p>\n<p>This paragraph should NOT have a top margin.</p>\n\n\n/* CSS */\n.nav-container ul {\n  background-color: #f0f0f0;\n  padding: 15px;\n  list-style: none;\n  margin: 0;\n}\n\n/* Requirement 3: Style all a elements within the ul */\n.nav-container ul a {\n  text-decoration: none;\n  color: #333;\n  display: block; /* Make anchors block for padding/margin */\n  padding: 5px 0;\n}\n\n/* Requirement 4: Change text color on hover */\n.nav-container ul a:hover {\n  color: hotpink;\n}\n\n/* Requirement 5: Add decorative arrow after every a element */\n.nav-container ul a::after {\n  content: \"\\2192\"; /* Unicode for right arrow */\n  margin-left: 5px;\n  color: #888;\n  font-size: 0.8em;\n}\n\n/* Requirement 6: Distinct background color for odd-numbered list items */\n.nav-container ul li:nth-child(odd) {\n  background-color: lightblue;\n}\n\n/* Requirement 7: First letter of first list item's anchor text bold and 2em */\n.nav-container ul li:first-child a::first-letter {\n  font-weight: bold;\n  font-size: 2em;\n  color: purple;\n}\n\n/* Requirement 8: Top margin to paragraph immediately following a div */\ndiv + p {\n  margin-top: 10px;\n  border: 1px dashed green; /* For visual verification */\n}\n",
          "testCases": [
            "All `a` elements within `ul` should have no text decoration and default color.",
            "`a` elements should turn `hotpink` on hover.",
            "Each `a` element should have a right arrow `→` appended to its content.",
            "Odd-numbered `li` elements should have a `lightblue` background.",
            "The first letter of 'Home' (first `li`'s `a` text) should be bold and larger.",
            "The paragraph immediately following a `div` should have a `10px` top margin, while other paragraphs do not."
          ],
          "hints": [
            "Remember to use `::after` for content generation and the `content` property.",
            "For `nth-child`, consider the `odd` keyword or `2n+1` formula.",
            "The adjacent sibling selector uses a `+`.",
            "Ensure `a` elements are block-level or inline-block if you want to apply padding to them directly."
          ],
          "tags": [
            "CSS",
            "Selectors",
            "Pseudo-classes",
            "Pseudo-elements",
            "Combinators",
            "Layout"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "css_selectors",
            "html_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "css_specificity"
          ]
        },
        {
          "id": "task_css_specificity_1",
          "title": "Specificity Challenge: Overriding Styles",
          "description": "\nYour task is to apply styles to a `div` element such that specific text elements within it demonstrate an understanding of CSS specificity.\n\n**Requirements:**\n1.  Create an HTML structure with a `div` that has an `id=\"container\"` and a class `.\"wrapper\"`.\n2.  Inside this `div`, add three `p` tags. The first `p` tag should have a class `.\"important-text\"`. The second `p` tag should have an `id=\"unique-text\"`. The third `p` tag should have no special attributes.\n3.  Write CSS rules to achieve the following text colors for the paragraphs within `#container`:\n    -   All `p` tags inside `#container` should default to `color: gray;`.\n    -   The `p` tag with `id=\"unique-text\"` should have `color: purple;`.\n    -   The `p` tag with class `.\"important-text\"` should have `color: orange;`.\n    -   *Challenge:* Make the `p` tag with `id=\"unique-text\"` actually render `red`, overriding the `purple` color, *without* using `!important` on the `red` declaration and *without* changing the order of the existing CSS rules (assume the `#container p {color: gray;}` rule comes first). This will require a more specific selector.\n\n**Goal:** Ensure the final colors are: `orange` for the first, `red` for the second, and `gray` for the third `p` tag.\n",
          "difficulty": "hard",
          "startingCode": "<!-- HTML -->\n<div id=\"container\" class=\"wrapper\">\n  <p class=\"important-text\">First Paragraph</p>\n  <p id=\"unique-text\">Second Paragraph</p>\n  <p>Third Paragraph</p>\n</div>\n\n/* CSS */\n#container p {\n  color: gray;\n}\n\n#unique-text {\n  color: purple;\n}\n\n.important-text {\n  color: orange;\n}\n\n/* Add your CSS rule here to make #unique-text red WITHOUT !important */\n",
          "solutionCode": "<!-- HTML -->\n<div id=\"container\" class=\"wrapper\">\n  <p class=\"important-text\">First Paragraph</p>\n  <p id=\"unique-text\">Second Paragraph</p>\n  <p>Third Paragraph</p>\n</div>\n\n/* CSS */\n#container p {\n  color: gray;\n}\n\n#unique-text {\n  color: purple;\n}\n\n.important-text {\n  color: orange;\n}\n\n/* Solution: Using a more specific selector for the unique-text to be red */\n#container #unique-text {\n  color: red; /* Specificity (0, 2, 0, 1) > (0, 1, 0, 0) of #unique-text */\n}\n\n/* Final colors should be:\n   - First Paragraph: orange (specificity (0,0,1,0) vs (0,1,0,1) for #container p, but #container p does not apply to .important-text) \n     Actually, .important-text (0,0,1,0) vs #container p (0,1,0,1) -> gray wins. NO, the rule order matters for same specificity, AND the selectors are for different elements. \n     Let's re-evaluate the solution colors: \n     `#container p` (0,1,0,1) is parent selector for all p. \n     `.important-text` (0,0,1,0) is for first p. \n     `#unique-text` (0,1,0,0) is for second p. \n     `#container #unique-text` (0,2,0,0) is for second p. \n     The most specific rules will win. \n     1st p: `.important-text` (0,0,1,0) vs `#container p` (0,1,0,1). `#container p` wins -> gray. \n     2nd p: `#unique-text` (0,1,0,0) vs `#container p` (0,1,0,1) vs `#container #unique-text` (0,2,0,0). `#container #unique-text` wins -> red.\n     3rd p: `#container p` (0,1,0,1) wins -> gray.\n     \n     The question asks for specific final colors. My initial solution does not achieve orange for the first paragraph. Let's adjust. \n     To make first p orange, .important-text must have higher specificity than #container p.  This would be `#container .important-text` or `#container p.important-text` \n*/\n\n/* REVISED CSS SOLUTION TO MATCH REQUIRED FINAL COLORS */\n#container p {\n  color: gray; /* Specificity (0,1,0,1) */\n}\n\n.important-text {\n  color: orange;\n} \n\n/* For First Paragraph to be orange, need a more specific selector than #container p */\n#container p.important-text {\n  color: orange; /* Specificity (0,1,1,1) - This overrides #container p */\n}\n\n/* For Second Paragraph to be red, need a more specific selector than #unique-text or #container p */\n#container #unique-text {\n  color: red; /* Specificity (0,2,0,1) - This overrides #unique-text(0,1,0,0) and #container p(0,1,0,1) */\n}\n\n/* Third Paragraph will default to #container p color: gray */\n",
          "testCases": [
            "The first paragraph (`.important-text`) should have `orange` text.",
            "The second paragraph (`#unique-text`) should have `red` text.",
            "The third paragraph (no attributes) should have `gray` text.",
            "Verify `!important` was not used for the `red` color."
          ],
          "hints": [
            "Recall the specificity order: ID > Class > Type.",
            "Combining selectors increases specificity.",
            "You can combine an ID selector with a type selector or a class selector to boost specificity for a specific element.",
            "Think about what specificity score you need to beat (e.g., an ID selector has a score of 1,0,0,0)."
          ],
          "tags": [
            "CSS",
            "Specificity",
            "Selectors",
            "Debugging"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "css_specificity",
            "css_selectors"
          ],
          "complexity": 9,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "css_cascade",
            "css_best_practices"
          ]
        },
        {
          "id": "task_emmet_1",
          "title": "Rapid HTML Structure Generation with Emmet",
          "description": "\nYour task is to demonstrate your proficiency with Emmet by generating a common web page structure using a single (or very few) Emmet shorthand commands.\n\n**Requirements:**\n1.  Generate the following HTML structure using Emmet:\n    -   A `div` with class `.\"app\"`.\n    -   Inside `.app`, a `header` element containing an `h1` with text \"My Awesome App\".\n    -   A `main` element sibling to `header`.\n    -   Inside `main`, a `section` with class `.\"content\"`.\n    -   Inside `.content`, an `h2` with text \"Features\" and an `ul`.\n    -   The `ul` should contain 3 `li` elements. Each `li` should contain an `a` tag with `href=\"#featureN\"` (where N is 1, 2, 3) and text \"Feature N\".\n    -   A `footer` element sibling to `main` containing a `p` tag with text \"&copy; 2023\".\n\n**Deliverable:** Provide the Emmet shorthand string(s) that would generate this structure.\n",
          "difficulty": "medium",
          "startingCode": "<!-- No starting HTML, just the Emmet shorthand below -->\n\n<!-- Your Emmet shorthand here -->",
          "solutionCode": "/* Emmet shorthand: */\ndiv.app>(header>h1{My Awesome App}+main>section.content>(h2{Features}+ul>li*3>a[href=\"#feature$\"]{Feature $}))+footer>p{&copy; 2023}",
          "testCases": [
            "The generated HTML should be well-formed.",
            "All elements (`div.app`, `header`, `h1`, `main`, `section.content`, `h2`, `ul`, `li`, `a`, `footer`, `p`) should be present.",
            "Text content (`My Awesome App`, `Features`, `Feature N`, `&copy; 2023`) should be correct.",
            "Attributes (`class`, `href`) should be correctly applied.",
            "Nesting and sibling relationships should be accurate.",
            "The `href` and text for `a` tags should increment correctly (e.g., `#feature1`, `Feature 1`)."
          ],
          "hints": [
            "Use `>` for children, `+` for siblings.",
            "Use parentheses `()` for grouping when you need to define a complex branch that should be a sibling.",
            "Use `{}` for text content.",
            "Use `*N` for repetition and `$` for incremental numbering.",
            "Remember that `^` can move you up the tree if needed, though often grouping can achieve the same results."
          ],
          "tags": [
            "Emmet",
            "HTML",
            "Productivity",
            "Developer Tools"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "emmet"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "html_structure"
          ]
        },
        {
          "id": "task_box_model_1",
          "title": "Box Model Layout with `box-sizing`",
          "description": "\nYour task is to create a responsive layout using the CSS Box Model, specifically demonstrating the utility of `box-sizing: border-box`.\n\n**Requirements:**\n1.  Create a `div` element with the class `.\"container\"`.\n2.  Inside this container, add two `div` elements with the class `.\"item\"`.\n3.  Style the `.\"container\"` to have a `display: flex` (for simplicity) and `width: 100%`.\n4.  Style both `.\"item\"` elements such that:\n    -   Each takes up `50%` of the container's width.\n    -   Each has `10px` of padding on all sides.\n    -   Each has a `2px` solid border.\n    -   Each has a `margin-left` of `5px`, except the first one.\n    -   They should fit side-by-side perfectly within the `.\"container\"` without overflowing or wrapping, even with padding and borders.\n5.  Use `box-sizing: border-box` to ensure the correct layout and prevent overflow.\n6.  Add distinct background colors to the items for visual clarity.\n",
          "difficulty": "medium",
          "startingCode": "<!-- HTML -->\n<div class=\"container\">\n  <div class=\"item item-1\">Item 1</div>\n  <div class=\"item item-2\">Item 2</div>\n</div>\n\n/* CSS */\n.container {\n  display: flex;\n  width: 100%;\n  border: 1px dashed gray;\n  box-sizing: border-box;\n}\n\n.item {\n  /* Your styles here */\n  background-color: lightcoral;\n  padding: 10px;\n  border: 2px solid darkred;\n  /* Ensure no margin-left on first item */\n}\n\n.item-2 {\n  margin-left: 5px;\n}\n",
          "solutionCode": "<!-- HTML -->\n<div class=\"container\">\n  <div class=\"item item-1\">Item 1</div>\n  <div class=\"item item-2\">Item 2</div>\n</div>\n\n/* CSS */\n.container {\n  display: flex;\n  width: 100%;\n  border: 1px dashed gray;\n  /* Requirement 5: Ensure container also respects border-box for its own calculations */\n  box-sizing: border-box;\n}\n\n/* Global box-sizing reset is often preferred */\n/* *,\n*::before,\n*::after {\n  box-sizing: border-box;\n} */\n\n.item {\n  /* Requirement 4: Each takes up 50% */\n  width: 50%;\n  flex-shrink: 0; /* Important: Prevents items from shrinking below 50% due to gap/margin */\n  \n  /* Requirement 4: Padding and border */\n  padding: 10px;\n  border: 2px solid darkred;\n  \n  /* Requirement 5: Crucial for items to fit perfectly */\n  box-sizing: border-box;\n  \n  height: 100px; /* For visual demonstration */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n}\n\n.item-1 {\n  background-color: lightcoral;\n}\n\n.item-2 {\n  background-color: lightgreen;\n  /* Requirement 4: margin-left for the second item */\n  margin-left: 5px;\n  /* Adjust width for the margin of the second item, or use flex gap */\n  /* If using margin-left on second, the width should be (50% - 2.5px) approx, or adjust parent spacing. */\n  /* Better solution for gap in flexbox is `gap` property on container. */\n}\n\n/* Alternative for spacing without impacting item width percentages for perfect 50/50 split */\n.container.with-gap {\n  gap: 10px; /* This handles spacing automatically without width calculations */\n}\n\n/* If sticking to the original margin-left requirement, the second item effectively needs to be slightly smaller to fit perfectly without overflow, or the parent needs to accommodate total width. For a perfect 50% split with `margin-left: 5px` on *one* side of the second item, it implies a total 5px margin added. If the container is 100% wide, then 50% + 50% + 5px will overflow. \nLet's refine the solution to explicitly handle the `margin-left` such that items don't overflow while being 50% width effectively. This means either total width needs to be adjusted or `calc()` is needed, OR, as the prompt implies, `box-sizing: border-box` solves the padding/border part, but margin is *outside* the box.  A common pattern would be for the `margin-left` to be offset by a negative margin on the container, or simply use `gap`.\n\nLet's assume the intent is for `50%` to mean the content+padding+border, and then *additional* margin. For a perfect fit, and considering `box-sizing: border-box` only handles padding/border, the sum of `width` and `margin` must not exceed 100%. \n\nIf we want them strictly 50% each and then a 5px gap, using `gap` on the container is the best. If `margin-left: 5px` on the second item is strict, then `width: calc(50% - 2.5px)` for both would provide a total 5px gap. Given the prompt's focus on `box-sizing`, let's assume `width: 50%` is what we put, and understand `margin` is external. The prompt states \"fit side-by-side perfectly ... without overflowing or wrapping, even with padding and borders.\" The `margin-left: 5px` on one item implies total width of 100% + 5px. This can be handled by `flex-wrap: wrap` implicitly or by adjusting the container's width/padding or by using `gap`. The most robust solution given modern CSS is `gap`.\n\nFor the exact problem description as written (where margin-left is external), the 50% + 50% + 5px would overflow. The hint about 'fit perfectly' suggests `gap` is the intended solution or a slight width adjustment.\n\nRevised approach for the solution code adhering strictly to `width: 50%` and `margin-left: 5px`:\n",
          "testCases": [
            "The two `.item` elements should render side-by-side.",
            "Each `.item` should appear to take up half the container's width.",
            "There should be `10px` internal padding and a `2px` border on all sides of each item.",
            "The second item should have a `5px` margin on its left side, creating a small gap between the two items.",
            "The items should not overflow the `.container` horizontally.",
            "The items should not wrap to a new line."
          ],
          "hints": [
            "Remember that `box-sizing: border-box` includes padding and border within the specified `width`.",
            "Even with `border-box`, `margin` is *outside* the element's defined width. Consider how `margin-left` on the second item will affect the total width of `item1 + item2` if `width: 50%` for both.",
            "For spacing between flex items that is included in the layout calculations, consider using the `gap` property on the flex container, rather than `margin` on individual items, especially for precise percentage layouts. However, if `margin-left` is a strict requirement, you might need to adjust widths slightly or use `calc()` for precision.",
            "Set `flex-shrink: 0` on items if you want them to strictly maintain their `width` and not shrink to fit smaller spaces, or `flex-wrap: nowrap` on container if you want to prevent wrapping."
          ],
          "tags": [
            "CSS",
            "Box Model",
            "Flexbox",
            "Layout",
            "Responsive Design"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "box_model",
            "flexbox"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "css_calc"
          ]
        },
        {
          "id": "task_flexbox_1",
          "title": "Responsive Card Layout with Flexbox",
          "description": "\nYour task is to create a responsive card layout using Flexbox, demonstrating various container and item properties.\n\n**Requirements:**\n1.  Create a `div` container with the class `.\"cards-container\"`.\n2.  Inside this container, add at least 4 `div` elements, each with the class `.\"card\"`. Give each card some unique text (e.g., 'Card 1', 'Card 2').\n3.  Apply basic styling to the cards (`padding`, `border`, `background-color`) to make them visible.\n4.  Style the `.\"cards-container\"` as a Flexbox container:\n    -   Items should initially be arranged in a row.\n    -   Items should wrap to the next line if there isn't enough space (`flex-wrap`).\n    -   Items should be horizontally centered when there's extra space (`justify-content`).\n    -   Lines of items should be vertically centered when they wrap (`align-content`).\n    -   There should be a `20px` gap between cards (both row and column gaps).\n5.  Style the `.\"card\"` items:\n    -   Each card should have a flexible width that allows for 2-3 cards per row on larger screens, and single cards on very small screens. Use `flex` shorthand property with a reasonable `flex-basis` (e.g., `200px` or `30%`).\n    -   The second card should always be displayed as the last item, regardless of its HTML order, using an `order` property.\n    -   The third card should have its content vertically aligned to the bottom, overriding the container's `align-items`.\n",
          "difficulty": "hard",
          "startingCode": "<!-- HTML -->\n<div class=\"cards-container\">\n  <div class=\"card card-1\">Card 1</div>\n  <div class=\"card card-2\">Card 2 (Last)</div>\n  <div class=\"card card-3\">Card 3 (Bottom Aligned)</div>\n  <div class=\"card card-4\">Card 4</div>\n  <div class=\"card card-5\">Card 5</div>\n</div>\n\n/* CSS */\n.cards-container {\n  border: 2px dashed #007bff;\n  min-height: 400px; /* For align-content to be visible */\n  /* Your flex container styles here */\n}\n\n.card {\n  background-color: #e0f7fa;\n  padding: 20px;\n  border: 1px solid #007bff;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  text-align: center;\n  /* Your flex item styles here */\n}\n\n.card-2 {\n  /* Style for card 2 */\n}\n\n.card-3 {\n  /* Style for card 3 */\n}\n",
          "solutionCode": "<!-- HTML -->\n<div class=\"cards-container\">\n  <div class=\"card card-1\">Card 1</div>\n  <div class=\"card card-2\">Card 2 (Last)</div>\n  <div class=\"card card-3\">Card 3 (Bottom Aligned)</div>\n  <div class=\"card card-4\">Card 4</div>\n  <div class=\"card card-5\">Card 5</div>\n</div>\n\n/* CSS */\n.cards-container {\n  display: flex;\n  flex-direction: row; /* Requirement 4.1: Items in a row */\n  flex-wrap: wrap;     /* Requirement 4.2: Items wrap */\n  justify-content: center; /* Requirement 4.3: Horizontally centered */\n  align-items: flex-start; /* Default for individual items, can be overridden */\n  align-content: center; /* Requirement 4.4: Lines vertically centered */\n  gap: 20px;           /* Requirement 4.5: 20px gap */\n  \n  border: 2px dashed #007bff;\n  min-height: 400px; /* For align-content to be visible */\n  padding: 10px;\n}\n\n.card {\n  background-color: #e0f7fa;\n  padding: 20px;\n  border: 1px solid #007bff;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  text-align: center;\n  \n  /* Requirement 5.1: Flexible width for 2-3 cards per row */\n  /* flex-basis: 200px; Allows for minimum 200px, then grow/shrink */\n  flex: 1 1 calc(33.33% - 40px); /* 33.33% for 3 items, adjust for gap */\n                                /* Or simpler: flex: 1 1 200px; (will adjust, more fluid) */\n                                /* Let's use flex: 1 1 250px; as it's common for cards and simpler calculation */\n  min-width: 250px; /* ensures cards don't get too small */\n  max-width: 300px; /* optional, to prevent cards from getting too big */\n\n  /* Add specific order for demo clarity, without it, flex: 1 1 250px would be okay for sizing */\n  flex-grow: 1; /* Allow cards to grow if space permits */\n  flex-shrink: 1; /* Allow cards to shrink if space is tight */\n  flex-basis: 250px; /* Suggested base width */\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.card-2 {\n  order: 99; /* Requirement 5.2: Make it last, arbitrarily high number */\n}\n\n.card-3 {\n  align-self: flex-end; /* Requirement 5.3: Vertical align to bottom */\n  background-color: #ffe0b2; /* Distinct color for visual clarity */\n}\n\n/* Media query to ensure single column on small screens */\n@media (max-width: 600px) {\n  .card {\n    flex-basis: 100%; /* Take full width on small screens */\n  }\n}\n",
          "testCases": [
            "Cards should be arranged in a row by default.",
            "Cards should wrap to the next line when the container is narrow.",
            "Cards (or lines of cards) should be horizontally centered within the container.",
            "Multiple lines of cards should be vertically centered within the container's available height.",
            "There should be a consistent 20px gap between all cards (horizontally and vertically).",
            "The card containing 'Card 2' should appear as the very last item in the layout, regardless of its HTML position.",
            "The content of the card containing 'Card 3' should be aligned to the bottom of its card space.",
            "On narrow screens (e.g., less than 600px), cards should ideally stack into a single column."
          ],
          "hints": [
            "Remember that `justify-content` aligns along the main axis, and `align-items` aligns along the cross axis.",
            "`align-content` is for aligning *lines* of flex items when `flex-wrap` is set to `wrap`.",
            "The `flex` shorthand property is powerful for item sizing: `flex: <grow> <shrink> <basis>;`.",
            "`order` property is used to change the visual order of flex items.",
            "`align-self` can override the container's `align-items` for a specific item.",
            "Consider adding `min-height` to the container to observe the effects of `align-content`."
          ],
          "tags": [
            "CSS",
            "Flexbox",
            "Responsive Design",
            "Layout",
            "Interview Task"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "flexbox",
            "media_queries",
            "box_model"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "advanced",
          "relatedConcepts": [
            "css_grid",
            "responsive_images"
          ]
        }
      ]
    }
  }
]